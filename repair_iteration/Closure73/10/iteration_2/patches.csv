bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(first.getType()  ==  Token.STRING  &&  childCount  ==  ((  n.getNext()!=  null  &&  n.getNext().getType()  ==  Token.FUNCTION)?  1  :  0))  {  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first.getType()  ==  Token.STRING  &&  childCount  ==  ((  n.getNext()!=  null  &&  n.getNext().getType()  ==  Token.FUNCTION)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(first.getType()  ==  Token.STRING  &&  childCount  ==  ((  n.getNext()!=  null  &&  n.getNext().getType()  ==  Token.FUNCTION)?  1  :  0))  {	  if(n.getType()    ==    Token.STRING    &&    childCount    ==    ((    n.getNext()!=    null    &&    n.getNext().getType()    ==    Token.FUNCTION)?    1    :    0))    {    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
2	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING  ||  childCount  ==  ((  n.getNext()!=  null  &&  n.getNext().getType()  ==  Token.FUNCTION)?  1  :  0))  {  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getType()  ==  Token.STRING  ||  childCount  ==  ((  n.getNext()!=  null  &&  n.getNext().getType()  ==  Token.FUNCTION)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(n.getType()  ==  Token.STRING  ||  childCount  ==  ((  n.getNext()!=  null  &&  n.getNext().getType()  ==  Token.FUNCTION)?  1  :  0))  {	  if(n.getType()    ==    Token.STRING    &&    childCount    ==    ((    n.getNext()!=    null    &&    n.getNext().getType()    ==    Token.FUNCTION)?    1    :    0))    {    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
3	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING  &&  childCount  ==  ((  first.getNext()!=  null  &&  first.getNext().getType()  ==  Token.FUNCTION)?  1  :  0))  {  [CE]  illegal  start  of  expression  [FE]                                    ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getType()  ==  Token.STRING  &&  childCount  ==  ((  first.getNext()!=  null  &&  first.getNext().getType()  ==  Token.FUNCTION)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(n.getType()  ==  Token.STRING  &&  childCount  ==  ((  first.getNext()!=  null  &&  first.getNext().getType()  ==  Token.FUNCTION)?  1  :  0))  {	  if(n.getType()    ==    Token.STRING    &&    childCount    ==    ((    n.getNext()!=    null    &&    n.getNext().getType()    ==    Token.FUNCTION)?    1    :    0))    {    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
4	[BUG]  [BUGGY]  if(first.getType()  ==  Token.STRING  &&  childCount  ==  ((  n.getNext()!=  null  &&  first.getNext().getType()  ==  Token.FUNCTION)?  1  :  0))  {  [CE]  illegal  start  of  expression  [FE]                                      ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first.getType()  ==  Token.STRING  &&  childCount  ==  ((  n.getNext()!=  null  &&  first.getNext().getType()  ==  Token.FUNCTION)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(first.getType()  ==  Token.STRING  &&  childCount  ==  ((  n.getNext()!=  null  &&  first.getNext().getType()  ==  Token.FUNCTION)?  1  :  0))  {	  if(n.getType()    ==    Token.STRING    &&    childCount    ==    ((    n.getNext()!=    null    &&    n.getNext().getType()    ==    Token.FUNCTION)?    1    :    0))    {    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
5	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING  &&  childCount  ==  ((  n.getNext()!=  null  &&  first.getNext().getType()  ==  Token.FUNCTION)?  1  :  0))  {  [CE]  illegal  start  of  expression  [FE]                                        ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getType()  ==  Token.STRING  &&  childCount  ==  ((  n.getNext()!=  null  &&  first.getNext().getType()  ==  Token.FUNCTION)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(n.getType()  ==  Token.STRING  &&  childCount  ==  ((  n.getNext()!=  null  &&  first.getNext().getType()  ==  Token.FUNCTION)?  1  :  0))  {	  if(n.getType()    ==    Token.STRING    &&    childCount    ==    ((    n.getNext()!=    null    &&    n.getNext().getType()    ==    Token.FUNCTION)?    1    :    0))    {    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
6	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING  &&  childCount  ==  ((  n.getParent()!=  null  &&  n.getNext().getType()  ==  Token.FUNCTION)?  1  :  0))  {  [CE]  illegal  start  of  expression  [FE]                                          ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getType()  ==  Token.STRING  &&  childCount  ==  ((  n.getParent()!=  null  &&  n.getNext().getType()  ==  Token.FUNCTION)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(n.getType()  ==  Token.STRING  &&  childCount  ==  ((  n.getParent()!=  null  &&  n.getNext().getType()  ==  Token.FUNCTION)?  1  :  0))  {	  if(n.getType()    ==    Token.STRING    &&    childCount    ==    ((    n.getNext()!=    null    &&    n.getNext().getType()    ==    Token.FUNCTION)?    1    :    0))    {    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
7	[BUG]  [BUGGY]  if(first.getType()  ==  Token.STRING  ||  first.getNext()!=  null)  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first.getType()  ==  Token.STRING  ||  first.getNext()!=  null)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(first.getType()  ==  Token.STRING  ||  first.getNext()!=  null)  {	  if(first.getType()    ==    Token.STRING    &&    first.getNext()!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
8	[BUG]  [BUGGY]  if(first.getType()  ==  Token.STRING  &&  first.getParent()!=  null)  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first.getType()  ==  Token.STRING  &&  first.getParent()!=  null)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(first.getType()  ==  Token.STRING  &&  first.getParent()!=  null)  {	  if(first.getType()    ==    Token.STRING    &&    first.getNext()!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
9	[BUG]  [BUGGY]  if(first.getType()  ==  Token.STRING  &&  next.getNext()!=  null)  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first.getType()  ==  Token.STRING  &&  next.getNext()!=  null)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(first.getType()  ==  Token.STRING  &&  next.getNext()!=  null)  {	  if(first.getType()    ==    Token.STRING    &&    first.getNext()!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
10	[BUG]  [BUGGY]  if(context.getType()  ==  Token.STRING  &&  first.getNext()!=  null)  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(context.getType()  ==  Token.STRING  &&  first.getNext()!=  null)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(context.getType()  ==  Token.STRING  &&  first.getNext()!=  null)  {	  if(first.getType()    ==    Token.STRING    &&    first.getNext()!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
11	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(n)&&  childCount  ==  ((  n.getString()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isExpressionNode(n)&&  childCount  ==  ((  n.getString()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(NodeUtil.isExpressionNode(n)&&  childCount  ==  ((  n.getString()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {	  if(NodeUtil.isExpressionNode(first)&&    childCount    ==    ((    n.getString()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    	non-compiled	[CE]  illegal  start  of  expression	110	None	replace
12	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(first)||  childCount  ==  ((  n.getString()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isExpressionNode(first)||  childCount  ==  ((  n.getString()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(NodeUtil.isExpressionNode(first)||  childCount  ==  ((  n.getString()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {	  if(NodeUtil.isExpressionNode(first)&&    childCount    ==    ((    n.getString()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    	non-compiled	[CE]  illegal  start  of  expression	110	None	replace
13	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(first)&&  childCount  ==  ((  n.getString()!=  null  &&  n.getNext().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isExpressionNode(first)&&  childCount  ==  ((  n.getString()!=  null  &&  n.getNext().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(NodeUtil.isExpressionNode(first)&&  childCount  ==  ((  n.getString()!=  null  &&  n.getNext().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {	  if(NodeUtil.isExpressionNode(first)&&    childCount    ==    ((    n.getString()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    	non-compiled	[CE]  illegal  start  of  expression	110	None	replace
14	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(n)&&  childCount  ==  ((  n.getString()!=  null  &&  n.getNext().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isExpressionNode(n)&&  childCount  ==  ((  n.getString()!=  null  &&  n.getNext().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(NodeUtil.isExpressionNode(n)&&  childCount  ==  ((  n.getString()!=  null  &&  n.getNext().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {	  if(NodeUtil.isExpressionNode(first)&&    childCount    ==    ((    n.getString()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    	non-compiled	[CE]  illegal  start  of  expression	110	None	replace
15	[BUG]  [BUGGY]  if(first.getType()  ==  Token.STRING  ||  first.getFirstChild()!=  null)  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first.getType()  ==  Token.STRING  ||  first.getFirstChild()!=  null)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(first.getType()  ==  Token.STRING  ||  first.getFirstChild()!=  null)  {	  if(first.getType()    ==    Token.STRING    &&    first.getFirstChild()!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
16	[BUG]  [BUGGY]  if(first.getType()  ==  Token.STRING  &&  first.getLastChild()!=  null)  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first.getType()  ==  Token.STRING  &&  first.getLastChild()!=  null)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(first.getType()  ==  Token.STRING  &&  first.getLastChild()!=  null)  {	  if(first.getType()    ==    Token.STRING    &&    first.getFirstChild()!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
17	[BUG]  [BUGGY]  if(context.getType()  ==  Token.STRING  &&  first.getFirstChild()!=  null)  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(context.getType()  ==  Token.STRING  &&  first.getFirstChild()!=  null)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(context.getType()  ==  Token.STRING  &&  first.getFirstChild()!=  null)  {	  if(first.getType()    ==    Token.STRING    &&    first.getFirstChild()!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
18	[BUG]  [BUGGY]  if(first.getType()!=  Token.STRING  &&  first.getFirstChild()!=  null)  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first.getType()!=  Token.STRING  &&  first.getFirstChild()!=  null)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(first.getType()!=  Token.STRING  &&  first.getFirstChild()!=  null)  {	  if(first.getType()    ==    Token.STRING    &&    first.getFirstChild()!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
19	[BUG]  [BUGGY]  if(childCount  ==  1  ||  first.getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  1  ||  first.getType()  ==  Token.FUNCTION)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(childCount  ==  1  ||  first.getType()  ==  Token.FUNCTION)  {	  if(childCount    ==    1    &&    first.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  illegal  start  of  expression	128	None	replace
20	[BUG]  [BUGGY]  if(childCount  ==  1  &&  first.getNext().getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  1  &&  first.getNext().getType()  ==  Token.FUNCTION)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(childCount  ==  1  &&  first.getNext().getType()  ==  Token.FUNCTION)  {	  if(childCount    ==    1    &&    first.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  illegal  start  of  expression	128	None	replace
21	[BUG]  [BUGGY]  if(first.getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first.getType()  ==  Token.FUNCTION)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(first.getType()  ==  Token.FUNCTION)  {	  if(childCount    ==    1    &&    first.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  illegal  start  of  expression	128	None	replace
22	[BUG]  [BUGGY]  if(childCount  ==  1  &&  next.getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  1  &&  next.getType()  ==  Token.FUNCTION)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(childCount  ==  1  &&  next.getType()  ==  Token.FUNCTION)  {	  if(childCount    ==    1    &&    first.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  illegal  start  of  expression	128	None	replace
23	[BUG]  [BUGGY]  if(childCount  ==  1  &&  first.getType()!=  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  1  &&  first.getType()!=  Token.FUNCTION)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(childCount  ==  1  &&  first.getType()!=  Token.FUNCTION)  {	  if(childCount    ==    1    &&    first.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  illegal  start  of  expression	128	None	replace
24	[BUG]  [BUGGY]  if(first.getType()  ==  Token.STRING  ||  first.getString().equals( "string "))  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first.getType()  ==  Token.STRING  ||  first.getString().equals( "string "))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(first.getType()  ==  Token.STRING  ||  first.getString().equals( "string "))  {	  if(n.getType()    ==    Token.STRING    ||    first.getString().equals(   "string   "))    {    	non-compiled	[CE]  illegal  start  of  expression	146	None	replace
25	[BUG]  [BUGGY]  if(first.getType()  ==  Token.STRING  ||  second.getString().equals( "string "))  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first.getType()  ==  Token.STRING  ||  second.getString().equals( "string "))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(first.getType()  ==  Token.STRING  ||  second.getString().equals( "string "))  {	  if(n.getType()    ==    Token.STRING    ||    first.getString().equals(   "string   "))    {    	non-compiled	[CE]  illegal  start  of  expression	146	None	replace
26	[BUG]  [BUGGY]  if(first.getType()  ==  Token.STRING  ||  next.getString().equals( "string "))  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first.getType()  ==  Token.STRING  ||  next.getString().equals( "string "))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(first.getType()  ==  Token.STRING  ||  next.getString().equals( "string "))  {	  if(n.getType()    ==    Token.STRING    ||    first.getString().equals(   "string   "))    {    	non-compiled	[CE]  illegal  start  of  expression	146	None	replace
27	[BUG]  [BUGGY]  if(n.getType()!=  Token.STRING  &&  first.getString().equals( "string "))  {  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getType()!=  Token.STRING  &&  first.getString().equals( "string "))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(n.getType()!=  Token.STRING  &&  first.getString().equals( "string "))  {	  if(n.getType()    ==    Token.STRING    ||    first.getString().equals(   "string   "))    {    	non-compiled	[CE]  illegal  start  of  expression	146	None	replace
28	[BUG]  [BUGGY]  if(First.getType()  ==  Token.STRING  ||  first.getString().equals( "string "))  {  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(First.getType()  ==  Token.STRING  ||  first.getString().equals( "string "))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(First.getType()  ==  Token.STRING  ||  first.getString().equals( "string "))  {	  if(n.getType()    ==    Token.STRING    ||    first.getString().equals(   "string   "))    {    	non-compiled	[CE]  illegal  start  of  expression	146	None	replace
29	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING  &&  first.getFirstChild()  ==  null)  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getType()  ==  Token.STRING  &&  first.getFirstChild()  ==  null)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(n.getType()  ==  Token.STRING  &&  first.getFirstChild()  ==  null)  {	  if(first.getType()    ==    Token.STRING    &&    first.getFirstChild()    ==    null)    {    	non-compiled	[CE]  illegal  start  of  expression	152	None	replace
30	[BUG]  [BUGGY]  if(first.getType()  ==  Token.STRING  ||  first.getFirstChild()  ==  null)  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first.getType()  ==  Token.STRING  ||  first.getFirstChild()  ==  null)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(first.getType()  ==  Token.STRING  ||  first.getFirstChild()  ==  null)  {	  if(first.getType()    ==    Token.STRING    &&    first.getFirstChild()    ==    null)    {    	non-compiled	[CE]  illegal  start  of  expression	152	None	replace
31	[BUG]  [BUGGY]  if(first.getType()  ==  Token.STRING  &&  first.getLastChild()  ==  null)  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first.getType()  ==  Token.STRING  &&  first.getLastChild()  ==  null)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(first.getType()  ==  Token.STRING  &&  first.getLastChild()  ==  null)  {	  if(first.getType()    ==    Token.STRING    &&    first.getFirstChild()    ==    null)    {    	non-compiled	[CE]  illegal  start  of  expression	152	None	replace
32	[BUG]  [BUGGY]  if(context.getType()  ==  Token.STRING  &&  first.getFirstChild()  ==  null)  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(context.getType()  ==  Token.STRING  &&  first.getFirstChild()  ==  null)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(context.getType()  ==  Token.STRING  &&  first.getFirstChild()  ==  null)  {	  if(first.getType()    ==    Token.STRING    &&    first.getFirstChild()    ==    null)    {    	non-compiled	[CE]  illegal  start  of  expression	152	None	replace
33	[BUG]  [BUGGY]  if(first.getType()  ==  Token.STRING  &&  first.getNext()  ==  null)  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first.getType()  ==  Token.STRING  &&  first.getNext()  ==  null)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(first.getType()  ==  Token.STRING  &&  first.getNext()  ==  null)  {	  if(first.getType()    ==    Token.STRING    &&    first.getFirstChild()    ==    null)    {    	non-compiled	[CE]  illegal  start  of  expression	152	None	replace
34	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING  &&  childCount  ==  ((  n.getLastChild()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getType()  ==  Token.STRING  &&  childCount  ==  ((  n.getLastChild()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(n.getType()  ==  Token.STRING  &&  childCount  ==  ((  n.getLastChild()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {	  if(n.getType()!=    Token.STRING    &&    childCount    ==    ((    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
35	[BUG]  [BUGGY]  if(first.getType()!=  Token.STRING  &&  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first.getType()!=  Token.STRING  &&  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(first.getType()!=  Token.STRING  &&  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {	  if(n.getType()!=    Token.STRING    &&    childCount    ==    ((    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
36	[BUG]  [BUGGY]  if(first.getType()  ==  Token.STRING  &&  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first.getType()  ==  Token.STRING  &&  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(first.getType()  ==  Token.STRING  &&  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {	  if(first.getType()    ==    Token.STRING    &&    childCount!=    ((    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    	non-compiled	[CE]  illegal  start  of  expression	113	None	replace
37	[BUG]  [BUGGY]  if(first.getType()  ==  Token.STRING  &&  childCount!=  ((  n.getNext()!=  null  &&  n.getNext().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first.getType()  ==  Token.STRING  &&  childCount!=  ((  n.getNext()!=  null  &&  n.getNext().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(first.getType()  ==  Token.STRING  &&  childCount!=  ((  n.getNext()!=  null  &&  n.getNext().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {	  if(first.getType()    ==    Token.STRING    &&    childCount!=    ((    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    	non-compiled	[CE]  illegal  start  of  expression	113	None	replace
38	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING  &&  childCount!=  ((  first.getParent()!=  null  &&  first.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getType()  ==  Token.STRING  &&  childCount!=  ((  first.getParent()!=  null  &&  first.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(n.getType()  ==  Token.STRING  &&  childCount!=  ((  first.getParent()!=  null  &&  first.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {	  if(first.getType()    ==    Token.STRING    &&    childCount!=    ((    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    	non-compiled	[CE]  illegal  start  of  expression	113	None	replace
39	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(n)&&  childCount  ==  ((  first.getNext()!=  null  &&  first.getParent().getType()  ==  Token.STRING)?  1  :  0))  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isExpressionNode(n)&&  childCount  ==  ((  first.getNext()!=  null  &&  first.getParent().getType()  ==  Token.STRING)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(NodeUtil.isExpressionNode(n)&&  childCount  ==  ((  first.getNext()!=  null  &&  first.getParent().getType()  ==  Token.STRING)?  1  :  0))  {	  if(NodeUtil.isExpressionNode(n)&&    childCount    ==    ((    n.getNext()!=    null    &&    n.getParent().getType()    ==    Token.STRING)?    1    :    0))    {    	non-compiled	[CE]  illegal  start  of  expression	151	None	replace
40	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(n)||  childCount  ==  ((  n.getNext()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isExpressionNode(n)||  childCount  ==  ((  n.getNext()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(NodeUtil.isExpressionNode(n)||  childCount  ==  ((  n.getNext()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {	  if(NodeUtil.isExpressionNode(n)&&    childCount    ==    ((    n.getNext()!=    null    &&    n.getParent().getType()    ==    Token.STRING)?    1    :    0))    {    	non-compiled	[CE]  illegal  start  of  expression	151	None	replace
41	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(n)&&  childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isExpressionNode(n)&&  childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(NodeUtil.isExpressionNode(n)&&  childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {	  if(NodeUtil.isExpressionNode(n)&&    childCount    ==    ((    n.getNext()!=    null    &&    n.getParent().getType()    ==    Token.STRING)?    1    :    0))    {    	non-compiled	[CE]  illegal  start  of  expression	151	None	replace
42	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING  ||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.FUNCTION)?  1  :  0))  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getType()  ==  Token.STRING  ||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.FUNCTION)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(n.getType()  ==  Token.STRING  ||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.FUNCTION)?  1  :  0))  {	  if(n.getType()    ==    Token.STRING    ||    childCount!=    ((    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.FUNCTION)?    1    :    0))    {    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
43	[BUG]  [BUGGY]  if(n.getType()!=  Token.STRING  &&  childCount!=  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.FUNCTION)?  1  :  0))  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getType()!=  Token.STRING  &&  childCount!=  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.FUNCTION)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(n.getType()!=  Token.STRING  &&  childCount!=  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.FUNCTION)?  1  :  0))  {	  if(n.getType()    ==    Token.STRING    ||    childCount!=    ((    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.FUNCTION)?    1    :    0))    {    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
44	[BUG]  [BUGGY]  if(first.getType()  ==  Token.STRING  ||  childCount!=  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.FUNCTION)?  1  :  0))  {  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first.getType()  ==  Token.STRING  ||  childCount!=  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.FUNCTION)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(first.getType()  ==  Token.STRING  ||  childCount!=  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.FUNCTION)?  1  :  0))  {	  if(n.getType()    ==    Token.STRING    ||    childCount!=    ((    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.FUNCTION)?    1    :    0))    {    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
45	[BUG]  [BUGGY]  if(first!=  null  ||  first.getFirstChild().getType()  ==  Token.STRING)  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first!=  null  ||  first.getFirstChild().getType()  ==  Token.STRING)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(first!=  null  ||  first.getFirstChild().getType()  ==  Token.STRING)  {	  if(first    ==    null    ||    first.getFirstChild().getType()    ==    Token.STRING)    {    	non-compiled	[CE]  illegal  start  of  expression	153	None	replace
46	[BUG]  [BUGGY]  if(first  ==  null  &&  first.getFirstChild().getType()  ==  Token.STRING)  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first  ==  null  &&  first.getFirstChild().getType()  ==  Token.STRING)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(first  ==  null  &&  first.getFirstChild().getType()  ==  Token.STRING)  {	  if(first    ==    null    ||    first.getFirstChild().getType()    ==    Token.STRING)    {    	non-compiled	[CE]  illegal  start  of  expression	153	None	replace
47	[BUG]  [BUGGY]  if(first!=  null  &&  first.getFirstChild().getType()  ==  Token.STRING)  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first!=  null  &&  first.getFirstChild().getType()  ==  Token.STRING)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(first!=  null  &&  first.getFirstChild().getType()  ==  Token.STRING)  {	  if(first    ==    null    ||    first.getFirstChild().getType()    ==    Token.STRING)    {    	non-compiled	[CE]  illegal  start  of  expression	153	None	replace
48	[BUG]  [BUGGY]  if(n  ==  null  ||  first.getFirstChild().getType()  ==  Token.STRING)  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n  ==  null  ||  first.getFirstChild().getType()  ==  Token.STRING)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(n  ==  null  ||  first.getFirstChild().getType()  ==  Token.STRING)  {	  if(first    ==    null    ||    first.getFirstChild().getType()    ==    Token.STRING)    {    	non-compiled	[CE]  illegal  start  of  expression	153	None	replace
49	[BUG]  [BUGGY]  if(first  ==  null  ||  first.getLastChild().getType()  ==  Token.STRING)  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first  ==  null  ||  first.getLastChild().getType()  ==  Token.STRING)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(first  ==  null  ||  first.getLastChild().getType()  ==  Token.STRING)  {	  if(first    ==    null    ||    first.getFirstChild().getType()    ==    Token.STRING)    {    	non-compiled	[CE]  illegal  start  of  expression	153	None	replace
50	[BUG]  [BUGGY]  if(first  ==  null  ||  first.getFirstChild().getType()!=  Token.STRING)  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first  ==  null  ||  first.getFirstChild().getType()!=  Token.STRING)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(first  ==  null  ||  first.getFirstChild().getType()!=  Token.STRING)  {	  if(first    ==    null    ||    first.getFirstChild().getType()    ==    Token.STRING)    {    	non-compiled	[CE]  illegal  start  of  expression	153	None	replace
51	[BUG]  [BUGGY]  if(first.getType()  ==  Token.STRING  &&  first.getType()  ==  Token.STRING)  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first.getType()  ==  Token.STRING  &&  first.getType()  ==  Token.STRING)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(first.getType()  ==  Token.STRING  &&  first.getType()  ==  Token.STRING)  {	  if(first.getType()    ==    Token.STRING    ||    first.getType()    ==    Token.STRING)    {    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
52	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING  ||  first.getType()  ==  Token.STRING)  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getType()  ==  Token.STRING  ||  first.getType()  ==  Token.STRING)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(n.getType()  ==  Token.STRING  ||  first.getType()  ==  Token.STRING)  {	  if(first.getType()    ==    Token.STRING    ||    first.getType()    ==    Token.STRING)    {    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
53	[BUG]  [BUGGY]  if(first.getType()  ==  Token.STRING  ||  first.getType()!=  Token.STRING)  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first.getType()  ==  Token.STRING  ||  first.getType()!=  Token.STRING)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(first.getType()  ==  Token.STRING  ||  first.getType()!=  Token.STRING)  {	  if(first.getType()    ==    Token.STRING    ||    first.getType()    ==    Token.STRING)    {    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
54	[BUG]  [BUGGY]  if(first.getType()!=  Token.STRING  &&  first.getType()  ==  Token.STRING)  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first.getType()!=  Token.STRING  &&  first.getType()  ==  Token.STRING)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(first.getType()!=  Token.STRING  &&  first.getType()  ==  Token.STRING)  {	  if(first.getType()    ==    Token.STRING    ||    first.getType()    ==    Token.STRING)    {    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
55	[BUG]  [BUGGY]  if(first.getType()!=  Token.STRING  ||  first.getType()  ==  Token.STRING)  {  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first.getType()!=  Token.STRING  ||  first.getType()  ==  Token.STRING)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(first.getType()!=  Token.STRING  ||  first.getType()  ==  Token.STRING)  {	  if(first.getType()    ==    Token.STRING    ||    first.getType()    ==    Token.STRING)    {    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
56	[BUG]  [BUGGY]  if(first.getType()  ==  Token.STRING  ||  second.getType()  ==  Token.STRING)  {  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first.getType()  ==  Token.STRING  ||  second.getType()  ==  Token.STRING)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(first.getType()  ==  Token.STRING  ||  second.getType()  ==  Token.STRING)  {	  if(first.getType()    ==    Token.STRING    ||    first.getType()    ==    Token.STRING)    {    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
57	[BUG]  [BUGGY]  if(n.getType()  ==  Token.FUNCTION  ||  first.getNext().getType()  ==  Token.STRING)  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getType()  ==  Token.FUNCTION  ||  first.getNext().getType()  ==  Token.STRING)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(n.getType()  ==  Token.FUNCTION  ||  first.getNext().getType()  ==  Token.STRING)  {	  if(n.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
58	[BUG]  [BUGGY]  if(n.getType()  ==  Token.FUNCTION  ||  first.getFirstChild().getType()  ==  Token.STRING)  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getType()  ==  Token.FUNCTION  ||  first.getFirstChild().getType()  ==  Token.STRING)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(n.getType()  ==  Token.FUNCTION  ||  first.getFirstChild().getType()  ==  Token.STRING)  {	  if(n.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
59	[BUG]  [BUGGY]  if(n.getType()  ==  Token.FUNCTION  &&  first.getString().equals( "string "))  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getType()  ==  Token.FUNCTION  &&  first.getString().equals( "string "))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(n.getType()  ==  Token.FUNCTION  &&  first.getString().equals( "string "))  {	  if(n.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
60	[BUG]  [BUGGY]  if(n.getType()  ==  Token.FUNCTION  ||  first.getString().equals( "string "))  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getType()  ==  Token.FUNCTION  ||  first.getString().equals( "string "))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(n.getType()  ==  Token.FUNCTION  ||  first.getString().equals( "string "))  {	  if(n.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
61	[BUG]  [BUGGY]  if(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.STRING)  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.STRING)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.STRING)  {	  if(n.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
62	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(first)||  NodeUtil.isFunctionDeclaration(first))  {  [CE]  not  a  statement  [FE]                        ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isExpressionNode(first)||  NodeUtil.isFunctionDeclaration(first))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(NodeUtil.isExpressionNode(first)||  NodeUtil.isFunctionDeclaration(first))  {	  if(NodeUtil.isExpressionNode(first)&&    NodeUtil.isFunctionDeclaration(first))    {    	non-compiled	[CE]  not  a  statement	123	None	replace
63	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(n)&&  NodeUtil.isFunctionDeclaration(first))  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isExpressionNode(n)&&  NodeUtil.isFunctionDeclaration(first))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(NodeUtil.isExpressionNode(n)&&  NodeUtil.isFunctionDeclaration(first))  {	  if(NodeUtil.isExpressionNode(first)&&    NodeUtil.isFunctionDeclaration(first))    {    	non-compiled	[CE]  illegal  start  of  expression	123	None	replace
64	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(first)&&  NodeUtil.isFunctionDeclaration(n))  {  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isExpressionNode(first)&&  NodeUtil.isFunctionDeclaration(n))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(NodeUtil.isExpressionNode(first)&&  NodeUtil.isFunctionDeclaration(n))  {	  if(NodeUtil.isExpressionNode(first)&&    NodeUtil.isFunctionDeclaration(first))    {    	non-compiled	[CE]  illegal  start  of  expression	123	None	replace
65	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(first)&&  NodeUtil.isStringDeclaration(first))  {  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isExpressionNode(first)&&  NodeUtil.isStringDeclaration(first))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(NodeUtil.isExpressionNode(first)&&  NodeUtil.isStringDeclaration(first))  {	  if(NodeUtil.isExpressionNode(first)&&    NodeUtil.isFunctionDeclaration(first))    {    	non-compiled	[CE]  illegal  start  of  expression	123	None	replace
66	[BUG]  [BUGGY]  if(NodeUtil.isName(first)&&  NodeUtil.isFunctionDeclaration(first))  {  [CE]  not  a  statement  [FE]                                ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isName(first)&&  NodeUtil.isFunctionDeclaration(first))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(NodeUtil.isName(first)&&  NodeUtil.isFunctionDeclaration(first))  {	  if(NodeUtil.isExpressionNode(first)&&    NodeUtil.isFunctionDeclaration(first))    {    	non-compiled	[CE]  not  a  statement	123	None	replace
67	[BUG]  [BUGGY]  if(NodeUtil.isFunctionDeclaration(first)&&  NodeUtil.isExpressionNode(first))  {  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isFunctionDeclaration(first)&&  NodeUtil.isExpressionNode(first))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(NodeUtil.isFunctionDeclaration(first)&&  NodeUtil.isExpressionNode(first))  {	  if(NodeUtil.isExpressionNode(first)&&    NodeUtil.isFunctionDeclaration(first))    {    	non-compiled	[CE]  illegal  start  of  expression	123	None	replace
68	[BUG]  [BUGGY]  Node  first  =  n.getNext();  [CE]  not  a  statement  [FE]                                      ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  Node  first  =  n.getNext();  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	Node  first  =  n.getNext();	  Node    first    =    first.getNext();    	non-compiled	[CE]  not  a  statement	59	None	replace
69	[BUG]  [BUGGY]  Node  first  =  context.getFirstChild();  [CE]  not  a  statement  [FE]                                        ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  Node  first  =  context.getFirstChild();  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	Node  first  =  context.getFirstChild();	  Node    first    =    first.getNext();    	non-compiled	[CE]  not  a  statement	59	None	replace
70	[BUG]  [BUGGY]  Node  first  =  next.getNext();  [CE]  illegal  start  of  expression  [FE]                                          ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  Node  first  =  next.getNext();  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	Node  first  =  next.getNext();	  Node    first    =    first.getNext();    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
71	[BUG]  [BUGGY]  Node  first  =  context.getScope().getFirstChild();  [CE]  illegal  start  of  expression  [FE]                                            ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  Node  first  =  context.getScope().getFirstChild();  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	Node  first  =  context.getScope().getFirstChild();	  Node    first    =    first.getNext();    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
72	[BUG]  [BUGGY]  Node  first  =  node.getNext();  [CE]  illegal  start  of  expression  [FE]                                              ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  Node  first  =  node.getNext();  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	Node  first  =  node.getNext();	  Node    first    =    first.getNext();    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
73	[BUG]  [BUGGY]  Node  first  =  context.getCurrentNode();  [CE]  illegal  start  of  expression  [FE]                                                ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  Node  first  =  context.getCurrentNode();  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	Node  first  =  context.getCurrentNode();	  Node    first    =    first.getNext();    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
74	[BUG]  [BUGGY]  Node  first  =  context.getScope().getLastChild();  [CE]  not  a  statement  [FE]                                                  ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  Node  first  =  context.getScope().getLastChild();  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	Node  first  =  context.getScope().getLastChild();	  Node    first    =    first.getNext();    	non-compiled	[CE]  not  a  statement	59	None	replace
75	[BUG]  [BUGGY]  if(n.getParent()!=  null  &&  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getParent()!=  null  &&  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(n.getParent()!=  null  &&  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {	  if(n.getParent()!=    null    &&    childCount!=    ((    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
76	[BUG]  [BUGGY]  if(n.getParent()!=  null  &&  childCount!=  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {  [CE]  not  a  statement  [FE]                      ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getParent()!=  null  &&  childCount!=  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(n.getParent()!=  null  &&  childCount!=  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {	  if(n.getParent()!=    null    &&    childCount!=    ((    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    	non-compiled	[CE]  not  a  statement	74	None	replace
77	[BUG]  [BUGGY]  if(n.getParent()!=  null  &&  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {  [CE]  not  a  statement  [FE]                        ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getParent()!=  null  &&  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(n.getParent()!=  null  &&  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {	  if(n.getParent()!=    null    &&    childCount!=    ((    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    	non-compiled	[CE]  not  a  statement	74	None	replace
78	[BUG]  [BUGGY]  if(n.getParent()!=  null  &&  childCount!=  ((  n.getParent()  ==  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [CE]  not  a  statement  [FE]                          ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getParent()!=  null  &&  childCount!=  ((  n.getParent()  ==  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(n.getParent()!=  null  &&  childCount!=  ((  n.getParent()  ==  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {	  if(n.getParent()!=    null    &&    childCount!=    ((    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    	non-compiled	[CE]  not  a  statement	74	None	replace
79	[BUG]  [BUGGY]  if(n.getFirstChild()!=  null  &&  childCount!=  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [CE]  not  a  statement  [FE]                            ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getFirstChild()!=  null  &&  childCount!=  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(n.getFirstChild()!=  null  &&  childCount!=  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {	  if(n.getParent()!=    null    &&    childCount!=    ((    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    	non-compiled	[CE]  not  a  statement	74	None	replace
80	[BUG]  [BUGGY]  Context  cc  =  getCurrentContext();  [CE]  not  a  statement  [FE]                                  ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  Context  cc  =  getCurrentContext();  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	Context  cc  =  getCurrentContext();	  Context    cc    =    getContext();    	non-compiled	[CE]  not  a  statement	57	None	replace
81	[BUG]  [BUGGY]  Context  cc  =  getCallbackContext();  [CE]  illegal  start  of  expression  [FE]                                    ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  Context  cc  =  getCallbackContext();  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	Context  cc  =  getCallbackContext();	  Context    cc    =    getContext();    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
82	[BUG]  [BUGGY]  Context  cc  =  getCallback();  [CE]  illegal  start  of  expression  [FE]                                      ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  Context  cc  =  getCallback();  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	Context  cc  =  getCallback();	  Context    cc    =    getContext();    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
83	[BUG]  [BUGGY]  Context  cc  =  getCallContext();  [CE]  not  a  statement  [FE]                                        ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  Context  cc  =  getCallContext();  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	Context  cc  =  getCallContext();	  Context    cc    =    getContext();    	non-compiled	[CE]  not  a  statement	57	None	replace
84	[BUG]  [BUGGY]  Context  cc  =  createContext();  [CE]  illegal  start  of  expression  [FE]                                          ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  Context  cc  =  createContext();  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	Context  cc  =  createContext();	  Context    cc    =    getContext();    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
85	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(first)||  childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isExpressionNode(first)||  childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(NodeUtil.isExpressionNode(first)||  childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {	  if(NodeUtil.isExpressionNode(first)&&    childCount    ==    ((    n.getFirstChild()!=    null    &&    n.getParent().getType()    ==    Token.STRING)?    1    :    0))    {    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
86	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(first)&&  childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getNext().getType()  ==  Token.STRING)?  1  :  0))  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isExpressionNode(first)&&  childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getNext().getType()  ==  Token.STRING)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(NodeUtil.isExpressionNode(first)&&  childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getNext().getType()  ==  Token.STRING)?  1  :  0))  {	  if(NodeUtil.isExpressionNode(first)&&    childCount    ==    ((    n.getFirstChild()!=    null    &&    n.getParent().getType()    ==    Token.STRING)?    1    :    0))    {    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
87	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(n)&&  childCount  ==  ((  first.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isExpressionNode(n)&&  childCount  ==  ((  first.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(NodeUtil.isExpressionNode(n)&&  childCount  ==  ((  first.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {	  if(NodeUtil.isExpressionNode(first)&&    childCount    ==    ((    n.getFirstChild()!=    null    &&    n.getParent().getType()    ==    Token.STRING)?    1    :    0))    {    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
88	[BUG]  [BUGGY]  if(first.getType()  ==  Token.STRING  &&  childCount  ==  ((  n.getNext()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first.getType()  ==  Token.STRING  &&  childCount  ==  ((  n.getNext()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(first.getType()  ==  Token.STRING  &&  childCount  ==  ((  n.getNext()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {	  if(n.getType()    ==    Token.STRING    &&    childCount    ==    ((    n.getNext()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    	non-compiled	[CE]  illegal  start  of  expression	137	None	replace
89	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING  &&  childCount  ==  ((  first.getNext()!=  null  &&  first.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getType()  ==  Token.STRING  &&  childCount  ==  ((  first.getNext()!=  null  &&  first.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(n.getType()  ==  Token.STRING  &&  childCount  ==  ((  first.getNext()!=  null  &&  first.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {	  if(n.getType()    ==    Token.STRING    &&    childCount    ==    ((    n.getNext()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    	non-compiled	[CE]  illegal  start  of  expression	137	None	replace
90	[BUG]  [BUGGY]  if(first.getType()  ==  Token.STRING  &&  childCount  ==  ((  n.getNext()!=  null  &&  first.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first.getType()  ==  Token.STRING  &&  childCount  ==  ((  n.getNext()!=  null  &&  first.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(first.getType()  ==  Token.STRING  &&  childCount  ==  ((  n.getNext()!=  null  &&  first.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {	  if(n.getType()    ==    Token.STRING    &&    childCount    ==    ((    n.getNext()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    	non-compiled	[CE]  illegal  start  of  expression	137	None	replace
91	[BUG]  [BUGGY]  if(first.getType()  ==  Token.STRING  ||  first.getNext().getType()  ==  Token.OBJECTLIT)  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first.getType()  ==  Token.STRING  ||  first.getNext().getType()  ==  Token.OBJECTLIT)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(first.getType()  ==  Token.STRING  ||  first.getNext().getType()  ==  Token.OBJECTLIT)  {	  if(n.getType()    ==    Token.STRING    ||    first.getNext().getType()    ==    Token.OBJECTLIT)    {    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
92	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING  &&  first.getNext().getType()  ==  Token.OBJECTLIT)  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getType()  ==  Token.STRING  &&  first.getNext().getType()  ==  Token.OBJECTLIT)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(n.getType()  ==  Token.STRING  &&  first.getNext().getType()  ==  Token.OBJECTLIT)  {	  if(n.getType()    ==    Token.STRING    ||    first.getNext().getType()    ==    Token.OBJECTLIT)    {    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
93	[BUG]  [BUGGY]  if(first.getType()  ==  Token.STRING  &&  first.getNext().getType()  ==  Token.OBJECTLIT)  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first.getType()  ==  Token.STRING  &&  first.getNext().getType()  ==  Token.OBJECTLIT)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(first.getType()  ==  Token.STRING  &&  first.getNext().getType()  ==  Token.OBJECTLIT)  {	  if(n.getType()    ==    Token.STRING    ||    first.getNext().getType()    ==    Token.OBJECTLIT)    {    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
94	[BUG]  [BUGGY]  if(first.getType()  ==  Token.STRING  ||  next.getNext().getType()  ==  Token.OBJECTLIT)  {  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first.getType()  ==  Token.STRING  ||  next.getNext().getType()  ==  Token.OBJECTLIT)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(first.getType()  ==  Token.STRING  ||  next.getNext().getType()  ==  Token.OBJECTLIT)  {	  if(n.getType()    ==    Token.STRING    ||    first.getNext().getType()    ==    Token.OBJECTLIT)    {    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
95	[BUG]  [BUGGY]  if(first.getType()  ==  Token.STRING  ||  second.getNext().getType()  ==  Token.OBJECTLIT)  {  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first.getType()  ==  Token.STRING  ||  second.getNext().getType()  ==  Token.OBJECTLIT)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(first.getType()  ==  Token.STRING  ||  second.getNext().getType()  ==  Token.OBJECTLIT)  {	  if(n.getType()    ==    Token.STRING    ||    first.getNext().getType()    ==    Token.OBJECTLIT)    {    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
96	[BUG]  [BUGGY]  if(first.getType()  ==  Token.STRING  ||  first.getNext().getType()!=  Token.OBJECTLIT)  {  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first.getType()  ==  Token.STRING  ||  first.getNext().getType()!=  Token.OBJECTLIT)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(first.getType()  ==  Token.STRING  ||  first.getNext().getType()!=  Token.OBJECTLIT)  {	  if(n.getType()    ==    Token.STRING    ||    first.getNext().getType()    ==    Token.OBJECTLIT)    {    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
97	[BUG]  [BUGGY]  if(first.getType()  ==  Token.STRING  &&  first.getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first.getType()  ==  Token.STRING  &&  first.getType()  ==  Token.FUNCTION)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(first.getType()  ==  Token.STRING  &&  first.getType()  ==  Token.FUNCTION)  {	  if(first.getType()    ==    Token.STRING    ||    first.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
98	[BUG]  [BUGGY]  if(first!=  null  ||  first.getType()  ==  Token.STRING  ||  first.getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first!=  null  ||  first.getType()  ==  Token.STRING  ||  first.getType()  ==  Token.FUNCTION)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(first!=  null  ||  first.getType()  ==  Token.STRING  ||  first.getType()  ==  Token.FUNCTION)  {	  if(first.getType()    ==    Token.STRING    ||    first.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
99	[BUG]  [BUGGY]  if(first.getType()!=  Token.STRING  &&  first.getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first.getType()!=  Token.STRING  &&  first.getType()  ==  Token.FUNCTION)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(first.getType()!=  Token.STRING  &&  first.getType()  ==  Token.FUNCTION)  {	  if(first.getType()    ==    Token.STRING    ||    first.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
100	[BUG]  [BUGGY]  if(first.getType()  ==  Token.STRING  ||  first.getType()!=  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first.getType()  ==  Token.STRING  ||  first.getType()!=  Token.FUNCTION)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(first.getType()  ==  Token.STRING  ||  first.getType()!=  Token.FUNCTION)  {	  if(first.getType()    ==    Token.STRING    ||    first.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
101	[BUG]  [BUGGY]  if(first.getType()  ==  Token.STRING  ||  second.getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first.getType()  ==  Token.STRING  ||  second.getType()  ==  Token.FUNCTION)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(first.getType()  ==  Token.STRING  ||  second.getType()  ==  Token.FUNCTION)  {	  if(first.getType()    ==    Token.STRING    ||    first.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
102	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(n)&&  childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isExpressionNode(n)&&  childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(NodeUtil.isExpressionNode(n)&&  childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {	  if(NodeUtil.isExpressionNode(n)&&    childCount    ==    ((    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
103	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(n)||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isExpressionNode(n)||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(NodeUtil.isExpressionNode(n)||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {	  if(NodeUtil.isExpressionNode(n)&&    childCount    ==    ((    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
104	[BUG]  [BUGGY]  Preconditions.checkState(childCount  ==  3);  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  Preconditions.checkState(childCount  ==  3);  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	Preconditions.checkState(childCount  ==  3);	  Preconditions.checkState(childCount    ==    0);    	non-compiled	[CE]  illegal  start  of  expression	120	None	replace
105	[BUG]  [BUGGY]  Preconditions.checkState(childCount!=  0);  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  Preconditions.checkState(childCount!=  0);  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	Preconditions.checkState(childCount!=  0);	  Preconditions.checkState(childCount    ==    0);    	non-compiled	[CE]  illegal  start  of  expression	120	None	replace
106	[BUG]  [BUGGY]  Preconditions.checkState(childCount!=  1);  [CE]  illegal  start  of  expression  [FE]                                    ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  Preconditions.checkState(childCount!=  1);  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	Preconditions.checkState(childCount!=  1);	  Preconditions.checkState(childCount    ==    0);    	non-compiled	[CE]  illegal  start  of  expression	120	None	replace
107	[BUG]  [BUGGY]  if(first.getType()  ==  Token.STRING  &&  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.FUNCTION)?  1  :  0))  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first.getType()  ==  Token.STRING  &&  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.FUNCTION)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(first.getType()  ==  Token.STRING  &&  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.FUNCTION)?  1  :  0))  {	  if(n.getType()    ==    Token.STRING    &&    childCount    ==    ((    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.FUNCTION)?    1    :    0))    {    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
108	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING  &&  childCount  ==  ((  n.getLastChild()!=  null  &&  n.getParent().getType()  ==  Token.FUNCTION)?  1  :  0))  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getType()  ==  Token.STRING  &&  childCount  ==  ((  n.getLastChild()!=  null  &&  n.getParent().getType()  ==  Token.FUNCTION)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(n.getType()  ==  Token.STRING  &&  childCount  ==  ((  n.getLastChild()!=  null  &&  n.getParent().getType()  ==  Token.FUNCTION)?  1  :  0))  {	  if(n.getType()    ==    Token.STRING    &&    childCount    ==    ((    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.FUNCTION)?    1    :    0))    {    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
109	[BUG]  [BUGGY]  if(first.getType()  ==  Token.STRING  &&  childCount  ==  ((  n.getNext()!=  null  &&  n.getNext().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first.getType()  ==  Token.STRING  &&  childCount  ==  ((  n.getNext()!=  null  &&  n.getNext().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(first.getType()  ==  Token.STRING  &&  childCount  ==  ((  n.getNext()!=  null  &&  n.getNext().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {	  if(n.getType()    ==    Token.STRING    &&    childCount    ==    ((    n.getNext()!=    null    &&    n.getNext().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
110	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING  &&  childCount  ==  ((  first.getNext()!=  null  &&  first.getNext().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getType()  ==  Token.STRING  &&  childCount  ==  ((  first.getNext()!=  null  &&  first.getNext().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(n.getType()  ==  Token.STRING  &&  childCount  ==  ((  first.getNext()!=  null  &&  first.getNext().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {	  if(n.getType()    ==    Token.STRING    &&    childCount    ==    ((    n.getNext()!=    null    &&    n.getNext().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
111	[BUG]  [BUGGY]  if(first.getType()  ==  Token.STRING  &&  childCount  ==  ((  n.getNext()!=  null  &&  first.getNext().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first.getType()  ==  Token.STRING  &&  childCount  ==  ((  n.getNext()!=  null  &&  first.getNext().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(first.getType()  ==  Token.STRING  &&  childCount  ==  ((  n.getNext()!=  null  &&  first.getNext().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {	  if(n.getType()    ==    Token.STRING    &&    childCount    ==    ((    n.getNext()!=    null    &&    n.getNext().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
112	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING  &&  childCount  ==  ((  n.getNext()!=  null  &&  first.getNext().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getType()  ==  Token.STRING  &&  childCount  ==  ((  n.getNext()!=  null  &&  first.getNext().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(n.getType()  ==  Token.STRING  &&  childCount  ==  ((  n.getNext()!=  null  &&  first.getNext().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {	  if(n.getType()    ==    Token.STRING    &&    childCount    ==    ((    n.getNext()!=    null    &&    n.getNext().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
113	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING  &&  childCount  ==  ((  n.getParent()!=  null  &&  n.getNext().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getType()  ==  Token.STRING  &&  childCount  ==  ((  n.getParent()!=  null  &&  n.getNext().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(n.getType()  ==  Token.STRING  &&  childCount  ==  ((  n.getParent()!=  null  &&  n.getNext().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {	  if(n.getType()    ==    Token.STRING    &&    childCount    ==    ((    n.getNext()!=    null    &&    n.getNext().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
114	[BUG]  [BUGGY]  if(childCount  ==  1  ||  first.getType()  ==  Token.STRING)  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  1  ||  first.getType()  ==  Token.STRING)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(childCount  ==  1  ||  first.getType()  ==  Token.STRING)  {	  if(childCount    ==    1    &&    first.getType()    ==    Token.STRING)    {    	non-compiled	[CE]  illegal  start  of  expression	125	None	replace
115	[BUG]  [BUGGY]  if(childCount  ==  1  &&  first.getNext().getType()  ==  Token.STRING)  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  1  &&  first.getNext().getType()  ==  Token.STRING)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(childCount  ==  1  &&  first.getNext().getType()  ==  Token.STRING)  {	  if(childCount    ==    1    &&    first.getType()    ==    Token.STRING)    {    	non-compiled	[CE]  illegal  start  of  expression	125	None	replace
116	[BUG]  [BUGGY]  if(childCount  ==  1  &&  first.getType()!=  Token.STRING)  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  1  &&  first.getType()!=  Token.STRING)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(childCount  ==  1  &&  first.getType()!=  Token.STRING)  {	  if(childCount    ==    1    &&    first.getType()    ==    Token.STRING)    {    	non-compiled	[CE]  illegal  start  of  expression	125	None	replace
117	[BUG]  [BUGGY]  if(childCount  ==  1  &&  first.getFirstChild().getType()  ==  Token.STRING)  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  1  &&  first.getFirstChild().getType()  ==  Token.STRING)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(childCount  ==  1  &&  first.getFirstChild().getType()  ==  Token.STRING)  {	  if(childCount    ==    1    &&    first.getType()    ==    Token.STRING)    {    	non-compiled	[CE]  illegal  start  of  expression	125	None	replace
118	[BUG]  [BUGGY]  if(childCount  ==  1  &&  next.getType()  ==  Token.STRING)  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  1  &&  next.getType()  ==  Token.STRING)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(childCount  ==  1  &&  next.getType()  ==  Token.STRING)  {	  if(childCount    ==    1    &&    first.getType()    ==    Token.STRING)    {    	non-compiled	[CE]  illegal  start  of  expression	125	None	replace
119	[BUG]  [BUGGY]  Node  n  =  next.getNext();  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  Node  n  =  next.getNext();  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	Node  n  =  next.getNext();	  Node    n    =    first.getNext();    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
120	[BUG]  [BUGGY]  Node  n  =  context.getFirstChild();  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  Node  n  =  context.getFirstChild();  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	Node  n  =  context.getFirstChild();	  Node    n    =    first.getNext();    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
121	[BUG]  [BUGGY]  Node  n  =  context.getCurrentNode();  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  Node  n  =  context.getCurrentNode();  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	Node  n  =  context.getCurrentNode();	  Node    n    =    first.getNext();    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
122	[BUG]  [BUGGY]  Node  n  =  first.getNext()  +  1;  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  Node  n  =  first.getNext()  +  1;  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	Node  n  =  first.getNext()  +  1;	  Node    n    =    first.getNext();    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
123	[BUG]  [BUGGY]  Node  n  =  last.getNext();  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  Node  n  =  last.getNext();  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	Node  n  =  last.getNext();	  Node    n    =    first.getNext();    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
124	[BUG]  [BUGGY]  if(childCount  ==  ((  n.getNext()!=  null  &&  n.getNext().getType()  ==  Token.FUNCTION)?  1  :  0))  {  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  ((  n.getNext()!=  null  &&  n.getNext().getType()  ==  Token.FUNCTION)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(childCount  ==  ((  n.getNext()!=  null  &&  n.getNext().getType()  ==  Token.FUNCTION)?  1  :  0))  {	  if(childCount    ==    ((    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.FUNCTION)?    1    :    0))    {    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
125	[BUG]  [BUGGY]  if(childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.FUNCTION)?  1  :  0))  {  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.FUNCTION)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.FUNCTION)?  1  :  0))  {	  if(childCount    ==    ((    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.FUNCTION)?    1    :    0))    {    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
126	[BUG]  [BUGGY]  if(childCount  ==  ((  n.getNext()!=  null  &&  n.getParent().getType()  ==  Token.FUNCTION)?  1  :  0))  {  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  ((  n.getNext()!=  null  &&  n.getParent().getType()  ==  Token.FUNCTION)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(childCount  ==  ((  n.getNext()!=  null  &&  n.getParent().getType()  ==  Token.FUNCTION)?  1  :  0))  {	  if(childCount    ==    ((    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.FUNCTION)?    1    :    0))    {    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
127	[BUG]  [BUGGY]  if(n.getType()  ==  Token.FUNCTION  ||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.FUNCTION)?  1  :  0))  {  [CE]  illegal  start  of  expression  [FE]                                    ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getType()  ==  Token.FUNCTION  ||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.FUNCTION)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(n.getType()  ==  Token.FUNCTION  ||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.FUNCTION)?  1  :  0))  {	  if(childCount    ==    ((    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.FUNCTION)?    1    :    0))    {    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
128	[BUG]  [BUGGY]  if(childCount  ==  ((  first.getNext()!=  null  &&  first.getNext().getType()  ==  Token.FUNCTION)?  1  :  0))  {  [CE]  illegal  start  of  expression  [FE]                                      ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  ((  first.getNext()!=  null  &&  first.getNext().getType()  ==  Token.FUNCTION)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(childCount  ==  ((  first.getNext()!=  null  &&  first.getNext().getType()  ==  Token.FUNCTION)?  1  :  0))  {	  if(childCount    ==    ((    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.FUNCTION)?    1    :    0))    {    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
129	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(first)||  first.getNext().getType()  ==  Token.STRING)  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isExpressionNode(first)||  first.getNext().getType()  ==  Token.STRING)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(NodeUtil.isExpressionNode(first)||  first.getNext().getType()  ==  Token.STRING)  {	  if(NodeUtil.isExpressionNode(first)&&    first.getNext().getType()    ==    Token.STRING)    {    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
130	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(first)&&  first.getFirstChild().getType()  ==  Token.STRING)  {  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isExpressionNode(first)&&  first.getFirstChild().getType()  ==  Token.STRING)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(NodeUtil.isExpressionNode(first)&&  first.getFirstChild().getType()  ==  Token.STRING)  {	  if(NodeUtil.isExpressionNode(first)&&    first.getNext().getType()    ==    Token.STRING)    {    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
131	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(first)&&  first.getParent().getType()  ==  Token.STRING)  {  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isExpressionNode(first)&&  first.getParent().getType()  ==  Token.STRING)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(NodeUtil.isExpressionNode(first)&&  first.getParent().getType()  ==  Token.STRING)  {	  if(NodeUtil.isExpressionNode(first)&&    first.getNext().getType()    ==    Token.STRING)    {    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
132	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(first)&&  n.getNext().getType()  ==  Token.STRING)  {  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isExpressionNode(first)&&  n.getNext().getType()  ==  Token.STRING)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(NodeUtil.isExpressionNode(first)&&  n.getNext().getType()  ==  Token.STRING)  {	  if(NodeUtil.isExpressionNode(first)&&    first.getNext().getType()    ==    Token.STRING)    {    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
133	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(first)&&  parent.getNext().getType()  ==  Token.STRING)  {  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isExpressionNode(first)&&  parent.getNext().getType()  ==  Token.STRING)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(NodeUtil.isExpressionNode(first)&&  parent.getNext().getType()  ==  Token.STRING)  {	  if(NodeUtil.isExpressionNode(first)&&    first.getNext().getType()    ==    Token.STRING)    {    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
134	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(first)||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isExpressionNode(first)||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(NodeUtil.isExpressionNode(first)||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {	  if(NodeUtil.isExpressionNode(first)&&    childCount    ==    ((    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
135	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING  ||  first.getFirstChild()!=  null)  {  [CE]  [FE]                            ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getType()  ==  Token.STRING  ||  first.getFirstChild()!=  null)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(n.getType()  ==  Token.STRING  ||  first.getFirstChild()!=  null)  {	  if(n.getType()    ==    Token.STRING    &&    first.getFirstChild()!=    null)    {    	non-compiled	[CE]  	107	None	replace
136	[BUG]  [BUGGY]  if(first.getType()  ==  Token.STRING  &&  next.getFirstChild()!=  null)  {  [CE]  [FE]                              ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first.getType()  ==  Token.STRING  &&  next.getFirstChild()!=  null)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(first.getType()  ==  Token.STRING  &&  next.getFirstChild()!=  null)  {	  if(n.getType()    ==    Token.STRING    &&    first.getFirstChild()!=    null)    {    	non-compiled	[CE]  	107	None	replace
137	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING  &&  first.getLastChild()!=  null)  {  [CE]  [FE]                                ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getType()  ==  Token.STRING  &&  first.getLastChild()!=  null)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(n.getType()  ==  Token.STRING  &&  first.getLastChild()!=  null)  {	  if(n.getType()    ==    Token.STRING    &&    first.getFirstChild()!=    null)    {    	non-compiled	[CE]  	107	None	replace
138	[BUG]  [BUGGY]  if(n.getLastChild()!=  null)  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getLastChild()!=  null)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(n.getLastChild()!=  null)  {	  if(n.getFirstChild()!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
139	[BUG]  [BUGGY]  if(first.getFirstChild()!=  null)  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first.getFirstChild()!=  null)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(first.getFirstChild()!=  null)  {	  if(n.getFirstChild()!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
140	[BUG]  [BUGGY]  if(n.getFirstChild()!=  null  ||  first.getLastChild().getType()  ==  Token.STRING)  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getFirstChild()!=  null  ||  first.getLastChild().getType()  ==  Token.STRING)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(n.getFirstChild()!=  null  ||  first.getLastChild().getType()  ==  Token.STRING)  {	  if(n.getFirstChild()!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
141	[BUG]  [BUGGY]  if(n.getFirstChild()!=  null  &&  first.getNext().getType()  ==  Token.STRING)  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getFirstChild()!=  null  &&  first.getNext().getType()  ==  Token.STRING)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(n.getFirstChild()!=  null  &&  first.getNext().getType()  ==  Token.STRING)  {	  if(n.getFirstChild()!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
142	[BUG]  [BUGGY]  if(childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getNext().getType()  ==  Token.STRING)||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECT  [CE]  [FE]              ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getNext().getType()  ==  Token.STRING)||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECT  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getNext().getType()  ==  Token.STRING)||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECT	  if(childCount    ==    ((    n.getFirstChild()!=    null    &&    n.getNext().getType()    ==    Token.STRING)||    childCount    ==    ((    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.OBJ    	non-compiled	[CE]  	130	None	replace
143	[BUG]  [BUGGY]  if(childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getNext().getType()  ==  Token.STRING)||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT  [CE]  [FE]                ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getNext().getType()  ==  Token.STRING)||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getNext().getType()  ==  Token.STRING)||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT	  if(childCount    ==    ((    n.getFirstChild()!=    null    &&    n.getNext().getType()    ==    Token.STRING)||    childCount    ==    ((    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.OBJ    	non-compiled	[CE]  	130	None	replace
144	[BUG]  [BUGGY]  if(childCount  ==  ((  n.getLastChild()!=  null  &&  n.getNext().getType()  ==  Token.STRING)||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJ  [CE]  [FE]                  ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  ((  n.getLastChild()!=  null  &&  n.getNext().getType()  ==  Token.STRING)||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJ  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(childCount  ==  ((  n.getLastChild()!=  null  &&  n.getNext().getType()  ==  Token.STRING)||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJ	  if(childCount    ==    ((    n.getFirstChild()!=    null    &&    n.getNext().getType()    ==    Token.STRING)||    childCount    ==    ((    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.OBJ    	non-compiled	[CE]  	130	None	replace
145	[BUG]  [BUGGY]  if(childCount  ==  ((  first.getFirstChild()!=  null  &&  first.getNext().getType()  ==  Token.STRING)||  childCount  ==  ((  n.getParent()!=  null  &&  first.getParent().getType()  ==  Token.OBJECTLIT)  [CE]  [FE]                    ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  ((  first.getFirstChild()!=  null  &&  first.getNext().getType()  ==  Token.STRING)||  childCount  ==  ((  n.getParent()!=  null  &&  first.getParent().getType()  ==  Token.OBJECTLIT)  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(childCount  ==  ((  first.getFirstChild()!=  null  &&  first.getNext().getType()  ==  Token.STRING)||  childCount  ==  ((  n.getParent()!=  null  &&  first.getParent().getType()  ==  Token.OBJECTLIT)	  if(childCount    ==    ((    n.getFirstChild()!=    null    &&    n.getNext().getType()    ==    Token.STRING)||    childCount    ==    ((    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.OBJ    	non-compiled	[CE]  	130	None	replace
146	[BUG]  [BUGGY]  if(childCount  ==  1  ||  first.getFirstChild()!=  null  &&  first.getLastChild().getString().equals( "string "))  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  1  ||  first.getFirstChild()!=  null  &&  first.getLastChild().getString().equals( "string "))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(childCount  ==  1  ||  first.getFirstChild()!=  null  &&  first.getLastChild().getString().equals( "string "))  {	  if(childCount    ==    1    &&    first.getFirstChild()!=    null    &&    first.getLastChild().getString().equals(   "string   "))    {    	non-compiled	[CE]  illegal  start  of  expression	158	None	replace
147	[BUG]  [BUGGY]  if(childCount  ==  1  &&  first.getFirstChild()!=  null  &&  last.getLastChild().getString().equals( "string "))  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  1  &&  first.getFirstChild()!=  null  &&  last.getLastChild().getString().equals( "string "))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(childCount  ==  1  &&  first.getFirstChild()!=  null  &&  last.getLastChild().getString().equals( "string "))  {	  if(childCount    ==    1    &&    first.getFirstChild()!=    null    &&    first.getLastChild().getString().equals(   "string   "))    {    	non-compiled	[CE]  illegal  start  of  expression	158	None	replace
148	[BUG]  [BUGGY]  if(first.getFirstChild()!=  null  &&  first.getLastChild().getString().equals( "string "))  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first.getFirstChild()!=  null  &&  first.getLastChild().getString().equals( "string "))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(first.getFirstChild()!=  null  &&  first.getLastChild().getString().equals( "string "))  {	  if(childCount    ==    1    &&    first.getFirstChild()!=    null    &&    first.getLastChild().getString().equals(   "string   "))    {    	non-compiled	[CE]  illegal  start  of  expression	158	None	replace
149	[BUG]  [BUGGY]  if(childCount  ==  1  &&  first.getLastChild()!=  null  &&  first.getLastChild().getString().equals( "string "))  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  1  &&  first.getLastChild()!=  null  &&  first.getLastChild().getString().equals( "string "))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(childCount  ==  1  &&  first.getLastChild()!=  null  &&  first.getLastChild().getString().equals( "string "))  {	  if(childCount    ==    1    &&    first.getFirstChild()!=    null    &&    first.getLastChild().getString().equals(   "string   "))    {    	non-compiled	[CE]  illegal  start  of  expression	158	None	replace
150	[BUG]  [BUGGY]  if(childCount  ==  1  &&  first.getFirstChild()!=  null  &&  second.getLastChild().getString().equals( "string "))  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  1  &&  first.getFirstChild()!=  null  &&  second.getLastChild().getString().equals( "string "))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(childCount  ==  1  &&  first.getFirstChild()!=  null  &&  second.getLastChild().getString().equals( "string "))  {	  if(childCount    ==    1    &&    first.getFirstChild()!=    null    &&    first.getLastChild().getString().equals(   "string   "))    {    	non-compiled	[CE]  illegal  start  of  expression	158	None	replace
151	[BUG]  [BUGGY]  if(n.getFirstChild()!=  null  &&  first.getLastChild().getString().equals( "string "))  {  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getFirstChild()!=  null  &&  first.getLastChild().getString().equals( "string "))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(n.getFirstChild()!=  null  &&  first.getLastChild().getString().equals( "string "))  {	  if(childCount    ==    1    &&    first.getFirstChild()!=    null    &&    first.getLastChild().getString().equals(   "string   "))    {    	non-compiled	[CE]  illegal  start  of  expression	158	None	replace
152	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(first)&&  first.getNext().getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isExpressionNode(first)&&  first.getNext().getType()  ==  Token.FUNCTION)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(NodeUtil.isExpressionNode(first)&&  first.getNext().getType()  ==  Token.FUNCTION)  {	  if(NodeUtil.isExpressionNode(n)&&    first.getNext().getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
153	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(first)&&  n.getNext().getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isExpressionNode(first)&&  n.getNext().getType()  ==  Token.FUNCTION)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(NodeUtil.isExpressionNode(first)&&  n.getNext().getType()  ==  Token.FUNCTION)  {	  if(NodeUtil.isExpressionNode(n)&&    first.getNext().getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
154	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(first)&&  next.getNext().getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isExpressionNode(first)&&  next.getNext().getType()  ==  Token.FUNCTION)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(NodeUtil.isExpressionNode(first)&&  next.getNext().getType()  ==  Token.FUNCTION)  {	  if(NodeUtil.isExpressionNode(n)&&    first.getNext().getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
155	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(n)||  first.getNext().getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isExpressionNode(n)||  first.getNext().getType()  ==  Token.FUNCTION)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(NodeUtil.isExpressionNode(n)||  first.getNext().getType()  ==  Token.FUNCTION)  {	  if(NodeUtil.isExpressionNode(n)&&    first.getNext().getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
156	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(n)&&  first.getFirstChild().getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isExpressionNode(n)&&  first.getFirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(NodeUtil.isExpressionNode(n)&&  first.getFirstChild().getType()  ==  Token.FUNCTION)  {	  if(NodeUtil.isExpressionNode(n)&&    first.getNext().getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
157	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(first)||  first.getNext().getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]                                    ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isExpressionNode(first)||  first.getNext().getType()  ==  Token.FUNCTION)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(NodeUtil.isExpressionNode(first)||  first.getNext().getType()  ==  Token.FUNCTION)  {	  if(NodeUtil.isExpressionNode(n)&&    first.getNext().getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
158	[BUG]  [BUGGY]  if(childCount  ==  ((  first.getFirstChild()!=  null  &&  first.getNext().getType()  ==  Token.STRING)?  1  :  0))  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  ((  first.getFirstChild()!=  null  &&  first.getNext().getType()  ==  Token.STRING)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(childCount  ==  ((  first.getFirstChild()!=  null  &&  first.getNext().getType()  ==  Token.STRING)?  1  :  0))  {	  if(childCount    ==    ((    n.getFirstChild()!=    null    &&    n.getNext().getType()    ==    Token.STRING)?    1    :    0))    {    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
159	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING  &&  childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getNext().getType()  ==  Token.STRING)?  1  :  0))  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getType()  ==  Token.STRING  &&  childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getNext().getType()  ==  Token.STRING)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(n.getType()  ==  Token.STRING  &&  childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getNext().getType()  ==  Token.STRING)?  1  :  0))  {	  if(childCount    ==    ((    n.getFirstChild()!=    null    &&    n.getNext().getType()    ==    Token.STRING)?    1    :    0))    {    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
160	[BUG]  [BUGGY]  if(childCount  ==  ((  n.getLastChild()!=  null  &&  n.getNext().getType()  ==  Token.STRING)?  1  :  0))  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  ((  n.getLastChild()!=  null  &&  n.getNext().getType()  ==  Token.STRING)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(childCount  ==  ((  n.getLastChild()!=  null  &&  n.getNext().getType()  ==  Token.STRING)?  1  :  0))  {	  if(childCount    ==    ((    n.getFirstChild()!=    null    &&    n.getNext().getType()    ==    Token.STRING)?    1    :    0))    {    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
161	[BUG]  [BUGGY]  if(childCount  ==  ((  first!=  null  &&  first.getFirstChild()!=  null  &&  first.getNext().getType()  ==  Token.STRING)?  1  :  0))  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  ((  first!=  null  &&  first.getFirstChild()!=  null  &&  first.getNext().getType()  ==  Token.STRING)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(childCount  ==  ((  first!=  null  &&  first.getFirstChild()!=  null  &&  first.getNext().getType()  ==  Token.STRING)?  1  :  0))  {	  if(childCount    ==    ((    n.getFirstChild()!=    null    &&    n.getNext().getType()    ==    Token.STRING)?    1    :    0))    {    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
162	[BUG]  [BUGGY]  if(childCount  ==  ((  n.getFirstChild()!=  null  &&  first.getNext().getType()  ==  Token.STRING)?  1  :  0))  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  ((  n.getFirstChild()!=  null  &&  first.getNext().getType()  ==  Token.STRING)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(childCount  ==  ((  n.getFirstChild()!=  null  &&  first.getNext().getType()  ==  Token.STRING)?  1  :  0))  {	  if(childCount    ==    ((    n.getFirstChild()!=    null    &&    n.getNext().getType()    ==    Token.STRING)?    1    :    0))    {    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
163	[BUG]  [BUGGY]  Integer  n  =  first.getLastChild();  [CE]  invalid  method  declaration;  return  type  required  [FE]                            ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  Integer  n  =  first.getLastChild();  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	Integer  n  =  first.getLastChild();	  Integer    n    =    first.getFirstChild();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	136	None	replace
164	[BUG]  [BUGGY]  Integer  n  =  next.getFirstChild();  [CE]  invalid  method  declaration;  return  type  required  [FE]                              ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  Integer  n  =  next.getFirstChild();  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	Integer  n  =  next.getFirstChild();	  Integer    n    =    first.getFirstChild();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	136	None	replace
165	[BUG]  [BUGGY]  Integer  n  =  context.getFirstChild();  [CE]  invalid  method  declaration;  return  type  required  [FE]                                ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  Integer  n  =  context.getFirstChild();  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	Integer  n  =  context.getFirstChild();	  Integer    n    =    first.getFirstChild();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	136	None	replace
166	[BUG]  [BUGGY]  Integer  n  =  first.getFirstChild().intValue();  [CE]  invalid  method  declaration;  return  type  required  [FE]                                  ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  Integer  n  =  first.getFirstChild().intValue();  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	Integer  n  =  first.getFirstChild().intValue();	  Integer    n    =    first.getFirstChild();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	136	None	replace
167	[BUG]  [BUGGY]  Integer  n  =  second.getFirstChild();  [CE]  invalid  method  declaration;  return  type  required  [FE]                                    ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  Integer  n  =  second.getFirstChild();  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	Integer  n  =  second.getFirstChild();	  Integer    n    =    first.getFirstChild();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	136	None	replace
168	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(first)&&  next.getType()  ==  Token.STRING)  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isExpressionNode(first)&&  next.getType()  ==  Token.STRING)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(NodeUtil.isExpressionNode(first)&&  next.getType()  ==  Token.STRING)  {	  if(NodeUtil.isExpressionNode(first)&&    first.getType()    ==    Token.STRING)    {    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
169	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(first)&&  n.getType()  ==  Token.STRING)  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isExpressionNode(first)&&  n.getType()  ==  Token.STRING)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(NodeUtil.isExpressionNode(first)&&  n.getType()  ==  Token.STRING)  {	  if(NodeUtil.isExpressionNode(first)&&    first.getType()    ==    Token.STRING)    {    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
170	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(first)&&  parent.getType()  ==  Token.STRING)  {  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isExpressionNode(first)&&  parent.getType()  ==  Token.STRING)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(NodeUtil.isExpressionNode(first)&&  parent.getType()  ==  Token.STRING)  {	  if(NodeUtil.isExpressionNode(first)&&    first.getType()    ==    Token.STRING)    {    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
171	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(first)&&  first.getType()!=  Token.STRING)  {  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isExpressionNode(first)&&  first.getType()!=  Token.STRING)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(NodeUtil.isExpressionNode(first)&&  first.getType()!=  Token.STRING)  {	  if(NodeUtil.isExpressionNode(first)&&    first.getType()    ==    Token.STRING)    {    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
172	[BUG]  [BUGGY]  if(first.getType()  ==  Token.STRING  ||  childCount  ==  ((  n.getNext()!=  null  &&  first.getNext().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first.getType()  ==  Token.STRING  ||  childCount  ==  ((  n.getNext()!=  null  &&  first.getNext().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(first.getType()  ==  Token.STRING  ||  childCount  ==  ((  n.getNext()!=  null  &&  first.getNext().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {	  if(n.getType()    ==    Token.STRING    ||    childCount    ==    ((    n.getNext()!=    null    &&    n.getNext().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
173	[BUG]  [BUGGY]  if(first.getType()  ==  Token.STRING  ||  childCount  ==  ((  n.getNext()!=  null  &&  n.getNext().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first.getType()  ==  Token.STRING  ||  childCount  ==  ((  n.getNext()!=  null  &&  n.getNext().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(first.getType()  ==  Token.STRING  ||  childCount  ==  ((  n.getNext()!=  null  &&  n.getNext().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {	  if(n.getType()    ==    Token.STRING    ||    childCount    ==    ((    n.getNext()!=    null    &&    n.getNext().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
174	[BUG]  [BUGGY]  if(n.getType()!=  Token.STRING  &&  childCount  ==  ((  n.getNext()!=  null  &&  n.getNext().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getType()!=  Token.STRING  &&  childCount  ==  ((  n.getNext()!=  null  &&  n.getNext().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(n.getType()!=  Token.STRING  &&  childCount  ==  ((  n.getNext()!=  null  &&  n.getNext().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {	  if(n.getType()    ==    Token.STRING    ||    childCount    ==    ((    n.getNext()!=    null    &&    n.getNext().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
175	[BUG]  [BUGGY]  if(childCount  ==  ((  first.getFirstChild()!=  null  &&  first.getParent().getType()  ==  Token.STRING)?  1  :  0))  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  ((  first.getFirstChild()!=  null  &&  first.getParent().getType()  ==  Token.STRING)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(childCount  ==  ((  first.getFirstChild()!=  null  &&  first.getParent().getType()  ==  Token.STRING)?  1  :  0))  {	  if(childCount    ==    ((    n.getFirstChild()!=    null    &&    n.getParent().getType()    ==    Token.STRING)?    1    :    0))    {    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
176	[BUG]  [BUGGY]  if(childCount  ==  ((  n.getLastChild()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  ((  n.getLastChild()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(childCount  ==  ((  n.getLastChild()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {	  if(childCount    ==    ((    n.getFirstChild()!=    null    &&    n.getParent().getType()    ==    Token.STRING)?    1    :    0))    {    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
177	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING  &&  childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getType()  ==  Token.STRING  &&  childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(n.getType()  ==  Token.STRING  &&  childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {	  if(childCount    ==    ((    n.getFirstChild()!=    null    &&    n.getParent().getType()    ==    Token.STRING)?    1    :    0))    {    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
178	[BUG]  [BUGGY]  if(childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getType()  ==  Token.STRING)?  1  :  0))  {  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getType()  ==  Token.STRING)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getType()  ==  Token.STRING)?  1  :  0))  {	  if(childCount    ==    ((    n.getFirstChild()!=    null    &&    n.getParent().getType()    ==    Token.STRING)?    1    :    0))    {    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
179	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(n)||  first.getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isExpressionNode(n)||  first.getType()  ==  Token.FUNCTION)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(NodeUtil.isExpressionNode(n)||  first.getType()  ==  Token.FUNCTION)  {	  if(NodeUtil.isExpressionNode(first)||    first.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
180	[BUG]  [BUGGY]  if(NodeUtil.isFunctionDeclaration(first)||  first.getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isFunctionDeclaration(first)||  first.getType()  ==  Token.FUNCTION)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(NodeUtil.isFunctionDeclaration(first)||  first.getType()  ==  Token.FUNCTION)  {	  if(NodeUtil.isExpressionNode(first)||    first.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
181	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(first)||  next.getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isExpressionNode(first)||  next.getType()  ==  Token.FUNCTION)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(NodeUtil.isExpressionNode(first)||  next.getType()  ==  Token.FUNCTION)  {	  if(NodeUtil.isExpressionNode(first)||    first.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
182	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(first)||  first.getType()!=  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]                                    ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isExpressionNode(first)||  first.getType()!=  Token.FUNCTION)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(NodeUtil.isExpressionNode(first)||  first.getType()!=  Token.FUNCTION)  {	  if(NodeUtil.isExpressionNode(first)||    first.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
183	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(first)&&  childCount!=  ((  n.getNext()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isExpressionNode(first)&&  childCount!=  ((  n.getNext()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(NodeUtil.isExpressionNode(first)&&  childCount!=  ((  n.getNext()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {	  if(NodeUtil.isExpressionNode(n)&&    childCount!=    ((    n.getNext()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    	non-compiled	[CE]  illegal  start  of  expression	111	None	replace
184	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(n)&&  childCount  ==  ((  first.getNext()!=  null  &&  first.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isExpressionNode(n)&&  childCount  ==  ((  first.getNext()!=  null  &&  first.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(NodeUtil.isExpressionNode(n)&&  childCount  ==  ((  first.getNext()!=  null  &&  first.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {	  if(NodeUtil.isExpressionNode(n)&&    childCount!=    ((    n.getNext()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    	non-compiled	[CE]  illegal  start  of  expression	111	None	replace
185	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(n)&&  childCount!=  ((  first.getNext()!=  null  &&  first.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isExpressionNode(n)&&  childCount!=  ((  first.getNext()!=  null  &&  first.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(NodeUtil.isExpressionNode(n)&&  childCount!=  ((  first.getNext()!=  null  &&  first.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {	  if(NodeUtil.isExpressionNode(n)&&    childCount!=    ((    n.getNext()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    	non-compiled	[CE]  illegal  start  of  expression	111	None	replace
186	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(n)||  childCount!=  ((  n.getNext()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isExpressionNode(n)||  childCount!=  ((  n.getNext()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(NodeUtil.isExpressionNode(n)||  childCount!=  ((  n.getNext()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {	  if(NodeUtil.isExpressionNode(n)&&    childCount!=    ((    n.getNext()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    	non-compiled	[CE]  illegal  start  of  expression	111	None	replace
187	[BUG]  [BUGGY]  if(childCount  ==  ((  n.getType()  ==  Token.STRING)&&  first.getParent()!=  null  &&  first.getParent().getType()  ==  Token.STRING)?  1  :  0))  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  ((  n.getType()  ==  Token.STRING)&&  first.getParent()!=  null  &&  first.getParent().getType()  ==  Token.STRING)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(childCount  ==  ((  n.getType()  ==  Token.STRING)&&  first.getParent()!=  null  &&  first.getParent().getType()  ==  Token.STRING)?  1  :  0))  {	  if(childCount    ==    ((    n.getType()    ==    Token.STRING)&&    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.STRING)?    1    :    0))    {    	non-compiled	[CE]  illegal  start  of  expression	109	None	replace
188	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING  &&  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.STRING)  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getType()  ==  Token.STRING  &&  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.STRING)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(n.getType()  ==  Token.STRING  &&  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.STRING)  {	  if(childCount    ==    ((    n.getType()    ==    Token.STRING)&&    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.STRING)?    1    :    0))    {    	non-compiled	[CE]  illegal  start  of  expression	109	None	replace
189	[BUG]  [BUGGY]  if(childCount  ==  ((  n.getType()  ==  Token.STRING)&&  n.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  ((  n.getType()  ==  Token.STRING)&&  n.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(childCount  ==  ((  n.getType()  ==  Token.STRING)&&  n.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {	  if(childCount    ==    ((    n.getType()    ==    Token.STRING)&&    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.STRING)?    1    :    0))    {    	non-compiled	[CE]  illegal  start  of  expression	109	None	replace
190	[BUG]  [BUGGY]  if(childCount  ==  ((  n.getType()  ==  Token.STRING)&&  n.getNext()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  ((  n.getType()  ==  Token.STRING)&&  n.getNext()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(childCount  ==  ((  n.getType()  ==  Token.STRING)&&  n.getNext()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {	  if(childCount    ==    ((    n.getType()    ==    Token.STRING)&&    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.STRING)?    1    :    0))    {    	non-compiled	[CE]  illegal  start  of  expression	109	None	replace
191	[BUG]  [BUGGY]  if(childCount  ==  ((  n.getType()  ==  Token.STRING)&&  parent.getParent()!=  null  &&  parent.getParent().getType()  ==  Token.STRING)?  1  :  0))  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  ((  n.getType()  ==  Token.STRING)&&  parent.getParent()!=  null  &&  parent.getParent().getType()  ==  Token.STRING)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(childCount  ==  ((  n.getType()  ==  Token.STRING)&&  parent.getParent()!=  null  &&  parent.getParent().getType()  ==  Token.STRING)?  1  :  0))  {	  if(childCount    ==    ((    n.getType()    ==    Token.STRING)&&    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.STRING)?    1    :    0))    {    	non-compiled	[CE]  illegal  start  of  expression	109	None	replace
192	[BUG]  [BUGGY]  if(n.getParent()!=  null  ||  first.getType()  ==  Token.STRING)  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getParent()!=  null  ||  first.getType()  ==  Token.STRING)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(n.getParent()!=  null  ||  first.getType()  ==  Token.STRING)  {	  if(first!=    null    ||    first.getType()    ==    Token.STRING)    {    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
193	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING  &&  first.getType()  ==  Token.OBJECTLIT)  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getType()  ==  Token.STRING  &&  first.getType()  ==  Token.OBJECTLIT)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(n.getType()  ==  Token.STRING  &&  first.getType()  ==  Token.OBJECTLIT)  {	  if(n.getType()    ==    Token.STRING    ||    first.getType()    ==    Token.OBJECTLIT)    {    	non-compiled	[CE]  illegal  start  of  expression	106	None	replace
194	[BUG]  [BUGGY]  if(first.getType()  ==  Token.STRING  ||  second.getType()  ==  Token.OBJECTLIT)  {  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first.getType()  ==  Token.STRING  ||  second.getType()  ==  Token.OBJECTLIT)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(first.getType()  ==  Token.STRING  ||  second.getType()  ==  Token.OBJECTLIT)  {	  if(n.getType()    ==    Token.STRING    ||    first.getType()    ==    Token.OBJECTLIT)    {    	non-compiled	[CE]  illegal  start  of  expression	106	None	replace
195	[BUG]  [BUGGY]  if(first.getType()  ==  Token.STRING  ||  next.getType()  ==  Token.OBJECTLIT)  {  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first.getType()  ==  Token.STRING  ||  next.getType()  ==  Token.OBJECTLIT)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(first.getType()  ==  Token.STRING  ||  next.getType()  ==  Token.OBJECTLIT)  {	  if(n.getType()    ==    Token.STRING    ||    first.getType()    ==    Token.OBJECTLIT)    {    	non-compiled	[CE]  illegal  start  of  expression	106	None	replace
196	[BUG]  [BUGGY]  if(first.getType()  ==  Token.STRING  ||  n.getType()  ==  Token.OBJECTLIT)  {  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first.getType()  ==  Token.STRING  ||  n.getType()  ==  Token.OBJECTLIT)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(first.getType()  ==  Token.STRING  ||  n.getType()  ==  Token.OBJECTLIT)  {	  if(n.getType()    ==    Token.STRING    ||    first.getType()    ==    Token.OBJECTLIT)    {    	non-compiled	[CE]  illegal  start  of  expression	106	None	replace
197	[BUG]  [BUGGY]  if(First.getType()  ==  Token.STRING  ||  first.getType()  ==  Token.OBJECTLIT)  {  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(First.getType()  ==  Token.STRING  ||  first.getType()  ==  Token.OBJECTLIT)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(First.getType()  ==  Token.STRING  ||  first.getType()  ==  Token.OBJECTLIT)  {	  if(n.getType()    ==    Token.STRING    ||    first.getType()    ==    Token.OBJECTLIT)    {    	non-compiled	[CE]  illegal  start  of  expression	106	None	replace
198	[BUG]  [BUGGY]  if(n.getType()!=  Token.STRING)  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getType()!=  Token.STRING)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(n.getType()!=  Token.STRING)  {	  if(n.getType()    ==    Token.OBJECTLIT)    {    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
199	[BUG]  [BUGGY]  if(n.getParent().getType()  ==  Token.STRING)  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getParent().getType()  ==  Token.STRING)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(n.getParent().getType()  ==  Token.STRING)  {	  if(n.getType()    ==    Token.OBJECTLIT)    {    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
200	[BUG]  [BUGGY]  if(n.getFirstChild().getType()  ==  Token.STRING)  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getFirstChild().getType()  ==  Token.STRING)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(n.getFirstChild().getType()  ==  Token.STRING)  {	  if(n.getType()    ==    Token.OBJECTLIT)    {    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
201	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING  ||  n.getType()!=  Token.OBJECTLIT)  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getType()  ==  Token.STRING  ||  n.getType()!=  Token.OBJECTLIT)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(n.getType()  ==  Token.STRING  ||  n.getType()!=  Token.OBJECTLIT)  {	  if(n.getType()    ==    Token.OBJECTLIT)    {    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
202	[BUG]  [BUGGY]  if(first.getType()  ==  Token.STRING  &&  childCount!=  ((  n.getLastChild()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first.getType()  ==  Token.STRING  &&  childCount!=  ((  n.getLastChild()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(first.getType()  ==  Token.STRING  &&  childCount!=  ((  n.getLastChild()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {	  if(n.getType()    ==    Token.STRING    &&    childCount!=    ((    n.getLastChild()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    	non-compiled	[CE]  illegal  start  of  expression	114	None	replace
203	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING  ||  childCount!=  ((  n.getLastChild()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getType()  ==  Token.STRING  ||  childCount!=  ((  n.getLastChild()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(n.getType()  ==  Token.STRING  ||  childCount!=  ((  n.getLastChild()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {	  if(n.getType()    ==    Token.STRING    &&    childCount!=    ((    n.getLastChild()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    	non-compiled	[CE]  illegal  start  of  expression	114	None	replace
204	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING  &&  childCount  >=  ((  n.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getType()  ==  Token.STRING  &&  childCount  >=  ((  n.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(n.getType()  ==  Token.STRING  &&  childCount  >=  ((  n.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {	  if(n.getType()    ==    Token.STRING    &&    childCount!=    ((    n.getLastChild()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    	non-compiled	[CE]  illegal  start  of  expression	114	None	replace
205	[BUG]  [BUGGY]  if(first!=  null  ||  first.getNext().getType()  ==  Token.STRING)  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first!=  null  ||  first.getNext().getType()  ==  Token.STRING)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(first!=  null  ||  first.getNext().getType()  ==  Token.STRING)  {	  if(first    ==    null    ||    first.getNext().getType()    ==    Token.STRING)    {    	non-compiled	[CE]  illegal  start  of  expression	116	None	replace
206	[BUG]  [BUGGY]  if(first  ==  null  &&  first.getNext().getType()  ==  Token.STRING)  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first  ==  null  &&  first.getNext().getType()  ==  Token.STRING)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(first  ==  null  &&  first.getNext().getType()  ==  Token.STRING)  {	  if(first    ==    null    ||    first.getNext().getType()    ==    Token.STRING)    {    	non-compiled	[CE]  illegal  start  of  expression	116	None	replace
207	[BUG]  [BUGGY]  if(first!=  null  &&  first.getNext().getType()  ==  Token.STRING)  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first!=  null  &&  first.getNext().getType()  ==  Token.STRING)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(first!=  null  &&  first.getNext().getType()  ==  Token.STRING)  {	  if(first    ==    null    ||    first.getNext().getType()    ==    Token.STRING)    {    	non-compiled	[CE]  illegal  start  of  expression	116	None	replace
208	[BUG]  [BUGGY]  if(n  ==  null  ||  first.getNext().getType()  ==  Token.STRING)  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n  ==  null  ||  first.getNext().getType()  ==  Token.STRING)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(n  ==  null  ||  first.getNext().getType()  ==  Token.STRING)  {	  if(first    ==    null    ||    first.getNext().getType()    ==    Token.STRING)    {    	non-compiled	[CE]  illegal  start  of  expression	116	None	replace
209	[BUG]  [BUGGY]  if(first  ==  null  ||  first.getNext().getType()!=  Token.STRING)  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first  ==  null  ||  first.getNext().getType()!=  Token.STRING)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(first  ==  null  ||  first.getNext().getType()!=  Token.STRING)  {	  if(first    ==    null    ||    first.getNext().getType()    ==    Token.STRING)    {    	non-compiled	[CE]  illegal  start  of  expression	116	None	replace
210	[BUG]  [BUGGY]  if(first.getType()  ==  Token.STRING  ||  childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first.getType()  ==  Token.STRING  ||  childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(first.getType()  ==  Token.STRING  ||  childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {	  if(n.getType()    ==    Token.STRING    ||    childCount    ==    ((    n.getFirstChild()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
211	[BUG]  [BUGGY]  if(n.getType()!=  Token.STRING  &&  childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getType()!=  Token.STRING  &&  childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(n.getType()!=  Token.STRING  &&  childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {	  if(n.getType()    ==    Token.STRING    ||    childCount    ==    ((    n.getFirstChild()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
212	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING  &&  childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getNext().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getType()  ==  Token.STRING  &&  childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getNext().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(n.getType()  ==  Token.STRING  &&  childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getNext().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {	  if(n.getType()    ==    Token.STRING    ||    childCount    ==    ((    n.getFirstChild()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
213	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(n)||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isExpressionNode(n)||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(NodeUtil.isExpressionNode(n)||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {	  if(NodeUtil.isExpressionNode(n)&&    childCount    ==    ((    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.STRING)?    1    :    0))    {    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
214	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(n)&&  childCount  ==  ((  n.getString()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isExpressionNode(n)&&  childCount  ==  ((  n.getString()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(NodeUtil.isExpressionNode(n)&&  childCount  ==  ((  n.getString()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {	  if(NodeUtil.isExpressionNode(n)&&    childCount    ==    ((    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.STRING)?    1    :    0))    {    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
215	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(n)&&  first.getNext()!=  null)  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isExpressionNode(n)&&  first.getNext()!=  null)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(NodeUtil.isExpressionNode(n)&&  first.getNext()!=  null)  {	  if(NodeUtil.isExpressionNode(n)||    first.getNext()!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
216	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(first)&&  first.getNext()!=  null)  {  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isExpressionNode(first)&&  first.getNext()!=  null)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(NodeUtil.isExpressionNode(first)&&  first.getNext()!=  null)  {	  if(NodeUtil.isExpressionNode(n)||    first.getNext()!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
217	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(first)||  next.getNext()!=  null)  {  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isExpressionNode(first)||  next.getNext()!=  null)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(NodeUtil.isExpressionNode(first)||  next.getNext()!=  null)  {	  if(NodeUtil.isExpressionNode(n)||    first.getNext()!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
218	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(n)||  first.getNext()  ==  null)  {  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isExpressionNode(n)||  first.getNext()  ==  null)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(NodeUtil.isExpressionNode(n)||  first.getNext()  ==  null)  {	  if(NodeUtil.isExpressionNode(n)||    first.getNext()!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
219	[BUG]  [BUGGY]  if(NodeUtil.isLiteralValue(first)||  first.getNext()!=  null)  {  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isLiteralValue(first)||  first.getNext()!=  null)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(NodeUtil.isLiteralValue(first)||  first.getNext()!=  null)  {	  if(NodeUtil.isExpressionNode(n)||    first.getNext()!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
220	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(last)||  first.getNext()!=  null)  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isExpressionNode(last)||  first.getNext()!=  null)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(NodeUtil.isExpressionNode(last)||  first.getNext()!=  null)  {	  if(NodeUtil.isExpressionNode(first)||    first.getNext()!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	124	None	replace
221	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(first)||  first.getNext()  ==  null)  {  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isExpressionNode(first)||  first.getNext()  ==  null)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(NodeUtil.isExpressionNode(first)||  first.getNext()  ==  null)  {	  if(NodeUtil.isExpressionNode(first)||    first.getNext()!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	124	None	replace
222	[BUG]  [BUGGY]  if(NodeUtil.isVarDeclaration(first)||  first.getNext()!=  null)  {  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isVarDeclaration(first)||  first.getNext()!=  null)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(NodeUtil.isVarDeclaration(first)||  first.getNext()!=  null)  {	  if(NodeUtil.isExpressionNode(first)||    first.getNext()!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	124	None	replace
223	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(first)&&  NodeUtil.isExpressionNode(first))  {  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isExpressionNode(first)&&  NodeUtil.isExpressionNode(first))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(NodeUtil.isExpressionNode(first)&&  NodeUtil.isExpressionNode(first))  {	  if(NodeUtil.isExpressionNode(first)||    NodeUtil.isExpressionNode(first))    {    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
224	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(n)||  NodeUtil.isExpressionNode(first))  {  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isExpressionNode(n)||  NodeUtil.isExpressionNode(first))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(NodeUtil.isExpressionNode(n)||  NodeUtil.isExpressionNode(first))  {	  if(NodeUtil.isExpressionNode(first)||    NodeUtil.isExpressionNode(first))    {    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
225	[BUG]  [BUGGY]  if(NodeUtil.isStringNode(first)||  NodeUtil.isExpressionNode(first))  {  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isStringNode(first)||  NodeUtil.isExpressionNode(first))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(NodeUtil.isStringNode(first)||  NodeUtil.isExpressionNode(first))  {	  if(NodeUtil.isExpressionNode(first)||    NodeUtil.isExpressionNode(first))    {    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
226	[BUG]  [BUGGY]  if(NodeUtil.isVarDeclaration(first)||  NodeUtil.isExpressionNode(first))  {  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isVarDeclaration(first)||  NodeUtil.isExpressionNode(first))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(NodeUtil.isVarDeclaration(first)||  NodeUtil.isExpressionNode(first))  {	  if(NodeUtil.isExpressionNode(first)||    NodeUtil.isExpressionNode(first))    {    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
227	[BUG]  [BUGGY]  if(NodeUtil.isName(first)||  NodeUtil.isExpressionNode(first))  {  [CE]  illegal  start  of  expression  [FE]                                    ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isName(first)||  NodeUtil.isExpressionNode(first))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(NodeUtil.isName(first)||  NodeUtil.isExpressionNode(first))  {	  if(NodeUtil.isExpressionNode(first)||    NodeUtil.isExpressionNode(first))    {    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
228	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(last)||  NodeUtil.isExpressionNode(first))  {  [CE]  illegal  start  of  expression  [FE]                                      ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isExpressionNode(last)||  NodeUtil.isExpressionNode(first))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(NodeUtil.isExpressionNode(last)||  NodeUtil.isExpressionNode(first))  {	  if(NodeUtil.isExpressionNode(first)||    NodeUtil.isExpressionNode(first))    {    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
229	[BUG]  [BUGGY]  if(first.getType()  ==  Token.STRING  ||  childCount  ==  ((  n.getNext()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first.getType()  ==  Token.STRING  ||  childCount  ==  ((  n.getNext()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(first.getType()  ==  Token.STRING  ||  childCount  ==  ((  n.getNext()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {	  if(n.getType()    ==    Token.STRING    ||    childCount    ==    ((    n.getNext()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    	non-compiled	[CE]  illegal  start  of  expression	131	None	replace
230	[BUG]  [BUGGY]  if(first.getType()  ==  Token.STRING  ||  childCount  ==  ((  n.getNext()!=  null  &&  first.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first.getType()  ==  Token.STRING  ||  childCount  ==  ((  n.getNext()!=  null  &&  first.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(first.getType()  ==  Token.STRING  ||  childCount  ==  ((  n.getNext()!=  null  &&  first.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {	  if(n.getType()    ==    Token.STRING    ||    childCount    ==    ((    n.getNext()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    	non-compiled	[CE]  illegal  start  of  expression	131	None	replace
231	[BUG]  [BUGGY]  if(n.getType()!=  Token.STRING  &&  childCount  ==  ((  n.getNext()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getType()!=  Token.STRING  &&  childCount  ==  ((  n.getNext()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(n.getType()!=  Token.STRING  &&  childCount  ==  ((  n.getNext()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {	  if(n.getType()    ==    Token.STRING    ||    childCount    ==    ((    n.getNext()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    	non-compiled	[CE]  illegal  start  of  expression	131	None	replace
232	[BUG]  [BUGGY]  if(first!=  null  ||  first.getType()!=  Token.STRING)  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first!=  null  ||  first.getType()!=  Token.STRING)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(first!=  null  ||  first.getType()!=  Token.STRING)  {	  if(first    ==    null    ||    first.getType()!=    Token.STRING)    {    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
233	[BUG]  [BUGGY]  if(n  ==  null  ||  first.getType()!=  Token.STRING)  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n  ==  null  ||  first.getType()!=  Token.STRING)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(n  ==  null  ||  first.getType()!=  Token.STRING)  {	  if(first    ==    null    ||    first.getType()!=    Token.STRING)    {    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
234	[BUG]  [BUGGY]  if(first  ==  null  ||  second.getType()!=  Token.STRING)  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first  ==  null  ||  second.getType()!=  Token.STRING)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(first  ==  null  ||  second.getType()!=  Token.STRING)  {	  if(first    ==    null    ||    first.getType()!=    Token.STRING)    {    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
235	[BUG]  [BUGGY]  if(first  ==  null  &&  first.getType()!=  Token.STRING)  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first  ==  null  &&  first.getType()!=  Token.STRING)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(first  ==  null  &&  first.getType()!=  Token.STRING)  {	  if(first    ==    null    ||    first.getType()!=    Token.STRING)    {    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
236	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(n)&&  next.getType()  ==  Token.STRING)  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isExpressionNode(n)&&  next.getType()  ==  Token.STRING)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(NodeUtil.isExpressionNode(n)&&  next.getType()  ==  Token.STRING)  {	  if(NodeUtil.isExpressionNode(n)&&    first.getType()    ==    Token.STRING)    {    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
237	[BUG]  [BUGGY]  if(childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getLastChild().getType()  ==  Token.STRING)||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT  [CE]  [FE]            ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getLastChild().getType()  ==  Token.STRING)||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getLastChild().getType()  ==  Token.STRING)||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT	  if(childCount    ==    ((    n.getFirstChild()!=    null    &&    n.getLastChild().getType()    ==    Token.STRING)||    childCount    ==    ((    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.OBJECT    	non-compiled	[CE]  	141	None	replace
238	[BUG]  [BUGGY]  if(childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getLastChild().getType()  ==  Token.STRING)||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT));  [CE]  [FE]              ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getLastChild().getType()  ==  Token.STRING)||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT));  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getLastChild().getType()  ==  Token.STRING)||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT));	  if(childCount    ==    ((    n.getFirstChild()!=    null    &&    n.getLastChild().getType()    ==    Token.STRING)||    childCount    ==    ((    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.OBJECT    	non-compiled	[CE]  	141	None	replace
239	[BUG]  [BUGGY]  if(first!=  null  &&  first.getFirstChild()!=  null  &&  first.getNext().getType()  ==  Token.STRING)  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first!=  null  &&  first.getFirstChild()!=  null  &&  first.getNext().getType()  ==  Token.STRING)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(first!=  null  &&  first.getFirstChild()!=  null  &&  first.getNext().getType()  ==  Token.STRING)  {	  if(childCount    ==    1    &&    first.getFirstChild()!=    null    &&    first.getNext().getType()    ==    Token.STRING)    {    	non-compiled	[CE]  illegal  start  of  expression	156	None	replace
240	[BUG]  [BUGGY]  if(first.getFirstChild()!=  null  &&  first.getNext().getType()  ==  Token.STRING)  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first.getFirstChild()!=  null  &&  first.getNext().getType()  ==  Token.STRING)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(first.getFirstChild()!=  null  &&  first.getNext().getType()  ==  Token.STRING)  {	  if(childCount    ==    1    &&    first.getFirstChild()!=    null    &&    first.getNext().getType()    ==    Token.STRING)    {    	non-compiled	[CE]  illegal  start  of  expression	156	None	replace
241	[BUG]  [BUGGY]  if(childCount  ==  1  &&  first.getFirstChild()!=  null  &&  second.getNext().getType()  ==  Token.STRING)  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  1  &&  first.getFirstChild()!=  null  &&  second.getNext().getType()  ==  Token.STRING)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(childCount  ==  1  &&  first.getFirstChild()!=  null  &&  second.getNext().getType()  ==  Token.STRING)  {	  if(childCount    ==    1    &&    first.getFirstChild()!=    null    &&    first.getNext().getType()    ==    Token.STRING)    {    	non-compiled	[CE]  illegal  start  of  expression	156	None	replace
242	[BUG]  [BUGGY]  if(childCount  ==  1  &&  first!=  null  &&  first.getNext().getType()  ==  Token.STRING)  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  1  &&  first!=  null  &&  first.getNext().getType()  ==  Token.STRING)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(childCount  ==  1  &&  first!=  null  &&  first.getNext().getType()  ==  Token.STRING)  {	  if(childCount    ==    1    &&    first.getFirstChild()!=    null    &&    first.getNext().getType()    ==    Token.STRING)    {    	non-compiled	[CE]  illegal  start  of  expression	156	None	replace
243	[BUG]  [BUGGY]  if(childCount  ==  1  ||  first.getFirstChild()!=  null  &&  first.getNext().getType()  ==  Token.STRING)  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  1  ||  first.getFirstChild()!=  null  &&  first.getNext().getType()  ==  Token.STRING)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(childCount  ==  1  ||  first.getFirstChild()!=  null  &&  first.getNext().getType()  ==  Token.STRING)  {	  if(childCount    ==    1    &&    first.getFirstChild()!=    null    &&    first.getNext().getType()    ==    Token.STRING)    {    	non-compiled	[CE]  illegal  start  of  expression	156	None	replace
244	[BUG]  [BUGGY]  if(first  ==  null  &&  first.getFirstChild()!=  null  &&  first.getNext().getType()  ==  Token.STRING)  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first  ==  null  &&  first.getFirstChild()!=  null  &&  first.getNext().getType()  ==  Token.STRING)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(first  ==  null  &&  first.getFirstChild()!=  null  &&  first.getNext().getType()  ==  Token.STRING)  {	  if(childCount    ==    1    &&    first.getFirstChild()!=    null    &&    first.getNext().getType()    ==    Token.STRING)    {    	non-compiled	[CE]  illegal  start  of  expression	156	None	replace
245	[BUG]  [BUGGY]  if(NodeUtil.isStringNode(n)&&  first.getNext().getType()  ==  Token.STRING)  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isStringNode(n)&&  first.getNext().getType()  ==  Token.STRING)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(NodeUtil.isStringNode(n)&&  first.getNext().getType()  ==  Token.STRING)  {	  if(NodeUtil.isStringNode(n))    {    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
246	[BUG]  [BUGGY]  if(NodeUtil.isStringNode(n)||  NodeUtil.isExpressionNode(n))  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isStringNode(n)||  NodeUtil.isExpressionNode(n))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(NodeUtil.isStringNode(n)||  NodeUtil.isExpressionNode(n))  {	  if(NodeUtil.isStringNode(n))    {    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
247	[BUG]  [BUGGY]  if(NodeUtil.isStringNode(n)||  NodeUtil.isFunctionDeclaration(n))  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isStringNode(n)||  NodeUtil.isFunctionDeclaration(n))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(NodeUtil.isStringNode(n)||  NodeUtil.isFunctionDeclaration(n))  {	  if(NodeUtil.isStringNode(n))    {    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
248	[BUG]  [BUGGY]  if(NodeUtil.isStringNode(n)&&  first.getFirstChild().getType()  ==  Token.STRING)  {  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isStringNode(n)&&  first.getFirstChild().getType()  ==  Token.STRING)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(NodeUtil.isStringNode(n)&&  first.getFirstChild().getType()  ==  Token.STRING)  {	  if(NodeUtil.isStringNode(n))    {    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
249	[BUG]  [BUGGY]  if(NodeUtil.isStringNode(n)&&  first.getType()  ==  Token.STRING)  {  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isStringNode(n)&&  first.getType()  ==  Token.STRING)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(NodeUtil.isStringNode(n)&&  first.getType()  ==  Token.STRING)  {	  if(NodeUtil.isStringNode(n))    {    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
250	[BUG]  [BUGGY]  if(NodeUtil.isStringNode(n)||  NodeUtil.isStringNode(n))  {  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isStringNode(n)||  NodeUtil.isStringNode(n))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(NodeUtil.isStringNode(n)||  NodeUtil.isStringNode(n))  {	  if(NodeUtil.isStringNode(n))    {    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
251	[BUG]  [BUGGY]  if(childCount  ==  1  ||  first.getString().equals( "string "))  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  1  ||  first.getString().equals( "string "))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(childCount  ==  1  ||  first.getString().equals( "string "))  {	  if(childCount    ==    1    &&    first.getString().equals(   "string   "))    {    	non-compiled	[CE]  illegal  start  of  expression	127	None	replace
252	[BUG]  [BUGGY]  if(childCount  ==  1  &&  next.getString().equals( "string "))  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  1  &&  next.getString().equals( "string "))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(childCount  ==  1  &&  next.getString().equals( "string "))  {	  if(childCount    ==    1    &&    first.getString().equals(   "string   "))    {    	non-compiled	[CE]  illegal  start  of  expression	127	None	replace
253	[BUG]  [BUGGY]  if(childCount  ==  1  &&  first.getString().equals( "string ")||  first.getString().equals( "string "))  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  1  &&  first.getString().equals( "string ")||  first.getString().equals( "string "))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(childCount  ==  1  &&  first.getString().equals( "string ")||  first.getString().equals( "string "))  {	  if(childCount    ==    1    &&    first.getString().equals(   "string   "))    {    	non-compiled	[CE]  illegal  start  of  expression	127	None	replace
254	[BUG]  [BUGGY]  if(childCount  ==  1  &&  first.getType()  ==  Token.STRING  &&  first.getString().equals( "string "))  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  1  &&  first.getType()  ==  Token.STRING  &&  first.getString().equals( "string "))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(childCount  ==  1  &&  first.getType()  ==  Token.STRING  &&  first.getString().equals( "string "))  {	  if(childCount    ==    1    &&    first.getString().equals(   "string   "))    {    	non-compiled	[CE]  illegal  start  of  expression	127	None	replace
255	[BUG]  [BUGGY]  if(childCount  ==  1  &&  first.getNext().equals( "string "))  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  1  &&  first.getNext().equals( "string "))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(childCount  ==  1  &&  first.getNext().equals( "string "))  {	  if(childCount    ==    1    &&    first.getString().equals(   "string   "))    {    	non-compiled	[CE]  illegal  start  of  expression	127	None	replace
256	[BUG]  [BUGGY]  if(childCount  ==  1  &&  first.getString().startsWith( "string "))  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  1  &&  first.getString().startsWith( "string "))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(childCount  ==  1  &&  first.getString().startsWith( "string "))  {	  if(childCount    ==    1    &&    first.getString().equals(   "string   "))    {    	non-compiled	[CE]  illegal  start  of  expression	127	None	replace
257	[BUG]  [BUGGY]  Node  n  =  first.getLastChild();  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  Node  n  =  first.getLastChild();  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	Node  n  =  first.getLastChild();	  Node    n    =    first.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	118	None	replace
258	[BUG]  [BUGGY]  Node  n  =  next.getFirstChild();  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  Node  n  =  next.getFirstChild();  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	Node  n  =  next.getFirstChild();	  Node    n    =    first.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	118	None	replace
259	[BUG]  [BUGGY]  Node  n  =  second.getFirstChild();  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  Node  n  =  second.getFirstChild();  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	Node  n  =  second.getFirstChild();	  Node    n    =    first.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	118	None	replace
260	[BUG]  [BUGGY]  Node  n  =  last.getFirstChild();  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  Node  n  =  last.getFirstChild();  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	Node  n  =  last.getFirstChild();	  Node    n    =    first.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	118	None	replace
261	[BUG]  [BUGGY]  Context  n  =  next.getCurrentContext();  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  Context  n  =  next.getCurrentContext();  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	Context  n  =  next.getCurrentContext();	  Context    n    =    context.getCurrentContext();    	non-compiled	[CE]  illegal  start  of  expression	135	None	replace
262	[BUG]  [BUGGY]  Context  n  =  first.getCurrentContext();  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  Context  n  =  first.getCurrentContext();  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	Context  n  =  first.getCurrentContext();	  Context    n    =    context.getCurrentContext();    	non-compiled	[CE]  illegal  start  of  expression	135	None	replace
263	[BUG]  [BUGGY]  Context  n  =  this.context.getCurrentContext();  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  Context  n  =  this.context.getCurrentContext();  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	Context  n  =  this.context.getCurrentContext();	  Context    n    =    context.getCurrentContext();    	non-compiled	[CE]  illegal  start  of  expression	135	None	replace
264	[BUG]  [BUGGY]  Context  n  =  getCurrentContext();  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  Context  n  =  getCurrentContext();  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	Context  n  =  getCurrentContext();	  Context    n    =    context.getCurrentContext();    	non-compiled	[CE]  illegal  start  of  expression	135	None	replace
265	[BUG]  [BUGGY]  Context  n  =  context.getCurrentStatementContext();  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  Context  n  =  context.getCurrentStatementContext();  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	Context  n  =  context.getCurrentStatementContext();	  Context    n    =    context.getCurrentContext();    	non-compiled	[CE]  illegal  start  of  expression	135	None	replace
266	[BUG]  [BUGGY]  Context  n  =  context.getCurrentContext(true);  [CE]  illegal  start  of  expression  [FE]                                    ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  Context  n  =  context.getCurrentContext(true);  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	Context  n  =  context.getCurrentContext(true);	  Context    n    =    context.getCurrentContext();    	non-compiled	[CE]  illegal  start  of  expression	135	None	replace
267	[BUG]  [BUGGY]  Preconditions.checkState(childCount  ==  1  &&  first.getType()  ==  Token.STRING);  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  Preconditions.checkState(childCount  ==  1  &&  first.getType()  ==  Token.STRING);  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	Preconditions.checkState(childCount  ==  1  &&  first.getType()  ==  Token.STRING);	  Preconditions.checkState(childCount    ==    1);    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
268	[BUG]  [BUGGY]  Preconditions.checkState(childCount  ==  1  &&  first.getType()  ==  Token.FUNCTION);  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  Preconditions.checkState(childCount  ==  1  &&  first.getType()  ==  Token.FUNCTION);  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	Preconditions.checkState(childCount  ==  1  &&  first.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(childCount    ==    1);    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
269	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING  ||  first.getNext()!=  null)  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getType()  ==  Token.STRING  ||  first.getNext()!=  null)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(n.getType()  ==  Token.STRING  ||  first.getNext()!=  null)  {	  if(n.getType()    ==    Token.STRING    &&    first.getNext()!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	147	None	replace
270	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING  &&  first!=  null)  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getType()  ==  Token.STRING  &&  first!=  null)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(n.getType()  ==  Token.STRING  &&  first!=  null)  {	  if(n.getType()    ==    Token.STRING    &&    first.getNext()!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	147	None	replace
271	[BUG]  [BUGGY]  if(first.getType()  ==  Token.STRING  &&  childCount!=  ((  n.getNext()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first.getType()  ==  Token.STRING  &&  childCount!=  ((  n.getNext()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(first.getType()  ==  Token.STRING  &&  childCount!=  ((  n.getNext()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {	  if(n.getType()    ==    Token.STRING    &&    childCount!=    ((    n.getNext()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    	non-compiled	[CE]  illegal  start  of  expression	138	None	replace
272	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING  ||  childCount!=  ((  n.getNext()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getType()  ==  Token.STRING  ||  childCount!=  ((  n.getNext()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(n.getType()  ==  Token.STRING  ||  childCount!=  ((  n.getNext()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {	  if(n.getType()    ==    Token.STRING    &&    childCount!=    ((    n.getNext()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    	non-compiled	[CE]  illegal  start  of  expression	138	None	replace
273	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING  &&  childCount!=  ((  first.getNext()!=  null  &&  first.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getType()  ==  Token.STRING  &&  childCount!=  ((  first.getNext()!=  null  &&  first.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(n.getType()  ==  Token.STRING  &&  childCount!=  ((  first.getNext()!=  null  &&  first.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {	  if(n.getType()    ==    Token.STRING    &&    childCount!=    ((    n.getNext()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    	non-compiled	[CE]  illegal  start  of  expression	138	None	replace
274	[BUG]  [BUGGY]  if(first.getType()  ==  Token.STRING  &&  childCount!=  ((  n.getNext()!=  null  &&  first.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first.getType()  ==  Token.STRING  &&  childCount!=  ((  n.getNext()!=  null  &&  first.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(first.getType()  ==  Token.STRING  &&  childCount!=  ((  n.getNext()!=  null  &&  first.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {	  if(n.getType()    ==    Token.STRING    &&    childCount!=    ((    n.getNext()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    	non-compiled	[CE]  illegal  start  of  expression	138	None	replace
275	[BUG]  [BUGGY]  if(first.getType()  ==  Token.STRING  &&  next.getString().equals( "string "))  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first.getType()  ==  Token.STRING  &&  next.getString().equals( "string "))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(first.getType()  ==  Token.STRING  &&  next.getString().equals( "string "))  {	  if(n.getType()    ==    Token.STRING    &&    first.getString().equals(   "string   "))    {    	non-compiled	[CE]  illegal  start  of  expression	145	None	replace
276	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING  &&  next.getString().equals( "string "))  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getType()  ==  Token.STRING  &&  next.getString().equals( "string "))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(n.getType()  ==  Token.STRING  &&  next.getString().equals( "string "))  {	  if(n.getType()    ==    Token.STRING    &&    first.getString().equals(   "string   "))    {    	non-compiled	[CE]  illegal  start  of  expression	145	None	replace
277	[BUG]  [BUGGY]  if(first.getType()  ==  Token.STRING  &&  second.getString().equals( "string "))  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first.getType()  ==  Token.STRING  &&  second.getString().equals( "string "))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(first.getType()  ==  Token.STRING  &&  second.getString().equals( "string "))  {	  if(n.getType()    ==    Token.STRING    &&    first.getString().equals(   "string   "))    {    	non-compiled	[CE]  illegal  start  of  expression	145	None	replace
278	[BUG]  [BUGGY]  if(First.getType()  ==  Token.STRING  &&  first.getString().equals( "string "))  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(First.getType()  ==  Token.STRING  &&  first.getString().equals( "string "))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(First.getType()  ==  Token.STRING  &&  first.getString().equals( "string "))  {	  if(n.getType()    ==    Token.STRING    &&    first.getString().equals(   "string   "))    {    	non-compiled	[CE]  illegal  start  of  expression	145	None	replace
279	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(n)&&  NodeUtil.isVarDeclaration(n))  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isExpressionNode(n)&&  NodeUtil.isVarDeclaration(n))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(NodeUtil.isExpressionNode(n)&&  NodeUtil.isVarDeclaration(n))  {	  if(NodeUtil.isExpressionNode(n)||    NodeUtil.isVarDeclaration(n))    {    	non-compiled	[CE]  illegal  start  of  expression	148	None	replace
280	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(first)||  NodeUtil.isVarDeclaration(n))  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isExpressionNode(first)||  NodeUtil.isVarDeclaration(n))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(NodeUtil.isExpressionNode(first)||  NodeUtil.isVarDeclaration(n))  {	  if(NodeUtil.isExpressionNode(n)||    NodeUtil.isVarDeclaration(n))    {    	non-compiled	[CE]  illegal  start  of  expression	148	None	replace
281	[BUG]  [BUGGY]  if(NodeUtil.isVarDeclaration(n)||  NodeUtil.isExpressionNode(n))  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isVarDeclaration(n)||  NodeUtil.isExpressionNode(n))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(NodeUtil.isVarDeclaration(n)||  NodeUtil.isExpressionNode(n))  {	  if(NodeUtil.isExpressionNode(n)||    NodeUtil.isVarDeclaration(n))    {    	non-compiled	[CE]  illegal  start  of  expression	148	None	replace
282	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(n)||  NodeUtil.isStringDeclaration(n))  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isExpressionNode(n)||  NodeUtil.isStringDeclaration(n))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(NodeUtil.isExpressionNode(n)||  NodeUtil.isStringDeclaration(n))  {	  if(NodeUtil.isExpressionNode(n)||    NodeUtil.isVarDeclaration(n))    {    	non-compiled	[CE]  illegal  start  of  expression	148	None	replace
283	[BUG]  [BUGGY]  if(NodeUtil.isFunctionDeclaration(n)||  NodeUtil.isVarDeclaration(n))  {  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isFunctionDeclaration(n)||  NodeUtil.isVarDeclaration(n))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(NodeUtil.isFunctionDeclaration(n)||  NodeUtil.isVarDeclaration(n))  {	  if(NodeUtil.isExpressionNode(n)||    NodeUtil.isVarDeclaration(n))    {    	non-compiled	[CE]  illegal  start  of  expression	148	None	replace
284	[BUG]  [BUGGY]  if(NodeUtil.isName(n)||  NodeUtil.isVarDeclaration(n))  {  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isName(n)||  NodeUtil.isVarDeclaration(n))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(NodeUtil.isName(n)||  NodeUtil.isVarDeclaration(n))  {	  if(NodeUtil.isExpressionNode(n)||    NodeUtil.isVarDeclaration(n))    {    	non-compiled	[CE]  illegal  start  of  expression	148	None	replace
285	[BUG]  [BUGGY]  if(childCount  ==  ((  first.getNext()!=  null  &&  first.getParent().getType()  ==  Token.STRING)?  1  :  0))  {  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  ((  first.getNext()!=  null  &&  first.getParent().getType()  ==  Token.STRING)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(childCount  ==  ((  first.getNext()!=  null  &&  first.getParent().getType()  ==  Token.STRING)?  1  :  0))  {	  if(childCount    ==    ((    n.getNext()!=    null    &&    n.getParent().getType()    ==    Token.STRING)?    1    :    0))    {    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
286	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING  &&  childCount  ==  ((  n.getNext()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getType()  ==  Token.STRING  &&  childCount  ==  ((  n.getNext()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(n.getType()  ==  Token.STRING  &&  childCount  ==  ((  n.getNext()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {	  if(childCount    ==    ((    n.getNext()!=    null    &&    n.getParent().getType()    ==    Token.STRING)?    1    :    0))    {    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
287	[BUG]  [BUGGY]  if(childCount  ==  ((  first.getNext()!=  null  &&  second.getParent().getType()  ==  Token.STRING)?  1  :  0))  {  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  ((  first.getNext()!=  null  &&  second.getParent().getType()  ==  Token.STRING)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(childCount  ==  ((  first.getNext()!=  null  &&  second.getParent().getType()  ==  Token.STRING)?  1  :  0))  {	  if(childCount    ==    ((    n.getNext()!=    null    &&    n.getParent().getType()    ==    Token.STRING)?    1    :    0))    {    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
288	[BUG]  [BUGGY]  if(childCount  ==  ((  first!=  null  &&  first.getNext()!=  null  &&  first.getNext().getType()  ==  Token.STRING)?  1  :  0))  {  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  ((  first!=  null  &&  first.getNext()!=  null  &&  first.getNext().getType()  ==  Token.STRING)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(childCount  ==  ((  first!=  null  &&  first.getNext()!=  null  &&  first.getNext().getType()  ==  Token.STRING)?  1  :  0))  {	  if(childCount    ==    ((    n.getNext()!=    null    &&    n.getParent().getType()    ==    Token.STRING)?    1    :    0))    {    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
289	[BUG]  [BUGGY]  if(first.getType()!=  Token.STRING  &&  first.getString().equals( "string "))  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first.getType()!=  Token.STRING  &&  first.getString().equals( "string "))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(first.getType()!=  Token.STRING  &&  first.getString().equals( "string "))  {	  if(first.getType()    ==    Token.STRING    &&    first.getString().equals(   "string   "))    {    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
290	[BUG]  [BUGGY]  if(first.getType()  ==  Token.STRING  &&  first.getString().startsWith( "string "))  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first.getType()  ==  Token.STRING  &&  first.getString().startsWith( "string "))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(first.getType()  ==  Token.STRING  &&  first.getString().startsWith( "string "))  {	  if(first.getType()    ==    Token.STRING    &&    first.getString().equals(   "string   "))    {    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
291	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(n)||  childCount  ==  ((  n.getNext()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isExpressionNode(n)||  childCount  ==  ((  n.getNext()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(NodeUtil.isExpressionNode(n)||  childCount  ==  ((  n.getNext()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {	  if(NodeUtil.isExpressionNode(n)&&    childCount    ==    ((    n.getNext()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    	non-compiled	[CE]  illegal  start  of  expression	139	None	replace
292	[BUG]  [BUGGY]  if(first.getType()  ==  Token.STRING  ||  first.getNext().getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first.getType()  ==  Token.STRING  ||  first.getNext().getType()  ==  Token.FUNCTION)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(first.getType()  ==  Token.STRING  ||  first.getNext().getType()  ==  Token.FUNCTION)  {	  if(n.getType()    ==    Token.STRING    ||    first.getNext().getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
293	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING  &&  first.getNext().getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getType()  ==  Token.STRING  &&  first.getNext().getType()  ==  Token.FUNCTION)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(n.getType()  ==  Token.STRING  &&  first.getNext().getType()  ==  Token.FUNCTION)  {	  if(n.getType()    ==    Token.STRING    ||    first.getNext().getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
294	[BUG]  [BUGGY]  if(first.getType()  ==  Token.STRING  ||  next.getNext().getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first.getType()  ==  Token.STRING  ||  next.getNext().getType()  ==  Token.FUNCTION)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(first.getType()  ==  Token.STRING  ||  next.getNext().getType()  ==  Token.FUNCTION)  {	  if(n.getType()    ==    Token.STRING    ||    first.getNext().getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
295	[BUG]  [BUGGY]  if(first.getType()  ==  Token.STRING  &&  first.getNext().getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first.getType()  ==  Token.STRING  &&  first.getNext().getType()  ==  Token.FUNCTION)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(first.getType()  ==  Token.STRING  &&  first.getNext().getType()  ==  Token.FUNCTION)  {	  if(n.getType()    ==    Token.STRING    ||    first.getNext().getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
296	[BUG]  [BUGGY]  if(first.getType()  ==  Token.STRING  ||  second.getNext().getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]                                    ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first.getType()  ==  Token.STRING  ||  second.getNext().getType()  ==  Token.FUNCTION)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(first.getType()  ==  Token.STRING  ||  second.getNext().getType()  ==  Token.FUNCTION)  {	  if(n.getType()    ==    Token.STRING    ||    first.getNext().getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
297	[BUG]  [BUGGY]  if(First.getType()  ==  Token.STRING  ||  first.getNext().getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]                                      ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(First.getType()  ==  Token.STRING  ||  first.getNext().getType()  ==  Token.FUNCTION)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(First.getType()  ==  Token.STRING  ||  first.getNext().getType()  ==  Token.FUNCTION)  {	  if(n.getType()    ==    Token.STRING    ||    first.getNext().getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
298	[BUG]  [BUGGY]  Preconditions.checkState(childCount  ==  2  -  1);  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  Preconditions.checkState(childCount  ==  2  -  1);  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	Preconditions.checkState(childCount  ==  2  -  1);	  Preconditions.checkState(childCount    ==    2);    	non-compiled	[CE]  illegal  start  of  expression	121	None	replace
299	[BUG]  [BUGGY]  Preconditions.checkState(childCount  ==  2  -  childCount);  [CE]  illegal  start  of  expression  [FE]                                    ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  Preconditions.checkState(childCount  ==  2  -  childCount);  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	Preconditions.checkState(childCount  ==  2  -  childCount);	  Preconditions.checkState(childCount    ==    2);    	non-compiled	[CE]  illegal  start  of  expression	121	None	replace
300	[BUG]  [BUGGY]  Preconditions.checkState(childCount  ==  2  &&  first.getType()  ==  Token.STRING);  [CE]  illegal  start  of  expression  [FE]                                      ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  Preconditions.checkState(childCount  ==  2  &&  first.getType()  ==  Token.STRING);  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	Preconditions.checkState(childCount  ==  2  &&  first.getType()  ==  Token.STRING);	  Preconditions.checkState(childCount    ==    2);    	non-compiled	[CE]  illegal  start  of  expression	121	None	replace
301	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME  &&  first.getString().equals( "string "))  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getType()  ==  Token.NAME  &&  first.getString().equals( "string "))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(n.getType()  ==  Token.NAME  &&  first.getString().equals( "string "))  {	  if(n.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
302	[BUG]  [BUGGY]  if(first.getType()  ==  Token.NAME)  {  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first.getType()  ==  Token.NAME)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(first.getType()  ==  Token.NAME)  {	  if(n.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
303	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME  ||  first.getString().equals( "string "))  {  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getType()  ==  Token.NAME  ||  first.getString().equals( "string "))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(n.getType()  ==  Token.NAME  ||  first.getString().equals( "string "))  {	  if(n.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
304	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.STRING)  {  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.STRING)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.STRING)  {	  if(n.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
305	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME  ||  first.getType()  ==  Token.STRING)  {  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getType()  ==  Token.NAME  ||  first.getType()  ==  Token.STRING)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(n.getType()  ==  Token.NAME  ||  first.getType()  ==  Token.STRING)  {	  if(n.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
306	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(first)&&  next.getNext().getType()  ==  Token.STRING)  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isExpressionNode(first)&&  next.getNext().getType()  ==  Token.STRING)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(NodeUtil.isExpressionNode(first)&&  next.getNext().getType()  ==  Token.STRING)  {	  if(NodeUtil.isExpressionNode(n)&&    first.getNext().getType()    ==    Token.STRING)    {    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
307	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(n)||  first.getNext().getType()  ==  Token.STRING)  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isExpressionNode(n)||  first.getNext().getType()  ==  Token.STRING)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(NodeUtil.isExpressionNode(n)||  first.getNext().getType()  ==  Token.STRING)  {	  if(NodeUtil.isExpressionNode(n)&&    first.getNext().getType()    ==    Token.STRING)    {    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
308	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(n)&&  first.getFirstChild().getType()  ==  Token.STRING)  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isExpressionNode(n)&&  first.getFirstChild().getType()  ==  Token.STRING)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(NodeUtil.isExpressionNode(n)&&  first.getFirstChild().getType()  ==  Token.STRING)  {	  if(NodeUtil.isExpressionNode(n)&&    first.getNext().getType()    ==    Token.STRING)    {    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
309	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(n)&&  childCount!=  ((  n.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isExpressionNode(n)&&  childCount!=  ((  n.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(NodeUtil.isExpressionNode(n)&&  childCount!=  ((  n.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {	  if(NodeUtil.isExpressionNode(n)&&    childCount!=    ((    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.STRING)?    1    :    0))    {    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
310	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(n)||  childCount!=  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isExpressionNode(n)||  childCount!=  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(NodeUtil.isExpressionNode(n)||  childCount!=  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {	  if(NodeUtil.isExpressionNode(n)&&    childCount!=    ((    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.STRING)?    1    :    0))    {    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
311	[BUG]  [BUGGY]  if(childCount  ==  ((  first.getFirstChild()!=  null  &&  first.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  ((  first.getFirstChild()!=  null  &&  first.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(childCount  ==  ((  first.getFirstChild()!=  null  &&  first.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {	  if(childCount    ==    ((    n.getFirstChild()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    	non-compiled	[CE]  illegal  start  of  expression	143	None	replace
312	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING  &&  n.getType()  ==  Token.NAME)  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getType()  ==  Token.STRING  &&  n.getType()  ==  Token.NAME)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(n.getType()  ==  Token.STRING  &&  n.getType()  ==  Token.NAME)  {	  if(n.getType()    ==    Token.STRING    ||    n.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
313	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING  ||  n.getType()!=  Token.NAME)  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getType()  ==  Token.STRING  ||  n.getType()!=  Token.NAME)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(n.getType()  ==  Token.STRING  ||  n.getType()!=  Token.NAME)  {	  if(n.getType()    ==    Token.STRING    ||    n.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
314	[BUG]  [BUGGY]  if(n.getType()!=  Token.STRING  &&  n.getType()  ==  Token.NAME)  {  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getType()!=  Token.STRING  &&  n.getType()  ==  Token.NAME)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(n.getType()!=  Token.STRING  &&  n.getType()  ==  Token.NAME)  {	  if(n.getType()    ==    Token.STRING    ||    n.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
315	[BUG]  [BUGGY]  Context  cc  =  next.getContext();  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  Context  cc  =  next.getContext();  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	Context  cc  =  next.getContext();	  Context    cc    =    context.getContext();    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
316	[BUG]  [BUGGY]  Context  cc  =  this.context.getContext();  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  Context  cc  =  this.context.getContext();  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	Context  cc  =  this.context.getContext();	  Context    cc    =    context.getContext();    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
317	[BUG]  [BUGGY]  Context  cc  =  first.getContext();  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  Context  cc  =  first.getContext();  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	Context  cc  =  first.getContext();	  Context    cc    =    context.getContext();    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
318	[BUG]  [BUGGY]  Context  cc  =  getContextForNode(context);  [CE]  illegal  start  of  expression  [FE]                                    ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  Context  cc  =  getContextForNode(context);  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	Context  cc  =  getContextForNode(context);	  Context    cc    =    context.getContext();    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
319	[BUG]  [BUGGY]  if(n!=  null  &&  first.getType()  ==  Token.STRING)  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n!=  null  &&  first.getType()  ==  Token.STRING)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(n!=  null  &&  first.getType()  ==  Token.STRING)  {	  if(n!=    null    ||    first.getType()    ==    Token.STRING)    {    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
320	[BUG]  [BUGGY]  if(first!=  null  ||  next.getType()  ==  Token.STRING)  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first!=  null  ||  next.getType()  ==  Token.STRING)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(first!=  null  ||  next.getType()  ==  Token.STRING)  {	  if(n!=    null    ||    first.getType()    ==    Token.STRING)    {    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
321	[BUG]  [BUGGY]  if(n  ==  null  &&  first.getType()  ==  Token.STRING)  {  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n  ==  null  &&  first.getType()  ==  Token.STRING)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(n  ==  null  &&  first.getType()  ==  Token.STRING)  {	  if(n!=    null    ||    first.getType()    ==    Token.STRING)    {    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
322	[BUG]  [BUGGY]  if(n.getLastChild()  ==  null)  {  [CE]  [FE]                  ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getLastChild()  ==  null)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(n.getLastChild()  ==  null)  {	  if(n.getFirstChild()    ==    null)    {    	non-compiled	[CE]  	133	None	replace
323	[BUG]  [BUGGY]  if(first.getFirstChild()  ==  null)  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first.getFirstChild()  ==  null)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(first.getFirstChild()  ==  null)  {	  if(n.getFirstChild()    ==    null)    {    	non-compiled	[CE]  illegal  start  of  expression	133	None	replace
324	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(n)||  childCount!=  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isExpressionNode(n)||  childCount!=  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(NodeUtil.isExpressionNode(n)||  childCount!=  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {	  if(NodeUtil.isExpressionNode(n)&&    childCount!=    ((    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
325	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(n)&&  childCount!=  ((  n.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isExpressionNode(n)&&  childCount!=  ((  n.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(NodeUtil.isExpressionNode(n)&&  childCount!=  ((  n.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {	  if(NodeUtil.isExpressionNode(n)&&    childCount!=    ((    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
326	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(n)&&  childCount  ==  ((  n.getNext()!=  null  &&  n.getNext().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isExpressionNode(n)&&  childCount  ==  ((  n.getNext()!=  null  &&  n.getNext().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(NodeUtil.isExpressionNode(n)&&  childCount  ==  ((  n.getNext()!=  null  &&  n.getNext().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {	  if(NodeUtil.isExpressionNode(n)&&    childCount!=    ((    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
327	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(first)&&  childCount  ==  ((  first.getNext()!=  null  &&  first.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isExpressionNode(first)&&  childCount  ==  ((  first.getNext()!=  null  &&  first.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(NodeUtil.isExpressionNode(first)&&  childCount  ==  ((  first.getNext()!=  null  &&  first.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {	  if(NodeUtil.isExpressionNode(first)&&    childCount    ==    ((    n.getNext()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
328	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(first)||  childCount  ==  ((  n.getNext()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isExpressionNode(first)||  childCount  ==  ((  n.getNext()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(NodeUtil.isExpressionNode(first)||  childCount  ==  ((  n.getNext()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {	  if(NodeUtil.isExpressionNode(first)&&    childCount    ==    ((    n.getNext()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
329	[BUG]  [BUGGY]  if(n.getParent()!=  null  &&  first!=  null  &&  first.getNext()!=  null)  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getParent()!=  null  &&  first!=  null  &&  first.getNext()!=  null)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(n.getParent()!=  null  &&  first!=  null  &&  first.getNext()!=  null)  {	  if(first!=    null    &&    first.getNext()!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	134	None	replace
330	[BUG]  [BUGGY]  if(first!=  null  ||  first.getNext()!=  null)  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first!=  null  ||  first.getNext()!=  null)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(first!=  null  ||  first.getNext()!=  null)  {	  if(first!=    null    &&    first.getNext()!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	134	None	replace
331	[BUG]  [BUGGY]  if(n!=  null  &&  first!=  null  &&  first.getNext()!=  null)  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n!=  null  &&  first!=  null  &&  first.getNext()!=  null)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(n!=  null  &&  first!=  null  &&  first.getNext()!=  null)  {	  if(first!=    null    &&    first.getNext()!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	134	None	replace
332	[BUG]  [BUGGY]  if(first  ==  null  &&  first.getNext()!=  null)  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first  ==  null  &&  first.getNext()!=  null)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(first  ==  null  &&  first.getNext()!=  null)  {	  if(first!=    null    &&    first.getNext()!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	134	None	replace
333	[BUG]  [BUGGY]  if(first!=  null  &&  first.getNext()  ==  null)  {  [CE]  [FE]                            ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first!=  null  &&  first.getNext()  ==  null)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(first!=  null  &&  first.getNext()  ==  null)  {	  if(first!=    null    &&    first.getNext()!=    null)    {    	non-compiled	[CE]  	134	None	replace
334	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING  &&  first.getType()  ==  Token.NAME)  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getType()  ==  Token.STRING  &&  first.getType()  ==  Token.NAME)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(n.getType()  ==  Token.STRING  &&  first.getType()  ==  Token.NAME)  {	  if(n.getType()    ==    Token.STRING    ||    first.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  illegal  start  of  expression	105	None	replace
335	[BUG]  [BUGGY]  if(first.getType()  ==  Token.STRING  ||  next.getType()  ==  Token.NAME)  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first.getType()  ==  Token.STRING  ||  next.getType()  ==  Token.NAME)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(first.getType()  ==  Token.STRING  ||  next.getType()  ==  Token.NAME)  {	  if(n.getType()    ==    Token.STRING    ||    first.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  illegal  start  of  expression	105	None	replace
336	[BUG]  [BUGGY]  if(first.getType()  ==  Token.STRING  ||  n.getType()  ==  Token.NAME)  {  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first.getType()  ==  Token.STRING  ||  n.getType()  ==  Token.NAME)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(first.getType()  ==  Token.STRING  ||  n.getType()  ==  Token.NAME)  {	  if(n.getType()    ==    Token.STRING    ||    first.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  illegal  start  of  expression	105	None	replace
337	[BUG]  [BUGGY]  if(first.getType()  ==  Token.STRING  ||  second.getType()  ==  Token.NAME)  {  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first.getType()  ==  Token.STRING  ||  second.getType()  ==  Token.NAME)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(first.getType()  ==  Token.STRING  ||  second.getType()  ==  Token.NAME)  {	  if(n.getType()    ==    Token.STRING    ||    first.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  illegal  start  of  expression	105	None	replace
338	[BUG]  [BUGGY]  if(First.getType()  ==  Token.STRING  ||  first.getType()  ==  Token.NAME)  {  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(First.getType()  ==  Token.STRING  ||  first.getType()  ==  Token.NAME)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(First.getType()  ==  Token.STRING  ||  first.getType()  ==  Token.NAME)  {	  if(n.getType()    ==    Token.STRING    ||    first.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  illegal  start  of  expression	105	None	replace
339	[BUG]  [BUGGY]  if(first.getType()  ==  Token.STRING  &&  childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first.getType()  ==  Token.STRING  &&  childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(first.getType()  ==  Token.STRING  &&  childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {	  if(n.getType()    ==    Token.STRING    &&    childCount    ==    ((    n.getFirstChild()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
340	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING  &&  childCount  ==  ((  first.getFirstChild()!=  null  &&  first.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getType()  ==  Token.STRING  &&  childCount  ==  ((  first.getFirstChild()!=  null  &&  first.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(n.getType()  ==  Token.STRING  &&  childCount  ==  ((  first.getFirstChild()!=  null  &&  first.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {	  if(n.getType()    ==    Token.STRING    &&    childCount    ==    ((    n.getFirstChild()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
341	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING  &&  childCount  ==  ((  n.getString()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getType()  ==  Token.STRING  &&  childCount  ==  ((  n.getString()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(n.getType()  ==  Token.STRING  &&  childCount  ==  ((  n.getString()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {	  if(childCount    ==    ((    n.getString()!=    null    &&    n.getParent().getType()    ==    Token.STRING)?    1    :    0))    {    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
342	[BUG]  [BUGGY]  if(childCount  ==  ((  n.getString()!=  null  &&  n.getNext().getType()  ==  Token.STRING)?  1  :  0))  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  ((  n.getString()!=  null  &&  n.getNext().getType()  ==  Token.STRING)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(childCount  ==  ((  n.getString()!=  null  &&  n.getNext().getType()  ==  Token.STRING)?  1  :  0))  {	  if(childCount    ==    ((    n.getString()!=    null    &&    n.getParent().getType()    ==    Token.STRING)?    1    :    0))    {    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
343	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING  ||  childCount  ==  ((  n.getString()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getType()  ==  Token.STRING  ||  childCount  ==  ((  n.getString()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(n.getType()  ==  Token.STRING  ||  childCount  ==  ((  n.getString()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {	  if(childCount    ==    ((    n.getString()!=    null    &&    n.getParent().getType()    ==    Token.STRING)?    1    :    0))    {    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
344	[BUG]  [BUGGY]  if(childCount  ==  ((  n.getString()!=  null  &&  n.getType()  ==  Token.STRING)?  1  :  0))  {  [CE]  [FE]                              ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  ((  n.getString()!=  null  &&  n.getType()  ==  Token.STRING)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(childCount  ==  ((  n.getString()!=  null  &&  n.getType()  ==  Token.STRING)?  1  :  0))  {	  if(childCount    ==    ((    n.getString()!=    null    &&    n.getParent().getType()    ==    Token.STRING)?    1    :    0))    {    	non-compiled	[CE]  	98	None	replace
345	[BUG]  [BUGGY]  if(childCount  ==  ((  first.getString()!=  null  &&  first.getParent().getType()  ==  Token.STRING)?  1  :  0))  {  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  ((  first.getString()!=  null  &&  first.getParent().getType()  ==  Token.STRING)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(childCount  ==  ((  first.getString()!=  null  &&  first.getParent().getType()  ==  Token.STRING)?  1  :  0))  {	  if(childCount    ==    ((    n.getString()!=    null    &&    n.getParent().getType()    ==    Token.STRING)?    1    :    0))    {    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
346	[BUG]  [BUGGY]  if(childCount  ==  ((  n.getString()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0)||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  ((  n.getString()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0)||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(childCount  ==  ((  n.getString()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0)||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)	  if(childCount    ==    ((    n.getString()!=    null    &&    n.getParent().getType()    ==    Token.STRING)?    1    :    0))    {    	non-compiled	[CE]  	98	None	replace
347	[BUG]  [BUGGY]  if(childCount  ==  ((  n.getLastChild()!=  null  &&  n.getLastChild().getType()  ==  Token.STRING)||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType  [CE]  [FE]            ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  ((  n.getLastChild()!=  null  &&  n.getLastChild().getType()  ==  Token.STRING)||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(childCount  ==  ((  n.getLastChild()!=  null  &&  n.getLastChild().getType()  ==  Token.STRING)||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType	  if(childCount    ==    ((    n.getFirstChild()!=    null    &&    n.getLastChild().getType()    ==    Token.STRING)||    childCount    ==    ((    n.getParent()!=    null    &&    n.getParent().getType    	non-compiled	[CE]  	101	None	replace
348	[BUG]  [BUGGY]  if(childCount!=  ((  n.getFirstChild()!=  null  &&  n.getLastChild().getType()  ==  Token.STRING)||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType  [CE]  [FE]              ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount!=  ((  n.getFirstChild()!=  null  &&  n.getLastChild().getType()  ==  Token.STRING)||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(childCount!=  ((  n.getFirstChild()!=  null  &&  n.getLastChild().getType()  ==  Token.STRING)||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType	  if(childCount    ==    ((    n.getFirstChild()!=    null    &&    n.getLastChild().getType()    ==    Token.STRING)||    childCount    ==    ((    n.getParent()!=    null    &&    n.getParent().getType    	non-compiled	[CE]  	101	None	replace
349	[BUG]  [BUGGY]  if(childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getLastChild().getType()  ==  Token.STRING));|  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType  [CE]  [FE]                ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getLastChild().getType()  ==  Token.STRING));|  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getLastChild().getType()  ==  Token.STRING));|  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType	  if(childCount    ==    ((    n.getFirstChild()!=    null    &&    n.getLastChild().getType()    ==    Token.STRING)||    childCount    ==    ((    n.getParent()!=    null    &&    n.getParent().getType    	non-compiled	[CE]  	101	None	replace
350	[BUG]  [BUGGY]  if(childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getLastChild().getType()  ==  Token.STRING)||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent()  [CE]  [FE]                  ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getLastChild().getType()  ==  Token.STRING)||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent()  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getLastChild().getType()  ==  Token.STRING)||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent()	  if(childCount    ==    ((    n.getFirstChild()!=    null    &&    n.getLastChild().getType()    ==    Token.STRING)||    childCount    ==    ((    n.getParent()!=    null    &&    n.getParent().getType    	non-compiled	[CE]  	101	None	replace
351	[BUG]  [BUGGY]  if(first  ==  null)  {  ((  n.getFirstChild()!=  null  &&  n.getLastChild().getType()  ==  Token.STRING)||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType  [CE]  [FE]                    ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first  ==  null)  {  ((  n.getFirstChild()!=  null  &&  n.getLastChild().getType()  ==  Token.STRING)||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(first  ==  null)  {  ((  n.getFirstChild()!=  null  &&  n.getLastChild().getType()  ==  Token.STRING)||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType	  if(childCount    ==    ((    n.getFirstChild()!=    null    &&    n.getLastChild().getType()    ==    Token.STRING)||    childCount    ==    ((    n.getParent()!=    null    &&    n.getParent().getType    	non-compiled	[CE]  	101	None	replace
352	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(first)&&  first.getFirstChild()!=  null)  {  [CE]  [FE]                        ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isExpressionNode(first)&&  first.getFirstChild()!=  null)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(NodeUtil.isExpressionNode(first)&&  first.getFirstChild()!=  null)  {	  if(NodeUtil.isExpressionNode(n)&&    first.getFirstChild()!=    null)    {    	non-compiled	[CE]  	150	None	replace
353	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(n)&&  first.getFirstChild()  ==  null)  {  [CE]  [FE]                          ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isExpressionNode(n)&&  first.getFirstChild()  ==  null)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(NodeUtil.isExpressionNode(n)&&  first.getFirstChild()  ==  null)  {	  if(NodeUtil.isExpressionNode(n)&&    first.getFirstChild()!=    null)    {    	non-compiled	[CE]  	150	None	replace
354	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(first)&&  next.getFirstChild()!=  null)  {  [CE]  [FE]                            ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isExpressionNode(first)&&  next.getFirstChild()!=  null)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(NodeUtil.isExpressionNode(first)&&  next.getFirstChild()!=  null)  {	  if(NodeUtil.isExpressionNode(n)&&    first.getFirstChild()!=    null)    {    	non-compiled	[CE]  	150	None	replace
355	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(n)&&  first.getLastChild()!=  null)  {  [CE]  [FE]                              ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isExpressionNode(n)&&  first.getLastChild()!=  null)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(NodeUtil.isExpressionNode(n)&&  first.getLastChild()!=  null)  {	  if(NodeUtil.isExpressionNode(n)&&    first.getFirstChild()!=    null)    {    	non-compiled	[CE]  	150	None	replace
356	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(n)&&  next.getFirstChild()!=  null)  {  [CE]  [FE]                                ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isExpressionNode(n)&&  next.getFirstChild()!=  null)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(NodeUtil.isExpressionNode(n)&&  next.getFirstChild()!=  null)  {	  if(NodeUtil.isExpressionNode(n)&&    first.getFirstChild()!=    null)    {    	non-compiled	[CE]  	150	None	replace
357	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(n)||  first.getFirstChild()!=  null)  {  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isExpressionNode(n)||  first.getFirstChild()!=  null)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(NodeUtil.isExpressionNode(n)||  first.getFirstChild()!=  null)  {	  if(NodeUtil.isExpressionNode(n)&&    first.getFirstChild()!=    null)    {    	non-compiled	[CE]  	150	None	replace
358	[BUG]  [BUGGY]  if(childCount  ==  ((  n.getLastChild()!=  null  &&  n.getNext().getType()  ==  Token.STRING)||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  [CE]  [FE]                ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  ((  n.getLastChild()!=  null  &&  n.getNext().getType()  ==  Token.STRING)||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(childCount  ==  ((  n.getLastChild()!=  null  &&  n.getNext().getType()  ==  Token.STRING)||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)	  if(childCount    ==    ((    n.getFirstChild()!=    null    &&    n.getNext().getType()    ==    Token.STRING)||    childCount    ==    ((    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)    	non-compiled	[CE]  	61	None	replace
359	[BUG]  [BUGGY]  if(childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getNext().getType()  ==  Token.STRING)||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT))  [CE]  [FE]                  ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getNext().getType()  ==  Token.STRING)||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT))  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getNext().getType()  ==  Token.STRING)||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT))	  if(childCount    ==    ((    n.getFirstChild()!=    null    &&    n.getNext().getType()    ==    Token.STRING)||    childCount    ==    ((    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)    	non-compiled	[CE]  	61	None	replace
360	[BUG]  [BUGGY]  if(childCount  ==  1  ||  first.getFirstChild()!=  null  &&  first.getLastChild().getString().equals( "prototype "))  {  [CE]  [FE]                ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  1  ||  first.getFirstChild()!=  null  &&  first.getLastChild().getString().equals( "prototype "))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(childCount  ==  1  ||  first.getFirstChild()!=  null  &&  first.getLastChild().getString().equals( "prototype "))  {	  if(childCount    ==    1    &&    first.getFirstChild()!=    null    &&    first.getLastChild().getString().equals(   "prototype   "))    {    	non-compiled	[CE]  	157	None	replace
361	[BUG]  [BUGGY]  if(childCount  ==  1  &&  first.getFirstChild()!=  null  &&  last.getLastChild().getString().equals( "prototype "))  {  [CE]  [FE]                  ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  1  &&  first.getFirstChild()!=  null  &&  last.getLastChild().getString().equals( "prototype "))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(childCount  ==  1  &&  first.getFirstChild()!=  null  &&  last.getLastChild().getString().equals( "prototype "))  {	  if(childCount    ==    1    &&    first.getFirstChild()!=    null    &&    first.getLastChild().getString().equals(   "prototype   "))    {    	non-compiled	[CE]  	157	None	replace
362	[BUG]  [BUGGY]  if(childCount  ==  1  &&  first.getLastChild()!=  null  &&  first.getLastChild().getString().equals( "prototype "))  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  1  &&  first.getLastChild()!=  null  &&  first.getLastChild().getString().equals( "prototype "))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(childCount  ==  1  &&  first.getLastChild()!=  null  &&  first.getLastChild().getString().equals( "prototype "))  {	  if(childCount    ==    1    &&    first.getFirstChild()!=    null    &&    first.getLastChild().getString().equals(   "prototype   "))    {    	non-compiled	[CE]  	157	None	replace
363	[BUG]  [BUGGY]  if(first.getFirstChild()!=  null  &&  first.getLastChild().getString().equals( "prototype "))  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first.getFirstChild()!=  null  &&  first.getLastChild().getString().equals( "prototype "))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(first.getFirstChild()!=  null  &&  first.getLastChild().getString().equals( "prototype "))  {	  if(childCount    ==    1    &&    first.getFirstChild()!=    null    &&    first.getLastChild().getString().equals(   "prototype   "))    {    	non-compiled	[CE]  	157	None	replace
364	[BUG]  [BUGGY]  if(childCount  ==  1  &&  first.getFirstChild()!=  null  &&  second.getLastChild().getString().equals( "prototype "))  {  [CE]  [FE]                        ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  1  &&  first.getFirstChild()!=  null  &&  second.getLastChild().getString().equals( "prototype "))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(childCount  ==  1  &&  first.getFirstChild()!=  null  &&  second.getLastChild().getString().equals( "prototype "))  {	  if(childCount    ==    1    &&    first.getFirstChild()!=    null    &&    first.getLastChild().getString().equals(   "prototype   "))    {    	non-compiled	[CE]  	157	None	replace
365	[BUG]  [BUGGY]  if(childCount!=  1  &&  first.getFirstChild()!=  null  &&  first.getLastChild().getString().equals( "prototype "))  {  [CE]  [FE]                          ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount!=  1  &&  first.getFirstChild()!=  null  &&  first.getLastChild().getString().equals( "prototype "))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(childCount!=  1  &&  first.getFirstChild()!=  null  &&  first.getLastChild().getString().equals( "prototype "))  {	  if(childCount    ==    1    &&    first.getFirstChild()!=    null    &&    first.getLastChild().getString().equals(   "prototype   "))    {    	non-compiled	[CE]  	157	None	replace
366	[BUG]  [BUGGY]  if(first.getType()  ==  Token.STRING  ||  first.getType()  ==  Token.GETPROP)  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first.getType()  ==  Token.STRING  ||  first.getType()  ==  Token.GETPROP)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(first.getType()  ==  Token.STRING  ||  first.getType()  ==  Token.GETPROP)  {	  if(n.getType()    ==    Token.STRING    ||    first.getType()    ==    Token.GETPROP)    {    	non-compiled	[CE]  	103	None	replace
367	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING  &&  first.getType()  ==  Token.GETPROP)  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getType()  ==  Token.STRING  &&  first.getType()  ==  Token.GETPROP)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(n.getType()  ==  Token.STRING  &&  first.getType()  ==  Token.GETPROP)  {	  if(n.getType()    ==    Token.STRING    ||    first.getType()    ==    Token.GETPROP)    {    	non-compiled	[CE]  	103	None	replace
368	[BUG]  [BUGGY]  if(first.getType()  ==  Token.STRING  ||  next.getType()  ==  Token.GETPROP)  {  [CE]  [FE]                        ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first.getType()  ==  Token.STRING  ||  next.getType()  ==  Token.GETPROP)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(first.getType()  ==  Token.STRING  ||  next.getType()  ==  Token.GETPROP)  {	  if(n.getType()    ==    Token.STRING    ||    first.getType()    ==    Token.GETPROP)    {    	non-compiled	[CE]  	103	None	replace
369	[BUG]  [BUGGY]  if(first.getType()  ==  Token.STRING  ||  second.getType()  ==  Token.GETPROP)  {  [CE]  [FE]                          ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first.getType()  ==  Token.STRING  ||  second.getType()  ==  Token.GETPROP)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(first.getType()  ==  Token.STRING  ||  second.getType()  ==  Token.GETPROP)  {	  if(n.getType()    ==    Token.STRING    ||    first.getType()    ==    Token.GETPROP)    {    	non-compiled	[CE]  	103	None	replace
370	[BUG]  [BUGGY]  if(First.getType()  ==  Token.STRING  ||  first.getType()  ==  Token.GETPROP)  {  [CE]  [FE]                            ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(First.getType()  ==  Token.STRING  ||  first.getType()  ==  Token.GETPROP)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(First.getType()  ==  Token.STRING  ||  first.getType()  ==  Token.GETPROP)  {	  if(n.getType()    ==    Token.STRING    ||    first.getType()    ==    Token.GETPROP)    {    	non-compiled	[CE]  	103	None	replace
371	[BUG]  [BUGGY]  if(first.getType()  ==  Token.STRING  ||  n.getType()  ==  Token.GETPROP)  {  [CE]  [FE]                              ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first.getType()  ==  Token.STRING  ||  n.getType()  ==  Token.GETPROP)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(first.getType()  ==  Token.STRING  ||  n.getType()  ==  Token.GETPROP)  {	  if(n.getType()    ==    Token.STRING    ||    first.getType()    ==    Token.GETPROP)    {    	non-compiled	[CE]  	103	None	replace
372	[BUG]  [BUGGY]  if(NodeUtil.isFunctionDeclaration(n)&&  NodeUtil.isExpressionNode(n))  {  [CE]  [FE]                              ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isFunctionDeclaration(n)&&  NodeUtil.isExpressionNode(n))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(NodeUtil.isFunctionDeclaration(n)&&  NodeUtil.isExpressionNode(n))  {	  if(NodeUtil.isExpressionNode(n)&&    NodeUtil.isFunctionDeclaration(n))    {    	non-compiled	[CE]  	72	None	replace
373	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(n)&&  NodeUtil.isStringDeclaration(n))  {  [CE]  [FE]                                ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isExpressionNode(n)&&  NodeUtil.isStringDeclaration(n))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(NodeUtil.isExpressionNode(n)&&  NodeUtil.isStringDeclaration(n))  {	  if(NodeUtil.isExpressionNode(n)&&    NodeUtil.isFunctionDeclaration(n))    {    	non-compiled	[CE]  	72	None	replace
374	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(n)&&  NodeUtil.isAssignmentOp(n))  {  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isExpressionNode(n)&&  NodeUtil.isAssignmentOp(n))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(NodeUtil.isExpressionNode(n)&&  NodeUtil.isAssignmentOp(n))  {	  if(NodeUtil.isExpressionNode(n)&&    NodeUtil.isFunctionDeclaration(n))    {    	non-compiled	[CE]  	72	None	replace
375	[BUG]  [BUGGY]  if(n.getFirstChild()!=  null  &&  first.getType()  ==  Token.STRING)  {  [CE]  [FE]              ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getFirstChild()!=  null  &&  first.getType()  ==  Token.STRING)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(n.getFirstChild()!=  null  &&  first.getType()  ==  Token.STRING)  {	  if(first!=    null    &&    first.getType()    ==    Token.STRING)    {    	non-compiled	[CE]  	115	None	replace
376	[BUG]  [BUGGY]  if(first.getType()  ==  Token.STRING  &&  first.getType()  ==  Token.OBJECTLIT)  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first.getType()  ==  Token.STRING  &&  first.getType()  ==  Token.OBJECTLIT)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(first.getType()  ==  Token.STRING  &&  first.getType()  ==  Token.OBJECTLIT)  {	  if(first.getType()    ==    Token.STRING    ||    first.getType()    ==    Token.OBJECTLIT)    {    	non-compiled	[CE]  	25	None	replace
377	[BUG]  [BUGGY]  if(first.getType()!=  Token.STRING  &&  first.getType()  ==  Token.OBJECTLIT)  {  [CE]  [FE]                        ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first.getType()!=  Token.STRING  &&  first.getType()  ==  Token.OBJECTLIT)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(first.getType()!=  Token.STRING  &&  first.getType()  ==  Token.OBJECTLIT)  {	  if(first.getType()    ==    Token.STRING    ||    first.getType()    ==    Token.OBJECTLIT)    {    	non-compiled	[CE]  	25	None	replace
378	[BUG]  [BUGGY]  if(first.getType()  ==  Token.STRING  ||  first.getType()!=  Token.OBJECTLIT)  {  [CE]  [FE]                          ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first.getType()  ==  Token.STRING  ||  first.getType()!=  Token.OBJECTLIT)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(first.getType()  ==  Token.STRING  ||  first.getType()!=  Token.OBJECTLIT)  {	  if(first.getType()    ==    Token.STRING    ||    first.getType()    ==    Token.OBJECTLIT)    {    	non-compiled	[CE]  	25	None	replace
379	[BUG]  [BUGGY]  if(first!=  null  ||  first.getType()  ==  Token.STRING  ||  first.getType()  ==  Token.OBJECTLIT)  {  [CE]  [FE]                            ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first!=  null  ||  first.getType()  ==  Token.STRING  ||  first.getType()  ==  Token.OBJECTLIT)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(first!=  null  ||  first.getType()  ==  Token.STRING  ||  first.getType()  ==  Token.OBJECTLIT)  {	  if(first.getType()    ==    Token.STRING    ||    first.getType()    ==    Token.OBJECTLIT)    {    	non-compiled	[CE]  	25	None	replace
380	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(first)&&  NodeUtil.isExpressionNode(n))  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isExpressionNode(first)&&  NodeUtil.isExpressionNode(n))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(NodeUtil.isExpressionNode(first)&&  NodeUtil.isExpressionNode(n))  {	  if(NodeUtil.isExpressionNode(n)&&    NodeUtil.isExpressionNode(n))    {    	non-compiled	[CE]  	149	None	replace
381	[BUG]  [BUGGY]  if(NodeUtil.isAssignmentOp(n)&&  NodeUtil.isExpressionNode(n))  {  [CE]  [FE]                        ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isAssignmentOp(n)&&  NodeUtil.isExpressionNode(n))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(NodeUtil.isAssignmentOp(n)&&  NodeUtil.isExpressionNode(n))  {	  if(NodeUtil.isExpressionNode(n)&&    NodeUtil.isExpressionNode(n))    {    	non-compiled	[CE]  	149	None	replace
382	[BUG]  [BUGGY]  if(NodeUtil.isName(first)&&  NodeUtil.isExpressionNode(n))  {  [CE]  [FE]                          ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isName(first)&&  NodeUtil.isExpressionNode(n))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(NodeUtil.isName(first)&&  NodeUtil.isExpressionNode(n))  {	  if(NodeUtil.isExpressionNode(n)&&    NodeUtil.isExpressionNode(n))    {    	non-compiled	[CE]  	149	None	replace
383	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(n)&&  NodeUtil.isStringNode(n))  {  [CE]  [FE]                            ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isExpressionNode(n)&&  NodeUtil.isStringNode(n))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(NodeUtil.isExpressionNode(n)&&  NodeUtil.isStringNode(n))  {	  if(NodeUtil.isExpressionNode(n)&&    NodeUtil.isExpressionNode(n))    {    	non-compiled	[CE]  	149	None	replace
384	[BUG]  [BUGGY]  if(childCount  ==  first.getType()  ||  childCount!=  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [CE]  [FE]                  ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  first.getType()  ||  childCount!=  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(childCount  ==  first.getType()  ||  childCount!=  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {	  if(first.getType()    ==    Token.STRING    ||    childCount!=    ((    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    	non-compiled	[CE]  	97	None	replace
385	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING  ||  childCount!=  ((  n.getNext()!=  null  &&  n.getNext().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getType()  ==  Token.STRING  ||  childCount!=  ((  n.getNext()!=  null  &&  n.getNext().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(n.getType()  ==  Token.STRING  ||  childCount!=  ((  n.getNext()!=  null  &&  n.getNext().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {	  if(first.getType()    ==    Token.STRING    ||    childCount!=    ((    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    	non-compiled	[CE]  	97	None	replace
386	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING  ||  childCount!=  ((  first.getParent()!=  null  &&  first.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getType()  ==  Token.STRING  ||  childCount!=  ((  first.getParent()!=  null  &&  first.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(n.getType()  ==  Token.STRING  ||  childCount!=  ((  first.getParent()!=  null  &&  first.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {	  if(first.getType()    ==    Token.STRING    ||    childCount!=    ((    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    	non-compiled	[CE]  	97	None	replace
387	[BUG]  [BUGGY]  if(NodeUtil.isFunctionDeclaration(first))  {  [CE]  [FE]                            ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isFunctionDeclaration(first))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(NodeUtil.isFunctionDeclaration(first))  {	  if(NodeUtil.isFunctionDeclaration(n))    {    	non-compiled	[CE]  	71	None	replace
388	[BUG]  [BUGGY]  if(NodeUtil.isFunctionDeclaration(n)||  NodeUtil.isExpressionNode(n))  {  [CE]  [FE]                              ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isFunctionDeclaration(n)||  NodeUtil.isExpressionNode(n))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(NodeUtil.isFunctionDeclaration(n)||  NodeUtil.isExpressionNode(n))  {	  if(NodeUtil.isFunctionDeclaration(n))    {    	non-compiled	[CE]  	71	None	replace
389	[BUG]  [BUGGY]  if(NodeUtil.isFunctionDeclaration(n)&&  first.getNext().getType()  ==  Token.STRING)  {  [CE]  [FE]                                ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isFunctionDeclaration(n)&&  first.getNext().getType()  ==  Token.STRING)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(NodeUtil.isFunctionDeclaration(n)&&  first.getNext().getType()  ==  Token.STRING)  {	  if(NodeUtil.isFunctionDeclaration(n))    {    	non-compiled	[CE]  	71	None	replace
390	[BUG]  [BUGGY]  if(NodeUtil.isVarDeclaration(n))  {  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isVarDeclaration(n))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(NodeUtil.isVarDeclaration(n))  {	  if(NodeUtil.isFunctionDeclaration(n))    {    	non-compiled	[CE]  	71	None	replace
391	[BUG]  [BUGGY]  if(NodeUtil.isFunctionDeclaration(n)&&  first.getNext().getType()  ==  Token.FUNCTION)  {  [CE]  [FE]                                    ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isFunctionDeclaration(n)&&  first.getNext().getType()  ==  Token.FUNCTION)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(NodeUtil.isFunctionDeclaration(n)&&  first.getNext().getType()  ==  Token.FUNCTION)  {	  if(NodeUtil.isFunctionDeclaration(n))    {    	non-compiled	[CE]  	71	None	replace
392	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING  &&  childCount  ==  ((  n.getNext()!=  null  &&  n.getNext().getType()  ==  Token.STRING)?  1  :  0))  {  [CE]  [FE]                        ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getType()  ==  Token.STRING  &&  childCount  ==  ((  n.getNext()!=  null  &&  n.getNext().getType()  ==  Token.STRING)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(n.getType()  ==  Token.STRING  &&  childCount  ==  ((  n.getNext()!=  null  &&  n.getNext().getType()  ==  Token.STRING)?  1  :  0))  {	  if(childCount    ==    ((    n.getNext()!=    null    &&    n.getNext().getType()    ==    Token.STRING)?    1    :    0))    {    	non-compiled	[CE]  	43	None	replace
393	[BUG]  [BUGGY]  if(childCount  ==  ((  n.getParent()!=  null  &&  n.getNext().getType()  ==  Token.STRING)?  1  :  0))  {  [CE]  [FE]                          ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  ((  n.getParent()!=  null  &&  n.getNext().getType()  ==  Token.STRING)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(childCount  ==  ((  n.getParent()!=  null  &&  n.getNext().getType()  ==  Token.STRING)?  1  :  0))  {	  if(childCount    ==    ((    n.getNext()!=    null    &&    n.getNext().getType()    ==    Token.STRING)?    1    :    0))    {    	non-compiled	[CE]  	43	None	replace
394	[BUG]  [BUGGY]  if(childCount  ==  ((  first.getNext()!=  null  &&  second.getNext().getType()  ==  Token.STRING)?  1  :  0))  {  [CE]  orphaned  case  [FE]                            ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  ((  first.getNext()!=  null  &&  second.getNext().getType()  ==  Token.STRING)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(childCount  ==  ((  first.getNext()!=  null  &&  second.getNext().getType()  ==  Token.STRING)?  1  :  0))  {	  if(childCount    ==    ((    n.getNext()!=    null    &&    n.getNext().getType()    ==    Token.STRING)?    1    :    0))    {    	non-compiled	[CE]  orphaned  case	43	None	replace
395	[BUG]  [BUGGY]  if(childCount  ==  ((  n.getNext()!=  null  &&  first.getNext().getType()  ==  Token.STRING)?  1  :  0))  {  [CE]  [FE]                              ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  ((  n.getNext()!=  null  &&  first.getNext().getType()  ==  Token.STRING)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(childCount  ==  ((  n.getNext()!=  null  &&  first.getNext().getType()  ==  Token.STRING)?  1  :  0))  {	  if(childCount    ==    ((    n.getNext()!=    null    &&    n.getNext().getType()    ==    Token.STRING)?    1    :    0))    {    	non-compiled	[CE]  	43	None	replace
396	[BUG]  [BUGGY]  if(NodeUtil.isStringNode(first)||  first.getType()  ==  Token.STRING)  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isStringNode(first)||  first.getType()  ==  Token.STRING)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(NodeUtil.isStringNode(first)||  first.getType()  ==  Token.STRING)  {	  if(NodeUtil.isStringNode(first))    {    	non-compiled	[CE]  	122	None	replace
397	[BUG]  [BUGGY]  if(NodeUtil.isStringNode(first)&&  first.getType()  ==  Token.STRING)  {  [CE]  [FE]                        ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isStringNode(first)&&  first.getType()  ==  Token.STRING)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(NodeUtil.isStringNode(first)&&  first.getType()  ==  Token.STRING)  {	  if(NodeUtil.isStringNode(first))    {    	non-compiled	[CE]  	122	None	replace
398	[BUG]  [BUGGY]  if(NodeUtil.isStringNode(first)&&  first.getNext().getType()  ==  Token.STRING)  {  [CE]  [FE]                          ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isStringNode(first)&&  first.getNext().getType()  ==  Token.STRING)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(NodeUtil.isStringNode(first)&&  first.getNext().getType()  ==  Token.STRING)  {	  if(NodeUtil.isStringNode(first))    {    	non-compiled	[CE]  	122	None	replace
399	[BUG]  [BUGGY]  if(NodeUtil.isStringNode(first)&&  NodeUtil.isFunctionDeclaration(first))  {  [CE]  [FE]                            ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isStringNode(first)&&  NodeUtil.isFunctionDeclaration(first))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(NodeUtil.isStringNode(first)&&  NodeUtil.isFunctionDeclaration(first))  {	  if(NodeUtil.isStringNode(first))    {    	non-compiled	[CE]  	122	None	replace
400	[BUG]  [BUGGY]  if(NodeUtil.isStringNode(first)&&  first.getType()!=  Token.STRING)  {  [CE]  [FE]                              ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isStringNode(first)&&  first.getType()!=  Token.STRING)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(NodeUtil.isStringNode(first)&&  first.getType()!=  Token.STRING)  {	  if(NodeUtil.isStringNode(first))    {    	non-compiled	[CE]  	122	None	replace
401	[BUG]  [BUGGY]  if(first.getType()  ==  Token.STRING  &&  childCount  ==  ((  n.getNext()!=  null  &&  n.getParent().getType()  ==  Token.FUNCTION)?  1  :  0))  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first.getType()  ==  Token.STRING  &&  childCount  ==  ((  n.getNext()!=  null  &&  n.getParent().getType()  ==  Token.FUNCTION)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(first.getType()  ==  Token.STRING  &&  childCount  ==  ((  n.getNext()!=  null  &&  n.getParent().getType()  ==  Token.FUNCTION)?  1  :  0))  {	  if(n.getType()    ==    Token.STRING    &&    childCount    ==    ((    n.getNext()!=    null    &&    n.getParent().getType()    ==    Token.FUNCTION)?    1    :    0))    {    	non-compiled	[CE]  	140	None	replace
402	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING  &&  childCount  ==  ((  first.getNext()!=  null  &&  first.getParent().getType()  ==  Token.FUNCTION)?  1  :  0))  {  [CE]  [FE]                        ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getType()  ==  Token.STRING  &&  childCount  ==  ((  first.getNext()!=  null  &&  first.getParent().getType()  ==  Token.FUNCTION)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(n.getType()  ==  Token.STRING  &&  childCount  ==  ((  first.getNext()!=  null  &&  first.getParent().getType()  ==  Token.FUNCTION)?  1  :  0))  {	  if(n.getType()    ==    Token.STRING    &&    childCount    ==    ((    n.getNext()!=    null    &&    n.getParent().getType()    ==    Token.FUNCTION)?    1    :    0))    {    	non-compiled	[CE]  	140	None	replace
403	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING  ||  childCount  ==  ((  n.getNext()!=  null  &&  n.getParent().getType()  ==  Token.FUNCTION)?  1  :  0))  {  [CE]  [FE]                          ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getType()  ==  Token.STRING  ||  childCount  ==  ((  n.getNext()!=  null  &&  n.getParent().getType()  ==  Token.FUNCTION)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(n.getType()  ==  Token.STRING  ||  childCount  ==  ((  n.getNext()!=  null  &&  n.getParent().getType()  ==  Token.FUNCTION)?  1  :  0))  {	  if(n.getType()    ==    Token.STRING    &&    childCount    ==    ((    n.getNext()!=    null    &&    n.getParent().getType()    ==    Token.FUNCTION)?    1    :    0))    {    	non-compiled	[CE]  	140	None	replace
404	[BUG]  [BUGGY]  if(first.getType()  ==  Token.STRING  &&  childCount  ==  ((  n.getNext()!=  null  &&  first.getParent().getType()  ==  Token.FUNCTION)?  1  :  0))  {  [CE]  orphaned  case  [FE]                            ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first.getType()  ==  Token.STRING  &&  childCount  ==  ((  n.getNext()!=  null  &&  first.getParent().getType()  ==  Token.FUNCTION)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(first.getType()  ==  Token.STRING  &&  childCount  ==  ((  n.getNext()!=  null  &&  first.getParent().getType()  ==  Token.FUNCTION)?  1  :  0))  {	  if(n.getType()    ==    Token.STRING    &&    childCount    ==    ((    n.getNext()!=    null    &&    n.getParent().getType()    ==    Token.FUNCTION)?    1    :    0))    {    	non-compiled	[CE]  orphaned  case	140	None	replace
405	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING  &&  childCount  ==  ((  n.getString()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [CE]  orphaned  case  [FE]                            ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getType()  ==  Token.STRING  &&  childCount  ==  ((  n.getString()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(n.getType()  ==  Token.STRING  &&  childCount  ==  ((  n.getString()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {	  if(childCount    ==    ((    n.getString()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    	non-compiled	[CE]  orphaned  case	144	None	replace
406	[BUG]  [BUGGY]  if(childCount  ==  ((  n.getString()!=  null  &&  n.getParent().getType()  ==  Token.FUNCTION)?  1  :  0))  {  [CE]  [FE]                              ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  ((  n.getString()!=  null  &&  n.getParent().getType()  ==  Token.FUNCTION)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(childCount  ==  ((  n.getString()!=  null  &&  n.getParent().getType()  ==  Token.FUNCTION)?  1  :  0))  {	  if(childCount    ==    ((    n.getString()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    	non-compiled	[CE]  	144	None	replace
407	[BUG]  [BUGGY]  if(first.getType()  ==  Token.STRING  &&  childCount  ==  ((  first.getNext()!=  null  &&  first.getNext().getType()  ==  Token.STRING)?  1  :  0))  {  [CE]  [FE]                  ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first.getType()  ==  Token.STRING  &&  childCount  ==  ((  first.getNext()!=  null  &&  first.getNext().getType()  ==  Token.STRING)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(first.getType()  ==  Token.STRING  &&  childCount  ==  ((  first.getNext()!=  null  &&  first.getNext().getType()  ==  Token.STRING)?  1  :  0))  {	  if(childCount    ==    ((    first.getNext()!=    null    &&    first.getNext().getType()    ==    Token.STRING)?    1    :    0))    {    	non-compiled	[CE]  	66	None	replace
408	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING  &&  childCount  ==  ((  first.getNext()!=  null  &&  first.getNext().getType()  ==  Token.STRING)?  1  :  0))  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getType()  ==  Token.STRING  &&  childCount  ==  ((  first.getNext()!=  null  &&  first.getNext().getType()  ==  Token.STRING)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(n.getType()  ==  Token.STRING  &&  childCount  ==  ((  first.getNext()!=  null  &&  first.getNext().getType()  ==  Token.STRING)?  1  :  0))  {	  if(childCount    ==    ((    first.getNext()!=    null    &&    first.getNext().getType()    ==    Token.STRING)?    1    :    0))    {    	non-compiled	[CE]  	66	None	replace
409	[BUG]  [BUGGY]  if(childCount!=  ((  first.getNext()!=  null  &&  first.getNext().getType()  ==  Token.STRING)?  1  :  0))  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount!=  ((  first.getNext()!=  null  &&  first.getNext().getType()  ==  Token.STRING)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(childCount!=  ((  first.getNext()!=  null  &&  first.getNext().getType()  ==  Token.STRING)?  1  :  0))  {	  if(childCount    ==    ((    first.getNext()!=    null    &&    first.getNext().getType()    ==    Token.STRING)?    1    :    0))    {    	non-compiled	[CE]  	66	None	replace
410	[BUG]  [BUGGY]  if(childCount  ==  ((  first.getNext()!=  null  &&  first.getNext().getType()  ==  Token.STRING)?  1  :  0)||(first.getNext()!=  null  &&  first.getNext().getType()  ==  Token.OBJECTLIT))  {  [CE]  [FE]                        ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  ((  first.getNext()!=  null  &&  first.getNext().getType()  ==  Token.STRING)?  1  :  0)||(first.getNext()!=  null  &&  first.getNext().getType()  ==  Token.OBJECTLIT))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(childCount  ==  ((  first.getNext()!=  null  &&  first.getNext().getType()  ==  Token.STRING)?  1  :  0)||(first.getNext()!=  null  &&  first.getNext().getType()  ==  Token.OBJECTLIT))  {	  if(childCount    ==    ((    first.getNext()!=    null    &&    first.getNext().getType()    ==    Token.STRING)?    1    :    0))    {    	non-compiled	[CE]  	66	None	replace
411	[BUG]  [BUGGY]  if(childCount  ==  ((  first.getNext()!=  null  &&  first.getNext().getType()  ==  Token.STRING)?  1  :  0)||  childCount  ==  ((  first.getNext()!=  null  &&  first.getNext().getType()  ==  Token.OBJECTLIT)  [CE]  [FE]                          ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  ((  first.getNext()!=  null  &&  first.getNext().getType()  ==  Token.STRING)?  1  :  0)||  childCount  ==  ((  first.getNext()!=  null  &&  first.getNext().getType()  ==  Token.OBJECTLIT)  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(childCount  ==  ((  first.getNext()!=  null  &&  first.getNext().getType()  ==  Token.STRING)?  1  :  0)||  childCount  ==  ((  first.getNext()!=  null  &&  first.getNext().getType()  ==  Token.OBJECTLIT)	  if(childCount    ==    ((    first.getNext()!=    null    &&    first.getNext().getType()    ==    Token.STRING)?    1    :    0))    {    	non-compiled	[CE]  	66	None	replace
412	[BUG]  [BUGGY]  if(first.getType()  ==  Token.STRING  &&  first.getType()  ==  Token.NAME)  {  [CE]  [FE]                          ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first.getType()  ==  Token.STRING  &&  first.getType()  ==  Token.NAME)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(first.getType()  ==  Token.STRING  &&  first.getType()  ==  Token.NAME)  {	  if(first.getType()    ==    Token.STRING    ||    first.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  	27	None	replace
413	[BUG]  [BUGGY]  if(first.getType()  ==  Token.STRING  ||  first.getType()!=  Token.NAME)  {  [CE]  [FE]                            ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first.getType()  ==  Token.STRING  ||  first.getType()!=  Token.NAME)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(first.getType()  ==  Token.STRING  ||  first.getType()!=  Token.NAME)  {	  if(first.getType()    ==    Token.STRING    ||    first.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  	27	None	replace
414	[BUG]  [BUGGY]  if(first.getType()!=  Token.STRING  &&  first.getType()  ==  Token.NAME)  {  [CE]  [FE]                              ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first.getType()!=  Token.STRING  &&  first.getType()  ==  Token.NAME)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(first.getType()!=  Token.STRING  &&  first.getType()  ==  Token.NAME)  {	  if(first.getType()    ==    Token.STRING    ||    first.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  	27	None	replace
415	[BUG]  [BUGGY]  if(first!=  null  ||  first.getType()  ==  Token.STRING  ||  first.getType()  ==  Token.NAME)  {  [CE]  [FE]                                ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first!=  null  ||  first.getType()  ==  Token.STRING  ||  first.getType()  ==  Token.NAME)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(first!=  null  ||  first.getType()  ==  Token.STRING  ||  first.getType()  ==  Token.NAME)  {	  if(first.getType()    ==    Token.STRING    ||    first.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  	27	None	replace
416	[BUG]  [BUGGY]  if(first.getType()!=  Token.STRING  ||  first.getType()  ==  Token.NAME)  {  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first.getType()!=  Token.STRING  ||  first.getType()  ==  Token.NAME)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(first.getType()!=  Token.STRING  ||  first.getType()  ==  Token.NAME)  {	  if(first.getType()    ==    Token.STRING    ||    first.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  	27	None	replace
417	[BUG]  [BUGGY]  if(childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getNext().getType()  ==  Token.STRING)||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT));  [CE]  [FE]                  ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getNext().getType()  ==  Token.STRING)||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT));  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getNext().getType()  ==  Token.STRING)||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT));	  if(childCount    ==    ((    n.getFirstChild()!=    null    &&    n.getNext().getType()    ==    Token.STRING)||    childCount    ==    ((    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    	non-compiled	[CE]  	62	None	replace
418	[BUG]  [BUGGY]  if(childCount  ==  ((  first.getFirstChild()!=  null  &&  first.getNext().getType()  ==  Token.STRING)||  childCount  ==  ((  n.getParent()!=  null  &&  first.getParent().getType()  ==  Token.OBJECTLIT)?  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  ((  first.getFirstChild()!=  null  &&  first.getNext().getType()  ==  Token.STRING)||  childCount  ==  ((  n.getParent()!=  null  &&  first.getParent().getType()  ==  Token.OBJECTLIT)?  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(childCount  ==  ((  first.getFirstChild()!=  null  &&  first.getNext().getType()  ==  Token.STRING)||  childCount  ==  ((  n.getParent()!=  null  &&  first.getParent().getType()  ==  Token.OBJECTLIT)?	  if(childCount    ==    ((    n.getFirstChild()!=    null    &&    n.getNext().getType()    ==    Token.STRING)||    childCount    ==    ((    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
419	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(first)||  NodeUtil.isVarDeclaration(first))  {  [CE]  [FE]                        ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isExpressionNode(first)||  NodeUtil.isVarDeclaration(first))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(NodeUtil.isExpressionNode(first)||  NodeUtil.isVarDeclaration(first))  {	  if(NodeUtil.isExpressionNode(first)&&    NodeUtil.isVarDeclaration(first))    {    	non-compiled	[CE]  	161	None	replace
420	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(n)&&  NodeUtil.isVarDeclaration(first))  {  [CE]  [FE]                          ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isExpressionNode(n)&&  NodeUtil.isVarDeclaration(first))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(NodeUtil.isExpressionNode(n)&&  NodeUtil.isVarDeclaration(first))  {	  if(NodeUtil.isExpressionNode(first)&&    NodeUtil.isVarDeclaration(first))    {    	non-compiled	[CE]  	161	None	replace
421	[BUG]  [BUGGY]  if(NodeUtil.isVarDeclaration(first)&&  NodeUtil.isExpressionNode(first))  {  [CE]  [FE]                            ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isVarDeclaration(first)&&  NodeUtil.isExpressionNode(first))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(NodeUtil.isVarDeclaration(first)&&  NodeUtil.isExpressionNode(first))  {	  if(NodeUtil.isExpressionNode(first)&&    NodeUtil.isVarDeclaration(first))    {    	non-compiled	[CE]  	161	None	replace
422	[BUG]  [BUGGY]  if(NodeUtil.isFunctionDeclaration(first)&&  NodeUtil.isVarDeclaration(first))  {  [CE]  [FE]                              ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isFunctionDeclaration(first)&&  NodeUtil.isVarDeclaration(first))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(NodeUtil.isFunctionDeclaration(first)&&  NodeUtil.isVarDeclaration(first))  {	  if(NodeUtil.isExpressionNode(first)&&    NodeUtil.isVarDeclaration(first))    {    	non-compiled	[CE]  	161	None	replace
423	[BUG]  [BUGGY]  if(NodeUtil.isName(first)&&  NodeUtil.isVarDeclaration(first))  {  [CE]  [FE]                                ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isName(first)&&  NodeUtil.isVarDeclaration(first))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(NodeUtil.isName(first)&&  NodeUtil.isVarDeclaration(first))  {	  if(NodeUtil.isExpressionNode(first)&&    NodeUtil.isVarDeclaration(first))    {    	non-compiled	[CE]  	161	None	replace
424	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING  ||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {  [CE]  [FE]              ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getType()  ==  Token.STRING  ||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(n.getType()  ==  Token.STRING  ||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {	  if(n.getType()    ==    Token.STRING    &&    childCount    ==    ((    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.STRING)?    1    :    0))    {    	non-compiled	[CE]  	64	None	replace
425	[BUG]  [BUGGY]  if(first.getType()  ==  Token.STRING  &&  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {  [CE]  [FE]                ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first.getType()  ==  Token.STRING  &&  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(first.getType()  ==  Token.STRING  &&  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {	  if(n.getType()    ==    Token.STRING    &&    childCount    ==    ((    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.STRING)?    1    :    0))    {    	non-compiled	[CE]  	64	None	replace
426	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING  &&  childCount  ==  ((  n.getLastChild()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {  [CE]  [FE]                  ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getType()  ==  Token.STRING  &&  childCount  ==  ((  n.getLastChild()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(n.getType()  ==  Token.STRING  &&  childCount  ==  ((  n.getLastChild()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {	  if(n.getType()    ==    Token.STRING    &&    childCount    ==    ((    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.STRING)?    1    :    0))    {    	non-compiled	[CE]  	64	None	replace
427	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING  &&  childCount!=  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getType()  ==  Token.STRING  &&  childCount!=  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(n.getType()  ==  Token.STRING  &&  childCount!=  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {	  if(n.getType()    ==    Token.STRING    &&    childCount    ==    ((    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.STRING)?    1    :    0))    {    	non-compiled	[CE]  	64	None	replace
428	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(n)&&  first.getType()  ==  Token.FUNCTION)  {  [CE]  [FE]                                ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isExpressionNode(n)&&  first.getType()  ==  Token.FUNCTION)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(NodeUtil.isExpressionNode(n)&&  first.getType()  ==  Token.FUNCTION)  {	  if(NodeUtil.isExpressionNode(first)&&    first.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	39	None	replace
429	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(first)&&  next.getType()  ==  Token.FUNCTION)  {  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isExpressionNode(first)&&  next.getType()  ==  Token.FUNCTION)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(NodeUtil.isExpressionNode(first)&&  next.getType()  ==  Token.FUNCTION)  {	  if(NodeUtil.isExpressionNode(first)&&    first.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	39	None	replace
430	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(first)&&  n.getType()  ==  Token.FUNCTION)  {  [CE]  [FE]                                    ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isExpressionNode(first)&&  n.getType()  ==  Token.FUNCTION)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(NodeUtil.isExpressionNode(first)&&  n.getType()  ==  Token.FUNCTION)  {	  if(NodeUtil.isExpressionNode(first)&&    first.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	39	None	replace
431	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(first)&&  first.getType()  ==  Token.FUNCTION  ||  first.getType()  ==  Token.STRING)  {  [CE]  [FE]                                      ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isExpressionNode(first)&&  first.getType()  ==  Token.FUNCTION  ||  first.getType()  ==  Token.STRING)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(NodeUtil.isExpressionNode(first)&&  first.getType()  ==  Token.FUNCTION  ||  first.getType()  ==  Token.STRING)  {	  if(NodeUtil.isExpressionNode(first)&&    first.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	39	None	replace
432	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(first)&&  parent.getType()  ==  Token.FUNCTION)  {  [CE]  [FE]                                        ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isExpressionNode(first)&&  parent.getType()  ==  Token.FUNCTION)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(NodeUtil.isExpressionNode(first)&&  parent.getType()  ==  Token.FUNCTION)  {	  if(NodeUtil.isExpressionNode(first)&&    first.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	39	None	replace
433	[BUG]  [BUGGY]  if(first.getType()  ==  Token.STRING  &&  childCount!=  ((  n.getNext()!=  null  &&  first.getNext().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [CE]  [FE]                ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first.getType()  ==  Token.STRING  &&  childCount!=  ((  n.getNext()!=  null  &&  first.getNext().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(first.getType()  ==  Token.STRING  &&  childCount!=  ((  n.getNext()!=  null  &&  first.getNext().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {	  if(n.getType()    ==    Token.STRING    &&    childCount!=    ((    n.getNext()!=    null    &&    n.getNext().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    	non-compiled	[CE]  	3	None	replace
434	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING  &&  childCount!=  ((  first.getNext()!=  null  &&  first.getNext().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [CE]  [FE]                  ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getType()  ==  Token.STRING  &&  childCount!=  ((  first.getNext()!=  null  &&  first.getNext().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(n.getType()  ==  Token.STRING  &&  childCount!=  ((  first.getNext()!=  null  &&  first.getNext().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {	  if(n.getType()    ==    Token.STRING    &&    childCount!=    ((    n.getNext()!=    null    &&    n.getNext().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    	non-compiled	[CE]  	3	None	replace
435	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING  &&  childCount!=  ((  n.getParent()!=  null  &&  n.getNext().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getType()  ==  Token.STRING  &&  childCount!=  ((  n.getParent()!=  null  &&  n.getNext().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(n.getType()  ==  Token.STRING  &&  childCount!=  ((  n.getParent()!=  null  &&  n.getNext().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {	  if(n.getType()    ==    Token.STRING    &&    childCount!=    ((    n.getNext()!=    null    &&    n.getNext().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    	non-compiled	[CE]  	3	None	replace
436	[BUG]  [BUGGY]  if(first.getNext()!=  null)  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first.getNext()!=  null)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(first.getNext()!=  null)  {	  if(n.getNext()!=    null)    {    	non-compiled	[CE]  	20	None	replace
437	[BUG]  [BUGGY]  if(n.getNext()  ==  null)  {  [CE]  [FE]                        ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getNext()  ==  null)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(n.getNext()  ==  null)  {	  if(n.getNext()!=    null)    {    	non-compiled	[CE]  	20	None	replace
438	[BUG]  [BUGGY]  Context  rhsContext  =  Context.createContext(n);  [CE]  [FE]                              ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  Context  rhsContext  =  Context.createContext(n);  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	Context  rhsContext  =  Context.createContext(n);	  Context    rhsContext    =    Context.createContext(context);    	non-compiled	[CE]  	119	None	replace
439	[BUG]  [BUGGY]  Context  rhsContext  =  Context.createContext(context,  first);  [CE]  [FE]                                ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  Context  rhsContext  =  Context.createContext(context,  first);  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	Context  rhsContext  =  Context.createContext(context,  first);	  Context    rhsContext    =    Context.createContext(context);    	non-compiled	[CE]  	119	None	replace
440	[BUG]  [BUGGY]  Context  rhsContext  =  Context.createContext(n,  context);  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  Context  rhsContext  =  Context.createContext(n,  context);  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	Context  rhsContext  =  Context.createContext(n,  context);	  Context    rhsContext    =    Context.createContext(context);    	non-compiled	[CE]  	119	None	replace
441	[BUG]  [BUGGY]  Context  rhsContext  =  Context.createContext(first);  [CE]  [FE]                                    ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  Context  rhsContext  =  Context.createContext(first);  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	Context  rhsContext  =  Context.createContext(first);	  Context    rhsContext    =    Context.createContext(context);    	non-compiled	[CE]  	119	None	replace
442	[BUG]  [BUGGY]  Context  rhsContext  =  Context.createContext(context,  STATEMENT);  [CE]  [FE]                                      ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  Context  rhsContext  =  Context.createContext(context,  STATEMENT);  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	Context  rhsContext  =  Context.createContext(context,  STATEMENT);	  Context    rhsContext    =    Context.createContext(context);    	non-compiled	[CE]  	119	None	replace
443	[BUG]  [BUGGY]  Context  rhsContext  =  Context.createContext(first,  context);  [CE]  [FE]                                        ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  Context  rhsContext  =  Context.createContext(first,  context);  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	Context  rhsContext  =  Context.createContext(first,  context);	  Context    rhsContext    =    Context.createContext(context);    	non-compiled	[CE]  	119	None	replace
444	[BUG]  [BUGGY]  Context  cc  =(context  ==  null)?  context.getCurrentContext()  :  context.getCurrentContext();  [CE]  [FE]                            ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  Context  cc  =(context  ==  null)?  context.getCurrentContext()  :  context.getCurrentContext();  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	Context  cc  =(context  ==  null)?  context.getCurrentContext()  :  context.getCurrentContext();	  Context    cc    =    context.getCurrentContext();    	non-compiled	[CE]  	54	None	replace
445	[BUG]  [BUGGY]  Context  cc  =  next.getCurrentContext();  [CE]  [FE]                              ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  Context  cc  =  next.getCurrentContext();  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	Context  cc  =  next.getCurrentContext();	  Context    cc    =    context.getCurrentContext();    	non-compiled	[CE]  	54	None	replace
446	[BUG]  [BUGGY]  Context  cc  =  first.getCurrentContext();  [CE]  [FE]                                ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  Context  cc  =  first.getCurrentContext();  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	Context  cc  =  first.getCurrentContext();	  Context    cc    =    context.getCurrentContext();    	non-compiled	[CE]  	54	None	replace
447	[BUG]  [BUGGY]  Context  cc  =(context  ==  null)?  context.getCurrentContext()  :  context;  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  Context  cc  =(context  ==  null)?  context.getCurrentContext()  :  context;  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	Context  cc  =(context  ==  null)?  context.getCurrentContext()  :  context;	  Context    cc    =    context.getCurrentContext();    	non-compiled	[CE]  	54	None	replace
448	[BUG]  [BUGGY]  Context  cc  =(context  ==  null)?  context.getCurrentContext()  :  context.getRawContext();  [CE]  [FE]                                    ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  Context  cc  =(context  ==  null)?  context.getCurrentContext()  :  context.getRawContext();  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	Context  cc  =(context  ==  null)?  context.getCurrentContext()  :  context.getRawContext();	  Context    cc    =    context.getCurrentContext();    	non-compiled	[CE]  	54	None	replace
449	[BUG]  [BUGGY]  if(NodeUtil.isObjectLitKey(n))  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isObjectLitKey(n))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(NodeUtil.isObjectLitKey(n))  {	  if(NodeUtil.isObjectLitKey(first))    {    	non-compiled	[CE]  	160	None	replace
450	[BUG]  [BUGGY]  if(NodeUtil.isObjectLitKey(first)&&  first.getType()  ==  Token.STRING)  {  [CE]  [FE]                        ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isObjectLitKey(first)&&  first.getType()  ==  Token.STRING)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(NodeUtil.isObjectLitKey(first)&&  first.getType()  ==  Token.STRING)  {	  if(NodeUtil.isObjectLitKey(first))    {    	non-compiled	[CE]  	160	None	replace
451	[BUG]  [BUGGY]  if(NodeUtil.isObjectLitKey(first)||  first.getType()  ==  Token.STRING)  {  [CE]  [FE]                          ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isObjectLitKey(first)||  first.getType()  ==  Token.STRING)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(NodeUtil.isObjectLitKey(first)||  first.getType()  ==  Token.STRING)  {	  if(NodeUtil.isObjectLitKey(first))    {    	non-compiled	[CE]  	160	None	replace
452	[BUG]  [BUGGY]  if(NodeUtil.isStringValue(first))  {  [CE]  [FE]                            ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isStringValue(first))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(NodeUtil.isStringValue(first))  {	  if(NodeUtil.isObjectLitKey(first))    {    	non-compiled	[CE]  	160	None	replace
453	[BUG]  [BUGGY]  if(NodeUtil.isObjectLitKey(first)&&  first.getNext().getType()  ==  Token.STRING)  {  [CE]  [FE]                              ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isObjectLitKey(first)&&  first.getNext().getType()  ==  Token.STRING)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(NodeUtil.isObjectLitKey(first)&&  first.getNext().getType()  ==  Token.STRING)  {	  if(NodeUtil.isObjectLitKey(first))    {    	non-compiled	[CE]  	160	None	replace
454	[BUG]  [BUGGY]  if(NodeUtil.isStringEscape(first))  {  [CE]  [FE]                                ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isStringEscape(first))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(NodeUtil.isStringEscape(first))  {	  if(NodeUtil.isObjectLitKey(first))    {    	non-compiled	[CE]  	160	None	replace
455	[BUG]  [BUGGY]  if(first  ==  null  ||  next.getType()  ==  Token.STRING)  {  [CE]  [FE]                ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first  ==  null  ||  next.getType()  ==  Token.STRING)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(first  ==  null  ||  next.getType()  ==  Token.STRING)  {	  if(n    ==    null    ||    first.getType()    ==    Token.STRING)    {    	non-compiled	[CE]  	86	None	replace
456	[BUG]  [BUGGY]  if(second  ==  null  ||  first.getType()  ==  Token.STRING)  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(second  ==  null  ||  first.getType()  ==  Token.STRING)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(second  ==  null  ||  first.getType()  ==  Token.STRING)  {	  if(first    ==    null    ||    second.getType()    ==    Token.STRING)    {    	non-compiled	[CE]  	88	None	replace
457	[BUG]  [BUGGY]  if(first!=  null  ||  second.getType()  ==  Token.STRING)  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first!=  null  ||  second.getType()  ==  Token.STRING)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(first!=  null  ||  second.getType()  ==  Token.STRING)  {	  if(first    ==    null    ||    second.getType()    ==    Token.STRING)    {    	non-compiled	[CE]  	88	None	replace
458	[BUG]  [BUGGY]  if(n  ==  null  ||  second.getType()  ==  Token.STRING)  {  [CE]  [FE]                        ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n  ==  null  ||  second.getType()  ==  Token.STRING)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(n  ==  null  ||  second.getType()  ==  Token.STRING)  {	  if(first    ==    null    ||    second.getType()    ==    Token.STRING)    {    	non-compiled	[CE]  	88	None	replace
459	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING  &&  n.getParent().getType()  ==  Token.NAME)  {  [CE]  [FE]              ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getType()  ==  Token.STRING  &&  n.getParent().getType()  ==  Token.NAME)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(n.getType()  ==  Token.STRING  &&  n.getParent().getType()  ==  Token.NAME)  {	  if(childCount    ==    ((    n.getType()    ==    Token.STRING)&&    n.getParent().getType()    ==    Token.NAME)?    1    :    0))    {    	non-compiled	[CE]  	129	None	replace
460	[BUG]  [BUGGY]  if(childCount  ==  ((  n.getType()  ==  Token.STRING)&&  n.getNext().getType()  ==  Token.NAME)?  1  :  0))  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  ((  n.getType()  ==  Token.STRING)&&  n.getNext().getType()  ==  Token.NAME)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(childCount  ==  ((  n.getType()  ==  Token.STRING)&&  n.getNext().getType()  ==  Token.NAME)?  1  :  0))  {	  if(childCount    ==    ((    n.getType()    ==    Token.STRING)&&    n.getParent().getType()    ==    Token.NAME)?    1    :    0))    {    	non-compiled	[CE]  illegal  start  of  expression	129	None	replace
461	[BUG]  [BUGGY]  if(childCount  ==  ((  n.getType()  ==  Token.STRING)&&  first.getParent().getType()  ==  Token.NAME)?  1  :  0))  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  ((  n.getType()  ==  Token.STRING)&&  first.getParent().getType()  ==  Token.NAME)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(childCount  ==  ((  n.getType()  ==  Token.STRING)&&  first.getParent().getType()  ==  Token.NAME)?  1  :  0))  {	  if(childCount    ==    ((    n.getType()    ==    Token.STRING)&&    n.getParent().getType()    ==    Token.NAME)?    1    :    0))    {    	non-compiled	[CE]  illegal  start  of  expression	129	None	replace
462	[BUG]  [BUGGY]  if(childCount  ==  ((  n.getType()  ==  Token.STRING)&&  n.getFirstChild().getType()  ==  Token.NAME)?  1  :  0))  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  ((  n.getType()  ==  Token.STRING)&&  n.getFirstChild().getType()  ==  Token.NAME)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(childCount  ==  ((  n.getType()  ==  Token.STRING)&&  n.getFirstChild().getType()  ==  Token.NAME)?  1  :  0))  {	  if(childCount    ==    ((    n.getType()    ==    Token.STRING)&&    n.getParent().getType()    ==    Token.NAME)?    1    :    0))    {    	non-compiled	[CE]  illegal  start  of  expression	129	None	replace
463	[BUG]  [BUGGY]  if(first.getType()  ==  Token.STRING  &&  childCount!=  ((  n.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.FUNCTION)?  1  :  0))  {  [CE]  [FE]                            ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first.getType()  ==  Token.STRING  &&  childCount!=  ((  n.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.FUNCTION)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(first.getType()  ==  Token.STRING  &&  childCount!=  ((  n.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.FUNCTION)?  1  :  0))  {	  if(n.getType()    ==    Token.STRING    &&    childCount!=    ((    n.getFirstChild()!=    null    &&    n.getParent().getType()    ==    Token.FUNCTION)?    1    :    0))    {    	non-compiled	[CE]  	31	None	replace
464	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING  ||  childCount!=  ((  n.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.FUNCTION)?  1  :  0))  {  [CE]  [FE]                              ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getType()  ==  Token.STRING  ||  childCount!=  ((  n.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.FUNCTION)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(n.getType()  ==  Token.STRING  ||  childCount!=  ((  n.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.FUNCTION)?  1  :  0))  {	  if(n.getType()    ==    Token.STRING    &&    childCount!=    ((    n.getFirstChild()!=    null    &&    n.getParent().getType()    ==    Token.FUNCTION)?    1    :    0))    {    	non-compiled	[CE]  	31	None	replace
465	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING  &&  childCount  >=  ((  n.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.FUNCTION)?  1  :  0))  {  [CE]  [FE]                                ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getType()  ==  Token.STRING  &&  childCount  >=  ((  n.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.FUNCTION)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(n.getType()  ==  Token.STRING  &&  childCount  >=  ((  n.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.FUNCTION)?  1  :  0))  {	  if(n.getType()    ==    Token.STRING    &&    childCount!=    ((    n.getFirstChild()!=    null    &&    n.getParent().getType()    ==    Token.FUNCTION)?    1    :    0))    {    	non-compiled	[CE]  	31	None	replace
466	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING  &&  childCount!=  ((  n.getFirstChild()!=  null  &&  n.getNext().getType()  ==  Token.FUNCTION)?  1  :  0))  {  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getType()  ==  Token.STRING  &&  childCount!=  ((  n.getFirstChild()!=  null  &&  n.getNext().getType()  ==  Token.FUNCTION)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(n.getType()  ==  Token.STRING  &&  childCount!=  ((  n.getFirstChild()!=  null  &&  n.getNext().getType()  ==  Token.FUNCTION)?  1  :  0))  {	  if(n.getType()    ==    Token.STRING    &&    childCount!=    ((    n.getFirstChild()!=    null    &&    n.getParent().getType()    ==    Token.FUNCTION)?    1    :    0))    {    	non-compiled	[CE]  	31	None	replace
467	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(first)||  childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [CE]  [FE]                            ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isExpressionNode(first)||  childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(NodeUtil.isExpressionNode(first)||  childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {	  if(NodeUtil.isExpressionNode(first)&&    childCount    ==    ((    n.getFirstChild()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    	non-compiled	[CE]  	50	None	replace
468	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(n)&&  childCount  ==  ((  first.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [CE]  [FE]                              ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isExpressionNode(n)&&  childCount  ==  ((  first.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(NodeUtil.isExpressionNode(n)&&  childCount  ==  ((  first.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {	  if(NodeUtil.isExpressionNode(first)&&    childCount    ==    ((    n.getFirstChild()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    	non-compiled	[CE]  	50	None	replace
469	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(first)&&  childCount  ==  ((  n.getLastChild()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [CE]  [FE]                                ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isExpressionNode(first)&&  childCount  ==  ((  n.getLastChild()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(NodeUtil.isExpressionNode(first)&&  childCount  ==  ((  n.getLastChild()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {	  if(NodeUtil.isExpressionNode(first)&&    childCount    ==    ((    n.getFirstChild()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    	non-compiled	[CE]  	50	None	replace
470	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(first)&&  childCount  ==  ((  n.getString()!=  null  &&  n.getNext().getType()  ==  Token.STRING)?  1  :  0))  {  [CE]  [FE]                ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isExpressionNode(first)&&  childCount  ==  ((  n.getString()!=  null  &&  n.getNext().getType()  ==  Token.STRING)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(NodeUtil.isExpressionNode(first)&&  childCount  ==  ((  n.getString()!=  null  &&  n.getNext().getType()  ==  Token.STRING)?  1  :  0))  {	  if(NodeUtil.isExpressionNode(first)&&    childCount    ==    ((    n.getString()!=    null    &&    n.getParent().getType()    ==    Token.STRING)?    1    :    0))    {    	non-compiled	[CE]  	100	None	replace
471	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(first)||  childCount  ==  ((  n.getString()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {  [CE]  [FE]                  ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isExpressionNode(first)||  childCount  ==  ((  n.getString()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(NodeUtil.isExpressionNode(first)||  childCount  ==  ((  n.getString()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {	  if(NodeUtil.isExpressionNode(first)&&    childCount    ==    ((    n.getString()!=    null    &&    n.getParent().getType()    ==    Token.STRING)?    1    :    0))    {    	non-compiled	[CE]  	100	None	replace
472	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(n)&&  childCount  ==  ((  n.getString()!=  null  &&  n.getNext().getType()  ==  Token.STRING)?  1  :  0))  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isExpressionNode(n)&&  childCount  ==  ((  n.getString()!=  null  &&  n.getNext().getType()  ==  Token.STRING)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(NodeUtil.isExpressionNode(n)&&  childCount  ==  ((  n.getString()!=  null  &&  n.getNext().getType()  ==  Token.STRING)?  1  :  0))  {	  if(NodeUtil.isExpressionNode(first)&&    childCount    ==    ((    n.getString()!=    null    &&    n.getParent().getType()    ==    Token.STRING)?    1    :    0))    {    	non-compiled	[CE]  	100	None	replace
473	[BUG]  [BUGGY]  if(childCount  ==  1  &&  first.getFirstChild()!=  null  &&  first.getLastChild().getString().length()  ==  0)  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  1  &&  first.getFirstChild()!=  null  &&  first.getLastChild().getString().length()  ==  0)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(childCount  ==  1  &&  first.getFirstChild()!=  null  &&  first.getLastChild().getString().length()  ==  0)  {	  if(childCount    ==    1    &&    first.getFirstChild()!=    null    &&    first.getLastChild().getString().length()    >    0)    {    	non-compiled	[CE]  	159	None	replace
474	[BUG]  [BUGGY]  if(childCount  ==  1  &&  first.getFirstChild()!=  null  &&  first.getLastChild().getString().length()  >=  0)  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  1  &&  first.getFirstChild()!=  null  &&  first.getLastChild().getString().length()  >=  0)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(childCount  ==  1  &&  first.getFirstChild()!=  null  &&  first.getLastChild().getString().length()  >=  0)  {	  if(childCount    ==    1    &&    first.getFirstChild()!=    null    &&    first.getLastChild().getString().length()    >    0)    {    	non-compiled	[CE]  	159	None	replace
475	[BUG]  [BUGGY]  if(childCount  ==  1  ||  first.getFirstChild()!=  null  &&  first.getLastChild().getString().length()  >  0)  {  [CE]  [FE]                        ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  1  ||  first.getFirstChild()!=  null  &&  first.getLastChild().getString().length()  >  0)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(childCount  ==  1  ||  first.getFirstChild()!=  null  &&  first.getLastChild().getString().length()  >  0)  {	  if(childCount    ==    1    &&    first.getFirstChild()!=    null    &&    first.getLastChild().getString().length()    >    0)    {    	non-compiled	[CE]  	159	None	replace
476	[BUG]  [BUGGY]  if(first!=  null  &&  first.getFirstChild()!=  null  &&  first.getLastChild().getString().length()  >  0)  {  [CE]  [FE]                          ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first!=  null  &&  first.getFirstChild()!=  null  &&  first.getLastChild().getString().length()  >  0)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(first!=  null  &&  first.getFirstChild()!=  null  &&  first.getLastChild().getString().length()  >  0)  {	  if(childCount    ==    1    &&    first.getFirstChild()!=    null    &&    first.getLastChild().getString().length()    >    0)    {    	non-compiled	[CE]  	159	None	replace
477	[BUG]  [BUGGY]  if(childCount  ==  1  &&  first.getFirstChild()!=  null  &&  first.getLastChild().getString().length()  <=  0)  {  [CE]  [FE]                            ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  1  &&  first.getFirstChild()!=  null  &&  first.getLastChild().getString().length()  <=  0)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(childCount  ==  1  &&  first.getFirstChild()!=  null  &&  first.getLastChild().getString().length()  <=  0)  {	  if(childCount    ==    1    &&    first.getFirstChild()!=    null    &&    first.getLastChild().getString().length()    >    0)    {    	non-compiled	[CE]  	159	None	replace
478	[BUG]  [BUGGY]  if(childCount  ==  1  &&  first.getFirstChild()!=  null  &&  first.getLastChild().getString().length()  [Delete]  0)  {  [CE]  [FE]                              ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  1  &&  first.getFirstChild()!=  null  &&  first.getLastChild().getString().length()  [Delete]  0)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(childCount  ==  1  &&  first.getFirstChild()!=  null  &&  first.getLastChild().getString().length()  [Delete]  0)  {	  if(childCount    ==    1    &&    first.getFirstChild()!=    null    &&    first.getLastChild().getString().length()    >    0)    {    	non-compiled	[CE]  	159	None	replace
479	[BUG]  [BUGGY]  if(first.getType()  ==  Token.STRING  &&  childCount!=  ((  n.getNext()!=  null  &&  n.getNext().getType()  ==  Token.FUNCTION)?  1  :  0))  {  [CE]  [FE]                          ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first.getType()  ==  Token.STRING  &&  childCount!=  ((  n.getNext()!=  null  &&  n.getNext().getType()  ==  Token.FUNCTION)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(first.getType()  ==  Token.STRING  &&  childCount!=  ((  n.getNext()!=  null  &&  n.getNext().getType()  ==  Token.FUNCTION)?  1  :  0))  {	  if(n.getType()    ==    Token.STRING    &&    childCount!=    ((    n.getNext()!=    null    &&    n.getNext().getType()    ==    Token.FUNCTION)?    1    :    0))    {    	non-compiled	[CE]  	30	None	replace
480	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING  ||  childCount!=  ((  n.getNext()!=  null  &&  n.getNext().getType()  ==  Token.FUNCTION)?  1  :  0))  {  [CE]  [FE]                            ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getType()  ==  Token.STRING  ||  childCount!=  ((  n.getNext()!=  null  &&  n.getNext().getType()  ==  Token.FUNCTION)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(n.getType()  ==  Token.STRING  ||  childCount!=  ((  n.getNext()!=  null  &&  n.getNext().getType()  ==  Token.FUNCTION)?  1  :  0))  {	  if(n.getType()    ==    Token.STRING    &&    childCount!=    ((    n.getNext()!=    null    &&    n.getNext().getType()    ==    Token.FUNCTION)?    1    :    0))    {    	non-compiled	[CE]  	30	None	replace
481	[BUG]  [BUGGY]  if(first.getType()  ==  Token.STRING  &&  childCount!=  ((  n.getNext()!=  null  &&  first.getNext().getType()  ==  Token.FUNCTION)?  1  :  0))  {  [CE]  [FE]                              ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first.getType()  ==  Token.STRING  &&  childCount!=  ((  n.getNext()!=  null  &&  first.getNext().getType()  ==  Token.FUNCTION)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(first.getType()  ==  Token.STRING  &&  childCount!=  ((  n.getNext()!=  null  &&  first.getNext().getType()  ==  Token.FUNCTION)?  1  :  0))  {	  if(n.getType()    ==    Token.STRING    &&    childCount!=    ((    n.getNext()!=    null    &&    n.getNext().getType()    ==    Token.FUNCTION)?    1    :    0))    {    	non-compiled	[CE]  	30	None	replace
482	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING  &&  childCount!=  ((  first.getNext()!=  null  &&  first.getNext().getType()  ==  Token.FUNCTION)?  1  :  0))  {  [CE]  [FE]                                ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getType()  ==  Token.STRING  &&  childCount!=  ((  first.getNext()!=  null  &&  first.getNext().getType()  ==  Token.FUNCTION)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(n.getType()  ==  Token.STRING  &&  childCount!=  ((  first.getNext()!=  null  &&  first.getNext().getType()  ==  Token.FUNCTION)?  1  :  0))  {	  if(n.getType()    ==    Token.STRING    &&    childCount!=    ((    n.getNext()!=    null    &&    n.getNext().getType()    ==    Token.FUNCTION)?    1    :    0))    {    	non-compiled	[CE]  	30	None	replace
483	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING  &&  childCount  >=  ((  n.getNext()!=  null  &&  n.getNext().getType()  ==  Token.FUNCTION)?  1  :  0))  {  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getType()  ==  Token.STRING  &&  childCount  >=  ((  n.getNext()!=  null  &&  n.getNext().getType()  ==  Token.FUNCTION)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(n.getType()  ==  Token.STRING  &&  childCount  >=  ((  n.getNext()!=  null  &&  n.getNext().getType()  ==  Token.FUNCTION)?  1  :  0))  {	  if(n.getType()    ==    Token.STRING    &&    childCount!=    ((    n.getNext()!=    null    &&    n.getNext().getType()    ==    Token.FUNCTION)?    1    :    0))    {    	non-compiled	[CE]  	30	None	replace
484	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(first)||  NodeUtil.isExpressionNode(n))  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isExpressionNode(first)||  NodeUtil.isExpressionNode(n))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(NodeUtil.isExpressionNode(first)||  NodeUtil.isExpressionNode(n))  {	  if(NodeUtil.isExpressionNode(n)||    NodeUtil.isExpressionNode(n))    {    	non-compiled	[CE]  	67	None	replace
485	[BUG]  [BUGGY]  if(NodeUtil.isObjectLitKey(n)||  NodeUtil.isExpressionNode(n))  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isObjectLitKey(n)||  NodeUtil.isExpressionNode(n))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(NodeUtil.isObjectLitKey(n)||  NodeUtil.isExpressionNode(n))  {	  if(NodeUtil.isExpressionNode(n)||    NodeUtil.isExpressionNode(n))    {    	non-compiled	[CE]  	67	None	replace
486	[BUG]  [BUGGY]  if(NodeUtil.isAssignmentOp(n)||  NodeUtil.isExpressionNode(n))  {  [CE]  [FE]                        ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isAssignmentOp(n)||  NodeUtil.isExpressionNode(n))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(NodeUtil.isAssignmentOp(n)||  NodeUtil.isExpressionNode(n))  {	  if(NodeUtil.isExpressionNode(n)||    NodeUtil.isExpressionNode(n))    {    	non-compiled	[CE]  	67	None	replace
487	[BUG]  [BUGGY]  if(NodeUtil.isName(first)||  NodeUtil.isExpressionNode(n))  {  [CE]  [FE]                          ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isName(first)||  NodeUtil.isExpressionNode(n))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(NodeUtil.isName(first)||  NodeUtil.isExpressionNode(n))  {	  if(NodeUtil.isExpressionNode(n)||    NodeUtil.isExpressionNode(n))    {    	non-compiled	[CE]  	67	None	replace
488	[BUG]  [BUGGY]  if(NodeUtil.isName(n)||  NodeUtil.isExpressionNode(n))  {  [CE]  [FE]                            ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isName(n)||  NodeUtil.isExpressionNode(n))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(NodeUtil.isName(n)||  NodeUtil.isExpressionNode(n))  {	  if(NodeUtil.isExpressionNode(n)||    NodeUtil.isExpressionNode(n))    {    	non-compiled	[CE]  	67	None	replace
489	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING  &&  n.getType()  ==  Token.OBJECTLIT)  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getType()  ==  Token.STRING  &&  n.getType()  ==  Token.OBJECTLIT)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(n.getType()  ==  Token.STRING  &&  n.getType()  ==  Token.OBJECTLIT)  {	  if(n.getType()    ==    Token.STRING    ||    n.getType()    ==    Token.OBJECTLIT)    {    	non-compiled	[CE]  	12	None	replace
490	[BUG]  [BUGGY]  if(n.getType()!=  Token.STRING  &&  n.getType()  ==  Token.OBJECTLIT)  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getType()!=  Token.STRING  &&  n.getType()  ==  Token.OBJECTLIT)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(n.getType()!=  Token.STRING  &&  n.getType()  ==  Token.OBJECTLIT)  {	  if(n.getType()    ==    Token.STRING    ||    n.getType()    ==    Token.OBJECTLIT)    {    	non-compiled	[CE]  	12	None	replace
491	[BUG]  [BUGGY]  if(n.getType()!=  Token.STRING  ||  n.getType()  ==  Token.OBJECTLIT)  {  [CE]  [FE]                        ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getType()!=  Token.STRING  ||  n.getType()  ==  Token.OBJECTLIT)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(n.getType()!=  Token.STRING  ||  n.getType()  ==  Token.OBJECTLIT)  {	  if(n.getType()    ==    Token.STRING    ||    n.getType()    ==    Token.OBJECTLIT)    {    	non-compiled	[CE]  	12	None	replace
492	[BUG]  [BUGGY]  if(n.getParent()!=  null  &&  first.getType()  ==  Token.STRING)  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getParent()!=  null  &&  first.getType()  ==  Token.STRING)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(n.getParent()!=  null  &&  first.getType()  ==  Token.STRING)  {	  if(first    ==    null    &&    first.getType()    ==    Token.STRING)    {    	non-compiled	[CE]  	89	None	replace
493	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(first)||  childCount!=  ((  n.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {  [CE]  [FE]                          ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isExpressionNode(first)||  childCount!=  ((  n.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(NodeUtil.isExpressionNode(first)||  childCount!=  ((  n.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {	  if(NodeUtil.isExpressionNode(first)&&    childCount!=    ((    n.getFirstChild()!=    null    &&    n.getParent().getType()    ==    Token.STRING)?    1    :    0))    {    	non-compiled	[CE]  	81	None	replace
494	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(first)&&  childCount  ==  ((  first.getNext()!=  null  &&  first.getParent().getType()  ==  Token.STRING)?  1  :  0))  {  [CE]  [FE]                        ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isExpressionNode(first)&&  childCount  ==  ((  first.getNext()!=  null  &&  first.getParent().getType()  ==  Token.STRING)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(NodeUtil.isExpressionNode(first)&&  childCount  ==  ((  first.getNext()!=  null  &&  first.getParent().getType()  ==  Token.STRING)?  1  :  0))  {	  if(NodeUtil.isExpressionNode(first)&&    childCount    ==    ((    n.getNext()!=    null    &&    n.getParent().getType()    ==    Token.STRING)?    1    :    0))    {    	non-compiled	[CE]  	80	None	replace
495	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(first)||  childCount  ==  ((  n.getNext()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {  [CE]  [FE]                          ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isExpressionNode(first)||  childCount  ==  ((  n.getNext()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(NodeUtil.isExpressionNode(first)||  childCount  ==  ((  n.getNext()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {	  if(NodeUtil.isExpressionNode(first)&&    childCount    ==    ((    n.getNext()!=    null    &&    n.getParent().getType()    ==    Token.STRING)?    1    :    0))    {    	non-compiled	[CE]  	80	None	replace
496	[BUG]  [BUGGY]  if(first.getType()  ==  Token.STRING  ||  n!=  null)  {  [CE]  [FE]                ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first.getType()  ==  Token.STRING  ||  n!=  null)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(first.getType()  ==  Token.STRING  ||  n!=  null)  {	  if(n.getType()    ==    Token.STRING    ||    first!=    null)    {    	non-compiled	[CE]  	132	None	replace
497	[BUG]  [BUGGY]  if(first.getType()  ==  Token.STRING  ||  first!=  null)  {  [CE]  [FE]                  ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first.getType()  ==  Token.STRING  ||  first!=  null)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(first.getType()  ==  Token.STRING  ||  first!=  null)  {	  if(n.getType()    ==    Token.STRING    ||    first!=    null)    {    	non-compiled	[CE]  	132	None	replace
498	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING  ||  next!=  null)  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getType()  ==  Token.STRING  ||  next!=  null)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(n.getType()  ==  Token.STRING  ||  next!=  null)  {	  if(n.getType()    ==    Token.STRING    ||    first!=    null)    {    	non-compiled	[CE]  	132	None	replace
499	[BUG]  [BUGGY]  if(first.getType()  ==  Token.STRING  ||  next!=  null)  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first.getType()  ==  Token.STRING  ||  next!=  null)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(first.getType()  ==  Token.STRING  ||  next!=  null)  {	  if(n.getType()    ==    Token.STRING    ||    first!=    null)    {    	non-compiled	[CE]  	132	None	replace
500	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(first)||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {  [CE]  [FE]                  ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isExpressionNode(first)||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(NodeUtil.isExpressionNode(first)||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {	  if(NodeUtil.isExpressionNode(first)&&    childCount    ==    ((    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.STRING)?    1    :    0))    {    	non-compiled	[CE]  	77	None	replace
501	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(first)||  first.getType()!=  Token.STRING)  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isExpressionNode(first)||  first.getType()!=  Token.STRING)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(NodeUtil.isExpressionNode(first)||  first.getType()!=  Token.STRING)  {	  if(NodeUtil.isExpressionNode(first)||    first.getType()    ==    Token.STRING)    {    	non-compiled	[CE]  	34	None	replace
502	[BUG]  [BUGGY]  if(NodeUtil.isLiteralValue(first)||  first.getType()  ==  Token.STRING)  {  [CE]  [FE]                        ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isLiteralValue(first)||  first.getType()  ==  Token.STRING)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(NodeUtil.isLiteralValue(first)||  first.getType()  ==  Token.STRING)  {	  if(NodeUtil.isExpressionNode(first)||    first.getType()    ==    Token.STRING)    {    	non-compiled	[CE]  	34	None	replace
503	[BUG]  [BUGGY]  if(NodeUtil.isName(first)||  first.getType()  ==  Token.STRING)  {  [CE]  [FE]                          ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isName(first)||  first.getType()  ==  Token.STRING)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(NodeUtil.isName(first)||  first.getType()  ==  Token.STRING)  {	  if(NodeUtil.isExpressionNode(first)||    first.getType()    ==    Token.STRING)    {    	non-compiled	[CE]  	34	None	replace
504	[BUG]  [BUGGY]  if(first.getType()  ==  Token.STRING  &&  childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.FUNCTION)?  1  :  0))  {  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first.getType()  ==  Token.STRING  &&  childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.FUNCTION)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(first.getType()  ==  Token.STRING  &&  childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.FUNCTION)?  1  :  0))  {	  if(first.getType()    ==    Token.STRING    &&    childCount!=    ((    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.FUNCTION)?    1    :    0))    {    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
505	[BUG]  [BUGGY]  if(childCount  ==  first.getType()  ||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [CE]  [FE]                ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  first.getType()  ||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(childCount  ==  first.getType()  ||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {	  if(first.getType()    ==    Token.STRING    ||    childCount    ==    ((    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    	non-compiled	[CE]  	102	None	replace
506	[BUG]  [BUGGY]  if(first.getType()  ==  Token.STRING  &&  childCount!=  ((  n.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [CE]  [FE]              ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first.getType()  ==  Token.STRING  &&  childCount!=  ((  n.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(first.getType()  ==  Token.STRING  &&  childCount!=  ((  n.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {	  if(n.getType()    ==    Token.STRING    &&    childCount!=    ((    n.getFirstChild()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    	non-compiled	[CE]  	2	None	replace
507	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING  ||  childCount!=  ((  n.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [CE]  [FE]                ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getType()  ==  Token.STRING  ||  childCount!=  ((  n.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(n.getType()  ==  Token.STRING  ||  childCount!=  ((  n.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {	  if(n.getType()    ==    Token.STRING    &&    childCount!=    ((    n.getFirstChild()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    	non-compiled	[CE]  	2	None	replace
508	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING  &&  childCount!=  ((  n.getFirstChild()!=  null  &&  n.getNext().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [CE]  [FE]                  ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getType()  ==  Token.STRING  &&  childCount!=  ((  n.getFirstChild()!=  null  &&  n.getNext().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(n.getType()  ==  Token.STRING  &&  childCount!=  ((  n.getFirstChild()!=  null  &&  n.getNext().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {	  if(n.getType()    ==    Token.STRING    &&    childCount!=    ((    n.getFirstChild()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    	non-compiled	[CE]  	2	None	replace
509	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING  &&  childCount!=  ((  first.getFirstChild()!=  null  &&  first.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getType()  ==  Token.STRING  &&  childCount!=  ((  first.getFirstChild()!=  null  &&  first.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(n.getType()  ==  Token.STRING  &&  childCount!=  ((  first.getFirstChild()!=  null  &&  first.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {	  if(n.getType()    ==    Token.STRING    &&    childCount!=    ((    n.getFirstChild()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    	non-compiled	[CE]  	2	None	replace
510	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(first)||  next.getType()  ==  Token.STRING)  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isExpressionNode(first)||  next.getType()  ==  Token.STRING)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(NodeUtil.isExpressionNode(first)||  next.getType()  ==  Token.STRING)  {	  if(NodeUtil.isExpressionNode(n)||    first.getType()    ==    Token.STRING)    {    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
511	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(first)||  parent.getType()  ==  Token.STRING)  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isExpressionNode(first)||  parent.getType()  ==  Token.STRING)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(NodeUtil.isExpressionNode(first)||  parent.getType()  ==  Token.STRING)  {	  if(NodeUtil.isExpressionNode(n)||    first.getType()    ==    Token.STRING)    {    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
512	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(first)||  NodeUtil.isFunctionDeclaration(n))  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isExpressionNode(first)||  NodeUtil.isFunctionDeclaration(n))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(NodeUtil.isExpressionNode(first)||  NodeUtil.isFunctionDeclaration(n))  {	  if(NodeUtil.isExpressionNode(n)||    NodeUtil.isFunctionDeclaration(n))    {    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
513	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(n)||  NodeUtil.isFunctionDeclaration(first))  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isExpressionNode(n)||  NodeUtil.isFunctionDeclaration(first))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(NodeUtil.isExpressionNode(n)||  NodeUtil.isFunctionDeclaration(first))  {	  if(NodeUtil.isExpressionNode(n)||    NodeUtil.isFunctionDeclaration(n))    {    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
514	[BUG]  [BUGGY]  if(NodeUtil.isName(n)||  NodeUtil.isFunctionDeclaration(n))  {  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isName(n)||  NodeUtil.isFunctionDeclaration(n))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(NodeUtil.isName(n)||  NodeUtil.isFunctionDeclaration(n))  {	  if(NodeUtil.isExpressionNode(n)||    NodeUtil.isFunctionDeclaration(n))    {    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
515	[BUG]  [BUGGY]  if(childCount  ==  ((  n.getLastChild()!=  null  &&  n.getLastChild().getType()  ==  Token.STRING)||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  [CE]  [FE]                      ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  ((  n.getLastChild()!=  null  &&  n.getLastChild().getType()  ==  Token.STRING)||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(childCount  ==  ((  n.getLastChild()!=  null  &&  n.getLastChild().getType()  ==  Token.STRING)||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)	  if(childCount    ==    ((    n.getFirstChild()!=    null    &&    n.getLastChild().getType()    ==    Token.STRING)||    childCount    ==    ((    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)    	non-compiled	[CE]  	7	None	replace
516	[BUG]  [BUGGY]  Integer  n  =  first.getNext()  +  1;  [CE]  illegal  start  of  expression  [FE]                                    ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  Integer  n  =  first.getNext()  +  1;  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	Integer  n  =  first.getNext()  +  1;	  Integer    n    =    first.getNext();    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
517	[BUG]  [BUGGY]  Integer  n  =  first.getPrevious();  [CE]  illegal  start  of  expression  [FE]                                      ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  Integer  n  =  first.getPrevious();  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	Integer  n  =  first.getPrevious();	  Integer    n    =    first.getNext();    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
518	[BUG]  [BUGGY]  Integer  n  =  first.getParent();  [CE]  illegal  start  of  expression  [FE]                                        ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  Integer  n  =  first.getParent();  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	Integer  n  =  first.getParent();	  Integer    n    =    first.getNext();    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
519	[BUG]  [BUGGY]  Integer  n  =  first.getInitialValue();  [CE]  illegal  start  of  expression  [FE]                                          ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  Integer  n  =  first.getInitialValue();  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	Integer  n  =  first.getInitialValue();	  Integer    n    =    first.getNext();    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
520	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING  ||  childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.FUNCTION)?  1  :  0))  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getType()  ==  Token.STRING  ||  childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.FUNCTION)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(n.getType()  ==  Token.STRING  ||  childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.FUNCTION)?  1  :  0))  {	  if(n.getType()    ==    Token.STRING    &&    childCount    ==    ((    n.getFirstChild()!=    null    &&    n.getParent().getType()    ==    Token.FUNCTION)?    1    :    0))    {    	non-compiled	[CE]  illegal  start  of  expression	99	None	replace
521	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING  &&  childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getNext().getType()  ==  Token.FUNCTION)?  1  :  0))  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getType()  ==  Token.STRING  &&  childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getNext().getType()  ==  Token.FUNCTION)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(n.getType()  ==  Token.STRING  &&  childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getNext().getType()  ==  Token.FUNCTION)?  1  :  0))  {	  if(n.getType()    ==    Token.STRING    &&    childCount    ==    ((    n.getFirstChild()!=    null    &&    n.getParent().getType()    ==    Token.FUNCTION)?    1    :    0))    {    	non-compiled	[CE]  illegal  start  of  expression	99	None	replace
522	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING  &&  childCount  ==  ((  first.getFirstChild()!=  null  &&  first.getParent().getType()  ==  Token.FUNCTION)?  1  :  0))  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getType()  ==  Token.STRING  &&  childCount  ==  ((  first.getFirstChild()!=  null  &&  first.getParent().getType()  ==  Token.FUNCTION)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(n.getType()  ==  Token.STRING  &&  childCount  ==  ((  first.getFirstChild()!=  null  &&  first.getParent().getType()  ==  Token.FUNCTION)?  1  :  0))  {	  if(n.getType()    ==    Token.STRING    &&    childCount    ==    ((    n.getFirstChild()!=    null    &&    n.getParent().getType()    ==    Token.FUNCTION)?    1    :    0))    {    	non-compiled	[CE]  illegal  start  of  expression	99	None	replace
523	[BUG]  [BUGGY]  if(childCount  ==  ((  first.getNext()!=  null  &&  first.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  ((  first.getNext()!=  null  &&  first.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(childCount  ==  ((  first.getNext()!=  null  &&  first.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {	  if(childCount    ==    ((    n.getNext()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    	non-compiled	[CE]  illegal  start  of  expression	142	None	replace
524	[BUG]  [BUGGY]  if(childCount  ==  ((  first.getNext()!=  null  &&  first.getNext().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  ((  first.getNext()!=  null  &&  first.getNext().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(childCount  ==  ((  first.getNext()!=  null  &&  first.getNext().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {	  if(childCount    ==    ((    n.getNext()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    	non-compiled	[CE]  illegal  start  of  expression	142	None	replace
525	[BUG]  [BUGGY]  if(childCount  ==  ((  first.getNext()!=  null  &&  first.getParent().getType()  ==  Token.FUNCTION)?  1  :  0))  {  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  ((  first.getNext()!=  null  &&  first.getParent().getType()  ==  Token.FUNCTION)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(childCount  ==  ((  first.getNext()!=  null  &&  first.getParent().getType()  ==  Token.FUNCTION)?  1  :  0))  {	  if(childCount    ==    ((    n.getNext()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    	non-compiled	[CE]  illegal  start  of  expression	142	None	replace
526	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING  &&  n.getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getType()  ==  Token.STRING  &&  n.getType()  ==  Token.FUNCTION)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(n.getType()  ==  Token.STRING  &&  n.getType()  ==  Token.FUNCTION)  {	  if(n.getType()    ==    Token.STRING    ||    n.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
527	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING  ||  n.getType()!=  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getType()  ==  Token.STRING  ||  n.getType()!=  Token.FUNCTION)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(n.getType()  ==  Token.STRING  ||  n.getType()!=  Token.FUNCTION)  {	  if(n.getType()    ==    Token.STRING    ||    n.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
528	[BUG]  [BUGGY]  if(n.getType()!=  Token.STRING  &&  n.getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getType()!=  Token.STRING  &&  n.getType()  ==  Token.FUNCTION)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(n.getType()!=  Token.STRING  &&  n.getType()  ==  Token.FUNCTION)  {	  if(n.getType()    ==    Token.STRING    ||    n.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
529	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING  &&  first.getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getType()  ==  Token.STRING  &&  first.getType()  ==  Token.FUNCTION)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(n.getType()  ==  Token.STRING  &&  first.getType()  ==  Token.FUNCTION)  {	  if(n.getType()    ==    Token.STRING    ||    first.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  illegal  start  of  expression	104	None	replace
530	[BUG]  [BUGGY]  if(first.getType()  ==  Token.STRING  ||  next.getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first.getType()  ==  Token.STRING  ||  next.getType()  ==  Token.FUNCTION)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(first.getType()  ==  Token.STRING  ||  next.getType()  ==  Token.FUNCTION)  {	  if(n.getType()    ==    Token.STRING    ||    first.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  illegal  start  of  expression	104	None	replace
531	[BUG]  [BUGGY]  if(First.getType()  ==  Token.STRING  ||  first.getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(First.getType()  ==  Token.STRING  ||  first.getType()  ==  Token.FUNCTION)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(First.getType()  ==  Token.STRING  ||  first.getType()  ==  Token.FUNCTION)  {	  if(n.getType()    ==    Token.STRING    ||    first.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  illegal  start  of  expression	104	None	replace
532	[BUG]  [BUGGY]  if(first.getType()  ==  Token.STRING  ||  last.getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first.getType()  ==  Token.STRING  ||  last.getType()  ==  Token.FUNCTION)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(first.getType()  ==  Token.STRING  ||  last.getType()  ==  Token.FUNCTION)  {	  if(n.getType()    ==    Token.STRING    ||    first.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  illegal  start  of  expression	104	None	replace
533	[BUG]  [BUGGY]  if(childCount  ==  1  ||  NodeUtil.isExpressionNode(first))  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  1  ||  NodeUtil.isExpressionNode(first))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(childCount  ==  1  ||  NodeUtil.isExpressionNode(first))  {	  if(childCount    ==    1    &&    NodeUtil.isExpressionNode(first))    {    	non-compiled	[CE]  illegal  start  of  expression	126	None	replace
534	[BUG]  [BUGGY]  if(childCount  ==  1  &&  NodeUtil.isExpressionNode(n))  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  1  &&  NodeUtil.isExpressionNode(n))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(childCount  ==  1  &&  NodeUtil.isExpressionNode(n))  {	  if(childCount    ==    1    &&    NodeUtil.isExpressionNode(first))    {    	non-compiled	[CE]  illegal  start  of  expression	126	None	replace
535	[BUG]  [BUGGY]  if(childCount  ==  1  &&  NodeUtil.isExpressionNode(first)||  first.getType()  ==  Token.STRING)  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  1  &&  NodeUtil.isExpressionNode(first)||  first.getType()  ==  Token.STRING)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(childCount  ==  1  &&  NodeUtil.isExpressionNode(first)||  first.getType()  ==  Token.STRING)  {	  if(childCount    ==    1    &&    NodeUtil.isExpressionNode(first))    {    	non-compiled	[CE]  illegal  start  of  expression	126	None	replace
536	[BUG]  [BUGGY]  if(childCount  ==  1  &&  NodeUtil.isFunctionDeclaration(first))  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  1  &&  NodeUtil.isFunctionDeclaration(first))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(childCount  ==  1  &&  NodeUtil.isFunctionDeclaration(first))  {	  if(childCount    ==    1    &&    NodeUtil.isExpressionNode(first))    {    	non-compiled	[CE]  illegal  start  of  expression	126	None	replace
537	[BUG]  [BUGGY]  if(childCount  ==  1  &&  NodeUtil.isExpressionNode(first)||  first.getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  1  &&  NodeUtil.isExpressionNode(first)||  first.getType()  ==  Token.FUNCTION)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(childCount  ==  1  &&  NodeUtil.isExpressionNode(first)||  first.getType()  ==  Token.FUNCTION)  {	  if(childCount    ==    1    &&    NodeUtil.isExpressionNode(first))    {    	non-compiled	[CE]  illegal  start  of  expression	126	None	replace
538	[BUG]  [BUGGY]  if(childCount  ==  1  &&  NodeUtil.isExpressionNode(first)&&  first.getType()  ==  Token.STRING)  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  1  &&  NodeUtil.isExpressionNode(first)&&  first.getType()  ==  Token.STRING)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(childCount  ==  1  &&  NodeUtil.isExpressionNode(first)&&  first.getType()  ==  Token.STRING)  {	  if(childCount    ==    1    &&    NodeUtil.isExpressionNode(first))    {    	non-compiled	[CE]  illegal  start  of  expression	126	None	replace
539	[BUG]  [BUGGY]  if(childCount  ==  1  &&  NodeUtil.isStringNode(first))  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  1  &&  NodeUtil.isStringNode(first))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(childCount  ==  1  &&  NodeUtil.isStringNode(first))  {	  if(childCount    ==    1    &&    NodeUtil.isExpressionNode(first))    {    	non-compiled	[CE]  illegal  start  of  expression	126	None	replace
540	[BUG]  [BUGGY]  Preconditions.checkState(childCount  ==  0)  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]                          ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  Preconditions.checkState(childCount  ==  0)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	Preconditions.checkState(childCount  ==  0)  {  throw  new  IllegalStateException( " ");  }	  Preconditions.checkState(childCount    ==    1)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	117	None	replace
541	[BUG]  [BUGGY]  Preconditions.checkState(childCount  ==  2)  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]                            ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  Preconditions.checkState(childCount  ==  2)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	Preconditions.checkState(childCount  ==  2)  {  throw  new  IllegalStateException( " ");  }	  Preconditions.checkState(childCount    ==    1)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	117	None	replace
542	[BUG]  [BUGGY]  Context.checkState(childCount  ==  1);  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  Context.checkState(childCount  ==  1);  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	Context.checkState(childCount  ==  1);	  Preconditions.checkState(childCount    ==    1)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	117	None	replace
543	[BUG]  [BUGGY]  if(childCount  ==  1  &&  first.getFirstChild().getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  1  &&  first.getFirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(childCount  ==  1  &&  first.getFirstChild().getType()  ==  Token.FUNCTION)  {	  if(childCount    ==    1    &&    first.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  illegal  start  of  expression	128	None	replace
544	[BUG]  [BUGGY]  if(childCount  ==  2  &&  first.getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  2  &&  first.getType()  ==  Token.FUNCTION)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(childCount  ==  2  &&  first.getType()  ==  Token.FUNCTION)  {	  if(childCount    ==    1    &&    first.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  illegal  start  of  expression	128	None	replace
545	[BUG]  [BUGGY]  if(childCount  ==  ((  n.getLastChild()!=  null  &&  n.getNext().getType()  ==  Token.STRING)||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  ((  n.getLastChild()!=  null  &&  n.getNext().getType()  ==  Token.STRING)||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(childCount  ==  ((  n.getLastChild()!=  null  &&  n.getNext().getType()  ==  Token.STRING)||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?	  if(childCount    ==    ((    n.getFirstChild()!=    null    &&    n.getNext().getType()    ==    Token.STRING)||    childCount    ==    ((    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
546	[BUG]  [BUGGY]  if(childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getNext().getType()  ==  Token.STRING)||  childCount  ==  ((  n.getLastChild()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  [CE]  :  expected  [FE]                    ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getNext().getType()  ==  Token.STRING)||  childCount  ==  ((  n.getLastChild()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getNext().getType()  ==  Token.STRING)||  childCount  ==  ((  n.getLastChild()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?	  if(childCount    ==    ((    n.getFirstChild()!=    null    &&    n.getNext().getType()    ==    Token.STRING)||    childCount    ==    ((    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    	non-compiled	[CE]  :  expected	62	None	replace
547	[BUG]  [BUGGY]  if(first.getType()  ==  Token.STRING  ||  first.getFirstChild().getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first.getType()  ==  Token.STRING  ||  first.getFirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(first.getType()  ==  Token.STRING  ||  first.getFirstChild().getType()  ==  Token.FUNCTION)  {	  if(n.getType()    ==    Token.STRING    ||    first.getNext().getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
548	[BUG]  [BUGGY]  if(first.getType()  ==  Token.STRING  ||  last.getNext().getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first.getType()  ==  Token.STRING  ||  last.getNext().getType()  ==  Token.FUNCTION)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(first.getType()  ==  Token.STRING  ||  last.getNext().getType()  ==  Token.FUNCTION)  {	  if(n.getType()    ==    Token.STRING    ||    first.getNext().getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
549	[BUG]  [BUGGY]  if(NodeUtil.isName(first)&&  NodeUtil.isFunctionDeclaration(n))  {  [CE]  [FE]                              ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isName(first)&&  NodeUtil.isFunctionDeclaration(n))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(NodeUtil.isName(first)&&  NodeUtil.isFunctionDeclaration(n))  {	  if(NodeUtil.isExpressionNode(n)&&    NodeUtil.isFunctionDeclaration(n))    {    	non-compiled	[CE]  	72	None	replace
550	[BUG]  [BUGGY]  if(NodeUtil.isName(n)&&  NodeUtil.isFunctionDeclaration(n))  {  [CE]  [FE]                                ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isName(n)&&  NodeUtil.isFunctionDeclaration(n))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(NodeUtil.isName(n)&&  NodeUtil.isFunctionDeclaration(n))  {	  if(NodeUtil.isExpressionNode(n)&&    NodeUtil.isFunctionDeclaration(n))    {    	non-compiled	[CE]  	72	None	replace
551	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(first)&&  n.getParent().getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isExpressionNode(first)&&  n.getParent().getType()  ==  Token.FUNCTION)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(NodeUtil.isExpressionNode(first)&&  n.getParent().getType()  ==  Token.FUNCTION)  {	  if(NodeUtil.isExpressionNode(n)&&    first.getNext().getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
552	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(first)&&  first.getParent().getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isExpressionNode(first)&&  first.getParent().getType()  ==  Token.FUNCTION)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(NodeUtil.isExpressionNode(first)&&  first.getParent().getType()  ==  Token.FUNCTION)  {	  if(NodeUtil.isExpressionNode(n)&&    first.getNext().getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
553	[BUG]  [BUGGY]  if(childCount  ==  ((  n.getString()  ==  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {  [CE]  [FE]                        ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  ((  n.getString()  ==  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(childCount  ==  ((  n.getString()  ==  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {	  if(childCount    ==    ((    n.getString()!=    null    &&    n.getParent().getType()    ==    Token.STRING)?    1    :    0))    {    	non-compiled	[CE]  	98	None	replace
554	[BUG]  [BUGGY]  if(childCount  ==  ((  n.getString()!=  null  &&  n.getName().getType()  ==  Token.STRING)?  1  :  0))  {  [CE]  [FE]                          ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  ((  n.getString()!=  null  &&  n.getName().getType()  ==  Token.STRING)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(childCount  ==  ((  n.getString()!=  null  &&  n.getName().getType()  ==  Token.STRING)?  1  :  0))  {	  if(childCount    ==    ((    n.getString()!=    null    &&    n.getParent().getType()    ==    Token.STRING)?    1    :    0))    {    	non-compiled	[CE]  	98	None	replace
555	[BUG]  [BUGGY]  if(childCount!=  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {  [CE]  [FE]                        ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount!=  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(childCount!=  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {	  if(n.getType()    ==    Token.STRING    ||    childCount!=    ((    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.FUNCTION)?    1    :    0))    {    	non-compiled	[CE]  	29	None	replace
556	[BUG]  [BUGGY]  if(childCount  ==  ((  first!=  null  &&  first.getType()  ==  Token.STRING)?  1  :  0))  {  [CE]  [FE]                            ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  ((  first!=  null  &&  first.getType()  ==  Token.STRING)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(childCount  ==  ((  first!=  null  &&  first.getType()  ==  Token.STRING)?  1  :  0))  {	  if(childCount    ==    ((    n.getNext()!=    null    &&    n.getParent().getType()    ==    Token.STRING)?    1    :    0))    {    	non-compiled	[CE]  	45	None	replace
557	[BUG]  [BUGGY]  if(childCount  ==  ((  first!=  null  &&  first.getNext()!=  null  &&  first.getParent().getType()  ==  Token.STRING)?  1  :  0))  {  [CE]  [FE]                              ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  ((  first!=  null  &&  first.getNext()!=  null  &&  first.getParent().getType()  ==  Token.STRING)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(childCount  ==  ((  first!=  null  &&  first.getNext()!=  null  &&  first.getParent().getType()  ==  Token.STRING)?  1  :  0))  {	  if(childCount    ==    ((    n.getNext()!=    null    &&    n.getParent().getType()    ==    Token.STRING)?    1    :    0))    {    	non-compiled	[CE]  	45	None	replace
558	[BUG]  [BUGGY]  if(childCount  ==  ((  first.getNext()!=  null  &&  first.getType()  ==  Token.STRING)?  1  :  0))  {  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  ((  first.getNext()!=  null  &&  first.getType()  ==  Token.STRING)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(childCount  ==  ((  first.getNext()!=  null  &&  first.getType()  ==  Token.STRING)?  1  :  0))  {	  if(childCount    ==    ((    n.getNext()!=    null    &&    n.getParent().getType()    ==    Token.STRING)?    1    :    0))    {    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
559	[BUG]  [BUGGY]  if(first.getType()  ==  Token.STRING  ||  last.getType()  ==  Token.OBJECTLIT)  {  [CE]  [FE]                          ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first.getType()  ==  Token.STRING  ||  last.getType()  ==  Token.OBJECTLIT)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(first.getType()  ==  Token.STRING  ||  last.getType()  ==  Token.OBJECTLIT)  {	  if(n.getType()    ==    Token.STRING    ||    first.getType()    ==    Token.OBJECTLIT)    {    	non-compiled	[CE]  	106	None	replace
560	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING  &&  childCount  >=  ((  n.getNext()!=  null  &&  n.getNext().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [CE]  [FE]                ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getType()  ==  Token.STRING  &&  childCount  >=  ((  n.getNext()!=  null  &&  n.getNext().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(n.getType()  ==  Token.STRING  &&  childCount  >=  ((  n.getNext()!=  null  &&  n.getNext().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {	  if(n.getType()    ==    Token.STRING    &&    childCount!=    ((    n.getNext()!=    null    &&    n.getNext().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    	non-compiled	[CE]  	3	None	replace
561	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(first)&&  n.getFirstChild()!=  null)  {  [CE]  [FE]                        ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isExpressionNode(first)&&  n.getFirstChild()!=  null)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(NodeUtil.isExpressionNode(first)&&  n.getFirstChild()!=  null)  {	  if(NodeUtil.isExpressionNode(n)&&    first.getFirstChild()!=    null)    {    	non-compiled	[CE]  	150	None	replace
562	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(first)&&  first.getFirstChild()  ==  null)  {  [CE]  [FE]                          ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isExpressionNode(first)&&  first.getFirstChild()  ==  null)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(NodeUtil.isExpressionNode(first)&&  first.getFirstChild()  ==  null)  {	  if(NodeUtil.isExpressionNode(n)&&    first.getFirstChild()!=    null)    {    	non-compiled	[CE]  	150	None	replace
563	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(first)&&  childCount  ==  ((  n.getString()  ==  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {  [CE]  [FE]                ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isExpressionNode(first)&&  childCount  ==  ((  n.getString()  ==  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(NodeUtil.isExpressionNode(first)&&  childCount  ==  ((  n.getString()  ==  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {	  if(NodeUtil.isExpressionNode(first)&&    childCount    ==    ((    n.getString()!=    null    &&    n.getParent().getType()    ==    Token.STRING)?    1    :    0))    {    	non-compiled	[CE]  	100	None	replace
564	[BUG]  [BUGGY]  if(first!=  null  &&  childCount!=  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {  [CE]  [FE]                  ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first!=  null  &&  childCount!=  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(first!=  null  &&  childCount!=  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {	  if(first.getType()    ==    Token.STRING    ||    childCount!=    ((    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    	non-compiled	[CE]  	97	None	replace
565	[BUG]  [BUGGY]  if(first  ==  null  ||  childCount!=  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first  ==  null  ||  childCount!=  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(first  ==  null  ||  childCount!=  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {	  if(first.getType()    ==    Token.STRING    ||    childCount!=    ((    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    	non-compiled	[CE]  	97	None	replace
566	[BUG]  [BUGGY]  if(first!=  null  ||  childCount!=  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first!=  null  ||  childCount!=  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(first!=  null  ||  childCount!=  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {	  if(first.getType()    ==    Token.STRING    ||    childCount!=    ((    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    	non-compiled	[CE]  	97	None	replace
567	[BUG]  [BUGGY]  Context  rhsContext  =  Context.createContext(context,  false);  [CE]  [FE]                              ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  Context  rhsContext  =  Context.createContext(context,  false);  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	Context  rhsContext  =  Context.createContext(context,  false);	  Context    rhsContext    =    Context.createContext(context);    	non-compiled	[CE]  	119	None	replace
568	[BUG]  [BUGGY]  Context  rhsContext  =  Context.createContext(context,  context);  [CE]  [FE]                                ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  Context  rhsContext  =  Context.createContext(context,  context);  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	Context  rhsContext  =  Context.createContext(context,  context);	  Context    rhsContext    =    Context.createContext(context);    	non-compiled	[CE]  	119	None	replace
569	[BUG]  [BUGGY]  if(n.getType()  ==  Token.FUNCTION  ||  first.getType()  ==  Token.STRING)  {  [CE]  [FE]                ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getType()  ==  Token.FUNCTION  ||  first.getType()  ==  Token.STRING)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(n.getType()  ==  Token.FUNCTION  ||  first.getType()  ==  Token.STRING)  {	  if(n.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	42	None	replace
570	[BUG]  [BUGGY]  if(first.getType()  ==  Token.FUNCTION  ||  first.getType()  ==  Token.STRING)  {  [CE]  [FE]                  ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first.getType()  ==  Token.FUNCTION  ||  first.getType()  ==  Token.STRING)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(first.getType()  ==  Token.FUNCTION  ||  first.getType()  ==  Token.STRING)  {	  if(n.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	42	None	replace
571	[BUG]  [BUGGY]  Node  n  =  first.getParent();  [CE]  [FE]                          ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  Node  n  =  first.getParent();  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	Node  n  =  first.getParent();	  Node    n    =    first.getNext();    	non-compiled	[CE]  	53	None	replace
572	[BUG]  [BUGGY]  Node  n  =  second.getNext();  [CE]  [FE]                            ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  Node  n  =  second.getNext();  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	Node  n  =  second.getNext();	  Node    n    =    first.getNext();    	non-compiled	[CE]  	53	None	replace
573	[BUG]  [BUGGY]  Integer  n  =  first.getChildCount();  [CE]  [FE]                                    ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  Integer  n  =  first.getChildCount();  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	Integer  n  =  first.getChildCount();	  Integer    n    =    first.getNext();    	non-compiled	[CE]  	58	None	replace
574	[BUG]  [BUGGY]  Integer  n  =  first.getNextParent();  [CE]  [FE]                                      ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  Integer  n  =  first.getNextParent();  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	Integer  n  =  first.getNextParent();	  Integer    n    =    first.getNext();    	non-compiled	[CE]  	58	None	replace
575	[BUG]  [BUGGY]  if(first!=  null  &&  first.getType()  ==  Token.STRING  ||  first.getType()  ==  Token.OBJECTLIT)  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first!=  null  &&  first.getType()  ==  Token.STRING  ||  first.getType()  ==  Token.OBJECTLIT)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(first!=  null  &&  first.getType()  ==  Token.STRING  ||  first.getType()  ==  Token.OBJECTLIT)  {	  if(first    ==    null    &&    first.getType()    ==    Token.STRING)    {    	non-compiled	[CE]  	89	None	replace
576	[BUG]  [BUGGY]  if(first!=  null  &&  first.getType()  ==  Token.STRING  ||  first.getType()  ==  Token.NAME)  {  [CE]  [FE]                        ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first!=  null  &&  first.getType()  ==  Token.STRING  ||  first.getType()  ==  Token.NAME)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(first!=  null  &&  first.getType()  ==  Token.STRING  ||  first.getType()  ==  Token.NAME)  {	  if(first    ==    null    &&    first.getType()    ==    Token.STRING)    {    	non-compiled	[CE]  	89	None	replace
577	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(n)||  childCount!=  ((  n.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [CE]  [FE]                                ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isExpressionNode(n)||  childCount!=  ((  n.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(NodeUtil.isExpressionNode(n)||  childCount!=  ((  n.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {	  if(NodeUtil.isExpressionNode(first)||    childCount!=    ((    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    	non-compiled	[CE]  	52	None	replace
578	[BUG]  [BUGGY]  if(first.getType()  ==  Token.STRING  &&  last.getString().equals( "string "))  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first.getType()  ==  Token.STRING  &&  last.getString().equals( "string "))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(first.getType()  ==  Token.STRING  &&  last.getString().equals( "string "))  {	  if(n.getType()    ==    Token.STRING    &&    first.getString().equals(   "string   "))    {    	non-compiled	[CE]  	145	None	replace
579	[BUG]  [BUGGY]  if(first.getType()  ==  Token.STRING  ||  n.getType()  ==  Token.FUNCTION)  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first.getType()  ==  Token.STRING  ||  n.getType()  ==  Token.FUNCTION)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(first.getType()  ==  Token.STRING  ||  n.getType()  ==  Token.FUNCTION)  {	  if(n.getType()    ==    Token.STRING    ||    first.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	104	None	replace
580	[BUG]  [BUGGY]  if(NodeUtil.isStringNode(first)&&  NodeUtil.isExpressionNode(n))  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isStringNode(first)&&  NodeUtil.isExpressionNode(n))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(NodeUtil.isStringNode(first)&&  NodeUtil.isExpressionNode(n))  {	  if(NodeUtil.isExpressionNode(n)&&    NodeUtil.isExpressionNode(n))    {    	non-compiled	[CE]  	149	None	replace
581	[BUG]  [BUGGY]  if(NodeUtil.isStringNode(n)&&  NodeUtil.isExpressionNode(n))  {  [CE]  [FE]                        ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isStringNode(n)&&  NodeUtil.isExpressionNode(n))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(NodeUtil.isStringNode(n)&&  NodeUtil.isExpressionNode(n))  {	  if(NodeUtil.isExpressionNode(n)&&    NodeUtil.isExpressionNode(n))    {    	non-compiled	[CE]  	149	None	replace
582	[BUG]  [BUGGY]  if(NodeUtil.isObjectLitKey(n)&&  NodeUtil.isExpressionNode(n))  {  [CE]  [FE]                          ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isObjectLitKey(n)&&  NodeUtil.isExpressionNode(n))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(NodeUtil.isObjectLitKey(n)&&  NodeUtil.isExpressionNode(n))  {	  if(NodeUtil.isExpressionNode(n)&&    NodeUtil.isExpressionNode(n))    {    	non-compiled	[CE]  	149	None	replace
583	[BUG]  [BUGGY]  if(NodeUtil.isName(n)&&  NodeUtil.isExpressionNode(n))  {  [CE]  [FE]                            ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isName(n)&&  NodeUtil.isExpressionNode(n))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(NodeUtil.isName(n)&&  NodeUtil.isExpressionNode(n))  {	  if(NodeUtil.isExpressionNode(n)&&    NodeUtil.isExpressionNode(n))    {    	non-compiled	[CE]  	149	None	replace
584	[BUG]  [BUGGY]  Context  cc  =  getContext(context);  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  Context  cc  =  getContext(context);  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	Context  cc  =  getContext(context);	  Context    cc    =    getContext();    	non-compiled	[CE]  	57	None	replace
585	[BUG]  [BUGGY]  Context  cc  =  getContextForNoInOperator();  [CE]  [FE]                                    ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  Context  cc  =  getContextForNoInOperator();  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	Context  cc  =  getContextForNoInOperator();	  Context    cc    =    getContext();    	non-compiled	[CE]  	57	None	replace
586	[BUG]  [BUGGY]  Context  cc  =  getContextForNoInOperator(context);  [CE]  [FE]                                      ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  Context  cc  =  getContextForNoInOperator(context);  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	Context  cc  =  getContextForNoInOperator(context);	  Context    cc    =    getContext();    	non-compiled	[CE]  	57	None	replace
587	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(n)&&  childCount  ==  ((  n.getNext()!=  null  &&  n.getNext().getType()  ==  Token.STRING)?  1  :  0))  {  [CE]  not  a  statement  [FE]                      ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isExpressionNode(n)&&  childCount  ==  ((  n.getNext()!=  null  &&  n.getNext().getType()  ==  Token.STRING)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(NodeUtil.isExpressionNode(n)&&  childCount  ==  ((  n.getNext()!=  null  &&  n.getNext().getType()  ==  Token.STRING)?  1  :  0))  {	  if(NodeUtil.isExpressionNode(n)&&    childCount!=    ((    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    	non-compiled	[CE]  not  a  statement	47	None	replace
588	[BUG]  [BUGGY]  if(childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getNext().getType()  ==  Token.STRING)||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  [CE]  [FE]              ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getNext().getType()  ==  Token.STRING)||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getNext().getType()  ==  Token.STRING)||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :	  if(childCount    ==    ((    n.getFirstChild()!=    null    &&    n.getNext().getType()    ==    Token.STRING)||    childCount    ==    ((    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0    	non-compiled	[CE]  	112	None	replace
589	[BUG]  [BUGGY]  if(childCount  ==  ((  n.getLastChild()!=  null  &&  n.getNext().getType()  ==  Token.STRING)||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0  [CE]  [FE]                ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  ((  n.getLastChild()!=  null  &&  n.getNext().getType()  ==  Token.STRING)||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(childCount  ==  ((  n.getLastChild()!=  null  &&  n.getNext().getType()  ==  Token.STRING)||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0	  if(childCount    ==    ((    n.getFirstChild()!=    null    &&    n.getNext().getType()    ==    Token.STRING)||    childCount    ==    ((    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0    	non-compiled	[CE]  	112	None	replace
590	[BUG]  [BUGGY]  if(childCount  ==  ((  n.getLastChild()!=  null  &&  n.getNext().getType()  ==  Token.STRING)||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0)  [CE]  [FE]                    ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  ((  n.getLastChild()!=  null  &&  n.getNext().getType()  ==  Token.STRING)||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0)  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(childCount  ==  ((  n.getLastChild()!=  null  &&  n.getNext().getType()  ==  Token.STRING)||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0)	  if(childCount    ==    ((    n.getFirstChild()!=    null    &&    n.getNext().getType()    ==    Token.STRING)||    childCount    ==    ((    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0)    	non-compiled	[CE]  	63	None	replace
591	[BUG]  [BUGGY]  if(childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getNext().getType()  ==  Token.STRING)||  childCount  ==  ((  n.getLastChild()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0)  [CE]  [FE]                      ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getNext().getType()  ==  Token.STRING)||  childCount  ==  ((  n.getLastChild()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0)  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getNext().getType()  ==  Token.STRING)||  childCount  ==  ((  n.getLastChild()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0)	  if(childCount    ==    ((    n.getFirstChild()!=    null    &&    n.getNext().getType()    ==    Token.STRING)||    childCount    ==    ((    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0)    	non-compiled	[CE]  	63	None	replace
592	[BUG]  [BUGGY]  if(childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getLastChild().getType()  ==  Token.STRING)||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTL  [CE]  [FE]                            ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getLastChild().getType()  ==  Token.STRING)||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTL  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getLastChild().getType()  ==  Token.STRING)||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTL	  if(childCount    ==    ((    n.getFirstChild()!=    null    &&    n.getLastChild().getType()    ==    Token.STRING)||    childCount    ==    ((    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    	non-compiled	[CE]  	10	None	replace
593	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(first)&&  first.getString().getType()  ==  Token.STRING)  {  [CE]  not  a  statement  [FE]                          ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isExpressionNode(first)&&  first.getString().getType()  ==  Token.STRING)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(NodeUtil.isExpressionNode(first)&&  first.getString().getType()  ==  Token.STRING)  {	  if(NodeUtil.isExpressionNode(first)&&    first.getNext().getType()    ==    Token.STRING)    {    	non-compiled	[CE]  not  a  statement	36	None	replace
594	[BUG]  [BUGGY]  if(NodeUtil.isStringNode(first)&&  first.getNext()!=  null)  {  [CE]  not  a  statement  [FE]                          ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isStringNode(first)&&  first.getNext()!=  null)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(NodeUtil.isStringNode(first)&&  first.getNext()!=  null)  {	  if(NodeUtil.isExpressionNode(first)||    first.getNext()!=    null)    {    	non-compiled	[CE]  not  a  statement	124	None	replace
595	[BUG]  [BUGGY]  if(childCount  ==  2  &&  first.getType()  ==  Token.STRING)  {  [CE]  not  a  statement  [FE]            ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  2  &&  first.getType()  ==  Token.STRING)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(childCount  ==  2  &&  first.getType()  ==  Token.STRING)  {	  if(childCount    ==    1    &&    first.getType()    ==    Token.STRING)    {    	non-compiled	[CE]  not  a  statement	125	None	replace
596	[BUG]  [BUGGY]  if(childCount  ==  1  &&  first.getType()  ==  Token.STRING  ||  first.getType()  ==  Token.OBJECTLIT)  {  [CE]  orphaned  case  [FE]              ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  1  &&  first.getType()  ==  Token.STRING  ||  first.getType()  ==  Token.OBJECTLIT)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(childCount  ==  1  &&  first.getType()  ==  Token.STRING  ||  first.getType()  ==  Token.OBJECTLIT)  {	  if(childCount    ==    1    &&    first.getType()    ==    Token.STRING)    {    	non-compiled	[CE]  orphaned  case	125	None	replace
597	[BUG]  [BUGGY]  if(n.getNext()!=  null  &&  childCount!=  ((  n.getNext()!=  null  &&  n.getNext().getType()  ==  Token.STRING)?  1  :  0))  {  [CE]  not  a  statement  [FE]                    ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getNext()!=  null  &&  childCount!=  ((  n.getNext()!=  null  &&  n.getNext().getType()  ==  Token.STRING)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(n.getNext()!=  null  &&  childCount!=  ((  n.getNext()!=  null  &&  n.getNext().getType()  ==  Token.STRING)?  1  :  0))  {	  if(n.getParent()!=    null    &&    childCount!=    ((    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    	non-compiled	[CE]  not  a  statement	74	None	replace
598	[BUG]  [BUGGY]  if(n.getParent()!=  null  &&  childCount!=  ((  n.getParent()  ==  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {  [CE]  not  a  statement  [FE]                      ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getParent()!=  null  &&  childCount!=  ((  n.getParent()  ==  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(n.getParent()!=  null  &&  childCount!=  ((  n.getParent()  ==  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {	  if(n.getParent()!=    null    &&    childCount!=    ((    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    	non-compiled	[CE]  not  a  statement	74	None	replace
599	[BUG]  [BUGGY]  if(NodeUtil.isStringNode(first)&&  NodeUtil.isVarDeclaration(first))  {  [CE]  not  a  statement  [FE]                        ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isStringNode(first)&&  NodeUtil.isVarDeclaration(first))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(NodeUtil.isStringNode(first)&&  NodeUtil.isVarDeclaration(first))  {	  if(NodeUtil.isExpressionNode(first)&&    NodeUtil.isVarDeclaration(first))    {    	non-compiled	[CE]  not  a  statement	161	None	replace
600	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(first)&&  NodeUtil.isName(first))  {  [CE]  not  a  statement  [FE]                          ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isExpressionNode(first)&&  NodeUtil.isName(first))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(NodeUtil.isExpressionNode(first)&&  NodeUtil.isName(first))  {	  if(NodeUtil.isExpressionNode(first)&&    NodeUtil.isVarDeclaration(first))    {    	non-compiled	[CE]  not  a  statement	161	None	replace
601	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(first)&&  childCount!=  ((  n.getFirstChild()  ==  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {  [CE]  not  a  statement  [FE]                          ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isExpressionNode(first)&&  childCount!=  ((  n.getFirstChild()  ==  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(NodeUtil.isExpressionNode(first)&&  childCount!=  ((  n.getFirstChild()  ==  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {	  if(NodeUtil.isExpressionNode(first)&&    childCount!=    ((    n.getFirstChild()!=    null    &&    n.getParent().getType()    ==    Token.STRING)?    1    :    0))    {    	non-compiled	[CE]  not  a  statement	81	None	replace
602	[BUG]  [BUGGY]  if(first!=  null  &&  first.getType()!=  Token.STRING)  {  [CE]  orphaned  case  [FE]                  ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first!=  null  &&  first.getType()!=  Token.STRING)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(first!=  null  &&  first.getType()!=  Token.STRING)  {	  if(first    ==    null    ||    first.getType()!=    Token.STRING)    {    	non-compiled	[CE]  orphaned  case	87	None	replace
603	[BUG]  [BUGGY]  if(first  ==  null  ||  first!=  null  ||  first.getType()!=  Token.STRING)  {  [CE]  not  a  statement  [FE]                    ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first  ==  null  ||  first!=  null  ||  first.getType()!=  Token.STRING)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(first  ==  null  ||  first!=  null  ||  first.getType()!=  Token.STRING)  {	  if(first    ==    null    ||    first.getType()!=    Token.STRING)    {    	non-compiled	[CE]  not  a  statement	87	None	replace
604	[BUG]  [BUGGY]  Context  cc  =  context.getCurrentStatementContext();  [CE]  not  a  statement  [FE]                            ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  Context  cc  =  context.getCurrentStatementContext();  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	Context  cc  =  context.getCurrentStatementContext();	  Context    cc    =    context.getCurrentContext();    	non-compiled	[CE]  not  a  statement	54	None	replace
605	[BUG]  [BUGGY]  Context  cc  =  this.context.getCurrentContext();  [CE]  not  a  statement  [FE]                              ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  Context  cc  =  this.context.getCurrentContext();  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	Context  cc  =  this.context.getCurrentContext();	  Context    cc    =    context.getCurrentContext();    	non-compiled	[CE]  not  a  statement	54	None	replace
606	[BUG]  [BUGGY]  Context  cc  =  context.getCurrentContext(true);  [CE]  not  a  statement  [FE]                                ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  Context  cc  =  context.getCurrentContext(true);  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	Context  cc  =  context.getCurrentContext(true);	  Context    cc    =    context.getCurrentContext();    	non-compiled	[CE]  not  a  statement	54	None	replace
607	[BUG]  [BUGGY]  Context  cc  =  context.getCurrentContext(n);  [CE]  not  a  statement  [FE]                                  ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  Context  cc  =  context.getCurrentContext(n);  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	Context  cc  =  context.getCurrentContext(n);	  Context    cc    =    context.getCurrentContext();    	non-compiled	[CE]  not  a  statement	54	None	replace
608	[BUG]  [BUGGY]  if(first.getType()  ==  Token.STRING  &&  n.getNext()!=  null)  {  [CE]  not  a  statement  [FE]                        ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first.getType()  ==  Token.STRING  &&  n.getNext()!=  null)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(first.getType()  ==  Token.STRING  &&  n.getNext()!=  null)  {	  if(n.getType()    ==    Token.STRING    &&    first.getNext()!=    null)    {    	non-compiled	[CE]  not  a  statement	147	None	replace
609	[BUG]  [BUGGY]  if(first!=  null  &&  first.getType()  ==  Token.STRING  &&  childCount!=  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [CE]  not  a  statement  [FE]            ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first!=  null  &&  first.getType()  ==  Token.STRING  &&  childCount!=  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(first!=  null  &&  first.getType()  ==  Token.STRING  &&  childCount!=  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {	  if(first.getType()    ==    Token.STRING    &&    childCount!=    ((    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    	non-compiled	[CE]  not  a  statement	113	None	replace
610	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING  ||  childCount  ==  ((  first.getNext()!=  null  &&  first.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [CE]  not  a  statement  [FE]                  ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getType()  ==  Token.STRING  ||  childCount  ==  ((  first.getNext()!=  null  &&  first.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(n.getType()  ==  Token.STRING  ||  childCount  ==  ((  first.getNext()!=  null  &&  first.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {	  if(n.getType()    ==    Token.STRING    ||    childCount    ==    ((    n.getNext()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    	non-compiled	[CE]  not  a  statement	131	None	replace
611	[BUG]  [BUGGY]  if(childCount  ==  ((  n.getType()  ==  Token.STRING)&&  n.getString()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  ((  n.getType()  ==  Token.STRING)&&  n.getString()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(childCount  ==  ((  n.getType()  ==  Token.STRING)&&  n.getString()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {	  if(childCount    ==    ((    n.getType()    ==    Token.STRING)&&    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.STRING)?    1    :    0))    {    	non-compiled	[CE]  illegal  start  of  expression	109	None	replace
612	[BUG]  [BUGGY]  if(childCount  ==  ((  n.getType()  ==  Token.STRING)||  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  ((  n.getType()  ==  Token.STRING)||  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(childCount  ==  ((  n.getType()  ==  Token.STRING)||  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {	  if(childCount    ==    ((    n.getType()    ==    Token.STRING)&&    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.STRING)?    1    :    0))    {    	non-compiled	[CE]  illegal  start  of  expression	109	None	replace
613	[BUG]  [BUGGY]  if(NodeUtil.isStringNode(first)||  first.getType()  ==  Token.FUNCTION)  {  [CE]  not  a  statement  [FE]                              ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isStringNode(first)||  first.getType()  ==  Token.FUNCTION)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(NodeUtil.isStringNode(first)||  first.getType()  ==  Token.FUNCTION)  {	  if(NodeUtil.isExpressionNode(first)||    first.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  not  a  statement	38	None	replace
614	[BUG]  [BUGGY]  if(NodeUtil.isStringNode(first)&&  first.getType()  ==  Token.FUNCTION)  {  [CE]  not  a  statement  [FE]                                ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isStringNode(first)&&  first.getType()  ==  Token.FUNCTION)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(NodeUtil.isStringNode(first)&&  first.getType()  ==  Token.FUNCTION)  {	  if(NodeUtil.isExpressionNode(first)||    first.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  not  a  statement	38	None	replace
615	[BUG]  [BUGGY]  if(first  ==  null  ||  first.getNext()!=  null)  {  [CE]  orphaned  case  [FE]                ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first  ==  null  ||  first.getNext()!=  null)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(first  ==  null  ||  first.getNext()!=  null)  {	  if(first    ==    null    ||    first.getNext().getType()    ==    Token.STRING)    {    	non-compiled	[CE]  orphaned  case	116	None	replace
616	[BUG]  [BUGGY]  if(first.getType()  ==  Token.STRING  ||  n.getFirstChild()!=  null)  {  [CE]  orphaned  case  [FE]                ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first.getType()  ==  Token.STRING  ||  n.getFirstChild()!=  null)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(first.getType()  ==  Token.STRING  ||  n.getFirstChild()!=  null)  {	  if(n.getType()    ==    Token.STRING    ||    first!=    null)    {    	non-compiled	[CE]  orphaned  case	132	None	replace
617	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING  ||  first  ==  null)  {  [CE]  orphaned  case  [FE]                  ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getType()  ==  Token.STRING  ||  first  ==  null)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(n.getType()  ==  Token.STRING  ||  first  ==  null)  {	  if(n.getType()    ==    Token.STRING    ||    first!=    null)    {    	non-compiled	[CE]  orphaned  case	132	None	replace
618	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING  &&  childCount!=  ((  first.getFirstChild()!=  null  &&  first.getParent().getType()  ==  Token.FUNCTION)?  1  :  0))  {  [CE]  orphaned  case  [FE]                            ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getType()  ==  Token.STRING  &&  childCount!=  ((  first.getFirstChild()!=  null  &&  first.getParent().getType()  ==  Token.FUNCTION)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(n.getType()  ==  Token.STRING  &&  childCount!=  ((  first.getFirstChild()!=  null  &&  first.getParent().getType()  ==  Token.FUNCTION)?  1  :  0))  {	  if(n.getType()    ==    Token.STRING    &&    childCount!=    ((    n.getFirstChild()!=    null    &&    n.getParent().getType()    ==    Token.FUNCTION)?    1    :    0))    {    	non-compiled	[CE]  orphaned  case	31	None	replace
619	[BUG]  [BUGGY]  if(childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getNext().getType()  ==  Token.STRING)||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0);  [CE]  [FE]              ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getNext().getType()  ==  Token.STRING)||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0);  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getNext().getType()  ==  Token.STRING)||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0);	  if(childCount    ==    ((    n.getFirstChild()!=    null    &&    n.getNext().getType()    ==    Token.STRING)||    childCount    ==    ((    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.OBJ    	non-compiled	[CE]  	130	None	replace
620	[BUG]  [BUGGY]  if(childCount  ==  1  &&  first.getType()  ==  Token.STRING  &&  first.getFirstChild()!=  null  &&  first.getLastChild().getString().equals( "string "))  {  [CE]  orphaned  case  [FE]                  ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  1  &&  first.getType()  ==  Token.STRING  &&  first.getFirstChild()!=  null  &&  first.getLastChild().getString().equals( "string "))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(childCount  ==  1  &&  first.getType()  ==  Token.STRING  &&  first.getFirstChild()!=  null  &&  first.getLastChild().getString().equals( "string "))  {	  if(childCount    ==    1    &&    first.getFirstChild()!=    null    &&    first.getLastChild().getString().equals(   "string   "))    {    	non-compiled	[CE]  orphaned  case	158	None	replace
621	[BUG]  [BUGGY]  if(first!=  null  &&  first.getFirstChild()!=  null  &&  first.getLastChild().getString().equals( "string "))  {  [CE]  orphaned  case  [FE]                    ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first!=  null  &&  first.getFirstChild()!=  null  &&  first.getLastChild().getString().equals( "string "))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(first!=  null  &&  first.getFirstChild()!=  null  &&  first.getLastChild().getString().equals( "string "))  {	  if(childCount    ==    1    &&    first.getFirstChild()!=    null    &&    first.getLastChild().getString().equals(   "string   "))    {    	non-compiled	[CE]  orphaned  case	158	None	replace
622	[BUG]  [BUGGY]  if(childCount  ==  1  &&  first!=  null  &&  first.getLastChild().getString().equals( "string "))  {  [CE]  orphaned  case  [FE]                      ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  1  &&  first!=  null  &&  first.getLastChild().getString().equals( "string "))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(childCount  ==  1  &&  first!=  null  &&  first.getLastChild().getString().equals( "string "))  {	  if(childCount    ==    1    &&    first.getFirstChild()!=    null    &&    first.getLastChild().getString().equals(   "string   "))    {    	non-compiled	[CE]  orphaned  case	158	None	replace
623	[BUG]  [BUGGY]  if(childCount  ==  ((  n.getNext()!=  null  &&  n.getFirstChild().getType()  ==  Token.STRING)?  1  :  0))  {  [CE]  orphaned  case  [FE]                ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  ((  n.getNext()!=  null  &&  n.getFirstChild().getType()  ==  Token.STRING)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(childCount  ==  ((  n.getNext()!=  null  &&  n.getFirstChild().getType()  ==  Token.STRING)?  1  :  0))  {	  if(childCount    ==    ((    n.getFirstChild()!=    null    &&    n.getNext().getType()    ==    Token.STRING)?    1    :    0))    {    	non-compiled	[CE]  orphaned  case	65	None	replace
624	[BUG]  [BUGGY]  if(childCount  ==  ((  first!=  null  &&  first.getNext()!=  null)?  1  :  0))  {  [CE]  orphaned  case  [FE]                  ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  ((  first!=  null  &&  first.getNext()!=  null)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(childCount  ==  ((  first!=  null  &&  first.getNext()!=  null)?  1  :  0))  {	  if(childCount    ==    ((    n.getFirstChild()!=    null    &&    n.getNext().getType()    ==    Token.STRING)?    1    :    0))    {    	non-compiled	[CE]  orphaned  case	65	None	replace
625	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME  ||  first.getType()  ==  Token.FUNCTION)  {  [CE]  orphaned  case  [FE]                          ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getType()  ==  Token.NAME  ||  first.getType()  ==  Token.FUNCTION)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(n.getType()  ==  Token.NAME  ||  first.getType()  ==  Token.FUNCTION)  {	  if(n.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  orphaned  case	22	None	replace
626	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME  &&  first.getFirstChild()!=  null)  {  [CE]  orphaned  case  [FE]                            ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getType()  ==  Token.NAME  &&  first.getFirstChild()!=  null)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(n.getType()  ==  Token.NAME  &&  first.getFirstChild()!=  null)  {	  if(n.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  orphaned  case	22	None	replace
627	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME  ||  first.getType()  ==  Token.GETPROP)  {  [CE]  orphaned  case  [FE]                              ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getType()  ==  Token.NAME  ||  first.getType()  ==  Token.GETPROP)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(n.getType()  ==  Token.NAME  ||  first.getType()  ==  Token.GETPROP)  {	  if(n.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  orphaned  case	22	None	replace
628	[BUG]  [BUGGY]  if(NodeUtil.isStringVar(first))  {  [CE]  orphaned  case  [FE]                      ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isStringVar(first))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(NodeUtil.isStringVar(first))  {	  if(NodeUtil.isObjectLitKey(first))    {    	non-compiled	[CE]  orphaned  case	160	None	replace
629	[BUG]  [BUGGY]  if(NodeUtil.isName(first))  {  [CE]  orphaned  case  [FE]                        ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isName(first))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(NodeUtil.isName(first))  {	  if(NodeUtil.isObjectLitKey(first))    {    	non-compiled	[CE]  orphaned  case	160	None	replace
630	[BUG]  [BUGGY]  if(first.getType()!=  Token.STRING  &&  childCount!=  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [CE]  orphaned  case  [FE]                  ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first.getType()!=  Token.STRING  &&  childCount!=  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(first.getType()!=  Token.STRING  &&  childCount!=  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {	  if(n.getType()!=    Token.STRING    &&    childCount!=    ((    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    	non-compiled	[CE]  orphaned  case	73	None	replace
631	[BUG]  [BUGGY]  if(first!=  null  &&  first.getType()  ==  Token.STRING  &&  childCount!=  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.FUNCTION)?  1  :  0))  {  [CE]  orphaned  case  [FE]                              ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first!=  null  &&  first.getType()  ==  Token.STRING  &&  childCount!=  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.FUNCTION)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(first!=  null  &&  first.getType()  ==  Token.STRING  &&  childCount!=  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.FUNCTION)?  1  :  0))  {	  if(first.getType()    ==    Token.STRING    &&    childCount!=    ((    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.FUNCTION)?    1    :    0))    {    	non-compiled	[CE]  orphaned  case	32	None	replace
632	[BUG]  [BUGGY]  if(childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getLastChild().getType()  ==  Token.STRING)||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().  [CE]  <identifier>  expected  [FE]            ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getLastChild().getType()  ==  Token.STRING)||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getLastChild().getType()  ==  Token.STRING)||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().	  if(childCount    ==    ((    n.getFirstChild()!=    null    &&    n.getLastChild().getType()    ==    Token.STRING)||    childCount    ==    ((    n.getParent()!=    null    &&    n.getParent().getType    	non-compiled	[CE]  <identifier>  expected	101	None	replace
633	[BUG]  [BUGGY]  if(first  ==  null)  {  ((  n.getFirstChild()!=  null  &&  n.getLastChild().getType()  ==  Token.STRING)||  childCount  ==  ((  n.getParent()!=  null  &&  n  [CE]  [FE]              ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first  ==  null)  {  ((  n.getFirstChild()!=  null  &&  n.getLastChild().getType()  ==  Token.STRING)||  childCount  ==  ((  n.getParent()!=  null  &&  n  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(first  ==  null)  {  ((  n.getFirstChild()!=  null  &&  n.getLastChild().getType()  ==  Token.STRING)||  childCount  ==  ((  n.getParent()!=  null  &&  n	  if(childCount    ==    ((    n.getFirstChild()!=    null    &&    n.getLastChild().getType()    ==    Token.STRING)||    childCount    ==    ((    n.getParent()!=    null    &&    n.getParent().getType    	non-compiled	[CE]  	101	None	replace
634	[BUG]  [BUGGY]  if(first.getType()  ==  Token.STRING  &&  last.getFirstChild()!=  null)  {  [CE]  orphaned  case  [FE]                            ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first.getType()  ==  Token.STRING  &&  last.getFirstChild()!=  null)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(first.getType()  ==  Token.STRING  &&  last.getFirstChild()!=  null)  {	  if(n.getType()    ==    Token.STRING    &&    first.getFirstChild()!=    null)    {    	non-compiled	[CE]  orphaned  case	107	None	replace
635	[BUG]  [BUGGY]  if(NodeUtil.isStringNode(first)||  NodeUtil.isExpressionNode(n))  {  [CE]  orphaned  case  [FE]                    ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isStringNode(first)||  NodeUtil.isExpressionNode(n))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(NodeUtil.isStringNode(first)||  NodeUtil.isExpressionNode(n))  {	  if(NodeUtil.isExpressionNode(n)||    NodeUtil.isExpressionNode(n))    {    	non-compiled	[CE]  orphaned  case	67	None	replace
636	[BUG]  [BUGGY]  if(NodeUtil.isStringNode(first)||  NodeUtil.isFunctionDeclaration(first))  {  [CE]  orphaned  case  [FE]                      ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isStringNode(first)||  NodeUtil.isFunctionDeclaration(first))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(NodeUtil.isStringNode(first)||  NodeUtil.isFunctionDeclaration(first))  {	  if(NodeUtil.isStringNode(first))    {    	non-compiled	[CE]  orphaned  case	122	None	replace
637	[BUG]  [BUGGY]  if(NodeUtil.isStringNode(first)&&  first.getFirstChild()!=  null)  {  [CE]  orphaned  case  [FE]                        ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isStringNode(first)&&  first.getFirstChild()!=  null)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(NodeUtil.isStringNode(first)&&  first.getFirstChild()!=  null)  {	  if(NodeUtil.isStringNode(first))    {    	non-compiled	[CE]  orphaned  case	122	None	replace
638	[BUG]  [BUGGY]  if(first.getType()!=  Token.STRING  &&  first.getNext()!=  null)  {  [CE]  orphaned  case  [FE]                    ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first.getType()!=  Token.STRING  &&  first.getNext()!=  null)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(first.getType()!=  Token.STRING  &&  first.getNext()!=  null)  {	  if(first.getType()    ==    Token.STRING    &&    first.getNext()!=    null)    {    	non-compiled	[CE]  orphaned  case	92	None	replace
639	[BUG]  [BUGGY]  if(first.getType()  ==  Token.STRING  &&  first.getChildCount()!=  1)  {  [CE]  orphaned  case  [FE]                      ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first.getType()  ==  Token.STRING  &&  first.getChildCount()!=  1)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(first.getType()  ==  Token.STRING  &&  first.getChildCount()!=  1)  {	  if(first.getType()    ==    Token.STRING    &&    first.getNext()!=    null)    {    	non-compiled	[CE]  orphaned  case	92	None	replace
640	[BUG]  [BUGGY]  if(childCount  ==  2  &&  first.getString().equals( "string "))  {  [CE]  orphaned  case  [FE]                ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  2  &&  first.getString().equals( "string "))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(childCount  ==  2  &&  first.getString().equals( "string "))  {	  if(childCount    ==    1    &&    first.getString().equals(   "string   "))    {    	non-compiled	[CE]  orphaned  case	127	None	replace
641	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(first)&&  n.getParent().getType()  ==  Token.STRING)  {  [CE]  not  a  statement  [FE]                      ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isExpressionNode(first)&&  n.getParent().getType()  ==  Token.STRING)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(NodeUtil.isExpressionNode(first)&&  n.getParent().getType()  ==  Token.STRING)  {	  if(NodeUtil.isExpressionNode(n)&&    first.getNext().getType()    ==    Token.STRING)    {    	non-compiled	[CE]  not  a  statement	68	None	replace
642	[BUG]  [BUGGY]  if(first!=  null  ||  first.getType()  ==  Token.STRING  &&  first.getFirstChild()!=  null)  {  [CE]  not  a  statement  [FE]                  ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first!=  null  ||  first.getType()  ==  Token.STRING  &&  first.getFirstChild()!=  null)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(first!=  null  ||  first.getType()  ==  Token.STRING  &&  first.getFirstChild()!=  null)  {	  if(first.getType()    ==    Token.STRING    &&    first.getFirstChild()!=    null)    {    	non-compiled	[CE]  not  a  statement	91	None	replace
643	[BUG]  [BUGGY]  if(first!=  null  &&  first.getType()  ==  Token.STRING  &&  first.getFirstChild()!=  null)  {  [CE]  not  a  statement  [FE]                    ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first!=  null  &&  first.getType()  ==  Token.STRING  &&  first.getFirstChild()!=  null)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(first!=  null  &&  first.getType()  ==  Token.STRING  &&  first.getFirstChild()!=  null)  {	  if(first.getType()    ==    Token.STRING    &&    first.getFirstChild()!=    null)    {    	non-compiled	[CE]  not  a  statement	91	None	replace
644	[BUG]  [BUGGY]  Context  n  =  context.getCurrentNode();  [CE]  not  a  statement  [FE]                          ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  Context  n  =  context.getCurrentNode();  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	Context  n  =  context.getCurrentNode();	  Context    n    =    context.getCurrentContext();    	non-compiled	[CE]  not  a  statement	135	None	replace
645	[BUG]  [BUGGY]  Context  n  =  context.getCurrentStatement();  [CE]  not  a  statement  [FE]                            ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  Context  n  =  context.getCurrentStatement();  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	Context  n  =  context.getCurrentStatement();	  Context    n    =    context.getCurrentContext();    	non-compiled	[CE]  not  a  statement	135	None	replace
646	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(first)&&  NodeUtil.isFunctionDeclaration(next))  {  [CE]  not  a  statement  [FE]                        ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isExpressionNode(first)&&  NodeUtil.isFunctionDeclaration(next))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(NodeUtil.isExpressionNode(first)&&  NodeUtil.isFunctionDeclaration(next))  {	  if(NodeUtil.isExpressionNode(first)&&    NodeUtil.isFunctionDeclaration(first))    {    	non-compiled	[CE]  not  a  statement	123	None	replace
647	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(first)||  n.getNext()!=  null)  {  [CE]  not  a  statement  [FE]                          ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isExpressionNode(first)||  n.getNext()!=  null)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(NodeUtil.isExpressionNode(first)||  n.getNext()!=  null)  {	  if(NodeUtil.isExpressionNode(n)||    first.getNext()!=    null)    {    	non-compiled	[CE]  not  a  statement	96	None	replace
648	[BUG]  [BUGGY]  if(childCount  ==  ((  n.getType()  ==  Token.STRING)||  n.getParent().getType()  ==  Token.NAME)?  1  :  0))  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  ((  n.getType()  ==  Token.STRING)||  n.getParent().getType()  ==  Token.NAME)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(childCount  ==  ((  n.getType()  ==  Token.STRING)||  n.getParent().getType()  ==  Token.NAME)?  1  :  0))  {	  if(childCount    ==    ((    n.getType()    ==    Token.STRING)&&    n.getParent().getType()    ==    Token.NAME)?    1    :    0))    {    	non-compiled	[CE]  illegal  start  of  expression	129	None	replace
649	[BUG]  [BUGGY]  if(childCount  ==  ((  first.getType()  ==  Token.STRING)&&  first.getParent().getType()  ==  Token.NAME)?  1  :  0))  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  ((  first.getType()  ==  Token.STRING)&&  first.getParent().getType()  ==  Token.NAME)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(childCount  ==  ((  first.getType()  ==  Token.STRING)&&  first.getParent().getType()  ==  Token.NAME)?  1  :  0))  {	  if(childCount    ==    ((    n.getType()    ==    Token.STRING)&&    n.getParent().getType()    ==    Token.NAME)?    1    :    0))    {    	non-compiled	[CE]  illegal  start  of  expression	129	None	replace
650	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(first)&&  parent  ==  ((  n.getNext()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {  [CE]  not  a  statement  [FE]                        ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isExpressionNode(first)&&  parent  ==  ((  n.getNext()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(NodeUtil.isExpressionNode(first)&&  parent  ==  ((  n.getNext()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {	  if(NodeUtil.isExpressionNode(first)&&    childCount    ==    ((    n.getNext()!=    null    &&    n.getParent().getType()    ==    Token.STRING)?    1    :    0))    {    	non-compiled	[CE]  not  a  statement	80	None	replace
651	[BUG]  [BUGGY]  if(!NodeUtil.isExpressionNode(first)&&  first.getType()  ==  Token.STRING)  {  [CE]  orphaned  case  [FE]                      ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(!NodeUtil.isExpressionNode(first)&&  first.getType()  ==  Token.STRING)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(!NodeUtil.isExpressionNode(first)&&  first.getType()  ==  Token.STRING)  {	  if(NodeUtil.isExpressionNode(first)||    first.getType()    ==    Token.STRING)    {    	non-compiled	[CE]  orphaned  case	34	None	replace
652	[BUG]  [BUGGY]  if(NodeUtil.isForIn(first)||  first.getType()  ==  Token.STRING)  {  [CE]  not  a  statement  [FE]                        ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isForIn(first)||  first.getType()  ==  Token.STRING)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(NodeUtil.isForIn(first)||  first.getType()  ==  Token.STRING)  {	  if(NodeUtil.isExpressionNode(first)||    first.getType()    ==    Token.STRING)    {    	non-compiled	[CE]  not  a  statement	34	None	replace
653	[BUG]  [BUGGY]  if(childCount  ==  ((  first!=  null  &&  first.getFirstChild()!=  null  &&  first.getParent().getType()  ==  Token.STRING)?  1  :  0))  {  [CE]  not  a  statement  [FE]                          ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  ((  first!=  null  &&  first.getFirstChild()!=  null  &&  first.getParent().getType()  ==  Token.STRING)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(childCount  ==  ((  first!=  null  &&  first.getFirstChild()!=  null  &&  first.getParent().getType()  ==  Token.STRING)?  1  :  0))  {	  if(childCount    ==    ((    n.getFirstChild()!=    null    &&    n.getParent().getType()    ==    Token.STRING)?    1    :    0))    {    	non-compiled	[CE]  not  a  statement	44	None	replace
654	[BUG]  [BUGGY]  if(first  ==  null  ||  first.getType()  ==  Token.STRING  ||  first.getType()  ==  Token.OBJECTLIT)  {  [CE]  not  a  statement  [FE]                      ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first  ==  null  ||  first.getType()  ==  Token.STRING  ||  first.getType()  ==  Token.OBJECTLIT)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(first  ==  null  ||  first.getType()  ==  Token.STRING  ||  first.getType()  ==  Token.OBJECTLIT)  {	  if(first.getType()    ==    Token.STRING    ||    first.getType()    ==    Token.OBJECTLIT)    {    	non-compiled	[CE]  not  a  statement	25	None	replace
655	[BUG]  [BUGGY]  Integer  n  =  first.getFirstChild().getNext();  [CE]  not  a  statement  [FE]                            ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  Integer  n  =  first.getFirstChild().getNext();  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	Integer  n  =  first.getFirstChild().getNext();	  Integer    n    =    first.getFirstChild();    	non-compiled	[CE]  not  a  statement	136	None	replace
656	[BUG]  [BUGGY]  Integer  n  =  last.getFirstChild();  [CE]  not  a  statement  [FE]                              ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  Integer  n  =  last.getFirstChild();  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	Integer  n  =  last.getFirstChild();	  Integer    n    =    first.getFirstChild();    	non-compiled	[CE]  not  a  statement	136	None	replace
657	[BUG]  [BUGGY]  if(first  ==  null)  {  ((  n.getFirstChild()!=  null  &&  n.getNext().getType()  ==  Token.STRING)||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType  [CE]  [FE]                ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first  ==  null)  {  ((  n.getFirstChild()!=  null  &&  n.getNext().getType()  ==  Token.STRING)||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(first  ==  null)  {  ((  n.getFirstChild()!=  null  &&  n.getNext().getType()  ==  Token.STRING)||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType	  if(childCount    ==    ((    n.getFirstChild()!=    null    &&    n.getNext().getType()    ==    Token.STRING)||    childCount    ==    ((    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)    	non-compiled	[CE]  	61	None	replace
658	[BUG]  [BUGGY]  if(childCount!=  ((  n.getFirstChild()!=  null  &&  n.getNext().getType()  ==  Token.STRING)||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  [CE]  [FE]                  ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount!=  ((  n.getFirstChild()!=  null  &&  n.getNext().getType()  ==  Token.STRING)||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(childCount!=  ((  n.getFirstChild()!=  null  &&  n.getNext().getType()  ==  Token.STRING)||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)	  if(childCount    ==    ((    n.getFirstChild()!=    null    &&    n.getNext().getType()    ==    Token.STRING)||    childCount    ==    ((    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)    	non-compiled	[CE]  	61	None	replace
659	[BUG]  [BUGGY]  if(first!=  null)  {  ((  n.getFirstChild()!=  null  &&  n.getNext().getType()  ==  Token.STRING)||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType  [CE]  [FE]                    ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first!=  null)  {  ((  n.getFirstChild()!=  null  &&  n.getNext().getType()  ==  Token.STRING)||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(first!=  null)  {  ((  n.getFirstChild()!=  null  &&  n.getNext().getType()  ==  Token.STRING)||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType	  if(childCount    ==    ((    n.getFirstChild()!=    null    &&    n.getNext().getType()    ==    Token.STRING)||    childCount    ==    ((    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)    	non-compiled	[CE]  	61	None	replace
660	[BUG]  [BUGGY]  if(first.getType()  ==  Token.STRING  ||  first.getFirstChild().getType()  ==  Token.OBJECTLIT)  {  [CE]  orphaned  case  [FE]                      ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first.getType()  ==  Token.STRING  ||  first.getFirstChild().getType()  ==  Token.OBJECTLIT)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(first.getType()  ==  Token.STRING  ||  first.getFirstChild().getType()  ==  Token.OBJECTLIT)  {	  if(n.getType()    ==    Token.STRING    ||    first.getNext().getType()    ==    Token.OBJECTLIT)    {    	non-compiled	[CE]  orphaned  case	13	None	replace
661	[BUG]  [BUGGY]  if(first.getType()  ==  Token.STRING  ||  first.getParent().getType()  ==  Token.OBJECTLIT)  {  [CE]  orphaned  case  [FE]                        ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first.getType()  ==  Token.STRING  ||  first.getParent().getType()  ==  Token.OBJECTLIT)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(first.getType()  ==  Token.STRING  ||  first.getParent().getType()  ==  Token.OBJECTLIT)  {	  if(n.getType()    ==    Token.STRING    ||    first.getNext().getType()    ==    Token.OBJECTLIT)    {    	non-compiled	[CE]  orphaned  case	13	None	replace
662	[BUG]  [BUGGY]  if(first!=  null  &&  first.getFirstChild()!=  null  &&  first.getLastChild().getString().equals( "prototype "))  {  [CE]  orphaned  case  [FE]                ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first!=  null  &&  first.getFirstChild()!=  null  &&  first.getLastChild().getString().equals( "prototype "))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(first!=  null  &&  first.getFirstChild()!=  null  &&  first.getLastChild().getString().equals( "prototype "))  {	  if(childCount    ==    1    &&    first.getFirstChild()!=    null    &&    first.getLastChild().getString().equals(   "prototype   "))    {    	non-compiled	[CE]  orphaned  case	157	None	replace
663	[BUG]  [BUGGY]  if(childCount  ==  1  &&  first!=  null  &&  first.getLastChild().getString().equals( "prototype "))  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  1  &&  first!=  null  &&  first.getLastChild().getString().equals( "prototype "))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(childCount  ==  1  &&  first!=  null  &&  first.getLastChild().getString().equals( "prototype "))  {	  if(childCount    ==    1    &&    first.getFirstChild()!=    null    &&    first.getLastChild().getString().equals(   "prototype   "))    {    	non-compiled	[CE]  illegal  start  of  expression	157	None	replace
664	[BUG]  [BUGGY]  if(childCount  ==  2  &&  first.getFirstChild()!=  null  &&  first.getLastChild().getString().equals( "prototype "))  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  2  &&  first.getFirstChild()!=  null  &&  first.getLastChild().getString().equals( "prototype "))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(childCount  ==  2  &&  first.getFirstChild()!=  null  &&  first.getLastChild().getString().equals( "prototype "))  {	  if(childCount    ==    1    &&    first.getFirstChild()!=    null    &&    first.getLastChild().getString().equals(   "prototype   "))    {    	non-compiled	[CE]  illegal  start  of  expression	157	None	replace
665	[BUG]  [BUGGY]  if(childCount  ==  1  &&  first.getLastChild()!=  null  &&  first.getNext().getType()  ==  Token.STRING)  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  1  &&  first.getLastChild()!=  null  &&  first.getNext().getType()  ==  Token.STRING)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(childCount  ==  1  &&  first.getLastChild()!=  null  &&  first.getNext().getType()  ==  Token.STRING)  {	  if(childCount    ==    1    &&    first.getFirstChild()!=    null    &&    first.getNext().getType()    ==    Token.STRING)    {    	non-compiled	[CE]  illegal  start  of  expression	156	None	replace
666	[BUG]  [BUGGY]  if(childCount  ==  2  &&  first.getFirstChild()!=  null  &&  first.getNext().getType()  ==  Token.STRING)  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  2  &&  first.getFirstChild()!=  null  &&  first.getNext().getType()  ==  Token.STRING)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(childCount  ==  2  &&  first.getFirstChild()!=  null  &&  first.getNext().getType()  ==  Token.STRING)  {	  if(childCount    ==    1    &&    first.getFirstChild()!=    null    &&    first.getNext().getType()    ==    Token.STRING)    {    	non-compiled	[CE]  illegal  start  of  expression	156	None	replace
667	[BUG]  [BUGGY]  if(childCount  ==  1  &&  first.getNext()!=  null  &&  first.getNext().getType()  ==  Token.STRING)  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  1  &&  first.getNext()!=  null  &&  first.getNext().getType()  ==  Token.STRING)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(childCount  ==  1  &&  first.getNext()!=  null  &&  first.getNext().getType()  ==  Token.STRING)  {	  if(childCount    ==    1    &&    first.getFirstChild()!=    null    &&    first.getNext().getType()    ==    Token.STRING)    {    	non-compiled	[CE]  illegal  start  of  expression	156	None	replace
668	[BUG]  [BUGGY]  if(childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getNext().getType()  ==  Token.FUNCTION)?  1  :  0))  {  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getNext().getType()  ==  Token.FUNCTION)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getNext().getType()  ==  Token.FUNCTION)?  1  :  0))  {	  if(childCount    ==    ((    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.FUNCTION)?    1    :    0))    {    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
669	[BUG]  [BUGGY]  if(first  ==  null  ||  first.getType()  ==  Token.STRING  ||  first.getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first  ==  null  ||  first.getType()  ==  Token.STRING  ||  first.getType()  ==  Token.FUNCTION)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(first  ==  null  ||  first.getType()  ==  Token.STRING  ||  first.getType()  ==  Token.FUNCTION)  {	  if(first.getType()    ==    Token.STRING    ||    first.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
670	[BUG]  [BUGGY]  if(NodeUtil.isStringNode(n)||  NodeUtil.isVarDeclaration(n))  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isStringNode(n)||  NodeUtil.isVarDeclaration(n))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(NodeUtil.isStringNode(n)||  NodeUtil.isVarDeclaration(n))  {	  if(NodeUtil.isExpressionNode(n)||    NodeUtil.isVarDeclaration(n))    {    	non-compiled	[CE]  illegal  start  of  expression	148	None	replace
671	[BUG]  [BUGGY]  if(NodeUtil.isName(first)||  NodeUtil.isVarDeclaration(n))  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isName(first)||  NodeUtil.isVarDeclaration(n))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(NodeUtil.isName(first)||  NodeUtil.isVarDeclaration(n))  {	  if(NodeUtil.isExpressionNode(n)||    NodeUtil.isVarDeclaration(n))    {    	non-compiled	[CE]  illegal  start  of  expression	148	None	replace
672	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(first)||  n.getType()  ==  Token.STRING)  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isExpressionNode(first)||  n.getType()  ==  Token.STRING)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(NodeUtil.isExpressionNode(first)||  n.getType()  ==  Token.STRING)  {	  if(NodeUtil.isExpressionNode(n)||    first.getType()    ==    Token.STRING)    {    	non-compiled	[CE]  	93	None	replace
673	[BUG]  [BUGGY]  if(first  ==  null  ||  first.getType()  ==  Token.STRING  ||  first.getType()  ==  Token.NAME)  {  [CE]  [FE]                          ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first  ==  null  ||  first.getType()  ==  Token.STRING  ||  first.getType()  ==  Token.NAME)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(first  ==  null  ||  first.getType()  ==  Token.STRING  ||  first.getType()  ==  Token.NAME)  {	  if(first.getType()    ==    Token.STRING    ||    first.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  	27	None	replace
674	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(first)&&  childCount  ==  ((  n.getLastChild()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isExpressionNode(first)&&  childCount  ==  ((  n.getLastChild()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(NodeUtil.isExpressionNode(first)&&  childCount  ==  ((  n.getLastChild()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {	  if(NodeUtil.isExpressionNode(first)&&    childCount    ==    ((    n.getFirstChild()!=    null    &&    n.getParent().getType()    ==    Token.STRING)?    1    :    0))    {    	non-compiled	[CE]  	79	None	replace
675	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(n)&&  childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getNext().getType()  ==  Token.STRING)?  1  :  0))  {  [CE]  [FE]                        ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isExpressionNode(n)&&  childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getNext().getType()  ==  Token.STRING)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(NodeUtil.isExpressionNode(n)&&  childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getNext().getType()  ==  Token.STRING)?  1  :  0))  {	  if(NodeUtil.isExpressionNode(first)&&    childCount    ==    ((    n.getFirstChild()!=    null    &&    n.getParent().getType()    ==    Token.STRING)?    1    :    0))    {    	non-compiled	[CE]  	79	None	replace
676	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING  &&  childCount  ==  ((  n.getString()!=  null  &&  n.getParent().getType()  ==  Token.FUNCTION)?  1  :  0))  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getType()  ==  Token.STRING  &&  childCount  ==  ((  n.getString()!=  null  &&  n.getParent().getType()  ==  Token.FUNCTION)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(n.getType()  ==  Token.STRING  &&  childCount  ==  ((  n.getString()!=  null  &&  n.getParent().getType()  ==  Token.FUNCTION)?  1  :  0))  {	  if(n.getType()    ==    Token.STRING    &&    childCount    ==    ((    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.FUNCTION)?    1    :    0))    {    	non-compiled	[CE]  	28	None	replace
677	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING  ||  childCount  ==  ((  first.getNext()!=  null  &&  first.getNext().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getType()  ==  Token.STRING  ||  childCount  ==  ((  first.getNext()!=  null  &&  first.getNext().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(n.getType()  ==  Token.STRING  ||  childCount  ==  ((  first.getNext()!=  null  &&  first.getNext().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {	  if(n.getType()    ==    Token.STRING    ||    childCount    ==    ((    n.getNext()!=    null    &&    n.getNext().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    	non-compiled	[CE]  	84	None	replace
678	[BUG]  [BUGGY]  Preconditions.checkState(childCount  ==  2  &&  NodeUtil.isExpressionNode(first));  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  Preconditions.checkState(childCount  ==  2  &&  NodeUtil.isExpressionNode(first));  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	Preconditions.checkState(childCount  ==  2  &&  NodeUtil.isExpressionNode(first));	  Preconditions.checkState(childCount    ==    2);    	non-compiled	[CE]  	121	None	replace
679	[BUG]  [BUGGY]  if(childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getLastChild().getType()  ==  Token.STRING)||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token  [CE]  [FE]            ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getLastChild().getType()  ==  Token.STRING)||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getLastChild().getType()  ==  Token.STRING)||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token	  if(childCount    ==    ((    n.getFirstChild()!=    null    &&    n.getLastChild().getType()    ==    Token.STRING)||    childCount    ==    ((    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.OBJECT    	non-compiled	[CE]  	141	None	replace
680	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(n)&&  parent  ==  ((  n.getNext()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [CE]  orphaned  default  [FE]                      ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isExpressionNode(n)&&  parent  ==  ((  n.getNext()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(NodeUtil.isExpressionNode(n)&&  parent  ==  ((  n.getNext()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {	  if(NodeUtil.isExpressionNode(n)&&    childCount    ==    ((    n.getNext()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    	non-compiled	[CE]  orphaned  default	139	None	replace
681	[BUG]  [BUGGY]  if(childCount  ==  0  ||  first.getType()  ==  Token.STRING)  {  [CE]  [FE]            ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  0  ||  first.getType()  ==  Token.STRING)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(childCount  ==  0  ||  first.getType()  ==  Token.STRING)  {	  if(childCount    ==    0)    {    	non-compiled	[CE]  	155	None	replace
682	[BUG]  [BUGGY]  if(childCount  ==  0  &&  first.getType()  ==  Token.STRING)  {  [CE]  [FE]              ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  0  &&  first.getType()  ==  Token.STRING)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(childCount  ==  0  &&  first.getType()  ==  Token.STRING)  {	  if(childCount    ==    0)    {    	non-compiled	[CE]  	155	None	replace
683	[BUG]  [BUGGY]  if(childCount  ==  0  &&  first.getType()!=  Token.STRING)  {  [CE]  [FE]                ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  0  &&  first.getType()!=  Token.STRING)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(childCount  ==  0  &&  first.getType()!=  Token.STRING)  {	  if(childCount    ==    0)    {    	non-compiled	[CE]  	155	None	replace
684	[BUG]  [BUGGY]  if(first!=  null  ||  first.getType()  ==  Token.STRING  &&  first.getFirstChild()  ==  null)  {  [CE]  orphaned  default  [FE]                  ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first!=  null  ||  first.getType()  ==  Token.STRING  &&  first.getFirstChild()  ==  null)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(first!=  null  ||  first.getType()  ==  Token.STRING  &&  first.getFirstChild()  ==  null)  {	  if(first.getType()    ==    Token.STRING    &&    first.getFirstChild()    ==    null)    {    	non-compiled	[CE]  orphaned  default	152	None	replace
685	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(n)&&  parent  ==  ((  n.getNext()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {  [CE]  [FE]                ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isExpressionNode(n)&&  parent  ==  ((  n.getNext()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(NodeUtil.isExpressionNode(n)&&  parent  ==  ((  n.getNext()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {	  if(NodeUtil.isExpressionNode(n)&&    childCount    ==    ((    n.getNext()!=    null    &&    n.getParent().getType()    ==    Token.STRING)?    1    :    0))    {    	non-compiled	[CE]  	151	None	replace
686	[BUG]  [BUGGY]  Node  first  =  context.getScope().getNext();  [CE]  [FE]                                      ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  Node  first  =  context.getScope().getNext();  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	Node  first  =  context.getScope().getNext();	  Node    first    =    first.getNext();    	non-compiled	[CE]  	59	None	replace
687	[BUG]  [BUGGY]  Node  first  =  last.getNext();  [CE]  [FE]                                        ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  Node  first  =  last.getNext();  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	Node  first  =  last.getNext();	  Node    first    =    first.getNext();    	non-compiled	[CE]  	59	None	replace
688	[BUG]  [BUGGY]  if(NodeUtil.isName(first)&&  childCount  ==  ((  n.getNext()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [CE]  orphaned  default  [FE]                              ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isName(first)&&  childCount  ==  ((  n.getNext()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(NodeUtil.isName(first)&&  childCount  ==  ((  n.getNext()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {	  if(NodeUtil.isExpressionNode(first)&&    childCount    ==    ((    n.getNext()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    	non-compiled	[CE]  orphaned  default	51	None	replace
689	[BUG]  [BUGGY]  if(first  ==  null  ||  second!=  null)  {  [CE]  orphaned  default  [FE]                    ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first  ==  null  ||  second!=  null)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(first  ==  null  ||  second!=  null)  {	  if(first    ==    null    ||    second.getType()    ==    Token.STRING)    {    	non-compiled	[CE]  orphaned  default	88	None	replace
690	[BUG]  [BUGGY]  Preconditions.checkState(childCount  ==  1  &&  NodeUtil.isExpressionNode(first));  [CE]  illegal  start  of  type  [FE]                                ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  Preconditions.checkState(childCount  ==  1  &&  NodeUtil.isExpressionNode(first));  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	Preconditions.checkState(childCount  ==  1  &&  NodeUtil.isExpressionNode(first));	  Preconditions.checkState(childCount    ==    1);    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
691	[BUG]  [BUGGY]  Preconditions.checkState(childCount  ==  1  &&  NodeUtil.isExpressionNode(n));  [CE]  illegal  start  of  type  [FE]                                  ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  Preconditions.checkState(childCount  ==  1  &&  NodeUtil.isExpressionNode(n));  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	Preconditions.checkState(childCount  ==  1  &&  NodeUtil.isExpressionNode(n));	  Preconditions.checkState(childCount    ==    1);    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
692	[BUG]  [BUGGY]  if(first.getType()  ==  Token.STRING  ||  last.getString().equals( "string "))  {  [CE]  orphaned  default  [FE]                      ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first.getType()  ==  Token.STRING  ||  last.getString().equals( "string "))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(first.getType()  ==  Token.STRING  ||  last.getString().equals( "string "))  {	  if(n.getType()    ==    Token.STRING    ||    first.getString().equals(   "string   "))    {    	non-compiled	[CE]  orphaned  default	146	None	replace
693	[BUG]  [BUGGY]  if(childCount  ==  1  &&  first!=  null  &&  first.getLastChild().getString().length()  >  0)  {  [CE]  orphaned  default  [FE]                    ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  1  &&  first!=  null  &&  first.getLastChild().getString().length()  >  0)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(childCount  ==  1  &&  first!=  null  &&  first.getLastChild().getString().length()  >  0)  {	  if(childCount    ==    1    &&    first.getFirstChild()!=    null    &&    first.getLastChild().getString().length()    >    0)    {    	non-compiled	[CE]  orphaned  default	159	None	replace
694	[BUG]  [BUGGY]  if(first!=  null  ||  first.getFirstChild()!=  null)  {  [CE]  orphaned  default  [FE]                    ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first!=  null  ||  first.getFirstChild()!=  null)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(first!=  null  ||  first.getFirstChild()!=  null)  {	  if(n.getFirstChild()!=    null)    {    	non-compiled	[CE]  orphaned  default	19	None	replace
695	[BUG]  [BUGGY]  if(NodeUtil.isObjectLitKey(first)||  NodeUtil.isExpressionNode(first))  {  [CE]  orphaned  default  [FE]                            ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isObjectLitKey(first)||  NodeUtil.isExpressionNode(first))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(NodeUtil.isObjectLitKey(first)||  NodeUtil.isExpressionNode(first))  {	  if(NodeUtil.isExpressionNode(first)||    NodeUtil.isExpressionNode(first))    {    	non-compiled	[CE]  orphaned  default	37	None	replace
696	[BUG]  [BUGGY]  if(NodeUtil.isForIn(first)||  NodeUtil.isExpressionNode(first))  {  [CE]  orphaned  default  [FE]                              ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isForIn(first)||  NodeUtil.isExpressionNode(first))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(NodeUtil.isForIn(first)||  NodeUtil.isExpressionNode(first))  {	  if(NodeUtil.isExpressionNode(first)||    NodeUtil.isExpressionNode(first))    {    	non-compiled	[CE]  orphaned  default	37	None	replace
697	[BUG]  [BUGGY]  if(NodeUtil.isStringNode(first)&&  NodeUtil.isExpressionNode(first))  {  [CE]  orphaned  default  [FE]                                ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isStringNode(first)&&  NodeUtil.isExpressionNode(first))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(NodeUtil.isStringNode(first)&&  NodeUtil.isExpressionNode(first))  {	  if(NodeUtil.isExpressionNode(first)||    NodeUtil.isExpressionNode(first))    {    	non-compiled	[CE]  orphaned  default	37	None	replace
698	[BUG]  [BUGGY]  if(childCount  ==  2  &&  first.getFirstChild()!=  null)  {  [CE]  orphaned  default  [FE]            ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  2  &&  first.getFirstChild()!=  null)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(childCount  ==  2  &&  first.getFirstChild()!=  null)  {	  if(childCount    ==    2)    {    	non-compiled	[CE]  orphaned  default	40	None	replace
699	[BUG]  [BUGGY]  if(first  ==  null  ||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {  [CE]  orphaned  default  [FE]                ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first  ==  null  ||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(first  ==  null  ||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {	  if(first.getType()    ==    Token.STRING    ||    childCount    ==    ((    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    	non-compiled	[CE]  orphaned  default	102	None	replace
700	[BUG]  [BUGGY]  if(first!=  null  ||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {  [CE]  orphaned  default  [FE]                  ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first!=  null  ||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(first!=  null  ||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {	  if(first.getType()    ==    Token.STRING    ||    childCount    ==    ((    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    	non-compiled	[CE]  orphaned  default	102	None	replace
701	[BUG]  [BUGGY]  if(childCount  ==  ((  first.getParent()!=  null  &&  first.getNext().getType()  ==  Token.STRING)?  1  :  0))  {  [CE]  orphaned  default  [FE]                  ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  ((  first.getParent()!=  null  &&  first.getNext().getType()  ==  Token.STRING)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(childCount  ==  ((  first.getParent()!=  null  &&  first.getNext().getType()  ==  Token.STRING)?  1  :  0))  {	  if(childCount    ==    ((    first.getNext()!=    null    &&    first.getNext().getType()    ==    Token.STRING)?    1    :    0))    {    	non-compiled	[CE]  orphaned  default	66	None	replace
702	[BUG]  [BUGGY]  if(childCount  ==  ((  first.getNext()!=  null)&&  first.getNext().getType()  ==  Token.STRING)?  1  :  0))  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  ((  first.getNext()!=  null)&&  first.getNext().getType()  ==  Token.STRING)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(childCount  ==  ((  first.getNext()!=  null)&&  first.getNext().getType()  ==  Token.STRING)?  1  :  0))  {	  if(childCount    ==    ((    first.getNext()!=    null    &&    first.getNext().getType()    ==    Token.STRING)?    1    :    0))    {    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
703	[BUG]  [BUGGY]  if(childCount  ==  ((  first.getNext()!=  null  &&  first.getNext().getType()  ==  Token.STRING)?  1  :  1))  {  [CE]  orphaned  default  [FE]                      ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  ((  first.getNext()!=  null  &&  first.getNext().getType()  ==  Token.STRING)?  1  :  1))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(childCount  ==  ((  first.getNext()!=  null  &&  first.getNext().getType()  ==  Token.STRING)?  1  :  1))  {	  if(childCount    ==    ((    first.getNext()!=    null    &&    first.getNext().getType()    ==    Token.STRING)?    1    :    0))    {    	non-compiled	[CE]  orphaned  default	66	None	replace
704	[BUG]  [BUGGY]  if(childCount  ==  ((  first.getNext()!=  null  &&  first.getNext().getType()  ==  Token.STRING)?  2  :  0))  {  [CE]  orphaned  default  [FE]                        ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  ((  first.getNext()!=  null  &&  first.getNext().getType()  ==  Token.STRING)?  2  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(childCount  ==  ((  first.getNext()!=  null  &&  first.getNext().getType()  ==  Token.STRING)?  2  :  0))  {	  if(childCount    ==    ((    first.getNext()!=    null    &&    first.getNext().getType()    ==    Token.STRING)?    1    :    0))    {    	non-compiled	[CE]  orphaned  default	66	None	replace
705	[BUG]  [BUGGY]  if(childCount  ==  2  &&  NodeUtil.isExpressionNode(first))  {  [CE]  orphaned  default  [FE]              ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  2  &&  NodeUtil.isExpressionNode(first))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(childCount  ==  2  &&  NodeUtil.isExpressionNode(first))  {	  if(childCount    ==    1    &&    NodeUtil.isExpressionNode(first))    {    	non-compiled	[CE]  orphaned  default	126	None	replace
706	[BUG]  [BUGGY]  if(n  ==  first)  {  [CE]  orphaned  default  [FE]                        ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n  ==  first)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(n  ==  first)  {	  if(n    ==    null)    {    	non-compiled	[CE]  orphaned  default	21	None	replace
707	[BUG]  [BUGGY]  if(first.getType()  ==  Token.STRING  &&  first.getString().equals( "string ")||  first.getString().equals( "string "))  {  [CE]  orphaned  default  [FE]                  ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first.getType()  ==  Token.STRING  &&  first.getString().equals( "string ")||  first.getString().equals( "string "))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(first.getType()  ==  Token.STRING  &&  first.getString().equals( "string ")||  first.getString().equals( "string "))  {	  if(first.getType()    ==    Token.STRING    &&    first.getString().equals(   "string   "))    {    	non-compiled	[CE]  orphaned  default	23	None	replace
708	[BUG]  [BUGGY]  if(first  ==  null  ||  first.getType()  ==  Token.STRING  &&  first.getString().equals( "string "))  {  [CE]  orphaned  default  [FE]                    ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first  ==  null  ||  first.getType()  ==  Token.STRING  &&  first.getString().equals( "string "))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(first  ==  null  ||  first.getType()  ==  Token.STRING  &&  first.getString().equals( "string "))  {	  if(first.getType()    ==    Token.STRING    &&    first.getString().equals(   "string   "))    {    	non-compiled	[CE]  orphaned  default	23	None	replace
709	[BUG]  [BUGGY]  if(first!=  null  ||  first.getType()  ==  Token.STRING  &&  first.getString().equals( "string "))  {  [CE]  orphaned  default  [FE]                      ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first!=  null  ||  first.getType()  ==  Token.STRING  &&  first.getString().equals( "string "))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(first!=  null  ||  first.getType()  ==  Token.STRING  &&  first.getString().equals( "string "))  {	  if(first.getType()    ==    Token.STRING    &&    first.getString().equals(   "string   "))    {    	non-compiled	[CE]  orphaned  default	23	None	replace
710	[BUG]  [BUGGY]  if(first!=  null  &&  first.getType()  ==  Token.STRING  &&  first.getString().equals( "string "))  {  [CE]  orphaned  default  [FE]                        ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first!=  null  &&  first.getType()  ==  Token.STRING  &&  first.getString().equals( "string "))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(first!=  null  &&  first.getType()  ==  Token.STRING  &&  first.getString().equals( "string "))  {	  if(first.getType()    ==    Token.STRING    &&    first.getString().equals(   "string   "))    {    	non-compiled	[CE]  orphaned  default	23	None	replace
711	[BUG]  [BUGGY]  if(first  ==  null  ||  last.getType()  ==  Token.STRING)  {  [CE]  orphaned  default  [FE]                ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first  ==  null  ||  last.getType()  ==  Token.STRING)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(first  ==  null  ||  last.getType()  ==  Token.STRING)  {	  if(n    ==    null    ||    first.getType()    ==    Token.STRING)    {    	non-compiled	[CE]  orphaned  default	86	None	replace
712	[BUG]  [BUGGY]  if(NodeUtil.isStringNode(n)||  first.getType()  ==  Token.STRING)  {  [CE]  orphaned  default  [FE]                      ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isStringNode(n)||  first.getType()  ==  Token.STRING)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(NodeUtil.isStringNode(n)||  first.getType()  ==  Token.STRING)  {	  if(NodeUtil.isStringNode(n))    {    	non-compiled	[CE]  orphaned  default	94	None	replace
713	[BUG]  [BUGGY]  if(NodeUtil.isStringNode(n)||  NodeUtil.isFunctionAnonymous(n))  {  [CE]  orphaned  default  [FE]                        ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isStringNode(n)||  NodeUtil.isFunctionAnonymous(n))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(NodeUtil.isStringNode(n)||  NodeUtil.isFunctionAnonymous(n))  {	  if(NodeUtil.isStringNode(n))    {    	non-compiled	[CE]  orphaned  default	94	None	replace
714	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(first)&&  childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getNext().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [CE]  orphaned  default  [FE]                            ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isExpressionNode(first)&&  childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getNext().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(NodeUtil.isExpressionNode(first)&&  childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getNext().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {	  if(NodeUtil.isExpressionNode(first)&&    childCount    ==    ((    n.getFirstChild()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    	non-compiled	[CE]  orphaned  default	50	None	replace
715	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(n)&&  childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getNext().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [CE]  orphaned  default  [FE]                              ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isExpressionNode(n)&&  childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getNext().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(NodeUtil.isExpressionNode(n)&&  childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getNext().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {	  if(NodeUtil.isExpressionNode(first)&&    childCount    ==    ((    n.getFirstChild()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    	non-compiled	[CE]  orphaned  default	50	None	replace
716	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING  &&  first!=  ((  n.getNext()!=  null  &&  n.getParent().getType()  ==  Token.FUNCTION)?  1  :  0))  {  [CE]  orphaned  default  [FE]                      ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getType()  ==  Token.STRING  &&  first!=  ((  n.getNext()!=  null  &&  n.getParent().getType()  ==  Token.FUNCTION)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(n.getType()  ==  Token.STRING  &&  first!=  ((  n.getNext()!=  null  &&  n.getParent().getType()  ==  Token.FUNCTION)?  1  :  0))  {	  if(n.getType()    ==    Token.STRING    &&    childCount    ==    ((    n.getNext()!=    null    &&    n.getParent().getType()    ==    Token.FUNCTION)?    1    :    0))    {    	non-compiled	[CE]  orphaned  default	140	None	replace
717	[BUG]  [BUGGY]  if(NodeUtil.isName(first)||  NodeUtil.isFunctionDeclaration(n))  {  [CE]  orphaned  default  [FE]                        ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isName(first)||  NodeUtil.isFunctionDeclaration(n))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(NodeUtil.isName(first)||  NodeUtil.isFunctionDeclaration(n))  {	  if(NodeUtil.isExpressionNode(n)||    NodeUtil.isFunctionDeclaration(n))    {    	non-compiled	[CE]  orphaned  default	69	None	replace
718	[BUG]  [BUGGY]  if(NodeUtil.isFunctionDeclaration(n)||  first.getType()  ==  Token.STRING)  {  [CE]  orphaned  default  [FE]                            ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isFunctionDeclaration(n)||  first.getType()  ==  Token.STRING)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(NodeUtil.isFunctionDeclaration(n)||  first.getType()  ==  Token.STRING)  {	  if(NodeUtil.isFunctionDeclaration(n))    {    	non-compiled	[CE]  orphaned  default	71	None	replace
719	[BUG]  [BUGGY]  if(NodeUtil.isFunctionDeclaration(n)||  NodeUtil.isStatementBlock(n))  {  [CE]  orphaned  default  [FE]                              ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isFunctionDeclaration(n)||  NodeUtil.isStatementBlock(n))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(NodeUtil.isFunctionDeclaration(n)||  NodeUtil.isStatementBlock(n))  {	  if(NodeUtil.isFunctionDeclaration(n))    {    	non-compiled	[CE]  orphaned  default	71	None	replace
720	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(first)&&  first.getFirstChild().getType()  ==  Token.FUNCTION)  {  [CE]  orphaned  default  [FE]                                ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isExpressionNode(first)&&  first.getFirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(NodeUtil.isExpressionNode(first)&&  first.getFirstChild().getType()  ==  Token.FUNCTION)  {	  if(NodeUtil.isExpressionNode(first)&&    first.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  orphaned  default	39	None	replace
721	[BUG]  [BUGGY]  if(childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getNext().getType()  ==  Token.STRING)||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTL  [CE]  [FE]                    ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getNext().getType()  ==  Token.STRING)||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTL  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getNext().getType()  ==  Token.STRING)||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTL	  if(childCount    ==    ((    n.getFirstChild()!=    null    &&    n.getNext().getType()    ==    Token.STRING)||    childCount    ==    ((    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0)    	non-compiled	[CE]  	63	None	replace
722	[BUG]  [BUGGY]  if(childCount  ==  2  &&  first.getFirstChild()!=  null  &&  first.getLastChild().getString().equals( "string "))  {  [CE]  orphaned  default  [FE]                  ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  2  &&  first.getFirstChild()!=  null  &&  first.getLastChild().getString().equals( "string "))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(childCount  ==  2  &&  first.getFirstChild()!=  null  &&  first.getLastChild().getString().equals( "string "))  {	  if(childCount    ==    1    &&    first.getFirstChild()!=    null    &&    first.getLastChild().getString().equals(   "string   "))    {    	non-compiled	[CE]  orphaned  default	158	None	replace
723	[BUG]  [BUGGY]  if(NodeUtil.isStringNode(n)||  NodeUtil.isVar(n))  {  [CE]  orphaned  default  [FE]                      ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isStringNode(n)||  NodeUtil.isVar(n))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(NodeUtil.isStringNode(n)||  NodeUtil.isVar(n))  {	  if(NodeUtil.isStringNode(n))    {    	non-compiled	[CE]  orphaned  default	94	None	replace
724	[BUG]  [BUGGY]  if(NodeUtil.isObjectLitKey(n)&&  NodeUtil.isFunctionDeclaration(n))  {  [CE]  [FE]                              ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isObjectLitKey(n)&&  NodeUtil.isFunctionDeclaration(n))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(NodeUtil.isObjectLitKey(n)&&  NodeUtil.isFunctionDeclaration(n))  {	  if(NodeUtil.isExpressionNode(n)&&    NodeUtil.isFunctionDeclaration(n))    {    	non-compiled	[CE]  	72	None	replace
725	[BUG]  [BUGGY]  if(childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  2  :  0))  {  [CE]  [FE]                          ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  2  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  2  :  0))  {	  if(childCount    ==    ((    n.getFirstChild()!=    null    &&    n.getParent().getType()    ==    Token.STRING)?    1    :    0))    {    	non-compiled	[CE]  	44	None	replace
726	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(n)&&  parent!=  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {  [CE]  [FE]                ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isExpressionNode(n)&&  parent!=  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(NodeUtil.isExpressionNode(n)&&  parent!=  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {	  if(NodeUtil.isExpressionNode(n)&&    childCount!=    ((    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.STRING)?    1    :    0))    {    	non-compiled	[CE]  	76	None	replace
727	[BUG]  [BUGGY]  Node  n  =  first.removeFirstChild();  [CE]  [FE]                            ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  Node  n  =  first.removeFirstChild();  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	Node  n  =  first.removeFirstChild();	  Node    n    =    first.getFirstChild();    	non-compiled	[CE]  	118	None	replace
728	[BUG]  [BUGGY]  if(childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getNext().getType()  ==  Token.STRING)?  2  :  0))  {  [CE]  [FE]                ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getNext().getType()  ==  Token.STRING)?  2  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getNext().getType()  ==  Token.STRING)?  2  :  0))  {	  if(childCount    ==    ((    n.getFirstChild()!=    null    &&    n.getNext().getType()    ==    Token.STRING)?    1    :    0))    {    	non-compiled	[CE]  	65	None	replace
729	[BUG]  [BUGGY]  if(childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getNext().getType()  ==  Token.STRING)?  3  :  0))  {  [CE]  [FE]                  ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getNext().getType()  ==  Token.STRING)?  3  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getNext().getType()  ==  Token.STRING)?  3  :  0))  {	  if(childCount    ==    ((    n.getFirstChild()!=    null    &&    n.getNext().getType()    ==    Token.STRING)?    1    :    0))    {    	non-compiled	[CE]  	65	None	replace
730	[BUG]  [BUGGY]  if(childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getNext().getType()  ==  Token.STRING)?  1):  0))  {  [CE]  :  expected  [FE]                    ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getNext().getType()  ==  Token.STRING)?  1):  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getNext().getType()  ==  Token.STRING)?  1):  0))  {	  if(childCount    ==    ((    n.getFirstChild()!=    null    &&    n.getNext().getType()    ==    Token.STRING)?    1    :    0))    {    	non-compiled	[CE]  :  expected	65	None	replace
731	[BUG]  [BUGGY]  if(first!=  null  &&  first.getString().equals( "STRING "))  {  [CE]  [FE]              ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first!=  null  &&  first.getString().equals( "STRING "))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(first!=  null  &&  first.getString().equals( "STRING "))  {	  if(first!=    null    &&    first.getType()    ==    Token.STRING)    {    	non-compiled	[CE]  	115	None	replace
732	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING  &&  childCount  ==  ((  n.getNext()  ==  null  &&  n.getParent().getType()  ==  Token.FUNCTION)?  1  :  0))  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getType()  ==  Token.STRING  &&  childCount  ==  ((  n.getNext()  ==  null  &&  n.getParent().getType()  ==  Token.FUNCTION)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(n.getType()  ==  Token.STRING  &&  childCount  ==  ((  n.getNext()  ==  null  &&  n.getParent().getType()  ==  Token.FUNCTION)?  1  :  0))  {	  if(n.getType()    ==    Token.STRING    &&    childCount    ==    ((    n.getNext()!=    null    &&    n.getParent().getType()    ==    Token.FUNCTION)?    1    :    0))    {    	non-compiled	[CE]  	140	None	replace
733	[BUG]  [BUGGY]  if(first.getType()  ==  Token.STRING  ||  childCount  ==  ((  n.getNext()!=  null  &&  n.getParent().getType()  ==  Token.FUNCTION)?  1  :  0))  {  [CE]  [FE]                        ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first.getType()  ==  Token.STRING  ||  childCount  ==  ((  n.getNext()!=  null  &&  n.getParent().getType()  ==  Token.FUNCTION)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(first.getType()  ==  Token.STRING  ||  childCount  ==  ((  n.getNext()!=  null  &&  n.getParent().getType()  ==  Token.FUNCTION)?  1  :  0))  {	  if(n.getType()    ==    Token.STRING    &&    childCount    ==    ((    n.getNext()!=    null    &&    n.getParent().getType()    ==    Token.FUNCTION)?    1    :    0))    {    	non-compiled	[CE]  	140	None	replace
734	[BUG]  [BUGGY]  if(n.getFirstChild()  ==  null  ||  first.getFirstChild().getType()  ==  Token.STRING)  {  [CE]  [FE]              ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getFirstChild()  ==  null  ||  first.getFirstChild().getType()  ==  Token.STRING)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(n.getFirstChild()  ==  null  ||  first.getFirstChild().getType()  ==  Token.STRING)  {	  if(first    ==    null    ||    first.getFirstChild().getType()    ==    Token.STRING)    {    	non-compiled	[CE]  	153	None	replace
735	[BUG]  [BUGGY]  if(first  >=  null  ||  first.getFirstChild().getType()  ==  Token.STRING)  {  [CE]  [FE]                ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first  >=  null  ||  first.getFirstChild().getType()  ==  Token.STRING)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(first  >=  null  ||  first.getFirstChild().getType()  ==  Token.STRING)  {	  if(first    ==    null    ||    first.getFirstChild().getType()    ==    Token.STRING)    {    	non-compiled	[CE]  	153	None	replace
736	[BUG]  [BUGGY]  if(childCount  ==  ((  n.getNext()!=  null  &&  n.getNext().getType()  ==  Token.STRING)?  2  :  0))  {  [CE]  [FE]                        ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  ((  n.getNext()!=  null  &&  n.getNext().getType()  ==  Token.STRING)?  2  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(childCount  ==  ((  n.getNext()!=  null  &&  n.getNext().getType()  ==  Token.STRING)?  2  :  0))  {	  if(childCount    ==    ((    n.getNext()!=    null    &&    n.getNext().getType()    ==    Token.STRING)?    1    :    0))    {    	non-compiled	[CE]  	43	None	replace
737	[BUG]  [BUGGY]  if(childCount  ==  ((  n.getNext()!=  null  &&  n.getNext().getType()  ==  Token.STRING)?  1  :  0)||(n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT))  {  [CE]  [FE]                          ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  ((  n.getNext()!=  null  &&  n.getNext().getType()  ==  Token.STRING)?  1  :  0)||(n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(childCount  ==  ((  n.getNext()!=  null  &&  n.getNext().getType()  ==  Token.STRING)?  1  :  0)||(n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT))  {	  if(childCount    ==    ((    n.getNext()!=    null    &&    n.getNext().getType()    ==    Token.STRING)?    1    :    0))    {    	non-compiled	[CE]  	43	None	replace
738	[BUG]  [BUGGY]  if(NodeUtil.isAssignmentOp(n))  {  [CE]  [FE]                            ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isAssignmentOp(n))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(NodeUtil.isAssignmentOp(n))  {	  if(NodeUtil.isFunctionDeclaration(n))    {    	non-compiled	[CE]  	71	None	replace
739	[BUG]  [BUGGY]  if(NodeUtil.isFunctionDeclaration(n)&&  NodeUtil.isStatementBlock(n))  {  [CE]  [FE]                              ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isFunctionDeclaration(n)&&  NodeUtil.isStatementBlock(n))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(NodeUtil.isFunctionDeclaration(n)&&  NodeUtil.isStatementBlock(n))  {	  if(NodeUtil.isFunctionDeclaration(n))    {    	non-compiled	[CE]  	71	None	replace
740	[BUG]  [BUGGY]  if(childCount  ==  1  &&  first.getType()  ==  Token.NAME)  {  [CE]  [FE]                  ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  1  &&  first.getType()  ==  Token.NAME)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(childCount  ==  1  &&  first.getType()  ==  Token.NAME)  {	  if(childCount    ==    1    &&    first.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	128	None	replace
741	[BUG]  [BUGGY]  if(NodeUtil.isStringBlock(first))  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isStringBlock(first))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(NodeUtil.isStringBlock(first))  {	  if(NodeUtil.isObjectLitKey(first))    {    	non-compiled	[CE]  	160	None	replace
742	[BUG]  [BUGGY]  if(childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getLastChild().getType()  ==  Token.STRING)||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().get  [CE]  [FE]            ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getLastChild().getType()  ==  Token.STRING)||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().get  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getLastChild().getType()  ==  Token.STRING)||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().get	  if(childCount    ==    ((    n.getFirstChild()!=    null    &&    n.getLastChild().getType()    ==    Token.STRING)||    childCount    ==    ((    n.getParent()!=    null    &&    n.getParent().getType    	non-compiled	[CE]  	101	None	replace
743	[BUG]  [BUGGY]  if(childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getLastChild().getType()  ==  Token.STRING)||  childCount  ==  ((  n.getParent()!=  null  &&  n.  [CE]  [FE]              ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getLastChild().getType()  ==  Token.STRING)||  childCount  ==  ((  n.getParent()!=  null  &&  n.  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getLastChild().getType()  ==  Token.STRING)||  childCount  ==  ((  n.getParent()!=  null  &&  n.	  if(childCount    ==    ((    n.getFirstChild()!=    null    &&    n.getLastChild().getType()    ==    Token.STRING)||    childCount    ==    ((    n.getParent()!=    null    &&    n.getParent().getType    	non-compiled	[CE]  	101	None	replace
744	[BUG]  [BUGGY]  if(first.getType()!=  Token.STRING  ||  first.getType()  ==  Token.FUNCTION)  {  [CE]  [FE]                        ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first.getType()!=  Token.STRING  ||  first.getType()  ==  Token.FUNCTION)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(first.getType()!=  Token.STRING  ||  first.getType()  ==  Token.FUNCTION)  {	  if(first.getType()    ==    Token.STRING    ||    first.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	26	None	replace
745	[BUG]  [BUGGY]  if(first!=  null  &&  first.getFirstChild()!=  null)  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first!=  null  &&  first.getFirstChild()!=  null)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(first!=  null  &&  first.getFirstChild()!=  null)  {	  if(first!=    null    &&    first.getNext()!=    null)    {    	non-compiled	[CE]  	134	None	replace
746	[BUG]  [BUGGY]  if(first.getType()!=  Token.STRING  ||  first.getType()  ==  Token.OBJECTLIT)  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first.getType()!=  Token.STRING  ||  first.getType()  ==  Token.OBJECTLIT)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(first.getType()!=  Token.STRING  ||  first.getType()  ==  Token.OBJECTLIT)  {	  if(first.getType()    ==    Token.STRING    ||    first.getType()    ==    Token.OBJECTLIT)    {    	non-compiled	[CE]  	25	None	replace
747	[BUG]  [BUGGY]  Integer  n  =  context.getNumberOfLinks();  [CE]  [FE]                                    ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  Integer  n  =  context.getNumberOfLinks();  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	Integer  n  =  context.getNumberOfLinks();	  Integer    n    =    first.getNext();    	non-compiled	[CE]  	58	None	replace
748	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(first)&&  n.getFirstChild()  ==  null)  {  [CE]  [FE]                        ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isExpressionNode(first)&&  n.getFirstChild()  ==  null)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(NodeUtil.isExpressionNode(first)&&  n.getFirstChild()  ==  null)  {	  if(NodeUtil.isExpressionNode(n)&&    first.getFirstChild()!=    null)    {    	non-compiled	[CE]  	150	None	replace
749	[BUG]  [BUGGY]  if(NodeUtil.isObjectLitKey(n)&&  first.getFirstChild()!=  null)  {  [CE]  [FE]                          ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isObjectLitKey(n)&&  first.getFirstChild()!=  null)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(NodeUtil.isObjectLitKey(n)&&  first.getFirstChild()!=  null)  {	  if(NodeUtil.isExpressionNode(n)&&    first.getFirstChild()!=    null)    {    	non-compiled	[CE]  	150	None	replace
750	[BUG]  [BUGGY]  if(n  ==  first  ||  first.getType()!=  Token.STRING)  {  [CE]  [FE]                  ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n  ==  first  ||  first.getType()!=  Token.STRING)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(n  ==  first  ||  first.getType()!=  Token.STRING)  {	  if(first    ==    null    ||    first.getType()!=    Token.STRING)    {    	non-compiled	[CE]  	87	None	replace
751	[BUG]  [BUGGY]  if(NodeUtil.isObjectLitKey(first)&&  NodeUtil.isFunctionDeclaration(first))  {  [CE]  [FE]                        ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isObjectLitKey(first)&&  NodeUtil.isFunctionDeclaration(first))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(NodeUtil.isObjectLitKey(first)&&  NodeUtil.isFunctionDeclaration(first))  {	  if(NodeUtil.isExpressionNode(first)&&    NodeUtil.isFunctionDeclaration(first))    {    	non-compiled	[CE]  	123	None	replace
752	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(first)&&  NodeUtil.isAssignmentOp(first))  {  [CE]  [FE]                          ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isExpressionNode(first)&&  NodeUtil.isAssignmentOp(first))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(NodeUtil.isExpressionNode(first)&&  NodeUtil.isAssignmentOp(first))  {	  if(NodeUtil.isExpressionNode(first)&&    NodeUtil.isFunctionDeclaration(first))    {    	non-compiled	[CE]  	123	None	replace
753	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(first)&&  NodeUtil.isLhs(first))  {  [CE]  [FE]                            ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isExpressionNode(first)&&  NodeUtil.isLhs(first))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(NodeUtil.isExpressionNode(first)&&  NodeUtil.isLhs(first))  {	  if(NodeUtil.isExpressionNode(first)&&    NodeUtil.isFunctionDeclaration(first))    {    	non-compiled	[CE]  	123	None	replace
754	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING  ||  first!=  null  ||  first.getType()  ==  Token.STRING)  {  [CE]  [FE]                ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getType()  ==  Token.STRING  ||  first!=  null  ||  first.getType()  ==  Token.STRING)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(n.getType()  ==  Token.STRING  ||  first!=  null  ||  first.getType()  ==  Token.STRING)  {	  if(first    >=    null    ||    first.getType()    ==    Token.STRING)    {    	non-compiled	[CE]  	154	None	replace
755	[BUG]  [BUGGY]  if(First.isExpressionNode(first)||  first.getType()  ==  Token.STRING)  {  [CE]  [FE]                  ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(First.isExpressionNode(first)||  first.getType()  ==  Token.STRING)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(First.isExpressionNode(first)||  first.getType()  ==  Token.STRING)  {	  if(first    >=    null    ||    first.getType()    ==    Token.STRING)    {    	non-compiled	[CE]  	154	None	replace
756	[BUG]  [BUGGY]  if(First.isExpressionNode(first)&&  first.getType()  ==  Token.STRING)  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(First.isExpressionNode(first)&&  first.getType()  ==  Token.STRING)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(First.isExpressionNode(first)&&  first.getType()  ==  Token.STRING)  {	  if(first    >=    null    ||    first.getType()    ==    Token.STRING)    {    	non-compiled	[CE]  	154	None	replace
757	[BUG]  [BUGGY]  if(NodeUtil.isObjectLitKey(n)||  NodeUtil.isVarDeclaration(n))  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isObjectLitKey(n)||  NodeUtil.isVarDeclaration(n))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(NodeUtil.isObjectLitKey(n)||  NodeUtil.isVarDeclaration(n))  {	  if(NodeUtil.isExpressionNode(n)||    NodeUtil.isVarDeclaration(n))    {    	non-compiled	[CE]  	148	None	replace
758	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING  &&  n.getNext()!=  null)  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getType()  ==  Token.STRING  &&  n.getNext()!=  null)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(n.getType()  ==  Token.STRING  &&  n.getNext()!=  null)  {	  if(first.getType()    ==    Token.STRING    &&    first.getNext()!=    null)    {    	non-compiled	[CE]  	92	None	replace
759	[BUG]  [BUGGY]  if(first.getType()  ==  Token.STRING  &&  first.getString()!=  null)  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first.getType()  ==  Token.STRING  &&  first.getString()!=  null)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(first.getType()  ==  Token.STRING  &&  first.getString()!=  null)  {	  if(first.getType()    ==    Token.STRING    &&    first.getNext()!=    null)    {    	non-compiled	[CE]  	92	None	replace
760	[BUG]  [BUGGY]  if(childCount  ==  ((  n.getString()  ==  null  &&  n.getNext().getType()  ==  Token.STRING)?  1  :  0))  {  [CE]  [FE]                        ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  ((  n.getString()  ==  null  &&  n.getNext().getType()  ==  Token.STRING)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(childCount  ==  ((  n.getString()  ==  null  &&  n.getNext().getType()  ==  Token.STRING)?  1  :  0))  {	  if(childCount    ==    ((    n.getString()!=    null    &&    n.getParent().getType()    ==    Token.STRING)?    1    :    0))    {    	non-compiled	[CE]  	98	None	replace
761	[BUG]  [BUGGY]  if(childCount  ==  ((  n.getString()  ==  null  ||  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {  [CE]  [FE]                          ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  ((  n.getString()  ==  null  ||  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(childCount  ==  ((  n.getString()  ==  null  ||  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {	  if(childCount    ==    ((    n.getString()!=    null    &&    n.getParent().getType()    ==    Token.STRING)?    1    :    0))    {    	non-compiled	[CE]  	98	None	replace
762	[BUG]  [BUGGY]  if(childCount  ==  ((  first.getString()!=  null  &&  first.getNext().getType()  ==  Token.STRING)?  1  :  0))  {  [CE]  [FE]                            ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  ((  first.getString()!=  null  &&  first.getNext().getType()  ==  Token.STRING)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(childCount  ==  ((  first.getString()!=  null  &&  first.getNext().getType()  ==  Token.STRING)?  1  :  0))  {	  if(childCount    ==    ((    n.getString()!=    null    &&    n.getParent().getType()    ==    Token.STRING)?    1    :    0))    {    	non-compiled	[CE]  	98	None	replace
763	[BUG]  [BUGGY]  if(NodeUtil.isAssignmentOp(n)&&  first.getType()  ==  Token.STRING)  {  [CE]  [FE]                        ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isAssignmentOp(n)&&  first.getType()  ==  Token.STRING)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(NodeUtil.isAssignmentOp(n)&&  first.getType()  ==  Token.STRING)  {	  if(NodeUtil.isExpressionNode(n)&&    first.getType()    ==    Token.STRING)    {    	non-compiled	[CE]  	95	None	replace
764	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(n,  first)&&  childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [CE]  [FE]                            ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isExpressionNode(n,  first)&&  childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(NodeUtil.isExpressionNode(n,  first)&&  childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {	  if(NodeUtil.isExpressionNode(first)&&    childCount    ==    ((    n.getFirstChild()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    	non-compiled	[CE]  	50	None	replace
765	[BUG]  [BUGGY]  if(NodeUtil.isAssignmentOp(first)&&  childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [CE]  [FE]                              ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isAssignmentOp(first)&&  childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(NodeUtil.isAssignmentOp(first)&&  childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {	  if(NodeUtil.isExpressionNode(first)&&    childCount    ==    ((    n.getFirstChild()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    	non-compiled	[CE]  	50	None	replace
766	[BUG]  [BUGGY]  Node  n  =  first!=  null?  context.getCurrentNode()  :  first.getNext();  [CE]  [FE]                          ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  Node  n  =  first!=  null?  context.getCurrentNode()  :  first.getNext();  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	Node  n  =  first!=  null?  context.getCurrentNode()  :  first.getNext();	  Node    n    =    first.getNext();    	non-compiled	[CE]  	53	None	replace
767	[BUG]  [BUGGY]  Node  n  =  first!=  null?  context.getScope().getNumberOfLinks()  :  first.getNext();  [CE]  [FE]                            ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  Node  n  =  first!=  null?  context.getScope().getNumberOfLinks()  :  first.getNext();  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	Node  n  =  first!=  null?  context.getScope().getNumberOfLinks()  :  first.getNext();	  Node    n    =    first.getNext();    	non-compiled	[CE]  	53	None	replace
768	[BUG]  [BUGGY]  Node  n  =  first!=  null?  context.getScope().getNumberOfSymbols()  :  first.getNext();  [CE]  [FE]                              ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  Node  n  =  first!=  null?  context.getScope().getNumberOfSymbols()  :  first.getNext();  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	Node  n  =  first!=  null?  context.getScope().getNumberOfSymbols()  :  first.getNext();	  Node    n    =    first.getNext();    	non-compiled	[CE]  	53	None	replace
769	[BUG]  [BUGGY]  Node  n  =  first!=  null?  context.getScope().getRootNode()  :  first.getNext();  [CE]  [FE]                                ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  Node  n  =  first!=  null?  context.getScope().getRootNode()  :  first.getNext();  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	Node  n  =  first!=  null?  context.getScope().getRootNode()  :  first.getNext();	  Node    n    =    first.getNext();    	non-compiled	[CE]  	53	None	replace
770	[BUG]  [BUGGY]  if(NodeUtil.isObjectLitKey(n)||  NodeUtil.isFunctionDeclaration(n))  {  [CE]  [FE]                        ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isObjectLitKey(n)||  NodeUtil.isFunctionDeclaration(n))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(NodeUtil.isObjectLitKey(n)||  NodeUtil.isFunctionDeclaration(n))  {	  if(NodeUtil.isExpressionNode(n)||    NodeUtil.isFunctionDeclaration(n))    {    	non-compiled	[CE]  	69	None	replace
771	[BUG]  [BUGGY]  if(first.getType()  ==  Token.STRING  ||  n.getParent()!=  null)  {  [CE]  [FE]                ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first.getType()  ==  Token.STRING  ||  n.getParent()!=  null)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(first.getType()  ==  Token.STRING  ||  n.getParent()!=  null)  {	  if(n.getType()    ==    Token.STRING    ||    first!=    null)    {    	non-compiled	[CE]  	132	None	replace
772	[BUG]  [BUGGY]  if(childCount  ==  1  &&  first.getFirstChild().equals( "string "))  {  [CE]  [FE]                ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  1  &&  first.getFirstChild().equals( "string "))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(childCount  ==  1  &&  first.getFirstChild().equals( "string "))  {	  if(childCount    ==    1    &&    first.getString().equals(   "string   "))    {    	non-compiled	[CE]  	127	None	replace
773	[BUG]  [BUGGY]  if(NodeUtil.isObjectLitKey(n)||  first.getNext()!=  null)  {  [CE]  [FE]                          ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isObjectLitKey(n)||  first.getNext()!=  null)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(NodeUtil.isObjectLitKey(n)||  first.getNext()!=  null)  {	  if(NodeUtil.isExpressionNode(n)||    first.getNext()!=    null)    {    	non-compiled	[CE]  	96	None	replace
774	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING  ||  childCount  >=  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getType()  ==  Token.STRING  ||  childCount  >=  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(n.getType()  ==  Token.STRING  ||  childCount  >=  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {	  if(n.getType()    ==    Token.STRING    &&    childCount    >=    ((    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    	non-compiled	[CE]  	75	None	replace
775	[BUG]  [BUGGY]  if(first!=  null  &&  first.getType()  ==  Token.STRING  &&  childCount!=  ((  n.getFirstChild()!=  null  &&  first.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [CE]  [FE]              ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first!=  null  &&  first.getType()  ==  Token.STRING  &&  childCount!=  ((  n.getFirstChild()!=  null  &&  first.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(first!=  null  &&  first.getType()  ==  Token.STRING  &&  childCount!=  ((  n.getFirstChild()!=  null  &&  first.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {	  if(n.getType()    ==    Token.STRING    &&    childCount!=    ((    n.getFirstChild()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    	non-compiled	[CE]  	2	None	replace
776	[BUG]  [BUGGY]  if(childCount  ==  ((  parent.getNext()!=  null  &&  parent.getParent().getType()  ==  Token.STRING)?  1  :  0))  {  [CE]  [FE]                            ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  ((  parent.getNext()!=  null  &&  parent.getParent().getType()  ==  Token.STRING)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(childCount  ==  ((  parent.getNext()!=  null  &&  parent.getParent().getType()  ==  Token.STRING)?  1  :  0))  {	  if(childCount    ==    ((    n.getNext()!=    null    &&    n.getParent().getType()    ==    Token.STRING)?    1    :    0))    {    	non-compiled	[CE]  	45	None	replace
777	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING  ||  childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getNext().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getType()  ==  Token.STRING  ||  childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getNext().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(n.getType()  ==  Token.STRING  ||  childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getNext().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {	  if(n.getType()    ==    Token.STRING    ||    childCount    ==    ((    n.getNext()!=    null    &&    n.getNext().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    	non-compiled	[CE]  	84	None	replace
778	[BUG]  [BUGGY]  if(childCount  ==  2  &&  first.getFirstChild()!=  null  &&  first.getLastChild().getString().length()  >  0)  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  2  &&  first.getFirstChild()!=  null  &&  first.getLastChild().getString().length()  >  0)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(childCount  ==  2  &&  first.getFirstChild()!=  null  &&  first.getLastChild().getString().length()  >  0)  {	  if(childCount    ==    1    &&    first.getFirstChild()!=    null    &&    first.getLastChild().getString().length()    >    0)    {    	non-compiled	[CE]  	159	None	replace
779	[BUG]  [BUGGY]  if(n.getFirstChild()!=  null  &&  n.getLastChild().getString().equals( "string "))  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getFirstChild()!=  null  &&  n.getLastChild().getString().equals( "string "))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(n.getFirstChild()!=  null  &&  n.getLastChild().getString().equals( "string "))  {	  if(n.getFirstChild()!=    null)    {    	non-compiled	[CE]  	19	None	replace
780	[BUG]  [BUGGY]  if(n.getFirstChild()!=  null  &&  n.getFirstChild().getType()  ==  Token.STRING)  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getFirstChild()!=  null  &&  n.getFirstChild().getType()  ==  Token.STRING)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(n.getFirstChild()!=  null  &&  n.getFirstChild().getType()  ==  Token.STRING)  {	  if(n.getFirstChild()!=    null)    {    	non-compiled	[CE]  	19	None	replace
781	[BUG]  [BUGGY]  if(n.getFirstChild()!=  null  &&  n.getLastChild().getString().endsWith( "__ "))  {  [CE]  [FE]                        ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getFirstChild()!=  null  &&  n.getLastChild().getString().endsWith( "__ "))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(n.getFirstChild()!=  null  &&  n.getLastChild().getString().endsWith( "__ "))  {	  if(n.getFirstChild()!=    null)    {    	non-compiled	[CE]  	19	None	replace
782	[BUG]  [BUGGY]  if(first.getType()  ==  Token.STRING  ||  childCount  ==  ((  n.getFirstChild()!=  null  &&  first.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [CE]  [FE]                  ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first.getType()  ==  Token.STRING  ||  childCount  ==  ((  n.getFirstChild()!=  null  &&  first.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(first.getType()  ==  Token.STRING  ||  childCount  ==  ((  n.getFirstChild()!=  null  &&  first.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {	  if(n.getType()    ==    Token.STRING    ||    childCount    ==    ((    n.getFirstChild()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    	non-compiled	[CE]  	83	None	replace
783	[BUG]  [BUGGY]  if(first.getType()  ==  Token.STRING  &&  first.getString().equals( ".string "))  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first.getType()  ==  Token.STRING  &&  first.getString().equals( ".string "))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(first.getType()  ==  Token.STRING  &&  first.getString().equals( ".string "))  {	  if(n.getType()    ==    Token.STRING    &&    first.getString().equals(   "string   "))    {    	non-compiled	[CE]  	145	None	replace
784	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(first)&&  childCount  ==  ((  n.getString()  ==  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isExpressionNode(first)&&  childCount  ==  ((  n.getString()  ==  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(NodeUtil.isExpressionNode(first)&&  childCount  ==  ((  n.getString()  ==  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {	  if(NodeUtil.isExpressionNode(first)&&    childCount    ==    ((    n.getString()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    	non-compiled	[CE]  	110	None	replace
785	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(n,  first)&&  childCount  ==  ((  n.getString()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [CE]  [FE]                        ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isExpressionNode(n,  first)&&  childCount  ==  ((  n.getString()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(NodeUtil.isExpressionNode(n,  first)&&  childCount  ==  ((  n.getString()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {	  if(NodeUtil.isExpressionNode(first)&&    childCount    ==    ((    n.getString()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    	non-compiled	[CE]  	110	None	replace
786	[BUG]  [BUGGY]  if(NodeUtil.isAssignmentOp(first)&&  childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isAssignmentOp(first)&&  childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(NodeUtil.isAssignmentOp(first)&&  childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {	  if(NodeUtil.isExpressionNode(first)&&    childCount    ==    ((    n.getFirstChild()!=    null    &&    n.getParent().getType()    ==    Token.STRING)?    1    :    0))    {    	non-compiled	[CE]  	79	None	replace
787	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(n,  first)&&  childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {  [CE]  [FE]                        ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isExpressionNode(n,  first)&&  childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(NodeUtil.isExpressionNode(n,  first)&&  childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {	  if(NodeUtil.isExpressionNode(first)&&    childCount    ==    ((    n.getFirstChild()!=    null    &&    n.getParent().getType()    ==    Token.STRING)?    1    :    0))    {    	non-compiled	[CE]  	79	None	replace
788	[BUG]  [BUGGY]  if(first.getType()  ==  Token.STRING  ||  first.getFirstChild().getType()  ==  Token.NAME)  {  [CE]  [FE]                          ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first.getType()  ==  Token.STRING  ||  first.getFirstChild().getType()  ==  Token.NAME)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(first.getType()  ==  Token.STRING  ||  first.getFirstChild().getType()  ==  Token.NAME)  {	  if(first.getType()    ==    Token.STRING    ||    first.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  	27	None	replace
789	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(n)&&  childCount  ==  ((  n.getLastChild()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [CE]  [FE]                          ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isExpressionNode(n)&&  childCount  ==  ((  n.getLastChild()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(NodeUtil.isExpressionNode(n)&&  childCount  ==  ((  n.getLastChild()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {	  if(NodeUtil.isExpressionNode(n)&&    childCount    ==    ((    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    	non-compiled	[CE]  	49	None	replace
790	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(n)&&  parent  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [CE]  [FE]                            ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isExpressionNode(n)&&  parent  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(NodeUtil.isExpressionNode(n)&&  parent  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {	  if(NodeUtil.isExpressionNode(n)&&    childCount    ==    ((    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    	non-compiled	[CE]  	49	None	replace
791	[BUG]  [BUGGY]  if(n.getFirstChild()  ==  null  ||  first.getLastChild().getString().equals( "string "))  {  [CE]  [FE]                  ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getFirstChild()  ==  null  ||  first.getLastChild().getString().equals( "string "))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(n.getFirstChild()  ==  null  ||  first.getLastChild().getString().equals( "string "))  {	  if(n.getFirstChild()    ==    null)    {    	non-compiled	[CE]  	133	None	replace
792	[BUG]  [BUGGY]  if(first  ==  null  ||  first.getFirstChild()  ==  null)  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first  ==  null  ||  first.getFirstChild()  ==  null)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(first  ==  null  ||  first.getFirstChild()  ==  null)  {	  if(n.getFirstChild()    ==    null)    {    	non-compiled	[CE]  	133	None	replace
793	[BUG]  [BUGGY]  if(first.getType()  ==  Token.STRING  ||  childCount!=  ((  n.getNext()!=  null  &&  n.getNext().getType()  ==  Token.FUNCTION)?  1  :  0))  {  [CE]  [FE]                          ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first.getType()  ==  Token.STRING  ||  childCount!=  ((  n.getNext()!=  null  &&  n.getNext().getType()  ==  Token.FUNCTION)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(first.getType()  ==  Token.STRING  ||  childCount!=  ((  n.getNext()!=  null  &&  n.getNext().getType()  ==  Token.FUNCTION)?  1  :  0))  {	  if(n.getType()    ==    Token.STRING    &&    childCount!=    ((    n.getNext()!=    null    &&    n.getNext().getType()    ==    Token.FUNCTION)?    1    :    0))    {    	non-compiled	[CE]  	30	None	replace
794	[BUG]  [BUGGY]  if(childCount  ==  ((  n.getType()  ==  Token.STRING)&&  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  ((  n.getType()  ==  Token.STRING)&&  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(childCount  ==  ((  n.getType()  ==  Token.STRING)&&  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {	  if(childCount    ==    ((    n.getType()    ==    Token.STRING)&&    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.STRING)?    1    :    0))    {    	non-compiled	[CE]  illegal  start  of  expression	109	None	replace
795	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING  ||  first  ==  null  ||  first.getType()  ==  Token.STRING)  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getType()  ==  Token.STRING  ||  first  ==  null  ||  first.getType()  ==  Token.STRING)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(n.getType()  ==  Token.STRING  ||  first  ==  null  ||  first.getType()  ==  Token.STRING)  {	  if(first    ==    null    &&    first.getType()    ==    Token.STRING)    {    	non-compiled	[CE]  	89	None	replace
796	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(n)&&  childCount  ==  ((  n.getNext()  ==  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isExpressionNode(n)&&  childCount  ==  ((  n.getNext()  ==  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(NodeUtil.isExpressionNode(n)&&  childCount  ==  ((  n.getNext()  ==  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {	  if(NodeUtil.isExpressionNode(n)&&    childCount    ==    ((    n.getNext()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    	non-compiled	[CE]  	139	None	replace
797	[BUG]  [BUGGY]  if(NodeUtil.isName(first)||  NodeUtil.isExpressionNode(n)||  first.getType()  ==  Token.STRING)  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isName(first)||  NodeUtil.isExpressionNode(n)||  first.getType()  ==  Token.STRING)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(NodeUtil.isName(first)||  NodeUtil.isExpressionNode(n)||  first.getType()  ==  Token.STRING)  {	  if(NodeUtil.isExpressionNode(n)||    first.getType()    ==    Token.STRING)    {    	non-compiled	[CE]  	93	None	replace
798	[BUG]  [BUGGY]  if(NodeUtil.isAssignmentOp(n)||  first.getType()  ==  Token.STRING)  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isAssignmentOp(n)||  first.getType()  ==  Token.STRING)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(NodeUtil.isAssignmentOp(n)||  first.getType()  ==  Token.STRING)  {	  if(NodeUtil.isExpressionNode(n)||    first.getType()    ==    Token.STRING)    {    	non-compiled	[CE]  	93	None	replace
799	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(first)||  NodeUtil.isExpressionNode(n.getFirstChild()))  {  [CE]  [FE]                        ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isExpressionNode(first)||  NodeUtil.isExpressionNode(n.getFirstChild()))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(NodeUtil.isExpressionNode(first)||  NodeUtil.isExpressionNode(n.getFirstChild()))  {	  if(NodeUtil.isExpressionNode(n)||    first.getType()    ==    Token.STRING)    {    	non-compiled	[CE]  	93	None	replace
800	[BUG]  [BUGGY]  if(NodeUtil.isAssignmentOp(first)||  NodeUtil.isExpressionNode(first))  {  [CE]  [FE]                            ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isAssignmentOp(first)||  NodeUtil.isExpressionNode(first))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(NodeUtil.isAssignmentOp(first)||  NodeUtil.isExpressionNode(first))  {	  if(NodeUtil.isExpressionNode(first)||    NodeUtil.isExpressionNode(first))    {    	non-compiled	[CE]  	37	None	replace
801	[BUG]  [BUGGY]  if(n.getString().equals( "string "))  {  [CE]  [FE]              ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getString().equals( "string "))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(n.getString().equals( "string "))  {	  if(n.getType()    ==    Token.OBJECTLIT)    {    	non-compiled	[CE]  	41	None	replace
802	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING  &&  n.getFirstChild()  ==  null)  {  [CE]  [FE]                  ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getType()  ==  Token.STRING  &&  n.getFirstChild()  ==  null)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(n.getType()  ==  Token.STRING  &&  n.getFirstChild()  ==  null)  {	  if(first.getType()    ==    Token.STRING    &&    first.getFirstChild()    ==    null)    {    	non-compiled	[CE]  	152	None	replace
803	[BUG]  [BUGGY]  if(first!=  null  &&  first.getType()  ==  Token.STRING  &&  first.getFirstChild()  ==  null)  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first!=  null  &&  first.getType()  ==  Token.STRING  &&  first.getFirstChild()  ==  null)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(first!=  null  &&  first.getType()  ==  Token.STRING  &&  first.getFirstChild()  ==  null)  {	  if(first.getType()    ==    Token.STRING    &&    first.getFirstChild()    ==    null)    {    	non-compiled	[CE]  	152	None	replace
804	[BUG]  [BUGGY]  if(NodeUtil.isVarDeclaration(n)&&  NodeUtil.isExpressionNode(n))  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isVarDeclaration(n)&&  NodeUtil.isExpressionNode(n))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(NodeUtil.isVarDeclaration(n)&&  NodeUtil.isExpressionNode(n))  {	  if(NodeUtil.isExpressionNode(n)&&    NodeUtil.isExpressionNode(n))    {    	non-compiled	[CE]  	149	None	replace
805	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(n)&&  NodeUtil.isLhs(n,  context))  {  [CE]  [FE]                        ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isExpressionNode(n)&&  NodeUtil.isLhs(n,  context))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(NodeUtil.isExpressionNode(n)&&  NodeUtil.isLhs(n,  context))  {	  if(NodeUtil.isExpressionNode(n)&&    NodeUtil.isExpressionNode(n))    {    	non-compiled	[CE]  	149	None	replace
806	[BUG]  [BUGGY]  if(first  ==  null  ||  first.getType()  ==  Token.STRING  &&  childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.FUNCTION)?  1  :  0))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first  ==  null  ||  first.getType()  ==  Token.STRING  &&  childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.FUNCTION)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(first  ==  null  ||  first.getType()  ==  Token.STRING  &&  childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.FUNCTION)?  1  :  0))  {	  if(n.getType()    ==    Token.STRING    &&    childCount    ==    ((    n.getFirstChild()!=    null    &&    n.getParent().getType()    ==    Token.FUNCTION)?    1    :    0))    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	99	None	replace
807	[BUG]  [BUGGY]  if(next  ==  null  ||  first.getType()  ==  Token.STRING)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(next  ==  null  ||  first.getType()  ==  Token.STRING)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(next  ==  null  ||  first.getType()  ==  Token.STRING)  {	  if(n    ==    null    ||    first.getType()    ==    Token.STRING)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	86	None	replace
808	[BUG]  [BUGGY]  Preconditions.checkState(childCount  ==  2  &&  first.getString().equals( "string "));  [CE]  invalid  method  declaration;  return  type  required  [FE]                                  ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  Preconditions.checkState(childCount  ==  2  &&  first.getString().equals( "string "));  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	Preconditions.checkState(childCount  ==  2  &&  first.getString().equals( "string "));	  Preconditions.checkState(childCount    ==    2);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	121	None	replace
809	[BUG]  [BUGGY]  if(childCount  ==  ((  first!=  null  &&  first.getNext().getType()  ==  Token.STRING)?  1  :  0))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  ((  first!=  null  &&  first.getNext().getType()  ==  Token.STRING)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(childCount  ==  ((  first!=  null  &&  first.getNext().getType()  ==  Token.STRING)?  1  :  0))  {	  if(childCount    ==    ((    first.getNext()!=    null    &&    first.getNext().getType()    ==    Token.STRING)?    1    :    0))    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	66	None	replace
810	[BUG]  [BUGGY]  if(childCount  ==  ((  first.getNext()!=  null  &&  first.getNext().getType()  ==  Token.STRING)?  1  :  0)||(n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  ((  first.getNext()!=  null  &&  first.getNext().getType()  ==  Token.STRING)?  1  :  0)||(n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(childCount  ==  ((  first.getNext()!=  null  &&  first.getNext().getType()  ==  Token.STRING)?  1  :  0)||(n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT))  {	  if(childCount    ==    ((    first.getNext()!=    null    &&    first.getNext().getType()    ==    Token.STRING)?    1    :    0))    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	66	None	replace
811	[BUG]  [BUGGY]  if(childCount  ==  ((  n.getType()  ==  Token.NAME)&&  n.getParent().getType()  ==  Token.FUNCTION)?  1  :  0))  {  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  ((  n.getType()  ==  Token.NAME)&&  n.getParent().getType()  ==  Token.FUNCTION)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(childCount  ==  ((  n.getType()  ==  Token.NAME)&&  n.getParent().getType()  ==  Token.FUNCTION)?  1  :  0))  {	  if(childCount    ==    ((    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.FUNCTION)?    1    :    0))    {    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
812	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(first)&&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isExpressionNode(first)&&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(NodeUtil.isExpressionNode(first)&&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {	  if(NodeUtil.isExpressionNode(n)&&    first.getNext().getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
813	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(n)&&  childCount  ==  ((  n.getLastChild()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isExpressionNode(n)&&  childCount  ==  ((  n.getLastChild()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(NodeUtil.isExpressionNode(n)&&  childCount  ==  ((  n.getLastChild()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {	  if(NodeUtil.isExpressionNode(n)&&    childCount    ==    ((    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.STRING)?    1    :    0))    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	78	None	replace
814	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(n)&&  parent  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isExpressionNode(n)&&  parent  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(NodeUtil.isExpressionNode(n)&&  parent  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {	  if(NodeUtil.isExpressionNode(n)&&    childCount    ==    ((    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.STRING)?    1    :    0))    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	78	None	replace
815	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(first)&&  n.getFirstChild().getType()  ==  Token.STRING)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isExpressionNode(first)&&  n.getFirstChild().getType()  ==  Token.STRING)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(NodeUtil.isExpressionNode(first)&&  n.getFirstChild().getType()  ==  Token.STRING)  {	  if(NodeUtil.isExpressionNode(n)&&    first.getNext().getType()    ==    Token.STRING)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	68	None	replace
816	[BUG]  [BUGGY]  if(first.getType()  ==  Token.STRING  ||  first.getParent().getType()  ==  Token.FUNCTION)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                            ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first.getType()  ==  Token.STRING  ||  first.getParent().getType()  ==  Token.FUNCTION)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(first.getType()  ==  Token.STRING  ||  first.getParent().getType()  ==  Token.FUNCTION)  {	  if(n.getType()    ==    Token.STRING    ||    first.getNext().getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	16	None	replace
817	[BUG]  [BUGGY]  if(first.getType()  ==  Token.STRING  ||  first.getNext().getType()!=  Token.FUNCTION)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]                              ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first.getType()  ==  Token.STRING  ||  first.getNext().getType()!=  Token.FUNCTION)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(first.getType()  ==  Token.STRING  ||  first.getNext().getType()!=  Token.FUNCTION)  {	  if(n.getType()    ==    Token.STRING    ||    first.getNext().getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	16	None	replace
818	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING  &&  childCount  ==  ((  n.getNext()  ==  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getType()  ==  Token.STRING  &&  childCount  ==  ((  n.getNext()  ==  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(n.getType()  ==  Token.STRING  &&  childCount  ==  ((  n.getNext()  ==  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {	  if(n.getType()    ==    Token.STRING    &&    childCount    ==    ((    n.getNext()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	137	None	replace
819	[BUG]  [BUGGY]  Context  cc  =  getContextForNoDeclaration();  [CE]  invalid  method  declaration;  return  type  required  [FE]                                  ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  Context  cc  =  getContextForNoDeclaration();  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	Context  cc  =  getContextForNoDeclaration();	  Context    cc    =    getContext();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	57	None	replace
820	[BUG]  [BUGGY]  if(n.getNext()!=  null  &&  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getNext()!=  null  &&  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(n.getNext()!=  null  &&  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {	  if(n.getParent()!=    null    &&    childCount!=    ((    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
821	[BUG]  [BUGGY]  if(n.getString()!=  null  &&  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getString()!=  null  &&  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(n.getString()!=  null  &&  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {	  if(n.getParent()!=    null    &&    childCount!=    ((    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
822	[BUG]  [BUGGY]  if(n.getParent()!=  null  &&  childCount  ==  ((  n.getNext()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getParent()!=  null  &&  childCount  ==  ((  n.getNext()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(n.getParent()!=  null  &&  childCount  ==  ((  n.getNext()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {	  if(n.getParent()!=    null    &&    childCount!=    ((    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
823	[BUG]  [BUGGY]  if(n.getNext()!=  null  &&  childCount!=  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getNext()!=  null  &&  childCount!=  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(n.getNext()!=  null  &&  childCount!=  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {	  if(n.getParent()!=    null    &&    childCount!=    ((    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
824	[BUG]  [BUGGY]  if(n.getParent()!=  null  &&  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.EMPTY)?  1  :  0))  {  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getParent()!=  null  &&  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.EMPTY)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(n.getParent()!=  null  &&  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.EMPTY)?  1  :  0))  {	  if(n.getParent()!=    null    &&    childCount!=    ((    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
825	[BUG]  [BUGGY]  if(childCount  ==  1  &&  NodeUtil.isExpressionNode(next))  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  1  &&  NodeUtil.isExpressionNode(next))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(childCount  ==  1  &&  NodeUtil.isExpressionNode(next))  {	  if(childCount    ==    1    &&    NodeUtil.isExpressionNode(first))    {    	non-compiled	[CE]  illegal  start  of  expression	126	None	replace
826	[BUG]  [BUGGY]  if(childCount  ==  1  &&  NodeUtil.isExpressionNode(n,  first))  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  1  &&  NodeUtil.isExpressionNode(n,  first))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(childCount  ==  1  &&  NodeUtil.isExpressionNode(n,  first))  {	  if(childCount    ==    1    &&    NodeUtil.isExpressionNode(first))    {    	non-compiled	[CE]  illegal  start  of  expression	126	None	replace
827	[BUG]  [BUGGY]  if(NodeUtil.isVarDeclaration(first)||  first.getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isVarDeclaration(first)||  first.getType()  ==  Token.FUNCTION)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(NodeUtil.isVarDeclaration(first)||  first.getType()  ==  Token.FUNCTION)  {	  if(NodeUtil.isExpressionNode(first)||    first.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
828	[BUG]  [BUGGY]  if(NodeUtil.isAssignmentOp(first)||  first.getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isAssignmentOp(first)||  first.getType()  ==  Token.FUNCTION)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(NodeUtil.isAssignmentOp(first)||  first.getType()  ==  Token.FUNCTION)  {	  if(NodeUtil.isExpressionNode(first)||    first.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
829	[BUG]  [BUGGY]  if(FirstChild.getType()  ==  Token.STRING  &&  first.getFirstChild()!=  null)  {  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(FirstChild.getType()  ==  Token.STRING  &&  first.getFirstChild()!=  null)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(FirstChild.getType()  ==  Token.STRING  &&  first.getFirstChild()!=  null)  {	  if(n.getType()    ==    Token.STRING    &&    first.getFirstChild()!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	107	None	replace
830	[BUG]  [BUGGY]  Context  cc  =  getContextForNoDeclaration(context);  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  Context  cc  =  getContextForNoDeclaration(context);  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	Context  cc  =  getContextForNoDeclaration(context);	  Context    cc    =    context.getContext();    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
831	[BUG]  [BUGGY]  Context  cc  =  getContextForNoDeclaration(n);  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  Context  cc  =  getContextForNoDeclaration(n);  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	Context  cc  =  getContextForNoDeclaration(n);	  Context    cc    =    context.getContext();    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
832	[BUG]  [BUGGY]  if(childCount  ==  ((  n.getType()  ==  Token.STRING)&&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  ((  n.getType()  ==  Token.STRING)&&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(childCount  ==  ((  n.getType()  ==  Token.STRING)&&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {	  if(childCount    ==    ((    n.getType()    ==    Token.STRING)&&    n.getParent().getType()    ==    Token.NAME)?    1    :    0))    {    	non-compiled	[CE]  illegal  start  of  expression	129	None	replace
833	[BUG]  [BUGGY]  if(first  ==  null  ||  first!=  null  ||  first.getType()  ==  Token.STRING)  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first  ==  null  ||  first!=  null  ||  first.getType()  ==  Token.STRING)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(first  ==  null  ||  first!=  null  ||  first.getType()  ==  Token.STRING)  {	  if(first!=    null    ||    first.getType()    ==    Token.STRING)    {    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
834	[BUG]  [BUGGY]  if(n.getType()!=  Token.STRING  ||  n.getType()  ==  Token.NAME)  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getType()!=  Token.STRING  ||  n.getType()  ==  Token.NAME)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(n.getType()!=  Token.STRING  ||  n.getType()  ==  Token.NAME)  {	  if(n.getType()    ==    Token.STRING    ||    n.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
835	[BUG]  [BUGGY]  Context  rhsContext  =  Context.createContext(context,  this);  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  Context  rhsContext  =  Context.createContext(context,  this);  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	Context  rhsContext  =  Context.createContext(context,  this);	  Context    rhsContext    =    Context.createContext(context);    	non-compiled	[CE]  illegal  start  of  expression	119	None	replace
836	[BUG]  [BUGGY]  Context  rhsContext  =  Context.createContext(context,  true);  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  Context  rhsContext  =  Context.createContext(context,  true);  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	Context  rhsContext  =  Context.createContext(context,  true);	  Context    rhsContext    =    Context.createContext(context);    	non-compiled	[CE]  illegal  start  of  expression	119	None	replace
837	[BUG]  [BUGGY]  if(n.getType()!=  Token.STRING  ||  n.getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getType()!=  Token.STRING  ||  n.getType()  ==  Token.FUNCTION)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(n.getType()!=  Token.STRING  ||  n.getType()  ==  Token.FUNCTION)  {	  if(n.getType()    ==    Token.STRING    ||    n.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
838	[BUG]  [BUGGY]  if(childCount  ==  ((  n.getString()  ==  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  ((  n.getString()  ==  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(childCount  ==  ((  n.getString()  ==  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {	  if(childCount    ==    ((    n.getString()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    	non-compiled	[CE]  illegal  start  of  expression	144	None	replace
839	[BUG]  [BUGGY]  if(childCount  ==  ((  n.getString()  ==  null  ||  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  ((  n.getString()  ==  null  ||  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(childCount  ==  ((  n.getString()  ==  null  ||  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {	  if(childCount    ==    ((    n.getString()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    	non-compiled	[CE]  illegal  start  of  expression	144	None	replace
840	[BUG]  [BUGGY]  if(childCount  ==  ((  n.getString()!=  null  &&  n.getParent().getType()  ==  Token.EMPTY)?  1  :  0))  {  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  ((  n.getString()!=  null  &&  n.getParent().getType()  ==  Token.EMPTY)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(childCount  ==  ((  n.getString()!=  null  &&  n.getParent().getType()  ==  Token.EMPTY)?  1  :  0))  {	  if(childCount    ==    ((    n.getString()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    	non-compiled	[CE]  illegal  start  of  expression	144	None	replace
841	[BUG]  [BUGGY]  if(childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.EMPTY)?  1  :  0))  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.EMPTY)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.EMPTY)?  1  :  0))  {	  if(childCount    ==    ((    n.getFirstChild()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    	non-compiled	[CE]  illegal  start  of  expression	143	None	replace
842	[BUG]  [BUGGY]  if(childCount  ==  1  &&  first.getFirstChild()  ==  null  &&  first.getNext().getType()  ==  Token.STRING)  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  1  &&  first.getFirstChild()  ==  null  &&  first.getNext().getType()  ==  Token.STRING)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(childCount  ==  1  &&  first.getFirstChild()  ==  null  &&  first.getNext().getType()  ==  Token.STRING)  {	  if(childCount    ==    1    &&    first.getFirstChild()!=    null    &&    first.getNext().getType()    ==    Token.STRING)    {    	non-compiled	[CE]  illegal  start  of  expression	156	None	replace
843	[BUG]  [BUGGY]  if(first  ==  null  ||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first  ==  null  ||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(first  ==  null  ||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {	  if(first.getType()    ==    Token.STRING    ||    childCount    ==    ((    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    	non-compiled	[CE]  illegal  start  of  expression	102	None	replace
844	[BUG]  [BUGGY]  if(first.getType()  ==  Token.STRING  ||  first.getString().equals( ".string "))  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first.getType()  ==  Token.STRING  ||  first.getString().equals( ".string "))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(first.getType()  ==  Token.STRING  ||  first.getString().equals( ".string "))  {	  if(n.getType()    ==    Token.STRING    ||    first.getString().equals(   "string   "))    {    	non-compiled	[CE]  illegal  start  of  expression	146	None	replace
845	[BUG]  [BUGGY]  if(first.getType()!=  Token.STRING  ||  first.getString().equals( "string "))  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first.getType()!=  Token.STRING  ||  first.getString().equals( "string "))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(first.getType()!=  Token.STRING  ||  first.getString().equals( "string "))  {	  if(n.getType()    ==    Token.STRING    ||    first.getString().equals(   "string   "))    {    	non-compiled	[CE]  illegal  start  of  expression	146	None	replace
846	[BUG]  [BUGGY]  if(NodeUtil.isAssignmentOp(first)||  first.getType()  ==  Token.STRING)  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isAssignmentOp(first)||  first.getType()  ==  Token.STRING)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(NodeUtil.isAssignmentOp(first)||  first.getType()  ==  Token.STRING)  {	  if(NodeUtil.isExpressionNode(first)||    first.getType()    ==    Token.STRING)    {    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
847	[BUG]  [BUGGY]  if(NodeUtil.isVarDeclaration(first)||  first.getType()  ==  Token.STRING)  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isVarDeclaration(first)||  first.getType()  ==  Token.STRING)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(NodeUtil.isVarDeclaration(first)||  first.getType()  ==  Token.STRING)  {	  if(NodeUtil.isExpressionNode(first)||    first.getType()    ==    Token.STRING)    {    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
848	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING  &&  childCount  ==  ((  n.getNext()  ==  null  &&  n.getNext().getType()  ==  Token.FUNCTION)?  1  :  0))  {  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getType()  ==  Token.STRING  &&  childCount  ==  ((  n.getNext()  ==  null  &&  n.getNext().getType()  ==  Token.FUNCTION)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(n.getType()  ==  Token.STRING  &&  childCount  ==  ((  n.getNext()  ==  null  &&  n.getNext().getType()  ==  Token.FUNCTION)?  1  :  0))  {	  if(n.getType()    ==    Token.STRING    &&    childCount    ==    ((    n.getNext()!=    null    &&    n.getNext().getType()    ==    Token.FUNCTION)?    1    :    0))    {    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
849	[BUG]  [BUGGY]  if(first.getType()  ==  Token.STRING  ||  childCount  ==  ((  n.getNext()!=  null  &&  n.getNext().getType()  ==  Token.FUNCTION)?  1  :  0))  {  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first.getType()  ==  Token.STRING  ||  childCount  ==  ((  n.getNext()!=  null  &&  n.getNext().getType()  ==  Token.FUNCTION)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(first.getType()  ==  Token.STRING  ||  childCount  ==  ((  n.getNext()!=  null  &&  n.getNext().getType()  ==  Token.FUNCTION)?  1  :  0))  {	  if(n.getType()    ==    Token.STRING    &&    childCount    ==    ((    n.getNext()!=    null    &&    n.getNext().getType()    ==    Token.FUNCTION)?    1    :    0))    {    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
850	[BUG]  [BUGGY]  if(first.getType()  ==  Token.STRING  ||  childCount!=  ((  n.getNext()!=  null  &&  n.getNext().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first.getType()  ==  Token.STRING  ||  childCount!=  ((  n.getNext()!=  null  &&  n.getNext().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(first.getType()  ==  Token.STRING  ||  childCount!=  ((  n.getNext()!=  null  &&  n.getNext().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {	  if(n.getType()    ==    Token.STRING    &&    childCount!=    ((    n.getNext()!=    null    &&    n.getNext().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
851	[BUG]  [BUGGY]  if(n.getFirstChild()  ==  null  ||  first.getType()  ==  Token.STRING)  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getFirstChild()  ==  null  ||  first.getType()  ==  Token.STRING)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(n.getFirstChild()  ==  null  ||  first.getType()  ==  Token.STRING)  {	  if(n!=    null    ||    first.getType()    ==    Token.STRING)    {    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
852	[BUG]  [BUGGY]  if(first.getType()  ==  Token.STRING  ||  first.getType()!=  Token.GETPROP)  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first.getType()  ==  Token.STRING  ||  first.getType()!=  Token.GETPROP)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(first.getType()  ==  Token.STRING  ||  first.getType()!=  Token.GETPROP)  {	  if(n.getType()    ==    Token.STRING    ||    first.getType()    ==    Token.GETPROP)    {    	non-compiled	[CE]  illegal  start  of  expression	103	None	replace
853	[BUG]  [BUGGY]  Node  first  =  getFirstChild().getNext();  [CE]  illegal  start  of  expression  [FE]                                      ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  Node  first  =  getFirstChild().getNext();  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	Node  first  =  getFirstChild().getNext();	  Node    first    =    first.getNext();    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
854	[BUG]  [BUGGY]  Node  first  =  this.first.getNext();  [CE]  illegal  start  of  expression  [FE]                                        ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  Node  first  =  this.first.getNext();  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	Node  first  =  this.first.getNext();	  Node    first    =    first.getNext();    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
855	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING  &&  n.getFirstChild()!=  null)  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(n.getType()  ==  Token.STRING  &&  n.getFirstChild()!=  null)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(n.getType()  ==  Token.STRING  &&  n.getFirstChild()!=  null)  {	  if(n.getType()    ==    Token.STRING    &&    first.getNext()!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	147	None	replace
856	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(n)&&  childCount  ==  ((  n.getNext()  ==  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isExpressionNode(n)&&  childCount  ==  ((  n.getNext()  ==  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(NodeUtil.isExpressionNode(n)&&  childCount  ==  ((  n.getNext()  ==  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {	  if(NodeUtil.isExpressionNode(n)&&    childCount    ==    ((    n.getNext()!=    null    &&    n.getParent().getType()    ==    Token.STRING)?    1    :    0))    {    	non-compiled	[CE]  illegal  start  of  expression	151	None	replace
857	[BUG]  [BUGGY]  if(NodeUtil.isObjectLitKey(first)&&  first.getNext()!=  null)  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isObjectLitKey(first)&&  first.getNext()!=  null)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(NodeUtil.isObjectLitKey(first)&&  first.getNext()!=  null)  {	  if(NodeUtil.isExpressionNode(first)||    first.getNext()!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	124	None	replace
858	[BUG]  [BUGGY]  if(NodeUtil.isObjectLitKey(first)||  first.getNext()!=  null)  {  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isObjectLitKey(first)||  first.getNext()!=  null)  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(NodeUtil.isObjectLitKey(first)||  first.getNext()!=  null)  {	  if(NodeUtil.isExpressionNode(first)||    first.getNext()!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	124	None	replace
859	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(first)&&  childCount  ==  ((  n.getNext()  ==  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isExpressionNode(first)&&  childCount  ==  ((  n.getNext()  ==  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(NodeUtil.isExpressionNode(first)&&  childCount  ==  ((  n.getNext()  ==  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {	  if(NodeUtil.isExpressionNode(first)&&    childCount    ==    ((    n.getNext()!=    null    &&    n.getParent().getType()    ==    Token.STRING)?    1    :    0))    {    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
860	[BUG]  [BUGGY]  if(first!=  null  &&  first.getType()  ==  Token.STRING  ||  childCount!=  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(first!=  null  &&  first.getType()  ==  Token.STRING  ||  childCount!=  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(first!=  null  &&  first.getType()  ==  Token.STRING  ||  childCount!=  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {	  if(first.getType()    ==    Token.STRING    ||    childCount!=    ((    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
861	[BUG]  [BUGGY]  if(childCount  ==  Token.STRING  ||  childCount!=  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(childCount  ==  Token.STRING  ||  childCount!=  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(childCount  ==  Token.STRING  ||  childCount!=  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {	  if(first.getType()    ==    Token.STRING    ||    childCount!=    ((    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
862	[BUG]  [BUGGY]  Context  cc  =  context.getCurrentContextForNoInOperator();  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  Context  cc  =  context.getCurrentContextForNoInOperator();  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	Context  cc  =  context.getCurrentContextForNoInOperator();	  Context    cc    =    context.getCurrentContext();    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
863	[BUG]  [BUGGY]  Context  cc  =  context.createCurrentContext();  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  Context  cc  =  context.createCurrentContext();  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	Context  cc  =  context.createCurrentContext();	  Context    cc    =    context.getCurrentContext();    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
864	[BUG]  [BUGGY]  Context  cc  =  context.createChildObjectContext(-1,  1);  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  Context  cc  =  context.createChildObjectContext(-1,  1);  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	Context  cc  =  context.createChildObjectContext(-1,  1);	  Context    cc    =    context.getCurrentContext();    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
865	[BUG]  [BUGGY]  Preconditions.checkState(childCount  ==  4);  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  Preconditions.checkState(childCount  ==  4);  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	Preconditions.checkState(childCount  ==  4);	  Preconditions.checkState(childCount    ==    1);    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
866	[BUG]  [BUGGY]  if(NodeUtil.isAssignmentOp(first)&&  childCount!=  ((  n.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isAssignmentOp(first)&&  childCount!=  ((  n.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(NodeUtil.isAssignmentOp(first)&&  childCount!=  ((  n.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {	  if(NodeUtil.isExpressionNode(first)&&    childCount!=    ((    n.getFirstChild()!=    null    &&    n.getParent().getType()    ==    Token.STRING)?    1    :    0))    {    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
867	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(first)&&  parent!=  ((  n.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]        Node  next  =  first.getNext();  if  (next  !=  null)  {  add(     "(     ");  addList(next);  add(     ")     ");  }  break;  case  Token.STRING:      [BUGGY]  if(NodeUtil.isExpressionNode(first)&&  parent!=  ((  n.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {  [BUGGY]      ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(NodeUtil.isExpressionNode(first)&&  parent!=  ((  n.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {	  if(NodeUtil.isExpressionNode(first)&&    childCount!=    ((    n.getFirstChild()!=    null    &&    n.getParent().getType()    ==    Token.STRING)?    1    :    0))    {    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
