bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING  &&  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [CE]  [FE]        ComparisonFailure    [CONTEXT]      Node  next  =  first.getNext();  if  (next  !=  null)  {  add(   "(   ");  addList(next);  add(   ")   ");  }  break;  case  Token.STRING:    [BUGGY]  if(n.getType()  ==  Token.STRING  &&  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [BUGGY]    ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(     "Unexpected  String  children:     "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(n.getType()  ==  Token.STRING  &&  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {	  if(n.getType()    ==    Token.STRING    &&    childCount!=    ((    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    	non-compiled	[CE]  	1	None	replace
2	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING  &&  childCount!=  ((  n.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]      Node  next  =  first.getNext();  if  (next  !=  null)  {  add(   "(   ");  addList(next);  add(   ")   ");  }  break;  case  Token.STRING:    [BUGGY]  if(n.getType()  ==  Token.STRING  &&  childCount!=  ((  n.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [BUGGY]    ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(     "Unexpected  String  children:     "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(n.getType()  ==  Token.STRING  &&  childCount!=  ((  n.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {	  if(n.getType()    ==    Token.STRING    &&    childCount!=    ((    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
3	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING  &&  childCount!=  ((  n.getNext()!=  null  &&  n.getNext().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]      Node  next  =  first.getNext();  if  (next  !=  null)  {  add(   "(   ");  addList(next);  add(   ")   ");  }  break;  case  Token.STRING:    [BUGGY]  if(n.getType()  ==  Token.STRING  &&  childCount!=  ((  n.getNext()!=  null  &&  n.getNext().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [BUGGY]    ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(     "Unexpected  String  children:     "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(n.getType()  ==  Token.STRING  &&  childCount!=  ((  n.getNext()!=  null  &&  n.getNext().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {	  if(n.getType()    ==    Token.STRING    &&    childCount!=    ((    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
4	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING  &&  childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [CE]  [FE]              ComparisonFailure    [CONTEXT]      Node  next  =  first.getNext();  if  (next  !=  null)  {  add(   "(   ");  addList(next);  add(   ")   ");  }  break;  case  Token.STRING:    [BUGGY]  if(n.getType()  ==  Token.STRING  &&  childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [BUGGY]    ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(     "Unexpected  String  children:     "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(n.getType()  ==  Token.STRING  &&  childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {	  if(n.getType()    ==    Token.STRING    &&    childCount!=    ((    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    	non-compiled	[CE]  	1	None	replace
5	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING  &&  childCount  ==  ((  n.getNext()!=  null  &&  n.getNext().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]      Node  next  =  first.getNext();  if  (next  !=  null)  {  add(   "(   ");  addList(next);  add(   ")   ");  }  break;  case  Token.STRING:    [BUGGY]  if(n.getType()  ==  Token.STRING  &&  childCount  ==  ((  n.getNext()!=  null  &&  n.getNext().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [BUGGY]    ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(     "Unexpected  String  children:     "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(n.getType()  ==  Token.STRING  &&  childCount  ==  ((  n.getNext()!=  null  &&  n.getNext().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {	  if(n.getType()    ==    Token.STRING    &&    childCount!=    ((    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
6	[BUG]  [BUGGY]  if(childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getLastChild().getType()  ==  Token.STRING)||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0)  [CE]  [FE]                ComparisonFailure    [CONTEXT]      Node  next  =  first.getNext();  if  (next  !=  null)  {  add(   "(   ");  addList(next);  add(   ")   ");  }  break;  case  Token.STRING:    [BUGGY]  if(childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getLastChild().getType()  ==  Token.STRING)||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0)  [BUGGY]    ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(     "Unexpected  String  children:     "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getLastChild().getType()  ==  Token.STRING)||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0)	  if(childCount    ==    ((    n.getFirstChild()!=    null    &&    n.getLastChild().getType()    ==    Token.STRING)||    childCount!=    ((    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0)    	non-compiled	[CE]  	13	None	replace
7	[BUG]  [BUGGY]  if(childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getLastChild().getType()  ==  Token.STRING)||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  [CE]  [FE]                  ComparisonFailure    [CONTEXT]      Node  next  =  first.getNext();  if  (next  !=  null)  {  add(   "(   ");  addList(next);  add(   ")   ");  }  break;  case  Token.STRING:    [BUGGY]  if(childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getLastChild().getType()  ==  Token.STRING)||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  [BUGGY]    ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(     "Unexpected  String  children:     "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getLastChild().getType()  ==  Token.STRING)||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)	  if(childCount    ==    ((    n.getFirstChild()!=    null    &&    n.getLastChild().getType()    ==    Token.STRING)||    childCount!=    ((    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0)    	non-compiled	[CE]  	13	None	replace
8	[BUG]  [BUGGY]  if(childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getLastChild().getType()  ==  Token.STRING)||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  [CE]  [FE]                    ComparisonFailure    [CONTEXT]      Node  next  =  first.getNext();  if  (next  !=  null)  {  add(   "(   ");  addList(next);  add(   ")   ");  }  break;  case  Token.STRING:    [BUGGY]  if(childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getLastChild().getType()  ==  Token.STRING)||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  [BUGGY]    ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(     "Unexpected  String  children:     "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getLastChild().getType()  ==  Token.STRING)||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?	  if(childCount    ==    ((    n.getFirstChild()!=    null    &&    n.getLastChild().getType()    ==    Token.STRING)||    childCount!=    ((    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0)    	non-compiled	[CE]  	13	None	replace
9	[BUG]  [BUGGY]  if(childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getLastChild().getType()  ==  Token.STRING)||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0  [CE]  [FE]                      ComparisonFailure    [CONTEXT]      Node  next  =  first.getNext();  if  (next  !=  null)  {  add(   "(   ");  addList(next);  add(   ")   ");  }  break;  case  Token.STRING:    [BUGGY]  if(childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getLastChild().getType()  ==  Token.STRING)||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0  [BUGGY]    ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(     "Unexpected  String  children:     "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getLastChild().getType()  ==  Token.STRING)||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0	  if(childCount    ==    ((    n.getFirstChild()!=    null    &&    n.getLastChild().getType()    ==    Token.STRING)||    childCount!=    ((    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0)    	non-compiled	[CE]  	13	None	replace
10	[BUG]  [BUGGY]  if(childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getLastChild().getType()  ==  Token.STRING)||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  [CE]  [FE]                        ComparisonFailure    [CONTEXT]      Node  next  =  first.getNext();  if  (next  !=  null)  {  add(   "(   ");  addList(next);  add(   ")   ");  }  break;  case  Token.STRING:    [BUGGY]  if(childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getLastChild().getType()  ==  Token.STRING)||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  [BUGGY]    ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(     "Unexpected  String  children:     "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getLastChild().getType()  ==  Token.STRING)||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :	  if(childCount    ==    ((    n.getFirstChild()!=    null    &&    n.getLastChild().getType()    ==    Token.STRING)||    childCount!=    ((    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0)    	non-compiled	[CE]  	13	None	replace
11	[BUG]  [BUGGY]  if(childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getLastChild().getType()  ==  Token.STRING)||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJ  [CE]  [FE]                          ComparisonFailure    [CONTEXT]      Node  next  =  first.getNext();  if  (next  !=  null)  {  add(   "(   ");  addList(next);  add(   ")   ");  }  break;  case  Token.STRING:    [BUGGY]  if(childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getLastChild().getType()  ==  Token.STRING)||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJ  [BUGGY]    ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(     "Unexpected  String  children:     "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getLastChild().getType()  ==  Token.STRING)||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJ	  if(childCount    ==    ((    n.getFirstChild()!=    null    &&    n.getLastChild().getType()    ==    Token.STRING)||    childCount!=    ((    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0)    	non-compiled	[CE]  	13	None	replace
12	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING  ||  n.getType()  ==  Token.OBJECTLIT)  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]      Node  next  =  first.getNext();  if  (next  !=  null)  {  add(   "(   ");  addList(next);  add(   ")   ");  }  break;  case  Token.STRING:    [BUGGY]  if(n.getType()  ==  Token.STRING  ||  n.getType()  ==  Token.OBJECTLIT)  {  [BUGGY]    ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(     "Unexpected  String  children:     "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(n.getType()  ==  Token.STRING  ||  n.getType()  ==  Token.OBJECTLIT)  {	  if(n.getType()    ==    Token.STRING)    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
13	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING  ||  first.getNext().getType()  ==  Token.OBJECTLIT)  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure    [CONTEXT]      Node  next  =  first.getNext();  if  (next  !=  null)  {  add(   "(   ");  addList(next);  add(   ")   ");  }  break;  case  Token.STRING:    [BUGGY]  if(n.getType()  ==  Token.STRING  ||  first.getNext().getType()  ==  Token.OBJECTLIT)  {  [BUGGY]    ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(     "Unexpected  String  children:     "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(n.getType()  ==  Token.STRING  ||  first.getNext().getType()  ==  Token.OBJECTLIT)  {	  if(n.getType()    ==    Token.STRING)    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
14	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING  ||  n.getType()  ==  Token.NAME)  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure    [CONTEXT]      Node  next  =  first.getNext();  if  (next  !=  null)  {  add(   "(   ");  addList(next);  add(   ")   ");  }  break;  case  Token.STRING:    [BUGGY]  if(n.getType()  ==  Token.STRING  ||  n.getType()  ==  Token.NAME)  {  [BUGGY]    ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(     "Unexpected  String  children:     "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(n.getType()  ==  Token.STRING  ||  n.getType()  ==  Token.NAME)  {	  if(n.getType()    ==    Token.STRING)    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
15	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING  ||  n.getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure    [CONTEXT]      Node  next  =  first.getNext();  if  (next  !=  null)  {  add(   "(   ");  addList(next);  add(   ")   ");  }  break;  case  Token.STRING:    [BUGGY]  if(n.getType()  ==  Token.STRING  ||  n.getType()  ==  Token.FUNCTION)  {  [BUGGY]    ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(     "Unexpected  String  children:     "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(n.getType()  ==  Token.STRING  ||  n.getType()  ==  Token.FUNCTION)  {	  if(n.getType()    ==    Token.STRING)    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
16	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING  ||  first.getNext().getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure    [CONTEXT]      Node  next  =  first.getNext();  if  (next  !=  null)  {  add(   "(   ");  addList(next);  add(   ")   ");  }  break;  case  Token.STRING:    [BUGGY]  if(n.getType()  ==  Token.STRING  ||  first.getNext().getType()  ==  Token.FUNCTION)  {  [BUGGY]    ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(     "Unexpected  String  children:     "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(n.getType()  ==  Token.STRING  ||  first.getNext().getType()  ==  Token.FUNCTION)  {	  if(n.getType()    ==    Token.STRING)    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
17	[BUG]  [BUGGY]  if(n.getParent()!=  null)  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]      Node  next  =  first.getNext();  if  (next  !=  null)  {  add(   "(   ");  addList(next);  add(   ")   ");  }  break;  case  Token.STRING:    [BUGGY]  if(n.getParent()!=  null)  {  [BUGGY]    ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(     "Unexpected  String  children:     "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(n.getParent()!=  null)  {	  if(first!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
18	[BUG]  [BUGGY]  if(n!=  null)  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]      Node  next  =  first.getNext();  if  (next  !=  null)  {  add(   "(   ");  addList(next);  add(   ")   ");  }  break;  case  Token.STRING:    [BUGGY]  if(n!=  null)  {  [BUGGY]    ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(     "Unexpected  String  children:     "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(n!=  null)  {	  if(first!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
19	[BUG]  [BUGGY]  if(n.getFirstChild()!=  null)  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]      Node  next  =  first.getNext();  if  (next  !=  null)  {  add(   "(   ");  addList(next);  add(   ")   ");  }  break;  case  Token.STRING:    [BUGGY]  if(n.getFirstChild()!=  null)  {  [BUGGY]    ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(     "Unexpected  String  children:     "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(n.getFirstChild()!=  null)  {	  if(first!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
20	[BUG]  [BUGGY]  if(n.getNext()!=  null)  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure    [CONTEXT]      Node  next  =  first.getNext();  if  (next  !=  null)  {  add(   "(   ");  addList(next);  add(   ")   ");  }  break;  case  Token.STRING:    [BUGGY]  if(n.getNext()!=  null)  {  [BUGGY]    ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(     "Unexpected  String  children:     "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(n.getNext()!=  null)  {	  if(first!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
21	[BUG]  [BUGGY]  if(n  ==  null)  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure    [CONTEXT]      Node  next  =  first.getNext();  if  (next  !=  null)  {  add(   "(   ");  addList(next);  add(   ")   ");  }  break;  case  Token.STRING:    [BUGGY]  if(n  ==  null)  {  [BUGGY]    ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(     "Unexpected  String  children:     "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(n  ==  null)  {	  if(first!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
22	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME)  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure    [CONTEXT]      Node  next  =  first.getNext();  if  (next  !=  null)  {  add(   "(   ");  addList(next);  add(   ")   ");  }  break;  case  Token.STRING:    [BUGGY]  if(n.getType()  ==  Token.NAME)  {  [BUGGY]    ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(     "Unexpected  String  children:     "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(n.getType()  ==  Token.NAME)  {	  if(first!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
23	[BUG]  [BUGGY]  if(first.getType()  ==  Token.STRING  &&  first.getString().equals( "string "))  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]      Node  next  =  first.getNext();  if  (next  !=  null)  {  add(   "(   ");  addList(next);  add(   ")   ");  }  break;  case  Token.STRING:    [BUGGY]  if(first.getType()  ==  Token.STRING  &&  first.getString().equals( "string "))  {  [BUGGY]    ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(     "Unexpected  String  children:     "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(first.getType()  ==  Token.STRING  &&  first.getString().equals( "string "))  {	  if(first.getType()    ==    Token.STRING)    {    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
24	[BUG]  [BUGGY]  if(first.getType()  ==  Token.STRING  ||  first.getType()  ==  Token.STRING)  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]      Node  next  =  first.getNext();  if  (next  !=  null)  {  add(   "(   ");  addList(next);  add(   ")   ");  }  break;  case  Token.STRING:    [BUGGY]  if(first.getType()  ==  Token.STRING  ||  first.getType()  ==  Token.STRING)  {  [BUGGY]    ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(     "Unexpected  String  children:     "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(first.getType()  ==  Token.STRING  ||  first.getType()  ==  Token.STRING)  {	  if(first.getType()    ==    Token.STRING)    {    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
25	[BUG]  [BUGGY]  if(first.getType()  ==  Token.STRING  ||  first.getType()  ==  Token.OBJECTLIT)  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure    [CONTEXT]      Node  next  =  first.getNext();  if  (next  !=  null)  {  add(   "(   ");  addList(next);  add(   ")   ");  }  break;  case  Token.STRING:    [BUGGY]  if(first.getType()  ==  Token.STRING  ||  first.getType()  ==  Token.OBJECTLIT)  {  [BUGGY]    ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(     "Unexpected  String  children:     "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(first.getType()  ==  Token.STRING  ||  first.getType()  ==  Token.OBJECTLIT)  {	  if(first.getType()    ==    Token.STRING)    {    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
26	[BUG]  [BUGGY]  if(first.getType()  ==  Token.STRING  ||  first.getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure    [CONTEXT]      Node  next  =  first.getNext();  if  (next  !=  null)  {  add(   "(   ");  addList(next);  add(   ")   ");  }  break;  case  Token.STRING:    [BUGGY]  if(first.getType()  ==  Token.STRING  ||  first.getType()  ==  Token.FUNCTION)  {  [BUGGY]    ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(     "Unexpected  String  children:     "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(first.getType()  ==  Token.STRING  ||  first.getType()  ==  Token.FUNCTION)  {	  if(first.getType()    ==    Token.STRING)    {    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
27	[BUG]  [BUGGY]  if(first.getType()  ==  Token.STRING  ||  first.getType()  ==  Token.NAME)  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure    [CONTEXT]      Node  next  =  first.getNext();  if  (next  !=  null)  {  add(   "(   ");  addList(next);  add(   ")   ");  }  break;  case  Token.STRING:    [BUGGY]  if(first.getType()  ==  Token.STRING  ||  first.getType()  ==  Token.NAME)  {  [BUGGY]    ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(     "Unexpected  String  children:     "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(first.getType()  ==  Token.STRING  ||  first.getType()  ==  Token.NAME)  {	  if(first.getType()    ==    Token.STRING)    {    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
28	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING  &&  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.FUNCTION)?  1  :  0))  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure    [CONTEXT]      Node  next  =  first.getNext();  if  (next  !=  null)  {  add(   "(   ");  addList(next);  add(   ")   ");  }  break;  case  Token.STRING:    [BUGGY]  if(n.getType()  ==  Token.STRING  &&  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.FUNCTION)?  1  :  0))  {  [BUGGY]    ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(     "Unexpected  String  children:     "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(n.getType()  ==  Token.STRING  &&  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.FUNCTION)?  1  :  0))  {	  if(n.getType()    ==    Token.STRING    &&    childCount!=    ((    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.FUNCTION)?    1    :    0))    {    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
29	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING  ||  childCount!=  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.FUNCTION)?  1  :  0))  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure    [CONTEXT]      Node  next  =  first.getNext();  if  (next  !=  null)  {  add(   "(   ");  addList(next);  add(   ")   ");  }  break;  case  Token.STRING:    [BUGGY]  if(n.getType()  ==  Token.STRING  ||  childCount!=  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.FUNCTION)?  1  :  0))  {  [BUGGY]    ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(     "Unexpected  String  children:     "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(n.getType()  ==  Token.STRING  ||  childCount!=  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.FUNCTION)?  1  :  0))  {	  if(n.getType()    ==    Token.STRING    &&    childCount!=    ((    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.FUNCTION)?    1    :    0))    {    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
30	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING  &&  childCount!=  ((  n.getNext()!=  null  &&  n.getNext().getType()  ==  Token.FUNCTION)?  1  :  0))  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure    [CONTEXT]      Node  next  =  first.getNext();  if  (next  !=  null)  {  add(   "(   ");  addList(next);  add(   ")   ");  }  break;  case  Token.STRING:    [BUGGY]  if(n.getType()  ==  Token.STRING  &&  childCount!=  ((  n.getNext()!=  null  &&  n.getNext().getType()  ==  Token.FUNCTION)?  1  :  0))  {  [BUGGY]    ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(     "Unexpected  String  children:     "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(n.getType()  ==  Token.STRING  &&  childCount!=  ((  n.getNext()!=  null  &&  n.getNext().getType()  ==  Token.FUNCTION)?  1  :  0))  {	  if(n.getType()    ==    Token.STRING    &&    childCount!=    ((    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.FUNCTION)?    1    :    0))    {    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
31	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING  &&  childCount!=  ((  n.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.FUNCTION)?  1  :  0))  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure    [CONTEXT]      Node  next  =  first.getNext();  if  (next  !=  null)  {  add(   "(   ");  addList(next);  add(   ")   ");  }  break;  case  Token.STRING:    [BUGGY]  if(n.getType()  ==  Token.STRING  &&  childCount!=  ((  n.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.FUNCTION)?  1  :  0))  {  [BUGGY]    ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(     "Unexpected  String  children:     "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(n.getType()  ==  Token.STRING  &&  childCount!=  ((  n.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.FUNCTION)?  1  :  0))  {	  if(n.getType()    ==    Token.STRING    &&    childCount!=    ((    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.FUNCTION)?    1    :    0))    {    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
32	[BUG]  [BUGGY]  if(first.getType()  ==  Token.STRING  &&  childCount!=  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.FUNCTION)?  1  :  0))  {  [CE]  [FE]                          ComparisonFailure    [CONTEXT]      Node  next  =  first.getNext();  if  (next  !=  null)  {  add(   "(   ");  addList(next);  add(   ")   ");  }  break;  case  Token.STRING:    [BUGGY]  if(first.getType()  ==  Token.STRING  &&  childCount!=  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.FUNCTION)?  1  :  0))  {  [BUGGY]    ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(     "Unexpected  String  children:     "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(first.getType()  ==  Token.STRING  &&  childCount!=  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.FUNCTION)?  1  :  0))  {	  if(n.getType()    ==    Token.STRING    &&    childCount!=    ((    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.FUNCTION)?    1    :    0))    {    	non-compiled	[CE]  	6	None	replace
33	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING  &&  childCount  ==  ((  n.getNext()!=  null  &&  n.getNext().getType()  ==  Token.FUNCTION)?  1  :  0))  {  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure    [CONTEXT]      Node  next  =  first.getNext();  if  (next  !=  null)  {  add(   "(   ");  addList(next);  add(   ")   ");  }  break;  case  Token.STRING:    [BUGGY]  if(n.getType()  ==  Token.STRING  &&  childCount  ==  ((  n.getNext()!=  null  &&  n.getNext().getType()  ==  Token.FUNCTION)?  1  :  0))  {  [BUGGY]    ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(     "Unexpected  String  children:     "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(n.getType()  ==  Token.STRING  &&  childCount  ==  ((  n.getNext()!=  null  &&  n.getNext().getType()  ==  Token.FUNCTION)?  1  :  0))  {	  if(n.getType()    ==    Token.STRING    &&    childCount!=    ((    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.FUNCTION)?    1    :    0))    {    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
34	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(first)||  first.getType()  ==  Token.STRING)  {  [CE]  [FE]                  ComparisonFailure    [CONTEXT]      Node  next  =  first.getNext();  if  (next  !=  null)  {  add(   "(   ");  addList(next);  add(   ")   ");  }  break;  case  Token.STRING:    [BUGGY]  if(NodeUtil.isExpressionNode(first)||  first.getType()  ==  Token.STRING)  {  [BUGGY]    ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(     "Unexpected  String  children:     "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(NodeUtil.isExpressionNode(first)||  first.getType()  ==  Token.STRING)  {	  if(NodeUtil.isExpressionNode(first))    {    	non-compiled	[CE]  	20	None	replace
35	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(first)&&  first.getType()  ==  Token.STRING)  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure    [CONTEXT]      Node  next  =  first.getNext();  if  (next  !=  null)  {  add(   "(   ");  addList(next);  add(   ")   ");  }  break;  case  Token.STRING:    [BUGGY]  if(NodeUtil.isExpressionNode(first)&&  first.getType()  ==  Token.STRING)  {  [BUGGY]    ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(     "Unexpected  String  children:     "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(NodeUtil.isExpressionNode(first)&&  first.getType()  ==  Token.STRING)  {	  if(NodeUtil.isExpressionNode(first))    {    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
36	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(first)&&  first.getNext().getType()  ==  Token.STRING)  {  [CE]  [FE]                      ComparisonFailure    [CONTEXT]      Node  next  =  first.getNext();  if  (next  !=  null)  {  add(   "(   ");  addList(next);  add(   ")   ");  }  break;  case  Token.STRING:    [BUGGY]  if(NodeUtil.isExpressionNode(first)&&  first.getNext().getType()  ==  Token.STRING)  {  [BUGGY]    ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(     "Unexpected  String  children:     "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(NodeUtil.isExpressionNode(first)&&  first.getNext().getType()  ==  Token.STRING)  {	  if(NodeUtil.isExpressionNode(first))    {    	non-compiled	[CE]  	20	None	replace
37	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(first)||  NodeUtil.isExpressionNode(first))  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure    [CONTEXT]      Node  next  =  first.getNext();  if  (next  !=  null)  {  add(   "(   ");  addList(next);  add(   ")   ");  }  break;  case  Token.STRING:    [BUGGY]  if(NodeUtil.isExpressionNode(first)||  NodeUtil.isExpressionNode(first))  {  [BUGGY]    ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(     "Unexpected  String  children:     "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(NodeUtil.isExpressionNode(first)||  NodeUtil.isExpressionNode(first))  {	  if(NodeUtil.isExpressionNode(first))    {    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
38	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(first)||  first.getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure    [CONTEXT]      Node  next  =  first.getNext();  if  (next  !=  null)  {  add(   "(   ");  addList(next);  add(   ")   ");  }  break;  case  Token.STRING:    [BUGGY]  if(NodeUtil.isExpressionNode(first)||  first.getType()  ==  Token.FUNCTION)  {  [BUGGY]    ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(     "Unexpected  String  children:     "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(NodeUtil.isExpressionNode(first)||  first.getType()  ==  Token.FUNCTION)  {	  if(NodeUtil.isExpressionNode(first))    {    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
39	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(first)&&  first.getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure    [CONTEXT]      Node  next  =  first.getNext();  if  (next  !=  null)  {  add(   "(   ");  addList(next);  add(   ")   ");  }  break;  case  Token.STRING:    [BUGGY]  if(NodeUtil.isExpressionNode(first)&&  first.getType()  ==  Token.FUNCTION)  {  [BUGGY]    ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(     "Unexpected  String  children:     "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(NodeUtil.isExpressionNode(first)&&  first.getType()  ==  Token.FUNCTION)  {	  if(NodeUtil.isExpressionNode(first))    {    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
40	[BUG]  [BUGGY]  if(childCount  ==  2)  {  [CE]  [FE]        ComparisonFailure    [CONTEXT]      Node  next  =  first.getNext();  if  (next  !=  null)  {  add(   "(   ");  addList(next);  add(   ")   ");  }  break;  case  Token.STRING:    [BUGGY]  if(childCount  ==  2)  {  [BUGGY]    ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(     "Unexpected  String  children:     "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(childCount  ==  2)  {	  if(childCount    ==    1)    {    	non-compiled	[CE]  	15	None	replace
41	[BUG]  [BUGGY]  if(n.getType()  ==  Token.OBJECTLIT)  {  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]      Node  next  =  first.getNext();  if  (next  !=  null)  {  add(   "(   ");  addList(next);  add(   ")   ");  }  break;  case  Token.STRING:    [BUGGY]  if(n.getType()  ==  Token.OBJECTLIT)  {  [BUGGY]    ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(     "Unexpected  String  children:     "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(n.getType()  ==  Token.OBJECTLIT)  {	  if(childCount    ==    1)    {    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
42	[BUG]  [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]      Node  next  =  first.getNext();  if  (next  !=  null)  {  add(   "(   ");  addList(next);  add(   ")   ");  }  break;  case  Token.STRING:    [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  [BUGGY]    ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(     "Unexpected  String  children:     "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(n.getType()  ==  Token.FUNCTION)  {	  if(childCount    ==    1)    {    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
43	[BUG]  [BUGGY]  if(childCount  ==  ((  n.getNext()!=  null  &&  n.getNext().getType()  ==  Token.STRING)?  1  :  0))  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure    [CONTEXT]      Node  next  =  first.getNext();  if  (next  !=  null)  {  add(   "(   ");  addList(next);  add(   ")   ");  }  break;  case  Token.STRING:    [BUGGY]  if(childCount  ==  ((  n.getNext()!=  null  &&  n.getNext().getType()  ==  Token.STRING)?  1  :  0))  {  [BUGGY]    ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(     "Unexpected  String  children:     "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(childCount  ==  ((  n.getNext()!=  null  &&  n.getNext().getType()  ==  Token.STRING)?  1  :  0))  {	  if(childCount    ==    ((    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
44	[BUG]  [BUGGY]  if(childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {  [CE]  [FE]                      ComparisonFailure    [CONTEXT]      Node  next  =  first.getNext();  if  (next  !=  null)  {  add(   "(   ");  addList(next);  add(   ")   ");  }  break;  case  Token.STRING:    [BUGGY]  if(childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {  [BUGGY]    ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(     "Unexpected  String  children:     "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {	  if(childCount    ==    ((    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    	non-compiled	[CE]  	7	None	replace
45	[BUG]  [BUGGY]  if(childCount  ==  ((  n.getNext()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure    [CONTEXT]      Node  next  =  first.getNext();  if  (next  !=  null)  {  add(   "(   ");  addList(next);  add(   ")   ");  }  break;  case  Token.STRING:    [BUGGY]  if(childCount  ==  ((  n.getNext()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {  [BUGGY]    ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(     "Unexpected  String  children:     "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(childCount  ==  ((  n.getNext()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {	  if(childCount    ==    ((    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
46	[BUG]  [BUGGY]  if(childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.FUNCTION)?  1  :  0))  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure    [CONTEXT]      Node  next  =  first.getNext();  if  (next  !=  null)  {  add(   "(   ");  addList(next);  add(   ")   ");  }  break;  case  Token.STRING:    [BUGGY]  if(childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.FUNCTION)?  1  :  0))  {  [BUGGY]    ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(     "Unexpected  String  children:     "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.FUNCTION)?  1  :  0))  {	  if(childCount    ==    ((    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
47	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(n)&&  childCount!=  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [CE]  [FE]                  ComparisonFailure    [CONTEXT]      Node  next  =  first.getNext();  if  (next  !=  null)  {  add(   "(   ");  addList(next);  add(   ")   ");  }  break;  case  Token.STRING:    [BUGGY]  if(NodeUtil.isExpressionNode(n)&&  childCount!=  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [BUGGY]    ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(     "Unexpected  String  children:     "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(NodeUtil.isExpressionNode(n)&&  childCount!=  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {	  if(NodeUtil.isExpressionNode(first)&&    childCount!=    ((    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    	non-compiled	[CE]  	14	None	replace
48	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(first)&&  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure    [CONTEXT]      Node  next  =  first.getNext();  if  (next  !=  null)  {  add(   "(   ");  addList(next);  add(   ")   ");  }  break;  case  Token.STRING:    [BUGGY]  if(NodeUtil.isExpressionNode(first)&&  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [BUGGY]    ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(     "Unexpected  String  children:     "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(NodeUtil.isExpressionNode(first)&&  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {	  if(NodeUtil.isExpressionNode(first)&&    childCount!=    ((    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
49	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(n)&&  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure    [CONTEXT]      Node  next  =  first.getNext();  if  (next  !=  null)  {  add(   "(   ");  addList(next);  add(   ")   ");  }  break;  case  Token.STRING:    [BUGGY]  if(NodeUtil.isExpressionNode(n)&&  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [BUGGY]    ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(     "Unexpected  String  children:     "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(NodeUtil.isExpressionNode(n)&&  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {	  if(NodeUtil.isExpressionNode(first)&&    childCount!=    ((    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
50	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(first)&&  childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure    [CONTEXT]      Node  next  =  first.getNext();  if  (next  !=  null)  {  add(   "(   ");  addList(next);  add(   ")   ");  }  break;  case  Token.STRING:    [BUGGY]  if(NodeUtil.isExpressionNode(first)&&  childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [BUGGY]    ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(     "Unexpected  String  children:     "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(NodeUtil.isExpressionNode(first)&&  childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {	  if(NodeUtil.isExpressionNode(first)&&    childCount!=    ((    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
51	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(first)&&  childCount  ==  ((  n.getNext()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure    [CONTEXT]      Node  next  =  first.getNext();  if  (next  !=  null)  {  add(   "(   ");  addList(next);  add(   ")   ");  }  break;  case  Token.STRING:    [BUGGY]  if(NodeUtil.isExpressionNode(first)&&  childCount  ==  ((  n.getNext()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [BUGGY]    ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(     "Unexpected  String  children:     "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(NodeUtil.isExpressionNode(first)&&  childCount  ==  ((  n.getNext()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {	  if(NodeUtil.isExpressionNode(first)&&    childCount!=    ((    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
52	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(first)||  childCount!=  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure    [CONTEXT]      Node  next  =  first.getNext();  if  (next  !=  null)  {  add(   "(   ");  addList(next);  add(   ")   ");  }  break;  case  Token.STRING:    [BUGGY]  if(NodeUtil.isExpressionNode(first)||  childCount!=  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [BUGGY]    ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(     "Unexpected  String  children:     "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(NodeUtil.isExpressionNode(first)||  childCount!=  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {	  if(NodeUtil.isExpressionNode(first)&&    childCount!=    ((    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
53	[BUG]  [BUGGY]  Node  n  =  first.getNext();  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure    [CONTEXT]      Node  next  =  first.getNext();  if  (next  !=  null)  {  add(   "(   ");  addList(next);  add(   ")   ");  }  break;  case  Token.STRING:    [BUGGY]  Node  n  =  first.getNext();  [BUGGY]    ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(     "Unexpected  String  children:     "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	Node  n  =  first.getNext();	      	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
54	[BUG]  [BUGGY]  Context  cc  =  context.getCurrentContext();  [CE]  [FE]                        ComparisonFailure    [CONTEXT]      Node  next  =  first.getNext();  if  (next  !=  null)  {  add(   "(   ");  addList(next);  add(   ")   ");  }  break;  case  Token.STRING:    [BUGGY]  Context  cc  =  context.getCurrentContext();  [BUGGY]    ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(     "Unexpected  String  children:     "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	Context  cc  =  context.getCurrentContext();	      	non-compiled	[CE]  	8	None	replace
55	[BUG]  [BUGGY]  Context  cc  =  context.getContext();  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure    [CONTEXT]      Node  next  =  first.getNext();  if  (next  !=  null)  {  add(   "(   ");  addList(next);  add(   ")   ");  }  break;  case  Token.STRING:    [BUGGY]  Context  cc  =  context.getContext();  [BUGGY]    ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(     "Unexpected  String  children:     "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	Context  cc  =  context.getContext();	      	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
56	[BUG]  [BUGGY]  Preconditions.checkState(childCount  ==  1);  [CE]  [FE]                            ComparisonFailure    [CONTEXT]      Node  next  =  first.getNext();  if  (next  !=  null)  {  add(   "(   ");  addList(next);  add(   ")   ");  }  break;  case  Token.STRING:    [BUGGY]  Preconditions.checkState(childCount  ==  1);  [BUGGY]    ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(     "Unexpected  String  children:     "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	Preconditions.checkState(childCount  ==  1);	      	non-compiled	[CE]  	8	None	replace
57	[BUG]  [BUGGY]  Context  cc  =  getContext();  [CE]  [FE]                              ComparisonFailure    [CONTEXT]      Node  next  =  first.getNext();  if  (next  !=  null)  {  add(   "(   ");  addList(next);  add(   ")   ");  }  break;  case  Token.STRING:    [BUGGY]  Context  cc  =  getContext();  [BUGGY]    ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(     "Unexpected  String  children:     "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	Context  cc  =  getContext();	      	non-compiled	[CE]  	8	None	replace
58	[BUG]  [BUGGY]  Integer  n  =  first.getNext();  [CE]  [FE]                                ComparisonFailure    [CONTEXT]      Node  next  =  first.getNext();  if  (next  !=  null)  {  add(   "(   ");  addList(next);  add(   ")   ");  }  break;  case  Token.STRING:    [BUGGY]  Integer  n  =  first.getNext();  [BUGGY]    ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(     "Unexpected  String  children:     "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	Integer  n  =  first.getNext();	      	non-compiled	[CE]  	8	None	replace
59	[BUG]  [BUGGY]  Node  first  =  first.getNext();  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure    [CONTEXT]      Node  next  =  first.getNext();  if  (next  !=  null)  {  add(   "(   ");  addList(next);  add(   ")   ");  }  break;  case  Token.STRING:    [BUGGY]  Node  first  =  first.getNext();  [BUGGY]    ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(     "Unexpected  String  children:     "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	Node  first  =  first.getNext();	      	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
60	[BUG]  [BUGGY]  if(childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getNext().getType()  ==  Token.STRING)||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [CE]  [FE]          ComparisonFailure    [CONTEXT]      Node  next  =  first.getNext();  if  (next  !=  null)  {  add(   "(   ");  addList(next);  add(   ")   ");  }  break;  case  Token.STRING:    [BUGGY]  if(childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getNext().getType()  ==  Token.STRING)||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [BUGGY]    ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(     "Unexpected  String  children:     "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getNext().getType()  ==  Token.STRING)||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {	  if(childCount    ==    ((    n.getFirstChild()!=    null    &&    n.getNext().getType()    ==    Token.STRING)||    childCount!=    ((    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    	non-compiled	[CE]  	10	None	replace
61	[BUG]  [BUGGY]  if(childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getNext().getType()  ==  Token.STRING)||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  [CE]  [FE]            ComparisonFailure    [CONTEXT]      Node  next  =  first.getNext();  if  (next  !=  null)  {  add(   "(   ");  addList(next);  add(   ")   ");  }  break;  case  Token.STRING:    [BUGGY]  if(childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getNext().getType()  ==  Token.STRING)||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  [BUGGY]    ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(     "Unexpected  String  children:     "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getNext().getType()  ==  Token.STRING)||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)	  if(childCount    ==    ((    n.getFirstChild()!=    null    &&    n.getNext().getType()    ==    Token.STRING)||    childCount!=    ((    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    	non-compiled	[CE]  	10	None	replace
62	[BUG]  [BUGGY]  if(childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getNext().getType()  ==  Token.STRING)||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  [CE]  :  expected  [FE]              ComparisonFailure    [CONTEXT]      Node  next  =  first.getNext();  if  (next  !=  null)  {  add(   "(   ");  addList(next);  add(   ")   ");  }  break;  case  Token.STRING:    [BUGGY]  if(childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getNext().getType()  ==  Token.STRING)||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  [BUGGY]    ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(     "Unexpected  String  children:     "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getNext().getType()  ==  Token.STRING)||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?	  if(childCount    ==    ((    n.getFirstChild()!=    null    &&    n.getNext().getType()    ==    Token.STRING)||    childCount!=    ((    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    	non-compiled	[CE]  :  expected	10	None	replace
63	[BUG]  [BUGGY]  if(childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getNext().getType()  ==  Token.STRING)||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0)  [CE]  [FE]                ComparisonFailure    [CONTEXT]      Node  next  =  first.getNext();  if  (next  !=  null)  {  add(   "(   ");  addList(next);  add(   ")   ");  }  break;  case  Token.STRING:    [BUGGY]  if(childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getNext().getType()  ==  Token.STRING)||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0)  [BUGGY]    ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(     "Unexpected  String  children:     "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getNext().getType()  ==  Token.STRING)||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0)	  if(childCount    ==    ((    n.getFirstChild()!=    null    &&    n.getNext().getType()    ==    Token.STRING)||    childCount!=    ((    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    	non-compiled	[CE]  	10	None	replace
64	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING  &&  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {  [CE]  [FE]          ComparisonFailure    [CONTEXT]      Node  next  =  first.getNext();  if  (next  !=  null)  {  add(   "(   ");  addList(next);  add(   ")   ");  }  break;  case  Token.STRING:    [BUGGY]  if(n.getType()  ==  Token.STRING  &&  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {  [BUGGY]    ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(     "Unexpected  String  children:     "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(n.getType()  ==  Token.STRING  &&  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {	  if(childCount    ==    ((    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.STRING)?    1    :    0))    {    	non-compiled	[CE]  	2	None	replace
65	[BUG]  [BUGGY]  if(childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getNext().getType()  ==  Token.STRING)?  1  :  0))  {  [CE]  [FE]            ComparisonFailure    [CONTEXT]      Node  next  =  first.getNext();  if  (next  !=  null)  {  add(   "(   ");  addList(next);  add(   ")   ");  }  break;  case  Token.STRING:    [BUGGY]  if(childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getNext().getType()  ==  Token.STRING)?  1  :  0))  {  [BUGGY]    ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(     "Unexpected  String  children:     "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getNext().getType()  ==  Token.STRING)?  1  :  0))  {	  if(childCount    ==    ((    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.STRING)?    1    :    0))    {    	non-compiled	[CE]  	2	None	replace
66	[BUG]  [BUGGY]  if(childCount  ==  ((  first.getNext()!=  null  &&  first.getNext().getType()  ==  Token.STRING)?  1  :  0))  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]      Node  next  =  first.getNext();  if  (next  !=  null)  {  add(   "(   ");  addList(next);  add(   ")   ");  }  break;  case  Token.STRING:    [BUGGY]  if(childCount  ==  ((  first.getNext()!=  null  &&  first.getNext().getType()  ==  Token.STRING)?  1  :  0))  {  [BUGGY]    ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(     "Unexpected  String  children:     "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(childCount  ==  ((  first.getNext()!=  null  &&  first.getNext().getType()  ==  Token.STRING)?  1  :  0))  {	  if(childCount    ==    ((    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.STRING)?    1    :    0))    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
67	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(n)||  NodeUtil.isExpressionNode(n))  {  [CE]  [FE]                ComparisonFailure    [CONTEXT]      Node  next  =  first.getNext();  if  (next  !=  null)  {  add(   "(   ");  addList(next);  add(   ")   ");  }  break;  case  Token.STRING:    [BUGGY]  if(NodeUtil.isExpressionNode(n)||  NodeUtil.isExpressionNode(n))  {  [BUGGY]    ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(     "Unexpected  String  children:     "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(NodeUtil.isExpressionNode(n)||  NodeUtil.isExpressionNode(n))  {	  if(NodeUtil.isExpressionNode(n))    {    	non-compiled	[CE]  	19	None	replace
68	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(n)&&  first.getNext().getType()  ==  Token.STRING)  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure    [CONTEXT]      Node  next  =  first.getNext();  if  (next  !=  null)  {  add(   "(   ");  addList(next);  add(   ")   ");  }  break;  case  Token.STRING:    [BUGGY]  if(NodeUtil.isExpressionNode(n)&&  first.getNext().getType()  ==  Token.STRING)  {  [BUGGY]    ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(     "Unexpected  String  children:     "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(NodeUtil.isExpressionNode(n)&&  first.getNext().getType()  ==  Token.STRING)  {	  if(NodeUtil.isExpressionNode(n))    {    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
69	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(n)||  NodeUtil.isFunctionDeclaration(n))  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure    [CONTEXT]      Node  next  =  first.getNext();  if  (next  !=  null)  {  add(   "(   ");  addList(next);  add(   ")   ");  }  break;  case  Token.STRING:    [BUGGY]  if(NodeUtil.isExpressionNode(n)||  NodeUtil.isFunctionDeclaration(n))  {  [BUGGY]    ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(     "Unexpected  String  children:     "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(NodeUtil.isExpressionNode(n)||  NodeUtil.isFunctionDeclaration(n))  {	  if(NodeUtil.isExpressionNode(n))    {    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
70	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(n)&&  first.getNext().getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure    [CONTEXT]      Node  next  =  first.getNext();  if  (next  !=  null)  {  add(   "(   ");  addList(next);  add(   ")   ");  }  break;  case  Token.STRING:    [BUGGY]  if(NodeUtil.isExpressionNode(n)&&  first.getNext().getType()  ==  Token.FUNCTION)  {  [BUGGY]    ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(     "Unexpected  String  children:     "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(NodeUtil.isExpressionNode(n)&&  first.getNext().getType()  ==  Token.FUNCTION)  {	  if(NodeUtil.isExpressionNode(n))    {    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
71	[BUG]  [BUGGY]  if(NodeUtil.isFunctionDeclaration(n))  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure    [CONTEXT]      Node  next  =  first.getNext();  if  (next  !=  null)  {  add(   "(   ");  addList(next);  add(   ")   ");  }  break;  case  Token.STRING:    [BUGGY]  if(NodeUtil.isFunctionDeclaration(n))  {  [BUGGY]    ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(     "Unexpected  String  children:     "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(NodeUtil.isFunctionDeclaration(n))  {	  if(NodeUtil.isExpressionNode(n))    {    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
72	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(n)&&  NodeUtil.isFunctionDeclaration(n))  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure    [CONTEXT]      Node  next  =  first.getNext();  if  (next  !=  null)  {  add(   "(   ");  addList(next);  add(   ")   ");  }  break;  case  Token.STRING:    [BUGGY]  if(NodeUtil.isExpressionNode(n)&&  NodeUtil.isFunctionDeclaration(n))  {  [BUGGY]    ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(     "Unexpected  String  children:     "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(NodeUtil.isExpressionNode(n)&&  NodeUtil.isFunctionDeclaration(n))  {	  if(NodeUtil.isExpressionNode(n))    {    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
73	[BUG]  [BUGGY]  if(n.getType()!=  Token.STRING  &&  childCount!=  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]      Node  next  =  first.getNext();  if  (next  !=  null)  {  add(   "(   ");  addList(next);  add(   ")   ");  }  break;  case  Token.STRING:    [BUGGY]  if(n.getType()!=  Token.STRING  &&  childCount!=  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [BUGGY]    ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(     "Unexpected  String  children:     "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(n.getType()!=  Token.STRING  &&  childCount!=  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {	  if(n.getType()    ==    Token.STRING    ||    childCount!=    ((    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
74	[BUG]  [BUGGY]  if(n.getParent()!=  null  &&  childCount!=  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]      Node  next  =  first.getNext();  if  (next  !=  null)  {  add(   "(   ");  addList(next);  add(   ")   ");  }  break;  case  Token.STRING:    [BUGGY]  if(n.getParent()!=  null  &&  childCount!=  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [BUGGY]    ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(     "Unexpected  String  children:     "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(n.getParent()!=  null  &&  childCount!=  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {	  if(n.getType()    ==    Token.STRING    ||    childCount!=    ((    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
75	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING  &&  childCount  >=  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure    [CONTEXT]      Node  next  =  first.getNext();  if  (next  !=  null)  {  add(   "(   ");  addList(next);  add(   ")   ");  }  break;  case  Token.STRING:    [BUGGY]  if(n.getType()  ==  Token.STRING  &&  childCount  >=  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [BUGGY]    ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(     "Unexpected  String  children:     "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(n.getType()  ==  Token.STRING  &&  childCount  >=  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {	  if(n.getType()    ==    Token.STRING    ||    childCount!=    ((    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
76	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(n)&&  childCount!=  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]      Node  next  =  first.getNext();  if  (next  !=  null)  {  add(   "(   ");  addList(next);  add(   ")   ");  }  break;  case  Token.STRING:    [BUGGY]  if(NodeUtil.isExpressionNode(n)&&  childCount!=  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {  [BUGGY]    ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(     "Unexpected  String  children:     "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(NodeUtil.isExpressionNode(n)&&  childCount!=  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {	  if(NodeUtil.isExpressionNode(first)&&    childCount!=    ((    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.STRING)?    1    :    0))    {    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
77	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(first)&&  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]      Node  next  =  first.getNext();  if  (next  !=  null)  {  add(   "(   ");  addList(next);  add(   ")   ");  }  break;  case  Token.STRING:    [BUGGY]  if(NodeUtil.isExpressionNode(first)&&  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {  [BUGGY]    ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(     "Unexpected  String  children:     "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(NodeUtil.isExpressionNode(first)&&  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {	  if(NodeUtil.isExpressionNode(first)&&    childCount!=    ((    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.STRING)?    1    :    0))    {    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
78	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(n)&&  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]      Node  next  =  first.getNext();  if  (next  !=  null)  {  add(   "(   ");  addList(next);  add(   ")   ");  }  break;  case  Token.STRING:    [BUGGY]  if(NodeUtil.isExpressionNode(n)&&  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {  [BUGGY]    ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(     "Unexpected  String  children:     "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(NodeUtil.isExpressionNode(n)&&  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {	  if(NodeUtil.isExpressionNode(first)&&    childCount!=    ((    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.STRING)?    1    :    0))    {    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
79	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(first)&&  childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure    [CONTEXT]      Node  next  =  first.getNext();  if  (next  !=  null)  {  add(   "(   ");  addList(next);  add(   ")   ");  }  break;  case  Token.STRING:    [BUGGY]  if(NodeUtil.isExpressionNode(first)&&  childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {  [BUGGY]    ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(     "Unexpected  String  children:     "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(NodeUtil.isExpressionNode(first)&&  childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {	  if(NodeUtil.isExpressionNode(first)&&    childCount!=    ((    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.STRING)?    1    :    0))    {    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
80	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(first)&&  childCount  ==  ((  n.getNext()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure    [CONTEXT]      Node  next  =  first.getNext();  if  (next  !=  null)  {  add(   "(   ");  addList(next);  add(   ")   ");  }  break;  case  Token.STRING:    [BUGGY]  if(NodeUtil.isExpressionNode(first)&&  childCount  ==  ((  n.getNext()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {  [BUGGY]    ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(     "Unexpected  String  children:     "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(NodeUtil.isExpressionNode(first)&&  childCount  ==  ((  n.getNext()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {	  if(NodeUtil.isExpressionNode(first)&&    childCount!=    ((    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.STRING)?    1    :    0))    {    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
81	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(first)&&  childCount!=  ((  n.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure    [CONTEXT]      Node  next  =  first.getNext();  if  (next  !=  null)  {  add(   "(   ");  addList(next);  add(   ")   ");  }  break;  case  Token.STRING:    [BUGGY]  if(NodeUtil.isExpressionNode(first)&&  childCount!=  ((  n.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {  [BUGGY]    ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(     "Unexpected  String  children:     "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(NodeUtil.isExpressionNode(first)&&  childCount!=  ((  n.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {	  if(NodeUtil.isExpressionNode(first)&&    childCount!=    ((    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.STRING)?    1    :    0))    {    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
82	[BUG]  [BUGGY]  if(n.getType()!=  Token.STRING  &&  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]      Node  next  =  first.getNext();  if  (next  !=  null)  {  add(   "(   ");  addList(next);  add(   ")   ");  }  break;  case  Token.STRING:    [BUGGY]  if(n.getType()!=  Token.STRING  &&  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [BUGGY]    ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(     "Unexpected  String  children:     "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(n.getType()!=  Token.STRING  &&  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {	  if(n.getType()    ==    Token.STRING    ||    childCount    ==    ((    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
83	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING  ||  childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]      Node  next  =  first.getNext();  if  (next  !=  null)  {  add(   "(   ");  addList(next);  add(   ")   ");  }  break;  case  Token.STRING:    [BUGGY]  if(n.getType()  ==  Token.STRING  ||  childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [BUGGY]    ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(     "Unexpected  String  children:     "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(n.getType()  ==  Token.STRING  ||  childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {	  if(n.getType()    ==    Token.STRING    ||    childCount    ==    ((    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
84	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING  ||  childCount  ==  ((  n.getNext()!=  null  &&  n.getNext().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]      Node  next  =  first.getNext();  if  (next  !=  null)  {  add(   "(   ");  addList(next);  add(   ")   ");  }  break;  case  Token.STRING:    [BUGGY]  if(n.getType()  ==  Token.STRING  ||  childCount  ==  ((  n.getNext()!=  null  &&  n.getNext().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [BUGGY]    ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(     "Unexpected  String  children:     "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(n.getType()  ==  Token.STRING  ||  childCount  ==  ((  n.getNext()!=  null  &&  n.getNext().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {	  if(n.getType()    ==    Token.STRING    ||    childCount    ==    ((    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
85	[BUG]  [BUGGY]  if(first!=  null  ||  first.getType()  ==  Token.STRING)  {  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]      Node  next  =  first.getNext();  if  (next  !=  null)  {  add(   "(   ");  addList(next);  add(   ")   ");  }  break;  case  Token.STRING:    [BUGGY]  if(first!=  null  ||  first.getType()  ==  Token.STRING)  {  [BUGGY]    ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(     "Unexpected  String  children:     "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(first!=  null  ||  first.getType()  ==  Token.STRING)  {	  if(first    ==    null    ||    first.getType()    ==    Token.STRING)    {    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
86	[BUG]  [BUGGY]  if(n  ==  null  ||  first.getType()  ==  Token.STRING)  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]      Node  next  =  first.getNext();  if  (next  !=  null)  {  add(   "(   ");  addList(next);  add(   ")   ");  }  break;  case  Token.STRING:    [BUGGY]  if(n  ==  null  ||  first.getType()  ==  Token.STRING)  {  [BUGGY]    ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(     "Unexpected  String  children:     "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(n  ==  null  ||  first.getType()  ==  Token.STRING)  {	  if(first    ==    null    ||    first.getType()    ==    Token.STRING)    {    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
87	[BUG]  [BUGGY]  if(first  ==  null  ||  first.getType()!=  Token.STRING)  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]      Node  next  =  first.getNext();  if  (next  !=  null)  {  add(   "(   ");  addList(next);  add(   ")   ");  }  break;  case  Token.STRING:    [BUGGY]  if(first  ==  null  ||  first.getType()!=  Token.STRING)  {  [BUGGY]    ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(     "Unexpected  String  children:     "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(first  ==  null  ||  first.getType()!=  Token.STRING)  {	  if(first    ==    null    ||    first.getType()    ==    Token.STRING)    {    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
88	[BUG]  [BUGGY]  if(first  ==  null  ||  second.getType()  ==  Token.STRING)  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]      Node  next  =  first.getNext();  if  (next  !=  null)  {  add(   "(   ");  addList(next);  add(   ")   ");  }  break;  case  Token.STRING:    [BUGGY]  if(first  ==  null  ||  second.getType()  ==  Token.STRING)  {  [BUGGY]    ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(     "Unexpected  String  children:     "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(first  ==  null  ||  second.getType()  ==  Token.STRING)  {	  if(first    ==    null    ||    first.getType()    ==    Token.STRING)    {    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
89	[BUG]  [BUGGY]  if(first  ==  null  &&  first.getType()  ==  Token.STRING)  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure    [CONTEXT]      Node  next  =  first.getNext();  if  (next  !=  null)  {  add(   "(   ");  addList(next);  add(   ")   ");  }  break;  case  Token.STRING:    [BUGGY]  if(first  ==  null  &&  first.getType()  ==  Token.STRING)  {  [BUGGY]    ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(     "Unexpected  String  children:     "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(first  ==  null  &&  first.getType()  ==  Token.STRING)  {	  if(first    ==    null    ||    first.getType()    ==    Token.STRING)    {    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
90	[BUG]  [BUGGY]  if(n!=  null  ||  first.getType()  ==  Token.STRING)  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure    [CONTEXT]      Node  next  =  first.getNext();  if  (next  !=  null)  {  add(   "(   ");  addList(next);  add(   ")   ");  }  break;  case  Token.STRING:    [BUGGY]  if(n!=  null  ||  first.getType()  ==  Token.STRING)  {  [BUGGY]    ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(     "Unexpected  String  children:     "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(n!=  null  ||  first.getType()  ==  Token.STRING)  {	  if(first    ==    null    ||    first.getType()    ==    Token.STRING)    {    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
91	[BUG]  [BUGGY]  if(first.getType()  ==  Token.STRING  &&  first.getFirstChild()!=  null)  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]      Node  next  =  first.getNext();  if  (next  !=  null)  {  add(   "(   ");  addList(next);  add(   ")   ");  }  break;  case  Token.STRING:    [BUGGY]  if(first.getType()  ==  Token.STRING  &&  first.getFirstChild()!=  null)  {  [BUGGY]    ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(     "Unexpected  String  children:     "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(first.getType()  ==  Token.STRING  &&  first.getFirstChild()!=  null)  {	  if(first.getType()    ==    Token.STRING)    {    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
92	[BUG]  [BUGGY]  if(first.getType()  ==  Token.STRING  &&  first.getNext()!=  null)  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]      Node  next  =  first.getNext();  if  (next  !=  null)  {  add(   "(   ");  addList(next);  add(   ")   ");  }  break;  case  Token.STRING:    [BUGGY]  if(first.getType()  ==  Token.STRING  &&  first.getNext()!=  null)  {  [BUGGY]    ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(     "Unexpected  String  children:     "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(first.getType()  ==  Token.STRING  &&  first.getNext()!=  null)  {	  if(first.getType()    ==    Token.STRING)    {    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
93	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(n)||  first.getType()  ==  Token.STRING)  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]      Node  next  =  first.getNext();  if  (next  !=  null)  {  add(   "(   ");  addList(next);  add(   ")   ");  }  break;  case  Token.STRING:    [BUGGY]  if(NodeUtil.isExpressionNode(n)||  first.getType()  ==  Token.STRING)  {  [BUGGY]    ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(     "Unexpected  String  children:     "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(NodeUtil.isExpressionNode(n)||  first.getType()  ==  Token.STRING)  {	  if(NodeUtil.isExpressionNode(n))    {    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
94	[BUG]  [BUGGY]  if(NodeUtil.isStringNode(n))  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure    [CONTEXT]      Node  next  =  first.getNext();  if  (next  !=  null)  {  add(   "(   ");  addList(next);  add(   ")   ");  }  break;  case  Token.STRING:    [BUGGY]  if(NodeUtil.isStringNode(n))  {  [BUGGY]    ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(     "Unexpected  String  children:     "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(NodeUtil.isStringNode(n))  {	  if(NodeUtil.isExpressionNode(n))    {    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
95	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(n)&&  first.getType()  ==  Token.STRING)  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure    [CONTEXT]      Node  next  =  first.getNext();  if  (next  !=  null)  {  add(   "(   ");  addList(next);  add(   ")   ");  }  break;  case  Token.STRING:    [BUGGY]  if(NodeUtil.isExpressionNode(n)&&  first.getType()  ==  Token.STRING)  {  [BUGGY]    ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(     "Unexpected  String  children:     "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(NodeUtil.isExpressionNode(n)&&  first.getType()  ==  Token.STRING)  {	  if(NodeUtil.isExpressionNode(n))    {    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
96	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(n)||  first.getNext()!=  null)  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure    [CONTEXT]      Node  next  =  first.getNext();  if  (next  !=  null)  {  add(   "(   ");  addList(next);  add(   ")   ");  }  break;  case  Token.STRING:    [BUGGY]  if(NodeUtil.isExpressionNode(n)||  first.getNext()!=  null)  {  [BUGGY]    ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(     "Unexpected  String  children:     "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(NodeUtil.isExpressionNode(n)||  first.getNext()!=  null)  {	  if(NodeUtil.isExpressionNode(n))    {    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
97	[BUG]  [BUGGY]  if(first.getType()  ==  Token.STRING  ||  childCount!=  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]      Node  next  =  first.getNext();  if  (next  !=  null)  {  add(   "(   ");  addList(next);  add(   ")   ");  }  break;  case  Token.STRING:    [BUGGY]  if(first.getType()  ==  Token.STRING  ||  childCount!=  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [BUGGY]    ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(     "Unexpected  String  children:     "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(first.getType()  ==  Token.STRING  ||  childCount!=  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {	  if(n.getType()    ==    Token.STRING    ||    childCount!=    ((    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
98	[BUG]  [BUGGY]  if(childCount  ==  ((  n.getString()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure    [CONTEXT]      Node  next  =  first.getNext();  if  (next  !=  null)  {  add(   "(   ");  addList(next);  add(   ")   ");  }  break;  case  Token.STRING:    [BUGGY]  if(childCount  ==  ((  n.getString()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {  [BUGGY]    ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(     "Unexpected  String  children:     "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(childCount  ==  ((  n.getString()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {	  if(childCount    ==    ((    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
99	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING  &&  childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.FUNCTION)?  1  :  0))  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure    [CONTEXT]      Node  next  =  first.getNext();  if  (next  !=  null)  {  add(   "(   ");  addList(next);  add(   ")   ");  }  break;  case  Token.STRING:    [BUGGY]  if(n.getType()  ==  Token.STRING  &&  childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.FUNCTION)?  1  :  0))  {  [BUGGY]    ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(     "Unexpected  String  children:     "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(n.getType()  ==  Token.STRING  &&  childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.FUNCTION)?  1  :  0))  {	  if(n.getType()    ==    Token.STRING    &&    childCount!=    ((    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.FUNCTION)?    1    :    0))    {    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
100	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(first)&&  childCount  ==  ((  n.getString()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]      Node  next  =  first.getNext();  if  (next  !=  null)  {  add(   "(   ");  addList(next);  add(   ")   ");  }  break;  case  Token.STRING:    [BUGGY]  if(NodeUtil.isExpressionNode(first)&&  childCount  ==  ((  n.getString()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {  [BUGGY]    ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(     "Unexpected  String  children:     "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(NodeUtil.isExpressionNode(first)&&  childCount  ==  ((  n.getString()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {	  if(NodeUtil.isExpressionNode(first)&&    childCount!=    ((    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.STRING)?    1    :    0))    {    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
101	[BUG]  [BUGGY]  if(childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getLastChild().getType()  ==  Token.STRING)||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType  [CE]  [FE]        ComparisonFailure    [CONTEXT]      Node  next  =  first.getNext();  if  (next  !=  null)  {  add(   "(   ");  addList(next);  add(   ")   ");  }  break;  case  Token.STRING:    [BUGGY]  if(childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getLastChild().getType()  ==  Token.STRING)||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType  [BUGGY]    ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(     "Unexpected  String  children:     "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getLastChild().getType()  ==  Token.STRING)||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType	  if(childCount    ==    ((    n.getFirstChild()!=    null    &&    n.getLastChild().getType()    ==    Token.STRING)||    childCount!=    ((    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    	non-compiled	[CE]  	9	None	replace
102	[BUG]  [BUGGY]  if(first.getType()  ==  Token.STRING  ||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]      Node  next  =  first.getNext();  if  (next  !=  null)  {  add(   "(   ");  addList(next);  add(   ")   ");  }  break;  case  Token.STRING:    [BUGGY]  if(first.getType()  ==  Token.STRING  ||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [BUGGY]    ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(     "Unexpected  String  children:     "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(first.getType()  ==  Token.STRING  ||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {	  if(n.getType()    ==    Token.STRING    ||    childCount    ==    ((    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
103	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING  ||  first.getType()  ==  Token.GETPROP)  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]      Node  next  =  first.getNext();  if  (next  !=  null)  {  add(   "(   ");  addList(next);  add(   ")   ");  }  break;  case  Token.STRING:    [BUGGY]  if(n.getType()  ==  Token.STRING  ||  first.getType()  ==  Token.GETPROP)  {  [BUGGY]    ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(     "Unexpected  String  children:     "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(n.getType()  ==  Token.STRING  ||  first.getType()  ==  Token.GETPROP)  {	  if(n.getType()    ==    Token.STRING)    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
104	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING  ||  first.getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure    [CONTEXT]      Node  next  =  first.getNext();  if  (next  !=  null)  {  add(   "(   ");  addList(next);  add(   ")   ");  }  break;  case  Token.STRING:    [BUGGY]  if(n.getType()  ==  Token.STRING  ||  first.getType()  ==  Token.FUNCTION)  {  [BUGGY]    ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(     "Unexpected  String  children:     "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(n.getType()  ==  Token.STRING  ||  first.getType()  ==  Token.FUNCTION)  {	  if(n.getType()    ==    Token.STRING)    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
105	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING  ||  first.getType()  ==  Token.NAME)  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure    [CONTEXT]      Node  next  =  first.getNext();  if  (next  !=  null)  {  add(   "(   ");  addList(next);  add(   ")   ");  }  break;  case  Token.STRING:    [BUGGY]  if(n.getType()  ==  Token.STRING  ||  first.getType()  ==  Token.NAME)  {  [BUGGY]    ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(     "Unexpected  String  children:     "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(n.getType()  ==  Token.STRING  ||  first.getType()  ==  Token.NAME)  {	  if(n.getType()    ==    Token.STRING)    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
106	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING  ||  first.getType()  ==  Token.OBJECTLIT)  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure    [CONTEXT]      Node  next  =  first.getNext();  if  (next  !=  null)  {  add(   "(   ");  addList(next);  add(   ")   ");  }  break;  case  Token.STRING:    [BUGGY]  if(n.getType()  ==  Token.STRING  ||  first.getType()  ==  Token.OBJECTLIT)  {  [BUGGY]    ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(     "Unexpected  String  children:     "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(n.getType()  ==  Token.STRING  ||  first.getType()  ==  Token.OBJECTLIT)  {	  if(n.getType()    ==    Token.STRING)    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
107	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING  &&  first.getFirstChild()!=  null)  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure    [CONTEXT]      Node  next  =  first.getNext();  if  (next  !=  null)  {  add(   "(   ");  addList(next);  add(   ")   ");  }  break;  case  Token.STRING:    [BUGGY]  if(n.getType()  ==  Token.STRING  &&  first.getFirstChild()!=  null)  {  [BUGGY]    ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(     "Unexpected  String  children:     "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(n.getType()  ==  Token.STRING  &&  first.getFirstChild()!=  null)  {	  if(n.getType()    ==    Token.STRING)    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
108	[BUG]  [BUGGY]  if(first  ==  null)  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]      Node  next  =  first.getNext();  if  (next  !=  null)  {  add(   "(   ");  addList(next);  add(   ")   ");  }  break;  case  Token.STRING:    [BUGGY]  if(first  ==  null)  {  [BUGGY]    ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(     "Unexpected  String  children:     "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(first  ==  null)  {	  if(first!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
109	[BUG]  [BUGGY]  if(childCount  ==  ((  n.getType()  ==  Token.STRING)&&  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]      Node  next  =  first.getNext();  if  (next  !=  null)  {  add(   "(   ");  addList(next);  add(   ")   ");  }  break;  case  Token.STRING:    [BUGGY]  if(childCount  ==  ((  n.getType()  ==  Token.STRING)&&  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {  [BUGGY]    ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(     "Unexpected  String  children:     "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(childCount  ==  ((  n.getType()  ==  Token.STRING)&&  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {	  if(childCount    ==    ((    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.STRING)?    1    :    0))    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
110	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(first)&&  childCount  ==  ((  n.getString()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure    [CONTEXT]      Node  next  =  first.getNext();  if  (next  !=  null)  {  add(   "(   ");  addList(next);  add(   ")   ");  }  break;  case  Token.STRING:    [BUGGY]  if(NodeUtil.isExpressionNode(first)&&  childCount  ==  ((  n.getString()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [BUGGY]    ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(     "Unexpected  String  children:     "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(NodeUtil.isExpressionNode(first)&&  childCount  ==  ((  n.getString()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {	  if(NodeUtil.isExpressionNode(first)&&    childCount!=    ((    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
111	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(n)&&  childCount!=  ((  n.getNext()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure    [CONTEXT]      Node  next  =  first.getNext();  if  (next  !=  null)  {  add(   "(   ");  addList(next);  add(   ")   ");  }  break;  case  Token.STRING:    [BUGGY]  if(NodeUtil.isExpressionNode(n)&&  childCount!=  ((  n.getNext()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [BUGGY]    ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(     "Unexpected  String  children:     "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(NodeUtil.isExpressionNode(n)&&  childCount!=  ((  n.getNext()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {	  if(NodeUtil.isExpressionNode(first)&&    childCount!=    ((    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
112	[BUG]  [BUGGY]  if(childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getNext().getType()  ==  Token.STRING)||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0  [CE]  [FE]          ComparisonFailure    [CONTEXT]      Node  next  =  first.getNext();  if  (next  !=  null)  {  add(   "(   ");  addList(next);  add(   ")   ");  }  break;  case  Token.STRING:    [BUGGY]  if(childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getNext().getType()  ==  Token.STRING)||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0  [BUGGY]    ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(     "Unexpected  String  children:     "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getNext().getType()  ==  Token.STRING)||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0	  if(childCount    ==    ((    n.getFirstChild()!=    null    &&    n.getNext().getType()    ==    Token.STRING)||    childCount!=    ((    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    	non-compiled	[CE]  	10	None	replace
113	[BUG]  [BUGGY]  if(first.getType()  ==  Token.STRING  &&  childCount!=  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure    [CONTEXT]      Node  next  =  first.getNext();  if  (next  !=  null)  {  add(   "(   ");  addList(next);  add(   ")   ");  }  break;  case  Token.STRING:    [BUGGY]  if(first.getType()  ==  Token.STRING  &&  childCount!=  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [BUGGY]    ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(     "Unexpected  String  children:     "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(first.getType()  ==  Token.STRING  &&  childCount!=  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {	  if(n.getType()    ==    Token.STRING    &&    childCount!=    ((    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
114	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING  &&  childCount!=  ((  n.getLastChild()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]      Node  next  =  first.getNext();  if  (next  !=  null)  {  add(   "(   ");  addList(next);  add(   ")   ");  }  break;  case  Token.STRING:    [BUGGY]  if(n.getType()  ==  Token.STRING  &&  childCount!=  ((  n.getLastChild()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [BUGGY]    ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(     "Unexpected  String  children:     "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(n.getType()  ==  Token.STRING  &&  childCount!=  ((  n.getLastChild()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {	  if(n.getType()    ==    Token.STRING    &&    childCount!=    ((    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
115	[BUG]  [BUGGY]  if(first!=  null  &&  first.getType()  ==  Token.STRING)  {  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]      Node  next  =  first.getNext();  if  (next  !=  null)  {  add(   "(   ");  addList(next);  add(   ")   ");  }  break;  case  Token.STRING:    [BUGGY]  if(first!=  null  &&  first.getType()  ==  Token.STRING)  {  [BUGGY]    ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(     "Unexpected  String  children:     "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(first!=  null  &&  first.getType()  ==  Token.STRING)  {	  if(first    ==    null    ||    first.getType()    ==    Token.STRING)    {    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
116	[BUG]  [BUGGY]  if(first  ==  null  ||  first.getNext().getType()  ==  Token.STRING)  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]      Node  next  =  first.getNext();  if  (next  !=  null)  {  add(   "(   ");  addList(next);  add(   ")   ");  }  break;  case  Token.STRING:    [BUGGY]  if(first  ==  null  ||  first.getNext().getType()  ==  Token.STRING)  {  [BUGGY]    ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(     "Unexpected  String  children:     "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(first  ==  null  ||  first.getNext().getType()  ==  Token.STRING)  {	  if(first    ==    null    ||    first.getType()    ==    Token.STRING)    {    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
117	[BUG]  [BUGGY]  Preconditions.checkState(childCount  ==  1)  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]                      ComparisonFailure    [CONTEXT]      Node  next  =  first.getNext();  if  (next  !=  null)  {  add(   "(   ");  addList(next);  add(   ")   ");  }  break;  case  Token.STRING:    [BUGGY]  Preconditions.checkState(childCount  ==  1)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]    ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(     "Unexpected  String  children:     "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	Preconditions.checkState(childCount  ==  1)  {  throw  new  IllegalStateException( " ");  }	      	non-compiled	[CE]  	8	None	replace
118	[BUG]  [BUGGY]  Node  n  =  first.getFirstChild();  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure    [CONTEXT]      Node  next  =  first.getNext();  if  (next  !=  null)  {  add(   "(   ");  addList(next);  add(   ")   ");  }  break;  case  Token.STRING:    [BUGGY]  Node  n  =  first.getFirstChild();  [BUGGY]    ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(     "Unexpected  String  children:     "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	Node  n  =  first.getFirstChild();	      	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
119	[BUG]  [BUGGY]  Context  rhsContext  =  Context.createContext(context);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure    [CONTEXT]      Node  next  =  first.getNext();  if  (next  !=  null)  {  add(   "(   ");  addList(next);  add(   ")   ");  }  break;  case  Token.STRING:    [BUGGY]  Context  rhsContext  =  Context.createContext(context);  [BUGGY]    ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(     "Unexpected  String  children:     "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	Context  rhsContext  =  Context.createContext(context);	      	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
120	[BUG]  [BUGGY]  Preconditions.checkState(childCount  ==  0);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure    [CONTEXT]      Node  next  =  first.getNext();  if  (next  !=  null)  {  add(   "(   ");  addList(next);  add(   ")   ");  }  break;  case  Token.STRING:    [BUGGY]  Preconditions.checkState(childCount  ==  0);  [BUGGY]    ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(     "Unexpected  String  children:     "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	Preconditions.checkState(childCount  ==  0);	      	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
121	[BUG]  [BUGGY]  Preconditions.checkState(childCount  ==  2);  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure    [CONTEXT]      Node  next  =  first.getNext();  if  (next  !=  null)  {  add(   "(   ");  addList(next);  add(   ")   ");  }  break;  case  Token.STRING:    [BUGGY]  Preconditions.checkState(childCount  ==  2);  [BUGGY]    ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(     "Unexpected  String  children:     "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	Preconditions.checkState(childCount  ==  2);	      	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
122	[BUG]  [BUGGY]  if(NodeUtil.isStringNode(first))  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure    [CONTEXT]      Node  next  =  first.getNext();  if  (next  !=  null)  {  add(   "(   ");  addList(next);  add(   ")   ");  }  break;  case  Token.STRING:    [BUGGY]  if(NodeUtil.isStringNode(first))  {  [BUGGY]    ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(     "Unexpected  String  children:     "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(NodeUtil.isStringNode(first))  {	  if(NodeUtil.isExpressionNode(first))    {    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
123	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(first)&&  NodeUtil.isFunctionDeclaration(first))  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure    [CONTEXT]      Node  next  =  first.getNext();  if  (next  !=  null)  {  add(   "(   ");  addList(next);  add(   ")   ");  }  break;  case  Token.STRING:    [BUGGY]  if(NodeUtil.isExpressionNode(first)&&  NodeUtil.isFunctionDeclaration(first))  {  [BUGGY]    ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(     "Unexpected  String  children:     "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(NodeUtil.isExpressionNode(first)&&  NodeUtil.isFunctionDeclaration(first))  {	  if(NodeUtil.isExpressionNode(first))    {    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
124	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(first)||  first.getNext()!=  null)  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure    [CONTEXT]      Node  next  =  first.getNext();  if  (next  !=  null)  {  add(   "(   ");  addList(next);  add(   ")   ");  }  break;  case  Token.STRING:    [BUGGY]  if(NodeUtil.isExpressionNode(first)||  first.getNext()!=  null)  {  [BUGGY]    ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(     "Unexpected  String  children:     "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(NodeUtil.isExpressionNode(first)||  first.getNext()!=  null)  {	  if(NodeUtil.isExpressionNode(first))    {    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
125	[BUG]  [BUGGY]  if(childCount  ==  1  &&  first.getType()  ==  Token.STRING)  {  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure    [CONTEXT]      Node  next  =  first.getNext();  if  (next  !=  null)  {  add(   "(   ");  addList(next);  add(   ")   ");  }  break;  case  Token.STRING:    [BUGGY]  if(childCount  ==  1  &&  first.getType()  ==  Token.STRING)  {  [BUGGY]    ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(     "Unexpected  String  children:     "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(childCount  ==  1  &&  first.getType()  ==  Token.STRING)  {	  if(childCount    ==    1)    {    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
126	[BUG]  [BUGGY]  if(childCount  ==  1  &&  NodeUtil.isExpressionNode(first))  {  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]      Node  next  =  first.getNext();  if  (next  !=  null)  {  add(   "(   ");  addList(next);  add(   ")   ");  }  break;  case  Token.STRING:    [BUGGY]  if(childCount  ==  1  &&  NodeUtil.isExpressionNode(first))  {  [BUGGY]    ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(     "Unexpected  String  children:     "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(childCount  ==  1  &&  NodeUtil.isExpressionNode(first))  {	  if(childCount    ==    1)    {    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
127	[BUG]  [BUGGY]  if(childCount  ==  1  &&  first.getString().equals( "string "))  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]      Node  next  =  first.getNext();  if  (next  !=  null)  {  add(   "(   ");  addList(next);  add(   ")   ");  }  break;  case  Token.STRING:    [BUGGY]  if(childCount  ==  1  &&  first.getString().equals( "string "))  {  [BUGGY]    ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(     "Unexpected  String  children:     "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(childCount  ==  1  &&  first.getString().equals( "string "))  {	  if(childCount    ==    1)    {    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
128	[BUG]  [BUGGY]  if(childCount  ==  1  &&  first.getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]      Node  next  =  first.getNext();  if  (next  !=  null)  {  add(   "(   ");  addList(next);  add(   ")   ");  }  break;  case  Token.STRING:    [BUGGY]  if(childCount  ==  1  &&  first.getType()  ==  Token.FUNCTION)  {  [BUGGY]    ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(     "Unexpected  String  children:     "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(childCount  ==  1  &&  first.getType()  ==  Token.FUNCTION)  {	  if(childCount    ==    1)    {    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
129	[BUG]  [BUGGY]  if(childCount  ==  ((  n.getType()  ==  Token.STRING)&&  n.getParent().getType()  ==  Token.NAME)?  1  :  0))  {  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]      Node  next  =  first.getNext();  if  (next  !=  null)  {  add(   "(   ");  addList(next);  add(   ")   ");  }  break;  case  Token.STRING:    [BUGGY]  if(childCount  ==  ((  n.getType()  ==  Token.STRING)&&  n.getParent().getType()  ==  Token.NAME)?  1  :  0))  {  [BUGGY]    ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(     "Unexpected  String  children:     "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(childCount  ==  ((  n.getType()  ==  Token.STRING)&&  n.getParent().getType()  ==  Token.NAME)?  1  :  0))  {	  if(childCount    ==    ((    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.STRING)?    1    :    0))    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
130	[BUG]  [BUGGY]  if(childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getNext().getType()  ==  Token.STRING)||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJ  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]      Node  next  =  first.getNext();  if  (next  !=  null)  {  add(   "(   ");  addList(next);  add(   ")   ");  }  break;  case  Token.STRING:    [BUGGY]  if(childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getNext().getType()  ==  Token.STRING)||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJ  [BUGGY]    ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(     "Unexpected  String  children:     "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getNext().getType()  ==  Token.STRING)||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJ	  if(childCount    ==    ((    n.getFirstChild()!=    null    &&    n.getNext().getType()    ==    Token.STRING)||    childCount!=    ((    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
131	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING  ||  childCount  ==  ((  n.getNext()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]      Node  next  =  first.getNext();  if  (next  !=  null)  {  add(   "(   ");  addList(next);  add(   ")   ");  }  break;  case  Token.STRING:    [BUGGY]  if(n.getType()  ==  Token.STRING  ||  childCount  ==  ((  n.getNext()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [BUGGY]    ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(     "Unexpected  String  children:     "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(n.getType()  ==  Token.STRING  ||  childCount  ==  ((  n.getNext()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {	  if(n.getType()    ==    Token.STRING    ||    childCount!=    ((    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
132	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING  ||  first!=  null)  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]      Node  next  =  first.getNext();  if  (next  !=  null)  {  add(   "(   ");  addList(next);  add(   ")   ");  }  break;  case  Token.STRING:    [BUGGY]  if(n.getType()  ==  Token.STRING  ||  first!=  null)  {  [BUGGY]    ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(     "Unexpected  String  children:     "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(n.getType()  ==  Token.STRING  ||  first!=  null)  {	  if(first!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
133	[BUG]  [BUGGY]  if(n.getFirstChild()  ==  null)  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]      Node  next  =  first.getNext();  if  (next  !=  null)  {  add(   "(   ");  addList(next);  add(   ")   ");  }  break;  case  Token.STRING:    [BUGGY]  if(n.getFirstChild()  ==  null)  {  [BUGGY]    ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(     "Unexpected  String  children:     "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(n.getFirstChild()  ==  null)  {	  if(first!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
134	[BUG]  [BUGGY]  if(first!=  null  &&  first.getNext()!=  null)  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]      Node  next  =  first.getNext();  if  (next  !=  null)  {  add(   "(   ");  addList(next);  add(   ")   ");  }  break;  case  Token.STRING:    [BUGGY]  if(first!=  null  &&  first.getNext()!=  null)  {  [BUGGY]    ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(     "Unexpected  String  children:     "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(first!=  null  &&  first.getNext()!=  null)  {	  if(first!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
135	[BUG]  [BUGGY]  Context  n  =  context.getCurrentContext();  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure    [CONTEXT]      Node  next  =  first.getNext();  if  (next  !=  null)  {  add(   "(   ");  addList(next);  add(   ")   ");  }  break;  case  Token.STRING:    [BUGGY]  Context  n  =  context.getCurrentContext();  [BUGGY]    ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(     "Unexpected  String  children:     "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	Context  n  =  context.getCurrentContext();	      	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
136	[BUG]  [BUGGY]  Integer  n  =  first.getFirstChild();  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure    [CONTEXT]      Node  next  =  first.getNext();  if  (next  !=  null)  {  add(   "(   ");  addList(next);  add(   ")   ");  }  break;  case  Token.STRING:    [BUGGY]  Integer  n  =  first.getFirstChild();  [BUGGY]    ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(     "Unexpected  String  children:     "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	Integer  n  =  first.getFirstChild();	      	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
137	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING  &&  childCount  ==  ((  n.getNext()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure    [CONTEXT]      Node  next  =  first.getNext();  if  (next  !=  null)  {  add(   "(   ");  addList(next);  add(   ")   ");  }  break;  case  Token.STRING:    [BUGGY]  if(n.getType()  ==  Token.STRING  &&  childCount  ==  ((  n.getNext()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [BUGGY]    ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(     "Unexpected  String  children:     "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(n.getType()  ==  Token.STRING  &&  childCount  ==  ((  n.getNext()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {	  if(n.getType()    ==    Token.STRING    &&    childCount!=    ((    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
138	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING  &&  childCount!=  ((  n.getNext()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]      Node  next  =  first.getNext();  if  (next  !=  null)  {  add(   "(   ");  addList(next);  add(   ")   ");  }  break;  case  Token.STRING:    [BUGGY]  if(n.getType()  ==  Token.STRING  &&  childCount!=  ((  n.getNext()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [BUGGY]    ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(     "Unexpected  String  children:     "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(n.getType()  ==  Token.STRING  &&  childCount!=  ((  n.getNext()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {	  if(n.getType()    ==    Token.STRING    &&    childCount!=    ((    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
139	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(n)&&  childCount  ==  ((  n.getNext()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure    [CONTEXT]      Node  next  =  first.getNext();  if  (next  !=  null)  {  add(   "(   ");  addList(next);  add(   ")   ");  }  break;  case  Token.STRING:    [BUGGY]  if(NodeUtil.isExpressionNode(n)&&  childCount  ==  ((  n.getNext()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [BUGGY]    ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(     "Unexpected  String  children:     "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(NodeUtil.isExpressionNode(n)&&  childCount  ==  ((  n.getNext()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {	  if(NodeUtil.isExpressionNode(first)&&    childCount!=    ((    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
140	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING  &&  childCount  ==  ((  n.getNext()!=  null  &&  n.getParent().getType()  ==  Token.FUNCTION)?  1  :  0))  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure    [CONTEXT]      Node  next  =  first.getNext();  if  (next  !=  null)  {  add(   "(   ");  addList(next);  add(   ")   ");  }  break;  case  Token.STRING:    [BUGGY]  if(n.getType()  ==  Token.STRING  &&  childCount  ==  ((  n.getNext()!=  null  &&  n.getParent().getType()  ==  Token.FUNCTION)?  1  :  0))  {  [BUGGY]    ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(     "Unexpected  String  children:     "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(n.getType()  ==  Token.STRING  &&  childCount  ==  ((  n.getNext()!=  null  &&  n.getParent().getType()  ==  Token.FUNCTION)?  1  :  0))  {	  if(n.getType()    ==    Token.STRING    &&    childCount!=    ((    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.FUNCTION)?    1    :    0))    {    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
141	[BUG]  [BUGGY]  if(childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getLastChild().getType()  ==  Token.STRING)||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECT  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure    [CONTEXT]      Node  next  =  first.getNext();  if  (next  !=  null)  {  add(   "(   ");  addList(next);  add(   ")   ");  }  break;  case  Token.STRING:    [BUGGY]  if(childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getLastChild().getType()  ==  Token.STRING)||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECT  [BUGGY]    ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(     "Unexpected  String  children:     "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getLastChild().getType()  ==  Token.STRING)||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECT	  if(childCount    ==    ((    n.getFirstChild()!=    null    &&    n.getLastChild().getType()    ==    Token.STRING)||    childCount!=    ((    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
142	[BUG]  [BUGGY]  if(childCount  ==  ((  n.getNext()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure    [CONTEXT]      Node  next  =  first.getNext();  if  (next  !=  null)  {  add(   "(   ");  addList(next);  add(   ")   ");  }  break;  case  Token.STRING:    [BUGGY]  if(childCount  ==  ((  n.getNext()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [BUGGY]    ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(     "Unexpected  String  children:     "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(childCount  ==  ((  n.getNext()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {	  if(childCount    ==    ((    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
143	[BUG]  [BUGGY]  if(childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure    [CONTEXT]      Node  next  =  first.getNext();  if  (next  !=  null)  {  add(   "(   ");  addList(next);  add(   ")   ");  }  break;  case  Token.STRING:    [BUGGY]  if(childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [BUGGY]    ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(     "Unexpected  String  children:     "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {	  if(childCount    ==    ((    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
144	[BUG]  [BUGGY]  if(childCount  ==  ((  n.getString()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure    [CONTEXT]      Node  next  =  first.getNext();  if  (next  !=  null)  {  add(   "(   ");  addList(next);  add(   ")   ");  }  break;  case  Token.STRING:    [BUGGY]  if(childCount  ==  ((  n.getString()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [BUGGY]    ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(     "Unexpected  String  children:     "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(childCount  ==  ((  n.getString()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {	  if(childCount    ==    ((    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.OBJECTLIT)?    1    :    0))    {    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
145	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING  &&  first.getString().equals( "string "))  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]      Node  next  =  first.getNext();  if  (next  !=  null)  {  add(   "(   ");  addList(next);  add(   ")   ");  }  break;  case  Token.STRING:    [BUGGY]  if(n.getType()  ==  Token.STRING  &&  first.getString().equals( "string "))  {  [BUGGY]    ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(     "Unexpected  String  children:     "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(n.getType()  ==  Token.STRING  &&  first.getString().equals( "string "))  {	  if(n.getType()    ==    Token.STRING)    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
146	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING  ||  first.getString().equals( "string "))  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure    [CONTEXT]      Node  next  =  first.getNext();  if  (next  !=  null)  {  add(   "(   ");  addList(next);  add(   ")   ");  }  break;  case  Token.STRING:    [BUGGY]  if(n.getType()  ==  Token.STRING  ||  first.getString().equals( "string "))  {  [BUGGY]    ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(     "Unexpected  String  children:     "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(n.getType()  ==  Token.STRING  ||  first.getString().equals( "string "))  {	  if(n.getType()    ==    Token.STRING)    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
147	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING  &&  first.getNext()!=  null)  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure    [CONTEXT]      Node  next  =  first.getNext();  if  (next  !=  null)  {  add(   "(   ");  addList(next);  add(   ")   ");  }  break;  case  Token.STRING:    [BUGGY]  if(n.getType()  ==  Token.STRING  &&  first.getNext()!=  null)  {  [BUGGY]    ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(     "Unexpected  String  children:     "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(n.getType()  ==  Token.STRING  &&  first.getNext()!=  null)  {	  if(n.getType()    ==    Token.STRING)    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
148	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(n)||  NodeUtil.isVarDeclaration(n))  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]      Node  next  =  first.getNext();  if  (next  !=  null)  {  add(   "(   ");  addList(next);  add(   ")   ");  }  break;  case  Token.STRING:    [BUGGY]  if(NodeUtil.isExpressionNode(n)||  NodeUtil.isVarDeclaration(n))  {  [BUGGY]    ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(     "Unexpected  String  children:     "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(NodeUtil.isExpressionNode(n)||  NodeUtil.isVarDeclaration(n))  {	  if(NodeUtil.isExpressionNode(n))    {    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
149	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(n)&&  NodeUtil.isExpressionNode(n))  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure    [CONTEXT]      Node  next  =  first.getNext();  if  (next  !=  null)  {  add(   "(   ");  addList(next);  add(   ")   ");  }  break;  case  Token.STRING:    [BUGGY]  if(NodeUtil.isExpressionNode(n)&&  NodeUtil.isExpressionNode(n))  {  [BUGGY]    ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(     "Unexpected  String  children:     "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(NodeUtil.isExpressionNode(n)&&  NodeUtil.isExpressionNode(n))  {	  if(NodeUtil.isExpressionNode(n))    {    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
150	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(n)&&  first.getFirstChild()!=  null)  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure    [CONTEXT]      Node  next  =  first.getNext();  if  (next  !=  null)  {  add(   "(   ");  addList(next);  add(   ")   ");  }  break;  case  Token.STRING:    [BUGGY]  if(NodeUtil.isExpressionNode(n)&&  first.getFirstChild()!=  null)  {  [BUGGY]    ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(     "Unexpected  String  children:     "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(NodeUtil.isExpressionNode(n)&&  first.getFirstChild()!=  null)  {	  if(NodeUtil.isExpressionNode(n))    {    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
151	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(n)&&  childCount  ==  ((  n.getNext()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]      Node  next  =  first.getNext();  if  (next  !=  null)  {  add(   "(   ");  addList(next);  add(   ")   ");  }  break;  case  Token.STRING:    [BUGGY]  if(NodeUtil.isExpressionNode(n)&&  childCount  ==  ((  n.getNext()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {  [BUGGY]    ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(     "Unexpected  String  children:     "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(NodeUtil.isExpressionNode(n)&&  childCount  ==  ((  n.getNext()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {	  if(NodeUtil.isExpressionNode(first)&&    childCount!=    ((    n.getParent()!=    null    &&    n.getParent().getType()    ==    Token.STRING)?    1    :    0))    {    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
152	[BUG]  [BUGGY]  if(first.getType()  ==  Token.STRING  &&  first.getFirstChild()  ==  null)  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]      Node  next  =  first.getNext();  if  (next  !=  null)  {  add(   "(   ");  addList(next);  add(   ")   ");  }  break;  case  Token.STRING:    [BUGGY]  if(first.getType()  ==  Token.STRING  &&  first.getFirstChild()  ==  null)  {  [BUGGY]    ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(     "Unexpected  String  children:     "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(first.getType()  ==  Token.STRING  &&  first.getFirstChild()  ==  null)  {	  if(first.getType()    ==    Token.STRING)    {    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
153	[BUG]  [BUGGY]  if(first  ==  null  ||  first.getFirstChild().getType()  ==  Token.STRING)  {  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]      Node  next  =  first.getNext();  if  (next  !=  null)  {  add(   "(   ");  addList(next);  add(   ")   ");  }  break;  case  Token.STRING:    [BUGGY]  if(first  ==  null  ||  first.getFirstChild().getType()  ==  Token.STRING)  {  [BUGGY]    ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(     "Unexpected  String  children:     "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(first  ==  null  ||  first.getFirstChild().getType()  ==  Token.STRING)  {	  if(first    ==    null    ||    first.getType()    ==    Token.STRING)    {    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
154	[BUG]  [BUGGY]  if(first  >=  null  ||  first.getType()  ==  Token.STRING)  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]      Node  next  =  first.getNext();  if  (next  !=  null)  {  add(   "(   ");  addList(next);  add(   ")   ");  }  break;  case  Token.STRING:    [BUGGY]  if(first  >=  null  ||  first.getType()  ==  Token.STRING)  {  [BUGGY]    ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(     "Unexpected  String  children:     "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(first  >=  null  ||  first.getType()  ==  Token.STRING)  {	  if(first    ==    null    ||    first.getType()    ==    Token.STRING)    {    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
155	[BUG]  [BUGGY]  if(childCount  ==  0)  {  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure    [CONTEXT]      Node  next  =  first.getNext();  if  (next  !=  null)  {  add(   "(   ");  addList(next);  add(   ")   ");  }  break;  case  Token.STRING:    [BUGGY]  if(childCount  ==  0)  {  [BUGGY]    ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(     "Unexpected  String  children:     "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(childCount  ==  0)  {	  if(childCount    ==    1)    {    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
156	[BUG]  [BUGGY]  if(childCount  ==  1  &&  first.getFirstChild()!=  null  &&  first.getNext().getType()  ==  Token.STRING)  {  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]      Node  next  =  first.getNext();  if  (next  !=  null)  {  add(   "(   ");  addList(next);  add(   ")   ");  }  break;  case  Token.STRING:    [BUGGY]  if(childCount  ==  1  &&  first.getFirstChild()!=  null  &&  first.getNext().getType()  ==  Token.STRING)  {  [BUGGY]    ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(     "Unexpected  String  children:     "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(childCount  ==  1  &&  first.getFirstChild()!=  null  &&  first.getNext().getType()  ==  Token.STRING)  {	  if(childCount    ==    1)    {    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
157	[BUG]  [BUGGY]  if(childCount  ==  1  &&  first.getFirstChild()!=  null  &&  first.getLastChild().getString().equals( "prototype "))  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]      Node  next  =  first.getNext();  if  (next  !=  null)  {  add(   "(   ");  addList(next);  add(   ")   ");  }  break;  case  Token.STRING:    [BUGGY]  if(childCount  ==  1  &&  first.getFirstChild()!=  null  &&  first.getLastChild().getString().equals( "prototype "))  {  [BUGGY]    ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(     "Unexpected  String  children:     "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(childCount  ==  1  &&  first.getFirstChild()!=  null  &&  first.getLastChild().getString().equals( "prototype "))  {	  if(childCount    ==    1)    {    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
158	[BUG]  [BUGGY]  if(childCount  ==  1  &&  first.getFirstChild()!=  null  &&  first.getLastChild().getString().equals( "string "))  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]      Node  next  =  first.getNext();  if  (next  !=  null)  {  add(   "(   ");  addList(next);  add(   ")   ");  }  break;  case  Token.STRING:    [BUGGY]  if(childCount  ==  1  &&  first.getFirstChild()!=  null  &&  first.getLastChild().getString().equals( "string "))  {  [BUGGY]    ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(     "Unexpected  String  children:     "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(childCount  ==  1  &&  first.getFirstChild()!=  null  &&  first.getLastChild().getString().equals( "string "))  {	  if(childCount    ==    1)    {    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
159	[BUG]  [BUGGY]  if(childCount  ==  1  &&  first.getFirstChild()!=  null  &&  first.getLastChild().getString().length()  >  0)  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]      Node  next  =  first.getNext();  if  (next  !=  null)  {  add(   "(   ");  addList(next);  add(   ")   ");  }  break;  case  Token.STRING:    [BUGGY]  if(childCount  ==  1  &&  first.getFirstChild()!=  null  &&  first.getLastChild().getString().length()  >  0)  {  [BUGGY]    ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(     "Unexpected  String  children:     "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(childCount  ==  1  &&  first.getFirstChild()!=  null  &&  first.getLastChild().getString().length()  >  0)  {	  if(childCount    ==    1)    {    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
160	[BUG]  [BUGGY]  if(NodeUtil.isObjectLitKey(first))  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure    [CONTEXT]      Node  next  =  first.getNext();  if  (next  !=  null)  {  add(   "(   ");  addList(next);  add(   ")   ");  }  break;  case  Token.STRING:    [BUGGY]  if(NodeUtil.isObjectLitKey(first))  {  [BUGGY]    ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(     "Unexpected  String  children:     "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(NodeUtil.isObjectLitKey(first))  {	  if(NodeUtil.isExpressionNode(first))    {    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
161	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(first)&&  NodeUtil.isVarDeclaration(first))  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure    [CONTEXT]      Node  next  =  first.getNext();  if  (next  !=  null)  {  add(   "(   ");  addList(next);  add(   ")   ");  }  break;  case  Token.STRING:    [BUGGY]  if(NodeUtil.isExpressionNode(first)&&  NodeUtil.isVarDeclaration(first))  {  [BUGGY]    ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(     "Unexpected  String  children:     "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(NodeUtil.isExpressionNode(first)&&  NodeUtil.isVarDeclaration(first))  {	  if(NodeUtil.isExpressionNode(first))    {    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
