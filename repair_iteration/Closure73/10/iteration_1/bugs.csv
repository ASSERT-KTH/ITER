bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING  &&  childCount!=  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [CE]  orphaned  case  [FE]    ComparisonFailure  [CONTEXT]    Node  next  =  first.getNext();  if  (next  !=  null)  {  add( "( ");  addList(next);  add( ") ");  }  break;  case  Token.STRING:  [BUGGY]  if(n.getType()  ==  Token.STRING  &&  childCount!=  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [BUGGY]  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(   "Unexpected  String  children:   "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(n.getType()  ==  Token.STRING  &&  childCount!=  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {	if  (childCount  !=  ((n.getParent()  !=  null  &&    n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  	non-compiled	[CE]  orphaned  case	20	None	replace
2	[BUG]  [BUGGY]  if(childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {  [CE]  illegal  start  of  expression  [FE]      ComparisonFailure  [CONTEXT]    Node  next  =  first.getNext();  if  (next  !=  null)  {  add( "( ");  addList(next);  add( ") ");  }  break;  case  Token.STRING:  [BUGGY]  if(childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {  [BUGGY]  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(   "Unexpected  String  children:   "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {	if  (childCount  !=  ((n.getParent()  !=  null  &&    n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
3	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING  ||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [CE]  orphaned  case  [FE]        ComparisonFailure  [CONTEXT]    Node  next  =  first.getNext();  if  (next  !=  null)  {  add( "( ");  addList(next);  add( ") ");  }  break;  case  Token.STRING:  [BUGGY]  if(n.getType()  ==  Token.STRING  ||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [BUGGY]  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(   "Unexpected  String  children:   "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(n.getType()  ==  Token.STRING  ||  childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {	if  (childCount  !=  ((n.getParent()  !=  null  &&    n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  	non-compiled	[CE]  orphaned  case	20	None	replace
4	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING  ||  childCount!=  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [CE]  orphaned  case  [FE]          ComparisonFailure  [CONTEXT]    Node  next  =  first.getNext();  if  (next  !=  null)  {  add( "( ");  addList(next);  add( ") ");  }  break;  case  Token.STRING:  [BUGGY]  if(n.getType()  ==  Token.STRING  ||  childCount!=  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [BUGGY]  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(   "Unexpected  String  children:   "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(n.getType()  ==  Token.STRING  ||  childCount!=  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {	if  (childCount  !=  ((n.getParent()  !=  null  &&    n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  	non-compiled	[CE]  orphaned  case	20	None	replace
5	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING)  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure  [CONTEXT]    Node  next  =  first.getNext();  if  (next  !=  null)  {  add( "( ");  addList(next);  add( ") ");  }  break;  case  Token.STRING:  [BUGGY]  if(n.getType()  ==  Token.STRING)  {  [BUGGY]  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(   "Unexpected  String  children:   "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(n.getType()  ==  Token.STRING)  {	if  (childCount  !=  ((n.getParent()  !=  null  &&    n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
6	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING  &&  childCount!=  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.FUNCTION)?  1  :  0))  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure  [CONTEXT]    Node  next  =  first.getNext();  if  (next  !=  null)  {  add( "( ");  addList(next);  add( ") ");  }  break;  case  Token.STRING:  [BUGGY]  if(n.getType()  ==  Token.STRING  &&  childCount!=  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.FUNCTION)?  1  :  0))  {  [BUGGY]  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(   "Unexpected  String  children:   "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(n.getType()  ==  Token.STRING  &&  childCount!=  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.FUNCTION)?  1  :  0))  {	if  (childCount  !=  ((n.getParent()  !=  null  &&    n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
7	[BUG]  [BUGGY]  if(childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure  [CONTEXT]    Node  next  =  first.getNext();  if  (next  !=  null)  {  add( "( ");  addList(next);  add( ") ");  }  break;  case  Token.STRING:  [BUGGY]  if(childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [BUGGY]  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(   "Unexpected  String  children:   "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(childCount  ==  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {	if  (childCount  !=  ((n.getParent()  !=  null  &&    n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
8	[BUG]  [BUGGY]    [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure  [CONTEXT]    Node  next  =  first.getNext();  if  (next  !=  null)  {  add( "( ");  addList(next);  add( ") ");  }  break;  case  Token.STRING:  [BUGGY]    [BUGGY]  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(   "Unexpected  String  children:   "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	  	if  (childCount  !=  ((n.getParent()  !=  null  &&    n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
9	[BUG]  [BUGGY]  if(childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getLastChild().getType()  ==  Token.STRING)||  childCount!=  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [CE]  [FE]    ComparisonFailure  [CONTEXT]    Node  next  =  first.getNext();  if  (next  !=  null)  {  add( "( ");  addList(next);  add( ") ");  }  break;  case  Token.STRING:  [BUGGY]  if(childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getLastChild().getType()  ==  Token.STRING)||  childCount!=  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [BUGGY]  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(   "Unexpected  String  children:   "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getLastChild().getType()  ==  Token.STRING)||  childCount!=  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {	if  (childCount  !=  ((n.getParent()  !=  null  &&    n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  	non-compiled	[CE]  	20	None	replace
10	[BUG]  [BUGGY]  if(childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getNext().getType()  ==  Token.STRING)||  childCount!=  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [CE]  [FE]      ComparisonFailure  [CONTEXT]    Node  next  =  first.getNext();  if  (next  !=  null)  {  add( "( ");  addList(next);  add( ") ");  }  break;  case  Token.STRING:  [BUGGY]  if(childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getNext().getType()  ==  Token.STRING)||  childCount!=  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [BUGGY]  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(   "Unexpected  String  children:   "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getNext().getType()  ==  Token.STRING)||  childCount!=  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {	if  (childCount  !=  ((n.getParent()  !=  null  &&    n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  	non-compiled	[CE]  	20	None	replace
11	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(first)&&  childCount!=  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure  [CONTEXT]    Node  next  =  first.getNext();  if  (next  !=  null)  {  add( "( ");  addList(next);  add( ") ");  }  break;  case  Token.STRING:  [BUGGY]  if(NodeUtil.isExpressionNode(first)&&  childCount!=  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {  [BUGGY]  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(   "Unexpected  String  children:   "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(NodeUtil.isExpressionNode(first)&&  childCount!=  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.STRING)?  1  :  0))  {	if  (childCount  !=  ((n.getParent()  !=  null  &&    n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
12	[BUG]  [BUGGY]  if(childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getLastChild().getType()  ==  Token.STRING)||  childCount!=  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0  [CE]  [FE]          ComparisonFailure  [CONTEXT]    Node  next  =  first.getNext();  if  (next  !=  null)  {  add( "( ");  addList(next);  add( ") ");  }  break;  case  Token.STRING:  [BUGGY]  if(childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getLastChild().getType()  ==  Token.STRING)||  childCount!=  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0  [BUGGY]  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(   "Unexpected  String  children:   "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getLastChild().getType()  ==  Token.STRING)||  childCount!=  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0	if  (childCount  !=  ((n.getParent()  !=  null  &&    n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  	non-compiled	[CE]  	20	None	replace
13	[BUG]  [BUGGY]  if(childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getLastChild().getType()  ==  Token.STRING)||  childCount!=  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0)  [CE]  [FE]            ComparisonFailure  [CONTEXT]    Node  next  =  first.getNext();  if  (next  !=  null)  {  add( "( ");  addList(next);  add( ") ");  }  break;  case  Token.STRING:  [BUGGY]  if(childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getLastChild().getType()  ==  Token.STRING)||  childCount!=  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0)  [BUGGY]  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(   "Unexpected  String  children:   "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(childCount  ==  ((  n.getFirstChild()!=  null  &&  n.getLastChild().getType()  ==  Token.STRING)||  childCount!=  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0)	if  (childCount  !=  ((n.getParent()  !=  null  &&    n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  	non-compiled	[CE]  	20	None	replace
14	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(first)&&  childCount!=  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure  [CONTEXT]    Node  next  =  first.getNext();  if  (next  !=  null)  {  add( "( ");  addList(next);  add( ") ");  }  break;  case  Token.STRING:  [BUGGY]  if(NodeUtil.isExpressionNode(first)&&  childCount!=  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {  [BUGGY]  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(   "Unexpected  String  children:   "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(NodeUtil.isExpressionNode(first)&&  childCount!=  ((  n.getParent()!=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)?  1  :  0))  {	if  (childCount  !=  ((n.getParent()  !=  null  &&    n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
15	[BUG]  [BUGGY]  if(childCount  ==  1)  {  [CE]  illegal  start  of  expression  [FE]    ComparisonFailure  [CONTEXT]    Node  next  =  first.getNext();  if  (next  !=  null)  {  add( "( ");  addList(next);  add( ") ");  }  break;  case  Token.STRING:  [BUGGY]  if(childCount  ==  1)  {  [BUGGY]  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(   "Unexpected  String  children:   "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(childCount  ==  1)  {	if  (childCount  !=  ((n.getParent()  !=  null  &&    n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
16	[BUG]  [BUGGY]  if(first  ==  null  ||  first.getType()  ==  Token.STRING)  {  [CE]  illegal  start  of  expression  [FE]      ComparisonFailure  [CONTEXT]    Node  next  =  first.getNext();  if  (next  !=  null)  {  add( "( ");  addList(next);  add( ") ");  }  break;  case  Token.STRING:  [BUGGY]  if(first  ==  null  ||  first.getType()  ==  Token.STRING)  {  [BUGGY]  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(   "Unexpected  String  children:   "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(first  ==  null  ||  first.getType()  ==  Token.STRING)  {	if  (childCount  !=  ((n.getParent()  !=  null  &&    n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
17	[BUG]  [BUGGY]  if(first!=  null)  {  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure  [CONTEXT]    Node  next  =  first.getNext();  if  (next  !=  null)  {  add( "( ");  addList(next);  add( ") ");  }  break;  case  Token.STRING:  [BUGGY]  if(first!=  null)  {  [BUGGY]  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(   "Unexpected  String  children:   "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(first!=  null)  {	if  (childCount  !=  ((n.getParent()  !=  null  &&    n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
18	[BUG]  [BUGGY]  if(first.getType()  ==  Token.STRING)  {  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure  [CONTEXT]    Node  next  =  first.getNext();  if  (next  !=  null)  {  add( "( ");  addList(next);  add( ") ");  }  break;  case  Token.STRING:  [BUGGY]  if(first.getType()  ==  Token.STRING)  {  [BUGGY]  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(   "Unexpected  String  children:   "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(first.getType()  ==  Token.STRING)  {	if  (childCount  !=  ((n.getParent()  !=  null  &&    n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
19	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(n))  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure  [CONTEXT]    Node  next  =  first.getNext();  if  (next  !=  null)  {  add( "( ");  addList(next);  add( ") ");  }  break;  case  Token.STRING:  [BUGGY]  if(NodeUtil.isExpressionNode(n))  {  [BUGGY]  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(   "Unexpected  String  children:   "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(NodeUtil.isExpressionNode(n))  {	if  (childCount  !=  ((n.getParent()  !=  null  &&    n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
20	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(first))  {  [CE]  [FE]              ComparisonFailure  [CONTEXT]    Node  next  =  first.getNext();  if  (next  !=  null)  {  add( "( ");  addList(next);  add( ") ");  }  break;  case  Token.STRING:  [BUGGY]  if(NodeUtil.isExpressionNode(first))  {  [BUGGY]  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(   "Unexpected  String  children:   "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));  break;  case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	628	630	1	replace	if(NodeUtil.isExpressionNode(first))  {	if  (childCount  !=  ((n.getParent()  !=  null  &&    n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  	non-compiled	[CE]  	20	None	replace
