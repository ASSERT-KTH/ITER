bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(doubleq  <  doubleq)  {  [CE]  illegal  start  of  expression  [FE]    ComparisonFailure  [CONTEXT]    for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  ' "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  [BUGGY]  if(doubleq  <  doubleq)  {  [BUGGY]    quote  =  '\'';  doublequote  =   "\ " ";  singlequote  =   "\\\' ";  }  else  {  quote  =  '\ "';  doublequote  =   "\\\ " ";  singlequote  =   "\' ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.24253562503633297	952	952	1	replace	if(doubleq  <  doubleq)  {	if  (singleq  <  doubleq)  {  	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
2	[BUG]  [BUGGY]  if(singleq  <=  doubleq)  {  [CE]  illegal  start  of  expression  [FE]      ComparisonFailure  [CONTEXT]    for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  ' "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  [BUGGY]  if(singleq  <=  doubleq)  {  [BUGGY]    quote  =  '\'';  doublequote  =   "\ " ";  singlequote  =   "\\\' ";  }  else  {  quote  =  '\ "';  doublequote  =   "\\\ " ";  singlequote  =   "\' ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.24253562503633297	952	952	1	replace	if(singleq  <=  doubleq)  {	if  (singleq  <  doubleq)  {  	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
3	[BUG]  [BUGGY]  if(doubleq  <  singleq)  {  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure  [CONTEXT]    for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  ' "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  [BUGGY]  if(doubleq  <  singleq)  {  [BUGGY]    quote  =  '\'';  doublequote  =   "\ " ";  singlequote  =   "\\\' ";  }  else  {  quote  =  '\ "';  doublequote  =   "\\\ " ";  singlequote  =   "\' ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.24253562503633297	952	952	1	replace	if(doubleq  <  singleq)  {	if  (singleq  <  doubleq)  {  	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
4	[BUG]  [BUGGY]    [CE]  illegal  start  of  expression  [FE]          ComparisonFailure  [CONTEXT]    for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  ' "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  [BUGGY]    [BUGGY]    quote  =  '\'';  doublequote  =   "\ " ";  singlequote  =   "\\\' ";  }  else  {  quote  =  '\ "';  doublequote  =   "\\\ " ";  singlequote  =   "\' ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.24253562503633297	952	952	1	replace	  	if  (singleq  <  doubleq)  {  	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
5	[BUG]  [BUGGY]  if(doublequote  <  doubleq)  {  [CE]  illegal  start  of  expression  [FE]    ComparisonFailure  [CONTEXT]    for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  ' "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  [BUGGY]  if(doublequote  <  doubleq)  {  [BUGGY]    quote  =  '\'';  doublequote  =   "\ " ";  singlequote  =   "\\\' ";  }  else  {  quote  =  '\ "';  doublequote  =   "\\\ " ";  singlequote  =   "\' ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.24253562503633297	952	952	1	replace	if(doublequote  <  doubleq)  {	if  (singleq  <  doubleq)  {  	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
