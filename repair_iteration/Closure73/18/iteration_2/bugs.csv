bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(doubleq  <=  doubleq)  {  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure    [CONTEXT]      for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '   "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;    [BUGGY]  if(doubleq  <=  doubleq)  {  [BUGGY]      quote  =  '\'';  doublequote  =     "\   "   ";  singlequote  =     "\\\'   ";  }  else  {  quote  =  '\   "';  doublequote  =     "\\\   "   ";  singlequote  =     "\'   ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.24253562503633297	952	952	1	replace	if(doubleq  <=  doubleq)  {	  if(doubleq    <    doubleq)    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
2	[BUG]  [BUGGY]  if(doubleq  <=  Doubleq)  {  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]      for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '   "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;    [BUGGY]  if(doubleq  <=  Doubleq)  {  [BUGGY]      quote  =  '\'';  doublequote  =     "\   "   ";  singlequote  =     "\\\'   ";  }  else  {  quote  =  '\   "';  doublequote  =     "\\\   "   ";  singlequote  =     "\'   ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.24253562503633297	952	952	1	replace	if(doubleq  <=  Doubleq)  {	  if(doubleq    <    doubleq)    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
3	[BUG]  [BUGGY]  if(doubleq  <  doubleq  ||  doubleq  >  Doubleq)  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]      for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '   "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;    [BUGGY]  if(doubleq  <  doubleq  ||  doubleq  >  Doubleq)  {  [BUGGY]      quote  =  '\'';  doublequote  =     "\   "   ";  singlequote  =     "\\\'   ";  }  else  {  quote  =  '\   "';  doublequote  =     "\\\   "   ";  singlequote  =     "\'   ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.24253562503633297	952	952	1	replace	if(doubleq  <  doubleq  ||  doubleq  >  Doubleq)  {	  if(doubleq    <    doubleq)    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
4	[BUG]  [BUGGY]  if(doubleq  >=  doubleq)  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]      for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '   "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;    [BUGGY]  if(doubleq  >=  doubleq)  {  [BUGGY]      quote  =  '\'';  doublequote  =     "\   "   ";  singlequote  =     "\\\'   ";  }  else  {  quote  =  '\   "';  doublequote  =     "\\\   "   ";  singlequote  =     "\'   ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.24253562503633297	952	952	1	replace	if(doubleq  >=  doubleq)  {	  if(doubleq    <    doubleq)    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
5	[BUG]  [BUGGY]  if(doubleq  <  0)  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]      for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '   "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;    [BUGGY]  if(doubleq  <  0)  {  [BUGGY]      quote  =  '\'';  doublequote  =     "\   "   ";  singlequote  =     "\\\'   ";  }  else  {  quote  =  '\   "';  doublequote  =     "\\\   "   ";  singlequote  =     "\'   ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.24253562503633297	952	952	1	replace	if(doubleq  <  0)  {	  if(doubleq    <    doubleq)    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
6	[BUG]  [BUGGY]  char  quote  =  s.charAt(i);  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]      for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '   "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;    [BUGGY]  char  quote  =  s.charAt(i);  [BUGGY]      quote  =  '\'';  doublequote  =     "\   "   ";  singlequote  =     "\\\'   ";  }  else  {  quote  =  '\   "';  doublequote  =     "\\\   "   ";  singlequote  =     "\'   ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.24253562503633297	952	952	1	replace	char  quote  =  s.charAt(i);	      	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
7	[BUG]  [BUGGY]  String  quote  =  s.substring(0,  i);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]      for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '   "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;    [BUGGY]  String  quote  =  s.substring(0,  i);  [BUGGY]      quote  =  '\'';  doublequote  =     "\   "   ";  singlequote  =     "\\\'   ";  }  else  {  quote  =  '\   "';  doublequote  =     "\\\   "   ";  singlequote  =     "\'   ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.24253562503633297	952	952	1	replace	String  quote  =  s.substring(0,  i);	      	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
8	[BUG]  [BUGGY]  doublequote  =  s.charAt(i);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure    [CONTEXT]      for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '   "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;    [BUGGY]  doublequote  =  s.charAt(i);  [BUGGY]      quote  =  '\'';  doublequote  =     "\   "   ";  singlequote  =     "\\\'   ";  }  else  {  quote  =  '\   "';  doublequote  =     "\\\   "   ";  singlequote  =     "\'   ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.24253562503633297	952	952	1	replace	doublequote  =  s.charAt(i);	      	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
9	[BUG]  [BUGGY]  String  singlequote  =  s.substring(0,  i);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure    [CONTEXT]      for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '   "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;    [BUGGY]  String  singlequote  =  s.substring(0,  i);  [BUGGY]      quote  =  '\'';  doublequote  =     "\   "   ";  singlequote  =     "\\\'   ";  }  else  {  quote  =  '\   "';  doublequote  =     "\\\   "   ";  singlequote  =     "\'   ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.24253562503633297	952	952	1	replace	String  singlequote  =  s.substring(0,  i);	      	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
10	[BUG]  [BUGGY]  doublequote  =  Double.parseDouble(s);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure    [CONTEXT]      for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '   "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;    [BUGGY]  doublequote  =  Double.parseDouble(s);  [BUGGY]      quote  =  '\'';  doublequote  =     "\   "   ";  singlequote  =     "\\\'   ";  }  else  {  quote  =  '\   "';  doublequote  =     "\\\   "   ";  singlequote  =     "\'   ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.24253562503633297	952	952	1	replace	doublequote  =  Double.parseDouble(s);	      	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
11	[BUG]  [BUGGY]  char  quote  =  s.charAt(0);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure    [CONTEXT]      for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '   "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;    [BUGGY]  char  quote  =  s.charAt(0);  [BUGGY]      quote  =  '\'';  doublequote  =     "\   "   ";  singlequote  =     "\\\'   ";  }  else  {  quote  =  '\   "';  doublequote  =     "\\\   "   ";  singlequote  =     "\'   ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.24253562503633297	952	952	1	replace	char  quote  =  s.charAt(0);	      	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
12	[BUG]  [BUGGY]  doublequote  =  s.charAt(0);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure    [CONTEXT]      for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '   "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;    [BUGGY]  doublequote  =  s.charAt(0);  [BUGGY]      quote  =  '\'';  doublequote  =     "\   "   ";  singlequote  =     "\\\'   ";  }  else  {  quote  =  '\   "';  doublequote  =     "\\\   "   ";  singlequote  =     "\'   ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.24253562503633297	952	952	1	replace	doublequote  =  s.charAt(0);	      	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
13	[BUG]  [BUGGY]  if(doublequote  <=  doubleq)  {  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure    [CONTEXT]      for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '   "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;    [BUGGY]  if(doublequote  <=  doubleq)  {  [BUGGY]      quote  =  '\'';  doublequote  =     "\   "   ";  singlequote  =     "\\\'   ";  }  else  {  quote  =  '\   "';  doublequote  =     "\\\   "   ";  singlequote  =     "\'   ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.24253562503633297	952	952	1	replace	if(doublequote  <=  doubleq)  {	  if(doublequote    <    doubleq)    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
14	[BUG]  [BUGGY]  if(doublequote  <=  Doubleq)  {  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]      for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '   "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;    [BUGGY]  if(doublequote  <=  Doubleq)  {  [BUGGY]      quote  =  '\'';  doublequote  =     "\   "   ";  singlequote  =     "\\\'   ";  }  else  {  quote  =  '\   "';  doublequote  =     "\\\   "   ";  singlequote  =     "\'   ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.24253562503633297	952	952	1	replace	if(doublequote  <=  Doubleq)  {	  if(doublequote    <    doubleq)    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
15	[BUG]  [BUGGY]  if(doublequote  <  0)  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]      for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '   "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;    [BUGGY]  if(doublequote  <  0)  {  [BUGGY]      quote  =  '\'';  doublequote  =     "\   "   ";  singlequote  =     "\\\'   ";  }  else  {  quote  =  '\   "';  doublequote  =     "\\\   "   ";  singlequote  =     "\'   ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.24253562503633297	952	952	1	replace	if(doublequote  <  0)  {	  if(doublequote    <    doubleq)    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
16	[BUG]  [BUGGY]  if(singlequote  <  doubleq)  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]      for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '   "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;    [BUGGY]  if(singlequote  <  doubleq)  {  [BUGGY]      quote  =  '\'';  doublequote  =     "\   "   ";  singlequote  =     "\\\'   ";  }  else  {  quote  =  '\   "';  doublequote  =     "\\\   "   ";  singlequote  =     "\'   ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.24253562503633297	952	952	1	replace	if(singlequote  <  doubleq)  {	  if(doublequote    <    doubleq)    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
17	[BUG]  [BUGGY]  if(doublequote  >=  doubleq)  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]      for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '   "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;    [BUGGY]  if(doublequote  >=  doubleq)  {  [BUGGY]      quote  =  '\'';  doublequote  =     "\   "   ";  singlequote  =     "\\\'   ";  }  else  {  quote  =  '\   "';  doublequote  =     "\\\   "   ";  singlequote  =     "\'   ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.24253562503633297	952	952	1	replace	if(doublequote  >=  doubleq)  {	  if(doublequote    <    doubleq)    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
18	[BUG]  [BUGGY]  if(doublequote  ==  doubleq)  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure    [CONTEXT]      for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '   "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;    [BUGGY]  if(doublequote  ==  doubleq)  {  [BUGGY]      quote  =  '\'';  doublequote  =     "\   "   ";  singlequote  =     "\\\'   ";  }  else  {  quote  =  '\   "';  doublequote  =     "\\\   "   ";  singlequote  =     "\'   ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.24253562503633297	952	952	1	replace	if(doublequote  ==  doubleq)  {	  if(doublequote    <    doubleq)    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
19	[BUG]  [BUGGY]  if(doubleq  <=  singleq)  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]      for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '   "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;    [BUGGY]  if(doubleq  <=  singleq)  {  [BUGGY]      quote  =  '\'';  doublequote  =     "\   "   ";  singlequote  =     "\\\'   ";  }  else  {  quote  =  '\   "';  doublequote  =     "\\\   "   ";  singlequote  =     "\'   ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.24253562503633297	952	952	1	replace	if(doubleq  <=  singleq)  {	  if(doubleq    <    singleq)    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
20	[BUG]  [BUGGY]  if(doubleq  <  doublequote)  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]      for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '   "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;    [BUGGY]  if(doubleq  <  doublequote)  {  [BUGGY]      quote  =  '\'';  doublequote  =     "\   "   ";  singlequote  =     "\\\'   ";  }  else  {  quote  =  '\   "';  doublequote  =     "\\\   "   ";  singlequote  =     "\'   ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.24253562503633297	952	952	1	replace	if(doubleq  <  doublequote)  {	  if(doubleq    <    singleq)    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
21	[BUG]  [BUGGY]  if(doubleq  >=  singleq)  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]      for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '   "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;    [BUGGY]  if(doubleq  >=  singleq)  {  [BUGGY]      quote  =  '\'';  doublequote  =     "\   "   ";  singlequote  =     "\\\'   ";  }  else  {  quote  =  '\   "';  doublequote  =     "\\\   "   ";  singlequote  =     "\'   ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.24253562503633297	952	952	1	replace	if(doubleq  >=  singleq)  {	  if(doubleq    <    singleq)    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
22	[BUG]  [BUGGY]  if(doubleq  <  1  ||  doubleq  <  singleq)  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure    [CONTEXT]      for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '   "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;    [BUGGY]  if(doubleq  <  1  ||  doubleq  <  singleq)  {  [BUGGY]      quote  =  '\'';  doublequote  =     "\   "   ";  singlequote  =     "\\\'   ";  }  else  {  quote  =  '\   "';  doublequote  =     "\\\   "   ";  singlequote  =     "\'   ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.24253562503633297	952	952	1	replace	if(doubleq  <  1  ||  doubleq  <  singleq)  {	  if(doubleq    <    singleq)    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
23	[BUG]  [BUGGY]  if(singleq  <=  0)  {  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]      for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '   "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;    [BUGGY]  if(singleq  <=  0)  {  [BUGGY]      quote  =  '\'';  doublequote  =     "\   "   ";  singlequote  =     "\\\'   ";  }  else  {  quote  =  '\   "';  doublequote  =     "\\\   "   ";  singlequote  =     "\'   ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.24253562503633297	952	952	1	replace	if(singleq  <=  0)  {	  if(singleq    <=    doubleq)    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
24	[BUG]  [BUGGY]  if(singleq  <=  Double.POSITIVE_INFINITY)  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]      for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '   "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;    [BUGGY]  if(singleq  <=  Double.POSITIVE_INFINITY)  {  [BUGGY]      quote  =  '\'';  doublequote  =     "\   "   ";  singlequote  =     "\\\'   ";  }  else  {  quote  =  '\   "';  doublequote  =     "\\\   "   ";  singlequote  =     "\'   ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.24253562503633297	952	952	1	replace	if(singleq  <=  Double.POSITIVE_INFINITY)  {	  if(singleq    <=    doubleq)    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
25	[BUG]  [BUGGY]  if(singleq  <=  Double.MIN_VALUE  ||  singleq  <=  Double.MAX_VALUE)  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]      for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '   "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;    [BUGGY]  if(singleq  <=  Double.MIN_VALUE  ||  singleq  <=  Double.MAX_VALUE)  {  [BUGGY]      quote  =  '\'';  doublequote  =     "\   "   ";  singlequote  =     "\\\'   ";  }  else  {  quote  =  '\   "';  doublequote  =     "\\\   "   ";  singlequote  =     "\'   ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.24253562503633297	952	952	1	replace	if(singleq  <=  Double.MIN_VALUE  ||  singleq  <=  Double.MAX_VALUE)  {	  if(singleq    <=    doubleq)    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
26	[BUG]  [BUGGY]  if(singleq  <=  Double.MIN_VALUE  ||  singleq  >  Double.MAX_VALUE)  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]      for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '   "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;    [BUGGY]  if(singleq  <=  Double.MIN_VALUE  ||  singleq  >  Double.MAX_VALUE)  {  [BUGGY]      quote  =  '\'';  doublequote  =     "\   "   ";  singlequote  =     "\\\'   ";  }  else  {  quote  =  '\   "';  doublequote  =     "\\\   "   ";  singlequote  =     "\'   ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.24253562503633297	952	952	1	replace	if(singleq  <=  Double.MIN_VALUE  ||  singleq  >  Double.MAX_VALUE)  {	  if(singleq    <=    doubleq)    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
27	[BUG]  [BUGGY]  if(singleq  ==  doubleq)  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure    [CONTEXT]      for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '   "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;    [BUGGY]  if(singleq  ==  doubleq)  {  [BUGGY]      quote  =  '\'';  doublequote  =     "\   "   ";  singlequote  =     "\\\'   ";  }  else  {  quote  =  '\   "';  doublequote  =     "\\\   "   ";  singlequote  =     "\'   ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.24253562503633297	952	952	1	replace	if(singleq  ==  doubleq)  {	  if(singleq    <=    doubleq)    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
28	[BUG]  [BUGGY]  if(doubleq  <  doubleq  ||  Double.isNaN(singleq))  {  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure    [CONTEXT]      for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '   "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;    [BUGGY]  if(doubleq  <  doubleq  ||  Double.isNaN(singleq))  {  [BUGGY]      quote  =  '\'';  doublequote  =     "\   "   ";  singlequote  =     "\\\'   ";  }  else  {  quote  =  '\   "';  doublequote  =     "\\\   "   ";  singlequote  =     "\'   ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.24253562503633297	952	952	1	replace	if(doubleq  <  doubleq  ||  Double.isNaN(singleq))  {	  if(doubleq    <    doubleq)    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
29	[BUG]  [BUGGY]  if(doubleq  <  doubleq  &&  Double.isNaN(singleq))  {  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]      for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '   "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;    [BUGGY]  if(doubleq  <  doubleq  &&  Double.isNaN(singleq))  {  [BUGGY]      quote  =  '\'';  doublequote  =     "\   "   ";  singlequote  =     "\\\'   ";  }  else  {  quote  =  '\   "';  doublequote  =     "\\\   "   ";  singlequote  =     "\'   ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.24253562503633297	952	952	1	replace	if(doubleq  <  doubleq  &&  Double.isNaN(singleq))  {	  if(doubleq    <    doubleq)    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
30	[BUG]  [BUGGY]  if(doublequote!=  doubleq)  {  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure    [CONTEXT]      for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '   "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;    [BUGGY]  if(doublequote!=  doubleq)  {  [BUGGY]      quote  =  '\'';  doublequote  =     "\   "   ";  singlequote  =     "\\\'   ";  }  else  {  quote  =  '\   "';  doublequote  =     "\\\   "   ";  singlequote  =     "\'   ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.24253562503633297	952	952	1	replace	if(doublequote!=  doubleq)  {	  if(doublequote    <    doubleq)    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
31	[BUG]  [BUGGY]  doublequote  =  ''';  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]      for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '   "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;    [BUGGY]  doublequote  =  ''';  [BUGGY]      quote  =  '\'';  doublequote  =     "\   "   ";  singlequote  =     "\\\'   ";  }  else  {  quote  =  '\   "';  doublequote  =     "\\\   "   ";  singlequote  =     "\'   ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.24253562503633297	952	952	1	replace	doublequote  =  ''';	      	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
32	[BUG]  [BUGGY]  int  doubleq  =  s.indexOf(''');  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]      for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '   "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;    [BUGGY]  int  doubleq  =  s.indexOf(''');  [BUGGY]      quote  =  '\'';  doublequote  =     "\   "   ";  singlequote  =     "\\\'   ";  }  else  {  quote  =  '\   "';  doublequote  =     "\\\   "   ";  singlequote  =     "\'   ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.24253562503633297	952	952	1	replace	int  doubleq  =  s.indexOf(''');	      	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
33	[BUG]  [BUGGY]  String  doublequote  =  s.substring(0,  i);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure    [CONTEXT]      for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '   "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;    [BUGGY]  String  doublequote  =  s.substring(0,  i);  [BUGGY]      quote  =  '\'';  doublequote  =     "\   "   ";  singlequote  =     "\\\'   ";  }  else  {  quote  =  '\   "';  doublequote  =     "\\\   "   ";  singlequote  =     "\'   ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.24253562503633297	952	952	1	replace	String  doublequote  =  s.substring(0,  i);	      	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
34	[BUG]  [BUGGY]  if(singleq  <=  Double.POSITIVE_IN_FOR_INIT_CLAUSE)  {  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]      for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '   "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;    [BUGGY]  if(singleq  <=  Double.POSITIVE_IN_FOR_INIT_CLAUSE)  {  [BUGGY]      quote  =  '\'';  doublequote  =     "\   "   ";  singlequote  =     "\\\'   ";  }  else  {  quote  =  '\   "';  doublequote  =     "\\\   "   ";  singlequote  =     "\'   ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.24253562503633297	952	952	1	replace	if(singleq  <=  Double.POSITIVE_IN_FOR_INIT_CLAUSE)  {	  if(singleq    <=    doubleq)    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
35	[BUG]  [BUGGY]  if(singleq  <=  Double.POSITIVE_IN_CLAUSE)  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]      for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '   "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;    [BUGGY]  if(singleq  <=  Double.POSITIVE_IN_CLAUSE)  {  [BUGGY]      quote  =  '\'';  doublequote  =     "\   "   ";  singlequote  =     "\\\'   ";  }  else  {  quote  =  '\   "';  doublequote  =     "\\\   "   ";  singlequote  =     "\'   ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.24253562503633297	952	952	1	replace	if(singleq  <=  Double.POSITIVE_IN_CLAUSE)  {	  if(singleq    <=    doubleq)    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
36	[BUG]  [BUGGY]  if(singleq!=  doubleq)  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]      for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '   "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;    [BUGGY]  if(singleq!=  doubleq)  {  [BUGGY]      quote  =  '\'';  doublequote  =     "\   "   ";  singlequote  =     "\\\'   ";  }  else  {  quote  =  '\   "';  doublequote  =     "\\\   "   ";  singlequote  =     "\'   ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.24253562503633297	952	952	1	replace	if(singleq!=  doubleq)  {	  if(singleq    <=    doubleq)    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
37	[BUG]  [BUGGY]  if(doubleq  <  doubleq  &&  doubleq  <=  Double.POSITIVE_INFINITY)  {  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure    [CONTEXT]      for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '   "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;    [BUGGY]  if(doubleq  <  doubleq  &&  doubleq  <=  Double.POSITIVE_INFINITY)  {  [BUGGY]      quote  =  '\'';  doublequote  =     "\   "   ";  singlequote  =     "\\\'   ";  }  else  {  quote  =  '\   "';  doublequote  =     "\\\   "   ";  singlequote  =     "\'   ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.24253562503633297	952	952	1	replace	if(doubleq  <  doubleq  &&  doubleq  <=  Double.POSITIVE_INFINITY)  {	  if(doubleq    <    doubleq)    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
38	[BUG]  [BUGGY]  if(doubleq  <  doubleq  &&  doubleq  <=  Double.NEGATIVE_INIT_CLAUSE)  {  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]      for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '   "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;    [BUGGY]  if(doubleq  <  doubleq  &&  doubleq  <=  Double.NEGATIVE_INIT_CLAUSE)  {  [BUGGY]      quote  =  '\'';  doublequote  =     "\   "   ";  singlequote  =     "\\\'   ";  }  else  {  quote  =  '\   "';  doublequote  =     "\\\   "   ";  singlequote  =     "\'   ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.24253562503633297	952	952	1	replace	if(doubleq  <  doubleq  &&  doubleq  <=  Double.NEGATIVE_INIT_CLAUSE)  {	  if(doubleq    <    doubleq)    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
39	[BUG]  [BUGGY]  if(doubleq  <  doubleq  ||  doubleq  >  Doubleq.NEGATIVE_INIT_CLAUSE)  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]      for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '   "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;    [BUGGY]  if(doubleq  <  doubleq  ||  doubleq  >  Doubleq.NEGATIVE_INIT_CLAUSE)  {  [BUGGY]      quote  =  '\'';  doublequote  =     "\   "   ";  singlequote  =     "\\\'   ";  }  else  {  quote  =  '\   "';  doublequote  =     "\\\   "   ";  singlequote  =     "\'   ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.24253562503633297	952	952	1	replace	if(doubleq  <  doubleq  ||  doubleq  >  Doubleq.NEGATIVE_INIT_CLAUSE)  {	  if(doubleq    <    doubleq)    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
40	[BUG]  [BUGGY]  if(doubleq  <  doubleq  ||  doubleq  >  Doubleq.NEGATIVE_IN_FOR_INIT_CLAUSE)  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]      for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '   "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;    [BUGGY]  if(doubleq  <  doubleq  ||  doubleq  >  Doubleq.NEGATIVE_IN_FOR_INIT_CLAUSE)  {  [BUGGY]      quote  =  '\'';  doublequote  =     "\   "   ";  singlequote  =     "\\\'   ";  }  else  {  quote  =  '\   "';  doublequote  =     "\\\   "   ";  singlequote  =     "\'   ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.24253562503633297	952	952	1	replace	if(doubleq  <  doubleq  ||  doubleq  >  Doubleq.NEGATIVE_IN_FOR_INIT_CLAUSE)  {	  if(doubleq    <    doubleq)    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
41	[BUG]  [BUGGY]  if(doubleq  <  doubleq  &&  doubleq  <=  Double.POSITIVE_IN_FOR_INIT_CLAUSE)  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]      for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '   "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;    [BUGGY]  if(doubleq  <  doubleq  &&  doubleq  <=  Double.POSITIVE_IN_FOR_INIT_CLAUSE)  {  [BUGGY]      quote  =  '\'';  doublequote  =     "\   "   ";  singlequote  =     "\\\'   ";  }  else  {  quote  =  '\   "';  doublequote  =     "\\\   "   ";  singlequote  =     "\'   ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.24253562503633297	952	952	1	replace	if(doubleq  <  doubleq  &&  doubleq  <=  Double.POSITIVE_IN_FOR_INIT_CLAUSE)  {	  if(doubleq    <    doubleq)    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
42	[BUG]  [BUGGY]  if(singleq  <=  doubleq  &&  doubleq  <=  Double.NEGATIVE_INIT_CLAUSE)  {  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]      for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '   "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;    [BUGGY]  if(singleq  <=  doubleq  &&  doubleq  <=  Double.NEGATIVE_INIT_CLAUSE)  {  [BUGGY]      quote  =  '\'';  doublequote  =     "\   "   ";  singlequote  =     "\\\'   ";  }  else  {  quote  =  '\   "';  doublequote  =     "\\\   "   ";  singlequote  =     "\'   ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.24253562503633297	952	952	1	replace	if(singleq  <=  doubleq  &&  doubleq  <=  Double.NEGATIVE_INIT_CLAUSE)  {	  if(singleq    <=    doubleq)    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
43	[BUG]  [BUGGY]  if(singleq  <=  Double.MIN_VALUE)  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]      for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '   "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;    [BUGGY]  if(singleq  <=  Double.MIN_VALUE)  {  [BUGGY]      quote  =  '\'';  doublequote  =     "\   "   ";  singlequote  =     "\\\'   ";  }  else  {  quote  =  '\   "';  doublequote  =     "\\\   "   ";  singlequote  =     "\'   ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.24253562503633297	952	952	1	replace	if(singleq  <=  Double.MIN_VALUE)  {	  if(singleq    <=    doubleq)    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
44	[BUG]  [BUGGY]  if(singleq  <=  doubleq  &&  singleq  <=  Double.NEGATIVE_INIT_CLAUSE)  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]      for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '   "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;    [BUGGY]  if(singleq  <=  doubleq  &&  singleq  <=  Double.NEGATIVE_INIT_CLAUSE)  {  [BUGGY]      quote  =  '\'';  doublequote  =     "\   "   ";  singlequote  =     "\\\'   ";  }  else  {  quote  =  '\   "';  doublequote  =     "\\\   "   ";  singlequote  =     "\'   ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.24253562503633297	952	952	1	replace	if(singleq  <=  doubleq  &&  singleq  <=  Double.NEGATIVE_INIT_CLAUSE)  {	  if(singleq    <=    doubleq)    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
45	[BUG]  [BUGGY]  if(doublequote  <  doubleq  ||  doublequote  >  Double.MAX_VALUE)  {  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure    [CONTEXT]      for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '   "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;    [BUGGY]  if(doublequote  <  doubleq  ||  doublequote  >  Double.MAX_VALUE)  {  [BUGGY]      quote  =  '\'';  doublequote  =     "\   "   ";  singlequote  =     "\\\'   ";  }  else  {  quote  =  '\   "';  doublequote  =     "\\\   "   ";  singlequote  =     "\'   ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.24253562503633297	952	952	1	replace	if(doublequote  <  doubleq  ||  doublequote  >  Double.MAX_VALUE)  {	  if(doublequote    <    doubleq)    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
46	[BUG]  [BUGGY]  if(doubleq  <  doubleq  ||  doubleq  >  singleq)  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]      for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '   "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;    [BUGGY]  if(doubleq  <  doubleq  ||  doubleq  >  singleq)  {  [BUGGY]      quote  =  '\'';  doublequote  =     "\   "   ";  singlequote  =     "\\\'   ";  }  else  {  quote  =  '\   "';  doublequote  =     "\\\   "   ";  singlequote  =     "\'   ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.24253562503633297	952	952	1	replace	if(doubleq  <  doubleq  ||  doubleq  >  singleq)  {	  if(doubleq    <    singleq)    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
47	[BUG]  [BUGGY]  if(doubleq  <  1  ||  doubleq  >  singleq)  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]      for  (int  i  =  0;  i  <  s.length();  i++)  {  switch  (s.charAt(i))  {  case  '   "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;    [BUGGY]  if(doubleq  <  1  ||  doubleq  >  singleq)  {  [BUGGY]      quote  =  '\'';  doublequote  =     "\   "   ";  singlequote  =     "\\\'   ";  }  else  {  quote  =  '\   "';  doublequote  =     "\\\   "   ";  singlequote  =     "\'   ";  }  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.24253562503633297	952	952	1	replace	if(doubleq  <  1  ||  doubleq  >  singleq)  {	  if(doubleq    <    singleq)    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
