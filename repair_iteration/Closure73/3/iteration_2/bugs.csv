bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  appendJavaScriptRepresentation(sb,  c);  [CE]  <identifier>  expected  [FE]        ComparisonFailure    [CONTEXT]    private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);    [BUGGY]  appendJavaScriptRepresentation(sb,  c);  [BUGGY]    }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	appendJavaScriptRepresentation(sb,  c);	  appendHexJavaScriptRepresentation(sb,    c);    	non-compiled	[CE]  <identifier>  expected	1	None	replace
2	[BUG]  [BUGGY]  appendJavaScriptRepresentation(c,  sb);  [CE]  <identifier>  expected  [FE]          ComparisonFailure    [CONTEXT]    private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);    [BUGGY]  appendJavaScriptRepresentation(c,  sb);  [BUGGY]    }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	appendJavaScriptRepresentation(c,  sb);	  appendHexJavaScriptRepresentation(sb,    c);    	non-compiled	[CE]  <identifier>  expected	1	None	replace
3	[BUG]  [BUGGY]  appendHexJavaScriptRepresentation(sb,  c,  c);  [CE]  <identifier>  expected  [FE]            ComparisonFailure    [CONTEXT]    private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);    [BUGGY]  appendHexJavaScriptRepresentation(sb,  c,  c);  [BUGGY]    }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	appendHexJavaScriptRepresentation(sb,  c,  c);	  appendHexJavaScriptRepresentation(sb,    c);    	non-compiled	[CE]  <identifier>  expected	1	None	replace
4	[BUG]  [BUGGY]  appendDelimiterRepresentation(sb,  c);  [CE]  <identifier>  expected  [FE]              ComparisonFailure    [CONTEXT]    private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);    [BUGGY]  appendDelimiterRepresentation(sb,  c);  [BUGGY]    }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	appendDelimiterRepresentation(sb,  c);	  appendHexJavaScriptRepresentation(sb,    c);    	non-compiled	[CE]  <identifier>  expected	1	None	replace
5	[BUG]  [BUGGY]  appendHexJavaScriptRepresentation(sb,  c,  Context.getCurrentContext());  [CE]  illegal  start  of  type  [FE]                  ComparisonFailure    [CONTEXT]    private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);    [BUGGY]  appendHexJavaScriptRepresentation(sb,  c,  Context.getCurrentContext());  [BUGGY]    }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	appendHexJavaScriptRepresentation(sb,  c,  Context.getCurrentContext());	  Context    rhsContext    =    Context.getCurrentContext();    appendHexJavaScriptRepresentation(rhsContext,    c,    sb);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
6	[BUG]  [BUGGY]  AppendHexJavaScriptRepresentation(sb,  c,  Context.getCurrentContext());  [CE]  illegal  start  of  type  [FE]                    ComparisonFailure    [CONTEXT]    private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);    [BUGGY]  AppendHexJavaScriptRepresentation(sb,  c,  Context.getCurrentContext());  [BUGGY]    }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	AppendHexJavaScriptRepresentation(sb,  c,  Context.getCurrentContext());	  Context    rhsContext    =    Context.getCurrentContext();    appendHexJavaScriptRepresentation(rhsContext,    c,    sb);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
7	[BUG]  [BUGGY]  Context  rhsContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(rhsContext,  c,  sb,  c);  [CE]  <identifier>  expected  [FE]                      ComparisonFailure    [CONTEXT]    private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);    [BUGGY]  Context  rhsContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(rhsContext,  c,  sb,  c);  [BUGGY]    }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	Context  rhsContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(rhsContext,  c,  sb,  c);	  Context    rhsContext    =    Context.getCurrentContext();    appendHexJavaScriptRepresentation(rhsContext,    c,    sb);    	non-compiled	[CE]  <identifier>  expected	16	None	replace
8	[BUG]  [BUGGY]  Context  rhsContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(c,  sb,  c);  [CE]  <identifier>  expected  [FE]                        ComparisonFailure    [CONTEXT]    private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);    [BUGGY]  Context  rhsContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(c,  sb,  c);  [BUGGY]    }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	Context  rhsContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(c,  sb,  c);	  Context    rhsContext    =    Context.getCurrentContext();    appendHexJavaScriptRepresentation(rhsContext,    c,    sb);    	non-compiled	[CE]  <identifier>  expected	16	None	replace
9	[BUG]  [BUGGY]  Context  rhsContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(sb,  c,  rhsContext);  [CE]  <identifier>  expected  [FE]                          ComparisonFailure    [CONTEXT]    private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);    [BUGGY]  Context  rhsContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(sb,  c,  rhsContext);  [BUGGY]    }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	Context  rhsContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(sb,  c,  rhsContext);	  Context    rhsContext    =    Context.getCurrentContext();    appendHexJavaScriptRepresentation(rhsContext,    c,    sb);    	non-compiled	[CE]  <identifier>  expected	16	None	replace
10	[BUG]  [BUGGY]  appendHexJavaScriptRepresentation(c,  rhsContext,  consumer);  [CE]  <identifier>  expected  [FE]                ComparisonFailure    [CONTEXT]    private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);    [BUGGY]  appendHexJavaScriptRepresentation(c,  rhsContext,  consumer);  [BUGGY]    }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	appendHexJavaScriptRepresentation(c,  rhsContext,  consumer);	  Context    rhsContext    =    Context.getCurrentContext();    appendHexJavaScriptRepresentation(rhsContext,    c,    consumer);    	non-compiled	[CE]  <identifier>  expected	15	None	replace
11	[BUG]  [BUGGY]  appendHexJavaScriptRepresentation(sb,  c,  consumer);  [CE]  <identifier>  expected  [FE]                  ComparisonFailure    [CONTEXT]    private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);    [BUGGY]  appendHexJavaScriptRepresentation(sb,  c,  consumer);  [BUGGY]    }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	appendHexJavaScriptRepresentation(sb,  c,  consumer);	  Context    rhsContext    =    Context.getCurrentContext();    appendHexJavaScriptRepresentation(rhsContext,    c,    consumer);    	non-compiled	[CE]  <identifier>  expected	15	None	replace
12	[BUG]  [BUGGY]  AppendHexJavaScriptRepresentation(c,  rhsContext,  consumer);  [CE]  <identifier>  expected  [FE]                    ComparisonFailure    [CONTEXT]    private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);    [BUGGY]  AppendHexJavaScriptRepresentation(c,  rhsContext,  consumer);  [BUGGY]    }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	AppendHexJavaScriptRepresentation(c,  rhsContext,  consumer);	  Context    rhsContext    =    Context.getCurrentContext();    appendHexJavaScriptRepresentation(rhsContext,    c,    consumer);    	non-compiled	[CE]  <identifier>  expected	15	None	replace
13	[BUG]  [BUGGY]  Context  rhsContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(rhsContext,  sb,  c,  consumer);  [CE]  <identifier>  expected  [FE]                      ComparisonFailure    [CONTEXT]    private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);    [BUGGY]  Context  rhsContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(rhsContext,  sb,  c,  consumer);  [BUGGY]    }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	Context  rhsContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(rhsContext,  sb,  c,  consumer);	  Context    rhsContext    =    Context.getCurrentContext();    appendHexJavaScriptRepresentation(rhsContext,    c,    consumer);    	non-compiled	[CE]  <identifier>  expected	15	None	replace
14	[BUG]  [BUGGY]  Context  rhsContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(c,  rhsContext,  consumer);  [CE]  <identifier>  expected  [FE]                        ComparisonFailure    [CONTEXT]    private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);    [BUGGY]  Context  rhsContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(c,  rhsContext,  consumer);  [BUGGY]    }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	Context  rhsContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(c,  rhsContext,  consumer);	  Context    rhsContext    =    Context.getCurrentContext();    appendHexJavaScriptRepresentation(rhsContext,    c,    consumer);    	non-compiled	[CE]  <identifier>  expected	15	None	replace
15	[BUG]  [BUGGY]  Context  rhsContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(rhsContext,  c,  consumer,  sb);  [CE]  <identifier>  expected  [FE]                          ComparisonFailure    [CONTEXT]    private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);    [BUGGY]  Context  rhsContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(rhsContext,  c,  consumer,  sb);  [BUGGY]    }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	Context  rhsContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(rhsContext,  c,  consumer,  sb);	  Context    rhsContext    =    Context.getCurrentContext();    appendHexJavaScriptRepresentation(rhsContext,    c,    consumer);    	non-compiled	[CE]  <identifier>  expected	15	None	replace
16	[BUG]  [BUGGY]  AppendHexJavaScriptRepresentation(c,  sb);  [CE]  <identifier>  expected  [FE]          ComparisonFailure    [CONTEXT]    private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);    [BUGGY]  AppendHexJavaScriptRepresentation(c,  sb);  [BUGGY]    }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	AppendHexJavaScriptRepresentation(c,  sb);	  Context    lhsContext    =    Context.getCurrentContext();    appendHexJavaScriptRepresentation(c,    sb);    	non-compiled	[CE]  <identifier>  expected	12	None	replace
17	[BUG]  [BUGGY]  Context  rhsContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(c,  sb);  [CE]  <identifier>  expected  [FE]            ComparisonFailure    [CONTEXT]    private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);    [BUGGY]  Context  rhsContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(c,  sb);  [BUGGY]    }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	Context  rhsContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(c,  sb);	  Context    lhsContext    =    Context.getCurrentContext();    appendHexJavaScriptRepresentation(c,    sb);    	non-compiled	[CE]  <identifier>  expected	12	None	replace
18	[BUG]  [BUGGY]  Context  lhsContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(c,  sb,  c);  [CE]  <identifier>  expected  [FE]              ComparisonFailure    [CONTEXT]    private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);    [BUGGY]  Context  lhsContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(c,  sb,  c);  [BUGGY]    }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	Context  lhsContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(c,  sb,  c);	  Context    lhsContext    =    Context.getCurrentContext();    appendHexJavaScriptRepresentation(c,    sb);    	non-compiled	[CE]  <identifier>  expected	12	None	replace
19	[BUG]  [BUGGY]  Context  lhsContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(c,  sb,  consumer);  [CE]  <identifier>  expected  [FE]                ComparisonFailure    [CONTEXT]    private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);    [BUGGY]  Context  lhsContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(c,  sb,  consumer);  [BUGGY]    }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	Context  lhsContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(c,  sb,  consumer);	  Context    lhsContext    =    Context.getCurrentContext();    appendHexJavaScriptRepresentation(c,    sb);    	non-compiled	[CE]  <identifier>  expected	12	None	replace
20	[BUG]  [BUGGY]  Context  lhsContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(c,  sb,  message);  [CE]  <identifier>  expected  [FE]                  ComparisonFailure    [CONTEXT]    private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);    [BUGGY]  Context  lhsContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(c,  sb,  message);  [BUGGY]    }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	Context  lhsContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(c,  sb,  message);	  Context    lhsContext    =    Context.getCurrentContext();    appendHexJavaScriptRepresentation(c,    sb);    	non-compiled	[CE]  <identifier>  expected	12	None	replace
21	[BUG]  [BUGGY]  System.err.println( "JavaScriptRepresentation  error: "  +  c,  ex);  [CE]  <identifier>  expected  [FE]                ComparisonFailure    [CONTEXT]    private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);    [BUGGY]  System.err.println( "JavaScriptRepresentation  error: "  +  c,  ex);  [BUGGY]    }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	System.err.println( "JavaScriptRepresentation  error: "  +  c,  ex);	  System.err.println(   "JavaScriptRepresentation    error:   "    +    c);    	non-compiled	[CE]  <identifier>  expected	5	None	replace
22	[BUG]  [BUGGY]  System.err.println( "JavaScriptRepresentation  error: "  +  sb);  [CE]  <identifier>  expected  [FE]                  ComparisonFailure    [CONTEXT]    private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);    [BUGGY]  System.err.println( "JavaScriptRepresentation  error: "  +  sb);  [BUGGY]    }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	System.err.println( "JavaScriptRepresentation  error: "  +  sb);	  System.err.println(   "JavaScriptRepresentation    error:   "    +    c);    	non-compiled	[CE]  <identifier>  expected	5	None	replace
23	[BUG]  [BUGGY]  System.err.println( "JavaScriptRepresentation  error: "  +  char  c);  [CE]  <identifier>  expected  [FE]                    ComparisonFailure    [CONTEXT]    private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);    [BUGGY]  System.err.println( "JavaScriptRepresentation  error: "  +  char  c);  [BUGGY]    }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	System.err.println( "JavaScriptRepresentation  error: "  +  char  c);	  System.err.println(   "JavaScriptRepresentation    error:   "    +    c);    	non-compiled	[CE]  <identifier>  expected	5	None	replace
24	[BUG]  [BUGGY]  System.err.println( "JavaScriptRepresentation  error: "  +  ex);  [CE]  <identifier>  expected  [FE]                      ComparisonFailure    [CONTEXT]    private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);    [BUGGY]  System.err.println( "JavaScriptRepresentation  error: "  +  ex);  [BUGGY]    }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	System.err.println( "JavaScriptRepresentation  error: "  +  ex);	  System.err.println(   "JavaScriptRepresentation    error:   "    +    c);    	non-compiled	[CE]  <identifier>  expected	5	None	replace
25	[BUG]  [BUGGY]  System.err.println( "JavaScriptRepresentation  error: "  +  e);  [CE]  <identifier>  expected  [FE]                        ComparisonFailure    [CONTEXT]    private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);    [BUGGY]  System.err.println( "JavaScriptRepresentation  error: "  +  e);  [BUGGY]    }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	System.err.println( "JavaScriptRepresentation  error: "  +  e);	  System.err.println(   "JavaScriptRepresentation    error:   "    +    c);    	non-compiled	[CE]  <identifier>  expected	5	None	replace
26	[BUG]  [BUGGY]  appendBooleanRepresentation(c,  sb);  [CE]  <identifier>  expected  [FE]              ComparisonFailure    [CONTEXT]    private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);    [BUGGY]  appendBooleanRepresentation(c,  sb);  [BUGGY]    }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	appendBooleanRepresentation(c,  sb);	  appendBooleanRepresentation(sb,    c);    	non-compiled	[CE]  <identifier>  expected	4	None	replace
27	[BUG]  [BUGGY]  appendBooleanRepresentation(sb,  c,  true);  [CE]  <identifier>  expected  [FE]                ComparisonFailure    [CONTEXT]    private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);    [BUGGY]  appendBooleanRepresentation(sb,  c,  true);  [BUGGY]    }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	appendBooleanRepresentation(sb,  c,  true);	  appendBooleanRepresentation(sb,    c);    	non-compiled	[CE]  <identifier>  expected	4	None	replace
28	[BUG]  [BUGGY]  appendBooleanRepresentation(sb,  c,  false);  [CE]  <identifier>  expected  [FE]                  ComparisonFailure    [CONTEXT]    private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);    [BUGGY]  appendBooleanRepresentation(sb,  c,  false);  [BUGGY]    }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	appendBooleanRepresentation(sb,  c,  false);	  appendBooleanRepresentation(sb,    c);    	non-compiled	[CE]  <identifier>  expected	4	None	replace
29	[BUG]  [BUGGY]  appendBooleanRepresentation(sb,  c,  consumer);  [CE]  <identifier>  expected  [FE]                    ComparisonFailure    [CONTEXT]    private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);    [BUGGY]  appendBooleanRepresentation(sb,  c,  consumer);  [BUGGY]    }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	appendBooleanRepresentation(sb,  c,  consumer);	  appendBooleanRepresentation(sb,    c);    	non-compiled	[CE]  <identifier>  expected	4	None	replace
30	[BUG]  [BUGGY]  appendBooleanRepresentation(sb,  c,  Color.black);  [CE]  <identifier>  expected  [FE]                      ComparisonFailure    [CONTEXT]    private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);    [BUGGY]  appendBooleanRepresentation(sb,  c,  Color.black);  [BUGGY]    }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	appendBooleanRepresentation(sb,  c,  Color.black);	  appendBooleanRepresentation(sb,    c);    	non-compiled	[CE]  <identifier>  expected	4	None	replace
31	[BUG]  [BUGGY]  appendBooleanRepresentation(sb,  c,  CONSTRUCTOR);  [CE]  <identifier>  expected  [FE]                        ComparisonFailure    [CONTEXT]    private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);    [BUGGY]  appendBooleanRepresentation(sb,  c,  CONSTRUCTOR);  [BUGGY]    }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	appendBooleanRepresentation(sb,  c,  CONSTRUCTOR);	  appendBooleanRepresentation(sb,    c);    	non-compiled	[CE]  <identifier>  expected	4	None	replace
32	[BUG]  [BUGGY]  AppendHexJavaScriptRepresentation(sb,  c);  [CE]  <identifier>  expected  [FE]            ComparisonFailure    [CONTEXT]    private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);    [BUGGY]  AppendHexJavaScriptRepresentation(sb,  c);  [BUGGY]    }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	AppendHexJavaScriptRepresentation(sb,  c);	  Context    lhsContext    =    Context.getCurrentContext();    appendHexJavaScriptRepresentation(sb,    c);    	non-compiled	[CE]  <identifier>  expected	13	None	replace
33	[BUG]  [BUGGY]  Context  rhsContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(sb,  c);  [CE]  <identifier>  expected  [FE]              ComparisonFailure    [CONTEXT]    private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);    [BUGGY]  Context  rhsContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(sb,  c);  [BUGGY]    }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	Context  rhsContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(sb,  c);	  Context    lhsContext    =    Context.getCurrentContext();    appendHexJavaScriptRepresentation(sb,    c);    	non-compiled	[CE]  <identifier>  expected	13	None	replace
34	[BUG]  [BUGGY]  Context  lhsContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(sb,  c,  consumer);  [CE]  <identifier>  expected  [FE]                ComparisonFailure    [CONTEXT]    private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);    [BUGGY]  Context  lhsContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(sb,  c,  consumer);  [BUGGY]    }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	Context  lhsContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(sb,  c,  consumer);	  Context    lhsContext    =    Context.getCurrentContext();    appendHexJavaScriptRepresentation(sb,    c);    	non-compiled	[CE]  <identifier>  expected	13	None	replace
35	[BUG]  [BUGGY]  Context  lhsContext  =  Context.currentContext();  appendHexJavaScriptRepresentation(sb,  c);  [CE]  <identifier>  expected  [FE]                  ComparisonFailure    [CONTEXT]    private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);    [BUGGY]  Context  lhsContext  =  Context.currentContext();  appendHexJavaScriptRepresentation(sb,  c);  [BUGGY]    }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	Context  lhsContext  =  Context.currentContext();  appendHexJavaScriptRepresentation(sb,  c);	  Context    lhsContext    =    Context.getCurrentContext();    appendHexJavaScriptRepresentation(sb,    c);    	non-compiled	[CE]  <identifier>  expected	13	None	replace
36	[BUG]  [BUGGY]  AppendContext  lhsContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(sb,  c);  [CE]  <identifier>  expected  [FE]                    ComparisonFailure    [CONTEXT]    private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);    [BUGGY]  AppendContext  lhsContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(sb,  c);  [BUGGY]    }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	AppendContext  lhsContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(sb,  c);	  Context    lhsContext    =    Context.getCurrentContext();    appendHexJavaScriptRepresentation(sb,    c);    	non-compiled	[CE]  <identifier>  expected	13	None	replace
37	[BUG]  [BUGGY]  System.err.println( "JavaScriptRepresentation  ' "  +  c  + ",'  is  not  supported. ");  [CE]  <identifier>  expected  [FE]          ComparisonFailure    [CONTEXT]    private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);    [BUGGY]  System.err.println( "JavaScriptRepresentation  ' "  +  c  + ",'  is  not  supported. ");  [BUGGY]    }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	System.err.println( "JavaScriptRepresentation  ' "  +  c  + ",'  is  not  supported. ");	  System.err.println(   "JavaScriptRepresentation    '   "    +    c    +   "'    is    not    supported.   ");    	non-compiled	[CE]  <identifier>  expected	10	None	replace
38	[BUG]  [BUGGY]  System.err.println( "JavaScriptRepresentation  ' "  +  c  + "'  is  not  supported.n ");  [CE]  <identifier>  expected  [FE]            ComparisonFailure    [CONTEXT]    private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);    [BUGGY]  System.err.println( "JavaScriptRepresentation  ' "  +  c  + "'  is  not  supported.n ");  [BUGGY]    }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	System.err.println( "JavaScriptRepresentation  ' "  +  c  + "'  is  not  supported.n ");	  System.err.println(   "JavaScriptRepresentation    '   "    +    c    +   "'    is    not    supported.   ");    	non-compiled	[CE]  <identifier>  expected	10	None	replace
39	[BUG]  [BUGGY]  System.err.println( "JavaScriptRepresentation  ' "  +  c  + "'  is  not  supported: ");  [CE]  <identifier>  expected  [FE]              ComparisonFailure    [CONTEXT]    private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);    [BUGGY]  System.err.println( "JavaScriptRepresentation  ' "  +  c  + "'  is  not  supported: ");  [BUGGY]    }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	System.err.println( "JavaScriptRepresentation  ' "  +  c  + "'  is  not  supported: ");	  System.err.println(   "JavaScriptRepresentation    '   "    +    c    +   "'    is    not    supported.   ");    	non-compiled	[CE]  <identifier>  expected	10	None	replace
40	[BUG]  [BUGGY]  System.err.println( "JavaScriptRepresentation  ' "  +  c  + "'  is  not  supported: "  +  ex);  [CE]  <identifier>  expected  [FE]                ComparisonFailure    [CONTEXT]    private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);    [BUGGY]  System.err.println( "JavaScriptRepresentation  ' "  +  c  + "'  is  not  supported: "  +  ex);  [BUGGY]    }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	System.err.println( "JavaScriptRepresentation  ' "  +  c  + "'  is  not  supported: "  +  ex);	  System.err.println(   "JavaScriptRepresentation    '   "    +    c    +   "'    is    not    supported.   ");    	non-compiled	[CE]  <identifier>  expected	10	None	replace
41	[BUG]  [BUGGY]  sb.append(Character.toLowerCase(c));  [CE]  <identifier>  expected  [FE]          ComparisonFailure    [CONTEXT]    private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);    [BUGGY]  sb.append(Character.toLowerCase(c));  [BUGGY]    }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	sb.append(Character.toLowerCase(c));	  sb.append(c);    	non-compiled	[CE]  <identifier>  expected	2	None	replace
42	[BUG]  [BUGGY]  sb.append(Character.toUpperCase(c));  [CE]  <identifier>  expected  [FE]            ComparisonFailure    [CONTEXT]    private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);    [BUGGY]  sb.append(Character.toUpperCase(c));  [BUGGY]    }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	sb.append(Character.toUpperCase(c));	  sb.append(c);    	non-compiled	[CE]  <identifier>  expected	2	None	replace
43	[BUG]  [BUGGY]  sb.append(',');  [CE]  <identifier>  expected  [FE]              ComparisonFailure    [CONTEXT]    private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);    [BUGGY]  sb.append(',');  [BUGGY]    }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	sb.append(',');	  sb.append(c);    	non-compiled	[CE]  <identifier>  expected	2	None	replace
44	[BUG]  [BUGGY]  sb.append('[');  [CE]  <identifier>  expected  [FE]                ComparisonFailure    [CONTEXT]    private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);    [BUGGY]  sb.append('[');  [BUGGY]    }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	sb.append('[');	  sb.append(c);    	non-compiled	[CE]  <identifier>  expected	2	None	replace
45	[BUG]  [BUGGY]  sb.append('ufffd');  [CE]  <identifier>  expected  [FE]                  ComparisonFailure    [CONTEXT]    private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);    [BUGGY]  sb.append('ufffd');  [BUGGY]    }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	sb.append('ufffd');	  sb.append(c);    	non-compiled	[CE]  <identifier>  expected	2	None	replace
46	[BUG]  [BUGGY]  System.err.println( "JavaScriptRepresentation  Exception: "  +  c,  ex);  [CE]  <identifier>  expected  [FE]                    ComparisonFailure    [CONTEXT]    private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);    [BUGGY]  System.err.println( "JavaScriptRepresentation  Exception: "  +  c,  ex);  [BUGGY]    }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	System.err.println( "JavaScriptRepresentation  Exception: "  +  c,  ex);	  System.err.println(   "JavaScriptRepresentation    Exception:   "    +    c);    	non-compiled	[CE]  <identifier>  expected	7	None	replace
47	[BUG]  [BUGGY]  System.err.println( "JavaScriptRepresentation  Exception: "  +  sb);  [CE]  <identifier>  expected  [FE]                      ComparisonFailure    [CONTEXT]    private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);    [BUGGY]  System.err.println( "JavaScriptRepresentation  Exception: "  +  sb);  [BUGGY]    }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	System.err.println( "JavaScriptRepresentation  Exception: "  +  sb);	  System.err.println(   "JavaScriptRepresentation    Exception:   "    +    c);    	non-compiled	[CE]  <identifier>  expected	7	None	replace
48	[BUG]  [BUGGY]  System.err.println( "JavaScriptRepresentation  Exception: "  +  e);  [CE]  <identifier>  expected  [FE]                        ComparisonFailure    [CONTEXT]    private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);    [BUGGY]  System.err.println( "JavaScriptRepresentation  Exception: "  +  e);  [BUGGY]    }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	System.err.println( "JavaScriptRepresentation  Exception: "  +  e);	  System.err.println(   "JavaScriptRepresentation    Exception:   "    +    c);    	non-compiled	[CE]  <identifier>  expected	7	None	replace
49	[BUG]  [BUGGY]  System.err.println( "JavaScriptRepresentation  Exception: "  +  ex);  [CE]  <identifier>  expected  [FE]                          ComparisonFailure    [CONTEXT]    private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);    [BUGGY]  System.err.println( "JavaScriptRepresentation  Exception: "  +  ex);  [BUGGY]    }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	System.err.println( "JavaScriptRepresentation  Exception: "  +  ex);	  System.err.println(   "JavaScriptRepresentation    Exception:   "    +    c);    	non-compiled	[CE]  <identifier>  expected	7	None	replace
50	[BUG]  [BUGGY]  System.err.println(c, "JavaScriptRepresentation  Exception: "  +  c);  [CE]  <identifier>  expected  [FE]                            ComparisonFailure    [CONTEXT]    private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);    [BUGGY]  System.err.println(c, "JavaScriptRepresentation  Exception: "  +  c);  [BUGGY]    }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	System.err.println(c, "JavaScriptRepresentation  Exception: "  +  c);	  System.err.println(   "JavaScriptRepresentation    Exception:   "    +    c);    	non-compiled	[CE]  <identifier>  expected	7	None	replace
51	[BUG]  [BUGGY]  System.err.println( "JavaScriptRepresentation  error: "  +  c.getMessage());  [CE]  <identifier>  expected  [FE]                  ComparisonFailure    [CONTEXT]    private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);    [BUGGY]  System.err.println( "JavaScriptRepresentation  error: "  +  c.getMessage());  [BUGGY]    }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	System.err.println( "JavaScriptRepresentation  error: "  +  c.getMessage());	  System.err.println(   "JavaScriptRepresentation    error:   "    +    ex.getMessage());    	non-compiled	[CE]  <identifier>  expected	6	None	replace
52	[BUG]  [BUGGY]  System.err.println( "JavaScriptRepresentation  error: "  +  ex.toString());  [CE]  <identifier>  expected  [FE]                    ComparisonFailure    [CONTEXT]    private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);    [BUGGY]  System.err.println( "JavaScriptRepresentation  error: "  +  ex.toString());  [BUGGY]    }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	System.err.println( "JavaScriptRepresentation  error: "  +  ex.toString());	  System.err.println(   "JavaScriptRepresentation    error:   "    +    ex.getMessage());    	non-compiled	[CE]  <identifier>  expected	6	None	replace
53	[BUG]  [BUGGY]  System.err.println( "JavaScriptRepresentation  error: "  +  ex.getMessage(),  ex);  [CE]  <identifier>  expected  [FE]                      ComparisonFailure    [CONTEXT]    private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);    [BUGGY]  System.err.println( "JavaScriptRepresentation  error: "  +  ex.getMessage(),  ex);  [BUGGY]    }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	System.err.println( "JavaScriptRepresentation  error: "  +  ex.getMessage(),  ex);	  System.err.println(   "JavaScriptRepresentation    error:   "    +    ex.getMessage());    	non-compiled	[CE]  <identifier>  expected	6	None	replace
54	[BUG]  [BUGGY]  System.err.println( "JavaScriptRepresentation  error: "  +  sb.getMessage());  [CE]  <identifier>  expected  [FE]                        ComparisonFailure    [CONTEXT]    private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);    [BUGGY]  System.err.println( "JavaScriptRepresentation  error: "  +  sb.getMessage());  [BUGGY]    }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	System.err.println( "JavaScriptRepresentation  error: "  +  sb.getMessage());	  System.err.println(   "JavaScriptRepresentation    error:   "    +    ex.getMessage());    	non-compiled	[CE]  <identifier>  expected	6	None	replace
55	[BUG]  [BUGGY]  sb.append('n',  c);  [CE]  <identifier>  expected  [FE]        ComparisonFailure    [CONTEXT]    private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);    [BUGGY]  sb.append('n',  c);  [BUGGY]    }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	sb.append('n',  c);	  sb.append('n');    	non-compiled	[CE]  <identifier>  expected	9	None	replace
56	[BUG]  [BUGGY]  sb.append('#');  [CE]  <identifier>  expected  [FE]          ComparisonFailure    [CONTEXT]    private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);    [BUGGY]  sb.append('#');  [BUGGY]    }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	sb.append('#');	  sb.append('n');    	non-compiled	[CE]  <identifier>  expected	9	None	replace
57	[BUG]  [BUGGY]  sb.append('N');  [CE]  <identifier>  expected  [FE]            ComparisonFailure    [CONTEXT]    private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);    [BUGGY]  sb.append('N');  [BUGGY]    }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	sb.append('N');	  sb.append('n');    	non-compiled	[CE]  <identifier>  expected	9	None	replace
58	[BUG]  [BUGGY]  appendHexJavaScriptRepresentation(c,  sb,  c);  [CE]  <identifier>  expected  [FE]            ComparisonFailure    [CONTEXT]    private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);    [BUGGY]  appendHexJavaScriptRepresentation(c,  sb,  c);  [BUGGY]    }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	appendHexJavaScriptRepresentation(c,  sb,  c);	  appendHexJavaScriptRepresentation(c,    sb);    	non-compiled	[CE]  <identifier>  expected	3	None	replace
59	[BUG]  [BUGGY]  appendHexJavaScriptRepresentation(c,  sb,  message);  [CE]  <identifier>  expected  [FE]              ComparisonFailure    [CONTEXT]    private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);    [BUGGY]  appendHexJavaScriptRepresentation(c,  sb,  message);  [BUGGY]    }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	appendHexJavaScriptRepresentation(c,  sb,  message);	  appendHexJavaScriptRepresentation(c,    sb);    	non-compiled	[CE]  <identifier>  expected	3	None	replace
60	[BUG]  [BUGGY]  appendDelimiterRepresentation(c,  sb);  [CE]  <identifier>  expected  [FE]                ComparisonFailure    [CONTEXT]    private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);    [BUGGY]  appendDelimiterRepresentation(c,  sb);  [BUGGY]    }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	appendDelimiterRepresentation(c,  sb);	  appendHexJavaScriptRepresentation(c,    sb);    	non-compiled	[CE]  <identifier>  expected	3	None	replace
61	[BUG]  [BUGGY]  appendHexJavaScriptRepresentation(c,  Context.getCurrentContext());  [CE]  <identifier>  expected  [FE]              ComparisonFailure    [CONTEXT]    private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);    [BUGGY]  appendHexJavaScriptRepresentation(c,  Context.getCurrentContext());  [BUGGY]    }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	appendHexJavaScriptRepresentation(c,  Context.getCurrentContext());	  Context    rhsContext    =    Context.getCurrentContext();    appendHexJavaScriptRepresentation(rhsContext,    c);    	non-compiled	[CE]  <identifier>  expected	14	None	replace
62	[BUG]  [BUGGY]  AppendHexJavaScriptRepresentation(c,  Context.getCurrentContext());  [CE]  <identifier>  expected  [FE]                ComparisonFailure    [CONTEXT]    private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);    [BUGGY]  AppendHexJavaScriptRepresentation(c,  Context.getCurrentContext());  [BUGGY]    }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	AppendHexJavaScriptRepresentation(c,  Context.getCurrentContext());	  Context    rhsContext    =    Context.getCurrentContext();    appendHexJavaScriptRepresentation(rhsContext,    c);    	non-compiled	[CE]  <identifier>  expected	14	None	replace
63	[BUG]  [BUGGY]  appendHexJavaScriptRepresentation(c,  rhsContext);  [CE]  <identifier>  expected  [FE]                  ComparisonFailure    [CONTEXT]    private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);    [BUGGY]  appendHexJavaScriptRepresentation(c,  rhsContext);  [BUGGY]    }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	appendHexJavaScriptRepresentation(c,  rhsContext);	  Context    rhsContext    =    Context.getCurrentContext();    appendHexJavaScriptRepresentation(rhsContext,    c);    	non-compiled	[CE]  <identifier>  expected	14	None	replace
64	[BUG]  [BUGGY]  appendHexJavaScriptRepresentation(sb,  Context.getCurrentContext());  [CE]  <identifier>  expected  [FE]        ComparisonFailure    [CONTEXT]    private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);    [BUGGY]  appendHexJavaScriptRepresentation(sb,  Context.getCurrentContext());  [BUGGY]    }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	appendHexJavaScriptRepresentation(sb,  Context.getCurrentContext());	  Context    rhsContext    =    Context.getCurrentContext();    appendHexJavaScriptRepresentation(rhsContext,    sb,    c);    	non-compiled	[CE]  <identifier>  expected	11	None	replace
65	[BUG]  [BUGGY]  AppendHexJavaScriptRepresentation(sb,  Context.getCurrentContext(),  c);  [CE]  <identifier>  expected  [FE]          ComparisonFailure    [CONTEXT]    private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);    [BUGGY]  AppendHexJavaScriptRepresentation(sb,  Context.getCurrentContext(),  c);  [BUGGY]    }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	AppendHexJavaScriptRepresentation(sb,  Context.getCurrentContext(),  c);	  Context    rhsContext    =    Context.getCurrentContext();    appendHexJavaScriptRepresentation(rhsContext,    sb,    c);    	non-compiled	[CE]  <identifier>  expected	11	None	replace
66	[BUG]  [BUGGY]  appendHexJavaScriptRepresentation(sb,  Context.getCurrentContext(),  c);  [CE]  <identifier>  expected  [FE]            ComparisonFailure    [CONTEXT]    private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);    [BUGGY]  appendHexJavaScriptRepresentation(sb,  Context.getCurrentContext(),  c);  [BUGGY]    }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	appendHexJavaScriptRepresentation(sb,  Context.getCurrentContext(),  c);	  Context    rhsContext    =    Context.getCurrentContext();    appendHexJavaScriptRepresentation(rhsContext,    sb,    c);    	non-compiled	[CE]  <identifier>  expected	11	None	replace
67	[BUG]  [BUGGY]  AppendHexJavaScriptRepresentation(sb,  Context.getCurrentContext());  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure    [CONTEXT]    private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);    [BUGGY]  AppendHexJavaScriptRepresentation(sb,  Context.getCurrentContext());  [BUGGY]    }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	AppendHexJavaScriptRepresentation(sb,  Context.getCurrentContext());	  Context    rhsContext    =    Context.getCurrentContext();    appendHexJavaScriptRepresentation(rhsContext,    sb,    c);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	11	None	replace
68	[BUG]  [BUGGY]  Context  lhsContext  =  Context.getCurrentContext();  [CE]  <identifier>  expected  [FE]            ComparisonFailure    [CONTEXT]    private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);    [BUGGY]  Context  lhsContext  =  Context.getCurrentContext();  [BUGGY]    }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	Context  lhsContext  =  Context.getCurrentContext();	  Context    lhsContext    =    Context.getCurrentContext();    appendHexJavaScriptRepresentation(sb,    c);    	non-compiled	[CE]  <identifier>  expected	13	None	replace
69	[BUG]  [BUGGY]  Context  lhsContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(sb,  c,  rhsContext);  [CE]  <identifier>  expected  [FE]              ComparisonFailure    [CONTEXT]    private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);    [BUGGY]  Context  lhsContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(sb,  c,  rhsContext);  [BUGGY]    }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	Context  lhsContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(sb,  c,  rhsContext);	  Context    lhsContext    =    Context.getCurrentContext();    appendHexJavaScriptRepresentation(sb,    c);    	non-compiled	[CE]  <identifier>  expected	13	None	replace
70	[BUG]  [BUGGY]  System.err.println( "JavaScriptRepresentation  error: "  +  c  + "n ");  [CE]  <identifier>  expected  [FE]                ComparisonFailure    [CONTEXT]    private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);    [BUGGY]  System.err.println( "JavaScriptRepresentation  error: "  +  c  + "n ");  [BUGGY]    }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	System.err.println( "JavaScriptRepresentation  error: "  +  c  + "n ");	  System.err.println(   "JavaScriptRepresentation    error:   "    +    c);    	non-compiled	[CE]  <identifier>  expected	5	None	replace
71	[BUG]  [BUGGY]  System.err.println( "JavaScriptRepresentation  error: "  +  c  + ";n ");  [CE]  <identifier>  expected  [FE]                  ComparisonFailure    [CONTEXT]    private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);    [BUGGY]  System.err.println( "JavaScriptRepresentation  error: "  +  c  + ";n ");  [BUGGY]    }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	System.err.println( "JavaScriptRepresentation  error: "  +  c  + ";n ");	  System.err.println(   "JavaScriptRepresentation    error:   "    +    c);    	non-compiled	[CE]  <identifier>  expected	5	None	replace
72	[BUG]  [BUGGY]  System.err.println( "JavaScriptRepresentation  error: "  +  c  + "  of ");  [CE]  <identifier>  expected  [FE]                    ComparisonFailure    [CONTEXT]    private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);    [BUGGY]  System.err.println( "JavaScriptRepresentation  error: "  +  c  + "  of ");  [BUGGY]    }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	System.err.println( "JavaScriptRepresentation  error: "  +  c  + "  of ");	  System.err.println(   "JavaScriptRepresentation    error:   "    +    c);    	non-compiled	[CE]  <identifier>  expected	5	None	replace
73	[BUG]  [BUGGY]  appendDelimiter(sb,  c);  [CE]  <identifier>  expected  [FE]                      ComparisonFailure    [CONTEXT]    private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);    [BUGGY]  appendDelimiter(sb,  c);  [BUGGY]    }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	appendDelimiter(sb,  c);	      	non-compiled	[CE]  <identifier>  expected	8	None	replace
74	[BUG]  [BUGGY]  sb.append( "n ");  [CE]  <identifier>  expected  [FE]                        ComparisonFailure    [CONTEXT]    private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);    [BUGGY]  sb.append( "n ");  [BUGGY]    }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	sb.append( "n ");	      	non-compiled	[CE]  <identifier>  expected	8	None	replace
75	[BUG]  [BUGGY]  append(sb,  c);  [CE]  <identifier>  expected  [FE]                          ComparisonFailure    [CONTEXT]    private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);    [BUGGY]  append(sb,  c);  [BUGGY]    }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	append(sb,  c);	      	non-compiled	[CE]  <identifier>  expected	8	None	replace
76	[BUG]  [BUGGY]  appendDecoderRepresentation(sb,  c);  [CE]  <identifier>  expected  [FE]        ComparisonFailure    [CONTEXT]    private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);    [BUGGY]  appendDecoderRepresentation(sb,  c);  [BUGGY]    }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	appendDecoderRepresentation(sb,  c);	  appendHexJavaScriptRepresentation(sb,    c);    	non-compiled	[CE]  <identifier>  expected	1	None	replace
77	[BUG]  [BUGGY]  Context  rhsContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(rhsContext,  sb,  consumer);  [CE]  <identifier>  expected  [FE]                ComparisonFailure    [CONTEXT]    private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);    [BUGGY]  Context  rhsContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(rhsContext,  sb,  consumer);  [BUGGY]    }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	Context  rhsContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(rhsContext,  sb,  consumer);	  Context    rhsContext    =    Context.getCurrentContext();    appendHexJavaScriptRepresentation(rhsContext,    c,    consumer);    	non-compiled	[CE]  <identifier>  expected	15	None	replace
78	[BUG]  [BUGGY]  Context  rhsContext  =  context.getCurrentContext();  appendHexJavaScriptRepresentation(rhsContext,  c,  consumer);  [CE]  <identifier>  expected  [FE]                  ComparisonFailure    [CONTEXT]    private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);    [BUGGY]  Context  rhsContext  =  context.getCurrentContext();  appendHexJavaScriptRepresentation(rhsContext,  c,  consumer);  [BUGGY]    }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	Context  rhsContext  =  context.getCurrentContext();  appendHexJavaScriptRepresentation(rhsContext,  c,  consumer);	  Context    rhsContext    =    Context.getCurrentContext();    appendHexJavaScriptRepresentation(rhsContext,    c,    consumer);    	non-compiled	[CE]  <identifier>  expected	15	None	replace
79	[BUG]  [BUGGY]  Context  rhsContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(consumer,  c,  rhsContext);  [CE]  <identifier>  expected  [FE]                    ComparisonFailure    [CONTEXT]    private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);    [BUGGY]  Context  rhsContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(consumer,  c,  rhsContext);  [BUGGY]    }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	Context  rhsContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(consumer,  c,  rhsContext);	  Context    rhsContext    =    Context.getCurrentContext();    appendHexJavaScriptRepresentation(rhsContext,    c,    consumer);    	non-compiled	[CE]  <identifier>  expected	15	None	replace
80	[BUG]  [BUGGY]  Context  rhsContext  =  Context.getCurrentContext();  [CE]  <identifier>  expected  [FE]                      ComparisonFailure    [CONTEXT]    private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);    [BUGGY]  Context  rhsContext  =  Context.getCurrentContext();  [BUGGY]    }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	Context  rhsContext  =  Context.getCurrentContext();	  Context    rhsContext    =    Context.getCurrentContext();    appendHexJavaScriptRepresentation(rhsContext,    c,    consumer);    	non-compiled	[CE]  <identifier>  expected	15	None	replace
81	[BUG]  [BUGGY]  appendEmbeddedBooleanRepresentation(sb,  c);  [CE]  <identifier>  expected  [FE]              ComparisonFailure    [CONTEXT]    private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);    [BUGGY]  appendEmbeddedBooleanRepresentation(sb,  c);  [BUGGY]    }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	appendEmbeddedBooleanRepresentation(sb,  c);	  appendBooleanRepresentation(sb,    c);    	non-compiled	[CE]  <identifier>  expected	4	None	replace
82	[BUG]  [BUGGY]  Context  rhsContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(rhsContext,  builder,  c);  [CE]  <identifier>  expected  [FE]        ComparisonFailure    [CONTEXT]    private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);    [BUGGY]  Context  rhsContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(rhsContext,  builder,  c);  [BUGGY]    }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	Context  rhsContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(rhsContext,  builder,  c);	  Context    rhsContext    =    Context.getCurrentContext();    appendHexJavaScriptRepresentation(rhsContext,    sb,    c);    	non-compiled	[CE]  <identifier>  expected	11	None	replace
83	[BUG]  [BUGGY]  Context  rhsContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(c,  sb,  rhsContext);  [CE]  <identifier>  expected  [FE]          ComparisonFailure    [CONTEXT]    private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);    [BUGGY]  Context  rhsContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(c,  sb,  rhsContext);  [BUGGY]    }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	Context  rhsContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(c,  sb,  rhsContext);	  Context    rhsContext    =    Context.getCurrentContext();    appendHexJavaScriptRepresentation(rhsContext,    sb,    c);    	non-compiled	[CE]  <identifier>  expected	11	None	replace
84	[BUG]  [BUGGY]  Context  rhsContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(rhsContext,  char,  c);  [CE]  <identifier>  expected  [FE]            ComparisonFailure    [CONTEXT]    private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);    [BUGGY]  Context  rhsContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(rhsContext,  char,  c);  [BUGGY]    }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	Context  rhsContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(rhsContext,  char,  c);	  Context    rhsContext    =    Context.getCurrentContext();    appendHexJavaScriptRepresentation(rhsContext,    sb,    c);    	non-compiled	[CE]  <identifier>  expected	11	None	replace
85	[BUG]  [BUGGY]  Context  currentContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(currentContext,  sb,  c);  [CE]  <identifier>  expected  [FE]              ComparisonFailure    [CONTEXT]    private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);    [BUGGY]  Context  currentContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(currentContext,  sb,  c);  [BUGGY]    }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	Context  currentContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(currentContext,  sb,  c);	  Context    rhsContext    =    Context.getCurrentContext();    appendHexJavaScriptRepresentation(rhsContext,    sb,    c);    	non-compiled	[CE]  <identifier>  expected	11	None	replace
86	[BUG]  [BUGGY]  Context  lhsContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(c,  sb,  rhsContext);  [CE]  <identifier>  expected  [FE]          ComparisonFailure    [CONTEXT]    private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);    [BUGGY]  Context  lhsContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(c,  sb,  rhsContext);  [BUGGY]    }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	Context  lhsContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(c,  sb,  rhsContext);	  Context    lhsContext    =    Context.getCurrentContext();    appendHexJavaScriptRepresentation(c,    sb);    	non-compiled	[CE]  <identifier>  expected	12	None	replace
87	[BUG]  [BUGGY]  Context  lhsContext  =  Context.currentContext();  appendHexJavaScriptRepresentation(c,  sb);  [CE]  <identifier>  expected  [FE]            ComparisonFailure    [CONTEXT]    private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);    [BUGGY]  Context  lhsContext  =  Context.currentContext();  appendHexJavaScriptRepresentation(c,  sb);  [BUGGY]    }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	Context  lhsContext  =  Context.currentContext();  appendHexJavaScriptRepresentation(c,  sb);	  Context    lhsContext    =    Context.getCurrentContext();    appendHexJavaScriptRepresentation(c,    sb);    	non-compiled	[CE]  <identifier>  expected	12	None	replace
88	[BUG]  [BUGGY]  sb.append( ", ");  [CE]  <identifier>  expected  [FE]          ComparisonFailure    [CONTEXT]    private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);    [BUGGY]  sb.append( ", ");  [BUGGY]    }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	sb.append( ", ");	  sb.append(c);    	non-compiled	[CE]  <identifier>  expected	2	None	replace
89	[BUG]  [BUGGY]  sb.append( ";n ");  [CE]  <identifier>  expected  [FE]            ComparisonFailure    [CONTEXT]    private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);    [BUGGY]  sb.append( ";n ");  [BUGGY]    }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	sb.append( ";n ");	  sb.append(c);    	non-compiled	[CE]  <identifier>  expected	2	None	replace
90	[BUG]  [BUGGY]  sb.append('  }  ');  [CE]  <identifier>  expected  [FE]              ComparisonFailure    [CONTEXT]    private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);    [BUGGY]  sb.append('  }  ');  [BUGGY]    }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	sb.append('  }  ');	  sb.append(c);    	non-compiled	[CE]  <identifier>  expected	2	None	replace
91	[BUG]  [BUGGY]  System.err.println(c  + "JavaScriptRepresentation  Exception: "  +  c);  [CE]  <identifier>  expected  [FE]                    ComparisonFailure    [CONTEXT]    private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);    [BUGGY]  System.err.println(c  + "JavaScriptRepresentation  Exception: "  +  c);  [BUGGY]    }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	System.err.println(c  + "JavaScriptRepresentation  Exception: "  +  c);	  System.err.println(   "JavaScriptRepresentation    Exception:   "    +    c);    	non-compiled	[CE]  <identifier>  expected	7	None	replace
92	[BUG]  [BUGGY]  System.err.println( "JavaScriptRepresentation  Exception: "  +  c  + "  of ");  [CE]  <identifier>  expected  [FE]                      ComparisonFailure    [CONTEXT]    private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);    [BUGGY]  System.err.println( "JavaScriptRepresentation  Exception: "  +  c  + "  of ");  [BUGGY]    }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	System.err.println( "JavaScriptRepresentation  Exception: "  +  c  + "  of ");	  System.err.println(   "JavaScriptRepresentation    Exception:   "    +    c);    	non-compiled	[CE]  <identifier>  expected	7	None	replace
93	[BUG]  [BUGGY]  Context  lhsContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(lhsContext,  c);  [CE]  <identifier>  expected  [FE]              ComparisonFailure    [CONTEXT]    private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);    [BUGGY]  Context  lhsContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(lhsContext,  c);  [BUGGY]    }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	Context  lhsContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(lhsContext,  c);	  Context    rhsContext    =    Context.getCurrentContext();    appendHexJavaScriptRepresentation(rhsContext,    c);    	non-compiled	[CE]  <identifier>  expected	14	None	replace
94	[BUG]  [BUGGY]  Context  rhsContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(rhsContext,  builder,  c,  sb);  [CE]  <identifier>  expected  [FE]                  ComparisonFailure    [CONTEXT]    private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);    [BUGGY]  Context  rhsContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(rhsContext,  builder,  c,  sb);  [BUGGY]    }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	Context  rhsContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(rhsContext,  builder,  c,  sb);	  Context    rhsContext    =    Context.getCurrentContext();    appendHexJavaScriptRepresentation(rhsContext,    c,    sb);    	non-compiled	[CE]  <identifier>  expected	16	None	replace
95	[BUG]  [BUGGY]  Context  currentContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(currentContext,  c,  sb);  [CE]  <identifier>  expected  [FE]                    ComparisonFailure    [CONTEXT]    private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);    [BUGGY]  Context  currentContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(currentContext,  c,  sb);  [BUGGY]    }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	Context  currentContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(currentContext,  c,  sb);	  Context    rhsContext    =    Context.getCurrentContext();    appendHexJavaScriptRepresentation(rhsContext,    c,    sb);    	non-compiled	[CE]  <identifier>  expected	16	None	replace
96	[BUG]  [BUGGY]  Context  rhsContext  =  context.getCurrentContext();  appendHexJavaScriptRepresentation(rhsContext,  c,  sb);  [CE]  <identifier>  expected  [FE]                      ComparisonFailure    [CONTEXT]    private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);    [BUGGY]  Context  rhsContext  =  context.getCurrentContext();  appendHexJavaScriptRepresentation(rhsContext,  c,  sb);  [BUGGY]    }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	Context  rhsContext  =  context.getCurrentContext();  appendHexJavaScriptRepresentation(rhsContext,  c,  sb);	  Context    rhsContext    =    Context.getCurrentContext();    appendHexJavaScriptRepresentation(rhsContext,    c,    sb);    	non-compiled	[CE]  <identifier>  expected	16	None	replace
97	[BUG]  [BUGGY]  System.err.println(c  + "JavaScriptRepresentation  ' "  +  c  + "'  is  not  supported. ");  [CE]  <identifier>  expected  [FE]          ComparisonFailure    [CONTEXT]    private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);    [BUGGY]  System.err.println(c  + "JavaScriptRepresentation  ' "  +  c  + "'  is  not  supported. ");  [BUGGY]    }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	System.err.println(c  + "JavaScriptRepresentation  ' "  +  c  + "'  is  not  supported. ");	  System.err.println(   "JavaScriptRepresentation    '   "    +    c    +   "'    is    not    supported.   ");    	non-compiled	[CE]  <identifier>  expected	10	None	replace
98	[BUG]  [BUGGY]  System.err.println( "JavaScriptRepresentation  ' "  +  c  + "'  is  not  supported  by ");  [CE]  <identifier>  expected  [FE]            ComparisonFailure    [CONTEXT]    private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);    [BUGGY]  System.err.println( "JavaScriptRepresentation  ' "  +  c  + "'  is  not  supported  by ");  [BUGGY]    }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	System.err.println( "JavaScriptRepresentation  ' "  +  c  + "'  is  not  supported  by ");	  System.err.println(   "JavaScriptRepresentation    '   "    +    c    +   "'    is    not    supported.   ");    	non-compiled	[CE]  <identifier>  expected	10	None	replace
99	[BUG]  [BUGGY]  System.err.println( "JavaScriptRepresentation  error: "  +  sb.toString());  [CE]  <identifier>  expected  [FE]                  ComparisonFailure    [CONTEXT]    private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);    [BUGGY]  System.err.println( "JavaScriptRepresentation  error: "  +  sb.toString());  [BUGGY]    }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	System.err.println( "JavaScriptRepresentation  error: "  +  sb.toString());	  System.err.println(   "JavaScriptRepresentation    error:   "    +    ex.getMessage());    	non-compiled	[CE]  <identifier>  expected	6	None	replace
100	[BUG]  [BUGGY]  Context  rhsContext  =  Context.getCurrentContext();  codeGenerator.appendHexJavaScriptRepresentation(sb,  c);  [CE]  <identifier>  expected  [FE]        ComparisonFailure    [CONTEXT]    private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);    [BUGGY]  Context  rhsContext  =  Context.getCurrentContext();  codeGenerator.appendHexJavaScriptRepresentation(sb,  c);  [BUGGY]    }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	Context  rhsContext  =  Context.getCurrentContext();  codeGenerator.appendHexJavaScriptRepresentation(sb,  c);	  Context    rhsContext    =    Context.getCurrentContext();    appendHexJavaScriptRepresentation(rhsContext,    sb,    c);    	non-compiled	[CE]  <identifier>  expected	11	None	replace
101	[BUG]  [BUGGY]  System.err.println(c, "JavaScriptRepresentation  error: "  +  c);  [CE]  <identifier>  expected  [FE]                ComparisonFailure    [CONTEXT]    private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);    [BUGGY]  System.err.println(c, "JavaScriptRepresentation  error: "  +  c);  [BUGGY]    }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	System.err.println(c, "JavaScriptRepresentation  error: "  +  c);	  System.err.println(   "JavaScriptRepresentation    error:   "    +    c);    	non-compiled	[CE]  <identifier>  expected	5	None	replace
102	[BUG]  [BUGGY]  sb.append( ";  char  ' ");  [CE]  <identifier>  expected  [FE]          ComparisonFailure    [CONTEXT]    private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);    [BUGGY]  sb.append( ";  char  ' ");  [BUGGY]    }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	sb.append( ";  char  ' ");	  sb.append(c);    	non-compiled	[CE]  <identifier>  expected	2	None	replace
103	[BUG]  [BUGGY]  Context.report(JSError.make(lhsContext,  c,  IN_FOR_INIT_CLAUSE));  [CE]  <identifier>  expected  [FE]                      ComparisonFailure    [CONTEXT]    private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);    [BUGGY]  Context.report(JSError.make(lhsContext,  c,  IN_FOR_INIT_CLAUSE));  [BUGGY]    }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	Context.report(JSError.make(lhsContext,  c,  IN_FOR_INIT_CLAUSE));	      	non-compiled	[CE]  <identifier>  expected	8	None	replace
104	[BUG]  [BUGGY]  System.err.println( "Unable  to  append  HexJavaScriptRepresentation: "  +  c);  [CE]  <identifier>  expected  [FE]                        ComparisonFailure    [CONTEXT]    private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);    [BUGGY]  System.err.println( "Unable  to  append  HexJavaScriptRepresentation: "  +  c);  [BUGGY]    }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	System.err.println( "Unable  to  append  HexJavaScriptRepresentation: "  +  c);	      	non-compiled	[CE]  <identifier>  expected	8	None	replace
105	[BUG]  [BUGGY]  Context  rhsContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(rhsContext,  char  c,  sb);  [CE]  <identifier>  expected  [FE]                  ComparisonFailure    [CONTEXT]    private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);    [BUGGY]  Context  rhsContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(rhsContext,  char  c,  sb);  [BUGGY]    }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	Context  rhsContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(rhsContext,  char  c,  sb);	  Context    rhsContext    =    Context.getCurrentContext();    appendHexJavaScriptRepresentation(rhsContext,    c,    sb);    	non-compiled	[CE]  <identifier>  expected	16	None	replace
106	[BUG]  [BUGGY]  System.err.println(sb, "JavaScriptRepresentation  Exception: "  +  c);  [CE]  <identifier>  expected  [FE]                    ComparisonFailure    [CONTEXT]    private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);    [BUGGY]  System.err.println(sb, "JavaScriptRepresentation  Exception: "  +  c);  [BUGGY]    }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	System.err.println(sb, "JavaScriptRepresentation  Exception: "  +  c);	  System.err.println(   "JavaScriptRepresentation    Exception:   "    +    c);    	non-compiled	[CE]  <identifier>  expected	7	None	replace
107	[BUG]  [BUGGY]  System.err.println( "JavaScriptRepresentation  Exception: "  +  char);  [CE]  <identifier>  expected  [FE]                      ComparisonFailure    [CONTEXT]    private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);    [BUGGY]  System.err.println( "JavaScriptRepresentation  Exception: "  +  char);  [BUGGY]    }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	System.err.println( "JavaScriptRepresentation  Exception: "  +  char);	  System.err.println(   "JavaScriptRepresentation    Exception:   "    +    c);    	non-compiled	[CE]  <identifier>  expected	7	None	replace
108	[BUG]  [BUGGY]  Context  lhsContext  =  Context.getCurrentContext();  currentContext.appendHexJavaScriptRepresentation(sb,  c);  [CE]  <identifier>  expected  [FE]            ComparisonFailure    [CONTEXT]    private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);    [BUGGY]  Context  lhsContext  =  Context.getCurrentContext();  currentContext.appendHexJavaScriptRepresentation(sb,  c);  [BUGGY]    }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	Context  lhsContext  =  Context.getCurrentContext();  currentContext.appendHexJavaScriptRepresentation(sb,  c);	  Context    lhsContext    =    Context.getCurrentContext();    appendHexJavaScriptRepresentation(sb,    c);    	non-compiled	[CE]  <identifier>  expected	13	None	replace
109	[BUG]  [BUGGY]  Context  lhsContext  =  Context.getCurrentContext();  codeGenerator.appendHexJavaScriptRepresentation(sb,  c);  [CE]  <identifier>  expected  [FE]              ComparisonFailure    [CONTEXT]    private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);    [BUGGY]  Context  lhsContext  =  Context.getCurrentContext();  codeGenerator.appendHexJavaScriptRepresentation(sb,  c);  [BUGGY]    }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	Context  lhsContext  =  Context.getCurrentContext();  codeGenerator.appendHexJavaScriptRepresentation(sb,  c);	  Context    lhsContext    =    Context.getCurrentContext();    appendHexJavaScriptRepresentation(sb,    c);    	non-compiled	[CE]  <identifier>  expected	13	None	replace
110	[BUG]  [BUGGY]  Context  rhsContext  =  context.getCurrentContext();  appendHexJavaScriptRepresentation(rhsContext,  c);  [CE]  <identifier>  expected  [FE]              ComparisonFailure    [CONTEXT]    private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);    [BUGGY]  Context  rhsContext  =  context.getCurrentContext();  appendHexJavaScriptRepresentation(rhsContext,  c);  [BUGGY]    }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	Context  rhsContext  =  context.getCurrentContext();  appendHexJavaScriptRepresentation(rhsContext,  c);	  Context    rhsContext    =    Context.getCurrentContext();    appendHexJavaScriptRepresentation(rhsContext,    c);    	non-compiled	[CE]  <identifier>  expected	14	None	replace
111	[BUG]  [BUGGY]  System.err.println(sb  + "JavaScriptRepresentation  ' "  +  c  + "'  is  not  supported. ");  [CE]  <identifier>  expected  [FE]          ComparisonFailure    [CONTEXT]    private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);    [BUGGY]  System.err.println(sb  + "JavaScriptRepresentation  ' "  +  c  + "'  is  not  supported. ");  [BUGGY]    }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	System.err.println(sb  + "JavaScriptRepresentation  ' "  +  c  + "'  is  not  supported. ");	  System.err.println(   "JavaScriptRepresentation    '   "    +    c    +   "'    is    not    supported.   ");    	non-compiled	[CE]  <identifier>  expected	10	None	replace
112	[BUG]  [BUGGY]  System.err.println( "JavaScriptRepresentation  ' "  +  c  + ".'  is  not  supported. ");  [CE]  <identifier>  expected  [FE]            ComparisonFailure    [CONTEXT]    private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);    [BUGGY]  System.err.println( "JavaScriptRepresentation  ' "  +  c  + ".'  is  not  supported. ");  [BUGGY]    }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	System.err.println( "JavaScriptRepresentation  ' "  +  c  + ".'  is  not  supported. ");	  System.err.println(   "JavaScriptRepresentation    '   "    +    c    +   "'    is    not    supported.   ");    	non-compiled	[CE]  <identifier>  expected	10	None	replace
113	[BUG]  [BUGGY]  System.err.println( "JavaScriptRepresentation  error: "  +  c.toString());  [CE]  <identifier>  expected  [FE]                  ComparisonFailure    [CONTEXT]    private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);    [BUGGY]  System.err.println( "JavaScriptRepresentation  error: "  +  c.toString());  [BUGGY]    }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	System.err.println( "JavaScriptRepresentation  error: "  +  c.toString());	  System.err.println(   "JavaScriptRepresentation    error:   "    +    ex.getMessage());    	non-compiled	[CE]  <identifier>  expected	6	None	replace
114	[BUG]  [BUGGY]  Context  lhsContext  =  Context.getCurrentContext();  currentContext.appendHexJavaScriptRepresentation(c,  sb);  [CE]  <identifier>  expected  [FE]          ComparisonFailure    [CONTEXT]    private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);    [BUGGY]  Context  lhsContext  =  Context.getCurrentContext();  currentContext.appendHexJavaScriptRepresentation(c,  sb);  [BUGGY]    }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	Context  lhsContext  =  Context.getCurrentContext();  currentContext.appendHexJavaScriptRepresentation(c,  sb);	  Context    lhsContext    =    Context.getCurrentContext();    appendHexJavaScriptRepresentation(c,    sb);    	non-compiled	[CE]  <identifier>  expected	12	None	replace
115	[BUG]  [BUGGY]  Context  lhsContext  =  Context.getCurrentContext();  codeGenerator.appendHexJavaScriptRepresentation(c,  sb);  [CE]  <identifier>  expected  [FE]            ComparisonFailure    [CONTEXT]    private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);    [BUGGY]  Context  lhsContext  =  Context.getCurrentContext();  codeGenerator.appendHexJavaScriptRepresentation(c,  sb);  [BUGGY]    }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	Context  lhsContext  =  Context.getCurrentContext();  codeGenerator.appendHexJavaScriptRepresentation(c,  sb);	  Context    lhsContext    =    Context.getCurrentContext();    appendHexJavaScriptRepresentation(c,    sb);    	non-compiled	[CE]  <identifier>  expected	12	None	replace
116	[BUG]  [BUGGY]  Context  lhsContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(c,  sb,  this);  [CE]  <identifier>  expected  [FE]              ComparisonFailure    [CONTEXT]    private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);    [BUGGY]  Context  lhsContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(c,  sb,  this);  [BUGGY]    }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	Context  lhsContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(c,  sb,  this);	  Context    lhsContext    =    Context.getCurrentContext();    appendHexJavaScriptRepresentation(c,    sb);    	non-compiled	[CE]  <identifier>  expected	12	None	replace
