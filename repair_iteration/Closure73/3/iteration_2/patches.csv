bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  System.err.println(c  + "JavaScriptRepresentation  error: "  +  ex.toString());  [CE]  <identifier>  expected  [FE]                        ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  System.err.println(c  + "JavaScriptRepresentation  error: "  +  ex.toString());  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	System.err.println(c  + "JavaScriptRepresentation  error: "  +  ex.toString());	  System.err.println(   "JavaScriptRepresentation    error:   "    +    ex.toString());    	non-compiled	[CE]  <identifier>  expected	52	None	replace
2	[BUG]  [BUGGY]  appendHexJavaScriptRepresentation(sb,  Context.getCodeGenerator());  [CE]  <identifier>  expected  [FE]            ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  appendHexJavaScriptRepresentation(sb,  Context.getCodeGenerator());  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	appendHexJavaScriptRepresentation(sb,  Context.getCodeGenerator());	  appendHexJavaScriptRepresentation(sb,    Context.getCurrentContext());    	non-compiled	[CE]  <identifier>  expected	64	None	replace
3	[BUG]  [BUGGY]  appendHexJavaScriptRepresentation(sb,  Context.currentContext());  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  appendHexJavaScriptRepresentation(sb,  Context.currentContext());  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	appendHexJavaScriptRepresentation(sb,  Context.currentContext());	  appendHexJavaScriptRepresentation(sb,    Context.getCurrentContext());    	non-compiled	[CE]  <identifier>  expected	64	None	replace
4	[BUG]  [BUGGY]  appendHexJavaScriptRepresentation(sb,  c.getCurrentContext());  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  appendHexJavaScriptRepresentation(sb,  c.getCurrentContext());  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	appendHexJavaScriptRepresentation(sb,  c.getCurrentContext());	  appendHexJavaScriptRepresentation(sb,    Context.getCurrentContext());    	non-compiled	[CE]  <identifier>  expected	64	None	replace
5	[BUG]  [BUGGY]  AppendContext  lhsContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(sb,  c,  consumer);  [CE]  <identifier>  expected  [FE]                        ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  AppendContext  lhsContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(sb,  c,  consumer);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	AppendContext  lhsContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(sb,  c,  consumer);	  AppendContext    lhsContext    =    Context.getCurrentContext();    appendHexJavaScriptRepresentation(sb,    c);    	non-compiled	[CE]  <identifier>  expected	36	None	replace
6	[BUG]  [BUGGY]  AppendContext  lhsContext  =  Context.currentContext();  appendHexJavaScriptRepresentation(sb,  c);  [CE]  <identifier>  expected  [FE]                          ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  AppendContext  lhsContext  =  Context.currentContext();  appendHexJavaScriptRepresentation(sb,  c);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	AppendContext  lhsContext  =  Context.currentContext();  appendHexJavaScriptRepresentation(sb,  c);	  AppendContext    lhsContext    =    Context.getCurrentContext();    appendHexJavaScriptRepresentation(sb,    c);    	non-compiled	[CE]  <identifier>  expected	36	None	replace
7	[BUG]  [BUGGY]  AppendContext  lhsContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(c,  sb);  [CE]  <identifier>  expected  [FE]                            ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  AppendContext  lhsContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(c,  sb);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	AppendContext  lhsContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(c,  sb);	  AppendContext    lhsContext    =    Context.getCurrentContext();    appendHexJavaScriptRepresentation(sb,    c);    	non-compiled	[CE]  <identifier>  expected	36	None	replace
8	[BUG]  [BUGGY]  AppendContext  rhsContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(sb,  c);  [CE]  <identifier>  expected  [FE]                              ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  AppendContext  rhsContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(sb,  c);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	AppendContext  rhsContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(sb,  c);	  AppendContext    lhsContext    =    Context.getCurrentContext();    appendHexJavaScriptRepresentation(sb,    c);    	non-compiled	[CE]  <identifier>  expected	36	None	replace
9	[BUG]  [BUGGY]  System.err.println( "JavaScriptRepresentation  ' "  +  c  + ",'  is  not  supported  by ");  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  System.err.println( "JavaScriptRepresentation  ' "  +  c  + ",'  is  not  supported  by ");  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	System.err.println( "JavaScriptRepresentation  ' "  +  c  + ",'  is  not  supported  by ");	  System.err.println(   "JavaScriptRepresentation    '   "    +    c    +   "'    is    not    supported    by   ");    	non-compiled	[CE]  <identifier>  expected	98	None	replace
10	[BUG]  [BUGGY]  System.err.println( "JavaScriptRepresentation  ' "  +  c  + "'  is  not  supported  with ");  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  System.err.println( "JavaScriptRepresentation  ' "  +  c  + "'  is  not  supported  with ");  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	System.err.println( "JavaScriptRepresentation  ' "  +  c  + "'  is  not  supported  with ");	  System.err.println(   "JavaScriptRepresentation    '   "    +    c    +   "'    is    not    supported    by   ");    	non-compiled	[CE]  <identifier>  expected	98	None	replace
11	[BUG]  [BUGGY]  System.err.println( "JavaScriptRepresentation  ' "  +  c  + "'  is  not  supported  by ",  ex);  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  System.err.println( "JavaScriptRepresentation  ' "  +  c  + "'  is  not  supported  by ",  ex);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	System.err.println( "JavaScriptRepresentation  ' "  +  c  + "'  is  not  supported  by ",  ex);	  System.err.println(   "JavaScriptRepresentation    '   "    +    c    +   "'    is    not    supported    by   ");    	non-compiled	[CE]  <identifier>  expected	98	None	replace
12	[BUG]  [BUGGY]  System.err.println(c  + "JavaScriptRepresentation  ' "  +  c  + "'  is  not  supported.n ");  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  System.err.println(c  + "JavaScriptRepresentation  ' "  +  c  + "'  is  not  supported.n ");  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	System.err.println(c  + "JavaScriptRepresentation  ' "  +  c  + "'  is  not  supported.n ");	  System.err.println(c    +   "JavaScriptRepresentation    '   "    +    c    +   "'    is    not    supported.   ");    	non-compiled	[CE]  <identifier>  expected	97	None	replace
13	[BUG]  [BUGGY]  System.err.println(c  + "JavaScriptRepresentation  ' "  +  c  + ",'  is  not  supported. ");  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  System.err.println(c  + "JavaScriptRepresentation  ' "  +  c  + ",'  is  not  supported. ");  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	System.err.println(c  + "JavaScriptRepresentation  ' "  +  c  + ",'  is  not  supported. ");	  System.err.println(c    +   "JavaScriptRepresentation    '   "    +    c    +   "'    is    not    supported.   ");    	non-compiled	[CE]  <identifier>  expected	97	None	replace
14	[BUG]  [BUGGY]  Context.report(JSError.make(context,  c,  IN_FOR_INIT_CLAUSE));  [CE]  <identifier>  expected  [FE]                          ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  Context.report(JSError.make(context,  c,  IN_FOR_INIT_CLAUSE));  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	Context.report(JSError.make(context,  c,  IN_FOR_INIT_CLAUSE));	  Context.report(JSError.make(lhsContext,    c,    IN_FOR_INIT_CLAUSE));    	non-compiled	[CE]  <identifier>  expected	103	None	replace
15	[BUG]  [BUGGY]  Context.report(JSError.make(lhsContext,  c,  BEFORE_DANGLING_ELSE,  IN_FOR_INIT_CLAUSE));  [CE]  <identifier>  expected  [FE]                            ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  Context.report(JSError.make(lhsContext,  c,  BEFORE_DANGLING_ELSE,  IN_FOR_INIT_CLAUSE));  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	Context.report(JSError.make(lhsContext,  c,  BEFORE_DANGLING_ELSE,  IN_FOR_INIT_CLAUSE));	  Context.report(JSError.make(lhsContext,    c,    IN_FOR_INIT_CLAUSE));    	non-compiled	[CE]  <identifier>  expected	103	None	replace
16	[BUG]  [BUGGY]  Context.report(JSError.make(sb,  c,  IN_FOR_INIT_CLAUSE));  [CE]  <identifier>  expected  [FE]                              ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  Context.report(JSError.make(sb,  c,  IN_FOR_INIT_CLAUSE));  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	Context.report(JSError.make(sb,  c,  IN_FOR_INIT_CLAUSE));	  Context.report(JSError.make(lhsContext,    c,    IN_FOR_INIT_CLAUSE));    	non-compiled	[CE]  <identifier>  expected	103	None	replace
17	[BUG]  [BUGGY]  Context.report(JSError.make(lhsContext,  IN_FOR_INIT_CLAUSE,  c));  [CE]  <identifier>  expected  [FE]                                ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  Context.report(JSError.make(lhsContext,  IN_FOR_INIT_CLAUSE,  c));  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	Context.report(JSError.make(lhsContext,  IN_FOR_INIT_CLAUSE,  c));	  Context.report(JSError.make(lhsContext,    c,    IN_FOR_INIT_CLAUSE));    	non-compiled	[CE]  <identifier>  expected	103	None	replace
18	[BUG]  [BUGGY]  Context.report(JSError.make(c,  lhsContext,  IN_FOR_INIT_CLAUSE));  [CE]  <identifier>  expected  [FE]                                  ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  Context.report(JSError.make(c,  lhsContext,  IN_FOR_INIT_CLAUSE));  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	Context.report(JSError.make(c,  lhsContext,  IN_FOR_INIT_CLAUSE));	  Context.report(JSError.make(lhsContext,    c,    IN_FOR_INIT_CLAUSE));    	non-compiled	[CE]  <identifier>  expected	103	None	replace
19	[BUG]  [BUGGY]  Context.report(JSError.make(lhsContext,  c,  STATEMENT));  [CE]  <identifier>  expected  [FE]                                    ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  Context.report(JSError.make(lhsContext,  c,  STATEMENT));  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	Context.report(JSError.make(lhsContext,  c,  STATEMENT));	  Context.report(JSError.make(lhsContext,    c,    IN_FOR_INIT_CLAUSE));    	non-compiled	[CE]  <identifier>  expected	103	None	replace
20	[BUG]  [BUGGY]  Context.report(JSError.make(lhsContext,  c,  IN_FOR_INIT_CLAUSE,  ex));  [CE]  <identifier>  expected  [FE]                                      ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  Context.report(JSError.make(lhsContext,  c,  IN_FOR_INIT_CLAUSE,  ex));  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	Context.report(JSError.make(lhsContext,  c,  IN_FOR_INIT_CLAUSE,  ex));	  Context.report(JSError.make(lhsContext,    c,    IN_FOR_INIT_CLAUSE));    	non-compiled	[CE]  <identifier>  expected	103	None	replace
21	[BUG]  [BUGGY]  sb.append( ",n ");  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  sb.append( ",n ");  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	sb.append( ",n ");	  sb.append(   ",   ");    	non-compiled	[CE]  <identifier>  expected	88	None	replace
22	[BUG]  [BUGGY]  sb.append( "  }   ");  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  sb.append( "  }   ");  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	sb.append( "  }   ");	  sb.append(   ",   ");    	non-compiled	[CE]  <identifier>  expected	88	None	replace
23	[BUG]  [BUGGY]  sb.append('n',  c  +  1);  [CE]  <identifier>  expected  [FE]            ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  sb.append('n',  c  +  1);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	sb.append('n',  c  +  1);	  sb.append('n',    c);    	non-compiled	[CE]  <identifier>  expected	55	None	replace
24	[BUG]  [BUGGY]  sb.append(c,  'n');  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  sb.append(c,  'n');  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	sb.append(c,  'n');	  sb.append('n',    c);    	non-compiled	[CE]  <identifier>  expected	55	None	replace
25	[BUG]  [BUGGY]  sb.append('#',  c);  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  sb.append('#',  c);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	sb.append('#',  c);	  sb.append('n',    c);    	non-compiled	[CE]  <identifier>  expected	55	None	replace
26	[BUG]  [BUGGY]  sb.append('[',  c);  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  sb.append('[',  c);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	sb.append('[',  c);	  sb.append('n',    c);    	non-compiled	[CE]  <identifier>  expected	55	None	replace
27	[BUG]  [BUGGY]  sb.append('N',  c  +  1);  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  sb.append('N',  c  +  1);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	sb.append('N',  c  +  1);	  sb.append('n',    c);    	non-compiled	[CE]  <identifier>  expected	55	None	replace
28	[BUG]  [BUGGY]  System.err.println( "JavaScriptRepresentation  Exception: "  +  sb,  ex);  [CE]  <identifier>  expected  [FE]                        ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  System.err.println( "JavaScriptRepresentation  Exception: "  +  sb,  ex);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	System.err.println( "JavaScriptRepresentation  Exception: "  +  sb,  ex);	  System.err.println(   "JavaScriptRepresentation    Exception:   "    +    c,    ex);    	non-compiled	[CE]  <identifier>  expected	46	None	replace
29	[BUG]  [BUGGY]  System.err.println( "JavaScriptRepresentation  Exception: "  +  char  c,  ex);  [CE]  <identifier>  expected  [FE]                          ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  System.err.println( "JavaScriptRepresentation  Exception: "  +  char  c,  ex);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	System.err.println( "JavaScriptRepresentation  Exception: "  +  char  c,  ex);	  System.err.println(   "JavaScriptRepresentation    Exception:   "    +    c,    ex);    	non-compiled	[CE]  <identifier>  expected	46	None	replace
30	[BUG]  [BUGGY]  System.err.println( "JavaScriptRepresentation  Exception: "  +  e,  ex);  [CE]  <identifier>  expected  [FE]                            ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  System.err.println( "JavaScriptRepresentation  Exception: "  +  e,  ex);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	System.err.println( "JavaScriptRepresentation  Exception: "  +  e,  ex);	  System.err.println(   "JavaScriptRepresentation    Exception:   "    +    c,    ex);    	non-compiled	[CE]  <identifier>  expected	46	None	replace
31	[BUG]  [BUGGY]  System.err.println( "JavaScriptRepresentation  Exception: "  +  ex,  c);  [CE]  <identifier>  expected  [FE]                              ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  System.err.println( "JavaScriptRepresentation  Exception: "  +  ex,  c);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	System.err.println( "JavaScriptRepresentation  Exception: "  +  ex,  c);	  System.err.println(   "JavaScriptRepresentation    Exception:   "    +    c,    ex);    	non-compiled	[CE]  <identifier>  expected	46	None	replace
32	[BUG]  [BUGGY]  System.err.println(c  + "JavaScriptRepresentation  Exception: "  +  ex);  [CE]  <identifier>  expected  [FE]                        ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  System.err.println(c  + "JavaScriptRepresentation  Exception: "  +  ex);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	System.err.println(c  + "JavaScriptRepresentation  Exception: "  +  ex);	  System.err.println(c    +   "JavaScriptRepresentation    Exception:   "    +    c);    	non-compiled	[CE]  <identifier>  expected	91	None	replace
33	[BUG]  [BUGGY]  System.err.println(c  + "JavaScriptRepresentation  Exception: "  +  sb);  [CE]  <identifier>  expected  [FE]                          ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  System.err.println(c  + "JavaScriptRepresentation  Exception: "  +  sb);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	System.err.println(c  + "JavaScriptRepresentation  Exception: "  +  sb);	  System.err.println(c    +   "JavaScriptRepresentation    Exception:   "    +    c);    	non-compiled	[CE]  <identifier>  expected	91	None	replace
34	[BUG]  [BUGGY]  System.err.println(c  + "JavaScriptRepresentation  Exception: "  +  e);  [CE]  <identifier>  expected  [FE]                            ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  System.err.println(c  + "JavaScriptRepresentation  Exception: "  +  e);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	System.err.println(c  + "JavaScriptRepresentation  Exception: "  +  e);	  System.err.println(c    +   "JavaScriptRepresentation    Exception:   "    +    c);    	non-compiled	[CE]  <identifier>  expected	91	None	replace
35	[BUG]  [BUGGY]  System.err.println(sb  + "JavaScriptRepresentation  Exception: "  +  c);  [CE]  <identifier>  expected  [FE]                              ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  System.err.println(sb  + "JavaScriptRepresentation  Exception: "  +  c);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	System.err.println(sb  + "JavaScriptRepresentation  Exception: "  +  c);	  System.err.println(c    +   "JavaScriptRepresentation    Exception:   "    +    c);    	non-compiled	[CE]  <identifier>  expected	91	None	replace
36	[BUG]  [BUGGY]  Context  lhsContext  =  Context.getCurrentContext();  currentContext.appendHexJavaScriptRepresentation(c,  sb,  c);  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  Context  lhsContext  =  Context.getCurrentContext();  currentContext.appendHexJavaScriptRepresentation(c,  sb,  c);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	Context  lhsContext  =  Context.getCurrentContext();  currentContext.appendHexJavaScriptRepresentation(c,  sb,  c);	  Context    lhsContext    =    Context.getCurrentContext();    currentContext.appendHexJavaScriptRepresentation(c,    sb);    	non-compiled	[CE]  <identifier>  expected	114	None	replace
37	[BUG]  [BUGGY]  Context  rhsContext  =  Context.getCurrentContext();  currentContext.appendHexJavaScriptRepresentation(c,  sb);  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  Context  rhsContext  =  Context.getCurrentContext();  currentContext.appendHexJavaScriptRepresentation(c,  sb);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	Context  rhsContext  =  Context.getCurrentContext();  currentContext.appendHexJavaScriptRepresentation(c,  sb);	  Context    lhsContext    =    Context.getCurrentContext();    currentContext.appendHexJavaScriptRepresentation(c,    sb);    	non-compiled	[CE]  <identifier>  expected	114	None	replace
38	[BUG]  [BUGGY]  Context  lhsContext  =  context.getCurrentContext();  currentContext.appendHexJavaScriptRepresentation(c,  sb);  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  Context  lhsContext  =  context.getCurrentContext();  currentContext.appendHexJavaScriptRepresentation(c,  sb);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	Context  lhsContext  =  context.getCurrentContext();  currentContext.appendHexJavaScriptRepresentation(c,  sb);	  Context    lhsContext    =    Context.getCurrentContext();    currentContext.appendHexJavaScriptRepresentation(c,    sb);    	non-compiled	[CE]  <identifier>  expected	114	None	replace
39	[BUG]  [BUGGY]  currentContext.appendHexJavaScriptRepresentation(c,  sb);  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  currentContext.appendHexJavaScriptRepresentation(c,  sb);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	currentContext.appendHexJavaScriptRepresentation(c,  sb);	  Context    lhsContext    =    Context.getCurrentContext();    currentContext.appendHexJavaScriptRepresentation(c,    sb);    	non-compiled	[CE]  <identifier>  expected	114	None	replace
40	[BUG]  [BUGGY]  Context  lhsContext  =  Context.getCurrentContext();  currentContext.appendHexJavaScriptRepresentation(c,  sb,  this);  [CE]  <identifier>  expected  [FE]                      ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  Context  lhsContext  =  Context.getCurrentContext();  currentContext.appendHexJavaScriptRepresentation(c,  sb,  this);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	Context  lhsContext  =  Context.getCurrentContext();  currentContext.appendHexJavaScriptRepresentation(c,  sb,  this);	  Context    lhsContext    =    Context.getCurrentContext();    currentContext.appendHexJavaScriptRepresentation(c,    sb);    	non-compiled	[CE]  <identifier>  expected	114	None	replace
41	[BUG]  [BUGGY]  AppendHexJavaScriptRepresentation(c,  sb,  consumer);  [CE]  <identifier>  expected  [FE]                        ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  AppendHexJavaScriptRepresentation(c,  sb,  consumer);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	AppendHexJavaScriptRepresentation(c,  sb,  consumer);	  AppendHexJavaScriptRepresentation(c,    rhsContext,    consumer);    	non-compiled	[CE]  <identifier>  expected	12	None	replace
42	[BUG]  [BUGGY]  AppendHexJavaScriptRepresentation(sb,  c,  consumer);  [CE]  <identifier>  expected  [FE]                          ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  AppendHexJavaScriptRepresentation(sb,  c,  consumer);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	AppendHexJavaScriptRepresentation(sb,  c,  consumer);	  AppendHexJavaScriptRepresentation(c,    rhsContext,    consumer);    	non-compiled	[CE]  <identifier>  expected	12	None	replace
43	[BUG]  [BUGGY]  AppendHexJavaScriptRepresentation(c,  consumer,  rhsContext);  [CE]  <identifier>  expected  [FE]                            ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  AppendHexJavaScriptRepresentation(c,  consumer,  rhsContext);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	AppendHexJavaScriptRepresentation(c,  consumer,  rhsContext);	  AppendHexJavaScriptRepresentation(c,    rhsContext,    consumer);    	non-compiled	[CE]  <identifier>  expected	12	None	replace
44	[BUG]  [BUGGY]  appendHexJavaScriptRepresentation(c,  sb,  consumer);  [CE]  <identifier>  expected  [FE]                              ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  appendHexJavaScriptRepresentation(c,  sb,  consumer);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	appendHexJavaScriptRepresentation(c,  sb,  consumer);	  AppendHexJavaScriptRepresentation(c,    rhsContext,    consumer);    	non-compiled	[CE]  <identifier>  expected	12	None	replace
45	[BUG]  [BUGGY]  AppendHexJavaScriptRepresentation(c,  consumer,  lhsContext);  [CE]  <identifier>  expected  [FE]                                ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  AppendHexJavaScriptRepresentation(c,  consumer,  lhsContext);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	AppendHexJavaScriptRepresentation(c,  consumer,  lhsContext);	  AppendHexJavaScriptRepresentation(c,    rhsContext,    consumer);    	non-compiled	[CE]  <identifier>  expected	12	None	replace
46	[BUG]  [BUGGY]  AppendHexJavaScriptRepresentation(c,  sb,  consumers);  [CE]  <identifier>  expected  [FE]                                  ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  AppendHexJavaScriptRepresentation(c,  sb,  consumers);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	AppendHexJavaScriptRepresentation(c,  sb,  consumers);	  AppendHexJavaScriptRepresentation(c,    rhsContext,    consumer);    	non-compiled	[CE]  <identifier>  expected	12	None	replace
47	[BUG]  [BUGGY]  sb.append( ";null ");  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  sb.append( ";null ");  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	sb.append( ";null ");	  sb.append(   ";n   ");    	non-compiled	[CE]  <identifier>  expected	89	None	replace
48	[BUG]  [BUGGY]  sb.append( ";n ",  c);  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  sb.append( ";n ",  c);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	sb.append( ";n ",  c);	  sb.append(   ";n   ");    	non-compiled	[CE]  <identifier>  expected	89	None	replace
49	[BUG]  [BUGGY]  sb.append(';');  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  sb.append(';');  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	sb.append(';');	  sb.append(   ";n   ");    	non-compiled	[CE]  <identifier>  expected	89	None	replace
50	[BUG]  [BUGGY]  Context  rhsContext  =  Context.getCurrentContext();  codeGenerator.appendHexJavaScriptRepresentation(sb,  c,  consumer);  [CE]  <identifier>  expected  [FE]            ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  Context  rhsContext  =  Context.getCurrentContext();  codeGenerator.appendHexJavaScriptRepresentation(sb,  c,  consumer);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	Context  rhsContext  =  Context.getCurrentContext();  codeGenerator.appendHexJavaScriptRepresentation(sb,  c,  consumer);	  Context    rhsContext    =    Context.getCurrentContext();    codeGenerator.appendHexJavaScriptRepresentation(sb,    c);    	non-compiled	[CE]  <identifier>  expected	100	None	replace
51	[BUG]  [BUGGY]  Context  rhsContext  =  Context.getCurrentContext();  codeGenerator.appendHexJavaScriptRepresentation(c,  sb);  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  Context  rhsContext  =  Context.getCurrentContext();  codeGenerator.appendHexJavaScriptRepresentation(c,  sb);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	Context  rhsContext  =  Context.getCurrentContext();  codeGenerator.appendHexJavaScriptRepresentation(c,  sb);	  Context    rhsContext    =    Context.getCurrentContext();    codeGenerator.appendHexJavaScriptRepresentation(sb,    c);    	non-compiled	[CE]  <identifier>  expected	100	None	replace
52	[BUG]  [BUGGY]  Context  rhsContext  =  context.getCurrentContext();  codeGenerator.appendHexJavaScriptRepresentation(sb,  c);  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  Context  rhsContext  =  context.getCurrentContext();  codeGenerator.appendHexJavaScriptRepresentation(sb,  c);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	Context  rhsContext  =  context.getCurrentContext();  codeGenerator.appendHexJavaScriptRepresentation(sb,  c);	  Context    rhsContext    =    Context.getCurrentContext();    codeGenerator.appendHexJavaScriptRepresentation(sb,    c);    	non-compiled	[CE]  <identifier>  expected	100	None	replace
53	[BUG]  [BUGGY]  Context  currentContext  =  Context.getCurrentContext();  codeGenerator.appendHexJavaScriptRepresentation(sb,  c);  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  Context  currentContext  =  Context.getCurrentContext();  codeGenerator.appendHexJavaScriptRepresentation(sb,  c);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	Context  currentContext  =  Context.getCurrentContext();  codeGenerator.appendHexJavaScriptRepresentation(sb,  c);	  Context    rhsContext    =    Context.getCurrentContext();    codeGenerator.appendHexJavaScriptRepresentation(sb,    c);    	non-compiled	[CE]  <identifier>  expected	100	None	replace
54	[BUG]  [BUGGY]  Context  rhsContext  =  Context.currentContext();  codeGenerator.appendHexJavaScriptRepresentation(sb,  c);  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  Context  rhsContext  =  Context.currentContext();  codeGenerator.appendHexJavaScriptRepresentation(sb,  c);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	Context  rhsContext  =  Context.currentContext();  codeGenerator.appendHexJavaScriptRepresentation(sb,  c);	  Context    rhsContext    =    Context.getCurrentContext();    codeGenerator.appendHexJavaScriptRepresentation(sb,    c);    	non-compiled	[CE]  <identifier>  expected	100	None	replace
55	[BUG]  [BUGGY]  Context  rhsContext  =  context.getCurrentContext();  appendHexJavaScriptRepresentation(rhsContext,  c,  sb,  c);  [CE]  <identifier>  expected  [FE]                          ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  Context  rhsContext  =  context.getCurrentContext();  appendHexJavaScriptRepresentation(rhsContext,  c,  sb,  c);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	Context  rhsContext  =  context.getCurrentContext();  appendHexJavaScriptRepresentation(rhsContext,  c,  sb,  c);	  Context    rhsContext    =    context.getCurrentContext();    appendHexJavaScriptRepresentation(rhsContext,    c,    sb);    	non-compiled	[CE]  <identifier>  expected	96	None	replace
56	[BUG]  [BUGGY]  appendHexJavaScriptRepresentation(sb,  c,  context);  [CE]  <identifier>  expected  [FE]                            ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  appendHexJavaScriptRepresentation(sb,  c,  context);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	appendHexJavaScriptRepresentation(sb,  c,  context);	  Context    rhsContext    =    context.getCurrentContext();    appendHexJavaScriptRepresentation(rhsContext,    c,    sb);    	non-compiled	[CE]  <identifier>  expected	96	None	replace
57	[BUG]  [BUGGY]  AppendHexJavaScriptRepresentation(sb,  c,  context);  [CE]  <identifier>  expected  [FE]                              ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  AppendHexJavaScriptRepresentation(sb,  c,  context);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	AppendHexJavaScriptRepresentation(sb,  c,  context);	  Context    rhsContext    =    context.getCurrentContext();    appendHexJavaScriptRepresentation(rhsContext,    c,    sb);    	non-compiled	[CE]  <identifier>  expected	96	None	replace
58	[BUG]  [BUGGY]  Context  rhsContext  =  getCurrentContext();  appendHexJavaScriptRepresentation(rhsContext,  c,  sb);  [CE]  <identifier>  expected  [FE]                                ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  Context  rhsContext  =  getCurrentContext();  appendHexJavaScriptRepresentation(rhsContext,  c,  sb);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	Context  rhsContext  =  getCurrentContext();  appendHexJavaScriptRepresentation(rhsContext,  c,  sb);	  Context    rhsContext    =    context.getCurrentContext();    appendHexJavaScriptRepresentation(rhsContext,    c,    sb);    	non-compiled	[CE]  <identifier>  expected	96	None	replace
59	[BUG]  [BUGGY]  Context  rhsContext  =  context.getCurrentContext();  appendHexJavaScriptRepresentation(rhsContext,  c,  sb,  consumer);  [CE]  <identifier>  expected  [FE]                                  ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  Context  rhsContext  =  context.getCurrentContext();  appendHexJavaScriptRepresentation(rhsContext,  c,  sb,  consumer);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	Context  rhsContext  =  context.getCurrentContext();  appendHexJavaScriptRepresentation(rhsContext,  c,  sb,  consumer);	  Context    rhsContext    =    context.getCurrentContext();    appendHexJavaScriptRepresentation(rhsContext,    c,    sb);    	non-compiled	[CE]  <identifier>  expected	96	None	replace
60	[BUG]  [BUGGY]  Context  rhsContext  =  context.getCurrentContext();  appendHexJavaScriptRepresentation(rhsContext,  c,  sb,  message);  [CE]  <identifier>  expected  [FE]                                    ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  Context  rhsContext  =  context.getCurrentContext();  appendHexJavaScriptRepresentation(rhsContext,  c,  sb,  message);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	Context  rhsContext  =  context.getCurrentContext();  appendHexJavaScriptRepresentation(rhsContext,  c,  sb,  message);	  Context    rhsContext    =    context.getCurrentContext();    appendHexJavaScriptRepresentation(rhsContext,    c,    sb);    	non-compiled	[CE]  <identifier>  expected	96	None	replace
61	[BUG]  [BUGGY]  Context  rhsContext  =  Context.getCurrentContext(context);  [CE]  <identifier>  expected  [FE]                          ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  Context  rhsContext  =  Context.getCurrentContext(context);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	Context  rhsContext  =  Context.getCurrentContext(context);	  Context    rhsContext    =    Context.getCurrentContext();    	non-compiled	[CE]  <identifier>  expected	80	None	replace
62	[BUG]  [BUGGY]  Context  rhsContext  =  Context.getCurrentContext(c);  [CE]  <identifier>  expected  [FE]                            ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  Context  rhsContext  =  Context.getCurrentContext(c);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	Context  rhsContext  =  Context.getCurrentContext(c);	  Context    rhsContext    =    Context.getCurrentContext();    	non-compiled	[CE]  <identifier>  expected	80	None	replace
63	[BUG]  [BUGGY]  Context  rhsContext  =  Context.currentContext();  [CE]  <identifier>  expected  [FE]                              ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  Context  rhsContext  =  Context.currentContext();  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	Context  rhsContext  =  Context.currentContext();	  Context    rhsContext    =    Context.getCurrentContext();    	non-compiled	[CE]  <identifier>  expected	80	None	replace
64	[BUG]  [BUGGY]  Context  rhsContext  =  Context.getCurrentContext(lhsContext);  [CE]  <identifier>  expected  [FE]                                ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  Context  rhsContext  =  Context.getCurrentContext(lhsContext);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	Context  rhsContext  =  Context.getCurrentContext(lhsContext);	  Context    rhsContext    =    Context.getCurrentContext();    	non-compiled	[CE]  <identifier>  expected	80	None	replace
65	[BUG]  [BUGGY]  Context  rhsContext  =  Context.getCurrentContext(true);  [CE]  <identifier>  expected  [FE]                                  ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  Context  rhsContext  =  Context.getCurrentContext(true);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	Context  rhsContext  =  Context.getCurrentContext(true);	  Context    rhsContext    =    Context.getCurrentContext();    	non-compiled	[CE]  <identifier>  expected	80	None	replace
66	[BUG]  [BUGGY]  Context  rhsContext  =  Context.getCurrentContextInstance();  [CE]  illegal  start  of  type  [FE]                                    ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  Context  rhsContext  =  Context.getCurrentContextInstance();  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	Context  rhsContext  =  Context.getCurrentContextInstance();	  Context    rhsContext    =    Context.getCurrentContext();    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
67	[BUG]  [BUGGY]  System.err.println(c  + "JavaScriptRepresentation  error: "  +  sb.toString());  [CE]  illegal  start  of  type  [FE]                      ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  System.err.println(c  + "JavaScriptRepresentation  error: "  +  sb.toString());  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	System.err.println(c  + "JavaScriptRepresentation  error: "  +  sb.toString());	  System.err.println(   "JavaScriptRepresentation    error:   "    +    sb.toString());    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
68	[BUG]  [BUGGY]  System.err.println( "JavaScriptRepresentation  error: "  +  char.toString());  [CE]  illegal  start  of  type  [FE]                        ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  System.err.println( "JavaScriptRepresentation  error: "  +  char.toString());  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	System.err.println( "JavaScriptRepresentation  error: "  +  char.toString());	  System.err.println(   "JavaScriptRepresentation    error:   "    +    sb.toString());    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
69	[BUG]  [BUGGY]  Context  rhsContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(consumer,  c,  sb);  [CE]  illegal  start  of  type  [FE]                              ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  Context  rhsContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(consumer,  c,  sb);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	Context  rhsContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(consumer,  c,  sb);	  Context    rhsContext    =    Context.getCurrentContext();    appendHexJavaScriptRepresentation(rhsContext,    c,    consumer,    sb);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
70	[BUG]  [BUGGY]  appendHexJavaScriptRepresentation(sb,  c,  consumer,  Context.getCurrentContext());  [CE]  illegal  start  of  type  [FE]                                ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  appendHexJavaScriptRepresentation(sb,  c,  consumer,  Context.getCurrentContext());  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	appendHexJavaScriptRepresentation(sb,  c,  consumer,  Context.getCurrentContext());	  Context    rhsContext    =    Context.getCurrentContext();    appendHexJavaScriptRepresentation(rhsContext,    c,    consumer,    sb);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
71	[BUG]  [BUGGY]  AppendHexJavaScriptRepresentation(sb,  c,  consumer,  Context.getCurrentContext());  [CE]  illegal  start  of  type  [FE]                                  ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  AppendHexJavaScriptRepresentation(sb,  c,  consumer,  Context.getCurrentContext());  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	AppendHexJavaScriptRepresentation(sb,  c,  consumer,  Context.getCurrentContext());	  Context    rhsContext    =    Context.getCurrentContext();    appendHexJavaScriptRepresentation(rhsContext,    c,    consumer,    sb);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
72	[BUG]  [BUGGY]  Context  rhsContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(rhsContext,  c,  sb,  consumer);  [CE]  illegal  start  of  type  [FE]                                    ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  Context  rhsContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(rhsContext,  c,  sb,  consumer);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	Context  rhsContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(rhsContext,  c,  sb,  consumer);	  Context    rhsContext    =    Context.getCurrentContext();    appendHexJavaScriptRepresentation(rhsContext,    c,    consumer,    sb);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
73	[BUG]  [BUGGY]  Context  rhsContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(rhsContext,  sb,  consumer,  c);  [CE]  illegal  start  of  type  [FE]                                      ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  Context  rhsContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(rhsContext,  sb,  consumer,  c);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	Context  rhsContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(rhsContext,  sb,  consumer,  c);	  Context    rhsContext    =    Context.getCurrentContext();    appendHexJavaScriptRepresentation(rhsContext,    c,    consumer,    sb);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
74	[BUG]  [BUGGY]  Context  rhsContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(sb,  c,  consumer,  rhsContext);  [CE]  illegal  start  of  type  [FE]                                        ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  Context  rhsContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(sb,  c,  consumer,  rhsContext);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	Context  rhsContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(sb,  c,  consumer,  rhsContext);	  Context    rhsContext    =    Context.getCurrentContext();    appendHexJavaScriptRepresentation(rhsContext,    c,    consumer,    sb);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
75	[BUG]  [BUGGY]  appendJavaScriptRepresentation(c,  sb,  c);  [CE]  illegal  start  of  type  [FE]              ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  appendJavaScriptRepresentation(c,  sb,  c);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	appendJavaScriptRepresentation(c,  sb,  c);	  appendJavaScriptRepresentation(c,    sb);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
76	[BUG]  [BUGGY]  appendJavaScriptRepresentation(c,  sb,  message);  [CE]  illegal  start  of  type  [FE]                ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  appendJavaScriptRepresentation(c,  sb,  message);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	appendJavaScriptRepresentation(c,  sb,  message);	  appendJavaScriptRepresentation(c,    sb);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
77	[BUG]  [BUGGY]  appendJavaScriptRepresentation(c,  sb,  Color.black);  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  appendJavaScriptRepresentation(c,  sb,  Color.black);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	appendJavaScriptRepresentation(c,  sb,  Color.black);	  appendJavaScriptRepresentation(c,    sb);    	non-compiled	[CE]  <identifier>  expected	2	None	replace
78	[BUG]  [BUGGY]  Context  rhsContext  =  Context.getCurrentContext();  currentContext.appendHexJavaScriptRepresentation(sb,  c);  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  Context  rhsContext  =  Context.getCurrentContext();  currentContext.appendHexJavaScriptRepresentation(sb,  c);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	Context  rhsContext  =  Context.getCurrentContext();  currentContext.appendHexJavaScriptRepresentation(sb,  c);	  Context    lhsContext    =    Context.getCurrentContext();    currentContext.appendHexJavaScriptRepresentation(sb,    c);    	non-compiled	[CE]  <identifier>  expected	108	None	replace
79	[BUG]  [BUGGY]  Context  lhsContext  =  context.getCurrentContext();  currentContext.appendHexJavaScriptRepresentation(sb,  c);  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  Context  lhsContext  =  context.getCurrentContext();  currentContext.appendHexJavaScriptRepresentation(sb,  c);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	Context  lhsContext  =  context.getCurrentContext();  currentContext.appendHexJavaScriptRepresentation(sb,  c);	  Context    lhsContext    =    Context.getCurrentContext();    currentContext.appendHexJavaScriptRepresentation(sb,    c);    	non-compiled	[CE]  <identifier>  expected	108	None	replace
80	[BUG]  [BUGGY]  currentContext.appendHexJavaScriptRepresentation(sb,  c);  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  currentContext.appendHexJavaScriptRepresentation(sb,  c);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	currentContext.appendHexJavaScriptRepresentation(sb,  c);	  Context    lhsContext    =    Context.getCurrentContext();    currentContext.appendHexJavaScriptRepresentation(sb,    c);    	non-compiled	[CE]  <identifier>  expected	108	None	replace
81	[BUG]  [BUGGY]  Context  lhsContext  =  Context.getCurrentContext();  currentContext.appendHexJavaScriptRepresentation(sb,  c,  consumer);  [CE]  <identifier>  expected  [FE]                      ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  Context  lhsContext  =  Context.getCurrentContext();  currentContext.appendHexJavaScriptRepresentation(sb,  c,  consumer);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	Context  lhsContext  =  Context.getCurrentContext();  currentContext.appendHexJavaScriptRepresentation(sb,  c,  consumer);	  Context    lhsContext    =    Context.getCurrentContext();    currentContext.appendHexJavaScriptRepresentation(sb,    c);    	non-compiled	[CE]  <identifier>  expected	108	None	replace
82	[BUG]  [BUGGY]  Context  lhsContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(sb,  c,  rhsContext,  consumer);  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  Context  lhsContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(sb,  c,  rhsContext,  consumer);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	Context  lhsContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(sb,  c,  rhsContext,  consumer);	  Context    lhsContext    =    Context.getCurrentContext();    appendHexJavaScriptRepresentation(sb,    c,    rhsContext);    	non-compiled	[CE]  <identifier>  expected	69	None	replace
83	[BUG]  [BUGGY]  AppendHexJavaScriptRepresentation(sb,  c,  rhsContext);  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  AppendHexJavaScriptRepresentation(sb,  c,  rhsContext);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	AppendHexJavaScriptRepresentation(sb,  c,  rhsContext);	  Context    lhsContext    =    Context.getCurrentContext();    appendHexJavaScriptRepresentation(sb,    c,    rhsContext);    	non-compiled	[CE]  <identifier>  expected	69	None	replace
84	[BUG]  [BUGGY]  appendHexJavaScriptRepresentation(sb,  c,  rhsContext);  [CE]  <identifier>  expected  [FE]                      ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  appendHexJavaScriptRepresentation(sb,  c,  rhsContext);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	appendHexJavaScriptRepresentation(sb,  c,  rhsContext);	  Context    lhsContext    =    Context.getCurrentContext();    appendHexJavaScriptRepresentation(sb,    c,    rhsContext);    	non-compiled	[CE]  <identifier>  expected	69	None	replace
85	[BUG]  [BUGGY]  Context  lhsContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(sb,  c,  this);  [CE]  <identifier>  expected  [FE]                        ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  Context  lhsContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(sb,  c,  this);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	Context  lhsContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(sb,  c,  this);	  Context    lhsContext    =    Context.getCurrentContext();    appendHexJavaScriptRepresentation(sb,    c,    rhsContext);    	non-compiled	[CE]  <identifier>  expected	69	None	replace
86	[BUG]  [BUGGY]  appendBooleanRepresentation(c,  sb,  true);  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  appendBooleanRepresentation(c,  sb,  true);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	appendBooleanRepresentation(c,  sb,  true);	  appendBooleanRepresentation(c,    sb);    	non-compiled	[CE]  <identifier>  expected	26	None	replace
87	[BUG]  [BUGGY]  appendBooleanRepresentation(c,  sb,  false);  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  appendBooleanRepresentation(c,  sb,  false);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	appendBooleanRepresentation(c,  sb,  false);	  appendBooleanRepresentation(c,    sb);    	non-compiled	[CE]  <identifier>  expected	26	None	replace
88	[BUG]  [BUGGY]  appendBooleanRepresentation(c,  sb,  Color.black);  [CE]  <identifier>  expected  [FE]                      ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  appendBooleanRepresentation(c,  sb,  Color.black);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	appendBooleanRepresentation(c,  sb,  Color.black);	  appendBooleanRepresentation(c,    sb);    	non-compiled	[CE]  <identifier>  expected	26	None	replace
89	[BUG]  [BUGGY]  appendBooleanRepresentation(c,  sb,  consumer);  [CE]  <identifier>  expected  [FE]                        ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  appendBooleanRepresentation(c,  sb,  consumer);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	appendBooleanRepresentation(c,  sb,  consumer);	  appendBooleanRepresentation(c,    sb);    	non-compiled	[CE]  <identifier>  expected	26	None	replace
90	[BUG]  [BUGGY]  appendBooleanRepresentation(c,  sb,  message);  [CE]  <identifier>  expected  [FE]                          ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  appendBooleanRepresentation(c,  sb,  message);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	appendBooleanRepresentation(c,  sb,  message);	  appendBooleanRepresentation(c,    sb);    	non-compiled	[CE]  <identifier>  expected	26	None	replace
91	[BUG]  [BUGGY]  appendHexJavaScriptRepresentation(c,  sb,  this);  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  appendHexJavaScriptRepresentation(c,  sb,  this);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	appendHexJavaScriptRepresentation(c,  sb,  this);	  Context    lhsContext    =    Context.getCurrentContext();    appendHexJavaScriptRepresentation(c,    sb,    this);    	non-compiled	[CE]  <identifier>  expected	116	None	replace
92	[BUG]  [BUGGY]  AppendHexJavaScriptRepresentation(c,  sb,  this);  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  AppendHexJavaScriptRepresentation(c,  sb,  this);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	AppendHexJavaScriptRepresentation(c,  sb,  this);	  Context    lhsContext    =    Context.getCurrentContext();    appendHexJavaScriptRepresentation(c,    sb,    this);    	non-compiled	[CE]  <identifier>  expected	116	None	replace
93	[BUG]  [BUGGY]  Context  lhsContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(c,  sb,  this,  consumer);  [CE]  <identifier>  expected  [FE]                      ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  Context  lhsContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(c,  sb,  this,  consumer);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	Context  lhsContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(c,  sb,  this,  consumer);	  Context    lhsContext    =    Context.getCurrentContext();    appendHexJavaScriptRepresentation(c,    sb,    this);    	non-compiled	[CE]  <identifier>  expected	116	None	replace
94	[BUG]  [BUGGY]  Context  rhsContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(c,  sb,  this);  [CE]  <identifier>  expected  [FE]                        ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  Context  rhsContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(c,  sb,  this);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	Context  rhsContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(c,  sb,  this);	  Context    lhsContext    =    Context.getCurrentContext();    appendHexJavaScriptRepresentation(c,    sb,    this);    	non-compiled	[CE]  <identifier>  expected	116	None	replace
95	[BUG]  [BUGGY]  Context  lhsContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(c,  sb,  null);  [CE]  <identifier>  expected  [FE]                          ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  Context  lhsContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(c,  sb,  null);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	Context  lhsContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(c,  sb,  null);	  Context    lhsContext    =    Context.getCurrentContext();    appendHexJavaScriptRepresentation(c,    sb,    this);    	non-compiled	[CE]  <identifier>  expected	116	None	replace
96	[BUG]  [BUGGY]  Context  lhsContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(c,  sb,  this,  context);  [CE]  <identifier>  expected  [FE]                            ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  Context  lhsContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(c,  sb,  this,  context);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	Context  lhsContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(c,  sb,  this,  context);	  Context    lhsContext    =    Context.getCurrentContext();    appendHexJavaScriptRepresentation(c,    sb,    this);    	non-compiled	[CE]  <identifier>  expected	116	None	replace
97	[BUG]  [BUGGY]  appendHexJavaScriptRepresentation(sb,  char  c,  Context.getCurrentContext());  [CE]  <identifier>  expected  [FE]                      ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  appendHexJavaScriptRepresentation(sb,  char  c,  Context.getCurrentContext());  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	appendHexJavaScriptRepresentation(sb,  char  c,  Context.getCurrentContext());	  Context    rhsContext    =    Context.getCurrentContext();    appendHexJavaScriptRepresentation(rhsContext,    char    c,    sb);    	non-compiled	[CE]  <identifier>  expected	105	None	replace
98	[BUG]  [BUGGY]  AppendHexJavaScriptRepresentation(sb,  char  c,  Context.getCurrentContext());  [CE]  <identifier>  expected  [FE]                        ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  AppendHexJavaScriptRepresentation(sb,  char  c,  Context.getCurrentContext());  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	AppendHexJavaScriptRepresentation(sb,  char  c,  Context.getCurrentContext());	  Context    rhsContext    =    Context.getCurrentContext();    appendHexJavaScriptRepresentation(rhsContext,    char    c,    sb);    	non-compiled	[CE]  <identifier>  expected	105	None	replace
99	[BUG]  [BUGGY]  Context  currentContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(currentContext,  char  c,  sb);  [CE]  <identifier>  expected  [FE]                          ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  Context  currentContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(currentContext,  char  c,  sb);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	Context  currentContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(currentContext,  char  c,  sb);	  Context    rhsContext    =    Context.getCurrentContext();    appendHexJavaScriptRepresentation(rhsContext,    char    c,    sb);    	non-compiled	[CE]  <identifier>  expected	105	None	replace
100	[BUG]  [BUGGY]  Context  lhsContext  =  Context.getCurrentContext(context);  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  Context  lhsContext  =  Context.getCurrentContext(context);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	Context  lhsContext  =  Context.getCurrentContext(context);	  Context    lhsContext    =    Context.getCurrentContext();    	non-compiled	[CE]  <identifier>  expected	68	None	replace
101	[BUG]  [BUGGY]  Context  lhsContext  =  Context.currentContext();  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  Context  lhsContext  =  Context.currentContext();  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	Context  lhsContext  =  Context.currentContext();	  Context    lhsContext    =    Context.getCurrentContext();    	non-compiled	[CE]  <identifier>  expected	68	None	replace
102	[BUG]  [BUGGY]  Context  lhsContext  =  Context.getCurrentContext(true);  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  Context  lhsContext  =  Context.getCurrentContext(true);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	Context  lhsContext  =  Context.getCurrentContext(true);	  Context    lhsContext    =    Context.getCurrentContext();    	non-compiled	[CE]  <identifier>  expected	68	None	replace
103	[BUG]  [BUGGY]  Context  lhsContext  =  Context.getCurrentContext(c);  [CE]  <identifier>  expected  [FE]                      ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  Context  lhsContext  =  Context.getCurrentContext(c);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	Context  lhsContext  =  Context.getCurrentContext(c);	  Context    lhsContext    =    Context.getCurrentContext();    	non-compiled	[CE]  <identifier>  expected	68	None	replace
104	[BUG]  [BUGGY]  Context  lhsContext  =  Context.getCurrentContext(rhsContext);  [CE]  <identifier>  expected  [FE]                        ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  Context  lhsContext  =  Context.getCurrentContext(rhsContext);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	Context  lhsContext  =  Context.getCurrentContext(rhsContext);	  Context    lhsContext    =    Context.getCurrentContext();    	non-compiled	[CE]  <identifier>  expected	68	None	replace
105	[BUG]  [BUGGY]  Context  lhsContext  =  Context.getCurrentContextInstance();  [CE]  invalid  method  declaration;  return  type  required  [FE]                          ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  Context  lhsContext  =  Context.getCurrentContextInstance();  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	Context  lhsContext  =  Context.getCurrentContextInstance();	  Context    lhsContext    =    Context.getCurrentContext();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	68	None	replace
106	[BUG]  [BUGGY]  System.err.println( "Unable  to  append  hexJavaScriptRepresentation: "  +  c);  [CE]  invalid  method  declaration;  return  type  required  [FE]                            ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  System.err.println( "Unable  to  append  hexJavaScriptRepresentation: "  +  c);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	System.err.println( "Unable  to  append  hexJavaScriptRepresentation: "  +  c);	  System.err.println(   "Unable    to    append    HexJavaScriptRepresentation:   "    +    c);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	104	None	replace
107	[BUG]  [BUGGY]  System.err.println( "Unable  to  append  HTMLJavaScriptRepresentation: "  +  c);  [CE]  invalid  method  declaration;  return  type  required  [FE]                              ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  System.err.println( "Unable  to  append  HTMLJavaScriptRepresentation: "  +  c);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	System.err.println( "Unable  to  append  HTMLJavaScriptRepresentation: "  +  c);	  System.err.println(   "Unable    to    append    HexJavaScriptRepresentation:   "    +    c);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	104	None	replace
108	[BUG]  [BUGGY]  System.err.println( "Unable  to  append  HEXJavaScriptRepresentation: "  +  c);  [CE]  invalid  method  declaration;  return  type  required  [FE]                                ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  System.err.println( "Unable  to  append  HEXJavaScriptRepresentation: "  +  c);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	System.err.println( "Unable  to  append  HEXJavaScriptRepresentation: "  +  c);	  System.err.println(   "Unable    to    append    HexJavaScriptRepresentation:   "    +    c);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	104	None	replace
109	[BUG]  [BUGGY]  System.err.println( "Unable  to  append  htmlJavaScriptRepresentation: "  +  c);  [CE]  invalid  method  declaration;  return  type  required  [FE]                                  ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  System.err.println( "Unable  to  append  htmlJavaScriptRepresentation: "  +  c);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	System.err.println( "Unable  to  append  htmlJavaScriptRepresentation: "  +  c);	  System.err.println(   "Unable    to    append    HexJavaScriptRepresentation:   "    +    c);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	104	None	replace
110	[BUG]  [BUGGY]  Context  lhsContext  =  Context.getCurrentContext();  codeGenerator.appendHexJavaScriptRepresentation(sb,  c,  consumer);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  Context  lhsContext  =  Context.getCurrentContext();  codeGenerator.appendHexJavaScriptRepresentation(sb,  c,  consumer);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	Context  lhsContext  =  Context.getCurrentContext();  codeGenerator.appendHexJavaScriptRepresentation(sb,  c,  consumer);	  Context    lhsContext    =    Context.getCurrentContext();    codeGenerator.appendHexJavaScriptRepresentation(sb,    c);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	109	None	replace
111	[BUG]  [BUGGY]  Context  lhsContext  =  context.getCurrentContext();  codeGenerator.appendHexJavaScriptRepresentation(sb,  c);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  Context  lhsContext  =  context.getCurrentContext();  codeGenerator.appendHexJavaScriptRepresentation(sb,  c);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	Context  lhsContext  =  context.getCurrentContext();  codeGenerator.appendHexJavaScriptRepresentation(sb,  c);	  Context    lhsContext    =    Context.getCurrentContext();    codeGenerator.appendHexJavaScriptRepresentation(sb,    c);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	109	None	replace
112	[BUG]  [BUGGY]  Context  lhsContext  =  Context.currentContext();  codeGenerator.appendHexJavaScriptRepresentation(sb,  c);  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  Context  lhsContext  =  Context.currentContext();  codeGenerator.appendHexJavaScriptRepresentation(sb,  c);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	Context  lhsContext  =  Context.currentContext();  codeGenerator.appendHexJavaScriptRepresentation(sb,  c);	  Context    lhsContext    =    Context.getCurrentContext();    codeGenerator.appendHexJavaScriptRepresentation(sb,    c);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	109	None	replace
113	[BUG]  [BUGGY]  AppendHexJavaScriptRepresentation(c,  sb,  message);  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  AppendHexJavaScriptRepresentation(c,  sb,  message);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	AppendHexJavaScriptRepresentation(c,  sb,  message);	  Context    lhsContext    =    Context.getCurrentContext();    appendHexJavaScriptRepresentation(c,    sb,    message);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	20	None	replace
114	[BUG]  [BUGGY]  Context  rhsContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(c,  sb,  message);  [CE]  invalid  method  declaration;  return  type  required  [FE]                        ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  Context  rhsContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(c,  sb,  message);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	Context  rhsContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(c,  sb,  message);	  Context    lhsContext    =    Context.getCurrentContext();    appendHexJavaScriptRepresentation(c,    sb,    message);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	20	None	replace
115	[BUG]  [BUGGY]  Context  lhsContext  =  context.getCurrentContext();  appendHexJavaScriptRepresentation(c,  sb,  message);  [CE]  invalid  method  declaration;  return  type  required  [FE]                          ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  Context  lhsContext  =  context.getCurrentContext();  appendHexJavaScriptRepresentation(c,  sb,  message);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	Context  lhsContext  =  context.getCurrentContext();  appendHexJavaScriptRepresentation(c,  sb,  message);	  Context    lhsContext    =    Context.getCurrentContext();    appendHexJavaScriptRepresentation(c,    sb,    message);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	20	None	replace
116	[BUG]  [BUGGY]  appendJavaScriptRepresentation(sb,  c,  0);  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  appendJavaScriptRepresentation(sb,  c,  0);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	appendJavaScriptRepresentation(sb,  c,  0);	  appendJavaScriptRepresentation(sb,    c);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	1	None	replace
117	[BUG]  [BUGGY]  appendHexJavaScriptRepresentation(c,  sb,  Context.getCurrentContext());  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  appendHexJavaScriptRepresentation(c,  sb,  Context.getCurrentContext());  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	appendHexJavaScriptRepresentation(c,  sb,  Context.getCurrentContext());	  Context    currentContext    =    Context.getCurrentContext();    appendHexJavaScriptRepresentation(currentContext,    sb,    c);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	85	None	replace
118	[BUG]  [BUGGY]  AppendHexJavaScriptRepresentation(c,  sb,  Context.getCurrentContext());  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  AppendHexJavaScriptRepresentation(c,  sb,  Context.getCurrentContext());  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	AppendHexJavaScriptRepresentation(c,  sb,  Context.getCurrentContext());	  Context    currentContext    =    Context.getCurrentContext();    appendHexJavaScriptRepresentation(currentContext,    sb,    c);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	85	None	replace
119	[BUG]  [BUGGY]  appendHexJavaScriptRepresentation(currentContext,  sb,  c);  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  appendHexJavaScriptRepresentation(currentContext,  sb,  c);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	appendHexJavaScriptRepresentation(currentContext,  sb,  c);	  Context    currentContext    =    Context.getCurrentContext();    appendHexJavaScriptRepresentation(currentContext,    sb,    c);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	85	None	replace
120	[BUG]  [BUGGY]  AppendHexJavaScriptRepresentation(c,  sb,  c);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  AppendHexJavaScriptRepresentation(c,  sb,  c);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	AppendHexJavaScriptRepresentation(c,  sb,  c);	  Context    lhsContext    =    Context.getCurrentContext();    appendHexJavaScriptRepresentation(c,    sb,    c);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	18	None	replace
121	[BUG]  [BUGGY]  Context  lhsContext  =  Context.currentContext();  appendHexJavaScriptRepresentation(c,  sb,  c);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  Context  lhsContext  =  Context.currentContext();  appendHexJavaScriptRepresentation(c,  sb,  c);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	Context  lhsContext  =  Context.currentContext();  appendHexJavaScriptRepresentation(c,  sb,  c);	  Context    lhsContext    =    Context.getCurrentContext();    appendHexJavaScriptRepresentation(c,    sb,    c);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	18	None	replace
122	[BUG]  [BUGGY]  Context  lhsContext  =  Context.getCurrentContext();  codeGenerator.appendHexJavaScriptRepresentation(c,  sb,  c);  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  Context  lhsContext  =  Context.getCurrentContext();  codeGenerator.appendHexJavaScriptRepresentation(c,  sb,  c);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	Context  lhsContext  =  Context.getCurrentContext();  codeGenerator.appendHexJavaScriptRepresentation(c,  sb,  c);	  Context    lhsContext    =    Context.getCurrentContext();    appendHexJavaScriptRepresentation(c,    sb,    c);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	18	None	replace
123	[BUG]  [BUGGY]  Context  lhsContext  =  Context.getCurrentContext();  appendJavaScriptRepresentation(c,  sb,  c);  [CE]  invalid  method  declaration;  return  type  required  [FE]                        ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  Context  lhsContext  =  Context.getCurrentContext();  appendJavaScriptRepresentation(c,  sb,  c);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	Context  lhsContext  =  Context.getCurrentContext();  appendJavaScriptRepresentation(c,  sb,  c);	  Context    lhsContext    =    Context.getCurrentContext();    appendHexJavaScriptRepresentation(c,    sb,    c);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	18	None	replace
124	[BUG]  [BUGGY]  AppendHexJavaScriptRepresentation(c,  Context.getCodeGenerator());  [CE]  invalid  method  declaration;  return  type  required  [FE]                    ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  AppendHexJavaScriptRepresentation(c,  Context.getCodeGenerator());  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	AppendHexJavaScriptRepresentation(c,  Context.getCodeGenerator());	  AppendHexJavaScriptRepresentation(c,    Context.getCurrentContext());    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	62	None	replace
125	[BUG]  [BUGGY]  AppendHexJavaScriptRepresentation(c,  sb.toString());  [CE]  invalid  method  declaration;  return  type  required  [FE]                      ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  AppendHexJavaScriptRepresentation(c,  sb.toString());  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	AppendHexJavaScriptRepresentation(c,  sb.toString());	  AppendHexJavaScriptRepresentation(c,    Context.getCurrentContext());    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	62	None	replace
126	[BUG]  [BUGGY]  AppendHexJavaScriptRepresentation(c,  Context.getCurrentContext(),  sb);  [CE]  invalid  method  declaration;  return  type  required  [FE]                        ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  AppendHexJavaScriptRepresentation(c,  Context.getCurrentContext(),  sb);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	AppendHexJavaScriptRepresentation(c,  Context.getCurrentContext(),  sb);	  AppendHexJavaScriptRepresentation(c,    Context.getCurrentContext());    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	62	None	replace
127	[BUG]  [BUGGY]  AppendHexJavaScriptRepresentation(c,  sb.toCharArray());  [CE]  invalid  method  declaration;  return  type  required  [FE]                          ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  AppendHexJavaScriptRepresentation(c,  sb.toCharArray());  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	AppendHexJavaScriptRepresentation(c,  sb.toCharArray());	  AppendHexJavaScriptRepresentation(c,    Context.getCurrentContext());    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	62	None	replace
128	[BUG]  [BUGGY]  appendHexJavaScriptRepresentation(c,  builder,  Context.getCurrentContext());  [CE]  invalid  method  declaration;  return  type  required  [FE]            ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  appendHexJavaScriptRepresentation(c,  builder,  Context.getCurrentContext());  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	appendHexJavaScriptRepresentation(c,  builder,  Context.getCurrentContext());	  Context    rhsContext    =    Context.getCurrentContext();    appendHexJavaScriptRepresentation(rhsContext,    builder,    c);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	82	None	replace
129	[BUG]  [BUGGY]  AppendHexJavaScriptRepresentation(c,  builder,  Context.getCurrentContext());  [CE]  invalid  method  declaration;  return  type  required  [FE]              ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  AppendHexJavaScriptRepresentation(c,  builder,  Context.getCurrentContext());  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	AppendHexJavaScriptRepresentation(c,  builder,  Context.getCurrentContext());	  Context    rhsContext    =    Context.getCurrentContext();    appendHexJavaScriptRepresentation(rhsContext,    builder,    c);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	82	None	replace
130	[BUG]  [BUGGY]  Context  rhsContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(rhsContext,  sb,  builder,  c);  [CE]  invalid  method  declaration;  return  type  required  [FE]                ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  Context  rhsContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(rhsContext,  sb,  builder,  c);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	Context  rhsContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(rhsContext,  sb,  builder,  c);	  Context    rhsContext    =    Context.getCurrentContext();    appendHexJavaScriptRepresentation(rhsContext,    builder,    c);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	82	None	replace
131	[BUG]  [BUGGY]  Context  rhsContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(rhsContext,  builder,  c,  consumer);  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  Context  rhsContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(rhsContext,  builder,  c,  consumer);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	Context  rhsContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(rhsContext,  builder,  c,  consumer);	  Context    rhsContext    =    Context.getCurrentContext();    appendHexJavaScriptRepresentation(rhsContext,    builder,    c);    	non-compiled	[CE]  <identifier>  expected	82	None	replace
132	[BUG]  [BUGGY]  Context  rhsContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(builder,  c);  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  Context  rhsContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(builder,  c);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	Context  rhsContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(builder,  c);	  Context    rhsContext    =    Context.getCurrentContext();    appendHexJavaScriptRepresentation(rhsContext,    builder,    c);    	non-compiled	[CE]  <identifier>  expected	82	None	replace
133	[BUG]  [BUGGY]  appendHexJavaScriptRepresentation(sb,  c,  Context.getCodeGenerator());  [CE]  <identifier>  expected  [FE]                      ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  appendHexJavaScriptRepresentation(sb,  c,  Context.getCodeGenerator());  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	appendHexJavaScriptRepresentation(sb,  c,  Context.getCodeGenerator());	  appendHexJavaScriptRepresentation(sb,    c,    Context.getCurrentContext());    	non-compiled	[CE]  <identifier>  expected	5	None	replace
134	[BUG]  [BUGGY]  appendHexJavaScriptRepresentation(sb,  c,  Context.currentContext());  [CE]  <identifier>  expected  [FE]                        ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  appendHexJavaScriptRepresentation(sb,  c,  Context.currentContext());  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	appendHexJavaScriptRepresentation(sb,  c,  Context.currentContext());	  appendHexJavaScriptRepresentation(sb,    c,    Context.getCurrentContext());    	non-compiled	[CE]  <identifier>  expected	5	None	replace
135	[BUG]  [BUGGY]  appendHexJavaScriptRepresentation(sb,  c,  Context.getCurrentContext(),  consumer);  [CE]  <identifier>  expected  [FE]                          ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  appendHexJavaScriptRepresentation(sb,  c,  Context.getCurrentContext(),  consumer);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	appendHexJavaScriptRepresentation(sb,  c,  Context.getCurrentContext(),  consumer);	  appendHexJavaScriptRepresentation(sb,    c,    Context.getCurrentContext());    	non-compiled	[CE]  <identifier>  expected	5	None	replace
136	[BUG]  [BUGGY]  appendHexJavaScriptRepresentation(sb,  c,  Context.getCodeGeneratorContext());  [CE]  <identifier>  expected  [FE]                            ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  appendHexJavaScriptRepresentation(sb,  c,  Context.getCodeGeneratorContext());  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	appendHexJavaScriptRepresentation(sb,  c,  Context.getCodeGeneratorContext());	  appendHexJavaScriptRepresentation(sb,    c,    Context.getCurrentContext());    	non-compiled	[CE]  <identifier>  expected	5	None	replace
137	[BUG]  [BUGGY]  appendHexJavaScriptRepresentation(sb,  c,  Context.getEmptyContext());  [CE]  <identifier>  expected  [FE]                              ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  appendHexJavaScriptRepresentation(sb,  c,  Context.getEmptyContext());  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	appendHexJavaScriptRepresentation(sb,  c,  Context.getEmptyContext());	  appendHexJavaScriptRepresentation(sb,    c,    Context.getCurrentContext());    	non-compiled	[CE]  <identifier>  expected	5	None	replace
138	[BUG]  [BUGGY]  sb.append('N',  c);  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  sb.append('N',  c);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	sb.append('N',  c);	  sb.append('N');    	non-compiled	[CE]  <identifier>  expected	57	None	replace
139	[BUG]  [BUGGY]  sb.append('N').append(c);  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  sb.append('N').append(c);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	sb.append('N').append(c);	  sb.append('N');    	non-compiled	[CE]  <identifier>  expected	57	None	replace
140	[BUG]  [BUGGY]  System.err.println(c, "JavaScriptRepresentation  Exception: "  +  sb);  [CE]  <identifier>  expected  [FE]                        ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  System.err.println(c, "JavaScriptRepresentation  Exception: "  +  sb);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	System.err.println(c, "JavaScriptRepresentation  Exception: "  +  sb);	  System.err.println(sb,   "JavaScriptRepresentation    Exception:   "    +    c);    	non-compiled	[CE]  <identifier>  expected	106	None	replace
141	[BUG]  [BUGGY]  System.err.println(sb,  c, "JavaScriptRepresentation  Exception: "  +  c);  [CE]  <identifier>  expected  [FE]                          ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  System.err.println(sb,  c, "JavaScriptRepresentation  Exception: "  +  c);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	System.err.println(sb,  c, "JavaScriptRepresentation  Exception: "  +  c);	  System.err.println(sb,   "JavaScriptRepresentation    Exception:   "    +    c);    	non-compiled	[CE]  <identifier>  expected	106	None	replace
142	[BUG]  [BUGGY]  System.err.println(sb,  ex, "JavaScriptRepresentation  Exception: "  +  c);  [CE]  <identifier>  expected  [FE]                            ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  System.err.println(sb,  ex, "JavaScriptRepresentation  Exception: "  +  c);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	System.err.println(sb,  ex, "JavaScriptRepresentation  Exception: "  +  c);	  System.err.println(sb,   "JavaScriptRepresentation    Exception:   "    +    c);    	non-compiled	[CE]  <identifier>  expected	106	None	replace
143	[BUG]  [BUGGY]  Context  rhsContext  =  Context.currentContext();  appendHexJavaScriptRepresentation(c,  sb,  c);  [CE]  <identifier>  expected  [FE]                            ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  Context  rhsContext  =  Context.currentContext();  appendHexJavaScriptRepresentation(c,  sb,  c);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	Context  rhsContext  =  Context.currentContext();  appendHexJavaScriptRepresentation(c,  sb,  c);	  Context    rhsContext    =    Context.getCurrentContext();    appendHexJavaScriptRepresentation(c,    sb,    c);    	non-compiled	[CE]  <identifier>  expected	8	None	replace
144	[BUG]  [BUGGY]  Context  currentContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(c,  sb,  c);  [CE]  <identifier>  expected  [FE]                              ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  Context  currentContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(c,  sb,  c);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	Context  currentContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(c,  sb,  c);	  Context    rhsContext    =    Context.getCurrentContext();    appendHexJavaScriptRepresentation(c,    sb,    c);    	non-compiled	[CE]  <identifier>  expected	8	None	replace
145	[BUG]  [BUGGY]  Context  rhsContext  =  Context.getCurrentContext();  appendJavaScriptRepresentation(c,  sb,  c);  [CE]  <identifier>  expected  [FE]                                ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  Context  rhsContext  =  Context.getCurrentContext();  appendJavaScriptRepresentation(c,  sb,  c);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	Context  rhsContext  =  Context.getCurrentContext();  appendJavaScriptRepresentation(c,  sb,  c);	  Context    rhsContext    =    Context.getCurrentContext();    appendHexJavaScriptRepresentation(c,    sb,    c);    	non-compiled	[CE]  <identifier>  expected	8	None	replace
146	[BUG]  [BUGGY]  System.err.println( "JavaScriptRepresentation  error: "  +  sb,  ex);  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  System.err.println( "JavaScriptRepresentation  error: "  +  sb,  ex);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	System.err.println( "JavaScriptRepresentation  error: "  +  sb,  ex);	  System.err.println(   "JavaScriptRepresentation    error:   "    +    c,    ex);    	non-compiled	[CE]  <identifier>  expected	21	None	replace
147	[BUG]  [BUGGY]  System.err.println( "JavaScriptRepresentation  error: "  +  char  c,  ex);  [CE]  <identifier>  expected  [FE]                      ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  System.err.println( "JavaScriptRepresentation  error: "  +  char  c,  ex);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	System.err.println( "JavaScriptRepresentation  error: "  +  char  c,  ex);	  System.err.println(   "JavaScriptRepresentation    error:   "    +    c,    ex);    	non-compiled	[CE]  <identifier>  expected	21	None	replace
148	[BUG]  [BUGGY]  System.err.println( "JavaScriptRepresentation  error: "  +  e,  ex);  [CE]  <identifier>  expected  [FE]                        ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  System.err.println( "JavaScriptRepresentation  error: "  +  e,  ex);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	System.err.println( "JavaScriptRepresentation  error: "  +  e,  ex);	  System.err.println(   "JavaScriptRepresentation    error:   "    +    c,    ex);    	non-compiled	[CE]  <identifier>  expected	21	None	replace
149	[BUG]  [BUGGY]  System.err.println( "JavaScriptRepresentation  error: "  +  ex,  c);  [CE]  <identifier>  expected  [FE]                          ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  System.err.println( "JavaScriptRepresentation  error: "  +  ex,  c);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	System.err.println( "JavaScriptRepresentation  error: "  +  ex,  c);	  System.err.println(   "JavaScriptRepresentation    error:   "    +    c,    ex);    	non-compiled	[CE]  <identifier>  expected	21	None	replace
150	[BUG]  [BUGGY]  System.err.println( "JavaScriptRepresentation  error: "  +  char,  ex);  [CE]  <identifier>  expected  [FE]                            ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  System.err.println( "JavaScriptRepresentation  error: "  +  char,  ex);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	System.err.println( "JavaScriptRepresentation  error: "  +  char,  ex);	  System.err.println(   "JavaScriptRepresentation    error:   "    +    c,    ex);    	non-compiled	[CE]  <identifier>  expected	21	None	replace
151	[BUG]  [BUGGY]  sb.append('[').append(c);  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  sb.append('[').append(c);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	sb.append('[').append(c);	  sb.append('[');    	non-compiled	[CE]  <identifier>  expected	44	None	replace
152	[BUG]  [BUGGY]  sb.append('['  +  c);  [CE]  <identifier>  expected  [FE]                      ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  sb.append('['  +  c);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	sb.append('['  +  c);	  sb.append('[');    	non-compiled	[CE]  <identifier>  expected	44	None	replace
153	[BUG]  [BUGGY]  sb.append('['  +  c  +  1);  [CE]  <identifier>  expected  [FE]                        ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  sb.append('['  +  c  +  1);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	sb.append('['  +  c  +  1);	  sb.append('[');    	non-compiled	[CE]  <identifier>  expected	44	None	replace
154	[BUG]  [BUGGY]  System.err.println(c, "JavaScriptRepresentation  error: "  +  sb);  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  System.err.println(c, "JavaScriptRepresentation  error: "  +  sb);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	System.err.println(c, "JavaScriptRepresentation  error: "  +  sb);	  System.err.println(c,   "JavaScriptRepresentation    error:   "    +    c);    	non-compiled	[CE]  <identifier>  expected	101	None	replace
155	[BUG]  [BUGGY]  System.err.println(sb, "JavaScriptRepresentation  error: "  +  c);  [CE]  <identifier>  expected  [FE]                      ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  System.err.println(sb, "JavaScriptRepresentation  error: "  +  c);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	System.err.println(sb, "JavaScriptRepresentation  error: "  +  c);	  System.err.println(c,   "JavaScriptRepresentation    error:   "    +    c);    	non-compiled	[CE]  <identifier>  expected	101	None	replace
156	[BUG]  [BUGGY]  System.err.println(c, "JavaScriptRepresentation  error: "  +  hex);  [CE]  <identifier>  expected  [FE]                        ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  System.err.println(c, "JavaScriptRepresentation  error: "  +  hex);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	System.err.println(c, "JavaScriptRepresentation  error: "  +  hex);	  System.err.println(c,   "JavaScriptRepresentation    error:   "    +    c);    	non-compiled	[CE]  <identifier>  expected	101	None	replace
157	[BUG]  [BUGGY]  System.err.println(c, "JavaScriptRepresentation  error: "  +  href);  [CE]  <identifier>  expected  [FE]                          ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  System.err.println(c, "JavaScriptRepresentation  error: "  +  href);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	System.err.println(c, "JavaScriptRepresentation  error: "  +  href);	  System.err.println(c,   "JavaScriptRepresentation    error:   "    +    c);    	non-compiled	[CE]  <identifier>  expected	101	None	replace
158	[BUG]  [BUGGY]  Context  rhsContext  =  Context.currentContext();  appendHexJavaScriptRepresentation(c,  sb);  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  Context  rhsContext  =  Context.currentContext();  appendHexJavaScriptRepresentation(c,  sb);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	Context  rhsContext  =  Context.currentContext();  appendHexJavaScriptRepresentation(c,  sb);	  Context    lhsContext    =    Context.currentContext();    appendHexJavaScriptRepresentation(c,    sb);    	non-compiled	[CE]  <identifier>  expected	87	None	replace
159	[BUG]  [BUGGY]  Context  lhsContext  =  Context.currentContext();  appendHexJavaScriptRepresentation(c,  sb,  rhsContext);  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  Context  lhsContext  =  Context.currentContext();  appendHexJavaScriptRepresentation(c,  sb,  rhsContext);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	Context  lhsContext  =  Context.currentContext();  appendHexJavaScriptRepresentation(c,  sb,  rhsContext);	  Context    lhsContext    =    Context.currentContext();    appendHexJavaScriptRepresentation(c,    sb);    	non-compiled	[CE]  <identifier>  expected	87	None	replace
160	[BUG]  [BUGGY]  System.err.println( "JavaScriptRepresentation  error: "  +  c.getMessage(),  ex);  [CE]  <identifier>  expected  [FE]                          ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  System.err.println( "JavaScriptRepresentation  error: "  +  c.getMessage(),  ex);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	System.err.println( "JavaScriptRepresentation  error: "  +  c.getMessage(),  ex);	  System.err.println(   "JavaScriptRepresentation    error:   "    +    ex.getMessage(),    ex);    	non-compiled	[CE]  <identifier>  expected	53	None	replace
161	[BUG]  [BUGGY]  System.err.println( "JavaScriptRepresentation  error: "  +  ex.getMessage(),  c);  [CE]  <identifier>  expected  [FE]                            ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  System.err.println( "JavaScriptRepresentation  error: "  +  ex.getMessage(),  c);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	System.err.println( "JavaScriptRepresentation  error: "  +  ex.getMessage(),  c);	  System.err.println(   "JavaScriptRepresentation    error:   "    +    ex.getMessage(),    ex);    	non-compiled	[CE]  <identifier>  expected	53	None	replace
162	[BUG]  [BUGGY]  System.err.println( "JavaScriptRepresentation  error: "  +  sb.getMessage(),  ex);  [CE]  <identifier>  expected  [FE]                              ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  System.err.println( "JavaScriptRepresentation  error: "  +  sb.getMessage(),  ex);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	System.err.println( "JavaScriptRepresentation  error: "  +  sb.getMessage(),  ex);	  System.err.println(   "JavaScriptRepresentation    error:   "    +    ex.getMessage(),    ex);    	non-compiled	[CE]  <identifier>  expected	53	None	replace
163	[BUG]  [BUGGY]  System.err.println( "JavaScriptRepresentation  error: "  +  ex.toString(),  ex);  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  System.err.println( "JavaScriptRepresentation  error: "  +  ex.toString(),  ex);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	System.err.println( "JavaScriptRepresentation  error: "  +  ex.toString(),  ex);	  System.err.println(   "JavaScriptRepresentation    error:   "    +    ex.getMessage(),    ex);    	non-compiled	[CE]  	53	None	replace
164	[BUG]  [BUGGY]  System.err.println(c  + "JavaScriptRepresentation  error: "  +  ex.getMessage(),  ex);  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  System.err.println(c  + "JavaScriptRepresentation  error: "  +  ex.getMessage(),  ex);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	System.err.println(c  + "JavaScriptRepresentation  error: "  +  ex.getMessage(),  ex);	  System.err.println(   "JavaScriptRepresentation    error:   "    +    ex.getMessage(),    ex);    	non-compiled	[CE]  	53	None	replace
165	[BUG]  [BUGGY]  System.err.println( "JavaScriptRepresentation  error: "  +  ex.getMessage(),  this);  [CE]  <identifier>  expected  [FE]                                    ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  System.err.println( "JavaScriptRepresentation  error: "  +  ex.getMessage(),  this);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	System.err.println( "JavaScriptRepresentation  error: "  +  ex.getMessage(),  this);	  System.err.println(   "JavaScriptRepresentation    error:   "    +    ex.getMessage(),    ex);    	non-compiled	[CE]  <identifier>  expected	53	None	replace
166	[BUG]  [BUGGY]  System.err.println( "JavaScriptRepresentation  error: "  +  c  + "  of  type ");  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  System.err.println( "JavaScriptRepresentation  error: "  +  c  + "  of  type ");  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	System.err.println( "JavaScriptRepresentation  error: "  +  c  + "  of  type ");	  System.err.println(   "JavaScriptRepresentation    error:   "    +    c    +   "n   ");    	non-compiled	[CE]  <identifier>  expected	70	None	replace
167	[BUG]  [BUGGY]  System.err.println( "JavaScriptRepresentation  error: "  +  c  + "  expected: "  +  ex.getMessage());  [CE]  <identifier>  expected  [FE]                      ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  System.err.println( "JavaScriptRepresentation  error: "  +  c  + "  expected: "  +  ex.getMessage());  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	System.err.println( "JavaScriptRepresentation  error: "  +  c  + "  expected: "  +  ex.getMessage());	  System.err.println(   "JavaScriptRepresentation    error:   "    +    c    +   "n   ");    	non-compiled	[CE]  <identifier>  expected	70	None	replace
168	[BUG]  [BUGGY]  System.err.println( "JavaScriptRepresentation  error: "  +  c  + "  by  default ");  [CE]  <identifier>  expected  [FE]                        ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  System.err.println( "JavaScriptRepresentation  error: "  +  c  + "  by  default ");  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	System.err.println( "JavaScriptRepresentation  error: "  +  c  + "  by  default ");	  System.err.println(   "JavaScriptRepresentation    error:   "    +    c    +   "n   ");    	non-compiled	[CE]  <identifier>  expected	70	None	replace
169	[BUG]  [BUGGY]  System.err.println( "JavaScriptRepresentation  error: "  +  c  + "  by  default. ");  [CE]  <identifier>  expected  [FE]                          ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  System.err.println( "JavaScriptRepresentation  error: "  +  c  + "  by  default. ");  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	System.err.println( "JavaScriptRepresentation  error: "  +  c  + "  by  default. ");	  System.err.println(   "JavaScriptRepresentation    error:   "    +    c    +   "n   ");    	non-compiled	[CE]  <identifier>  expected	70	None	replace
170	[BUG]  [BUGGY]  System.err.println( "JavaScriptRepresentation  error: "  +  c  + "  expected: "  +  ex);  [CE]  <identifier>  expected  [FE]                            ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  System.err.println( "JavaScriptRepresentation  error: "  +  c  + "  expected: "  +  ex);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	System.err.println( "JavaScriptRepresentation  error: "  +  c  + "  expected: "  +  ex);	  System.err.println(   "JavaScriptRepresentation    error:   "    +    c    +   "n   ");    	non-compiled	[CE]  <identifier>  expected	70	None	replace
171	[BUG]  [BUGGY]  System.err.println( "JavaScriptRepresentation  ' "  +  c  + ",'  is  not  supported: ");  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  System.err.println( "JavaScriptRepresentation  ' "  +  c  + ",'  is  not  supported: ");  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	System.err.println( "JavaScriptRepresentation  ' "  +  c  + ",'  is  not  supported: ");	  System.err.println(   "JavaScriptRepresentation    '   "    +    c    +   "'    is    not    supported:   ");    	non-compiled	[CE]  <identifier>  expected	39	None	replace
172	[BUG]  [BUGGY]  System.err.println( "JavaScriptRepresentation  ' "  +  c  + "'  is  not  supported: ",  ex);  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  System.err.println( "JavaScriptRepresentation  ' "  +  c  + "'  is  not  supported: ",  ex);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	System.err.println( "JavaScriptRepresentation  ' "  +  c  + "'  is  not  supported: ",  ex);	  System.err.println(   "JavaScriptRepresentation    '   "    +    c    +   "'    is    not    supported:   ");    	non-compiled	[CE]  <identifier>  expected	39	None	replace
173	[BUG]  [BUGGY]  System.err.println( "JavaScriptRepresentation  ' "  +  c  + "'  is  not  supported: "+getMessage());  [CE]  <identifier>  expected  [FE]                      ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  System.err.println( "JavaScriptRepresentation  ' "  +  c  + "'  is  not  supported: "+getMessage());  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	System.err.println( "JavaScriptRepresentation  ' "  +  c  + "'  is  not  supported: "+getMessage());	  System.err.println(   "JavaScriptRepresentation    '   "    +    c    +   "'    is    not    supported:   ");    	non-compiled	[CE]  <identifier>  expected	39	None	replace
174	[BUG]  [BUGGY]  AppendHexJavaScriptRepresentation(sb,  Context.getCodeGenerator());  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  AppendHexJavaScriptRepresentation(sb,  Context.getCodeGenerator());  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	AppendHexJavaScriptRepresentation(sb,  Context.getCodeGenerator());	  AppendHexJavaScriptRepresentation(sb,    Context.getCurrentContext());    	non-compiled	[CE]  <identifier>  expected	67	None	replace
175	[BUG]  [BUGGY]  AppendHexJavaScriptRepresentation(sb,  Context.currentContext(),  c);  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  AppendHexJavaScriptRepresentation(sb,  Context.currentContext(),  c);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	AppendHexJavaScriptRepresentation(sb,  Context.currentContext(),  c);	  AppendHexJavaScriptRepresentation(sb,    Context.getCurrentContext());    	non-compiled	[CE]  <identifier>  expected	67	None	replace
176	[BUG]  [BUGGY]  AppendHexJavaScriptRepresentation(context,  Context.getCurrentContext());  [CE]  <identifier>  expected  [FE]                      ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  AppendHexJavaScriptRepresentation(context,  Context.getCurrentContext());  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	AppendHexJavaScriptRepresentation(context,  Context.getCurrentContext());	  AppendHexJavaScriptRepresentation(sb,    Context.getCurrentContext());    	non-compiled	[CE]  <identifier>  expected	67	None	replace
177	[BUG]  [BUGGY]  AppendHexJavaScriptRepresentation(sb,  c,  Context.getCodeGenerator());  [CE]  <identifier>  expected  [FE]                        ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  AppendHexJavaScriptRepresentation(sb,  c,  Context.getCodeGenerator());  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	AppendHexJavaScriptRepresentation(sb,  c,  Context.getCodeGenerator());	  AppendHexJavaScriptRepresentation(sb,    c,    Context.getCurrentContext());    	non-compiled	[CE]  <identifier>  expected	6	None	replace
178	[BUG]  [BUGGY]  AppendHexJavaScriptRepresentation(sb,  c,  Context.getCurrentContext(),  consumer);  [CE]  <identifier>  expected  [FE]                          ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  AppendHexJavaScriptRepresentation(sb,  c,  Context.getCurrentContext(),  consumer);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	AppendHexJavaScriptRepresentation(sb,  c,  Context.getCurrentContext(),  consumer);	  AppendHexJavaScriptRepresentation(sb,    c,    Context.getCurrentContext());    	non-compiled	[CE]  <identifier>  expected	6	None	replace
179	[BUG]  [BUGGY]  AppendHexJavaScriptRepresentation(sb,  c,  Context.currentContext());  [CE]  <identifier>  expected  [FE]                            ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  AppendHexJavaScriptRepresentation(sb,  c,  Context.currentContext());  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	AppendHexJavaScriptRepresentation(sb,  c,  Context.currentContext());	  AppendHexJavaScriptRepresentation(sb,    c,    Context.getCurrentContext());    	non-compiled	[CE]  <identifier>  expected	6	None	replace
180	[BUG]  [BUGGY]  AppendHexJavaScriptRepresentation(sb,  c,  Context.currentToken());  [CE]  <identifier>  expected  [FE]                              ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  AppendHexJavaScriptRepresentation(sb,  c,  Context.currentToken());  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	AppendHexJavaScriptRepresentation(sb,  c,  Context.currentToken());	  AppendHexJavaScriptRepresentation(sb,    c,    Context.getCurrentContext());    	non-compiled	[CE]  <identifier>  expected	6	None	replace
181	[BUG]  [BUGGY]  AppendHexJavaScriptRepresentation(sb,  c,  Context.getDefaultContext());  [CE]  <identifier>  expected  [FE]                                ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  AppendHexJavaScriptRepresentation(sb,  c,  Context.getDefaultContext());  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	AppendHexJavaScriptRepresentation(sb,  c,  Context.getDefaultContext());	  AppendHexJavaScriptRepresentation(sb,    c,    Context.getCurrentContext());    	non-compiled	[CE]  <identifier>  expected	6	None	replace
182	[BUG]  [BUGGY]  appendHexJavaScriptRepresentation(c,  Context.getCurrentContext(),  consumer);  [CE]  <identifier>  expected  [FE]                            ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  appendHexJavaScriptRepresentation(c,  Context.getCurrentContext(),  consumer);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	appendHexJavaScriptRepresentation(c,  Context.getCurrentContext(),  consumer);	  Context    rhsContext    =    Context.getCurrentContext();    appendHexJavaScriptRepresentation(c,    rhsContext,    consumer);    	non-compiled	[CE]  <identifier>  expected	14	None	replace
183	[BUG]  [BUGGY]  Context  lhsContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(c,  rhsContext,  consumer);  [CE]  <identifier>  expected  [FE]                              ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  Context  lhsContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(c,  rhsContext,  consumer);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	Context  lhsContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(c,  rhsContext,  consumer);	  Context    rhsContext    =    Context.getCurrentContext();    appendHexJavaScriptRepresentation(c,    rhsContext,    consumer);    	non-compiled	[CE]  <identifier>  expected	14	None	replace
184	[BUG]  [BUGGY]  AppendHexJavaScriptRepresentation(c,  Context.getCurrentContext(),  consumer);  [CE]  <identifier>  expected  [FE]                                ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  AppendHexJavaScriptRepresentation(c,  Context.getCurrentContext(),  consumer);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	AppendHexJavaScriptRepresentation(c,  Context.getCurrentContext(),  consumer);	  Context    rhsContext    =    Context.getCurrentContext();    appendHexJavaScriptRepresentation(c,    rhsContext,    consumer);    	non-compiled	[CE]  <identifier>  expected	14	None	replace
185	[BUG]  [BUGGY]  Context  rhsContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(c,  rhsContext,  consumer,  sb);  [CE]  <identifier>  expected  [FE]                                  ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  Context  rhsContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(c,  rhsContext,  consumer,  sb);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	Context  rhsContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(c,  rhsContext,  consumer,  sb);	  Context    rhsContext    =    Context.getCurrentContext();    appendHexJavaScriptRepresentation(c,    rhsContext,    consumer);    	non-compiled	[CE]  <identifier>  expected	14	None	replace
186	[BUG]  [BUGGY]  if(c  =='}  ')  {  sb.append('  }  ');  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  if(c  =='}  ')  {  sb.append('  }  ');  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	if(c  =='}  ')  {  sb.append('  }  ');  }  else  {  throw  new  IllegalArgumentException( " ");  }	  sb.append('    }    ');    	non-compiled	[CE]  <identifier>  expected	90	None	replace
187	[BUG]  [BUGGY]  if(c  =='}  ')  {  sb.append('  }  ');  }  else  {  appendHexJavaScriptRepresentation(c,  sb);  }  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  if(c  =='}  ')  {  sb.append('  }  ');  }  else  {  appendHexJavaScriptRepresentation(c,  sb);  }  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	if(c  =='}  ')  {  sb.append('  }  ');  }  else  {  appendHexJavaScriptRepresentation(c,  sb);  }	  sb.append('    }    ');    	non-compiled	[CE]  <identifier>  expected	90	None	replace
188	[BUG]  [BUGGY]  if(c  =='}  ')  {  sb.append('  }  ');  }  [CE]  <identifier>  expected  [FE]                      ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  if(c  =='}  ')  {  sb.append('  }  ');  }  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	if(c  =='}  ')  {  sb.append('  }  ');  }	  sb.append('    }    ');    	non-compiled	[CE]  <identifier>  expected	90	None	replace
189	[BUG]  [BUGGY]  if(c  =='}  ')  {  sb.append('  }  ');  }  else  {  System.arraycopy(c,  0,  sb,  0,  sb.length());  }  [CE]  <identifier>  expected  [FE]                        ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  if(c  =='}  ')  {  sb.append('  }  ');  }  else  {  System.arraycopy(c,  0,  sb,  0,  sb.length());  }  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	if(c  =='}  ')  {  sb.append('  }  ');  }  else  {  System.arraycopy(c,  0,  sb,  0,  sb.length());  }	  sb.append('    }    ');    	non-compiled	[CE]  <identifier>  expected	90	None	replace
190	[BUG]  [BUGGY]  if(c  =='}  ')  {  sb.append('  }  ');  }  else  {  System.arraycopy(c,  0,  sb,  0,  sb.length);  }  [CE]  <identifier>  expected  [FE]                          ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  if(c  =='}  ')  {  sb.append('  }  ');  }  else  {  System.arraycopy(c,  0,  sb,  0,  sb.length);  }  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	if(c  =='}  ')  {  sb.append('  }  ');  }  else  {  System.arraycopy(c,  0,  sb,  0,  sb.length);  }	  sb.append('    }    ');    	non-compiled	[CE]  <identifier>  expected	90	None	replace
191	[BUG]  [BUGGY]  appendEmbeddedBooleanRepresentation(c,  sb);  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  appendEmbeddedBooleanRepresentation(c,  sb);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	appendEmbeddedBooleanRepresentation(c,  sb);	  appendEmbeddedBooleanRepresentation(sb,    c);    	non-compiled	[CE]  <identifier>  expected	81	None	replace
192	[BUG]  [BUGGY]  appendEmbeddedBooleanRepresentation(sb,  c,  consumer);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  appendEmbeddedBooleanRepresentation(sb,  c,  consumer);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	appendEmbeddedBooleanRepresentation(sb,  c,  consumer);	  appendEmbeddedBooleanRepresentation(sb,    c);    	non-compiled	[CE]  	81	None	replace
193	[BUG]  [BUGGY]  appendEmbeddedBooleanRepresentation(sb,  c,  true);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  appendEmbeddedBooleanRepresentation(sb,  c,  true);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	appendEmbeddedBooleanRepresentation(sb,  c,  true);	  appendEmbeddedBooleanRepresentation(sb,    c);    	non-compiled	[CE]  	81	None	replace
194	[BUG]  [BUGGY]  appendEmbeddedBooleanRepresentation(sb,  c,  false);  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  appendEmbeddedBooleanRepresentation(sb,  c,  false);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	appendEmbeddedBooleanRepresentation(sb,  c,  false);	  appendEmbeddedBooleanRepresentation(sb,    c);    	non-compiled	[CE]  	81	None	replace
195	[BUG]  [BUGGY]  appendEmbeddedBooleanRepresentation(sb,  c,  Color.black);  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  appendEmbeddedBooleanRepresentation(sb,  c,  Color.black);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	appendEmbeddedBooleanRepresentation(sb,  c,  Color.black);	  appendEmbeddedBooleanRepresentation(sb,    c);    	non-compiled	[CE]  	81	None	replace
196	[BUG]  [BUGGY]  appendEmbeddedBooleanRepresentation(sb,  c,  this);  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  appendEmbeddedBooleanRepresentation(sb,  c,  this);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	appendEmbeddedBooleanRepresentation(sb,  c,  this);	  appendEmbeddedBooleanRepresentation(sb,    c);    	non-compiled	[CE]  	81	None	replace
197	[BUG]  [BUGGY]  appendDelimiter(sb,  c,  IN_FOR_INIT_CLAUSE);  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  appendDelimiter(sb,  c,  IN_FOR_INIT_CLAUSE);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	appendDelimiter(sb,  c,  IN_FOR_INIT_CLAUSE);	  appendDelimiter(sb,    c);    	non-compiled	[CE]  	73	None	replace
198	[BUG]  [BUGGY]  appendDelimiter(sb,  c,  c);  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  appendDelimiter(sb,  c,  c);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	appendDelimiter(sb,  c,  c);	  appendDelimiter(sb,    c);    	non-compiled	[CE]  	73	None	replace
199	[BUG]  [BUGGY]  appendDelimiter(c,  sb);  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  appendDelimiter(c,  sb);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	appendDelimiter(c,  sb);	  appendDelimiter(sb,    c);    	non-compiled	[CE]  	73	None	replace
200	[BUG]  [BUGGY]  appendDelimiter(sb,  c,  consumer);  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  appendDelimiter(sb,  c,  consumer);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	appendDelimiter(sb,  c,  consumer);	  appendDelimiter(sb,    c);    	non-compiled	[CE]  	73	None	replace
201	[BUG]  [BUGGY]  appendDelimiter(sb,  c,  1);  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  appendDelimiter(sb,  c,  1);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	appendDelimiter(sb,  c,  1);	  appendDelimiter(sb,    c);    	non-compiled	[CE]  	73	None	replace
202	[BUG]  [BUGGY]  appendHexJavaScriptRepresentation(lhsContext,  c);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  appendHexJavaScriptRepresentation(lhsContext,  c);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	appendHexJavaScriptRepresentation(lhsContext,  c);	  Context    lhsContext    =    Context.getCurrentContext();    appendHexJavaScriptRepresentation(lhsContext,    c);    	non-compiled	[CE]  	93	None	replace
203	[BUG]  [BUGGY]  appendHexJavaScriptRepresentation(c,  lhsContext);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  appendHexJavaScriptRepresentation(c,  lhsContext);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	appendHexJavaScriptRepresentation(c,  lhsContext);	  Context    lhsContext    =    Context.getCurrentContext();    appendHexJavaScriptRepresentation(lhsContext,    c);    	non-compiled	[CE]  	93	None	replace
204	[BUG]  [BUGGY]  Context  lhsContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(lhsContext,  c,  consumer);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  Context  lhsContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(lhsContext,  c,  consumer);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	Context  lhsContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(lhsContext,  c,  consumer);	  Context    lhsContext    =    Context.getCurrentContext();    appendHexJavaScriptRepresentation(lhsContext,    c);    	non-compiled	[CE]  	93	None	replace
205	[BUG]  [BUGGY]  Context  lhsContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(c,  lhsContext);  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  Context  lhsContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(c,  lhsContext);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	Context  lhsContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(c,  lhsContext);	  Context    lhsContext    =    Context.getCurrentContext();    appendHexJavaScriptRepresentation(lhsContext,    c);    	non-compiled	[CE]  	93	None	replace
206	[BUG]  [BUGGY]  AppendHexJavaScriptRepresentation(lhsContext,  c);  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  AppendHexJavaScriptRepresentation(lhsContext,  c);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	AppendHexJavaScriptRepresentation(lhsContext,  c);	  Context    lhsContext    =    Context.getCurrentContext();    appendHexJavaScriptRepresentation(lhsContext,    c);    	non-compiled	[CE]  	93	None	replace
207	[BUG]  [BUGGY]  System.err.println( "JavaScriptRepresentation  error: "  +  e.getMessage());  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  System.err.println( "JavaScriptRepresentation  error: "  +  e.getMessage());  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	System.err.println( "JavaScriptRepresentation  error: "  +  e.getMessage());	  System.err.println(   "JavaScriptRepresentation    error:   "    +    e);    	non-compiled	[CE]  	25	None	replace
208	[BUG]  [BUGGY]  System.err.println( "JavaScriptRepresentation  error: "  +  e.toString());  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  System.err.println( "JavaScriptRepresentation  error: "  +  e.toString());  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	System.err.println( "JavaScriptRepresentation  error: "  +  e.toString());	  System.err.println(   "JavaScriptRepresentation    error:   "    +    e);    	non-compiled	[CE]  	25	None	replace
209	[BUG]  [BUGGY]  System.err.println( "JavaScriptRepresentation  error: "  +  e,  c);  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  System.err.println( "JavaScriptRepresentation  error: "  +  e,  c);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	System.err.println( "JavaScriptRepresentation  error: "  +  e,  c);	  System.err.println(   "JavaScriptRepresentation    error:   "    +    e);    	non-compiled	[CE]  	25	None	replace
210	[BUG]  [BUGGY]  System.err.println( "JavaScriptRepresentation  Exception: "  +  sb  + "  of ");  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  System.err.println( "JavaScriptRepresentation  Exception: "  +  sb  + "  of ");  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	System.err.println( "JavaScriptRepresentation  Exception: "  +  sb  + "  of ");	  System.err.println(   "JavaScriptRepresentation    Exception:   "    +    c    +   "    of   ");    	non-compiled	[CE]  	92	None	replace
211	[BUG]  [BUGGY]  System.err.println( "JavaScriptRepresentation  Exception: "  +  c  + ",  of ");  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  System.err.println( "JavaScriptRepresentation  Exception: "  +  c  + ",  of ");  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	System.err.println( "JavaScriptRepresentation  Exception: "  +  c  + ",  of ");	  System.err.println(   "JavaScriptRepresentation    Exception:   "    +    c    +   "    of   ");    	non-compiled	[CE]  	92	None	replace
212	[BUG]  [BUGGY]  System.err.println( "JavaScriptRepresentation  Exception: "  +  c  + "  of ",  ex);  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  System.err.println( "JavaScriptRepresentation  Exception: "  +  c  + "  of ",  ex);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	System.err.println( "JavaScriptRepresentation  Exception: "  +  c  + "  of ",  ex);	  System.err.println(   "JavaScriptRepresentation    Exception:   "    +    c    +   "    of   ");    	non-compiled	[CE]  	92	None	replace
213	[BUG]  [BUGGY]  System.err.println( "JavaScriptRepresentation  Exception: "  +  c  + "  of "+getMessage());  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  System.err.println( "JavaScriptRepresentation  Exception: "  +  c  + "  of "+getMessage());  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	System.err.println( "JavaScriptRepresentation  Exception: "  +  c  + "  of "+getMessage());	  System.err.println(   "JavaScriptRepresentation    Exception:   "    +    c    +   "    of   ");    	non-compiled	[CE]  	92	None	replace
214	[BUG]  [BUGGY]  System.err.println( "JavaScriptRepresentation  Exception: "  +  c  + ",  needs  representation  of ");  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  System.err.println( "JavaScriptRepresentation  Exception: "  +  c  + ",  needs  representation  of ");  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	System.err.println( "JavaScriptRepresentation  Exception: "  +  c  + ",  needs  representation  of ");	  System.err.println(   "JavaScriptRepresentation    Exception:   "    +    c    +   "    of   ");    	non-compiled	[CE]  	92	None	replace
215	[BUG]  [BUGGY]  appendBooleanRepresentation(sb,  c,  consumer,  true);  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  appendBooleanRepresentation(sb,  c,  consumer,  true);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	appendBooleanRepresentation(sb,  c,  consumer,  true);	  appendBooleanRepresentation(sb,    c,    consumer);    	non-compiled	[CE]  	29	None	replace
216	[BUG]  [BUGGY]  appendBooleanRepresentation(sb,  c,  consumer,  false);  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  appendBooleanRepresentation(sb,  c,  consumer,  false);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	appendBooleanRepresentation(sb,  c,  consumer,  false);	  appendBooleanRepresentation(sb,    c,    consumer);    	non-compiled	[CE]  	29	None	replace
217	[BUG]  [BUGGY]  appendBooleanRepresentation(sb,  c,  this.consumer);  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  appendBooleanRepresentation(sb,  c,  this.consumer);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	appendBooleanRepresentation(sb,  c,  this.consumer);	  appendBooleanRepresentation(sb,    c,    consumer);    	non-compiled	[CE]  	29	None	replace
218	[BUG]  [BUGGY]  appendBooleanRepresentation(sb,  c,  consumer,  context);  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  appendBooleanRepresentation(sb,  c,  consumer,  context);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	appendBooleanRepresentation(sb,  c,  consumer,  context);	  appendBooleanRepresentation(sb,    c,    consumer);    	non-compiled	[CE]  	29	None	replace
219	[BUG]  [BUGGY]  appendBooleanRepresentation(sb,  c,  BLOCK_OF_EXPR);  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  appendBooleanRepresentation(sb,  c,  BLOCK_OF_EXPR);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	appendBooleanRepresentation(sb,  c,  BLOCK_OF_EXPR);	  appendBooleanRepresentation(sb,    c,    consumer);    	non-compiled	[CE]  	29	None	replace
220	[BUG]  [BUGGY]  appendHexJavaScriptRepresentation(sb,  builder,  c,  Context.getCurrentContext());  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  appendHexJavaScriptRepresentation(sb,  builder,  c,  Context.getCurrentContext());  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	appendHexJavaScriptRepresentation(sb,  builder,  c,  Context.getCurrentContext());	  Context    rhsContext    =    Context.getCurrentContext();    appendHexJavaScriptRepresentation(rhsContext,    builder,    c,    sb);    	non-compiled	[CE]  	94	None	replace
221	[BUG]  [BUGGY]  AppendHexJavaScriptRepresentation(sb,  builder,  c,  Context.getCurrentContext());  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  AppendHexJavaScriptRepresentation(sb,  builder,  c,  Context.getCurrentContext());  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	AppendHexJavaScriptRepresentation(sb,  builder,  c,  Context.getCurrentContext());	  Context    rhsContext    =    Context.getCurrentContext();    appendHexJavaScriptRepresentation(rhsContext,    builder,    c,    sb);    	non-compiled	[CE]  	94	None	replace
222	[BUG]  [BUGGY]  Context  rhsContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(builder,  c,  sb);  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  Context  rhsContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(builder,  c,  sb);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	Context  rhsContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(builder,  c,  sb);	  Context    rhsContext    =    Context.getCurrentContext();    appendHexJavaScriptRepresentation(rhsContext,    builder,    c,    sb);    	non-compiled	[CE]  	94	None	replace
223	[BUG]  [BUGGY]  AppendHexJavaScriptRepresentation(c,  builder,  rhsContext,  sb);  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  AppendHexJavaScriptRepresentation(c,  builder,  rhsContext,  sb);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	AppendHexJavaScriptRepresentation(c,  builder,  rhsContext,  sb);	  Context    rhsContext    =    Context.getCurrentContext();    appendHexJavaScriptRepresentation(rhsContext,    builder,    c,    sb);    	non-compiled	[CE]  	94	None	replace
224	[BUG]  [BUGGY]  Context  rhsContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(rhsContext,  builder,  c,  sb,  c);  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  Context  rhsContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(rhsContext,  builder,  c,  sb,  c);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	Context  rhsContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(rhsContext,  builder,  c,  sb,  c);	  Context    rhsContext    =    Context.getCurrentContext();    appendHexJavaScriptRepresentation(rhsContext,    builder,    c,    sb);    	non-compiled	[CE]  	94	None	replace
225	[BUG]  [BUGGY]  appendHexJavaScriptRepresentation(c,  builder,  rhsContext,  sb);  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  appendHexJavaScriptRepresentation(c,  builder,  rhsContext,  sb);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	appendHexJavaScriptRepresentation(c,  builder,  rhsContext,  sb);	  Context    rhsContext    =    Context.getCurrentContext();    appendHexJavaScriptRepresentation(rhsContext,    builder,    c,    sb);    	non-compiled	[CE]  	94	None	replace
226	[BUG]  [BUGGY]  AppendHexJavaScriptRepresentation(sb,  Context.getCurrentContext(),  c,  consumer);  [CE]  [FE]              ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  AppendHexJavaScriptRepresentation(sb,  Context.getCurrentContext(),  c,  consumer);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	AppendHexJavaScriptRepresentation(sb,  Context.getCurrentContext(),  c,  consumer);	  AppendHexJavaScriptRepresentation(sb,    Context.getCurrentContext(),    c);    	non-compiled	[CE]  	65	None	replace
227	[BUG]  [BUGGY]  AppendHexJavaScriptRepresentation(sb,  Context.getCodeGenerator(),  c);  [CE]  [FE]                ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  AppendHexJavaScriptRepresentation(sb,  Context.getCodeGenerator(),  c);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	AppendHexJavaScriptRepresentation(sb,  Context.getCodeGenerator(),  c);	  AppendHexJavaScriptRepresentation(sb,    Context.getCurrentContext(),    c);    	non-compiled	[CE]  	65	None	replace
228	[BUG]  [BUGGY]  AppendHexJavaScriptRepresentation(sb,  c.getCurrentContext(),  Context.START_OF_EXPR);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  AppendHexJavaScriptRepresentation(sb,  c.getCurrentContext(),  Context.START_OF_EXPR);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	AppendHexJavaScriptRepresentation(sb,  c.getCurrentContext(),  Context.START_OF_EXPR);	  AppendHexJavaScriptRepresentation(sb,    Context.getCurrentContext(),    c);    	non-compiled	[CE]  	65	None	replace
229	[BUG]  [BUGGY]  AppendHexJavaScriptRepresentation(sb,  Context.getCurrentContext(),  c,  this);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  AppendHexJavaScriptRepresentation(sb,  Context.getCurrentContext(),  c,  this);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	AppendHexJavaScriptRepresentation(sb,  Context.getCurrentContext(),  c,  this);	  AppendHexJavaScriptRepresentation(sb,    Context.getCurrentContext(),    c);    	non-compiled	[CE]  	65	None	replace
230	[BUG]  [BUGGY]  AppendHexJavaScriptRepresentation(sb,  c.getCurrentContext(),  c);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  AppendHexJavaScriptRepresentation(sb,  c.getCurrentContext(),  c);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	AppendHexJavaScriptRepresentation(sb,  c.getCurrentContext(),  c);	  AppendHexJavaScriptRepresentation(sb,    Context.getCurrentContext(),    c);    	non-compiled	[CE]  	65	None	replace
231	[BUG]  [BUGGY]  System.err.println( "JavaScriptRepresentation  error: "  +  c,  ex.getMessage());  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  System.err.println( "JavaScriptRepresentation  error: "  +  c,  ex.getMessage());  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	System.err.println( "JavaScriptRepresentation  error: "  +  c,  ex.getMessage());	  System.err.println(   "JavaScriptRepresentation    error:   "    +    c.getMessage());    	non-compiled	[CE]  	51	None	replace
232	[BUG]  [BUGGY]  Context  rhsContext  =  context.getCurrentContext();  appendHexJavaScriptRepresentation(rhsContext,  c,  consumer,  sb);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  Context  rhsContext  =  context.getCurrentContext();  appendHexJavaScriptRepresentation(rhsContext,  c,  consumer,  sb);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	Context  rhsContext  =  context.getCurrentContext();  appendHexJavaScriptRepresentation(rhsContext,  c,  consumer,  sb);	  Context    rhsContext    =    context.getCurrentContext();    appendHexJavaScriptRepresentation(rhsContext,    c,    consumer);    	non-compiled	[CE]  	78	None	replace
233	[BUG]  [BUGGY]  appendHexJavaScriptRepresentation(c,  context,  consumer);  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  appendHexJavaScriptRepresentation(c,  context,  consumer);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	appendHexJavaScriptRepresentation(c,  context,  consumer);	  Context    rhsContext    =    context.getCurrentContext();    appendHexJavaScriptRepresentation(rhsContext,    c,    consumer);    	non-compiled	[CE]  	78	None	replace
234	[BUG]  [BUGGY]  Context  rhsContext  =  context.getCurrentContext();  appendHexJavaScriptRepresentation(rhsContext,  sb,  c,  consumer);  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  Context  rhsContext  =  context.getCurrentContext();  appendHexJavaScriptRepresentation(rhsContext,  sb,  c,  consumer);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	Context  rhsContext  =  context.getCurrentContext();  appendHexJavaScriptRepresentation(rhsContext,  sb,  c,  consumer);	  Context    rhsContext    =    context.getCurrentContext();    appendHexJavaScriptRepresentation(rhsContext,    c,    consumer);    	non-compiled	[CE]  	78	None	replace
235	[BUG]  [BUGGY]  appendBooleanRepresentation(c,  sb,  c);  [CE]  [FE]                ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  appendBooleanRepresentation(c,  sb,  c);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	appendBooleanRepresentation(c,  sb,  c);	  appendHexJavaScriptRepresentation(c,    sb,    c);    	non-compiled	[CE]  	58	None	replace
236	[BUG]  [BUGGY]  appendDelimiterRepresentation(c,  sb,  c);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  appendDelimiterRepresentation(c,  sb,  c);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	appendDelimiterRepresentation(c,  sb,  c);	  appendHexJavaScriptRepresentation(c,    sb,    c);    	non-compiled	[CE]  	58	None	replace
237	[BUG]  [BUGGY]  appendConsumerRepresentation(c,  sb,  c);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  appendConsumerRepresentation(c,  sb,  c);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	appendConsumerRepresentation(c,  sb,  c);	  appendHexJavaScriptRepresentation(c,    sb,    c);    	non-compiled	[CE]  	58	None	replace
238	[BUG]  [BUGGY]  appendDecoderRepresentation(c,  sb,  c);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  appendDecoderRepresentation(c,  sb,  c);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	appendDecoderRepresentation(c,  sb,  c);	  appendHexJavaScriptRepresentation(c,    sb,    c);    	non-compiled	[CE]  	58	None	replace
239	[BUG]  [BUGGY]  System.err.println( "JavaScriptRepresentation  error: "  +  char  c,  c);  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  System.err.println( "JavaScriptRepresentation  error: "  +  char  c,  c);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	System.err.println( "JavaScriptRepresentation  error: "  +  char  c,  c);	  System.err.println(   "JavaScriptRepresentation    error:   "    +    char    c);    	non-compiled	[CE]  	23	None	replace
240	[BUG]  [BUGGY]  System.err.println( "JavaScriptRepresentation  error: "  +  c,  c);  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  System.err.println( "JavaScriptRepresentation  error: "  +  c,  c);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	System.err.println( "JavaScriptRepresentation  error: "  +  c,  c);	  System.err.println(   "JavaScriptRepresentation    error:   "    +    char    c);    	non-compiled	[CE]  	23	None	replace
241	[BUG]  [BUGGY]  appendHexJavaScriptRepresentation(c,  context);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  appendHexJavaScriptRepresentation(c,  context);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	appendHexJavaScriptRepresentation(c,  context);	  Context    rhsContext    =    context.getCurrentContext();    appendHexJavaScriptRepresentation(rhsContext,    c);    	non-compiled	[CE]  	110	None	replace
242	[BUG]  [BUGGY]  AppendHexJavaScriptRepresentation(c,  context);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  AppendHexJavaScriptRepresentation(c,  context);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	AppendHexJavaScriptRepresentation(c,  context);	  Context    rhsContext    =    context.getCurrentContext();    appendHexJavaScriptRepresentation(rhsContext,    c);    	non-compiled	[CE]  	110	None	replace
243	[BUG]  [BUGGY]  Context  rhsContext  =  context.getCurrentContext();  appendHexJavaScriptRepresentation(rhsContext,  consumer);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  Context  rhsContext  =  context.getCurrentContext();  appendHexJavaScriptRepresentation(rhsContext,  consumer);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	Context  rhsContext  =  context.getCurrentContext();  appendHexJavaScriptRepresentation(rhsContext,  consumer);	  Context    rhsContext    =    context.getCurrentContext();    appendHexJavaScriptRepresentation(rhsContext,    c);    	non-compiled	[CE]  	110	None	replace
244	[BUG]  [BUGGY]  Context  lhsContext  =  context.getCurrentContext();  appendHexJavaScriptRepresentation(lhsContext,  c);  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  Context  lhsContext  =  context.getCurrentContext();  appendHexJavaScriptRepresentation(lhsContext,  c);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	Context  lhsContext  =  context.getCurrentContext();  appendHexJavaScriptRepresentation(lhsContext,  c);	  Context    rhsContext    =    context.getCurrentContext();    appendHexJavaScriptRepresentation(rhsContext,    c);    	non-compiled	[CE]  	110	None	replace
245	[BUG]  [BUGGY]  Context  rhsContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(c,  sb,  rhsContext,  consumer);  [CE]  [FE]              ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  Context  rhsContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(c,  sb,  rhsContext,  consumer);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	Context  rhsContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(c,  sb,  rhsContext,  consumer);	  Context    rhsContext    =    Context.getCurrentContext();    appendHexJavaScriptRepresentation(c,    sb,    rhsContext);    	non-compiled	[CE]  	83	None	replace
246	[BUG]  [BUGGY]  AppendHexJavaScriptRepresentation(c,  sb,  rhsContext);  [CE]  [FE]                ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  AppendHexJavaScriptRepresentation(c,  sb,  rhsContext);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	AppendHexJavaScriptRepresentation(c,  sb,  rhsContext);	  Context    rhsContext    =    Context.getCurrentContext();    appendHexJavaScriptRepresentation(c,    sb,    rhsContext);    	non-compiled	[CE]  	83	None	replace
247	[BUG]  [BUGGY]  appendHexJavaScriptRepresentation(c,  sb,  rhsContext);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  appendHexJavaScriptRepresentation(c,  sb,  rhsContext);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	appendHexJavaScriptRepresentation(c,  sb,  rhsContext);	  Context    rhsContext    =    Context.getCurrentContext();    appendHexJavaScriptRepresentation(c,    sb,    rhsContext);    	non-compiled	[CE]  	83	None	replace
248	[BUG]  [BUGGY]  Context  rhsContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(c,  sb,  lhsContext);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  Context  rhsContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(c,  sb,  lhsContext);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	Context  rhsContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(c,  sb,  lhsContext);	  Context    rhsContext    =    Context.getCurrentContext();    appendHexJavaScriptRepresentation(c,    sb,    rhsContext);    	non-compiled	[CE]  	83	None	replace
249	[BUG]  [BUGGY]  Context  rhsContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(c,  sb,  4);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  Context  rhsContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(c,  sb,  4);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	Context  rhsContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(c,  sb,  4);	  Context    rhsContext    =    Context.getCurrentContext();    appendHexJavaScriptRepresentation(c,    sb,    rhsContext);    	non-compiled	[CE]  	83	None	replace
250	[BUG]  [BUGGY]  AppendHexJavaScriptRepresentation(sb,  c,  this);  [CE]  [FE]                ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  AppendHexJavaScriptRepresentation(sb,  c,  this);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	AppendHexJavaScriptRepresentation(sb,  c,  this);	  AppendHexJavaScriptRepresentation(sb,    c);    	non-compiled	[CE]  	32	None	replace
251	[BUG]  [BUGGY]  AppendHexJavaScriptRepresentation(sb,  c,  c);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  AppendHexJavaScriptRepresentation(sb,  c,  c);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	AppendHexJavaScriptRepresentation(sb,  c,  c);	  AppendHexJavaScriptRepresentation(sb,    c);    	non-compiled	[CE]  	32	None	replace
252	[BUG]  [BUGGY]  appendDelimiterRepresentation(c,  sb,  Color.black);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  appendDelimiterRepresentation(c,  sb,  Color.black);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	appendDelimiterRepresentation(c,  sb,  Color.black);	  appendDelimiterRepresentation(c,    sb);    	non-compiled	[CE]  	60	None	replace
253	[BUG]  [BUGGY]  appendDelimiterRepresentation(c,  sb,  message);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  appendDelimiterRepresentation(c,  sb,  message);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	appendDelimiterRepresentation(c,  sb,  message);	  appendDelimiterRepresentation(c,    sb);    	non-compiled	[CE]  	60	None	replace
254	[BUG]  [BUGGY]  appendDelimiterRepresentation(c,  sb,  true);  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  appendDelimiterRepresentation(c,  sb,  true);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	appendDelimiterRepresentation(c,  sb,  true);	  appendDelimiterRepresentation(c,    sb);    	non-compiled	[CE]  	60	None	replace
255	[BUG]  [BUGGY]  System.err.println( "JavaScriptRepresentation  ' "  +  c  + "','  is  not  supported. ");  [CE]  [FE]              ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  System.err.println( "JavaScriptRepresentation  ' "  +  c  + "','  is  not  supported. ");  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	System.err.println( "JavaScriptRepresentation  ' "  +  c  + "','  is  not  supported. ");	  System.err.println(   "JavaScriptRepresentation    '   "    +    c    +   ",'    is    not    supported.   ");    	non-compiled	[CE]  	37	None	replace
256	[BUG]  [BUGGY]  System.err.println( "JavaScriptRepresentation  ' "  +  c  + "','  is  not  supported.n ");  [CE]  [FE]                ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  System.err.println( "JavaScriptRepresentation  ' "  +  c  + "','  is  not  supported.n ");  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	System.err.println( "JavaScriptRepresentation  ' "  +  c  + "','  is  not  supported.n ");	  System.err.println(   "JavaScriptRepresentation    '   "    +    c    +   ",'    is    not    supported.   ");    	non-compiled	[CE]  	37	None	replace
257	[BUG]  [BUGGY]  Context  rhsContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(c,  sb,  consumer);  [CE]  [FE]                ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  Context  rhsContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(c,  sb,  consumer);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	Context  rhsContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(c,  sb,  consumer);	  Context    rhsContext    =    Context.getCurrentContext();    appendHexJavaScriptRepresentation(c,    sb);    	non-compiled	[CE]  	17	None	replace
258	[BUG]  [BUGGY]  appendHexJavaScriptRepresentation(c,  sb,  this.message);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  appendHexJavaScriptRepresentation(c,  sb,  this.message);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	appendHexJavaScriptRepresentation(c,  sb,  this.message);	  appendHexJavaScriptRepresentation(c,    sb,    message);    	non-compiled	[CE]  	59	None	replace
259	[BUG]  [BUGGY]  appendHexJavaScriptRepresentation(c,  sb,  image);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  appendHexJavaScriptRepresentation(c,  sb,  image);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	appendHexJavaScriptRepresentation(c,  sb,  image);	  appendHexJavaScriptRepresentation(c,    sb,    message);    	non-compiled	[CE]  	59	None	replace
260	[BUG]  [BUGGY]  appendHexJavaScriptRepresentation(c,  sb,  error);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  appendHexJavaScriptRepresentation(c,  sb,  error);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	appendHexJavaScriptRepresentation(c,  sb,  error);	  appendHexJavaScriptRepresentation(c,    sb,    message);    	non-compiled	[CE]  	59	None	replace
261	[BUG]  [BUGGY]  appendHexJavaScriptRepresentation(c,  sb,  codeGenerator);  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  appendHexJavaScriptRepresentation(c,  sb,  codeGenerator);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	appendHexJavaScriptRepresentation(c,  sb,  codeGenerator);	  appendHexJavaScriptRepresentation(c,    sb,    message);    	non-compiled	[CE]  	59	None	replace
262	[BUG]  [BUGGY]  appendHexJavaScriptRepresentation(sb,  char,  c);  [CE]  [FE]                ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  appendHexJavaScriptRepresentation(sb,  char,  c);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	appendHexJavaScriptRepresentation(sb,  char,  c);	  Context    rhsContext    =    Context.getCurrentContext();    appendHexJavaScriptRepresentation(rhsContext,    char,    c);    	non-compiled	[CE]  	84	None	replace
263	[BUG]  [BUGGY]  appendHexJavaScriptRepresentation(c,  char,  rhsContext);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  appendHexJavaScriptRepresentation(c,  char,  rhsContext);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	appendHexJavaScriptRepresentation(c,  char,  rhsContext);	  Context    rhsContext    =    Context.getCurrentContext();    appendHexJavaScriptRepresentation(rhsContext,    char,    c);    	non-compiled	[CE]  	84	None	replace
264	[BUG]  [BUGGY]  AppendHexJavaScriptRepresentation(c,  char,  rhsContext);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  AppendHexJavaScriptRepresentation(c,  char,  rhsContext);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	AppendHexJavaScriptRepresentation(c,  char,  rhsContext);	  Context    rhsContext    =    Context.getCurrentContext();    appendHexJavaScriptRepresentation(rhsContext,    char,    c);    	non-compiled	[CE]  	84	None	replace
265	[BUG]  [BUGGY]  Context  rhsContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(rhsContext,  c,  char);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  Context  rhsContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(rhsContext,  c,  char);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	Context  rhsContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(rhsContext,  c,  char);	  Context    rhsContext    =    Context.getCurrentContext();    appendHexJavaScriptRepresentation(rhsContext,    char,    c);    	non-compiled	[CE]  	84	None	replace
266	[BUG]  [BUGGY]  Context  rhsContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(c,  char,  rhsContext);  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  Context  rhsContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(c,  char,  rhsContext);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	Context  rhsContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(c,  char,  rhsContext);	  Context    rhsContext    =    Context.getCurrentContext();    appendHexJavaScriptRepresentation(rhsContext,    char,    c);    	non-compiled	[CE]  	84	None	replace
267	[BUG]  [BUGGY]  Context  lhsContext  =  context.getCurrentContext();  appendHexJavaScriptRepresentation(c,  sb,  consumer);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  Context  lhsContext  =  context.getCurrentContext();  appendHexJavaScriptRepresentation(c,  sb,  consumer);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	Context  lhsContext  =  context.getCurrentContext();  appendHexJavaScriptRepresentation(c,  sb,  consumer);	  Context    lhsContext    =    Context.getCurrentContext();    appendHexJavaScriptRepresentation(c,    sb,    consumer);    	non-compiled	[CE]  	19	None	replace
268	[BUG]  [BUGGY]  Context  lhsContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(c,  sb,  this.consumer);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  Context  lhsContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(c,  sb,  this.consumer);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	Context  lhsContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(c,  sb,  this.consumer);	  Context    lhsContext    =    Context.getCurrentContext();    appendHexJavaScriptRepresentation(c,    sb,    consumer);    	non-compiled	[CE]  	19	None	replace
269	[BUG]  [BUGGY]  Context  lhsContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(c,  sb,  consumer,  true);  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  Context  lhsContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(c,  sb,  consumer,  true);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	Context  lhsContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(c,  sb,  consumer,  true);	  Context    lhsContext    =    Context.getCurrentContext();    appendHexJavaScriptRepresentation(c,    sb,    consumer);    	non-compiled	[CE]  	19	None	replace
270	[BUG]  [BUGGY]  System.err.println( "JavaScriptRepresentation  ' "  +  c  + "'  is  not  supported! ");  [CE]  [FE]                ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  System.err.println( "JavaScriptRepresentation  ' "  +  c  + "'  is  not  supported! ");  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	System.err.println( "JavaScriptRepresentation  ' "  +  c  + "'  is  not  supported! ");	  System.err.println(   "JavaScriptRepresentation    '   "    +    c    +   "'    is    not    supported.n   ");    	non-compiled	[CE]  	38	None	replace
271	[BUG]  [BUGGY]  sb.append(':');  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  sb.append(':');  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	sb.append(':');	  sb.append('ufffd');    	non-compiled	[CE]  	45	None	replace
272	[BUG]  [BUGGY]  sb.append('$');  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  sb.append('$');  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	sb.append('$');	  sb.append('ufffd');    	non-compiled	[CE]  	45	None	replace
273	[BUG]  [BUGGY]  System.err.println( "JavaScriptRepresentation  error: "  +  c  + ";in ");  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  System.err.println( "JavaScriptRepresentation  error: "  +  c  + ";in ");  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	System.err.println( "JavaScriptRepresentation  error: "  +  c  + ";in ");	  System.err.println(   "JavaScriptRepresentation    error:   "    +    c    +   ";n   ");    	non-compiled	[CE]  	71	None	replace
274	[BUG]  [BUGGY]  System.err.println( "JavaScriptRepresentation  error: "  +  c  + ";does  not  exist. ");  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  System.err.println( "JavaScriptRepresentation  error: "  +  c  + ";does  not  exist. ");  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	System.err.println( "JavaScriptRepresentation  error: "  +  c  + ";does  not  exist. ");	  System.err.println(   "JavaScriptRepresentation    error:   "    +    c    +   ";n   ");    	non-compiled	[CE]  	71	None	replace
275	[BUG]  [BUGGY]  System.err.println( "JavaScriptRepresentation  error: "  +  c  + ";ref: ");  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  System.err.println( "JavaScriptRepresentation  error: "  +  c  + ";ref: ");  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	System.err.println( "JavaScriptRepresentation  error: "  +  c  + ";ref: ");	  System.err.println(   "JavaScriptRepresentation    error:   "    +    c    +   ";n   ");    	non-compiled	[CE]  	71	None	replace
276	[BUG]  [BUGGY]  System.err.println( "JavaScriptRepresentation  error: "  +  c  + ";msg, ");  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  System.err.println( "JavaScriptRepresentation  error: "  +  c  + ";msg, ");  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	System.err.println( "JavaScriptRepresentation  error: "  +  c  + ";msg, ");	  System.err.println(   "JavaScriptRepresentation    error:   "    +    c    +   ";n   ");    	non-compiled	[CE]  	71	None	replace
277	[BUG]  [BUGGY]  System.err.println( "JavaScriptRepresentation  error: "  +  c  + ";result: ");  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  System.err.println( "JavaScriptRepresentation  error: "  +  c  + ";result: ");  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	System.err.println( "JavaScriptRepresentation  error: "  +  c  + ";result: ");	  System.err.println(   "JavaScriptRepresentation    error:   "    +    c    +   ";n   ");    	non-compiled	[CE]  	71	None	replace
278	[BUG]  [BUGGY]  System.err.println( "JavaScriptRepresentation  error: "  +  c  + ";result: "  +  ex.getMessage());  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  System.err.println( "JavaScriptRepresentation  error: "  +  c  + ";result: "  +  ex.getMessage());  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	System.err.println( "JavaScriptRepresentation  error: "  +  c  + ";result: "  +  ex.getMessage());	  System.err.println(   "JavaScriptRepresentation    error:   "    +    c    +   ";n   ");    	non-compiled	[CE]  	71	None	replace
279	[BUG]  [BUGGY]  System.err.println(c  + "JavaScriptRepresentation  error: "  +  sb);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  System.err.println(c  + "JavaScriptRepresentation  error: "  +  sb);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	System.err.println(c  + "JavaScriptRepresentation  error: "  +  sb);	  System.err.println(   "JavaScriptRepresentation    error:   "    +    sb);    	non-compiled	[CE]  	22	None	replace
280	[BUG]  [BUGGY]  Context  lhsContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(c,  sb,  rhsContext,  consumer);  [CE]  [FE]              ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  Context  lhsContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(c,  sb,  rhsContext,  consumer);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	Context  lhsContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(c,  sb,  rhsContext,  consumer);	  Context    lhsContext    =    Context.getCurrentContext();    appendHexJavaScriptRepresentation(c,    sb,    rhsContext);    	non-compiled	[CE]  	86	None	replace
281	[BUG]  [BUGGY]  System.err.println( "JavaScriptRepresentation  Exception: "  +  e.getMessage());  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  System.err.println( "JavaScriptRepresentation  Exception: "  +  e.getMessage());  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	System.err.println( "JavaScriptRepresentation  Exception: "  +  e.getMessage());	  System.err.println(   "JavaScriptRepresentation    Exception:   "    +    e);    	non-compiled	[CE]  	48	None	replace
282	[BUG]  [BUGGY]  System.err.println( "JavaScriptRepresentation  Exception: "  +  e.toString());  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  System.err.println( "JavaScriptRepresentation  Exception: "  +  e.toString());  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	System.err.println( "JavaScriptRepresentation  Exception: "  +  e.toString());	  System.err.println(   "JavaScriptRepresentation    Exception:   "    +    e);    	non-compiled	[CE]  	48	None	replace
283	[BUG]  [BUGGY]  System.err.println( "JavaScriptRepresentation  Exception: "  +  e,  c);  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  System.err.println( "JavaScriptRepresentation  Exception: "  +  e,  c);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	System.err.println( "JavaScriptRepresentation  Exception: "  +  e,  c);	  System.err.println(   "JavaScriptRepresentation    Exception:   "    +    e);    	non-compiled	[CE]  	48	None	replace
284	[BUG]  [BUGGY]  System.err.println( "JavaScriptRepresentation  error: "  +  c,  ex.toString());  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  System.err.println( "JavaScriptRepresentation  error: "  +  c,  ex.toString());  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	System.err.println( "JavaScriptRepresentation  error: "  +  c,  ex.toString());	  System.err.println(   "JavaScriptRepresentation    error:   "    +    c.toString());    	non-compiled	[CE]  	113	None	replace
285	[BUG]  [BUGGY]  System.err.println( "JavaScriptRepresentation  error: "  +  c.toString()  + "n ");  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  System.err.println( "JavaScriptRepresentation  error: "  +  c.toString()  + "n ");  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	System.err.println( "JavaScriptRepresentation  error: "  +  c.toString()  + "n ");	  System.err.println(   "JavaScriptRepresentation    error:   "    +    c.toString());    	non-compiled	[CE]  	113	None	replace
286	[BUG]  [BUGGY]  appendJavaScriptRepresentation(sb,  c,  consumer);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  appendJavaScriptRepresentation(sb,  c,  consumer);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	appendJavaScriptRepresentation(sb,  c,  consumer);	  appendHexJavaScriptRepresentation(sb,    c,    consumer);    	non-compiled	[CE]  	11	None	replace
287	[BUG]  [BUGGY]  appendHexJavaScriptRepresentation(sb,  c,  this.consumer);  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  appendHexJavaScriptRepresentation(sb,  c,  this.consumer);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	appendHexJavaScriptRepresentation(sb,  c,  this.consumer);	  appendHexJavaScriptRepresentation(sb,    c,    consumer);    	non-compiled	[CE]  	11	None	replace
288	[BUG]  [BUGGY]  appendConsumerRepresentation(sb,  c,  consumer);  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  appendConsumerRepresentation(sb,  c,  consumer);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	appendConsumerRepresentation(sb,  c,  consumer);	  appendHexJavaScriptRepresentation(sb,    c,    consumer);    	non-compiled	[CE]  	11	None	replace
289	[BUG]  [BUGGY]  appendHexJavaScriptRepresentation(sb,  c,  0);  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  appendHexJavaScriptRepresentation(sb,  c,  0);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	appendHexJavaScriptRepresentation(sb,  c,  0);	  appendHexJavaScriptRepresentation(sb,    c,    consumer);    	non-compiled	[CE]  	11	None	replace
290	[BUG]  [BUGGY]  sb.append('#').append(c);  [CE]  [FE]              ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  sb.append('#').append(c);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	sb.append('#').append(c);	  sb.append('#');    	non-compiled	[CE]  	56	None	replace
291	[BUG]  [BUGGY]  sb.append('#'  +  c);  [CE]  [FE]                ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  sb.append('#'  +  c);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	sb.append('#'  +  c);	  sb.append('#');    	non-compiled	[CE]  	56	None	replace
292	[BUG]  [BUGGY]  sb.append('>');  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  sb.append('>');  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	sb.append('>');	  sb.append('#');    	non-compiled	[CE]  	56	None	replace
293	[BUG]  [BUGGY]  sb.append( "null ");  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  sb.append( "null ");  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	sb.append( "null ");	  sb.append(   "n   ");    	non-compiled	[CE]  	74	None	replace
294	[BUG]  [BUGGY]  sb.append( ": ");  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  sb.append( ": ");  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	sb.append( ": ");	  sb.append(   "n   ");    	non-compiled	[CE]  	74	None	replace
295	[BUG]  [BUGGY]  sb.append( "# ");  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  sb.append( "# ");  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	sb.append( "# ");	  sb.append(   "n   ");    	non-compiled	[CE]  	74	None	replace
296	[BUG]  [BUGGY]  sb.append( "  <   ");  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  sb.append( "  <   ");  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	sb.append( "  <   ");	  sb.append(   "n   ");    	non-compiled	[CE]  	74	None	replace
297	[BUG]  [BUGGY]  AppendHexJavaScriptRepresentation(c,  sb,  true);  [CE]  [FE]              ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  AppendHexJavaScriptRepresentation(c,  sb,  true);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	AppendHexJavaScriptRepresentation(c,  sb,  true);	  AppendHexJavaScriptRepresentation(c,    sb);    	non-compiled	[CE]  	16	None	replace
298	[BUG]  [BUGGY]  AppendHexJavaScriptRepresentation(c,  sb,  false);  [CE]  [FE]                ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  AppendHexJavaScriptRepresentation(c,  sb,  false);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	AppendHexJavaScriptRepresentation(c,  sb,  false);	  AppendHexJavaScriptRepresentation(c,    sb);    	non-compiled	[CE]  	16	None	replace
299	[BUG]  [BUGGY]  appendJavaScriptRepresentation(sb,  c,  c);  [CE]  [FE]                ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  appendJavaScriptRepresentation(sb,  c,  c);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	appendJavaScriptRepresentation(sb,  c,  c);	  appendHexJavaScriptRepresentation(sb,    c,    c);    	non-compiled	[CE]  	3	None	replace
300	[BUG]  [BUGGY]  appendHexJavaScriptRepresentation(c,  c);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  appendHexJavaScriptRepresentation(c,  c);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	appendHexJavaScriptRepresentation(c,  c);	  appendHexJavaScriptRepresentation(sb,    c,    c);    	non-compiled	[CE]  	3	None	replace
301	[BUG]  [BUGGY]  appendBooleanRepresentation(sb,  c,  c);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  appendBooleanRepresentation(sb,  c,  c);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	appendBooleanRepresentation(sb,  c,  c);	  appendHexJavaScriptRepresentation(sb,    c,    c);    	non-compiled	[CE]  	3	None	replace
302	[BUG]  [BUGGY]  appendDelimiterRepresentation(sb,  c,  c);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  appendDelimiterRepresentation(sb,  c,  c);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	appendDelimiterRepresentation(sb,  c,  c);	  appendHexJavaScriptRepresentation(sb,    c,    c);    	non-compiled	[CE]  	3	None	replace
303	[BUG]  [BUGGY]  appendHexJavaScriptRepresentation(sb,  c,  HEX_CHARS);  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  appendHexJavaScriptRepresentation(sb,  c,  HEX_CHARS);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	appendHexJavaScriptRepresentation(sb,  c,  HEX_CHARS);	  appendHexJavaScriptRepresentation(sb,    c,    c);    	non-compiled	[CE]  	3	None	replace
304	[BUG]  [BUGGY]  Context  currentContext  =  Context.getCurrentContext();  codeGenerator.appendHexJavaScriptRepresentation(c,  sb);  [CE]  [FE]                ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  Context  currentContext  =  Context.getCurrentContext();  codeGenerator.appendHexJavaScriptRepresentation(c,  sb);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	Context  currentContext  =  Context.getCurrentContext();  codeGenerator.appendHexJavaScriptRepresentation(c,  sb);	  Context    lhsContext    =    Context.getCurrentContext();    codeGenerator.appendHexJavaScriptRepresentation(c,    sb);    	non-compiled	[CE]  	115	None	replace
305	[BUG]  [BUGGY]  Context  lhsContext  =  context.getCurrentContext();  codeGenerator.appendHexJavaScriptRepresentation(c,  sb);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  Context  lhsContext  =  context.getCurrentContext();  codeGenerator.appendHexJavaScriptRepresentation(c,  sb);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	Context  lhsContext  =  context.getCurrentContext();  codeGenerator.appendHexJavaScriptRepresentation(c,  sb);	  Context    lhsContext    =    Context.getCurrentContext();    codeGenerator.appendHexJavaScriptRepresentation(c,    sb);    	non-compiled	[CE]  	115	None	replace
306	[BUG]  [BUGGY]  Context  lhsContext  =  Context.getCurrentContext();  codeGenerator.appendHexJavaScriptRepresentation(c,  sb,  this);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  Context  lhsContext  =  Context.getCurrentContext();  codeGenerator.appendHexJavaScriptRepresentation(c,  sb,  this);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	Context  lhsContext  =  Context.getCurrentContext();  codeGenerator.appendHexJavaScriptRepresentation(c,  sb,  this);	  Context    lhsContext    =    Context.getCurrentContext();    codeGenerator.appendHexJavaScriptRepresentation(c,    sb);    	non-compiled	[CE]  	115	None	replace
307	[BUG]  [BUGGY]  Context  lhsContext  =  Context.getCurrentContext();  codeGenerator.appendHexJavaScriptRepresentation(c,  sb,  message);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  Context  lhsContext  =  Context.getCurrentContext();  codeGenerator.appendHexJavaScriptRepresentation(c,  sb,  message);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	Context  lhsContext  =  Context.getCurrentContext();  codeGenerator.appendHexJavaScriptRepresentation(c,  sb,  message);	  Context    lhsContext    =    Context.getCurrentContext();    codeGenerator.appendHexJavaScriptRepresentation(c,    sb);    	non-compiled	[CE]  	115	None	replace
308	[BUG]  [BUGGY]  sb.append(Character.toLowerCase(c),  c);  [CE]  [FE]              ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  sb.append(Character.toLowerCase(c),  c);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	sb.append(Character.toLowerCase(c),  c);	  sb.append(Character.toLowerCase(c));    	non-compiled	[CE]  	41	None	replace
309	[BUG]  [BUGGY]  sb.append(Character.toLowerCase(c)+  1);  [CE]  [FE]                ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  sb.append(Character.toLowerCase(c)+  1);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	sb.append(Character.toLowerCase(c)+  1);	  sb.append(Character.toLowerCase(c));    	non-compiled	[CE]  	41	None	replace
310	[BUG]  [BUGGY]  sb.append(CaseConsumer.toLowerCase(c));  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  sb.append(CaseConsumer.toLowerCase(c));  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	sb.append(CaseConsumer.toLowerCase(c));	  sb.append(Character.toLowerCase(c));    	non-compiled	[CE]  	41	None	replace
311	[BUG]  [BUGGY]  sb.append(Camera.toLowerCase(c));  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  sb.append(Camera.toLowerCase(c));  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	sb.append(Camera.toLowerCase(c));	  sb.append(Character.toLowerCase(c));    	non-compiled	[CE]  	41	None	replace
312	[BUG]  [BUGGY]  appendHexJavaScriptRepresentation(currentContext,  c,  sb);  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  appendHexJavaScriptRepresentation(currentContext,  c,  sb);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	appendHexJavaScriptRepresentation(currentContext,  c,  sb);	  Context    currentContext    =    Context.getCurrentContext();    appendHexJavaScriptRepresentation(currentContext,    c,    sb);    	non-compiled	[CE]  	95	None	replace
313	[BUG]  [BUGGY]  appendDecoderRepresentation(c,  sb);  [CE]  [FE]            ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  appendDecoderRepresentation(c,  sb);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	appendDecoderRepresentation(c,  sb);	  appendDecoderRepresentation(sb,    c);    	non-compiled	[CE]  	76	None	replace
314	[BUG]  [BUGGY]  appendDecoderRepresentation(sb,  c,  consumer);  [CE]  [FE]              ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  appendDecoderRepresentation(sb,  c,  consumer);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	appendDecoderRepresentation(sb,  c,  consumer);	  appendDecoderRepresentation(sb,    c);    	non-compiled	[CE]  	76	None	replace
315	[BUG]  [BUGGY]  appendDecoderRepresentation(sb,  c,  HEX_CHARS);  [CE]  [FE]                ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  appendDecoderRepresentation(sb,  c,  HEX_CHARS);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	appendDecoderRepresentation(sb,  c,  HEX_CHARS);	  appendDecoderRepresentation(sb,    c);    	non-compiled	[CE]  	76	None	replace
316	[BUG]  [BUGGY]  appendDecoderRepresentation(sb,  c,  DECODE_BLOCK);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  appendDecoderRepresentation(sb,  c,  DECODE_BLOCK);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	appendDecoderRepresentation(sb,  c,  DECODE_BLOCK);	  appendDecoderRepresentation(sb,    c);    	non-compiled	[CE]  	76	None	replace
317	[BUG]  [BUGGY]  Context  lhsContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(consumer,  c,  rhsContext);  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  Context  lhsContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(consumer,  c,  rhsContext);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	Context  lhsContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(consumer,  c,  rhsContext);	  Context    rhsContext    =    Context.getCurrentContext();    appendHexJavaScriptRepresentation(consumer,    c,    rhsContext);    	non-compiled	[CE]  	79	None	replace
318	[BUG]  [BUGGY]  AppendHexJavaScriptRepresentation(consumer,  c,  rhsContext);  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  AppendHexJavaScriptRepresentation(consumer,  c,  rhsContext);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	AppendHexJavaScriptRepresentation(consumer,  c,  rhsContext);	  Context    rhsContext    =    Context.getCurrentContext();    appendHexJavaScriptRepresentation(consumer,    c,    rhsContext);    	non-compiled	[CE]  	79	None	replace
319	[BUG]  [BUGGY]  appendHexJavaScriptRepresentation(consumer,  c,  rhsContext);  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  appendHexJavaScriptRepresentation(consumer,  c,  rhsContext);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	appendHexJavaScriptRepresentation(consumer,  c,  rhsContext);	  Context    rhsContext    =    Context.getCurrentContext();    appendHexJavaScriptRepresentation(consumer,    c,    rhsContext);    	non-compiled	[CE]  	79	None	replace
320	[BUG]  [BUGGY]  Context  rhsContext  =  context.getCurrentContext();  appendHexJavaScriptRepresentation(consumer,  c,  rhsContext);  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  Context  rhsContext  =  context.getCurrentContext();  appendHexJavaScriptRepresentation(consumer,  c,  rhsContext);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	Context  rhsContext  =  context.getCurrentContext();  appendHexJavaScriptRepresentation(consumer,  c,  rhsContext);	  Context    rhsContext    =    Context.getCurrentContext();    appendHexJavaScriptRepresentation(consumer,    c,    rhsContext);    	non-compiled	[CE]  	79	None	replace
321	[BUG]  [BUGGY]  Context  rhsContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(c,  consumer,  rhsContext);  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  Context  rhsContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(c,  consumer,  rhsContext);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	Context  rhsContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(c,  consumer,  rhsContext);	  Context    rhsContext    =    Context.getCurrentContext();    appendHexJavaScriptRepresentation(consumer,    c,    rhsContext);    	non-compiled	[CE]  	79	None	replace
322	[BUG]  [BUGGY]  Context  rhsContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(sb,  c,  consumer);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  Context  rhsContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(sb,  c,  consumer);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	Context  rhsContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(sb,  c,  consumer);	  Context    lhsContext    =    Context.getCurrentContext();    appendHexJavaScriptRepresentation(sb,    c,    consumer);    	non-compiled	[CE]  	34	None	replace
323	[BUG]  [BUGGY]  Context  lhsContext  =  context.getCurrentContext();  appendHexJavaScriptRepresentation(sb,  c,  consumer);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  Context  lhsContext  =  context.getCurrentContext();  appendHexJavaScriptRepresentation(sb,  c,  consumer);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	Context  lhsContext  =  context.getCurrentContext();  appendHexJavaScriptRepresentation(sb,  c,  consumer);	  Context    lhsContext    =    Context.getCurrentContext();    appendHexJavaScriptRepresentation(sb,    c,    consumer);    	non-compiled	[CE]  	34	None	replace
324	[BUG]  [BUGGY]  Context  lhsContext  =  Context.currentContext();  appendHexJavaScriptRepresentation(sb,  c,  consumer);  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  Context  lhsContext  =  Context.currentContext();  appendHexJavaScriptRepresentation(sb,  c,  consumer);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	Context  lhsContext  =  Context.currentContext();  appendHexJavaScriptRepresentation(sb,  c,  consumer);	  Context    lhsContext    =    Context.getCurrentContext();    appendHexJavaScriptRepresentation(sb,    c,    consumer);    	non-compiled	[CE]  	34	None	replace
325	[BUG]  [BUGGY]  Context  lhsContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(sb,  c,  this.consumer);  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  Context  lhsContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(sb,  c,  this.consumer);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	Context  lhsContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(sb,  c,  this.consumer);	  Context    lhsContext    =    Context.getCurrentContext();    appendHexJavaScriptRepresentation(sb,    c,    consumer);    	non-compiled	[CE]  	34	None	replace
326	[BUG]  [BUGGY]  sb.append(',').append(c);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  sb.append(',').append(c);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	sb.append(',').append(c);	  sb.append(',');    	non-compiled	[CE]  	43	None	replace
327	[BUG]  [BUGGY]  sb.append(','  +  c);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  sb.append(','  +  c);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	sb.append(','  +  c);	  sb.append(',');    	non-compiled	[CE]  	43	None	replace
328	[BUG]  [BUGGY]  sb.append(c,  ',');  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  sb.append(c,  ',');  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	sb.append(c,  ',');	  sb.append(',');    	non-compiled	[CE]  	43	None	replace
329	[BUG]  [BUGGY]  AppendBooleanRepresentation(sb,  c,  false);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  AppendBooleanRepresentation(sb,  c,  false);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	AppendBooleanRepresentation(sb,  c,  false);	  appendBooleanRepresentation(sb,    c,    true);    	non-compiled	[CE]  	27	None	replace
330	[BUG]  [BUGGY]  appendHexJavaScriptRepresentation(sb,  c,  true);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  appendHexJavaScriptRepresentation(sb,  c,  true);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	appendHexJavaScriptRepresentation(sb,  c,  true);	  appendBooleanRepresentation(sb,    c,    true);    	non-compiled	[CE]  	27	None	replace
331	[BUG]  [BUGGY]  sb.append(Character.toUpperCase(c),  c);  [CE]  [FE]                ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  sb.append(Character.toUpperCase(c),  c);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	sb.append(Character.toUpperCase(c),  c);	  sb.append(Character.toUpperCase(c));    	non-compiled	[CE]  	42	None	replace
332	[BUG]  [BUGGY]  sb.append(Character.toUpperCase(c)+  1);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  sb.append(Character.toUpperCase(c)+  1);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	sb.append(Character.toUpperCase(c)+  1);	  sb.append(Character.toUpperCase(c));    	non-compiled	[CE]  	42	None	replace
333	[BUG]  [BUGGY]  sb.append(Character.toUpperCase(c),  consumer);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  sb.append(Character.toUpperCase(c),  consumer);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	sb.append(Character.toUpperCase(c),  consumer);	  sb.append(Character.toUpperCase(c));    	non-compiled	[CE]  	42	None	replace
334	[BUG]  [BUGGY]  sb.append(Camera.toUpperCase(c));  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  sb.append(Camera.toUpperCase(c));  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	sb.append(Camera.toUpperCase(c));	  sb.append(Character.toUpperCase(c));    	non-compiled	[CE]  	42	None	replace
335	[BUG]  [BUGGY]  sb.append( ";  char  ' ").append(c);  [CE]  [FE]              ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  sb.append( ";  char  ' ").append(c);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	sb.append( ";  char  ' ").append(c);	  sb.append(   ";    char    '   ");    	non-compiled	[CE]  	102	None	replace
336	[BUG]  [BUGGY]  sb.append( ";  char  ' "  +  c);  [CE]  [FE]                ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  sb.append( ";  char  ' "  +  c);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	sb.append( ";  char  ' "  +  c);	  sb.append(   ";    char    '   ");    	non-compiled	[CE]  	102	None	replace
337	[BUG]  [BUGGY]  sb.append( ",  char  ' ");  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  sb.append( ",  char  ' ");  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	sb.append( ",  char  ' ");	  sb.append(   ";    char    '   ");    	non-compiled	[CE]  	102	None	replace
338	[BUG]  [BUGGY]  Context  rhsContext  =  Context.currentContext();  appendHexJavaScriptRepresentation(sb,  c);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  Context  rhsContext  =  Context.currentContext();  appendHexJavaScriptRepresentation(sb,  c);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	Context  rhsContext  =  Context.currentContext();  appendHexJavaScriptRepresentation(sb,  c);	  Context    rhsContext    =    Context.getCurrentContext();    appendHexJavaScriptRepresentation(sb,    c);    	non-compiled	[CE]  	33	None	replace
339	[BUG]  [BUGGY]  append(c,  sb);  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  append(c,  sb);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	append(c,  sb);	  append(sb,    c);    	non-compiled	[CE]  	75	None	replace
340	[BUG]  [BUGGY]  appendBoolean(sb,  c);  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  appendBoolean(sb,  c);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	appendBoolean(sb,  c);	  append(sb,    c);    	non-compiled	[CE]  	75	None	replace
341	[BUG]  [BUGGY]  append0(sb,  c);  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  append0(sb,  c);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	append0(sb,  c);	  append(sb,    c);    	non-compiled	[CE]  	75	None	replace
342	[BUG]  [BUGGY]  append(sb,  c,  0);  [CE]  [FE]                                    ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  append(sb,  c,  0);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	append(sb,  c,  0);	  append(sb,    c);    	non-compiled	[CE]  	75	None	replace
343	[BUG]  [BUGGY]  Context  rhsContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(sb,  c,  rhsContext,  consumer);  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  Context  rhsContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(sb,  c,  rhsContext,  consumer);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	Context  rhsContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(sb,  c,  rhsContext,  consumer);	  Context    rhsContext    =    Context.getCurrentContext();    appendHexJavaScriptRepresentation(sb,    c,    rhsContext);    	non-compiled	[CE]  	9	None	replace
344	[BUG]  [BUGGY]  Context  rhsContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(sb,  c,  lhsContext);  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  Context  rhsContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(sb,  c,  lhsContext);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	Context  rhsContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(sb,  c,  lhsContext);	  Context    rhsContext    =    Context.getCurrentContext();    appendHexJavaScriptRepresentation(sb,    c,    rhsContext);    	non-compiled	[CE]  	9	None	replace
345	[BUG]  [BUGGY]  Context  rhsContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(sb,  c,  this);  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  Context  rhsContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(sb,  c,  this);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	Context  rhsContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(sb,  c,  this);	  Context    rhsContext    =    Context.getCurrentContext();    appendHexJavaScriptRepresentation(sb,    c,    rhsContext);    	non-compiled	[CE]  	9	None	replace
346	[BUG]  [BUGGY]  appendBooleanRepresentation(sb,  c,  Color.blue);  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  appendBooleanRepresentation(sb,  c,  Color.blue);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	appendBooleanRepresentation(sb,  c,  Color.blue);	  appendBooleanRepresentation(sb,    c,    Color.black);    	non-compiled	[CE]  	30	None	replace
347	[BUG]  [BUGGY]  appendBooleanRepresentation(sb,  c,  Color.white);  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  appendBooleanRepresentation(sb,  c,  Color.white);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	appendBooleanRepresentation(sb,  c,  Color.white);	  appendBooleanRepresentation(sb,    c,    Color.black);    	non-compiled	[CE]  	30	None	replace
348	[BUG]  [BUGGY]  appendBooleanRepresentation(sb,  c,  Color.BLACK);  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  appendBooleanRepresentation(sb,  c,  Color.BLACK);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	appendBooleanRepresentation(sb,  c,  Color.BLACK);	  appendBooleanRepresentation(sb,    c,    Color.black);    	non-compiled	[CE]  	30	None	replace
349	[BUG]  [BUGGY]  AppendBooleanRepresentation(sb,  c,  Color.black);  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  AppendBooleanRepresentation(sb,  c,  Color.black);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	AppendBooleanRepresentation(sb,  c,  Color.black);	  appendBooleanRepresentation(sb,    c,    Color.black);    	non-compiled	[CE]  	30	None	replace
350	[BUG]  [BUGGY]  appendBooleanRepresentation(sb,  c,  Color.RED,  Color.black);  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  appendBooleanRepresentation(sb,  c,  Color.RED,  Color.black);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	appendBooleanRepresentation(sb,  c,  Color.RED,  Color.black);	  appendBooleanRepresentation(sb,    c,    Color.black);    	non-compiled	[CE]  	30	None	replace
351	[BUG]  [BUGGY]  appendDelimiterRepresentation(sb,  c,  consumer);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  appendDelimiterRepresentation(sb,  c,  consumer);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	appendDelimiterRepresentation(sb,  c,  consumer);	  appendDelimiterRepresentation(sb,    c);    	non-compiled	[CE]  	4	None	replace
352	[BUG]  [BUGGY]  appendDelimiterRepresentation(sb,  c,  0);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  appendDelimiterRepresentation(sb,  c,  0);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	appendDelimiterRepresentation(sb,  c,  0);	  appendDelimiterRepresentation(sb,    c);    	non-compiled	[CE]  	4	None	replace
353	[BUG]  [BUGGY]  System.err.println( "JavaScriptRepresentation  Exception: "  +  ex.getMessage());  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  System.err.println( "JavaScriptRepresentation  Exception: "  +  ex.getMessage());  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	System.err.println( "JavaScriptRepresentation  Exception: "  +  ex.getMessage());	  System.err.println(   "JavaScriptRepresentation    Exception:   "    +    ex);    	non-compiled	[CE]  	49	None	replace
354	[BUG]  [BUGGY]  System.err.println( "JavaScriptRepresentation  Exception: "  +  ex.toString());  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  System.err.println( "JavaScriptRepresentation  Exception: "  +  ex.toString());  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	System.err.println( "JavaScriptRepresentation  Exception: "  +  ex.toString());	  System.err.println(   "JavaScriptRepresentation    Exception:   "    +    ex);    	non-compiled	[CE]  	49	None	replace
355	[BUG]  [BUGGY]  Context  rhsContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(consumer,  sb,  c,  rhsContext);  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  Context  rhsContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(consumer,  sb,  c,  rhsContext);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	Context  rhsContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(consumer,  sb,  c,  rhsContext);	  Context    rhsContext    =    Context.getCurrentContext();    appendHexJavaScriptRepresentation(rhsContext,    sb,    c,    consumer);    	non-compiled	[CE]  	13	None	replace
356	[BUG]  [BUGGY]  appendHexJavaScriptRepresentation(sb,  Context.getCurrentContext(),  consumer);  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  appendHexJavaScriptRepresentation(sb,  Context.getCurrentContext(),  consumer);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	appendHexJavaScriptRepresentation(sb,  Context.getCurrentContext(),  consumer);	  Context    rhsContext    =    Context.getCurrentContext();    appendHexJavaScriptRepresentation(rhsContext,    sb,    c,    consumer);    	non-compiled	[CE]  	13	None	replace
357	[BUG]  [BUGGY]  Context  rhsContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(c,  sb,  c,  consumer);  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  Context  rhsContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(c,  sb,  c,  consumer);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	Context  rhsContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(c,  sb,  c,  consumer);	  Context    rhsContext    =    Context.getCurrentContext();    appendHexJavaScriptRepresentation(rhsContext,    sb,    c,    consumer);    	non-compiled	[CE]  	13	None	replace
358	[BUG]  [BUGGY]  AppendBooleanRepresentation(sb,  c,  true);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  AppendBooleanRepresentation(sb,  c,  true);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	AppendBooleanRepresentation(sb,  c,  true);	  appendBooleanRepresentation(sb,    c,    false);    	non-compiled	[CE]  	28	None	replace
359	[BUG]  [BUGGY]  appendBooleanRepresentation(sb,  c,  false,  true);  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  appendBooleanRepresentation(sb,  c,  false,  true);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	appendBooleanRepresentation(sb,  c,  false,  true);	  appendBooleanRepresentation(sb,    c,    false);    	non-compiled	[CE]  	28	None	replace
360	[BUG]  [BUGGY]  appendBooleanRepresentation(sb,  c,  false,  context);  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  appendBooleanRepresentation(sb,  c,  false,  context);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	appendBooleanRepresentation(sb,  c,  false,  context);	  appendBooleanRepresentation(sb,    c,    false);    	non-compiled	[CE]  	28	None	replace
361	[BUG]  [BUGGY]  appendBooleanRepresentation(sb,  c,  false,  null);  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  appendBooleanRepresentation(sb,  c,  false,  null);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	appendBooleanRepresentation(sb,  c,  false,  null);	  appendBooleanRepresentation(sb,    c,    false);    	non-compiled	[CE]  	28	None	replace
362	[BUG]  [BUGGY]  appendBooleanRepresentation(sb,  c,  CONSTRUCTOR,  consumer);  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  appendBooleanRepresentation(sb,  c,  CONSTRUCTOR,  consumer);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	appendBooleanRepresentation(sb,  c,  CONSTRUCTOR,  consumer);	  appendBooleanRepresentation(sb,    c,    CONSTRUCTOR);    	non-compiled	[CE]  	31	None	replace
363	[BUG]  [BUGGY]  appendBooleanRepresentation(sb,  c,  CONSTRUCTOR,  true);  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  appendBooleanRepresentation(sb,  c,  CONSTRUCTOR,  true);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	appendBooleanRepresentation(sb,  c,  CONSTRUCTOR,  true);	  appendBooleanRepresentation(sb,    c,    CONSTRUCTOR);    	non-compiled	[CE]  	31	None	replace
364	[BUG]  [BUGGY]  appendBooleanRepresentation(c,  sb,  CONSTRUCTOR);  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  appendBooleanRepresentation(c,  sb,  CONSTRUCTOR);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	appendBooleanRepresentation(c,  sb,  CONSTRUCTOR);	  appendBooleanRepresentation(sb,    c,    CONSTRUCTOR);    	non-compiled	[CE]  	31	None	replace
365	[BUG]  [BUGGY]  appendBooleanRepresentation(sb,  c,  CONSTRUCTOR,  false);  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  appendBooleanRepresentation(sb,  c,  CONSTRUCTOR,  false);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	appendBooleanRepresentation(sb,  c,  CONSTRUCTOR,  false);	  appendBooleanRepresentation(sb,    c,    CONSTRUCTOR);    	non-compiled	[CE]  	31	None	replace
366	[BUG]  [BUGGY]  appendBooleanRepresentation(sb,  c,  IN_FOR_INIT_CLAUSE);  [CE]  [FE]                                    ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  appendBooleanRepresentation(sb,  c,  IN_FOR_INIT_CLAUSE);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	appendBooleanRepresentation(sb,  c,  IN_FOR_INIT_CLAUSE);	  appendBooleanRepresentation(sb,    c,    CONSTRUCTOR);    	non-compiled	[CE]  	31	None	replace
367	[BUG]  [BUGGY]  appendBooleanRepresentation(sb,  c,  DEFAULT_CODES[c]);  [CE]  [FE]                                      ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  appendBooleanRepresentation(sb,  c,  DEFAULT_CODES[c]);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	appendBooleanRepresentation(sb,  c,  DEFAULT_CODES[c]);	  appendBooleanRepresentation(sb,    c,    CONSTRUCTOR);    	non-compiled	[CE]  	31	None	replace
368	[BUG]  [BUGGY]  System.err.println(c,  ex, "JavaScriptRepresentation  Exception: "  +  c);  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  System.err.println(c,  ex, "JavaScriptRepresentation  Exception: "  +  c);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	System.err.println(c,  ex, "JavaScriptRepresentation  Exception: "  +  c);	  System.err.println(c,   "JavaScriptRepresentation    Exception:   "    +    c);    	non-compiled	[CE]  	50	None	replace
369	[BUG]  [BUGGY]  System.err.println(c, "JavaScriptRepresentation  Exception: "  +  hex);  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  System.err.println(c, "JavaScriptRepresentation  Exception: "  +  hex);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	System.err.println(c, "JavaScriptRepresentation  Exception: "  +  hex);	  System.err.println(c,   "JavaScriptRepresentation    Exception:   "    +    c);    	non-compiled	[CE]  	50	None	replace
370	[BUG]  [BUGGY]  System.err.println(c, "JavaScriptRepresentation  Exception: "  +  e);  [CE]  [FE]                                    ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  System.err.println(c, "JavaScriptRepresentation  Exception: "  +  e);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	System.err.println(c, "JavaScriptRepresentation  Exception: "  +  e);	  System.err.println(c,   "JavaScriptRepresentation    Exception:   "    +    c);    	non-compiled	[CE]  	50	None	replace
371	[BUG]  [BUGGY]  AppendHexJavaScriptRepresentation(sb,  Context.getCurrentContext(),  consumer);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  AppendHexJavaScriptRepresentation(sb,  Context.getCurrentContext(),  consumer);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	AppendHexJavaScriptRepresentation(sb,  Context.getCurrentContext(),  consumer);	  Context    rhsContext    =    Context.getCurrentContext();    appendHexJavaScriptRepresentation(rhsContext,    sb,    consumer);    	non-compiled	[CE]  	77	None	replace
372	[BUG]  [BUGGY]  Context  rhsContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(consumer,  sb,  c);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  Context  rhsContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(consumer,  sb,  c);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	Context  rhsContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(consumer,  sb,  c);	  Context    rhsContext    =    Context.getCurrentContext();    appendHexJavaScriptRepresentation(rhsContext,    sb,    consumer);    	non-compiled	[CE]  	77	None	replace
373	[BUG]  [BUGGY]  appendJavaScriptRepresentation(c,  sb,  consumer);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  appendJavaScriptRepresentation(c,  sb,  consumer);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	appendJavaScriptRepresentation(c,  sb,  consumer);	  appendHexJavaScriptRepresentation(c,    rhsContext,    consumer);    	non-compiled	[CE]  	10	None	replace
374	[BUG]  [BUGGY]  appendBooleanRepresentation(c,  rhsContext,  consumer);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  appendBooleanRepresentation(c,  rhsContext,  consumer);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	appendBooleanRepresentation(c,  rhsContext,  consumer);	  appendHexJavaScriptRepresentation(c,    rhsContext,    consumer);    	non-compiled	[CE]  	10	None	replace
375	[BUG]  [BUGGY]  appendConsumerRepresentation(c,  rhsContext,  consumer);  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  appendConsumerRepresentation(c,  rhsContext,  consumer);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	appendConsumerRepresentation(c,  rhsContext,  consumer);	  appendHexJavaScriptRepresentation(c,    rhsContext,    consumer);    	non-compiled	[CE]  	10	None	replace
376	[BUG]  [BUGGY]  appendHexJavaScriptRepresentation(c,  sb,  user);  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  appendHexJavaScriptRepresentation(c,  sb,  user);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	appendHexJavaScriptRepresentation(c,  sb,  user);	  appendHexJavaScriptRepresentation(c,    rhsContext,    consumer);    	non-compiled	[CE]  	10	None	replace
377	[BUG]  [BUGGY]  System.err.println( "JavaScriptRepresentation  error: "  +  sb  + "  of ");  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  System.err.println( "JavaScriptRepresentation  error: "  +  sb  + "  of ");  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	System.err.println( "JavaScriptRepresentation  error: "  +  sb  + "  of ");	  System.err.println(   "JavaScriptRepresentation    error:   "    +    c    +   "    of   ");    	non-compiled	[CE]  	72	None	replace
378	[BUG]  [BUGGY]  System.err.println( "JavaScriptRepresentation  error: "  +  c  + ",  of ");  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  System.err.println( "JavaScriptRepresentation  error: "  +  c  + ",  of ");  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	System.err.println( "JavaScriptRepresentation  error: "  +  c  + ",  of ");	  System.err.println(   "JavaScriptRepresentation    error:   "    +    c    +   "    of   ");    	non-compiled	[CE]  	72	None	replace
379	[BUG]  [BUGGY]  System.err.println( "JavaScriptRepresentation  error: "  +  c  + "  of ",  ex);  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  System.err.println( "JavaScriptRepresentation  error: "  +  c  + "  of ",  ex);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	System.err.println( "JavaScriptRepresentation  error: "  +  c  + "  of ",  ex);	  System.err.println(   "JavaScriptRepresentation    error:   "    +    c    +   "    of   ");    	non-compiled	[CE]  	72	None	replace
380	[BUG]  [BUGGY]  System.err.println( "JavaScriptRepresentation  error: "  +  c  + "  of "+getMessage());  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  System.err.println( "JavaScriptRepresentation  error: "  +  c  + "  of "+getMessage());  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	System.err.println( "JavaScriptRepresentation  error: "  +  c  + "  of "+getMessage());	  System.err.println(   "JavaScriptRepresentation    error:   "    +    c    +   "    of   ");    	non-compiled	[CE]  	72	None	replace
381	[BUG]  [BUGGY]  appendHexJavaScriptRepresentation(c,  sb.toString());  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  appendHexJavaScriptRepresentation(c,  sb.toString());  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	appendHexJavaScriptRepresentation(c,  sb.toString());	  appendHexJavaScriptRepresentation(c,    Context.getCurrentContext());    	non-compiled	[CE]  	61	None	replace
382	[BUG]  [BUGGY]  appendHexJavaScriptRepresentation(c,  sb.toCharArray());  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  appendHexJavaScriptRepresentation(c,  sb.toCharArray());  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	appendHexJavaScriptRepresentation(c,  sb.toCharArray());	  appendHexJavaScriptRepresentation(c,    Context.getCurrentContext());    	non-compiled	[CE]  	61	None	replace
383	[BUG]  [BUGGY]  appendHexJavaScriptRepresentation(c,  Context.getCurrentContext(),  sb);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  appendHexJavaScriptRepresentation(c,  Context.getCurrentContext(),  sb);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	appendHexJavaScriptRepresentation(c,  Context.getCurrentContext(),  sb);	  appendHexJavaScriptRepresentation(c,    Context.getCurrentContext());    	non-compiled	[CE]  	61	None	replace
384	[BUG]  [BUGGY]  appendHexJavaScriptRepresentation(c,  Context.getCodeGenerator());  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  appendHexJavaScriptRepresentation(c,  Context.getCodeGenerator());  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	appendHexJavaScriptRepresentation(c,  Context.getCodeGenerator());	  appendHexJavaScriptRepresentation(c,    Context.getCurrentContext());    	non-compiled	[CE]  	61	None	replace
385	[BUG]  [BUGGY]  System.err.println( "JavaScriptRepresentation  ' "  +  c  + ",'  is  not  supported: "  +  ex);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  System.err.println( "JavaScriptRepresentation  ' "  +  c  + ",'  is  not  supported: "  +  ex);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	System.err.println( "JavaScriptRepresentation  ' "  +  c  + ",'  is  not  supported: "  +  ex);	  System.err.println(   "JavaScriptRepresentation    '   "    +    c    +   "'    is    not    supported:   "    +    ex);    	non-compiled	[CE]  	40	None	replace
386	[BUG]  [BUGGY]  System.err.println( "JavaScriptRepresentation  ' "  +  c  + "'  is  not  supported: "  +  this);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  System.err.println( "JavaScriptRepresentation  ' "  +  c  + "'  is  not  supported: "  +  this);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	System.err.println( "JavaScriptRepresentation  ' "  +  c  + "'  is  not  supported: "  +  this);	  System.err.println(   "JavaScriptRepresentation    '   "    +    c    +   "'    is    not    supported:   "    +    ex);    	non-compiled	[CE]  	40	None	replace
387	[BUG]  [BUGGY]  System.err.println( "JavaScriptRepresentation  ' "  +  c  + "'  is  not  supported: "  +  error);  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  System.err.println( "JavaScriptRepresentation  ' "  +  c  + "'  is  not  supported: "  +  error);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	System.err.println( "JavaScriptRepresentation  ' "  +  c  + "'  is  not  supported: "  +  error);	  System.err.println(   "JavaScriptRepresentation    '   "    +    c    +   "'    is    not    supported:   "    +    ex);    	non-compiled	[CE]  	40	None	replace
388	[BUG]  [BUGGY]  System.err.println( "JavaScriptRepresentation  ' "  +  c  + "'  is  not  supported: "  +  prop);  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  System.err.println( "JavaScriptRepresentation  ' "  +  c  + "'  is  not  supported: "  +  prop);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	System.err.println( "JavaScriptRepresentation  ' "  +  c  + "'  is  not  supported: "  +  prop);	  System.err.println(   "JavaScriptRepresentation    '   "    +    c    +   "'    is    not    supported:   "    +    ex);    	non-compiled	[CE]  	40	None	replace
389	[BUG]  [BUGGY]  System.err.println( "JavaScriptRepresentation  ' "  +  c  + "'  is  not  supported: "  +  JSON_PROPERTY);  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  System.err.println( "JavaScriptRepresentation  ' "  +  c  + "'  is  not  supported: "  +  JSON_PROPERTY);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	System.err.println( "JavaScriptRepresentation  ' "  +  c  + "'  is  not  supported: "  +  JSON_PROPERTY);	  System.err.println(   "JavaScriptRepresentation    '   "    +    c    +   "'    is    not    supported:   "    +    ex);    	non-compiled	[CE]  	40	None	replace
390	[BUG]  [BUGGY]  appendHexJavaScriptRepresentation(sb,  Context.getCurrentContext(),  c,  rhsContext);  [CE]  [FE]                ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  appendHexJavaScriptRepresentation(sb,  Context.getCurrentContext(),  c,  rhsContext);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	appendHexJavaScriptRepresentation(sb,  Context.getCurrentContext(),  c,  rhsContext);	  appendHexJavaScriptRepresentation(sb,    Context.getCurrentContext(),    c);    	non-compiled	[CE]  	66	None	replace
391	[BUG]  [BUGGY]  appendHexJavaScriptRepresentation(sb,  Context.getCurrentContext(),  c,  consumer);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  appendHexJavaScriptRepresentation(sb,  Context.getCurrentContext(),  c,  consumer);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	appendHexJavaScriptRepresentation(sb,  Context.getCurrentContext(),  c,  consumer);	  appendHexJavaScriptRepresentation(sb,    Context.getCurrentContext(),    c);    	non-compiled	[CE]  	66	None	replace
392	[BUG]  [BUGGY]  appendHexJavaScriptRepresentation(sb,  c.getCurrentContext(),  c);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  appendHexJavaScriptRepresentation(sb,  c.getCurrentContext(),  c);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	appendHexJavaScriptRepresentation(sb,  c.getCurrentContext(),  c);	  appendHexJavaScriptRepresentation(sb,    Context.getCurrentContext(),    c);    	non-compiled	[CE]  	66	None	replace
393	[BUG]  [BUGGY]  appendHexJavaScriptRepresentation(sb,  c.getCurrentContext(),  Context.START_OF_EXPR);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  appendHexJavaScriptRepresentation(sb,  c.getCurrentContext(),  Context.START_OF_EXPR);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	appendHexJavaScriptRepresentation(sb,  c.getCurrentContext(),  Context.START_OF_EXPR);	  appendHexJavaScriptRepresentation(sb,    Context.getCurrentContext(),    c);    	non-compiled	[CE]  	66	None	replace
394	[BUG]  [BUGGY]  appendHexJavaScriptRepresentation(sb,  Context.getCodeGenerator(),  c);  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  appendHexJavaScriptRepresentation(sb,  Context.getCodeGenerator(),  c);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	appendHexJavaScriptRepresentation(sb,  Context.getCodeGenerator(),  c);	  appendHexJavaScriptRepresentation(sb,    Context.getCurrentContext(),    c);    	non-compiled	[CE]  	66	None	replace
395	[BUG]  [BUGGY]  System.err.println( "JavaScriptRepresentation  Exception: "  +  String.valueOf(c));  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  System.err.println( "JavaScriptRepresentation  Exception: "  +  String.valueOf(c));  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	System.err.println( "JavaScriptRepresentation  Exception: "  +  String.valueOf(c));	  System.err.println(   "JavaScriptRepresentation    Exception:   "    +    char);    	non-compiled	[CE]  	107	None	replace
396	[BUG]  [BUGGY]  appendBooleanRepresentation(c,  rhsContext);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  appendBooleanRepresentation(c,  rhsContext);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	appendBooleanRepresentation(c,  rhsContext);	  appendHexJavaScriptRepresentation(c,    rhsContext);    	non-compiled	[CE]  	63	None	replace
397	[BUG]  [BUGGY]  appendHexJavaScriptRepresentation(sb,  rhsContext);  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  appendHexJavaScriptRepresentation(sb,  rhsContext);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	appendHexJavaScriptRepresentation(sb,  rhsContext);	  appendHexJavaScriptRepresentation(c,    rhsContext);    	non-compiled	[CE]  	63	None	replace
398	[BUG]  [BUGGY]  appendRhsContext.appendHexJavaScriptRepresentation(c,  rhsContext);  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  appendRhsContext.appendHexJavaScriptRepresentation(c,  rhsContext);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	appendRhsContext.appendHexJavaScriptRepresentation(c,  rhsContext);	  appendHexJavaScriptRepresentation(c,    rhsContext);    	non-compiled	[CE]  	63	None	replace
399	[BUG]  [BUGGY]  appendDelimiterRepresentation(c,  rhsContext);  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  appendDelimiterRepresentation(c,  rhsContext);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	appendDelimiterRepresentation(c,  rhsContext);	  appendHexJavaScriptRepresentation(c,    rhsContext);    	non-compiled	[CE]  	63	None	replace
400	[BUG]  [BUGGY]  Context  lhsContext  =  Context.current();  appendHexJavaScriptRepresentation(sb,  c);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  Context  lhsContext  =  Context.current();  appendHexJavaScriptRepresentation(sb,  c);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	Context  lhsContext  =  Context.current();  appendHexJavaScriptRepresentation(sb,  c);	  Context    lhsContext    =    Context.currentContext();    appendHexJavaScriptRepresentation(sb,    c);    	non-compiled	[CE]  	35	None	replace
401	[BUG]  [BUGGY]  System.err.println(c  + "JavaScriptRepresentation  error: "  +  sb.getMessage());  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  System.err.println(c  + "JavaScriptRepresentation  error: "  +  sb.getMessage());  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	System.err.println(c  + "JavaScriptRepresentation  error: "  +  sb.getMessage());	  System.err.println(   "JavaScriptRepresentation    error:   "    +    sb.getMessage());    	non-compiled	[CE]  	54	None	replace
402	[BUG]  [BUGGY]  System.err.println( "JavaScriptRepresentation  error: "  +  char.getMessage());  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  System.err.println( "JavaScriptRepresentation  error: "  +  char.getMessage());  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	System.err.println( "JavaScriptRepresentation  error: "  +  char.getMessage());	  System.err.println(   "JavaScriptRepresentation    error:   "    +    sb.getMessage());    	non-compiled	[CE]  	54	None	replace
403	[BUG]  [BUGGY]  System.err.println(c  + "JavaScriptRepresentation  ' "  +  sb  + "'  is  not  supported.   ");  [CE]  [FE]              ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  System.err.println(c  + "JavaScriptRepresentation  ' "  +  sb  + "'  is  not  supported.   ");  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	System.err.println(c  + "JavaScriptRepresentation  ' "  +  sb  + "'  is  not  supported.   ");	  System.err.println(sb    +   "JavaScriptRepresentation    '   "    +    c    +   "'    is    not    supported.   ");    	non-compiled	[CE]  	111	None	replace
404	[BUG]  [BUGGY]  Context  currentContext  =  context.getCurrentContext();  appendHexJavaScriptRepresentation(currentContext,  sb,  c);  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  Context  currentContext  =  context.getCurrentContext();  appendHexJavaScriptRepresentation(currentContext,  sb,  c);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	Context  currentContext  =  context.getCurrentContext();  appendHexJavaScriptRepresentation(currentContext,  sb,  c);	  Context    currentContext    =    Context.getCurrentContext();    appendHexJavaScriptRepresentation(currentContext,    c,    sb);    	non-compiled	[CE]  	95	None	replace
405	[BUG]  [BUGGY]  Context  currentContext  =  context.getCurrentContext();  appendHexJavaScriptRepresentation(currentContext,  c,  sb);  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  Context  currentContext  =  context.getCurrentContext();  appendHexJavaScriptRepresentation(currentContext,  c,  sb);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	Context  currentContext  =  context.getCurrentContext();  appendHexJavaScriptRepresentation(currentContext,  c,  sb);	  Context    currentContext    =    Context.getCurrentContext();    appendHexJavaScriptRepresentation(currentContext,    c,    sb);    	non-compiled	[CE]  	95	None	replace
406	[BUG]  [BUGGY]  appendHexJavaScriptRepresentation(context,  c,  sb);  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  appendHexJavaScriptRepresentation(context,  c,  sb);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	appendHexJavaScriptRepresentation(context,  c,  sb);	  Context    currentContext    =    Context.getCurrentContext();    appendHexJavaScriptRepresentation(currentContext,    c,    sb);    	non-compiled	[CE]  	95	None	replace
407	[BUG]  [BUGGY]  System.err.println( "JavaScriptRepresentation  Exception: ",  ex);  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  System.err.println( "JavaScriptRepresentation  Exception: ",  ex);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	System.err.println( "JavaScriptRepresentation  Exception: ",  ex);	  System.err.println(   "JavaScriptRepresentation    Exception:   "    +    ex);    	non-compiled	[CE]  	49	None	replace
408	[BUG]  [BUGGY]  appendDelimiterRepresentation(sb,  c,  IN_FOR_INIT_CLAUSE);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  appendDelimiterRepresentation(sb,  c,  IN_FOR_INIT_CLAUSE);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	appendDelimiterRepresentation(sb,  c,  IN_FOR_INIT_CLAUSE);	  appendDelimiterRepresentation(sb,    c);    	non-compiled	[CE]  	4	None	replace
409	[BUG]  [BUGGY]  appendBooleanRepresentation(sb,  c,  HEX_CHARS);  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  appendBooleanRepresentation(sb,  c,  HEX_CHARS);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	appendBooleanRepresentation(sb,  c,  HEX_CHARS);	  appendBooleanRepresentation(sb,    c,    consumer);    	non-compiled	[CE]  	29	None	replace
410	[BUG]  [BUGGY]  appendBooleanRepresentation(sb,  c,  BLOCK_INIT_CLAUSE);  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  appendBooleanRepresentation(sb,  c,  BLOCK_INIT_CLAUSE);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	appendBooleanRepresentation(sb,  c,  BLOCK_INIT_CLAUSE);	  appendBooleanRepresentation(sb,    c,    consumer);    	non-compiled	[CE]  	29	None	replace
411	[BUG]  [BUGGY]  appendHexJavaScriptRepresentation(sb,  Context.getCodeInstantiator());  [CE]  [FE]            ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  appendHexJavaScriptRepresentation(sb,  Context.getCodeInstantiator());  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	appendHexJavaScriptRepresentation(sb,  Context.getCodeInstantiator());	  appendHexJavaScriptRepresentation(sb,    Context.getCurrentContext());    	non-compiled	[CE]  	64	None	replace
412	[BUG]  [BUGGY]  sb.append( "#n ");  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  sb.append( "#n ");  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	sb.append( "#n ");	  sb.append(   "n   ");    	non-compiled	[CE]  	74	None	replace
413	[BUG]  [BUGGY]  System.err.println( "JavaScriptRepresentation  error: "  +  c,  sb);  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  System.err.println( "JavaScriptRepresentation  error: "  +  c,  sb);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	System.err.println( "JavaScriptRepresentation  error: "  +  c,  sb);	  System.err.println(   "JavaScriptRepresentation    error:   "    +    char    c);    	non-compiled	[CE]  	23	None	replace
414	[BUG]  [BUGGY]  Context  rhsContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(rhsContext,  consumer,  c,  sb);  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  Context  rhsContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(rhsContext,  consumer,  c,  sb);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	Context  rhsContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(rhsContext,  consumer,  c,  sb);	  Context    rhsContext    =    Context.getCurrentContext();    appendHexJavaScriptRepresentation(rhsContext,    sb,    c,    consumer);    	non-compiled	[CE]  	13	None	replace
415	[BUG]  [BUGGY]  AppendJavaScriptRepresentation(sb,  c);  [CE]  [FE]              ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  AppendJavaScriptRepresentation(sb,  c);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	AppendJavaScriptRepresentation(sb,  c);	  AppendHexJavaScriptRepresentation(c,    sb);    	non-compiled	[CE]  	16	None	replace
416	[BUG]  [BUGGY]  AppendJavaScriptRepresentation(c,  sb);  [CE]  [FE]                ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  AppendJavaScriptRepresentation(c,  sb);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	AppendJavaScriptRepresentation(c,  sb);	  AppendHexJavaScriptRepresentation(c,    sb);    	non-compiled	[CE]  	16	None	replace
417	[BUG]  [BUGGY]  Context  lhsContext  =  getCurrentContext();  currentContext.appendHexJavaScriptRepresentation(sb,  c);  [CE]  [FE]                ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  Context  lhsContext  =  getCurrentContext();  currentContext.appendHexJavaScriptRepresentation(sb,  c);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	Context  lhsContext  =  getCurrentContext();  currentContext.appendHexJavaScriptRepresentation(sb,  c);	  Context    lhsContext    =    Context.getCurrentContext();    currentContext.appendHexJavaScriptRepresentation(sb,    c);    	non-compiled	[CE]  	108	None	replace
418	[BUG]  [BUGGY]  appendHexJavaScriptRepresentation(c,  sb,  context);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  appendHexJavaScriptRepresentation(c,  sb,  context);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	appendHexJavaScriptRepresentation(c,  sb,  context);	  Context    currentContext    =    Context.getCurrentContext();    appendHexJavaScriptRepresentation(currentContext,    sb,    c);    	non-compiled	[CE]  	85	None	replace
419	[BUG]  [BUGGY]  System.err.println( "JavaScriptRepresentation  ' "  +  c  + "'  is  not  supported: "  +  sb);  [CE]  [FE]              ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  System.err.println( "JavaScriptRepresentation  ' "  +  c  + "'  is  not  supported: "  +  sb);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	System.err.println( "JavaScriptRepresentation  ' "  +  c  + "'  is  not  supported: "  +  sb);	  System.err.println(   "JavaScriptRepresentation    '   "    +    c    +   ",'    is    not    supported.   ");    	non-compiled	[CE]  	37	None	replace
420	[BUG]  [BUGGY]  Context  rhsContext  =  context.getCurrentContext();  appendHexJavaScriptRepresentation(c,  sb,  c);  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  Context  rhsContext  =  context.getCurrentContext();  appendHexJavaScriptRepresentation(c,  sb,  c);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	Context  rhsContext  =  context.getCurrentContext();  appendHexJavaScriptRepresentation(c,  sb,  c);	  Context    rhsContext    =    Context.getCurrentContext();    appendHexJavaScriptRepresentation(c,    sb,    c);    	non-compiled	[CE]  	8	None	replace
421	[BUG]  [BUGGY]  appendDelimiter(sb,  c,  DEFAULT_EXPR_RESULT);  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  appendDelimiter(sb,  c,  DEFAULT_EXPR_RESULT);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	appendDelimiter(sb,  c,  DEFAULT_EXPR_RESULT);	  appendDelimiter(sb,    c);    	non-compiled	[CE]  	73	None	replace
422	[BUG]  [BUGGY]  appendHexJavaScriptRepresentation(c,  c,  sb);  [CE]  [FE]                ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  appendHexJavaScriptRepresentation(c,  c,  sb);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	appendHexJavaScriptRepresentation(c,  c,  sb);	  appendHexJavaScriptRepresentation(sb,    c,    c);    	non-compiled	[CE]  	3	None	replace
423	[BUG]  [BUGGY]  System.err.println( "JavaScriptRepresentation  ' "  +  c  + "'  is  not  supported: "  +  user);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  System.err.println( "JavaScriptRepresentation  ' "  +  c  + "'  is  not  supported: "  +  user);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	System.err.println( "JavaScriptRepresentation  ' "  +  c  + "'  is  not  supported: "  +  user);	  System.err.println(   "JavaScriptRepresentation    '   "    +    c    +   "'    is    not    supported:   "    +    ex);    	non-compiled	[CE]  	40	None	replace
424	[BUG]  [BUGGY]  System.err.println( "JavaScriptRepresentation  ' "  +  c  + "'  is  not  supported: "  +  source);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  System.err.println( "JavaScriptRepresentation  ' "  +  c  + "'  is  not  supported: "  +  source);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	System.err.println( "JavaScriptRepresentation  ' "  +  c  + "'  is  not  supported: "  +  source);	  System.err.println(   "JavaScriptRepresentation    '   "    +    c    +   "'    is    not    supported:   "    +    ex);    	non-compiled	[CE]  	40	None	replace
425	[BUG]  [BUGGY]  System.err.println( "JavaScriptRepresentation  ' "  +  c  + "'  is  not  supported: "  +  JsonEncoder.getInstance());  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  System.err.println( "JavaScriptRepresentation  ' "  +  c  + "'  is  not  supported: "  +  JsonEncoder.getInstance());  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	System.err.println( "JavaScriptRepresentation  ' "  +  c  + "'  is  not  supported: "  +  JsonEncoder.getInstance());	  System.err.println(   "JavaScriptRepresentation    '   "    +    c    +   "'    is    not    supported:   "    +    ex);    	non-compiled	[CE]  	40	None	replace
426	[BUG]  [BUGGY]  Context  rhsContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(consumer,  c,  rhsContext,  sb);  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  Context  rhsContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(consumer,  c,  rhsContext,  sb);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	Context  rhsContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(consumer,  c,  rhsContext,  sb);	  Context    rhsContext    =    Context.getCurrentContext();    appendHexJavaScriptRepresentation(consumer,    c,    rhsContext);    	non-compiled	[CE]  	79	None	replace
427	[BUG]  [BUGGY]  Context  rhsContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(consumer,  c,  rhsContext,  false);  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  Context  rhsContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(consumer,  c,  rhsContext,  false);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	Context  rhsContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(consumer,  c,  rhsContext,  false);	  Context    rhsContext    =    Context.getCurrentContext();    appendHexJavaScriptRepresentation(consumer,    c,    rhsContext);    	non-compiled	[CE]  	79	None	replace
428	[BUG]  [BUGGY]  sb.append('  }  ',  c);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  sb.append('  }  ',  c);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	sb.append('  }  ',  c);	  sb.append('    }    ');    	non-compiled	[CE]  	90	None	replace
429	[BUG]  [BUGGY]  sb.append('  }'+  c);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  sb.append('  }'+  c);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	sb.append('  }'+  c);	  sb.append('    }    ');    	non-compiled	[CE]  	90	None	replace
430	[BUG]  [BUGGY]  sb.append('  }  ').append(c);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  sb.append('  }  ').append(c);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	sb.append('  }  ').append(c);	  sb.append('    }    ');    	non-compiled	[CE]  	90	None	replace
431	[BUG]  [BUGGY]  sb.append('  }  ')+  1;  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  sb.append('  }  ')+  1;  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	sb.append('  }  ')+  1;	  sb.append('    }    ');    	non-compiled	[CE]  	90	None	replace
432	[BUG]  [BUGGY]  sb.append( "  }  n ");  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  sb.append( "  }  n ");  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	sb.append( "  }  n ");	  sb.append('    }    ');    	non-compiled	[CE]  	90	None	replace
433	[BUG]  [BUGGY]  appendBooleanRepresentation(c,  sb,  null);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  appendBooleanRepresentation(c,  sb,  null);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	appendBooleanRepresentation(c,  sb,  null);	  appendBooleanRepresentation(c,    sb);    	non-compiled	[CE]  	26	None	replace
434	[BUG]  [BUGGY]  AppendHexJavaScriptRepresentation(sb,  Context.currentContext());  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  AppendHexJavaScriptRepresentation(sb,  Context.currentContext());  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	AppendHexJavaScriptRepresentation(sb,  Context.currentContext());	  AppendHexJavaScriptRepresentation(sb,    Context.getCurrentContext());    	non-compiled	[CE]  	67	None	replace
435	[BUG]  [BUGGY]  Context  lhsContext  =  Context.getCurrentContext();  codeGenerator.appendHexJavaScriptRepresentation(c,  sb,  rhsContext);  [CE]  [FE]                ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  Context  lhsContext  =  Context.getCurrentContext();  codeGenerator.appendHexJavaScriptRepresentation(c,  sb,  rhsContext);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	Context  lhsContext  =  Context.getCurrentContext();  codeGenerator.appendHexJavaScriptRepresentation(c,  sb,  rhsContext);	  Context    lhsContext    =    Context.getCurrentContext();    codeGenerator.appendHexJavaScriptRepresentation(c,    sb);    	non-compiled	[CE]  	115	None	replace
436	[BUG]  [BUGGY]  Context  lhsContext  =  Context.currentContext();  codeGenerator.appendHexJavaScriptRepresentation(c,  sb);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  Context  lhsContext  =  Context.currentContext();  codeGenerator.appendHexJavaScriptRepresentation(c,  sb);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	Context  lhsContext  =  Context.currentContext();  codeGenerator.appendHexJavaScriptRepresentation(c,  sb);	  Context    lhsContext    =    Context.getCurrentContext();    codeGenerator.appendHexJavaScriptRepresentation(c,    sb);    	non-compiled	[CE]  	115	None	replace
437	[BUG]  [BUGGY]  Context  currentContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(currentContext,  c,  consumer,  sb);  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  Context  currentContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(currentContext,  c,  consumer,  sb);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	Context  currentContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(currentContext,  c,  consumer,  sb);	  Context    rhsContext    =    Context.getCurrentContext();    appendHexJavaScriptRepresentation(rhsContext,    c,    consumer,    sb);    	non-compiled	[CE]  	15	None	replace
438	[BUG]  [BUGGY]  Context  rhsContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(c,  builder,  rhsContext);  [CE]  [FE]            ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  Context  rhsContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(c,  builder,  rhsContext);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	Context  rhsContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(c,  builder,  rhsContext);	  Context    rhsContext    =    Context.getCurrentContext();    appendHexJavaScriptRepresentation(rhsContext,    builder,    c);    	non-compiled	[CE]  	82	None	replace
439	[BUG]  [BUGGY]  Context  currentContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(currentContext,  builder,  c);  [CE]  [FE]              ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  Context  currentContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(currentContext,  builder,  c);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	Context  currentContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(currentContext,  builder,  c);	  Context    rhsContext    =    Context.getCurrentContext();    appendHexJavaScriptRepresentation(rhsContext,    builder,    c);    	non-compiled	[CE]  	82	None	replace
440	[BUG]  [BUGGY]  Context  rhsContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(rhsContext,  c,  builder);  [CE]  [FE]                ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  Context  rhsContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(rhsContext,  c,  builder);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	Context  rhsContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(rhsContext,  c,  builder);	  Context    rhsContext    =    Context.getCurrentContext();    appendHexJavaScriptRepresentation(rhsContext,    builder,    c);    	non-compiled	[CE]  	82	None	replace
441	[BUG]  [BUGGY]  appendHexJavaScriptRepresentation(c,  sb,  this.consume);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  appendHexJavaScriptRepresentation(c,  sb,  this.consume);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	appendHexJavaScriptRepresentation(c,  sb,  this.consume);	  appendHexJavaScriptRepresentation(c,    sb,    message);    	non-compiled	[CE]  	59	None	replace
442	[BUG]  [BUGGY]  appendHexJavaScriptRepresentation(sb,  c,  Context.getCodeConsumer());  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  appendHexJavaScriptRepresentation(sb,  c,  Context.getCodeConsumer());  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	appendHexJavaScriptRepresentation(sb,  c,  Context.getCodeConsumer());	  appendHexJavaScriptRepresentation(sb,    c,    Context.getCurrentContext());    	non-compiled	[CE]  	5	None	replace
443	[BUG]  [BUGGY]  appendHexJavaScriptRepresentation(sb,  c,  Context.getCodeInstantiator());  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  appendHexJavaScriptRepresentation(sb,  c,  Context.getCodeInstantiator());  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	appendHexJavaScriptRepresentation(sb,  c,  Context.getCodeInstantiator());	  appendHexJavaScriptRepresentation(sb,    c,    Context.getCurrentContext());    	non-compiled	[CE]  	5	None	replace
444	[BUG]  [BUGGY]  appendHexJavaScriptRepresentation(sb,  c,  Context.getCodegen());  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  appendHexJavaScriptRepresentation(sb,  c,  Context.getCodegen());  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	appendHexJavaScriptRepresentation(sb,  c,  Context.getCodegen());	  appendHexJavaScriptRepresentation(sb,    c,    Context.getCurrentContext());    	non-compiled	[CE]  	5	None	replace
445	[BUG]  [BUGGY]  System.err.println(c  + "JavaScriptRepresentation  Exception: "  +  char);  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  System.err.println(c  + "JavaScriptRepresentation  Exception: "  +  char);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	System.err.println(c  + "JavaScriptRepresentation  Exception: "  +  char);	  System.err.println(   "JavaScriptRepresentation    Exception:   "    +    char);    	non-compiled	[CE]  	107	None	replace
446	[BUG]  [BUGGY]  System.err.println(c, "JavaScriptRepresentation  Exception: "  +  char);  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  System.err.println(c, "JavaScriptRepresentation  Exception: "  +  char);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	System.err.println(c, "JavaScriptRepresentation  Exception: "  +  char);	  System.err.println(   "JavaScriptRepresentation    Exception:   "    +    char);    	non-compiled	[CE]  	107	None	replace
447	[BUG]  [BUGGY]  System.err.println( "JavaScriptRepresentation  Exception: ",  c);  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  System.err.println( "JavaScriptRepresentation  Exception: ",  c);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	System.err.println( "JavaScriptRepresentation  Exception: ",  c);	  System.err.println(   "JavaScriptRepresentation    Exception:   "    +    char);    	non-compiled	[CE]  	107	None	replace
448	[BUG]  [BUGGY]  appendJavaScriptRepresentation(c,  Context.getCurrentContext());  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  appendJavaScriptRepresentation(c,  Context.getCurrentContext());  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	appendJavaScriptRepresentation(c,  Context.getCurrentContext());	  appendHexJavaScriptRepresentation(c,    Context.getCurrentContext());    	non-compiled	[CE]  	61	None	replace
449	[BUG]  [BUGGY]  appendBooleanRepresentation(c,  Context.getCurrentContext());  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  appendBooleanRepresentation(c,  Context.getCurrentContext());  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	appendBooleanRepresentation(c,  Context.getCurrentContext());	  appendHexJavaScriptRepresentation(c,    Context.getCurrentContext());    	non-compiled	[CE]  	61	None	replace
450	[BUG]  [BUGGY]  appendJavaScriptRepresentation(c,  sb,  Context.getCurrentContext());  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  appendJavaScriptRepresentation(c,  sb,  Context.getCurrentContext());  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	appendJavaScriptRepresentation(c,  sb,  Context.getCurrentContext());	  appendHexJavaScriptRepresentation(c,    Context.getCurrentContext());    	non-compiled	[CE]  	61	None	replace
451	[BUG]  [BUGGY]  System.err.println(c  + "JAVAScriptRepresentation  ' "  +  c  + "'  is  not  supported. ");  [CE]  [FE]              ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  System.err.println(c  + "JAVAScriptRepresentation  ' "  +  c  + "'  is  not  supported. ");  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	System.err.println(c  + "JAVAScriptRepresentation  ' "  +  c  + "'  is  not  supported. ");	  System.err.println(c    +   "JavaScriptRepresentation    '   "    +    c    +   "'    is    not    supported.   ");    	non-compiled	[CE]  	97	None	replace
452	[BUG]  [BUGGY]  Context  rhsContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(c,  builder,  rhsContext,  sb);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  Context  rhsContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(c,  builder,  rhsContext,  sb);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	Context  rhsContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(c,  builder,  rhsContext,  sb);	  Context    rhsContext    =    Context.getCurrentContext();    appendHexJavaScriptRepresentation(rhsContext,    builder,    c,    sb);    	non-compiled	[CE]  	94	None	replace
453	[BUG]  [BUGGY]  Context  currentContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(currentContext,  builder,  c,  sb);  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  Context  currentContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(currentContext,  builder,  c,  sb);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	Context  currentContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(currentContext,  builder,  c,  sb);	  Context    rhsContext    =    Context.getCurrentContext();    appendHexJavaScriptRepresentation(rhsContext,    builder,    c,    sb);    	non-compiled	[CE]  	94	None	replace
454	[BUG]  [BUGGY]  Context  rhsContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(rhsContext,  builder,  c,  sb,  lhsContext);  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  Context  rhsContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(rhsContext,  builder,  c,  sb,  lhsContext);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	Context  rhsContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(rhsContext,  builder,  c,  sb,  lhsContext);	  Context    rhsContext    =    Context.getCurrentContext();    appendHexJavaScriptRepresentation(rhsContext,    builder,    c,    sb);    	non-compiled	[CE]  	94	None	replace
455	[BUG]  [BUGGY]  System.err.println(c  + "JavaScriptRepresentation  ' "  +  c  + "'  is  not  supported  by ");  [CE]  [FE]                ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  System.err.println(c  + "JavaScriptRepresentation  ' "  +  c  + "'  is  not  supported  by ");  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	System.err.println(c  + "JavaScriptRepresentation  ' "  +  c  + "'  is  not  supported  by ");	  System.err.println(   "JavaScriptRepresentation    '   "    +    c    +   "'    is    not    supported    by   ");    	non-compiled	[CE]  	98	None	replace
456	[BUG]  [BUGGY]  System.err.println( "JavaScriptRepresentation  error: "  +  c  + "  at  index ");  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  System.err.println( "JavaScriptRepresentation  error: "  +  c  + "  at  index ");  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	System.err.println( "JavaScriptRepresentation  error: "  +  c  + "  at  index ");	  System.err.println(   "JavaScriptRepresentation    error:   "    +    c    +   "n   ");    	non-compiled	[CE]  	70	None	replace
457	[BUG]  [BUGGY]  System.err.println( "JavaScriptRepresentation  error: "  +  c  + "  on  line ");  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  System.err.println( "JavaScriptRepresentation  error: "  +  c  + "  on  line ");  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	System.err.println( "JavaScriptRepresentation  error: "  +  c  + "  on  line ");	  System.err.println(   "JavaScriptRepresentation    error:   "    +    c    +   "n   ");    	non-compiled	[CE]  	70	None	replace
458	[BUG]  [BUGGY]  System.err.println( "JavaScriptRepresentation  error: "  +  c  + "  on  the  same  line. ");  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  System.err.println( "JavaScriptRepresentation  error: "  +  c  + "  on  the  same  line. ");  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	System.err.println( "JavaScriptRepresentation  error: "  +  c  + "  on  the  same  line. ");	  System.err.println(   "JavaScriptRepresentation    error:   "    +    c    +   "n   ");    	non-compiled	[CE]  	70	None	replace
459	[BUG]  [BUGGY]  System.err.println( "JavaScriptRepresentation  error: "  +  c  + "  bytes  are  not  supported ");  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  System.err.println( "JavaScriptRepresentation  error: "  +  c  + "  bytes  are  not  supported ");  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	System.err.println( "JavaScriptRepresentation  error: "  +  c  + "  bytes  are  not  supported ");	  System.err.println(   "JavaScriptRepresentation    error:   "    +    c    +   "n   ");    	non-compiled	[CE]  	70	None	replace
460	[BUG]  [BUGGY]  System.err.println( "JavaScriptRepresentation  error: "  +  c  + "  at  endpoints: "  +  ex.getMessage());  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  System.err.println( "JavaScriptRepresentation  error: "  +  c  + "  at  endpoints: "  +  ex.getMessage());  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	System.err.println( "JavaScriptRepresentation  error: "  +  c  + "  at  endpoints: "  +  ex.getMessage());	  System.err.println(   "JavaScriptRepresentation    error:   "    +    c    +   "n   ");    	non-compiled	[CE]  	70	None	replace
461	[BUG]  [BUGGY]  System.err.println( "JavaScriptRepresentation  error: "  +  c  + "  at  end  of  the  line ");  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  System.err.println( "JavaScriptRepresentation  error: "  +  c  + "  at  end  of  the  line ");  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	System.err.println( "JavaScriptRepresentation  error: "  +  c  + "  at  end  of  the  line ");	  System.err.println(   "JavaScriptRepresentation    error:   "    +    c    +   "n   ");    	non-compiled	[CE]  	70	None	replace
462	[BUG]  [BUGGY]  appendHexJavaScriptRepresentation(sb,  Context.currentContext(),  c);  [CE]  [FE]                ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  appendHexJavaScriptRepresentation(sb,  Context.currentContext(),  c);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	appendHexJavaScriptRepresentation(sb,  Context.currentContext(),  c);	  appendHexJavaScriptRepresentation(sb,    Context.getCurrentContext(),    c);    	non-compiled	[CE]  	66	None	replace
463	[BUG]  [BUGGY]  appendJavaScriptRepresentation(c,  Context.getCurrentContext(),  sb);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  appendJavaScriptRepresentation(c,  Context.getCurrentContext(),  sb);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	appendJavaScriptRepresentation(c,  Context.getCurrentContext(),  sb);	  appendHexJavaScriptRepresentation(sb,    Context.getCurrentContext(),    c);    	non-compiled	[CE]  	66	None	replace
464	[BUG]  [BUGGY]  Context  rhsContext  =  context.getCurrentContext();  appendHexJavaScriptRepresentation(rhsContext,  char,  c);  [CE]  [FE]                ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  Context  rhsContext  =  context.getCurrentContext();  appendHexJavaScriptRepresentation(rhsContext,  char,  c);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	Context  rhsContext  =  context.getCurrentContext();  appendHexJavaScriptRepresentation(rhsContext,  char,  c);	  Context    rhsContext    =    Context.getCurrentContext();    appendHexJavaScriptRepresentation(rhsContext,    char,    c);    	non-compiled	[CE]  	84	None	replace
465	[BUG]  [BUGGY]  Context  currentContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(currentContext,  char,  c);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  Context  currentContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(currentContext,  char,  c);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	Context  currentContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(currentContext,  char,  c);	  Context    rhsContext    =    Context.getCurrentContext();    appendHexJavaScriptRepresentation(rhsContext,    char,    c);    	non-compiled	[CE]  	84	None	replace
466	[BUG]  [BUGGY]  System.err.println(c  + "JavaScriptRepresentation  Exception: "  +  c  + "  of ");  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  System.err.println(c  + "JavaScriptRepresentation  Exception: "  +  c  + "  of ");  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	System.err.println(c  + "JavaScriptRepresentation  Exception: "  +  c  + "  of ");	  System.err.println(   "JavaScriptRepresentation    Exception:   "    +    c    +   "    of   ");    	non-compiled	[CE]  	92	None	replace
467	[BUG]  [BUGGY]  System.err.println( "JavaScriptRepresentation  Exception: "  +  c  + "  for ");  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  System.err.println( "JavaScriptRepresentation  Exception: "  +  c  + "  for ");  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	System.err.println( "JavaScriptRepresentation  Exception: "  +  c  + "  for ");	  System.err.println(   "JavaScriptRepresentation    Exception:   "    +    c    +   "    of   ");    	non-compiled	[CE]  	92	None	replace
468	[BUG]  [BUGGY]  System.err.println( "JavaScriptRepresentation  Exception: "  +  c  + "  from   ");  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  System.err.println( "JavaScriptRepresentation  Exception: "  +  c  + "  from   ");  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	System.err.println( "JavaScriptRepresentation  Exception: "  +  c  + "  from   ");	  System.err.println(   "JavaScriptRepresentation    Exception:   "    +    c    +   "    of   ");    	non-compiled	[CE]  	92	None	replace
469	[BUG]  [BUGGY]  sb.append('N'  +  c);  [CE]  [FE]                ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  sb.append('N'  +  c);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	sb.append('N'  +  c);	  sb.append('N');    	non-compiled	[CE]  	57	None	replace
470	[BUG]  [BUGGY]  sb.append('N'  ||  c  ==  ':');  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  sb.append('N'  ||  c  ==  ':');  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	sb.append('N'  ||  c  ==  ':');	  sb.append('N');    	non-compiled	[CE]  	57	None	replace
471	[BUG]  [BUGGY]  sb.append('N'  ||  c  ==  '+');  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  sb.append('N'  ||  c  ==  '+');  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	sb.append('N'  ||  c  ==  '+');	  sb.append('N');    	non-compiled	[CE]  	57	None	replace
472	[BUG]  [BUGGY]  sb.append( ",n ",  c);  [CE]  [FE]              ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  sb.append( ",n ",  c);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	sb.append( ",n ",  c);	  sb.append(   ",   ");    	non-compiled	[CE]  	88	None	replace
473	[BUG]  [BUGGY]  System.err.println( "JavaScriptRepresentation  error: "  +  hex,  ex);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  System.err.println( "JavaScriptRepresentation  error: "  +  hex,  ex);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	System.err.println( "JavaScriptRepresentation  error: "  +  hex,  ex);	  System.err.println(   "JavaScriptRepresentation    error:   "    +    c,    ex);    	non-compiled	[CE]  	21	None	replace
474	[BUG]  [BUGGY]  Context  lhsContext  =  Context.getCurrentContext(null);  [CE]  [FE]                ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  Context  lhsContext  =  Context.getCurrentContext(null);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	Context  lhsContext  =  Context.getCurrentContext(null);	  Context    lhsContext    =    Context.getCurrentContext();    	non-compiled	[CE]  	68	None	replace
475	[BUG]  [BUGGY]  Context  lhsContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(lhsContext,  c,  sb);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  Context  lhsContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(lhsContext,  c,  sb);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	Context  lhsContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(lhsContext,  c,  sb);	  Context    lhsContext    =    Context.getCurrentContext();    appendHexJavaScriptRepresentation(lhsContext,    c);    	non-compiled	[CE]  	93	None	replace
476	[BUG]  [BUGGY]  System.err.println(c  + "JavaScriptRepresentation  error: "  +  c.getMessage());  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  System.err.println(c  + "JavaScriptRepresentation  error: "  +  c.getMessage());  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	System.err.println(c  + "JavaScriptRepresentation  error: "  +  c.getMessage());	  System.err.println(   "JavaScriptRepresentation    error:   "    +    c.getMessage());    	non-compiled	[CE]  	51	None	replace
477	[BUG]  [BUGGY]  sb.append( ";null ",  c);  [CE]  [FE]                ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  sb.append( ";null ",  c);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	sb.append( ";null ",  c);	  sb.append(   ";n   ");    	non-compiled	[CE]  	89	None	replace
478	[BUG]  [BUGGY]  sb.append( ";n: ");  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  sb.append( ";n: ");  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	sb.append( ";n: ");	  sb.append(   ";n   ");    	non-compiled	[CE]  	89	None	replace
479	[BUG]  [BUGGY]  Context  rhsContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(rhsContext,  builder,  sb,  c);  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  Context  rhsContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(rhsContext,  builder,  sb,  c);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	Context  rhsContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(rhsContext,  builder,  sb,  c);	  Context    rhsContext    =    Context.getCurrentContext();    appendHexJavaScriptRepresentation(rhsContext,    c,    sb,    c);    	non-compiled	[CE]  	7	None	replace
480	[BUG]  [BUGGY]  Context  rhsContext  =  getCurrentContext();  appendHexJavaScriptRepresentation(rhsContext,  c,  sb,  c);  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  Context  rhsContext  =  getCurrentContext();  appendHexJavaScriptRepresentation(rhsContext,  c,  sb,  c);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	Context  rhsContext  =  getCurrentContext();  appendHexJavaScriptRepresentation(rhsContext,  c,  sb,  c);	  Context    rhsContext    =    Context.getCurrentContext();    appendHexJavaScriptRepresentation(rhsContext,    c,    sb,    c);    	non-compiled	[CE]  	7	None	replace
481	[BUG]  [BUGGY]  Context  rhsContext  =  Context.getCurrentContext(null);  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  Context  rhsContext  =  Context.getCurrentContext(null);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	Context  rhsContext  =  Context.getCurrentContext(null);	  Context    rhsContext    =    Context.getCurrentContext();    	non-compiled	[CE]  	80	None	replace
482	[BUG]  [BUGGY]  Context  currentContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(c,  sb);  [CE]  [FE]                ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  Context  currentContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(c,  sb);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	Context  currentContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(c,  sb);	  Context    rhsContext    =    Context.getCurrentContext();    appendHexJavaScriptRepresentation(c,    sb);    	non-compiled	[CE]  	17	None	replace
483	[BUG]  [BUGGY]  System.err.println( "JavaScriptRepresentation  Exception: "  +  hex,  ex);  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  System.err.println( "JavaScriptRepresentation  Exception: "  +  hex,  ex);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	System.err.println( "JavaScriptRepresentation  Exception: "  +  hex,  ex);	  System.err.println(   "JavaScriptRepresentation    Exception:   "    +    c,    ex);    	non-compiled	[CE]  	46	None	replace
484	[BUG]  [BUGGY]  System.err.println( "JavaScriptRepresentation  Exception: "  +  char,  ex);  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  System.err.println( "JavaScriptRepresentation  Exception: "  +  char,  ex);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	System.err.println( "JavaScriptRepresentation  Exception: "  +  char,  ex);	  System.err.println(   "JavaScriptRepresentation    Exception:   "    +    c,    ex);    	non-compiled	[CE]  	46	None	replace
485	[BUG]  [BUGGY]  Context  rhsContext  =  context.getCurrentContext();  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  Context  rhsContext  =  context.getCurrentContext();  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	Context  rhsContext  =  context.getCurrentContext();	  Context    rhsContext    =    context.getCurrentContext();    appendHexJavaScriptRepresentation(rhsContext,    c);    	non-compiled	[CE]  	110	None	replace
486	[BUG]  [BUGGY]  Context  currentContext  =  context.getCurrentContext();  appendHexJavaScriptRepresentation(currentContext,  c);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  Context  currentContext  =  context.getCurrentContext();  appendHexJavaScriptRepresentation(currentContext,  c);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	Context  currentContext  =  context.getCurrentContext();  appendHexJavaScriptRepresentation(currentContext,  c);	  Context    rhsContext    =    context.getCurrentContext();    appendHexJavaScriptRepresentation(rhsContext,    c);    	non-compiled	[CE]  	110	None	replace
487	[BUG]  [BUGGY]  Context  rhsContext  =  context.getCurrentContext();  currentContext.appendHexJavaScriptRepresentation(rhsContext,  c);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  Context  rhsContext  =  context.getCurrentContext();  currentContext.appendHexJavaScriptRepresentation(rhsContext,  c);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	Context  rhsContext  =  context.getCurrentContext();  currentContext.appendHexJavaScriptRepresentation(rhsContext,  c);	  Context    rhsContext    =    context.getCurrentContext();    appendHexJavaScriptRepresentation(rhsContext,    c);    	non-compiled	[CE]  	110	None	replace
488	[BUG]  [BUGGY]  sb.append('$',  c);  [CE]  [FE]            ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  sb.append('$',  c);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	sb.append('$',  c);	  sb.append('n',    c);    	non-compiled	[CE]  	55	None	replace
489	[BUG]  [BUGGY]  sb.append(':',  c);  [CE]  [FE]              ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  sb.append(':',  c);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	sb.append(':',  c);	  sb.append('n',    c);    	non-compiled	[CE]  	55	None	replace
490	[BUG]  [BUGGY]  Context  rhsContext  =  context.getCurrentContext();  codeGenerator.appendHexJavaScriptRepresentation(rhsContext,  c,  sb);  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  Context  rhsContext  =  context.getCurrentContext();  codeGenerator.appendHexJavaScriptRepresentation(rhsContext,  c,  sb);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	Context  rhsContext  =  context.getCurrentContext();  codeGenerator.appendHexJavaScriptRepresentation(rhsContext,  c,  sb);	  Context    rhsContext    =    context.getCurrentContext();    appendHexJavaScriptRepresentation(rhsContext,    c,    sb);    	non-compiled	[CE]  	96	None	replace
491	[BUG]  [BUGGY]  Context  rhsContext  =  context.getCurrentContext();  appendHexJavaScriptRepresentation(rhsContext,  builder,  c,  sb);  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  Context  rhsContext  =  context.getCurrentContext();  appendHexJavaScriptRepresentation(rhsContext,  builder,  c,  sb);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	Context  rhsContext  =  context.getCurrentContext();  appendHexJavaScriptRepresentation(rhsContext,  builder,  c,  sb);	  Context    rhsContext    =    context.getCurrentContext();    appendHexJavaScriptRepresentation(rhsContext,    c,    sb);    	non-compiled	[CE]  	96	None	replace
492	[BUG]  [BUGGY]  appendBooleanRepresentation(sb,  c,  DEFAULT_NAMESPACE);  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  appendBooleanRepresentation(sb,  c,  DEFAULT_NAMESPACE);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	appendBooleanRepresentation(sb,  c,  DEFAULT_NAMESPACE);	  appendBooleanRepresentation(sb,    c,    CONSTRUCTOR);    	non-compiled	[CE]  	31	None	replace
493	[BUG]  [BUGGY]  appendBooleanRepresentation(sb,  c,  DEFAULT_TYPE);  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  appendBooleanRepresentation(sb,  c,  DEFAULT_TYPE);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	appendBooleanRepresentation(sb,  c,  DEFAULT_TYPE);	  appendBooleanRepresentation(sb,    c,    CONSTRUCTOR);    	non-compiled	[CE]  	31	None	replace
494	[BUG]  [BUGGY]  appendBooleanRepresentation(sb,  c,  ENUM);  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  appendBooleanRepresentation(sb,  c,  ENUM);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	appendBooleanRepresentation(sb,  c,  ENUM);	  appendBooleanRepresentation(sb,    c,    CONSTRUCTOR);    	non-compiled	[CE]  	31	None	replace
495	[BUG]  [BUGGY]  System.err.println( "JavaScriptRepresentation  error: "  +  ex.getMessage(),  sb);  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  System.err.println( "JavaScriptRepresentation  error: "  +  ex.getMessage(),  sb);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	System.err.println( "JavaScriptRepresentation  error: "  +  ex.getMessage(),  sb);	  System.err.println(   "JavaScriptRepresentation    error:   "    +    ex.getMessage(),    ex);    	non-compiled	[CE]  	53	None	replace
496	[BUG]  [BUGGY]  Context  lhsContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(c,  sb,  this,  rhsContext);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  Context  lhsContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(c,  sb,  this,  rhsContext);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	Context  lhsContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(c,  sb,  this,  rhsContext);	  Context    lhsContext    =    Context.getCurrentContext();    appendHexJavaScriptRepresentation(c,    sb,    this);    	non-compiled	[CE]  	116	None	replace
497	[BUG]  [BUGGY]  Context  lhsContext  =  Context.currentContext();  appendHexJavaScriptRepresentation(c,  sb,  this);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  Context  lhsContext  =  Context.currentContext();  appendHexJavaScriptRepresentation(c,  sb,  this);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	Context  lhsContext  =  Context.currentContext();  appendHexJavaScriptRepresentation(c,  sb,  this);	  Context    lhsContext    =    Context.getCurrentContext();    appendHexJavaScriptRepresentation(c,    sb,    this);    	non-compiled	[CE]  	116	None	replace
498	[BUG]  [BUGGY]  AppendContext  lhsContext  =  Context.getCurrentContext();  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  AppendContext  lhsContext  =  Context.getCurrentContext();  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	AppendContext  lhsContext  =  Context.getCurrentContext();	  AppendContext    lhsContext    =    Context.getCurrentContext();    appendHexJavaScriptRepresentation(sb,    c);    	non-compiled	[CE]  	36	None	replace
499	[BUG]  [BUGGY]  AppendContext  lhsContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(sb,  c,  rhsContext);  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  AppendContext  lhsContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(sb,  c,  rhsContext);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	AppendContext  lhsContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(sb,  c,  rhsContext);	  AppendContext    lhsContext    =    Context.getCurrentContext();    appendHexJavaScriptRepresentation(sb,    c);    	non-compiled	[CE]  	36	None	replace
500	[BUG]  [BUGGY]  AppendHexJavaScriptRepresentation(sb,  Context.getCurrentContext(),  c,  rhsContext);  [CE]  [FE]              ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  AppendHexJavaScriptRepresentation(sb,  Context.getCurrentContext(),  c,  rhsContext);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	AppendHexJavaScriptRepresentation(sb,  Context.getCurrentContext(),  c,  rhsContext);	  AppendHexJavaScriptRepresentation(sb,    Context.getCurrentContext(),    c);    	non-compiled	[CE]  	65	None	replace
501	[BUG]  [BUGGY]  AppendHexJavaScriptRepresentation(sb,  c.getCurrentContext(),  Context.getCurrentContext());  [CE]  [FE]                ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  AppendHexJavaScriptRepresentation(sb,  c.getCurrentContext(),  Context.getCurrentContext());  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	AppendHexJavaScriptRepresentation(sb,  c.getCurrentContext(),  Context.getCurrentContext());	  AppendHexJavaScriptRepresentation(sb,    Context.getCurrentContext(),    c);    	non-compiled	[CE]  	65	None	replace
502	[BUG]  [BUGGY]  Context.report(JSError.make(lhsContext,  c,  BLOCK_OF_EXPR));  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  Context.report(JSError.make(lhsContext,  c,  BLOCK_OF_EXPR));  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	Context.report(JSError.make(lhsContext,  c,  BLOCK_OF_EXPR));	  Context.report(JSError.make(lhsContext,    c,    IN_FOR_INIT_CLAUSE));    	non-compiled	[CE]  	103	None	replace
503	[BUG]  [BUGGY]  Context.report(JSError.make(lhsContext,  c,  PRESERVE_BLOCK));  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  Context.report(JSError.make(lhsContext,  c,  PRESERVE_BLOCK));  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	Context.report(JSError.make(lhsContext,  c,  PRESERVE_BLOCK));	  Context.report(JSError.make(lhsContext,    c,    IN_FOR_INIT_CLAUSE));    	non-compiled	[CE]  	103	None	replace
504	[BUG]  [BUGGY]  Context.report(JSError.make(lhsContext,  c,  IN_FOR_INIT_CLAUSE,  outputCharsetEncoder));  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  Context.report(JSError.make(lhsContext,  c,  IN_FOR_INIT_CLAUSE,  outputCharsetEncoder));  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	Context.report(JSError.make(lhsContext,  c,  IN_FOR_INIT_CLAUSE,  outputCharsetEncoder));	  Context.report(JSError.make(lhsContext,    c,    IN_FOR_INIT_CLAUSE));    	non-compiled	[CE]  	103	None	replace
505	[BUG]  [BUGGY]  Context.report(JSError.make(lhsContext,  c,  IN_FOR_INIT_CLAUSE,  sb));  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  Context.report(JSError.make(lhsContext,  c,  IN_FOR_INIT_CLAUSE,  sb));  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	Context.report(JSError.make(lhsContext,  c,  IN_FOR_INIT_CLAUSE,  sb));	  Context.report(JSError.make(lhsContext,    c,    IN_FOR_INIT_CLAUSE));    	non-compiled	[CE]  	103	None	replace
506	[BUG]  [BUGGY]  AppendHexJavaScriptRepresentation(sb,  rhsContext,  consumer);  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  AppendHexJavaScriptRepresentation(sb,  rhsContext,  consumer);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	AppendHexJavaScriptRepresentation(sb,  rhsContext,  consumer);	  AppendHexJavaScriptRepresentation(c,    rhsContext,    consumer);    	non-compiled	[CE]  	12	None	replace
507	[BUG]  [BUGGY]  AppendJavaScriptRepresentation(c,  sb,  consumer);  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  AppendJavaScriptRepresentation(c,  sb,  consumer);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	AppendJavaScriptRepresentation(c,  sb,  consumer);	  AppendHexJavaScriptRepresentation(c,    rhsContext,    consumer);    	non-compiled	[CE]  	12	None	replace
508	[BUG]  [BUGGY]  Context  rhsContext  =  context.getCurrentContext();  appendHexJavaScriptRepresentation(rhsContext,  sb,  consumer);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  Context  rhsContext  =  context.getCurrentContext();  appendHexJavaScriptRepresentation(rhsContext,  sb,  consumer);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	Context  rhsContext  =  context.getCurrentContext();  appendHexJavaScriptRepresentation(rhsContext,  sb,  consumer);	  Context    rhsContext    =    context.getCurrentContext();    appendHexJavaScriptRepresentation(rhsContext,    c,    consumer);    	non-compiled	[CE]  	78	None	replace
509	[BUG]  [BUGGY]  Context  rhsContext  =  context.getCurrentContext();  codeConsumer.appendHexJavaScriptRepresentation(rhsContext,  c,  consumer);  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  Context  rhsContext  =  context.getCurrentContext();  codeConsumer.appendHexJavaScriptRepresentation(rhsContext,  c,  consumer);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	Context  rhsContext  =  context.getCurrentContext();  codeConsumer.appendHexJavaScriptRepresentation(rhsContext,  c,  consumer);	  Context    rhsContext    =    context.getCurrentContext();    appendHexJavaScriptRepresentation(rhsContext,    c,    consumer);    	non-compiled	[CE]  	78	None	replace
510	[BUG]  [BUGGY]  Context  rhsContext  =  context.getCurrentContext();  appendHexJavaScriptRepresentation(c,  rhsContext,  consumer);  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  Context  rhsContext  =  context.getCurrentContext();  appendHexJavaScriptRepresentation(c,  rhsContext,  consumer);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	Context  rhsContext  =  context.getCurrentContext();  appendHexJavaScriptRepresentation(c,  rhsContext,  consumer);	  Context    rhsContext    =    context.getCurrentContext();    appendHexJavaScriptRepresentation(rhsContext,    c,    consumer);    	non-compiled	[CE]  	78	None	replace
511	[BUG]  [BUGGY]  Context  rhsContext  =  context.getCurrentContext();  appendHexJavaScriptRepresentation(sb,  c);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  Context  rhsContext  =  context.getCurrentContext();  appendHexJavaScriptRepresentation(sb,  c);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	Context  rhsContext  =  context.getCurrentContext();  appendHexJavaScriptRepresentation(sb,  c);	  Context    rhsContext    =    Context.getCurrentContext();    appendHexJavaScriptRepresentation(sb,    c);    	non-compiled	[CE]  	33	None	replace
512	[BUG]  [BUGGY]  appendHexJavaScriptRepresentation(sb,  rhsContext,  consumer);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  appendHexJavaScriptRepresentation(sb,  rhsContext,  consumer);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	appendHexJavaScriptRepresentation(sb,  rhsContext,  consumer);	  appendHexJavaScriptRepresentation(c,    rhsContext,    consumer);    	non-compiled	[CE]  	10	None	replace
513	[BUG]  [BUGGY]  appendConstant(c,  rhsContext,  consumer);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  appendConstant(c,  rhsContext,  consumer);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	appendConstant(c,  rhsContext,  consumer);	  appendHexJavaScriptRepresentation(c,    rhsContext,    consumer);    	non-compiled	[CE]  	10	None	replace
514	[BUG]  [BUGGY]  appendDecoderRepresentation(c,  sb,  consumer);  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  appendDecoderRepresentation(c,  sb,  consumer);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	appendDecoderRepresentation(c,  sb,  consumer);	  appendHexJavaScriptRepresentation(c,    rhsContext,    consumer);    	non-compiled	[CE]  	10	None	replace
515	[BUG]  [BUGGY]  System.err.println(c  + "JavaScriptRepresentation  Exception: "  +  hex);  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  System.err.println(c  + "JavaScriptRepresentation  Exception: "  +  hex);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	System.err.println(c  + "JavaScriptRepresentation  Exception: "  +  hex);	  System.err.println(c    +   "JavaScriptRepresentation    Exception:   "    +    c);    	non-compiled	[CE]  	91	None	replace
516	[BUG]  [BUGGY]  System.err.println(c  + "JavaScriptRepresentation  Exception: "  +  b);  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  System.err.println(c  + "JavaScriptRepresentation  Exception: "  +  b);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	System.err.println(c  + "JavaScriptRepresentation  Exception: "  +  b);	  System.err.println(c    +   "JavaScriptRepresentation    Exception:   "    +    c);    	non-compiled	[CE]  	91	None	replace
517	[BUG]  [BUGGY]  appendFunctionRepresentation(sb,  c);  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  appendFunctionRepresentation(sb,  c);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	appendFunctionRepresentation(sb,  c);	  append(sb,    c);    	non-compiled	[CE]  	75	None	replace
518	[BUG]  [BUGGY]  AppendHexJavaScriptRepresentation(sb,  c,  Context.getCodeConsumer());  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  AppendHexJavaScriptRepresentation(sb,  c,  Context.getCodeConsumer());  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	AppendHexJavaScriptRepresentation(sb,  c,  Context.getCodeConsumer());	  AppendHexJavaScriptRepresentation(sb,    c,    Context.getCurrentContext());    	non-compiled	[CE]  	6	None	replace
519	[BUG]  [BUGGY]  AppendHexJavaScriptRepresentation(sb,  c,  Context.getCodeInstantiator());  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  AppendHexJavaScriptRepresentation(sb,  c,  Context.getCodeInstantiator());  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	AppendHexJavaScriptRepresentation(sb,  c,  Context.getCodeInstantiator());	  AppendHexJavaScriptRepresentation(sb,    c,    Context.getCurrentContext());    	non-compiled	[CE]  	6	None	replace
520	[BUG]  [BUGGY]  AppendHexJavaScriptRepresentation(c,  Context.getCodeInstantiator());  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  AppendHexJavaScriptRepresentation(c,  Context.getCodeInstantiator());  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	AppendHexJavaScriptRepresentation(c,  Context.getCodeInstantiator());	  AppendHexJavaScriptRepresentation(c,    Context.getCurrentContext());    	non-compiled	[CE]  	62	None	replace
521	[BUG]  [BUGGY]  appendDecoderRepresentation(sb,  c,  IN_FOR_INIT_CLAUSE);  [CE]  [FE]            ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  appendDecoderRepresentation(sb,  c,  IN_FOR_INIT_CLAUSE);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	appendDecoderRepresentation(sb,  c,  IN_FOR_INIT_CLAUSE);	  appendDecoderRepresentation(sb,    c);    	non-compiled	[CE]  	76	None	replace
522	[BUG]  [BUGGY]  appendDecoderRepresentation(sb,  c,  outputCharsetEncoder);  [CE]  [FE]              ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  appendDecoderRepresentation(sb,  c,  outputCharsetEncoder);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	appendDecoderRepresentation(sb,  c,  outputCharsetEncoder);	  appendDecoderRepresentation(sb,    c);    	non-compiled	[CE]  	76	None	replace
523	[BUG]  [BUGGY]  appendDecoderRepresentation(sb,  c,  DEG_BLOCK);  [CE]  [FE]                ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  appendDecoderRepresentation(sb,  c,  DEG_BLOCK);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	appendDecoderRepresentation(sb,  c,  DEG_BLOCK);	  appendDecoderRepresentation(sb,    c);    	non-compiled	[CE]  	76	None	replace
524	[BUG]  [BUGGY]  System.err.println(c  + "JavaScriptRepresentation  ' "  +  c  + "'  is  not  supported: ");  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  System.err.println(c  + "JavaScriptRepresentation  ' "  +  c  + "'  is  not  supported: ");  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	System.err.println(c  + "JavaScriptRepresentation  ' "  +  c  + "'  is  not  supported: ");	  System.err.println(   "JavaScriptRepresentation    '   "    +    c    +   "'    is    not    supported:   ");    	non-compiled	[CE]  	39	None	replace
525	[BUG]  [BUGGY]  Context  lhsContext  =  Context.currentContext();  appendHexJavaScriptRepresentation(sb,  c,  rhsContext);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  Context  lhsContext  =  Context.currentContext();  appendHexJavaScriptRepresentation(sb,  c,  rhsContext);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	Context  lhsContext  =  Context.currentContext();  appendHexJavaScriptRepresentation(sb,  c,  rhsContext);	  Context    lhsContext    =    Context.currentContext();    appendHexJavaScriptRepresentation(sb,    c);    	non-compiled	[CE]  	35	None	replace
526	[BUG]  [BUGGY]  Context  rhsContext  =  Context.currentContext();  appendHexJavaScriptRepresentation(c,  sb,  rhsContext);  [CE]  [FE]              ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  Context  rhsContext  =  Context.currentContext();  appendHexJavaScriptRepresentation(c,  sb,  rhsContext);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	Context  rhsContext  =  Context.currentContext();  appendHexJavaScriptRepresentation(c,  sb,  rhsContext);	  Context    rhsContext    =    Context.getCurrentContext();    appendHexJavaScriptRepresentation(c,    sb,    rhsContext);    	non-compiled	[CE]  	83	None	replace
527	[BUG]  [BUGGY]  Context  currentContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(c,  sb,  currentContext);  [CE]  [FE]                ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  Context  currentContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(c,  sb,  currentContext);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	Context  currentContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(c,  sb,  currentContext);	  Context    rhsContext    =    Context.getCurrentContext();    appendHexJavaScriptRepresentation(c,    sb,    rhsContext);    	non-compiled	[CE]  	83	None	replace
528	[BUG]  [BUGGY]  System.err.println( "JavaScriptRepresentation  error: "  +  c  + ";requires ");  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  System.err.println( "JavaScriptRepresentation  error: "  +  c  + ";requires ");  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	System.err.println( "JavaScriptRepresentation  error: "  +  c  + ";requires ");	  System.err.println(   "JavaScriptRepresentation    error:   "    +    c    +   ";n   ");    	non-compiled	[CE]  	71	None	replace
529	[BUG]  [BUGGY]  System.err.println( "JavaScriptRepresentation  error: "  +  c  + ";reporting  exception ");  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  System.err.println( "JavaScriptRepresentation  error: "  +  c  + ";reporting  exception ");  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	System.err.println( "JavaScriptRepresentation  error: "  +  c  + ";reporting  exception ");	  System.err.println(   "JavaScriptRepresentation    error:   "    +    c    +   ";n   ");    	non-compiled	[CE]  	71	None	replace
530	[BUG]  [BUGGY]  appendBooleanRepresentation(b,  c,  false);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  appendBooleanRepresentation(b,  c,  false);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	appendBooleanRepresentation(b,  c,  false);	  appendBooleanRepresentation(sb,    c,    true);    	non-compiled	[CE]  	27	None	replace
531	[BUG]  [BUGGY]  Context  lhsContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(sb,  c,  HEX_CHARS);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  Context  lhsContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(sb,  c,  HEX_CHARS);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	Context  lhsContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(sb,  c,  HEX_CHARS);	  Context    lhsContext    =    Context.getCurrentContext();    appendHexJavaScriptRepresentation(sb,    c,    consumer);    	non-compiled	[CE]  	34	None	replace
532	[BUG]  [BUGGY]  sb.append(c, ";  char  ' ");  [CE]  [FE]              ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  sb.append(c, ";  char  ' ");  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	sb.append(c, ";  char  ' ");	  sb.append(   ";    char    '   ");    	non-compiled	[CE]  	102	None	replace
533	[BUG]  [BUGGY]  sb.append(']');  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  sb.append(']');  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	sb.append(']');	  sb.append('[');    	non-compiled	[CE]  	44	None	replace
534	[BUG]  [BUGGY]  Context  rhsContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(rhsContext,  builder,  consumer);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  Context  rhsContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(rhsContext,  builder,  consumer);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	Context  rhsContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(rhsContext,  builder,  consumer);	  Context    rhsContext    =    Context.getCurrentContext();    appendHexJavaScriptRepresentation(rhsContext,    sb,    consumer);    	non-compiled	[CE]  	77	None	replace
535	[BUG]  [BUGGY]  Context  rhsContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(consumer,  sb,  rhsContext);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  Context  rhsContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(consumer,  sb,  rhsContext);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	Context  rhsContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(consumer,  sb,  rhsContext);	  Context    rhsContext    =    Context.getCurrentContext();    appendHexJavaScriptRepresentation(rhsContext,    sb,    consumer);    	non-compiled	[CE]  	77	None	replace
536	[BUG]  [BUGGY]  Context  lhsContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(sb,  c,  rhsContext,  Consumer);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  Context  lhsContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(sb,  c,  rhsContext,  Consumer);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	Context  lhsContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(sb,  c,  rhsContext,  Consumer);	  Context    lhsContext    =    Context.getCurrentContext();    appendHexJavaScriptRepresentation(sb,    c,    rhsContext);    	non-compiled	[CE]  	69	None	replace
537	[BUG]  [BUGGY]  appendBooleanRepresentation(b,  c,  Color.black);  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  appendBooleanRepresentation(b,  c,  Color.black);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	appendBooleanRepresentation(b,  c,  Color.black);	  appendBooleanRepresentation(sb,    c,    Color.black);    	non-compiled	[CE]  	30	None	replace
538	[BUG]  [BUGGY]  appendRhsJavaScriptRepresentation(c,  sb);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  appendRhsJavaScriptRepresentation(c,  sb);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	appendRhsJavaScriptRepresentation(c,  sb);	  appendHexJavaScriptRepresentation(c,    rhsContext);    	non-compiled	[CE]  	63	None	replace
539	[BUG]  [BUGGY]  System.err.println( "Unable  to  append  JAVAScriptRepresentation: "  +  c);  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  System.err.println( "Unable  to  append  JAVAScriptRepresentation: "  +  c);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	System.err.println( "Unable  to  append  JAVAScriptRepresentation: "  +  c);	  System.err.println(   "Unable    to    append    HexJavaScriptRepresentation:   "    +    c);    	non-compiled	[CE]  	104	None	replace
540	[BUG]  [BUGGY]  sb.append('/');  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  sb.append('/');  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	sb.append('/');	  sb.append('ufffd');    	non-compiled	[CE]  	45	None	replace
541	[BUG]  [BUGGY]  System.err.println( "JavaScriptRepresentation  error: "  +  c  + "  of ",  sb);  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  System.err.println( "JavaScriptRepresentation  error: "  +  c  + "  of ",  sb);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	System.err.println( "JavaScriptRepresentation  error: "  +  c  + "  of ",  sb);	  System.err.println(   "JavaScriptRepresentation    error:   "    +    c    +   "    of   ");    	non-compiled	[CE]  	72	None	replace
542	[BUG]  [BUGGY]  System.err.println( "JavaScriptRepresentation  error: "  +  c  + "  of "+getClass());  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  System.err.println( "JavaScriptRepresentation  error: "  +  c  + "  of "+getClass());  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	System.err.println( "JavaScriptRepresentation  error: "  +  c  + "  of "+getClass());	  System.err.println(   "JavaScriptRepresentation    error:   "    +    c    +   "    of   ");    	non-compiled	[CE]  	72	None	replace
543	[BUG]  [BUGGY]  appendDelimiterRepresentation(c,  sb,  false);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  appendDelimiterRepresentation(c,  sb,  false);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	appendDelimiterRepresentation(c,  sb,  false);	  appendDelimiterRepresentation(c,    sb);    	non-compiled	[CE]  	60	None	replace
544	[BUG]  [BUGGY]  appendDelimiterRepresentation(c,  sb,  this);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  appendDelimiterRepresentation(c,  sb,  this);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	appendDelimiterRepresentation(c,  sb,  this);	  appendDelimiterRepresentation(c,    sb);    	non-compiled	[CE]  	60	None	replace
545	[BUG]  [BUGGY]  System.err.println(c  + "JavaScriptRepresentation  error: "  +  c.toString());  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  System.err.println(c  + "JavaScriptRepresentation  error: "  +  c.toString());  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	System.err.println(c  + "JavaScriptRepresentation  error: "  +  c.toString());	  System.err.println(   "JavaScriptRepresentation    error:   "    +    c.toString());    	non-compiled	[CE]  	113	None	replace
546	[BUG]  [BUGGY]  AppendHexJavaScriptRepresentation(sb,  c,  IN_FOR_INIT_CLAUSE);  [CE]  [FE]                ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  AppendHexJavaScriptRepresentation(sb,  c,  IN_FOR_INIT_CLAUSE);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	AppendHexJavaScriptRepresentation(sb,  c,  IN_FOR_INIT_CLAUSE);	  AppendHexJavaScriptRepresentation(sb,    c);    	non-compiled	[CE]  	32	None	replace
547	[BUG]  [BUGGY]  AppendHexJavaScriptRepresentation(sb,  c,  HEX_CHARS);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  AppendHexJavaScriptRepresentation(sb,  c,  HEX_CHARS);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	AppendHexJavaScriptRepresentation(sb,  c,  HEX_CHARS);	  AppendHexJavaScriptRepresentation(sb,    c);    	non-compiled	[CE]  	32	None	replace
548	[BUG]  [BUGGY]  Context  rhsContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(sb,  c,  rhsContext,  Consumer);  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  Context  rhsContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(sb,  c,  rhsContext,  Consumer);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	Context  rhsContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(sb,  c,  rhsContext,  Consumer);	  Context    rhsContext    =    Context.getCurrentContext();    appendHexJavaScriptRepresentation(sb,    c,    rhsContext);    	non-compiled	[CE]  	9	None	replace
549	[BUG]  [BUGGY]  Context  rhsContext  =  Context.currentContext();  appendHexJavaScriptRepresentation(sb,  c,  rhsContext);  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  Context  rhsContext  =  Context.currentContext();  appendHexJavaScriptRepresentation(sb,  c,  rhsContext);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	Context  rhsContext  =  Context.currentContext();  appendHexJavaScriptRepresentation(sb,  c,  rhsContext);	  Context    rhsContext    =    Context.getCurrentContext();    appendHexJavaScriptRepresentation(sb,    c,    rhsContext);    	non-compiled	[CE]  	9	None	replace
550	[BUG]  [BUGGY]  System.err.println( "JavaScriptRepresentation  error: "  +  sb,  c);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  System.err.println( "JavaScriptRepresentation  error: "  +  sb,  c);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	System.err.println( "JavaScriptRepresentation  error: "  +  sb,  c);	  System.err.println(   "JavaScriptRepresentation    error:   "    +    sb);    	non-compiled	[CE]  	22	None	replace
551	[BUG]  [BUGGY]  System.err.println( "JavaScriptRepresentation  error: "  +  char);  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  System.err.println( "JavaScriptRepresentation  error: "  +  char);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	System.err.println( "JavaScriptRepresentation  error: "  +  char);	  System.err.println(   "JavaScriptRepresentation    error:   "    +    sb);    	non-compiled	[CE]  	22	None	replace
552	[BUG]  [BUGGY]  appendEmbeddedBooleanRepresentation(sb,  c,  HEX_CHARS);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  appendEmbeddedBooleanRepresentation(sb,  c,  HEX_CHARS);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	appendEmbeddedBooleanRepresentation(sb,  c,  HEX_CHARS);	  appendEmbeddedBooleanRepresentation(sb,    c);    	non-compiled	[CE]  	81	None	replace
553	[BUG]  [BUGGY]  Context  lhsContext  =  Context.getCurrentContext();  currentContext.appendHexJavaScriptRepresentation(c,  sb,  rhsContext);  [CE]  [FE]              ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  Context  lhsContext  =  Context.getCurrentContext();  currentContext.appendHexJavaScriptRepresentation(c,  sb,  rhsContext);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	Context  lhsContext  =  Context.getCurrentContext();  currentContext.appendHexJavaScriptRepresentation(c,  sb,  rhsContext);	  Context    lhsContext    =    Context.getCurrentContext();    currentContext.appendHexJavaScriptRepresentation(c,    sb);    	non-compiled	[CE]  	114	None	replace
554	[BUG]  [BUGGY]  appendRelativeTo(sb,  c);  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  appendRelativeTo(sb,  c);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	appendRelativeTo(sb,  c);	  appendDelimiter(sb,    c);    	non-compiled	[CE]  	73	None	replace
555	[BUG]  [BUGGY]  AppendHexJavaScriptRepresentation(sb,  Context.getCodeInstantiator());  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  AppendHexJavaScriptRepresentation(sb,  Context.getCodeInstantiator());  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	AppendHexJavaScriptRepresentation(sb,  Context.getCodeInstantiator());	  AppendHexJavaScriptRepresentation(sb,    Context.getCurrentContext());    	non-compiled	[CE]  	67	None	replace
556	[BUG]  [BUGGY]  AppendHexJavaScriptRepresentation(sb,  Context.getCodeContext());  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  AppendHexJavaScriptRepresentation(sb,  Context.getCodeContext());  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	AppendHexJavaScriptRepresentation(sb,  Context.getCodeContext());	  AppendHexJavaScriptRepresentation(sb,    Context.getCurrentContext());    	non-compiled	[CE]  	67	None	replace
557	[BUG]  [BUGGY]  Context  rhsContext  =  context.getCurrentContext();  appendHexJavaScriptRepresentation(rhsContext,  c,  consumer,  false);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  Context  rhsContext  =  context.getCurrentContext();  appendHexJavaScriptRepresentation(rhsContext,  c,  consumer,  false);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	Context  rhsContext  =  context.getCurrentContext();  appendHexJavaScriptRepresentation(rhsContext,  c,  consumer,  false);	  Context    rhsContext    =    context.getCurrentContext();    appendHexJavaScriptRepresentation(rhsContext,    c,    consumer);    	non-compiled	[CE]  	78	None	replace
558	[BUG]  [BUGGY]  appendHexJavaScriptRepresentation(sb,  c,  Context.getCodePointerContext());  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  appendHexJavaScriptRepresentation(sb,  c,  Context.getCodePointerContext());  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	appendHexJavaScriptRepresentation(sb,  c,  Context.getCodePointerContext());	  appendHexJavaScriptRepresentation(sb,    c,    Context.getCurrentContext());    	non-compiled	[CE]  	5	None	replace
559	[BUG]  [BUGGY]  appendHexJavaScriptRepresentation(sb,  c,  Context.getCodePointer());  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  appendHexJavaScriptRepresentation(sb,  c,  Context.getCodePointer());  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	appendHexJavaScriptRepresentation(sb,  c,  Context.getCodePointer());	  appendHexJavaScriptRepresentation(sb,    c,    Context.getCurrentContext());    	non-compiled	[CE]  	5	None	replace
560	[BUG]  [BUGGY]  AppendDescriptorHexJavaScriptRepresentation(sb,  c);  [CE]  [FE]              ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  AppendDescriptorHexJavaScriptRepresentation(sb,  c);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	AppendDescriptorHexJavaScriptRepresentation(sb,  c);	  AppendHexJavaScriptRepresentation(c,    sb);    	non-compiled	[CE]  	16	None	replace
561	[BUG]  [BUGGY]  AppendFunctionHexJavaScriptRepresentation(sb,  c);  [CE]  [FE]                ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  AppendFunctionHexJavaScriptRepresentation(sb,  c);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	AppendFunctionHexJavaScriptRepresentation(sb,  c);	  AppendHexJavaScriptRepresentation(c,    sb);    	non-compiled	[CE]  	16	None	replace
562	[BUG]  [BUGGY]  System.err.println(sb, "JavaScriptRepresentation  Exception: "  +  c,  ex);  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  System.err.println(sb, "JavaScriptRepresentation  Exception: "  +  c,  ex);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	System.err.println(sb, "JavaScriptRepresentation  Exception: "  +  c,  ex);	  System.err.println(   "JavaScriptRepresentation    Exception:   "    +    c,    ex);    	non-compiled	[CE]  	46	None	replace
563	[BUG]  [BUGGY]  System.err.println(c  + "JavaScriptRepresentation  error: "  +  ex);  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  System.err.println(c  + "JavaScriptRepresentation  error: "  +  ex);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	System.err.println(c  + "JavaScriptRepresentation  error: "  +  ex);	  System.err.println(   "JavaScriptRepresentation    error:   "    +    ex);    	non-compiled	[CE]  	24	None	replace
564	[BUG]  [BUGGY]  System.err.println( "JavaScriptRepresentation  error: "  +  sb.toString(),  ex);  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  System.err.println( "JavaScriptRepresentation  error: "  +  sb.toString(),  ex);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	System.err.println( "JavaScriptRepresentation  error: "  +  sb.toString(),  ex);	  System.err.println(   "JavaScriptRepresentation    error:   "    +    ex.getMessage(),    ex);    	non-compiled	[CE]  	53	None	replace
565	[BUG]  [BUGGY]  System.err.println( "JavaScriptRepresentation  error: "  +  c.toString(),  ex);  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  System.err.println( "JavaScriptRepresentation  error: "  +  c.toString(),  ex);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	System.err.println( "JavaScriptRepresentation  error: "  +  c.toString(),  ex);	  System.err.println(   "JavaScriptRepresentation    error:   "    +    ex.getMessage(),    ex);    	non-compiled	[CE]  	53	None	replace
566	[BUG]  [BUGGY]  Context  rhsContext  =  context.getCurrentContext();  codeGenerator.appendHexJavaScriptRepresentation(rhsContext,  c);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  Context  rhsContext  =  context.getCurrentContext();  codeGenerator.appendHexJavaScriptRepresentation(rhsContext,  c);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	Context  rhsContext  =  context.getCurrentContext();  codeGenerator.appendHexJavaScriptRepresentation(rhsContext,  c);	  Context    rhsContext    =    context.getCurrentContext();    appendHexJavaScriptRepresentation(rhsContext,    c);    	non-compiled	[CE]  	110	None	replace
567	[BUG]  [BUGGY]  Context  rhsContext  =  getCurrentContext();  appendHexJavaScriptRepresentation(rhsContext,  c);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  Context  rhsContext  =  getCurrentContext();  appendHexJavaScriptRepresentation(rhsContext,  c);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	Context  rhsContext  =  getCurrentContext();  appendHexJavaScriptRepresentation(rhsContext,  c);	  Context    rhsContext    =    context.getCurrentContext();    appendHexJavaScriptRepresentation(rhsContext,    c);    	non-compiled	[CE]  	110	None	replace
568	[BUG]  [BUGGY]  appendBooleanRepresentation(sb,  c,  consumers,  false);  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  appendBooleanRepresentation(sb,  c,  consumers,  false);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	appendBooleanRepresentation(sb,  c,  consumers,  false);	  appendBooleanRepresentation(sb,    c,    consumer);    	non-compiled	[CE]  	29	None	replace
569	[BUG]  [BUGGY]  appendBooleanRepresentation(sb,  c,  DEFAULT_SYNTHETIC);  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  appendBooleanRepresentation(sb,  c,  DEFAULT_SYNTHETIC);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	appendBooleanRepresentation(sb,  c,  DEFAULT_SYNTHETIC);	  appendBooleanRepresentation(sb,    c,    consumer);    	non-compiled	[CE]  	29	None	replace
570	[BUG]  [BUGGY]  Context  rhsContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(rhsContext,  char,  c,  sb);  [CE]  [FE]                ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  Context  rhsContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(rhsContext,  char,  c,  sb);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	Context  rhsContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(rhsContext,  char,  c,  sb);	  Context    rhsContext    =    Context.getCurrentContext();    appendHexJavaScriptRepresentation(rhsContext,    char,    c);    	non-compiled	[CE]  	84	None	replace
571	[BUG]  [BUGGY]  Context  rhsContext  =  Context.getCurrentContext();  codeGenerator.appendHexJavaScriptRepresentation(rhsContext,  char,  c);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  Context  rhsContext  =  Context.getCurrentContext();  codeGenerator.appendHexJavaScriptRepresentation(rhsContext,  char,  c);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	Context  rhsContext  =  Context.getCurrentContext();  codeGenerator.appendHexJavaScriptRepresentation(rhsContext,  char,  c);	  Context    rhsContext    =    Context.getCurrentContext();    appendHexJavaScriptRepresentation(rhsContext,    char,    c);    	non-compiled	[CE]  	84	None	replace
572	[BUG]  [BUGGY]  Context  lhsContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(sb,  c,  hexContext);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  Context  lhsContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(sb,  c,  hexContext);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	Context  lhsContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(sb,  c,  hexContext);	  Context    lhsContext    =    Context.getCurrentContext();    appendHexJavaScriptRepresentation(sb,    c,    rhsContext);    	non-compiled	[CE]  	69	None	replace
573	[BUG]  [BUGGY]  Context  lhsContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(sb,  c,  rhsContext,  consumers);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  Context  lhsContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(sb,  c,  rhsContext,  consumers);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	Context  lhsContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(sb,  c,  rhsContext,  consumers);	  Context    lhsContext    =    Context.getCurrentContext();    appendHexJavaScriptRepresentation(sb,    c,    rhsContext);    	non-compiled	[CE]  	69	None	replace
574	[BUG]  [BUGGY]  appendHexJavaScriptRepresentation(c,  sb,  ex);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  appendHexJavaScriptRepresentation(c,  sb,  ex);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	appendHexJavaScriptRepresentation(c,  sb,  ex);	  appendHexJavaScriptRepresentation(c,    sb,    message);    	non-compiled	[CE]  	59	None	replace
575	[BUG]  [BUGGY]  appendHexJavaScriptRepresentation(c,  sb,  JsonStringEncoder.getInstance());  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  appendHexJavaScriptRepresentation(c,  sb,  JsonStringEncoder.getInstance());  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	appendHexJavaScriptRepresentation(c,  sb,  JsonStringEncoder.getInstance());	  appendHexJavaScriptRepresentation(c,    sb,    message);    	non-compiled	[CE]  	59	None	replace
576	[BUG]  [BUGGY]  Context  rhsContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(rhsContext,  char  c,  consumer);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  Context  rhsContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(rhsContext,  char  c,  consumer);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	Context  rhsContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(rhsContext,  char  c,  consumer);	  Context    rhsContext    =    Context.getCurrentContext();    appendHexJavaScriptRepresentation(rhsContext,    sb,    consumer);    	non-compiled	[CE]  	77	None	replace
577	[BUG]  [BUGGY]  System.err.println( "Unable  to  append  HexJavaScriptRepresentation: "  +  sb);  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  System.err.println( "Unable  to  append  HexJavaScriptRepresentation: "  +  sb);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	System.err.println( "Unable  to  append  HexJavaScriptRepresentation: "  +  sb);	  System.err.println(   "Unable    to    append    HexJavaScriptRepresentation:   "    +    c);    	non-compiled	[CE]  	104	None	replace
578	[BUG]  [BUGGY]  appendFunctionJavaScriptRepresentation(sb,  c);  [CE]  [FE]              ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  appendFunctionJavaScriptRepresentation(sb,  c);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	appendFunctionJavaScriptRepresentation(sb,  c);	  appendJavaScriptRepresentation(c,    sb);    	non-compiled	[CE]  	2	None	replace
579	[BUG]  [BUGGY]  appendBooleanRepresentation(sb,  c,  STATEMENT);  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  appendBooleanRepresentation(sb,  c,  STATEMENT);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	appendBooleanRepresentation(sb,  c,  STATEMENT);	  appendBooleanRepresentation(sb,    c,    CONSTRUCTOR);    	non-compiled	[CE]  	31	None	replace
580	[BUG]  [BUGGY]  appendBooleanRepresentation(sb,  c,  PROPERTY);  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  appendBooleanRepresentation(sb,  c,  PROPERTY);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	appendBooleanRepresentation(sb,  c,  PROPERTY);	  appendBooleanRepresentation(sb,    c,    CONSTRUCTOR);    	non-compiled	[CE]  	31	None	replace
581	[BUG]  [BUGGY]  appendBooleanRepresentation(sb,  c,  CONSTRUCTOR,  USER);  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  appendBooleanRepresentation(sb,  c,  CONSTRUCTOR,  USER);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	appendBooleanRepresentation(sb,  c,  CONSTRUCTOR,  USER);	  appendBooleanRepresentation(sb,    c,    CONSTRUCTOR);    	non-compiled	[CE]  	31	None	replace
582	[BUG]  [BUGGY]  appendErrorRepresentation(sb,  c);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  appendErrorRepresentation(sb,  c);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	appendErrorRepresentation(sb,  c);	  appendDelimiterRepresentation(c,    sb);    	non-compiled	[CE]  	60	None	replace
583	[BUG]  [BUGGY]  System.err.println(sb  + "JavaScriptRepresentation  ' "  +  c  + "'  is  not  supported: ");  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  System.err.println(sb  + "JavaScriptRepresentation  ' "  +  c  + "'  is  not  supported: ");  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	System.err.println(sb  + "JavaScriptRepresentation  ' "  +  c  + "'  is  not  supported: ");	  System.err.println(   "JavaScriptRepresentation    '   "    +    c    +   "'    is    not    supported:   ");    	non-compiled	[CE]  	39	None	replace
584	[BUG]  [BUGGY]  System.err.println( "JavaScriptRepresentation  ' "  +  c  + ".'  is  not  supported: ");  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  System.err.println( "JavaScriptRepresentation  ' "  +  c  + ".'  is  not  supported: ");  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	System.err.println( "JavaScriptRepresentation  ' "  +  c  + ".'  is  not  supported: ");	  System.err.println(   "JavaScriptRepresentation    '   "    +    c    +   "'    is    not    supported:   ");    	non-compiled	[CE]  	39	None	replace
585	[BUG]  [BUGGY]  sb.append(Character.toOtherCase(c));  [CE]  [FE]              ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  sb.append(Character.toOtherCase(c));  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	sb.append(Character.toOtherCase(c));	  sb.append(Character.toLowerCase(c));    	non-compiled	[CE]  	41	None	replace
586	[BUG]  [BUGGY]  System.err.println(sb, "JavaScriptRepresentation  error: "  +  c.getMessage());  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  System.err.println(sb, "JavaScriptRepresentation  error: "  +  c.getMessage());  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	System.err.println(sb, "JavaScriptRepresentation  error: "  +  c.getMessage());	  System.err.println(   "JavaScriptRepresentation    error:   "    +    c.getMessage());    	non-compiled	[CE]  	51	None	replace
587	[BUG]  [BUGGY]  Context  rhsContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(sb,  c,  rhsContext,  consumers);  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  Context  rhsContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(sb,  c,  rhsContext,  consumers);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	Context  rhsContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(sb,  c,  rhsContext,  consumers);	  Context    rhsContext    =    Context.getCurrentContext();    appendHexJavaScriptRepresentation(sb,    c,    rhsContext);    	non-compiled	[CE]  	9	None	replace
588	[BUG]  [BUGGY]  Context  rhsContext  =  context.getCurrentContext();  appendHexJavaScriptRepresentation(sb,  c,  rhsContext);  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  Context  rhsContext  =  context.getCurrentContext();  appendHexJavaScriptRepresentation(sb,  c,  rhsContext);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	Context  rhsContext  =  context.getCurrentContext();  appendHexJavaScriptRepresentation(sb,  c,  rhsContext);	  Context    rhsContext    =    Context.getCurrentContext();    appendHexJavaScriptRepresentation(sb,    c,    rhsContext);    	non-compiled	[CE]  	9	None	replace
589	[BUG]  [BUGGY]  Context  rhsContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(rhsContext,  char  c,  sb,  c);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  Context  rhsContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(rhsContext,  char  c,  sb,  c);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	Context  rhsContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(rhsContext,  char  c,  sb,  c);	  Context    rhsContext    =    Context.getCurrentContext();    appendHexJavaScriptRepresentation(rhsContext,    char    c,    sb);    	non-compiled	[CE]  	105	None	replace
590	[BUG]  [BUGGY]  Context  rhsContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(rhsContext,  sb,  builder,  c,  sb);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  Context  rhsContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(rhsContext,  sb,  builder,  c,  sb);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	Context  rhsContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(rhsContext,  sb,  builder,  c,  sb);	  Context    rhsContext    =    Context.getCurrentContext();    appendHexJavaScriptRepresentation(rhsContext,    builder,    c,    sb);    	non-compiled	[CE]  	94	None	replace
591	[BUG]  [BUGGY]  Context  rhsContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(rhsContext,  c,  builder,  sb);  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  Context  rhsContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(rhsContext,  c,  builder,  sb);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	Context  rhsContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(rhsContext,  c,  builder,  sb);	  Context    rhsContext    =    Context.getCurrentContext();    appendHexJavaScriptRepresentation(rhsContext,    builder,    c,    sb);    	non-compiled	[CE]  	94	None	replace
592	[BUG]  [BUGGY]  Context  rhsContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(sb,  builder,  c,  rhsContext);  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  Context  rhsContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(sb,  builder,  c,  rhsContext);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	Context  rhsContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(sb,  builder,  c,  rhsContext);	  Context    rhsContext    =    Context.getCurrentContext();    appendHexJavaScriptRepresentation(rhsContext,    builder,    c,    sb);    	non-compiled	[CE]  	94	None	replace
593	[BUG]  [BUGGY]  Context  rhsContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(c,  builder,  sb);  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  Context  rhsContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(c,  builder,  sb);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	Context  rhsContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(c,  builder,  sb);	  Context    rhsContext    =    Context.getCurrentContext();    appendHexJavaScriptRepresentation(rhsContext,    builder,    c,    sb);    	non-compiled	[CE]  	94	None	replace
594	[BUG]  [BUGGY]  Context  rhsContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(rhsContext,  sb,  builder,  c,  rhsContext);  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  Context  rhsContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(rhsContext,  sb,  builder,  c,  rhsContext);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	Context  rhsContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(rhsContext,  sb,  builder,  c,  rhsContext);	  Context    rhsContext    =    Context.getCurrentContext();    appendHexJavaScriptRepresentation(rhsContext,    builder,    c,    sb);    	non-compiled	[CE]  	94	None	replace
595	[BUG]  [BUGGY]  System.err.println( "JavaScriptRepresentation  Exception: "  +  c  + ",  expecting  exception. ");  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  System.err.println( "JavaScriptRepresentation  Exception: "  +  c  + ",  expecting  exception. ");  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	System.err.println( "JavaScriptRepresentation  Exception: "  +  c  + ",  expecting  exception. ");	  System.err.println(   "JavaScriptRepresentation    Exception:   "    +    c    +   "    of   ");    	non-compiled	[CE]  	92	None	replace
596	[BUG]  [BUGGY]  System.err.println( "JavaScriptRepresentation  Exception: "  +  c  + ",  is  not  implemented  by ");  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  System.err.println( "JavaScriptRepresentation  Exception: "  +  c  + ",  is  not  implemented  by ");  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	System.err.println( "JavaScriptRepresentation  Exception: "  +  c  + ",  is  not  implemented  by ");	  System.err.println(   "JavaScriptRepresentation    Exception:   "    +    c    +   "    of   ");    	non-compiled	[CE]  	92	None	replace
597	[BUG]  [BUGGY]  System.err.println( "JavaScriptRepresentation  Exception: "  +  char  c);  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  System.err.println( "JavaScriptRepresentation  Exception: "  +  char  c);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	System.err.println( "JavaScriptRepresentation  Exception: "  +  char  c);	  System.err.println(   "JavaScriptRepresentation    Exception:   "    +    sb);    	non-compiled	[CE]  	47	None	replace
598	[BUG]  [BUGGY]  appendHexJavaScriptRepresentation(sb,  Context.getCodeContext(),  c);  [CE]  [FE]                ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  appendHexJavaScriptRepresentation(sb,  Context.getCodeContext(),  c);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	appendHexJavaScriptRepresentation(sb,  Context.getCodeContext(),  c);	  appendHexJavaScriptRepresentation(sb,    Context.getCurrentContext(),    c);    	non-compiled	[CE]  	66	None	replace
599	[BUG]  [BUGGY]  appendHexJavaScriptRepresentation(sb,  Context.currentToken(),  c);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  appendHexJavaScriptRepresentation(sb,  Context.currentToken(),  c);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	appendHexJavaScriptRepresentation(sb,  Context.currentToken(),  c);	  appendHexJavaScriptRepresentation(sb,    Context.getCurrentContext(),    c);    	non-compiled	[CE]  	66	None	replace
600	[BUG]  [BUGGY]  appendHexJavaScriptRepresentation(sb,  Context.getCodeInstantiator(),  c);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  appendHexJavaScriptRepresentation(sb,  Context.getCodeInstantiator(),  c);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	appendHexJavaScriptRepresentation(sb,  Context.getCodeInstantiator(),  c);	  appendHexJavaScriptRepresentation(sb,    Context.getCurrentContext(),    c);    	non-compiled	[CE]  	66	None	replace
601	[BUG]  [BUGGY]  System.err.println( "JavaScriptRepresentation  error: "  +  c  + "  for ");  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  System.err.println( "JavaScriptRepresentation  error: "  +  c  + "  for ");  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	System.err.println( "JavaScriptRepresentation  error: "  +  c  + "  for ");	  System.err.println(   "JavaScriptRepresentation    error:   "    +    c    +   "    of   ");    	non-compiled	[CE]  	72	None	replace
602	[BUG]  [BUGGY]  System.err.println( "JavaScriptRepresentation  error: "  +  c  + ",  needs  representation  of ");  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  System.err.println( "JavaScriptRepresentation  error: "  +  c  + ",  needs  representation  of ");  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	System.err.println( "JavaScriptRepresentation  error: "  +  c  + ",  needs  representation  of ");	  System.err.println(   "JavaScriptRepresentation    error:   "    +    c    +   "    of   ");    	non-compiled	[CE]  	72	None	replace
603	[BUG]  [BUGGY]  System.err.println( "JavaScriptRepresentation  error: "  +  c  + "  of ",  c);  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  System.err.println( "JavaScriptRepresentation  error: "  +  c  + "  of ",  c);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	System.err.println( "JavaScriptRepresentation  error: "  +  c  + "  of ",  c);	  System.err.println(   "JavaScriptRepresentation    error:   "    +    c    +   "    of   ");    	non-compiled	[CE]  	72	None	replace
604	[BUG]  [BUGGY]  Context  lhsContext  =  Context.currentTimeMillis();  appendHexJavaScriptRepresentation(sb,  c);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  Context  lhsContext  =  Context.currentTimeMillis();  appendHexJavaScriptRepresentation(sb,  c);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	Context  lhsContext  =  Context.currentTimeMillis();  appendHexJavaScriptRepresentation(sb,  c);	  Context    lhsContext    =    Context.currentContext();    appendHexJavaScriptRepresentation(sb,    c);    	non-compiled	[CE]  	35	None	replace
605	[BUG]  [BUGGY]  Context  rhsContext  =  Context.getCurrentContextForCodeInsertion(c);  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  Context  rhsContext  =  Context.getCurrentContextForCodeInsertion(c);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	Context  rhsContext  =  Context.getCurrentContextForCodeInsertion(c);	  Context    rhsContext    =    Context.getCurrentContext();    	non-compiled	[CE]  	80	None	replace
606	[BUG]  [BUGGY]  System.err.println(c  + ".JavaScriptRepresentation  ' "  +  c  + "'  is  not  supported. ");  [CE]  [FE]              ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  System.err.println(c  + ".JavaScriptRepresentation  ' "  +  c  + "'  is  not  supported. ");  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	System.err.println(c  + ".JavaScriptRepresentation  ' "  +  c  + "'  is  not  supported. ");	  System.err.println(c    +   "JavaScriptRepresentation    '   "    +    c    +   "'    is    not    supported.   ");    	non-compiled	[CE]  	97	None	replace
607	[BUG]  [BUGGY]  System.err.println(c,  ex.getMessage());  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  System.err.println(c,  ex.getMessage());  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	System.err.println(c,  ex.getMessage());	  System.err.println(c,   "JavaScriptRepresentation    error:   "    +    c);    	non-compiled	[CE]  	101	None	replace
608	[BUG]  [BUGGY]  System.err.println( "JavaScriptRepresentation  error: "  +  c  + ";  expected: ");  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  System.err.println( "JavaScriptRepresentation  error: "  +  c  + ";  expected: ");  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	System.err.println( "JavaScriptRepresentation  error: "  +  c  + ";  expected: ");	  System.err.println(   "JavaScriptRepresentation    error:   "    +    c    +   ";n   ");    	non-compiled	[CE]  	71	None	replace
609	[BUG]  [BUGGY]  System.err.println( "JavaScriptRepresentation  error: "  +  c  + ";  expecting  an  exception. ");  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  System.err.println( "JavaScriptRepresentation  error: "  +  c  + ";  expecting  an  exception. ");  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	System.err.println( "JavaScriptRepresentation  error: "  +  c  + ";  expecting  an  exception. ");	  System.err.println(   "JavaScriptRepresentation    error:   "    +    c    +   ";n   ");    	non-compiled	[CE]  	71	None	replace
610	[BUG]  [BUGGY]  System.err.println( "JavaScriptRepresentation  error: "  +  c  + ";exports: ");  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  System.err.println( "JavaScriptRepresentation  error: "  +  c  + ";exports: ");  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	System.err.println( "JavaScriptRepresentation  error: "  +  c  + ";exports: ");	  System.err.println(   "JavaScriptRepresentation    error:   "    +    c    +   ";n   ");    	non-compiled	[CE]  	71	None	replace
611	[BUG]  [BUGGY]  System.err.println( "JavaScriptRepresentation  error: "  +  c  + ";requires  exception. ");  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  System.err.println( "JavaScriptRepresentation  error: "  +  c  + ";requires  exception. ");  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	System.err.println( "JavaScriptRepresentation  error: "  +  c  + ";requires  exception. ");	  System.err.println(   "JavaScriptRepresentation    error:   "    +    c    +   ";n   ");    	non-compiled	[CE]  	71	None	replace
612	[BUG]  [BUGGY]  System.err.println( "JavaScriptRepresentation  error: "  +  c  + ";requires  this  code. ");  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  System.err.println( "JavaScriptRepresentation  error: "  +  c  + ";requires  this  code. ");  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	System.err.println( "JavaScriptRepresentation  error: "  +  c  + ";requires  this  code. ");	  System.err.println(   "JavaScriptRepresentation    error:   "    +    c    +   ";n   ");    	non-compiled	[CE]  	71	None	replace
613	[BUG]  [BUGGY]  System.err.println( "JavaScriptRepresentation  error: "  +  c  + ";requires  an  exception. ");  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  System.err.println( "JavaScriptRepresentation  error: "  +  c  + ";requires  an  exception. ");  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	System.err.println( "JavaScriptRepresentation  error: "  +  c  + ";requires  an  exception. ");	  System.err.println(   "JavaScriptRepresentation    error:   "    +    c    +   ";n   ");    	non-compiled	[CE]  	71	None	replace
614	[BUG]  [BUGGY]  Context  lhsContext  =  Context.currentTimeMillis();  appendHexJavaScriptRepresentation(c,  sb);  [CE]  [FE]                ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  Context  lhsContext  =  Context.currentTimeMillis();  appendHexJavaScriptRepresentation(c,  sb);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	Context  lhsContext  =  Context.currentTimeMillis();  appendHexJavaScriptRepresentation(c,  sb);	  Context    lhsContext    =    Context.currentContext();    appendHexJavaScriptRepresentation(c,    sb);    	non-compiled	[CE]  	87	None	replace
615	[BUG]  [BUGGY]  System.err.println(sb  + ".JavaScriptRepresentation  ' "  +  c  + "'  is  not  supported. ");  [CE]  [FE]              ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  System.err.println(sb  + ".JavaScriptRepresentation  ' "  +  c  + "'  is  not  supported. ");  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	System.err.println(sb  + ".JavaScriptRepresentation  ' "  +  c  + "'  is  not  supported. ");	  System.err.println(sb    +   "JavaScriptRepresentation    '   "    +    c    +   "'    is    not    supported.   ");    	non-compiled	[CE]  	111	None	replace
616	[BUG]  [BUGGY]  System.err.println(sb  + "JavaScriptRepresentation  ' "  +  c  + ",'  is  not  supported. ");  [CE]  [FE]                ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  System.err.println(sb  + "JavaScriptRepresentation  ' "  +  c  + ",'  is  not  supported. ");  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	System.err.println(sb  + "JavaScriptRepresentation  ' "  +  c  + ",'  is  not  supported. ");	  System.err.println(sb    +   "JavaScriptRepresentation    '   "    +    c    +   "'    is    not    supported.   ");    	non-compiled	[CE]  	111	None	replace
617	[BUG]  [BUGGY]  System.err.println(sb  + "JAVAScriptRepresentation  ' "  +  c  + "'  is  not  supported. ");  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  System.err.println(sb  + "JAVAScriptRepresentation  ' "  +  c  + "'  is  not  supported. ");  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	System.err.println(sb  + "JAVAScriptRepresentation  ' "  +  c  + "'  is  not  supported. ");	  System.err.println(sb    +   "JavaScriptRepresentation    '   "    +    c    +   "'    is    not    supported.   ");    	non-compiled	[CE]  	111	None	replace
618	[BUG]  [BUGGY]  sb.append( ";  character  ' ");  [CE]  [FE]              ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  sb.append( ";  character  ' ");  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	sb.append( ";  character  ' ");	  sb.append(   ";    char    '   ");    	non-compiled	[CE]  	102	None	replace
619	[BUG]  [BUGGY]  sb.append(CaseConsumer.toUpperCase(c));  [CE]  [FE]                ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  sb.append(CaseConsumer.toUpperCase(c));  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	sb.append(CaseConsumer.toUpperCase(c));	  sb.append(Character.toUpperCase(c));    	non-compiled	[CE]  	42	None	replace
620	[BUG]  [BUGGY]  System.err.println( "JavaScriptRepresentation  error: "  +  c  + "  in  class ");  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  System.err.println( "JavaScriptRepresentation  error: "  +  c  + "  in  class ");  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	System.err.println( "JavaScriptRepresentation  error: "  +  c  + "  in  class ");	  System.err.println(   "JavaScriptRepresentation    error:   "    +    c    +   "n   ");    	non-compiled	[CE]  	70	None	replace
621	[BUG]  [BUGGY]  System.err.println( "JavaScriptRepresentation  error: "  +  c  + "  declared  in ");  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  System.err.println( "JavaScriptRepresentation  error: "  +  c  + "  declared  in ");  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	System.err.println( "JavaScriptRepresentation  error: "  +  c  + "  declared  in ");	  System.err.println(   "JavaScriptRepresentation    error:   "    +    c    +   "n   ");    	non-compiled	[CE]  	70	None	replace
622	[BUG]  [BUGGY]  System.err.println( "JavaScriptRepresentation  error: "  +  c  + "  on  line. ");  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  System.err.println( "JavaScriptRepresentation  error: "  +  c  + "  on  line. ");  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	System.err.println( "JavaScriptRepresentation  error: "  +  c  + "  on  line. ");	  System.err.println(   "JavaScriptRepresentation    error:   "    +    c    +   "n   ");    	non-compiled	[CE]  	70	None	replace
623	[BUG]  [BUGGY]  sb.append( ":: ");  [CE]  [FE]              ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  sb.append( ":: ");  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	sb.append( ":: ");	  sb.append(   ",   ");    	non-compiled	[CE]  	88	None	replace
624	[BUG]  [BUGGY]  System.err.println(sb  + "JavaScriptRepresentation  ' "  +  c  + "'  is  not  supported  by ");  [CE]  [FE]                ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  System.err.println(sb  + "JavaScriptRepresentation  ' "  +  c  + "'  is  not  supported  by ");  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	System.err.println(sb  + "JavaScriptRepresentation  ' "  +  c  + "'  is  not  supported  by ");	  System.err.println(   "JavaScriptRepresentation    '   "    +    c    +   "'    is    not    supported    by   ");    	non-compiled	[CE]  	98	None	replace
625	[BUG]  [BUGGY]  System.err.println( "JavaScriptRepresentation  ' "  +  c  + "'  is  not  supported  by. ");  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  System.err.println( "JavaScriptRepresentation  ' "  +  c  + "'  is  not  supported  by. ");  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	System.err.println( "JavaScriptRepresentation  ' "  +  c  + "'  is  not  supported  by. ");	  System.err.println(   "JavaScriptRepresentation    '   "    +    c    +   "'    is    not    supported    by   ");    	non-compiled	[CE]  	98	None	replace
626	[BUG]  [BUGGY]  sb.append(CATCH_OF_EXPR);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  sb.append(CATCH_OF_EXPR);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	sb.append(CATCH_OF_EXPR);	  sb.append('    }    ');    	non-compiled	[CE]  	90	None	replace
627	[BUG]  [BUGGY]  sb.append( ";no ");  [CE]  [FE]                ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  sb.append( ";no ");  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	sb.append( ";no ");	  sb.append(   ";n   ");    	non-compiled	[CE]  	89	None	replace
628	[BUG]  [BUGGY]  sb.append( ";necessary ");  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  sb.append( ";necessary ");  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	sb.append( ";necessary ");	  sb.append(   ";n   ");    	non-compiled	[CE]  	89	None	replace
629	[BUG]  [BUGGY]  Context  rhsContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(rhsContext,  sb,  c,  consumer,  lhsContext);  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  Context  rhsContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(rhsContext,  sb,  c,  consumer,  lhsContext);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	Context  rhsContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(rhsContext,  sb,  c,  consumer,  lhsContext);	  Context    rhsContext    =    Context.getCurrentContext();    appendHexJavaScriptRepresentation(rhsContext,    sb,    c,    consumer);    	non-compiled	[CE]  	13	None	replace
630	[BUG]  [BUGGY]  Context  rhsContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(rhsContext,  sb,  c,  consumer,  false);  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  Context  rhsContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(rhsContext,  sb,  c,  consumer,  false);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	Context  rhsContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(rhsContext,  sb,  c,  consumer,  false);	  Context    rhsContext    =    Context.getCurrentContext();    appendHexJavaScriptRepresentation(rhsContext,    sb,    c,    consumer);    	non-compiled	[CE]  	13	None	replace
631	[BUG]  [BUGGY]  appendHexJavaScriptRepresentation(c,  sb,  true);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  appendHexJavaScriptRepresentation(c,  sb,  true);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	appendHexJavaScriptRepresentation(c,  sb,  true);	  appendBooleanRepresentation(sb,    c,    true);    	non-compiled	[CE]  	27	None	replace
632	[BUG]  [BUGGY]  Context  lhsContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(c,  sb,  c,  message);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  Context  lhsContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(c,  sb,  c,  message);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	Context  lhsContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(c,  sb,  c,  message);	  Context    lhsContext    =    Context.getCurrentContext();    appendHexJavaScriptRepresentation(c,    sb,    message);    	non-compiled	[CE]  	20	None	replace
633	[BUG]  [BUGGY]  Context  lhsContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(c,  sb,  this,  message);  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  Context  lhsContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(c,  sb,  this,  message);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	Context  lhsContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(c,  sb,  this,  message);	  Context    lhsContext    =    Context.getCurrentContext();    appendHexJavaScriptRepresentation(c,    sb,    message);    	non-compiled	[CE]  	20	None	replace
634	[BUG]  [BUGGY]  Context  lhsContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(c,  sb,  char);  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  Context  lhsContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(c,  sb,  char);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	Context  lhsContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(c,  sb,  char);	  Context    lhsContext    =    Context.getCurrentContext();    appendHexJavaScriptRepresentation(c,    sb,    message);    	non-compiled	[CE]  	20	None	replace
635	[BUG]  [BUGGY]  System.err.println(c, "JavaScriptRepresentation  error: "  +  sb.getMessage());  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  System.err.println(c, "JavaScriptRepresentation  error: "  +  sb.getMessage());  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	System.err.println(c, "JavaScriptRepresentation  error: "  +  sb.getMessage());	  System.err.println(   "JavaScriptRepresentation    error:   "    +    sb.getMessage());    	non-compiled	[CE]  	54	None	replace
636	[BUG]  [BUGGY]  System.err.println( "JavaScriptRepresentation  error: "  +  sb,  ex.getMessage());  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  System.err.println( "JavaScriptRepresentation  error: "  +  sb,  ex.getMessage());  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	System.err.println( "JavaScriptRepresentation  error: "  +  sb,  ex.getMessage());	  System.err.println(   "JavaScriptRepresentation    error:   "    +    sb.getMessage());    	non-compiled	[CE]  	54	None	replace
637	[BUG]  [BUGGY]  Context  lhsContext  =  getCurrentContext();  currentContext.appendHexJavaScriptRepresentation(c,  sb);  [CE]  [FE]              ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  Context  lhsContext  =  getCurrentContext();  currentContext.appendHexJavaScriptRepresentation(c,  sb);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	Context  lhsContext  =  getCurrentContext();  currentContext.appendHexJavaScriptRepresentation(c,  sb);	  Context    lhsContext    =    Context.getCurrentContext();    currentContext.appendHexJavaScriptRepresentation(c,    sb);    	non-compiled	[CE]  	114	None	replace
638	[BUG]  [BUGGY]  System.err.println(c, "JavaScriptRepresentation  error: "  +  char  c);  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  System.err.println(c, "JavaScriptRepresentation  error: "  +  char  c);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	System.err.println(c, "JavaScriptRepresentation  error: "  +  char  c);	  System.err.println(   "JavaScriptRepresentation    error:   "    +    char    c);    	non-compiled	[CE]  	23	None	replace
639	[BUG]  [BUGGY]  System.err.println( "JavaScriptRepresentation  error: "  +  hex);  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  System.err.println( "JavaScriptRepresentation  error: "  +  hex);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	System.err.println( "JavaScriptRepresentation  error: "  +  hex);	  System.err.println(   "JavaScriptRepresentation    error:   "    +    char    c);    	non-compiled	[CE]  	23	None	replace
640	[BUG]  [BUGGY]  appendHexJavaScriptRepresentation(sb,  c,  JsonStringEncoder.getInstance());  [CE]  [FE]                ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  appendHexJavaScriptRepresentation(sb,  c,  JsonStringEncoder.getInstance());  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	appendHexJavaScriptRepresentation(sb,  c,  JsonStringEncoder.getInstance());	  appendHexJavaScriptRepresentation(sb,    c,    c);    	non-compiled	[CE]  	3	None	replace
641	[BUG]  [BUGGY]  appendHexJavaScriptRepresentation(sb,  c,  DEFAULT_EXPR_RESULT);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  appendHexJavaScriptRepresentation(sb,  c,  DEFAULT_EXPR_RESULT);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	appendHexJavaScriptRepresentation(sb,  c,  DEFAULT_EXPR_RESULT);	  appendHexJavaScriptRepresentation(sb,    c,    c);    	non-compiled	[CE]  	3	None	replace
642	[BUG]  [BUGGY]  appendHexJavaScriptRepresentation(sb,  c,  JsonEncoder.getInstance());  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  appendHexJavaScriptRepresentation(sb,  c,  JsonEncoder.getInstance());  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	appendHexJavaScriptRepresentation(sb,  c,  JsonEncoder.getInstance());	  appendHexJavaScriptRepresentation(sb,    c,    c);    	non-compiled	[CE]  	3	None	replace
643	[BUG]  [BUGGY]  appendDecoderRepresentation(sb,  rhsContext);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  appendDecoderRepresentation(sb,  rhsContext);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	appendDecoderRepresentation(sb,  rhsContext);	  appendHexJavaScriptRepresentation(c,    rhsContext);    	non-compiled	[CE]  	63	None	replace
644	[BUG]  [BUGGY]  Context  rhsContext  =  Context.getCurrentContext();  codeGenerator.appendHexJavaScriptRepresentation(c,  sb,  c);  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  Context  rhsContext  =  Context.getCurrentContext();  codeGenerator.appendHexJavaScriptRepresentation(c,  sb,  c);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	Context  rhsContext  =  Context.getCurrentContext();  codeGenerator.appendHexJavaScriptRepresentation(c,  sb,  c);	  Context    rhsContext    =    Context.getCurrentContext();    appendHexJavaScriptRepresentation(c,    sb,    c);    	non-compiled	[CE]  	8	None	replace
645	[BUG]  [BUGGY]  Context  rhsContext  =  Context.getCurrentContext();  currentContext.appendHexJavaScriptRepresentation(c,  sb,  c);  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  Context  rhsContext  =  Context.getCurrentContext();  currentContext.appendHexJavaScriptRepresentation(c,  sb,  c);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	Context  rhsContext  =  Context.getCurrentContext();  currentContext.appendHexJavaScriptRepresentation(c,  sb,  c);	  Context    rhsContext    =    Context.getCurrentContext();    appendHexJavaScriptRepresentation(c,    sb,    c);    	non-compiled	[CE]  	8	None	replace
646	[BUG]  [BUGGY]  AppendContext  lhsContext  =  Context.getCurrentContext();  currentContext.appendHexJavaScriptRepresentation(sb,  c);  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  AppendContext  lhsContext  =  Context.getCurrentContext();  currentContext.appendHexJavaScriptRepresentation(sb,  c);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	AppendContext  lhsContext  =  Context.getCurrentContext();  currentContext.appendHexJavaScriptRepresentation(sb,  c);	  AppendContext    lhsContext    =    Context.getCurrentContext();    appendHexJavaScriptRepresentation(sb,    c);    	non-compiled	[CE]  	36	None	replace
647	[BUG]  [BUGGY]  Context  rhsContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(c,  rhsContext,  consumer,  false);  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  Context  rhsContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(c,  rhsContext,  consumer,  false);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	Context  rhsContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(c,  rhsContext,  consumer,  false);	  Context    rhsContext    =    Context.getCurrentContext();    appendHexJavaScriptRepresentation(c,    rhsContext,    consumer);    	non-compiled	[CE]  	14	None	replace
648	[BUG]  [BUGGY]  Context  lhsContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(rhsContext,  c);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  Context  lhsContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(rhsContext,  c);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	Context  lhsContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(rhsContext,  c);	  Context    lhsContext    =    Context.getCurrentContext();    appendHexJavaScriptRepresentation(lhsContext,    c);    	non-compiled	[CE]  	93	None	replace
649	[BUG]  [BUGGY]  AppendHexJavaScriptRepresentation(c,  sb,  context);  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  AppendHexJavaScriptRepresentation(c,  sb,  context);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	AppendHexJavaScriptRepresentation(c,  sb,  context);	  AppendHexJavaScriptRepresentation(c,    rhsContext,    consumer);    	non-compiled	[CE]  	12	None	replace
650	[BUG]  [BUGGY]  AppendHexJavaScriptRepresentation(c,  sb,  user);  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  AppendHexJavaScriptRepresentation(c,  sb,  user);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	AppendHexJavaScriptRepresentation(c,  sb,  user);	  AppendHexJavaScriptRepresentation(c,    rhsContext,    consumer);    	non-compiled	[CE]  	12	None	replace
651	[BUG]  [BUGGY]  AppendHexJavaScriptRepresentation(sb,  c,  Context.getCodePointerContext());  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  AppendHexJavaScriptRepresentation(sb,  c,  Context.getCodePointerContext());  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	AppendHexJavaScriptRepresentation(sb,  c,  Context.getCodePointerContext());	  AppendHexJavaScriptRepresentation(sb,    c,    Context.getCurrentContext());    	non-compiled	[CE]  	6	None	replace
652	[BUG]  [BUGGY]  System.err.println(c, "JavaScriptRepresentation  error: "  +  sb.toString());  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  System.err.println(c, "JavaScriptRepresentation  error: "  +  sb.toString());  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	System.err.println(c, "JavaScriptRepresentation  error: "  +  sb.toString());	  System.err.println(   "JavaScriptRepresentation    error:   "    +    sb.toString());    	non-compiled	[CE]  	99	None	replace
653	[BUG]  [BUGGY]  System.err.println( "JavaScriptRepresentation  error: "  +  sb.toString()  + "n ");  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  System.err.println( "JavaScriptRepresentation  error: "  +  sb.toString()  + "n ");  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	System.err.println( "JavaScriptRepresentation  error: "  +  sb.toString()  + "n ");	  System.err.println(   "JavaScriptRepresentation    error:   "    +    sb.toString());    	non-compiled	[CE]  	99	None	replace
654	[BUG]  [BUGGY]  Context  rhsContext  =  context.getCurrentContext();  appendHexJavaScriptRepresentation(rhsContext,  char  c,  sb);  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  Context  rhsContext  =  context.getCurrentContext();  appendHexJavaScriptRepresentation(rhsContext,  char  c,  sb);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	Context  rhsContext  =  context.getCurrentContext();  appendHexJavaScriptRepresentation(rhsContext,  char  c,  sb);	  Context    rhsContext    =    context.getCurrentContext();    appendHexJavaScriptRepresentation(rhsContext,    c,    sb);    	non-compiled	[CE]  	96	None	replace
655	[BUG]  [BUGGY]  Context  lhsContext  =  Context.getCurrentContext();  codeConsumer.appendHexJavaScriptRepresentation(c,  sb,  consumer);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  Context  lhsContext  =  Context.getCurrentContext();  codeConsumer.appendHexJavaScriptRepresentation(c,  sb,  consumer);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	Context  lhsContext  =  Context.getCurrentContext();  codeConsumer.appendHexJavaScriptRepresentation(c,  sb,  consumer);	  Context    lhsContext    =    Context.getCurrentContext();    appendHexJavaScriptRepresentation(c,    sb,    consumer);    	non-compiled	[CE]  	19	None	replace
656	[BUG]  [BUGGY]  Context  lhsContext  =  Context.getCurrentContext();  codeGenerator.appendHexJavaScriptRepresentation(c,  sb,  consumer);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  Context  lhsContext  =  Context.getCurrentContext();  codeGenerator.appendHexJavaScriptRepresentation(c,  sb,  consumer);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	Context  lhsContext  =  Context.getCurrentContext();  codeGenerator.appendHexJavaScriptRepresentation(c,  sb,  consumer);	  Context    lhsContext    =    Context.getCurrentContext();    appendHexJavaScriptRepresentation(c,    sb,    consumer);    	non-compiled	[CE]  	19	None	replace
657	[BUG]  [BUGGY]  System.err.println( "JavaScriptRepresentation  ' "  +  c  + "'  is  not  supported: "  +  c);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  System.err.println( "JavaScriptRepresentation  ' "  +  c  + "'  is  not  supported: "  +  c);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	System.err.println( "JavaScriptRepresentation  ' "  +  c  + "'  is  not  supported: "  +  c);	  System.err.println(   "JavaScriptRepresentation    '   "    +    c    +   "'    is    not    supported:   "    +    ex);    	non-compiled	[CE]  	40	None	replace
658	[BUG]  [BUGGY]  System.err.println(c  + "JavaScriptRepresentation  ' "  +  c  + "'  is  not  supported: "  +  ex);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  System.err.println(c  + "JavaScriptRepresentation  ' "  +  c  + "'  is  not  supported: "  +  ex);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	System.err.println(c  + "JavaScriptRepresentation  ' "  +  c  + "'  is  not  supported: "  +  ex);	  System.err.println(   "JavaScriptRepresentation    '   "    +    c    +   "'    is    not    supported:   "    +    ex);    	non-compiled	[CE]  	40	None	replace
659	[BUG]  [BUGGY]  System.err.println( "JavaScriptRepresentation  ' "  +  c  + "'  is  not  supported: "  +  code);  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  System.err.println( "JavaScriptRepresentation  ' "  +  c  + "'  is  not  supported: "  +  code);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	System.err.println( "JavaScriptRepresentation  ' "  +  c  + "'  is  not  supported: "  +  code);	  System.err.println(   "JavaScriptRepresentation    '   "    +    c    +   "'    is    not    supported:   "    +    ex);    	non-compiled	[CE]  	40	None	replace
660	[BUG]  [BUGGY]  Context  lhsContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(sb,  c,  consumer,  rhsContext);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  Context  lhsContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(sb,  c,  consumer,  rhsContext);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	Context  lhsContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(sb,  c,  consumer,  rhsContext);	  Context    lhsContext    =    Context.getCurrentContext();    appendHexJavaScriptRepresentation(sb,    c,    consumer);    	non-compiled	[CE]  	34	None	replace
661	[BUG]  [BUGGY]  Context  lhsContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(sb,  c,  consumer,  false);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  Context  lhsContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(sb,  c,  consumer,  false);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	Context  lhsContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(sb,  c,  consumer,  false);	  Context    lhsContext    =    Context.getCurrentContext();    appendHexJavaScriptRepresentation(sb,    c,    consumer);    	non-compiled	[CE]  	34	None	replace
662	[BUG]  [BUGGY]  Context  lhsContext  =  Context.getCurrentContext();  codeConsumer.appendHexJavaScriptRepresentation(sb,  c,  consumer);  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  Context  lhsContext  =  Context.getCurrentContext();  codeConsumer.appendHexJavaScriptRepresentation(sb,  c,  consumer);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	Context  lhsContext  =  Context.getCurrentContext();  codeConsumer.appendHexJavaScriptRepresentation(sb,  c,  consumer);	  Context    lhsContext    =    Context.getCurrentContext();    appendHexJavaScriptRepresentation(sb,    c,    consumer);    	non-compiled	[CE]  	34	None	replace
663	[BUG]  [BUGGY]  Context  rhsContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(c,  sb,  consumer,  rhsContext);  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  Context  rhsContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(c,  sb,  consumer,  rhsContext);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	Context  rhsContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(c,  sb,  consumer,  rhsContext);	  Context    rhsContext    =    Context.getCurrentContext();    appendHexJavaScriptRepresentation(rhsContext,    c,    consumer,    sb);    	non-compiled	[CE]  	15	None	replace
664	[BUG]  [BUGGY]  Context  rhsContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(rhsContext,  c,  sb,  consumers);  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  Context  rhsContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(rhsContext,  c,  sb,  consumers);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	Context  rhsContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(rhsContext,  c,  sb,  consumers);	  Context    rhsContext    =    Context.getCurrentContext();    appendHexJavaScriptRepresentation(rhsContext,    c,    consumer,    sb);    	non-compiled	[CE]  	15	None	replace
665	[BUG]  [BUGGY]  System.err.println(sb, "JavaScriptRepresentation  error: "  +  c.toString());  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  System.err.println(sb, "JavaScriptRepresentation  error: "  +  c.toString());  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	System.err.println(sb, "JavaScriptRepresentation  error: "  +  c.toString());	  System.err.println(   "JavaScriptRepresentation    error:   "    +    c.toString());    	non-compiled	[CE]  	113	None	replace
666	[BUG]  [BUGGY]  System.err.println(sb, "JavaScriptRepresentation  error: "  +  c,  ex);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  System.err.println(sb, "JavaScriptRepresentation  error: "  +  c,  ex);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	System.err.println(sb, "JavaScriptRepresentation  error: "  +  c,  ex);	  System.err.println(   "JavaScriptRepresentation    error:   "    +    c,    ex);    	non-compiled	[CE]  	21	None	replace
667	[BUG]  [BUGGY]  Context  rhsContext  =  context.getCurrentContext();  appendHexJavaScriptRepresentation(c,  sb,  rhsContext);  [CE]  [FE]              ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  Context  rhsContext  =  context.getCurrentContext();  appendHexJavaScriptRepresentation(c,  sb,  rhsContext);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	Context  rhsContext  =  context.getCurrentContext();  appendHexJavaScriptRepresentation(c,  sb,  rhsContext);	  Context    rhsContext    =    Context.getCurrentContext();    appendHexJavaScriptRepresentation(c,    sb,    rhsContext);    	non-compiled	[CE]  	83	None	replace
668	[BUG]  [BUGGY]  Context  rhsContext  =  Context.getCurrentContext();  codeGenerator.appendHexJavaScriptRepresentation(c,  sb,  rhsContext);  [CE]  [FE]                ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  Context  rhsContext  =  Context.getCurrentContext();  codeGenerator.appendHexJavaScriptRepresentation(c,  sb,  rhsContext);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	Context  rhsContext  =  Context.getCurrentContext();  codeGenerator.appendHexJavaScriptRepresentation(c,  sb,  rhsContext);	  Context    rhsContext    =    Context.getCurrentContext();    appendHexJavaScriptRepresentation(c,    sb,    rhsContext);    	non-compiled	[CE]  	83	None	replace
669	[BUG]  [BUGGY]  Context  rhsContext  =  Context.getCurrentContext();  codeGenerator.appendHexJavaScriptRepresentation(rhsContext,  builder,  c);  [CE]  [FE]            ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  Context  rhsContext  =  Context.getCurrentContext();  codeGenerator.appendHexJavaScriptRepresentation(rhsContext,  builder,  c);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	Context  rhsContext  =  Context.getCurrentContext();  codeGenerator.appendHexJavaScriptRepresentation(rhsContext,  builder,  c);	  Context    rhsContext    =    Context.getCurrentContext();    appendHexJavaScriptRepresentation(rhsContext,    builder,    c);    	non-compiled	[CE]  	82	None	replace
670	[BUG]  [BUGGY]  Context  rhsContext  =  context.getCurrentContext();  appendHexJavaScriptRepresentation(rhsContext,  sb,  builder,  c);  [CE]  [FE]              ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  Context  rhsContext  =  context.getCurrentContext();  appendHexJavaScriptRepresentation(rhsContext,  sb,  builder,  c);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	Context  rhsContext  =  context.getCurrentContext();  appendHexJavaScriptRepresentation(rhsContext,  sb,  builder,  c);	  Context    rhsContext    =    Context.getCurrentContext();    appendHexJavaScriptRepresentation(rhsContext,    builder,    c);    	non-compiled	[CE]  	82	None	replace
671	[BUG]  [BUGGY]  System.err.println(c  + ".JavaScriptRepresentation  Exception: "  +  c);  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  System.err.println(c  + ".JavaScriptRepresentation  Exception: "  +  c);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	System.err.println(c  + ".JavaScriptRepresentation  Exception: "  +  c);	  System.err.println(c    +   "JavaScriptRepresentation    Exception:   "    +    c);    	non-compiled	[CE]  	91	None	replace
672	[BUG]  [BUGGY]  AppendHexJavaScriptRepresentation(sb,  Context.getCodeContext(),  c);  [CE]  [FE]              ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  AppendHexJavaScriptRepresentation(sb,  Context.getCodeContext(),  c);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	AppendHexJavaScriptRepresentation(sb,  Context.getCodeContext(),  c);	  AppendHexJavaScriptRepresentation(sb,    Context.getCurrentContext(),    c);    	non-compiled	[CE]  	65	None	replace
673	[BUG]  [BUGGY]  AppendHexJavaScriptRepresentation(sb,  Context.currentToken(),  c);  [CE]  [FE]                ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  AppendHexJavaScriptRepresentation(sb,  Context.currentToken(),  c);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	AppendHexJavaScriptRepresentation(sb,  Context.currentToken(),  c);	  AppendHexJavaScriptRepresentation(sb,    Context.getCurrentContext(),    c);    	non-compiled	[CE]  	65	None	replace
674	[BUG]  [BUGGY]  AppendHexJavaScriptRepresentation(sb,  Context.getCodeInstantiator(),  c);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  AppendHexJavaScriptRepresentation(sb,  Context.getCodeInstantiator(),  c);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	AppendHexJavaScriptRepresentation(sb,  Context.getCodeInstantiator(),  c);	  AppendHexJavaScriptRepresentation(sb,    Context.getCurrentContext(),    c);    	non-compiled	[CE]  	65	None	replace
675	[BUG]  [BUGGY]  AppendHexJavaScriptRepresentation(sb,  Context.getCodec(),  c);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  AppendHexJavaScriptRepresentation(sb,  Context.getCodec(),  c);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	AppendHexJavaScriptRepresentation(sb,  Context.getCodec(),  c);	  AppendHexJavaScriptRepresentation(sb,    Context.getCurrentContext(),    c);    	non-compiled	[CE]  	65	None	replace
676	[BUG]  [BUGGY]  Context  lhsContext  =  context.getCurrentContext();  appendHexJavaScriptRepresentation(c,  sb,  c);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  Context  lhsContext  =  context.getCurrentContext();  appendHexJavaScriptRepresentation(c,  sb,  c);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	Context  lhsContext  =  context.getCurrentContext();  appendHexJavaScriptRepresentation(c,  sb,  c);	  Context    lhsContext    =    Context.getCurrentContext();    appendHexJavaScriptRepresentation(c,    sb,    c);    	non-compiled	[CE]  	18	None	replace
677	[BUG]  [BUGGY]  appendHexJavaScriptRepresentation(c,  sb,  Color.black);  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  appendHexJavaScriptRepresentation(c,  sb,  Color.black);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	appendHexJavaScriptRepresentation(c,  sb,  Color.black);	  appendBooleanRepresentation(sb,    c,    Color.black);    	non-compiled	[CE]  	30	None	replace
678	[BUG]  [BUGGY]  appendHexJavaScriptRepresentation(sb,  c,  2);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  appendHexJavaScriptRepresentation(sb,  c,  2);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	appendHexJavaScriptRepresentation(sb,  c,  2);	  appendHexJavaScriptRepresentation(sb,    c,    consumer);    	non-compiled	[CE]  	11	None	replace
679	[BUG]  [BUGGY]  appendHexJavaScriptRepresentation(sb,  c,  consumer,  false);  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  appendHexJavaScriptRepresentation(sb,  c,  consumer,  false);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	appendHexJavaScriptRepresentation(sb,  c,  consumer,  false);	  appendHexJavaScriptRepresentation(sb,    c,    consumer);    	non-compiled	[CE]  	11	None	replace
680	[BUG]  [BUGGY]  appendDecoder(sb,  c);  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  appendDecoder(sb,  c);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	appendDecoder(sb,  c);	  append(sb,    c);    	non-compiled	[CE]  	75	None	replace
681	[BUG]  [BUGGY]  appendContext(sb,  c);  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  appendContext(sb,  c);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	appendContext(sb,  c);	  append(sb,    c);    	non-compiled	[CE]  	75	None	replace
682	[BUG]  [BUGGY]  System.err.println( "JavaScriptRepresentation  ' "  +  c  + "'  was  not  supported. ");  [CE]  [FE]              ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  System.err.println( "JavaScriptRepresentation  ' "  +  c  + "'  was  not  supported. ");  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	System.err.println( "JavaScriptRepresentation  ' "  +  c  + "'  was  not  supported. ");	  System.err.println(   "JavaScriptRepresentation    '   "    +    c    +   ",'    is    not    supported.   ");    	non-compiled	[CE]  	37	None	replace
683	[BUG]  [BUGGY]  Context  rhsContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(rhsContext,  c,  sb,  c,  consumer);  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  Context  rhsContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(rhsContext,  c,  sb,  c,  consumer);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	Context  rhsContext  =  Context.getCurrentContext();  appendHexJavaScriptRepresentation(rhsContext,  c,  sb,  c,  consumer);	  Context    rhsContext    =    Context.getCurrentContext();    appendHexJavaScriptRepresentation(rhsContext,    c,    sb,    c);    	non-compiled	[CE]  	7	None	replace
684	[BUG]  [BUGGY]  Context  rhsContext  =  Context.getCurrentContext();  codeGenerator.appendHexJavaScriptRepresentation(sb,  c,  rhsContext);  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  Context  rhsContext  =  Context.getCurrentContext();  codeGenerator.appendHexJavaScriptRepresentation(sb,  c,  rhsContext);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	Context  rhsContext  =  Context.getCurrentContext();  codeGenerator.appendHexJavaScriptRepresentation(sb,  c,  rhsContext);	  Context    rhsContext    =    Context.getCurrentContext();    appendHexJavaScriptRepresentation(rhsContext,    c,    sb,    c);    	non-compiled	[CE]  	7	None	replace
685	[BUG]  [BUGGY]  Context  lhsContext  =  Context.getCurrentContextForCodeInsertion(c);  [CE]  [FE]                ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  Context  lhsContext  =  Context.getCurrentContextForCodeInsertion(c);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	Context  lhsContext  =  Context.getCurrentContextForCodeInsertion(c);	  Context    lhsContext    =    Context.getCurrentContext();    	non-compiled	[CE]  	68	None	replace
686	[BUG]  [BUGGY]  System.err.println(c, "JavaScriptRepresentation  Exception: "  +  ex);  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  System.err.println(c, "JavaScriptRepresentation  Exception: "  +  ex);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	System.err.println(c, "JavaScriptRepresentation  Exception: "  +  ex);	  System.err.println(   "JavaScriptRepresentation    Exception:   "    +    ex);    	non-compiled	[CE]  	49	None	replace
687	[BUG]  [BUGGY]  appendHexJavaScriptRepresentation(sb,  Context.getCodeInsertionContext());  [CE]  [FE]            ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  appendHexJavaScriptRepresentation(sb,  Context.getCodeInsertionContext());  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	appendHexJavaScriptRepresentation(sb,  Context.getCodeInsertionContext());	  appendHexJavaScriptRepresentation(sb,    Context.getCurrentContext());    	non-compiled	[CE]  	64	None	replace
688	[BUG]  [BUGGY]  appendHexJavaScriptRepresentation(sb,  Context.getCodec());  [CE]  [FE]              ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  appendHexJavaScriptRepresentation(sb,  Context.getCodec());  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	appendHexJavaScriptRepresentation(sb,  Context.getCodec());	  appendHexJavaScriptRepresentation(sb,    Context.getCurrentContext());    	non-compiled	[CE]  	64	None	replace
689	[BUG]  [BUGGY]  appendDecoderRepresentation(sb,  c,  Consumer.EXPR_RESULT);  [CE]  [FE]            ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  appendDecoderRepresentation(sb,  c,  Consumer.EXPR_RESULT);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	appendDecoderRepresentation(sb,  c,  Consumer.EXPR_RESULT);	  appendDecoderRepresentation(sb,    c);    	non-compiled	[CE]  	76	None	replace
690	[BUG]  [BUGGY]  appendDecoderRepresentation(sb,  c,  Consumer.HARD_OF_EXPR);  [CE]  [FE]              ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  appendDecoderRepresentation(sb,  c,  Consumer.HARD_OF_EXPR);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	appendDecoderRepresentation(sb,  c,  Consumer.HARD_OF_EXPR);	  appendDecoderRepresentation(sb,    c);    	non-compiled	[CE]  	76	None	replace
691	[BUG]  [BUGGY]  Context.report(JSError.make(lhsContext,  c,  START_OF_EXPR));  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  Context.report(JSError.make(lhsContext,  c,  START_OF_EXPR));  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	Context.report(JSError.make(lhsContext,  c,  START_OF_EXPR));	  Context.report(JSError.make(lhsContext,    c,    IN_FOR_INIT_CLAUSE));    	non-compiled	[CE]  	103	None	replace
692	[BUG]  [BUGGY]  Context.report(JSError.make(lhsContext,  c,  STATEMENT_OF_EXPR));  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  Context.report(JSError.make(lhsContext,  c,  STATEMENT_OF_EXPR));  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	Context.report(JSError.make(lhsContext,  c,  STATEMENT_OF_EXPR));	  Context.report(JSError.make(lhsContext,    c,    IN_FOR_INIT_CLAUSE));    	non-compiled	[CE]  	103	None	replace
693	[BUG]  [BUGGY]  Context.report(JSError.make(lhsContext,  c,  BAD_INIT_CLAUSE));  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  Context.report(JSError.make(lhsContext,  c,  BAD_INIT_CLAUSE));  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	Context.report(JSError.make(lhsContext,  c,  BAD_INIT_CLAUSE));	  Context.report(JSError.make(lhsContext,    c,    IN_FOR_INIT_CLAUSE));    	non-compiled	[CE]  	103	None	replace
694	[BUG]  [BUGGY]  Context  currentContext  =  Context.getCurrentContext();  sb.appendHexJavaScriptRepresentation(currentContext,  c,  sb);  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  Context  currentContext  =  Context.getCurrentContext();  sb.appendHexJavaScriptRepresentation(currentContext,  c,  sb);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	Context  currentContext  =  Context.getCurrentContext();  sb.appendHexJavaScriptRepresentation(currentContext,  c,  sb);	  Context    currentContext    =    Context.getCurrentContext();    appendHexJavaScriptRepresentation(currentContext,    c,    sb);    	non-compiled	[CE]  	95	None	replace
695	[BUG]  [BUGGY]  Context  currentContext  =  Context.getCurrentContext();  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  Context  currentContext  =  Context.getCurrentContext();  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	Context  currentContext  =  Context.getCurrentContext();	  Context    currentContext    =    Context.getCurrentContext();    appendHexJavaScriptRepresentation(currentContext,    c,    sb);    	non-compiled	[CE]  	95	None	replace
696	[BUG]  [BUGGY]  Context  currentContext  =  getCurrentContext();  appendHexJavaScriptRepresentation(currentContext,  c,  sb);  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  Context  currentContext  =  getCurrentContext();  appendHexJavaScriptRepresentation(currentContext,  c,  sb);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	Context  currentContext  =  getCurrentContext();  appendHexJavaScriptRepresentation(currentContext,  c,  sb);	  Context    currentContext    =    Context.getCurrentContext();    appendHexJavaScriptRepresentation(currentContext,    c,    sb);    	non-compiled	[CE]  	95	None	replace
697	[BUG]  [BUGGY]  System.err.println(sb, "JavaScriptRepresentation  Exception: "  +  char);  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  System.err.println(sb, "JavaScriptRepresentation  Exception: "  +  char);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	System.err.println(sb, "JavaScriptRepresentation  Exception: "  +  char);	  System.err.println(   "JavaScriptRepresentation    Exception:   "    +    char);    	non-compiled	[CE]  	107	None	replace
698	[BUG]  [BUGGY]  Context  currentContext  =  lhsContext.getCurrentContext();  appendHexJavaScriptRepresentation(currentContext,  sb,  c);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  Context  currentContext  =  lhsContext.getCurrentContext();  appendHexJavaScriptRepresentation(currentContext,  sb,  c);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	Context  currentContext  =  lhsContext.getCurrentContext();  appendHexJavaScriptRepresentation(currentContext,  sb,  c);	  Context    currentContext    =    Context.getCurrentContext();    appendHexJavaScriptRepresentation(currentContext,    sb,    c);    	non-compiled	[CE]  	85	None	replace
699	[BUG]  [BUGGY]  cc.appendBooleanRepresentation(sb,  false);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      private  static  void  appendHexJavaScriptRepresentation(  StringBuilder  sb,  char  c)  {  try  {  appendHexJavaScriptRepresentation(c,  sb);  }  catch  (IOException  ex)  {  throw  new  RuntimeException(ex);      [BUGGY]  cc.appendBooleanRepresentation(sb,  false);  [BUGGY]      }  [CLASS]  CodeGenerator  Context  [METHOD]  appendHexJavaScriptRepresentation  [RETURN_TYPE]  void  StringBuilder  sb  char  c  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  currentContext  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  CodeConsumer  cc  consumer  IOException  ex  CharsetEncoder  outputCharsetEncoder  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	1164	1164	1	replace	cc.appendBooleanRepresentation(sb,  false);	  appendBooleanRepresentation(sb,    c,    false);    	non-compiled	[CE]  	28	None	replace
