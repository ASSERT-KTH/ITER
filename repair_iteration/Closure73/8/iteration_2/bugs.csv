bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  StringBuilder  sb  =  new  StringBuilder(c.canEncode(outputCharsetEncoder));  [CE]  illegal  start  of  type  [FE]                  ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  StringBuilder  sb  =  new  StringBuilder(c.canEncode(outputCharsetEncoder));  [BUGGY]    if  (c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	StringBuilder  sb  =  new  StringBuilder(c.canEncode(outputCharsetEncoder));	      StringBuilder    sb    =    new    StringBuilder(outputCharsetEncoder.canEncode(c));    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
2	[BUG]  [BUGGY]  StringBuilder  sb  =  new  StringBuilder(outputCharsetEncoder.charAt(c));  [CE]  illegal  start  of  type  [FE]                    ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  StringBuilder  sb  =  new  StringBuilder(outputCharsetEncoder.charAt(c));  [BUGGY]    if  (c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	StringBuilder  sb  =  new  StringBuilder(outputCharsetEncoder.charAt(c));	      StringBuilder    sb    =    new    StringBuilder(outputCharsetEncoder.canEncode(c));    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
3	[BUG]  [BUGGY]  StringBuilder  sb  =  new  StringBuilder(outputCharsetEncoder.appendHexJavaScriptRepresentation(c));  [CE]  illegal  start  of  type  [FE]                      ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  StringBuilder  sb  =  new  StringBuilder(outputCharsetEncoder.appendHexJavaScriptRepresentation(c));  [BUGGY]    if  (c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	StringBuilder  sb  =  new  StringBuilder(outputCharsetEncoder.appendHexJavaScriptRepresentation(c));	      StringBuilder    sb    =    new    StringBuilder(outputCharsetEncoder.canEncode(c));    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
4	[BUG]  [BUGGY]  StringBuilder  sb  =  new  StringBuilder(outputCharsetEncoder.canEncode(c)+  quote);  [CE]  illegal  start  of  type  [FE]                        ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  StringBuilder  sb  =  new  StringBuilder(outputCharsetEncoder.canEncode(c)+  quote);  [BUGGY]    if  (c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	StringBuilder  sb  =  new  StringBuilder(outputCharsetEncoder.canEncode(c)+  quote);	      StringBuilder    sb    =    new    StringBuilder(outputCharsetEncoder.canEncode(c));    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
5	[BUG]  [BUGGY]  StringBuilder  sb  =  new  StringBuilder(c  +  outputCharsetEncoder.canEncode(c));  [CE]  illegal  start  of  type  [FE]                          ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  StringBuilder  sb  =  new  StringBuilder(c  +  outputCharsetEncoder.canEncode(c));  [BUGGY]    if  (c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	StringBuilder  sb  =  new  StringBuilder(c  +  outputCharsetEncoder.canEncode(c));	      StringBuilder    sb    =    new    StringBuilder(outputCharsetEncoder.canEncode(c));    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
6	[BUG]  [BUGGY]  StringBuilder  sb  =  new  StringBuilder(c,  outputCharsetEncoder.canEncode(c));  [CE]  illegal  start  of  type  [FE]                            ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  StringBuilder  sb  =  new  StringBuilder(c,  outputCharsetEncoder.canEncode(c));  [BUGGY]    if  (c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	StringBuilder  sb  =  new  StringBuilder(c,  outputCharsetEncoder.canEncode(c));	      StringBuilder    sb    =    new    StringBuilder(outputCharsetEncoder.canEncode(c));    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
7	[BUG]  [BUGGY]  StringBuilder  sb  =  new  StringBuilder(outputCharsetEncoder.appendHexJavaScriptRepresentation(c,  quote));  [CE]  illegal  start  of  type  [FE]                              ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  StringBuilder  sb  =  new  StringBuilder(outputCharsetEncoder.appendHexJavaScriptRepresentation(c,  quote));  [BUGGY]    if  (c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	StringBuilder  sb  =  new  StringBuilder(outputCharsetEncoder.appendHexJavaScriptRepresentation(c,  quote));	      StringBuilder    sb    =    new    StringBuilder(outputCharsetEncoder.canEncode(c));    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
8	[BUG]  [BUGGY]  StringBuilder  sb  =  new  StringBuilder(outputCharsetEncoder.charAt(0));  [CE]  illegal  start  of  type  [FE]                                ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  StringBuilder  sb  =  new  StringBuilder(outputCharsetEncoder.charAt(0));  [BUGGY]    if  (c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	StringBuilder  sb  =  new  StringBuilder(outputCharsetEncoder.charAt(0));	      StringBuilder    sb    =    new    StringBuilder(outputCharsetEncoder.canEncode(c));    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
9	[BUG]  [BUGGY]  StringBuilder  sb  =  new  StringBuilder(outputCharsetEncoder.getHexJavaScriptRepresentation());  [CE]  orphaned  case  [FE]                                  ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  StringBuilder  sb  =  new  StringBuilder(outputCharsetEncoder.getHexJavaScriptRepresentation());  [BUGGY]    if  (c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	StringBuilder  sb  =  new  StringBuilder(outputCharsetEncoder.getHexJavaScriptRepresentation());	      StringBuilder    sb    =    new    StringBuilder(outputCharsetEncoder.canEncode(c));    	non-compiled	[CE]  orphaned  case	25	None	replace
10	[BUG]  [BUGGY]  if(c  >=  0x1f  ||  c  <=  0x7f)  {  [CE]  orphaned  case  [FE]        ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  if(c  >=  0x1f  ||  c  <=  0x7f)  {  [BUGGY]    sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	if(c  >=  0x1f  ||  c  <=  0x7f)  {	  if(c    >    0x1f    ||    c    <=    0x7f)    {    	non-compiled	[CE]  orphaned  case	13	None	replace
11	[BUG]  [BUGGY]  if(c  <  0x7f  ||  c  <=  0x1f)  {  [CE]  orphaned  case  [FE]          ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  if(c  <  0x7f  ||  c  <=  0x1f)  {  [BUGGY]    sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	if(c  <  0x7f  ||  c  <=  0x1f)  {	  if(c    >    0x1f    ||    c    <=    0x7f)    {    	non-compiled	[CE]  orphaned  case	13	None	replace
12	[BUG]  [BUGGY]  if(c  ==  0x1f  ||  c  <=  0x7f)  {  [CE]  orphaned  case  [FE]            ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  if(c  ==  0x1f  ||  c  <=  0x7f)  {  [BUGGY]    sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	if(c  ==  0x1f  ||  c  <=  0x7f)  {	  if(c    >    0x1f    ||    c    <=    0x7f)    {    	non-compiled	[CE]  orphaned  case	13	None	replace
13	[BUG]  [BUGGY]  if(c!=  0x1f  ||  c  <=  0x7f)  {  [CE]  orphaned  case  [FE]              ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  if(c!=  0x1f  ||  c  <=  0x7f)  {  [BUGGY]    sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	if(c!=  0x1f  ||  c  <=  0x7f)  {	  if(c    >    0x1f    ||    c    <=    0x7f)    {    	non-compiled	[CE]  orphaned  case	13	None	replace
14	[BUG]  [BUGGY]  if(c  <=  0x1f  ||  c  <=  0x7f)  {  [CE]  orphaned  case  [FE]                ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  if(c  <=  0x1f  ||  c  <=  0x7f)  {  [BUGGY]    sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	if(c  <=  0x1f  ||  c  <=  0x7f)  {	  if(c    >    0x1f    ||    c    <=    0x7f)    {    	non-compiled	[CE]  orphaned  case	13	None	replace
15	[BUG]  [BUGGY]  if(c  <  0x7f  ||  c  >  0x1f)  {  [CE]  orphaned  case  [FE]                  ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  if(c  <  0x7f  ||  c  >  0x1f)  {  [BUGGY]    sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	if(c  <  0x7f  ||  c  >  0x1f)  {	  if(c    >    0x1f    ||    c    <=    0x7f)    {    	non-compiled	[CE]  orphaned  case	13	None	replace
16	[BUG]  [BUGGY]  if(c  >  0x1f  ||  c  >=  0x7f)  {  [CE]  orphaned  case  [FE]                    ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  if(c  >  0x1f  ||  c  >=  0x7f)  {  [BUGGY]    sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	if(c  >  0x1f  ||  c  >=  0x7f)  {	  if(c    >    0x1f    ||    c    <=    0x7f)    {    	non-compiled	[CE]  orphaned  case	13	None	replace
17	[BUG]  [BUGGY]  StringBuilder  sb  =  new  StringBuilder(outputCharsetEncoder.encode(c)+  quote);  [CE]  orphaned  case  [FE]          ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  StringBuilder  sb  =  new  StringBuilder(outputCharsetEncoder.encode(c)+  quote);  [BUGGY]    if  (c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	StringBuilder  sb  =  new  StringBuilder(outputCharsetEncoder.encode(c)+  quote);	      StringBuilder    sb    =    new    StringBuilder(outputCharsetEncoder.encode(c));    	non-compiled	[CE]  orphaned  case	21	None	replace
18	[BUG]  [BUGGY]  StringBuilder  sb  =  new  StringBuilder(c.encode(outputCharsetEncoder));  [CE]  orphaned  case  [FE]            ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  StringBuilder  sb  =  new  StringBuilder(c.encode(outputCharsetEncoder));  [BUGGY]    if  (c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	StringBuilder  sb  =  new  StringBuilder(c.encode(outputCharsetEncoder));	      StringBuilder    sb    =    new    StringBuilder(outputCharsetEncoder.encode(c));    	non-compiled	[CE]  orphaned  case	21	None	replace
19	[BUG]  [BUGGY]  StringBuilder  sb  =  new  StringBuilder(outputCharsetEncoder.encodeHexJavaScriptRepresentation(c));  [CE]  orphaned  case  [FE]              ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  StringBuilder  sb  =  new  StringBuilder(outputCharsetEncoder.encodeHexJavaScriptRepresentation(c));  [BUGGY]    if  (c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	StringBuilder  sb  =  new  StringBuilder(outputCharsetEncoder.encodeHexJavaScriptRepresentation(c));	      StringBuilder    sb    =    new    StringBuilder(outputCharsetEncoder.encode(c));    	non-compiled	[CE]  orphaned  case	21	None	replace
20	[BUG]  [BUGGY]  StringBuilder  sb  =  new  StringBuilder(outputCharsetEncoder.encode(c)+  1);  [CE]  orphaned  case  [FE]                ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  StringBuilder  sb  =  new  StringBuilder(outputCharsetEncoder.encode(c)+  1);  [BUGGY]    if  (c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	StringBuilder  sb  =  new  StringBuilder(outputCharsetEncoder.encode(c)+  1);	      StringBuilder    sb    =    new    StringBuilder(outputCharsetEncoder.encode(c));    	non-compiled	[CE]  orphaned  case	21	None	replace
21	[BUG]  [BUGGY]  StringBuilder  sb  =  new  StringBuilder(outputCharsetEncoder.encode(c,  quote));  [CE]  orphaned  case  [FE]                  ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  StringBuilder  sb  =  new  StringBuilder(outputCharsetEncoder.encode(c,  quote));  [BUGGY]    if  (c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	StringBuilder  sb  =  new  StringBuilder(outputCharsetEncoder.encode(c,  quote));	      StringBuilder    sb    =    new    StringBuilder(outputCharsetEncoder.encode(c));    	non-compiled	[CE]  orphaned  case	21	None	replace
22	[BUG]  [BUGGY]  sb  =  new  StringBuilder(outputCharsetEncoder.encode(c),  quote);  [CE]  orphaned  case  [FE]                    ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  sb  =  new  StringBuilder(outputCharsetEncoder.encode(c),  quote);  [BUGGY]    if  (c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	sb  =  new  StringBuilder(outputCharsetEncoder.encode(c),  quote);	      StringBuilder    sb    =    new    StringBuilder(outputCharsetEncoder.encode(c));    	non-compiled	[CE]  orphaned  case	21	None	replace
23	[BUG]  [BUGGY]  StringBuilder  sb  =  new  StringBuilder(c  +  outputCharsetEncoder.encode(c));  [CE]  orphaned  case  [FE]                      ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  StringBuilder  sb  =  new  StringBuilder(c  +  outputCharsetEncoder.encode(c));  [BUGGY]    if  (c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	StringBuilder  sb  =  new  StringBuilder(c  +  outputCharsetEncoder.encode(c));	      StringBuilder    sb    =    new    StringBuilder(outputCharsetEncoder.encode(c));    	non-compiled	[CE]  orphaned  case	21	None	replace
24	[BUG]  [BUGGY]  StringBuilder  sb  =  new  StringBuilder(outputCharsetEncoder.encode(c),  quotes);  [CE]  orphaned  case  [FE]                        ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  StringBuilder  sb  =  new  StringBuilder(outputCharsetEncoder.encode(c),  quotes);  [BUGGY]    if  (c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	StringBuilder  sb  =  new  StringBuilder(outputCharsetEncoder.encode(c),  quotes);	      StringBuilder    sb    =    new    StringBuilder(outputCharsetEncoder.encode(c));    	non-compiled	[CE]  orphaned  case	21	None	replace
25	[BUG]  [BUGGY]  CharsetEncoder  cc  =  getCharsetEncoder(outputCharsetEncoder);  [CE]  orphaned  case  [FE]                              ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  CharsetEncoder  cc  =  getCharsetEncoder(outputCharsetEncoder);  [BUGGY]    if  (c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	CharsetEncoder  cc  =  getCharsetEncoder(outputCharsetEncoder);	      CharsetEncoder    cc    =    getCharsetEncoder();    	non-compiled	[CE]  orphaned  case	12	None	replace
26	[BUG]  [BUGGY]  CharsetEncoder  cc  =  getCharsetEncoder(c);  [CE]  orphaned  case  [FE]                                ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  CharsetEncoder  cc  =  getCharsetEncoder(c);  [BUGGY]    if  (c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	CharsetEncoder  cc  =  getCharsetEncoder(c);	      CharsetEncoder    cc    =    getCharsetEncoder();    	non-compiled	[CE]  orphaned  case	12	None	replace
27	[BUG]  [BUGGY]  CharsetEncoder  cc  =  getCharsetEncoder(false);  [CE]  orphaned  case  [FE]                                  ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  CharsetEncoder  cc  =  getCharsetEncoder(false);  [BUGGY]    if  (c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	CharsetEncoder  cc  =  getCharsetEncoder(false);	      CharsetEncoder    cc    =    getCharsetEncoder();    	non-compiled	[CE]  orphaned  case	12	None	replace
28	[BUG]  [BUGGY]  CharsetEncoder  cc  =  getCharsetEncoder(context);  [CE]  orphaned  case  [FE]                                    ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  CharsetEncoder  cc  =  getCharsetEncoder(context);  [BUGGY]    if  (c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	CharsetEncoder  cc  =  getCharsetEncoder(context);	      CharsetEncoder    cc    =    getCharsetEncoder();    	non-compiled	[CE]  orphaned  case	12	None	replace
29	[BUG]  [BUGGY]  CharsetEncoder  cc  =  getCharsetEncoder(consume);  [CE]  orphaned  case  [FE]                                      ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  CharsetEncoder  cc  =  getCharsetEncoder(consume);  [BUGGY]    if  (c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	CharsetEncoder  cc  =  getCharsetEncoder(consume);	      CharsetEncoder    cc    =    getCharsetEncoder();    	non-compiled	[CE]  orphaned  case	12	None	replace
30	[BUG]  [BUGGY]  CharsetEncoder  cc  =  getCurrentCharsetEncoder();  [CE]  orphaned  case  [FE]                                        ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  CharsetEncoder  cc  =  getCurrentCharsetEncoder();  [BUGGY]    if  (c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	CharsetEncoder  cc  =  getCurrentCharsetEncoder();	      CharsetEncoder    cc    =    getCharsetEncoder();    	non-compiled	[CE]  orphaned  case	12	None	replace
31	[BUG]  [BUGGY]  CharsetEncoder  cc  =  getCharsetEncoder(quote);  [CE]  orphaned  case  [FE]                                          ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  CharsetEncoder  cc  =  getCharsetEncoder(quote);  [BUGGY]    if  (c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	CharsetEncoder  cc  =  getCharsetEncoder(quote);	      CharsetEncoder    cc    =    getCharsetEncoder();    	non-compiled	[CE]  orphaned  case	12	None	replace
32	[BUG]  [BUGGY]  CharsetEncoder  cc  =  getOutputCharsetEncoder();  [CE]  orphaned  case  [FE]                                            ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  CharsetEncoder  cc  =  getOutputCharsetEncoder();  [BUGGY]    if  (c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	CharsetEncoder  cc  =  getOutputCharsetEncoder();	      CharsetEncoder    cc    =    getCharsetEncoder();    	non-compiled	[CE]  orphaned  case	12	None	replace
33	[BUG]  [BUGGY]  CharsetEncoder  cc  =  getCharsetEncoder(sb);  [CE]  orphaned  case  [FE]                                              ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  CharsetEncoder  cc  =  getCharsetEncoder(sb);  [BUGGY]    if  (c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	CharsetEncoder  cc  =  getCharsetEncoder(sb);	      CharsetEncoder    cc    =    getCharsetEncoder();    	non-compiled	[CE]  orphaned  case	12	None	replace
34	[BUG]  [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder;  [CE]  orphaned  case  [FE]                                                ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder;  [BUGGY]    if  (c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	CharsetEncoder  cc  =  outputCharsetEncoder;	      CharsetEncoder    cc    =    getCharsetEncoder();    	non-compiled	[CE]  orphaned  case	12	None	replace
35	[BUG]  [BUGGY]  if(c  >=  0x1f  &&  c  <  0x7f)  {  [CE]  orphaned  case  [FE]                  ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  if(c  >=  0x1f  &&  c  <  0x7f)  {  [BUGGY]    sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	if(c  >=  0x1f  &&  c  <  0x7f)  {	  if(c    >=    0x1f    &&    c    <=    0x7f)    {    	non-compiled	[CE]  orphaned  case	18	None	replace
36	[BUG]  [BUGGY]  if(c!=  0x1f  &&  c  <=  0x7f)  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  if(c!=  0x1f  &&  c  <=  0x7f)  {  [BUGGY]    sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	if(c!=  0x1f  &&  c  <=  0x7f)  {	  if(c    >=    0x1f    &&    c    <=    0x7f)    {    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
37	[BUG]  [BUGGY]  if(c  ==  0x1f  &&  c  <=  0x7f)  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  if(c  ==  0x1f  &&  c  <=  0x7f)  {  [BUGGY]    sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	if(c  ==  0x1f  &&  c  <=  0x7f)  {	  if(c    >=    0x1f    &&    c    <=    0x7f)    {    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
38	[BUG]  [BUGGY]  if(c  >>  0x1f  &&  c  <=  0x7f)  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  if(c  >>  0x1f  &&  c  <=  0x7f)  {  [BUGGY]    sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	if(c  >>  0x1f  &&  c  <=  0x7f)  {	  if(c    >=    0x1f    &&    c    <=    0x7f)    {    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
39	[BUG]  [BUGGY]  if(c  >=  0x1f  &&  c  <=  0x7e)  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  if(c  >=  0x1f  &&  c  <=  0x7e)  {  [BUGGY]    sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	if(c  >=  0x1f  &&  c  <=  0x7e)  {	  if(c    >=    0x1f    &&    c    <=    0x7f)    {    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
40	[BUG]  [BUGGY]  if(c  >=  0x1f  &&  c  <=  0x7f  ||  c  >  0x7f)  {  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  if(c  >=  0x1f  &&  c  <=  0x7f  ||  c  >  0x7f)  {  [BUGGY]    sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	if(c  >=  0x1f  &&  c  <=  0x7f  ||  c  >  0x7f)  {	  if(c    >=    0x1f    &&    c    <=    0x7f)    {    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
41	[BUG]  [BUGGY]  if(c  <  0x1f  ||  c  <  0x7f)  {  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  if(c  <  0x1f  ||  c  <  0x7f)  {  [BUGGY]    sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	if(c  <  0x1f  ||  c  <  0x7f)  {	  if(c    >    0x1f    ||    c    <    0x7f)    {    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
42	[BUG]  [BUGGY]  if(c  <  0x1f  ||  c  >  0x7f)  {  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  if(c  <  0x1f  ||  c  >  0x7f)  {  [BUGGY]    sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	if(c  <  0x1f  ||  c  >  0x7f)  {	  if(c    >    0x1f    ||    c    <    0x7f)    {    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
43	[BUG]  [BUGGY]  if(c  >=  0x1f  ||  c  <  0x7f)  {  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  if(c  >=  0x1f  ||  c  <  0x7f)  {  [BUGGY]    sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	if(c  >=  0x1f  ||  c  <  0x7f)  {	  if(c    >    0x1f    ||    c    <    0x7f)    {    	non-compiled	[CE]  ';'  expected	29	None	replace
44	[BUG]  [BUGGY]  if(c  ==  0x1f  ||  c  <  0x7f)  {  [CE]  ';'  expected  [FE]              ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  if(c  ==  0x1f  ||  c  <  0x7f)  {  [BUGGY]    sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	if(c  ==  0x1f  ||  c  <  0x7f)  {	  if(c    >    0x1f    ||    c    <    0x7f)    {    	non-compiled	[CE]  ';'  expected	29	None	replace
45	[BUG]  [BUGGY]  if(c  >  0x1f  ||  c  <  0x7f  ||!outputCharsetEncoder.canEncode(c))  {  [CE]  ';'  expected  [FE]                ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  if(c  >  0x1f  ||  c  <  0x7f  ||!outputCharsetEncoder.canEncode(c))  {  [BUGGY]    sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	if(c  >  0x1f  ||  c  <  0x7f  ||!outputCharsetEncoder.canEncode(c))  {	  if(c    >    0x1f    ||    c    <    0x7f)    {    	non-compiled	[CE]  ';'  expected	29	None	replace
46	[BUG]  [BUGGY]  if(c!=  0x1f  ||  c  <  0x7f)  {  [CE]  ';'  expected  [FE]                  ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  if(c!=  0x1f  ||  c  <  0x7f)  {  [BUGGY]    sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	if(c!=  0x1f  ||  c  <  0x7f)  {	  if(c    >    0x1f    ||    c    <    0x7f)    {    	non-compiled	[CE]  ';'  expected	29	None	replace
47	[BUG]  [BUGGY]  String  c  =  outputCharsetEncoder.canEncode(sb);  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  String  c  =  outputCharsetEncoder.canEncode(sb);  [BUGGY]    if  (c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	String  c  =  outputCharsetEncoder.canEncode(sb);	      char    c    =    outputCharsetEncoder.canEncode(sb);    	non-compiled	[CE]  ';'  expected	22	None	replace
48	[BUG]  [BUGGY]  char  c  =  outputCharsetEncoder.canEncode(sb,  quote);  [CE]  ';'  expected  [FE]              ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  char  c  =  outputCharsetEncoder.canEncode(sb,  quote);  [BUGGY]    if  (c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	char  c  =  outputCharsetEncoder.canEncode(sb,  quote);	      char    c    =    outputCharsetEncoder.canEncode(sb);    	non-compiled	[CE]  ';'  expected	22	None	replace
49	[BUG]  [BUGGY]  Char  c  =  outputCharsetEncoder.canEncode(c);  [CE]  ';'  expected  [FE]                ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  Char  c  =  outputCharsetEncoder.canEncode(c);  [BUGGY]    if  (c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	Char  c  =  outputCharsetEncoder.canEncode(c);	      char    c    =    outputCharsetEncoder.canEncode(sb);    	non-compiled	[CE]  ';'  expected	22	None	replace
50	[BUG]  [BUGGY]  Character  c  =  outputCharsetEncoder.canEncode(sb);  [CE]  ';'  expected  [FE]                  ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  Character  c  =  outputCharsetEncoder.canEncode(sb);  [BUGGY]    if  (c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	Character  c  =  outputCharsetEncoder.canEncode(sb);	      char    c    =    outputCharsetEncoder.canEncode(sb);    	non-compiled	[CE]  ';'  expected	22	None	replace
51	[BUG]  [BUGGY]  char  c  =  inputCharsetEncoder.canEncode(sb);  [CE]  ';'  expected  [FE]                    ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  char  c  =  inputCharsetEncoder.canEncode(sb);  [BUGGY]    if  (c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	char  c  =  inputCharsetEncoder.canEncode(sb);	      char    c    =    outputCharsetEncoder.canEncode(sb);    	non-compiled	[CE]  ';'  expected	22	None	replace
52	[BUG]  [BUGGY]  char  c  =  inputCharsetEncoder.canEncode(c);  [CE]  ';'  expected  [FE]                      ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  char  c  =  inputCharsetEncoder.canEncode(c);  [BUGGY]    if  (c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	char  c  =  inputCharsetEncoder.canEncode(c);	      char    c    =    outputCharsetEncoder.canEncode(sb);    	non-compiled	[CE]  ';'  expected	22	None	replace
53	[BUG]  [BUGGY]  if(c  >  0x1f  &&  c  <=  0x7f  &&  c  <=  backslashEscape)  {  [CE]  ';'  expected  [FE]                  ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  if(c  >  0x1f  &&  c  <=  0x7f  &&  c  <=  backslashEscape)  {  [BUGGY]    sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	if(c  >  0x1f  &&  c  <=  0x7f  &&  c  <=  backslashEscape)  {	  if(c    >    0x1f    &&    c    <=    0x7f    &&    c    <=    quote)    {    	non-compiled	[CE]  ';'  expected	35	None	replace
54	[BUG]  [BUGGY]  if(c  <  0x1f  &&  c  <=  0x7f  &&  c  <=  quote)  {  [CE]  ';'  expected  [FE]                    ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  if(c  <  0x1f  &&  c  <=  0x7f  &&  c  <=  quote)  {  [BUGGY]    sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	if(c  <  0x1f  &&  c  <=  0x7f  &&  c  <=  quote)  {	  if(c    >    0x1f    &&    c    <=    0x7f    &&    c    <=    quote)    {    	non-compiled	[CE]  ';'  expected	35	None	replace
55	[BUG]  [BUGGY]  if(c  >  0x1f  &&  c  <=  0x7f  &&  c  <=  HORIZONTAL)  {  [CE]  ';'  expected  [FE]                      ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  if(c  >  0x1f  &&  c  <=  0x7f  &&  c  <=  HORIZONTAL)  {  [BUGGY]    sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	if(c  >  0x1f  &&  c  <=  0x7f  &&  c  <=  HORIZONTAL)  {	  if(c    >    0x1f    &&    c    <=    0x7f    &&    c    <=    quote)    {    	non-compiled	[CE]  ';'  expected	35	None	replace
56	[BUG]  [BUGGY]  if(c  >=  0x1f  &&  c  <=  0x7f  &&  c  <=  quote)  {  [CE]  ';'  expected  [FE]                        ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  if(c  >=  0x1f  &&  c  <=  0x7f  &&  c  <=  quote)  {  [BUGGY]    sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	if(c  >=  0x1f  &&  c  <=  0x7f  &&  c  <=  quote)  {	  if(c    >    0x1f    &&    c    <=    0x7f    &&    c    <=    quote)    {    	non-compiled	[CE]  ';'  expected	35	None	replace
57	[BUG]  [BUGGY]  if(c  >  0x1f  ||  c  <=  0x7f  &&  c  <=  quote)  {  [CE]  ';'  expected  [FE]                          ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  if(c  >  0x1f  ||  c  <=  0x7f  &&  c  <=  quote)  {  [BUGGY]    sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	if(c  >  0x1f  ||  c  <=  0x7f  &&  c  <=  quote)  {	  if(c    >    0x1f    &&    c    <=    0x7f    &&    c    <=    quote)    {    	non-compiled	[CE]  ';'  expected	35	None	replace
58	[BUG]  [BUGGY]  if(c  >  0x1f  &&  c  <=  0x7f  ||  c  <=  quote)  {  [CE]  ';'  expected  [FE]                            ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  if(c  >  0x1f  &&  c  <=  0x7f  ||  c  <=  quote)  {  [BUGGY]    sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	if(c  >  0x1f  &&  c  <=  0x7f  ||  c  <=  quote)  {	  if(c    >    0x1f    &&    c    <=    0x7f    &&    c    <=    quote)    {    	non-compiled	[CE]  ';'  expected	35	None	replace
59	[BUG]  [BUGGY]  if(c  >  0x1f  &&  c  <=  0x7f  &&  c  <=  HEAD_OF_EXPR)  {  [CE]  ';'  expected  [FE]                              ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  if(c  >  0x1f  &&  c  <=  0x7f  &&  c  <=  HEAD_OF_EXPR)  {  [BUGGY]    sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	if(c  >  0x1f  &&  c  <=  0x7f  &&  c  <=  HEAD_OF_EXPR)  {	  if(c    >    0x1f    &&    c    <=    0x7f    &&    c    <=    quote)    {    	non-compiled	[CE]  ';'  expected	35	None	replace
60	[BUG]  [BUGGY]  if(c  >  0x1f  &&  c  <  0x7f  &&  c  <=  quote)  {  [CE]  ';'  expected  [FE]                                ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  if(c  >  0x1f  &&  c  <  0x7f  &&  c  <=  quote)  {  [BUGGY]    sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	if(c  >  0x1f  &&  c  <  0x7f  &&  c  <=  quote)  {	  if(c    >    0x1f    &&    c    <=    0x7f    &&    c    <=    quote)    {    	non-compiled	[CE]  ';'  expected	35	None	replace
61	[BUG]  [BUGGY]  if(c  <  0x1f  &&  c  <  0x7f)  {  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  if(c  <  0x1f  &&  c  <  0x7f)  {  [BUGGY]    sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	if(c  <  0x1f  &&  c  <  0x7f)  {	  if(c    >    0x1f    &&    c    <    0x7f)    {    	non-compiled	[CE]  ';'  expected	15	None	replace
62	[BUG]  [BUGGY]  if(c  <  0x7f  &&  c  >  0x1f)  {  [CE]  ';'  expected  [FE]              ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  if(c  <  0x7f  &&  c  >  0x1f)  {  [BUGGY]    sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	if(c  <  0x7f  &&  c  >  0x1f)  {	  if(c    >    0x1f    &&    c    <    0x7f)    {    	non-compiled	[CE]  ';'  expected	15	None	replace
63	[BUG]  [BUGGY]  if(c  ==  0x1f  &&  c  <  0x7f)  {  [CE]  [FE]                ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  if(c  ==  0x1f  &&  c  <  0x7f)  {  [BUGGY]    sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	if(c  ==  0x1f  &&  c  <  0x7f)  {	  if(c    >    0x1f    &&    c    <    0x7f)    {    	non-compiled	[CE]  	15	None	replace
64	[BUG]  [BUGGY]  if(c!=  0x1f  &&  c  <  0x7f)  {  [CE]  [FE]                  ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  if(c!=  0x1f  &&  c  <  0x7f)  {  [BUGGY]    sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	if(c!=  0x1f  &&  c  <  0x7f)  {	  if(c    >    0x1f    &&    c    <    0x7f)    {    	non-compiled	[CE]  	15	None	replace
65	[BUG]  [BUGGY]  if(c  >  0x1f  &&  c  <  0x7f  ||!outputCharsetEncoder.canEncode(c))  {  [CE]  [FE]                    ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  if(c  >  0x1f  &&  c  <  0x7f  ||!outputCharsetEncoder.canEncode(c))  {  [BUGGY]    sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	if(c  >  0x1f  &&  c  <  0x7f  ||!outputCharsetEncoder.canEncode(c))  {	  if(c    >    0x1f    &&    c    <    0x7f)    {    	non-compiled	[CE]  	15	None	replace
66	[BUG]  [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.encode(sb,  c);  [CE]  [FE]                          ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.encode(sb,  c);  [BUGGY]    if  (c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	CharsetEncoder  cc  =  outputCharsetEncoder.encode(sb,  c);	      CharsetEncoder    cc    =    outputCharsetEncoder.encode(c);    	non-compiled	[CE]  	10	None	replace
67	[BUG]  [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.encode(sb);  [CE]  [FE]                            ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.encode(sb);  [BUGGY]    if  (c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	CharsetEncoder  cc  =  outputCharsetEncoder.encode(sb);	      CharsetEncoder    cc    =    outputCharsetEncoder.encode(c);    	non-compiled	[CE]  	10	None	replace
68	[BUG]  [BUGGY]  CharsetEncoder  cc  =  inputCharsetEncoder.encode(c);  [CE]  [FE]                              ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  CharsetEncoder  cc  =  inputCharsetEncoder.encode(c);  [BUGGY]    if  (c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	CharsetEncoder  cc  =  inputCharsetEncoder.encode(c);	      CharsetEncoder    cc    =    outputCharsetEncoder.encode(c);    	non-compiled	[CE]  	10	None	replace
69	[BUG]  [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.encode(c,  backslashEscape);  [CE]  [FE]                                ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.encode(c,  backslashEscape);  [BUGGY]    if  (c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	CharsetEncoder  cc  =  outputCharsetEncoder.encode(c,  backslashEscape);	      CharsetEncoder    cc    =    outputCharsetEncoder.encode(c);    	non-compiled	[CE]  	10	None	replace
70	[BUG]  [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.encode(s,  c);  [CE]  [FE]                                  ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.encode(s,  c);  [BUGGY]    if  (c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	CharsetEncoder  cc  =  outputCharsetEncoder.encode(s,  c);	      CharsetEncoder    cc    =    outputCharsetEncoder.encode(c);    	non-compiled	[CE]  	10	None	replace
71	[BUG]  [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.encode(c,  quote);  [CE]  [FE]                                    ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.encode(c,  quote);  [BUGGY]    if  (c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	CharsetEncoder  cc  =  outputCharsetEncoder.encode(c,  quote);	      CharsetEncoder    cc    =    outputCharsetEncoder.encode(c);    	non-compiled	[CE]  	10	None	replace
72	[BUG]  [BUGGY]  CharsetEncoder  cc  =  inputCharsetEncoder.encode(c,  sb);  [CE]  ';'  expected  [FE]                                      ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  CharsetEncoder  cc  =  inputCharsetEncoder.encode(c,  sb);  [BUGGY]    if  (c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	CharsetEncoder  cc  =  inputCharsetEncoder.encode(c,  sb);	      CharsetEncoder    cc    =    outputCharsetEncoder.encode(c);    	non-compiled	[CE]  ';'  expected	10	None	replace
73	[BUG]  [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.encode(char,  quote);  [CE]  ';'  expected  [FE]                                        ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.encode(char,  quote);  [BUGGY]    if  (c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	CharsetEncoder  cc  =  outputCharsetEncoder.encode(char,  quote);	      CharsetEncoder    cc    =    outputCharsetEncoder.encode(c);    	non-compiled	[CE]  ';'  expected	10	None	replace
74	[BUG]  [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.encode(outputCharsetEncoder,  c);  [CE]  ';'  expected  [FE]                                          ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.encode(outputCharsetEncoder,  c);  [BUGGY]    if  (c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	CharsetEncoder  cc  =  outputCharsetEncoder.encode(outputCharsetEncoder,  c);	      CharsetEncoder    cc    =    outputCharsetEncoder.encode(c);    	non-compiled	[CE]  ';'  expected	10	None	replace
75	[BUG]  [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.encode(ptr);  [CE]  ';'  expected  [FE]                                            ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.encode(ptr);  [BUGGY]    if  (c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	CharsetEncoder  cc  =  outputCharsetEncoder.encode(ptr);	      CharsetEncoder    cc    =    outputCharsetEncoder.encode(c);    	non-compiled	[CE]  ';'  expected	10	None	replace
76	[BUG]  [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.encode(c,  sb);  [CE]  [FE]                                              ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.encode(c,  sb);  [BUGGY]    if  (c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	CharsetEncoder  cc  =  outputCharsetEncoder.encode(c,  sb);	      CharsetEncoder    cc    =    outputCharsetEncoder.encode(c);    	non-compiled	[CE]  	10	None	replace
77	[BUG]  [BUGGY]  if(c  >  0x1f  &&  c  <=  0x7f  &&  c  <  127)  {  [CE]  [FE]          ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  if(c  >  0x1f  &&  c  <=  0x7f  &&  c  <  127)  {  [BUGGY]    sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	if(c  >  0x1f  &&  c  <=  0x7f  &&  c  <  127)  {	  if(c    >    0x1f    &&    c    <=    0x7f    &&    c    <=    127)    {    	non-compiled	[CE]  	31	None	replace
78	[BUG]  [BUGGY]  if(c  <  0x1f  &&  c  <=  0x7f  &&  c  <=  127)  {  [CE]  [FE]            ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  if(c  <  0x1f  &&  c  <=  0x7f  &&  c  <=  127)  {  [BUGGY]    sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	if(c  <  0x1f  &&  c  <=  0x7f  &&  c  <=  127)  {	  if(c    >    0x1f    &&    c    <=    0x7f    &&    c    <=    127)    {    	non-compiled	[CE]  	31	None	replace
79	[BUG]  [BUGGY]  if(c  >=  0x1f  &&  c  <=  0x7f  &&  c  <=  127)  {  [CE]  [FE]              ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  if(c  >=  0x1f  &&  c  <=  0x7f  &&  c  <=  127)  {  [BUGGY]    sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	if(c  >=  0x1f  &&  c  <=  0x7f  &&  c  <=  127)  {	  if(c    >    0x1f    &&    c    <=    0x7f    &&    c    <=    127)    {    	non-compiled	[CE]  	31	None	replace
80	[BUG]  [BUGGY]  if(c  <=  0x1f  &&  c  <=  0x7f  &&  c  <=  127)  {  [CE]  [FE]                ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  if(c  <=  0x1f  &&  c  <=  0x7f  &&  c  <=  127)  {  [BUGGY]    sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	if(c  <=  0x1f  &&  c  <=  0x7f  &&  c  <=  127)  {	  if(c    >    0x1f    &&    c    <=    0x7f    &&    c    <=    127)    {    	non-compiled	[CE]  	31	None	replace
81	[BUG]  [BUGGY]  if(c  >  0x1f  &&  c  <=  0x7f  ||  c  <=  127)  {  [CE]  [FE]                  ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  if(c  >  0x1f  &&  c  <=  0x7f  ||  c  <=  127)  {  [BUGGY]    sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	if(c  >  0x1f  &&  c  <=  0x7f  ||  c  <=  127)  {	  if(c    >    0x1f    &&    c    <=    0x7f    &&    c    <=    127)    {    	non-compiled	[CE]  	31	None	replace
82	[BUG]  [BUGGY]  if(c  >  0x1f  ||  c  <=  0x7f  &&  c  <=  127)  {  [CE]  [FE]                    ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  if(c  >  0x1f  ||  c  <=  0x7f  &&  c  <=  127)  {  [BUGGY]    sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	if(c  >  0x1f  ||  c  <=  0x7f  &&  c  <=  127)  {	  if(c    >    0x1f    &&    c    <=    0x7f    &&    c    <=    127)    {    	non-compiled	[CE]  	31	None	replace
83	[BUG]  [BUGGY]  if(c  ==  0x1f  &&  c  <=  0x7f  &&  c  <=  127)  {  [CE]  [FE]                      ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  if(c  ==  0x1f  &&  c  <=  0x7f  &&  c  <=  127)  {  [BUGGY]    sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	if(c  ==  0x1f  &&  c  <=  0x7f  &&  c  <=  127)  {	  if(c    >    0x1f    &&    c    <=    0x7f    &&    c    <=    127)    {    	non-compiled	[CE]  	31	None	replace
84	[BUG]  [BUGGY]  if(c  >  0x1f  ||  c  <=  0x7f  ||  c  <=  127)  {  [CE]  [FE]                        ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  if(c  >  0x1f  ||  c  <=  0x7f  ||  c  <=  127)  {  [BUGGY]    sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	if(c  >  0x1f  ||  c  <=  0x7f  ||  c  <=  127)  {	  if(c    >    0x1f    &&    c    <=    0x7f    &&    c    <=    127)    {    	non-compiled	[CE]  	31	None	replace
85	[BUG]  [BUGGY]  if(c  <=  0x7f  &&  c  >  0x1f  &&  c  <=  127)  {  [CE]  [FE]                          ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  if(c  <=  0x7f  &&  c  >  0x1f  &&  c  <=  127)  {  [BUGGY]    sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	if(c  <=  0x7f  &&  c  >  0x1f  &&  c  <=  127)  {	  if(c    >    0x1f    &&    c    <=    0x7f    &&    c    <=    127)    {    	non-compiled	[CE]  	31	None	replace
86	[BUG]  [BUGGY]  if(c  >  0x1f  &&  c  <  0x7f  &&  c  <=  127)  {  [CE]  ';'  expected  [FE]                            ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  if(c  >  0x1f  &&  c  <  0x7f  &&  c  <=  127)  {  [BUGGY]    sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	if(c  >  0x1f  &&  c  <  0x7f  &&  c  <=  127)  {	  if(c    >    0x1f    &&    c    <=    0x7f    &&    c    <=    127)    {    	non-compiled	[CE]  ';'  expected	31	None	replace
87	[BUG]  [BUGGY]  if(c  <  0x1f  &&  c  <=  0x7f  ||  c  <=  127)  {  [CE]  ';'  expected  [FE]                              ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  if(c  <  0x1f  &&  c  <=  0x7f  ||  c  <=  127)  {  [BUGGY]    sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	if(c  <  0x1f  &&  c  <=  0x7f  ||  c  <=  127)  {	  if(c    >    0x1f    &&    c    <=    0x7f    &&    c    <=    127)    {    	non-compiled	[CE]  ';'  expected	31	None	replace
88	[BUG]  [BUGGY]  char  c  =  outputCharsetEncoder.canEncode(sb,  c);  [CE]  ';'  expected  [FE]          ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  char  c  =  outputCharsetEncoder.canEncode(sb,  c);  [BUGGY]    if  (c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	char  c  =  outputCharsetEncoder.canEncode(sb,  c);	      char    c    =    outputCharsetEncoder.canEncode(c);    	non-compiled	[CE]  ';'  expected	2	None	replace
89	[BUG]  [BUGGY]  char  c  =  outputCharsetEncoder.canEncode(s);  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  char  c  =  outputCharsetEncoder.canEncode(s);  [BUGGY]    if  (c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	char  c  =  outputCharsetEncoder.canEncode(s);	      char    c    =    outputCharsetEncoder.canEncode(c);    	non-compiled	[CE]  ';'  expected	2	None	replace
90	[BUG]  [BUGGY]  char  c  =  outputCharsetEncoder.canEncode(strEscape);  [CE]  ';'  expected  [FE]              ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  char  c  =  outputCharsetEncoder.canEncode(strEscape);  [BUGGY]    if  (c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	char  c  =  outputCharsetEncoder.canEncode(strEscape);	      char    c    =    outputCharsetEncoder.canEncode(c);    	non-compiled	[CE]  ';'  expected	2	None	replace
91	[BUG]  [BUGGY]  char  c  =  outputCharsetEncoder.canEncode(p);  [CE]  ';'  expected  [FE]                ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  char  c  =  outputCharsetEncoder.canEncode(p);  [BUGGY]    if  (c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	char  c  =  outputCharsetEncoder.canEncode(p);	      char    c    =    outputCharsetEncoder.canEncode(c);    	non-compiled	[CE]  ';'  expected	2	None	replace
92	[BUG]  [BUGGY]  char  c  =  outputCharsetEncoder.canEncode(shortquoteEscape);  [CE]  ';'  expected  [FE]                  ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  char  c  =  outputCharsetEncoder.canEncode(shortquoteEscape);  [BUGGY]    if  (c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	char  c  =  outputCharsetEncoder.canEncode(shortquoteEscape);	      char    c    =    outputCharsetEncoder.canEncode(c);    	non-compiled	[CE]  ';'  expected	2	None	replace
93	[BUG]  [BUGGY]  if(c  <  0x1f  &&  c  <=  0x7f  &&  Character.isDigit(c))  {  [CE]  ';'  expected  [FE]              ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  if(c  <  0x1f  &&  c  <=  0x7f  &&  Character.isDigit(c))  {  [BUGGY]    sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	if(c  <  0x1f  &&  c  <=  0x7f  &&  Character.isDigit(c))  {	  if(c    >    0x1f    &&    c    <=    0x7f    &&    Character.isDigit(c))    {    	non-compiled	[CE]  ';'  expected	33	None	replace
94	[BUG]  [BUGGY]  if(c  >  0x1f  &&  c  <=  0x7f  ||  Character.isDigit(c))  {  [CE]  [FE]                ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  if(c  >  0x1f  &&  c  <=  0x7f  ||  Character.isDigit(c))  {  [BUGGY]    sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	if(c  >  0x1f  &&  c  <=  0x7f  ||  Character.isDigit(c))  {	  if(c    >    0x1f    &&    c    <=    0x7f    &&    Character.isDigit(c))    {    	non-compiled	[CE]  	33	None	replace
95	[BUG]  [BUGGY]  if(c  >  0x1f  ||  c  <=  0x7f  &&  Character.isDigit(c))  {  [CE]  illegal  start  of  type  [FE]                  ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  if(c  >  0x1f  ||  c  <=  0x7f  &&  Character.isDigit(c))  {  [BUGGY]    sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	if(c  >  0x1f  ||  c  <=  0x7f  &&  Character.isDigit(c))  {	  if(c    >    0x1f    &&    c    <=    0x7f    &&    Character.isDigit(c))    {    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
96	[BUG]  [BUGGY]  if(c  >=  0x1f  &&  c  <=  0x7f  &&  Character.isDigit(c))  {  [CE]  illegal  start  of  type  [FE]                    ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  if(c  >=  0x1f  &&  c  <=  0x7f  &&  Character.isDigit(c))  {  [BUGGY]    sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	if(c  >=  0x1f  &&  c  <=  0x7f  &&  Character.isDigit(c))  {	  if(c    >    0x1f    &&    c    <=    0x7f    &&    Character.isDigit(c))    {    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
97	[BUG]  [BUGGY]  if(c  <  0x1f  ||  c  <=  0x7f  &&  Character.isDigit(c))  {  [CE]  [FE]                      ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  if(c  <  0x1f  ||  c  <=  0x7f  &&  Character.isDigit(c))  {  [BUGGY]    sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	if(c  <  0x1f  ||  c  <=  0x7f  &&  Character.isDigit(c))  {	  if(c    >    0x1f    &&    c    <=    0x7f    &&    Character.isDigit(c))    {    	non-compiled	[CE]  	33	None	replace
98	[BUG]  [BUGGY]  if(c  >  0x1f  &&  c  <  0x7f  &&  Character.isDigit(c))  {  [CE]  illegal  start  of  type  [FE]                        ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  if(c  >  0x1f  &&  c  <  0x7f  &&  Character.isDigit(c))  {  [BUGGY]    sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	if(c  >  0x1f  &&  c  <  0x7f  &&  Character.isDigit(c))  {	  if(c    >    0x1f    &&    c    <=    0x7f    &&    Character.isDigit(c))    {    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
99	[BUG]  [BUGGY]  if(c  >  0x1f  &&  c  <=  0x7f  &&  Character.isDigit(c)||  Character.isDigit(c))  {  [CE]  illegal  start  of  type  [FE]                          ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  if(c  >  0x1f  &&  c  <=  0x7f  &&  Character.isDigit(c)||  Character.isDigit(c))  {  [BUGGY]    sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	if(c  >  0x1f  &&  c  <=  0x7f  &&  Character.isDigit(c)||  Character.isDigit(c))  {	  if(c    >    0x1f    &&    c    <=    0x7f    &&    Character.isDigit(c))    {    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
100	[BUG]  [BUGGY]  if(c  <=  0x1f  &&  c  <=  0x7f  &&  Character.isDigit(c))  {  [CE]  illegal  start  of  type  [FE]                            ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  if(c  <=  0x1f  &&  c  <=  0x7f  &&  Character.isDigit(c))  {  [BUGGY]    sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	if(c  <=  0x1f  &&  c  <=  0x7f  &&  Character.isDigit(c))  {	  if(c    >    0x1f    &&    c    <=    0x7f    &&    Character.isDigit(c))    {    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
101	[BUG]  [BUGGY]  if(c  ==  0x1f  &&  c  <=  0x7f  &&  Character.isDigit(c))  {  [CE]  illegal  start  of  type  [FE]                              ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  if(c  ==  0x1f  &&  c  <=  0x7f  &&  Character.isDigit(c))  {  [BUGGY]    sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	if(c  ==  0x1f  &&  c  <=  0x7f  &&  Character.isDigit(c))  {	  if(c    >    0x1f    &&    c    <=    0x7f    &&    Character.isDigit(c))    {    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
102	[BUG]  [BUGGY]  if(c  <  0x7f  &&  c  <=  0x1f  &&  Character.isDigit(c))  {  [CE]  illegal  start  of  type  [FE]                                ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  if(c  <  0x7f  &&  c  <=  0x1f  &&  Character.isDigit(c))  {  [BUGGY]    sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	if(c  <  0x7f  &&  c  <=  0x1f  &&  Character.isDigit(c))  {	  if(c    >    0x1f    &&    c    <=    0x7f    &&    Character.isDigit(c))    {    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
103	[BUG]  [BUGGY]  if(c  <  0x1f  &&  c  <=  0x7f  &&  c  <  quote)  {  [CE]  illegal  start  of  type  [FE]                    ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  if(c  <  0x1f  &&  c  <=  0x7f  &&  c  <  quote)  {  [BUGGY]    sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	if(c  <  0x1f  &&  c  <=  0x7f  &&  c  <  quote)  {	  if(c    >    0x1f    &&    c    <=    0x7f    &&    c    <    quote)    {    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
104	[BUG]  [BUGGY]  if(c  >  0x1f  ||  c  <=  0x7f  &&  c  <  quote)  {  [CE]  illegal  start  of  type  [FE]                      ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  if(c  >  0x1f  ||  c  <=  0x7f  &&  c  <  quote)  {  [BUGGY]    sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	if(c  >  0x1f  ||  c  <=  0x7f  &&  c  <  quote)  {	  if(c    >    0x1f    &&    c    <=    0x7f    &&    c    <    quote)    {    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
105	[BUG]  [BUGGY]  if(c  >  0x1f  &&  c  <=  0x7f  ||  c  <  quote)  {  [CE]  illegal  start  of  type  [FE]                        ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  if(c  >  0x1f  &&  c  <=  0x7f  ||  c  <  quote)  {  [BUGGY]    sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	if(c  >  0x1f  &&  c  <=  0x7f  ||  c  <  quote)  {	  if(c    >    0x1f    &&    c    <=    0x7f    &&    c    <    quote)    {    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
106	[BUG]  [BUGGY]  if(c  >  0x1f  &&  c  <=  0x7f  &&  c  <  backslashEscape)  {  [CE]  illegal  start  of  type  [FE]                          ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  if(c  >  0x1f  &&  c  <=  0x7f  &&  c  <  backslashEscape)  {  [BUGGY]    sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	if(c  >  0x1f  &&  c  <=  0x7f  &&  c  <  backslashEscape)  {	  if(c    >    0x1f    &&    c    <=    0x7f    &&    c    <    quote)    {    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
107	[BUG]  [BUGGY]  if(c  >=  0x1f  &&  c  <=  0x7f  &&  c  <  quote)  {  [CE]  illegal  start  of  type  [FE]                            ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  if(c  >=  0x1f  &&  c  <=  0x7f  &&  c  <  quote)  {  [BUGGY]    sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	if(c  >=  0x1f  &&  c  <=  0x7f  &&  c  <  quote)  {	  if(c    >    0x1f    &&    c    <=    0x7f    &&    c    <    quote)    {    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
108	[BUG]  [BUGGY]  if(c  >  0x1f  &&  c  <=  0x7f  &&  c  <  len)  {  [CE]  illegal  start  of  type  [FE]                              ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  if(c  >  0x1f  &&  c  <=  0x7f  &&  c  <  len)  {  [BUGGY]    sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	if(c  >  0x1f  &&  c  <=  0x7f  &&  c  <  len)  {	  if(c    >    0x1f    &&    c    <=    0x7f    &&    c    <    quote)    {    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
109	[BUG]  [BUGGY]  if(c  >  0x1f  &&  c  <=  0x7f  &&  c  <  outputCharsetEncoder)  {  [CE]  illegal  start  of  type  [FE]                                ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  if(c  >  0x1f  &&  c  <=  0x7f  &&  c  <  outputCharsetEncoder)  {  [BUGGY]    sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	if(c  >  0x1f  &&  c  <=  0x7f  &&  c  <  outputCharsetEncoder)  {	  if(c    >    0x1f    &&    c    <=    0x7f    &&    c    <    quote)    {    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
110	[BUG]  [BUGGY]  if(c  >  0x1f  &&  c  <=  0x7f  &&  c  <  quote.length)  {  [CE]  illegal  start  of  type  [FE]                                  ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  if(c  >  0x1f  &&  c  <=  0x7f  &&  c  <  quote.length)  {  [BUGGY]    sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	if(c  >  0x1f  &&  c  <=  0x7f  &&  c  <  quote.length)  {	  if(c    >    0x1f    &&    c    <=    0x7f    &&    c    <    quote)    {    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
111	[BUG]  [BUGGY]  Integer  c  =  outputCharsetEncoder.canEncode(sb);  [CE]  illegal  start  of  type  [FE]                      ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  Integer  c  =  outputCharsetEncoder.canEncode(sb);  [BUGGY]    if  (c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	Integer  c  =  outputCharsetEncoder.canEncode(sb);	      Integer    c    =    outputCharsetEncoder.canEncode(c);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
112	[BUG]  [BUGGY]  Integer  c  =  outputCharsetEncoder.canEncode(sb,  c);  [CE]  illegal  start  of  type  [FE]                        ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  Integer  c  =  outputCharsetEncoder.canEncode(sb,  c);  [BUGGY]    if  (c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	Integer  c  =  outputCharsetEncoder.canEncode(sb,  c);	      Integer    c    =    outputCharsetEncoder.canEncode(c);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
113	[BUG]  [BUGGY]  Integer  c  =  outputCharsetEncoder.canEncode(s);  [CE]  illegal  start  of  type  [FE]                          ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  Integer  c  =  outputCharsetEncoder.canEncode(s);  [BUGGY]    if  (c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	Integer  c  =  outputCharsetEncoder.canEncode(s);	      Integer    c    =    outputCharsetEncoder.canEncode(c);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
114	[BUG]  [BUGGY]  Integer  c  =  inputCharsetEncoder.canEncode(c);  [CE]  illegal  start  of  type  [FE]                            ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  Integer  c  =  inputCharsetEncoder.canEncode(c);  [BUGGY]    if  (c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	Integer  c  =  inputCharsetEncoder.canEncode(c);	      Integer    c    =    outputCharsetEncoder.canEncode(c);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
115	[BUG]  [BUGGY]  Integer  c  =  outputCharsetEncoder.encode(c);  [CE]  illegal  start  of  type  [FE]                              ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  Integer  c  =  outputCharsetEncoder.encode(c);  [BUGGY]    if  (c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	Integer  c  =  outputCharsetEncoder.encode(c);	      Integer    c    =    outputCharsetEncoder.canEncode(c);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
116	[BUG]  [BUGGY]  Integer  c  =  outputCharsetEncoder.canEncode(shortquoteEscape);  [CE]  illegal  start  of  type  [FE]                                ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  Integer  c  =  outputCharsetEncoder.canEncode(shortquoteEscape);  [BUGGY]    if  (c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	Integer  c  =  outputCharsetEncoder.canEncode(shortquoteEscape);	      Integer    c    =    outputCharsetEncoder.canEncode(c);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
117	[BUG]  [BUGGY]  Integer  c  =  outputCharsetEncoder.parseInt(quote);  [CE]  illegal  start  of  type  [FE]                                  ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  Integer  c  =  outputCharsetEncoder.parseInt(quote);  [BUGGY]    if  (c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	Integer  c  =  outputCharsetEncoder.parseInt(quote);	      Integer    c    =    outputCharsetEncoder.canEncode(c);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
118	[BUG]  [BUGGY]  Integer  c  =  outputCharsetEncoder.canEncode(p);  [CE]  illegal  start  of  type  [FE]                                    ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  Integer  c  =  outputCharsetEncoder.canEncode(p);  [BUGGY]    if  (c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	Integer  c  =  outputCharsetEncoder.canEncode(p);	      Integer    c    =    outputCharsetEncoder.canEncode(c);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
119	[BUG]  [BUGGY]  Integer  c  =  outputCharsetEncoder.canEncode(outputCharset);  [CE]  illegal  start  of  type  [FE]                                      ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  Integer  c  =  outputCharsetEncoder.canEncode(outputCharset);  [BUGGY]    if  (c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	Integer  c  =  outputCharsetEncoder.canEncode(outputCharset);	      Integer    c    =    outputCharsetEncoder.canEncode(c);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
120	[BUG]  [BUGGY]  c  =  outputCharsetEncoder.canEncode(c,  backslashEscape);  [CE]  illegal  start  of  type  [FE]        ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  c  =  outputCharsetEncoder.canEncode(c,  backslashEscape);  [BUGGY]    if  (c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	c  =  outputCharsetEncoder.canEncode(c,  backslashEscape);	      c    =    outputCharsetEncoder.canEncode(c);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
121	[BUG]  [BUGGY]  c  =  outputCharsetEncoder.canEncode(c,  quote);  [CE]  illegal  start  of  type  [FE]          ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  c  =  outputCharsetEncoder.canEncode(c,  quote);  [BUGGY]    if  (c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	c  =  outputCharsetEncoder.canEncode(c,  quote);	      c    =    outputCharsetEncoder.canEncode(c);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
122	[BUG]  [BUGGY]  c  =  outputCharsetEncoder.canEncode(sb,  c);  [CE]  illegal  start  of  type  [FE]            ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  c  =  outputCharsetEncoder.canEncode(sb,  c);  [BUGGY]    if  (c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	c  =  outputCharsetEncoder.canEncode(sb,  c);	      c    =    outputCharsetEncoder.canEncode(c);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
123	[BUG]  [BUGGY]  c  =  outputCharsetEncoder.canEncode(c,  sb);  [CE]  illegal  start  of  type  [FE]              ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  c  =  outputCharsetEncoder.canEncode(c,  sb);  [BUGGY]    if  (c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	c  =  outputCharsetEncoder.canEncode(c,  sb);	      c    =    outputCharsetEncoder.canEncode(c);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
124	[BUG]  [BUGGY]  c  =  outputCharsetEncoder.canEncode(c)&&!outputCharsetEncoder.hasHexJavaScriptRepresentation(c);  [CE]  illegal  start  of  type  [FE]                ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  c  =  outputCharsetEncoder.canEncode(c)&&!outputCharsetEncoder.hasHexJavaScriptRepresentation(c);  [BUGGY]    if  (c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	c  =  outputCharsetEncoder.canEncode(c)&&!outputCharsetEncoder.hasHexJavaScriptRepresentation(c);	      c    =    outputCharsetEncoder.canEncode(c);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
125	[BUG]  [BUGGY]  c  =  outputCharsetEncoder.canEncode(c)&&!outputCharsetEncoder.isDigit(c);  [CE]  illegal  start  of  type  [FE]                  ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  c  =  outputCharsetEncoder.canEncode(c)&&!outputCharsetEncoder.isDigit(c);  [BUGGY]    if  (c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	c  =  outputCharsetEncoder.canEncode(c)&&!outputCharsetEncoder.isDigit(c);	      c    =    outputCharsetEncoder.canEncode(c);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
126	[BUG]  [BUGGY]  c  =  outputCharsetEncoder.canEncode(c)&&  sb.length()  >  0;  [CE]  illegal  start  of  type  [FE]                    ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  c  =  outputCharsetEncoder.canEncode(c)&&  sb.length()  >  0;  [BUGGY]    if  (c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	c  =  outputCharsetEncoder.canEncode(c)&&  sb.length()  >  0;	      c    =    outputCharsetEncoder.canEncode(c);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
127	[BUG]  [BUGGY]  c  =  outputCharsetEncoder.canEncode(c)&&  sb.charAt(c);  [CE]  illegal  start  of  type  [FE]                      ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  c  =  outputCharsetEncoder.canEncode(c)&&  sb.charAt(c);  [BUGGY]    if  (c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	c  =  outputCharsetEncoder.canEncode(c)&&  sb.charAt(c);	      c    =    outputCharsetEncoder.canEncode(c);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
128	[BUG]  [BUGGY]  if(c  >  0x1f  ||  c  <=  0x7f  &&  outputCharsetEncoder.canEncode(c))  {  [CE]  illegal  start  of  type  [FE]              ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  if(c  >  0x1f  ||  c  <=  0x7f  &&  outputCharsetEncoder.canEncode(c))  {  [BUGGY]    sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	if(c  >  0x1f  ||  c  <=  0x7f  &&  outputCharsetEncoder.canEncode(c))  {	  if(c    >    0x1f    &&    c    <=    0x7f    &&    outputCharsetEncoder.canEncode(c))    {    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
129	[BUG]  [BUGGY]  if(c  >  0x1f  &&  c  <=  0x7f  ||  outputCharsetEncoder.canEncode(c))  {  [CE]  illegal  start  of  type  [FE]                ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  if(c  >  0x1f  &&  c  <=  0x7f  ||  outputCharsetEncoder.canEncode(c))  {  [BUGGY]    sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	if(c  >  0x1f  &&  c  <=  0x7f  ||  outputCharsetEncoder.canEncode(c))  {	  if(c    >    0x1f    &&    c    <=    0x7f    &&    outputCharsetEncoder.canEncode(c))    {    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
130	[BUG]  [BUGGY]  if(c  <  0x1f  &&  c  <=  0x7f  &&  outputCharsetEncoder.canEncode(c))  {  [CE]  illegal  start  of  type  [FE]                  ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  if(c  <  0x1f  &&  c  <=  0x7f  &&  outputCharsetEncoder.canEncode(c))  {  [BUGGY]    sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	if(c  <  0x1f  &&  c  <=  0x7f  &&  outputCharsetEncoder.canEncode(c))  {	  if(c    >    0x1f    &&    c    <=    0x7f    &&    outputCharsetEncoder.canEncode(c))    {    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
131	[BUG]  [BUGGY]  if(c  >  0x1f  &&  c  <  0x7f  &&  outputCharsetEncoder.canEncode(c))  {  [CE]  illegal  start  of  type  [FE]                    ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  if(c  >  0x1f  &&  c  <  0x7f  &&  outputCharsetEncoder.canEncode(c))  {  [BUGGY]    sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	if(c  >  0x1f  &&  c  <  0x7f  &&  outputCharsetEncoder.canEncode(c))  {	  if(c    >    0x1f    &&    c    <=    0x7f    &&    outputCharsetEncoder.canEncode(c))    {    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
132	[BUG]  [BUGGY]  if(c  >=  0x1f  &&  c  <=  0x7f  &&  outputCharsetEncoder.canEncode(c))  {  [CE]  illegal  start  of  type  [FE]                      ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  if(c  >=  0x1f  &&  c  <=  0x7f  &&  outputCharsetEncoder.canEncode(c))  {  [BUGGY]    sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	if(c  >=  0x1f  &&  c  <=  0x7f  &&  outputCharsetEncoder.canEncode(c))  {	  if(c    >    0x1f    &&    c    <=    0x7f    &&    outputCharsetEncoder.canEncode(c))    {    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
133	[BUG]  [BUGGY]  if(c  <  0x1f  ||  c  <=  0x7f  &&  outputCharsetEncoder.canEncode(c))  {  [CE]  illegal  start  of  type  [FE]                        ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  if(c  <  0x1f  ||  c  <=  0x7f  &&  outputCharsetEncoder.canEncode(c))  {  [BUGGY]    sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	if(c  <  0x1f  ||  c  <=  0x7f  &&  outputCharsetEncoder.canEncode(c))  {	  if(c    >    0x1f    &&    c    <=    0x7f    &&    outputCharsetEncoder.canEncode(c))    {    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
134	[BUG]  [BUGGY]  if(c  >  0x1f  &&  c  <=  0x7f  &&  outputCharsetEncoder.isHexJavaScriptRepresentation(c))  {  [CE]  illegal  start  of  type  [FE]                          ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  if(c  >  0x1f  &&  c  <=  0x7f  &&  outputCharsetEncoder.isHexJavaScriptRepresentation(c))  {  [BUGGY]    sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	if(c  >  0x1f  &&  c  <=  0x7f  &&  outputCharsetEncoder.isHexJavaScriptRepresentation(c))  {	  if(c    >    0x1f    &&    c    <=    0x7f    &&    outputCharsetEncoder.canEncode(c))    {    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
135	[BUG]  [BUGGY]  if(c  <  0x1f  &&  c  <=  0x7f  ||  outputCharsetEncoder.canEncode(c))  {  [CE]  illegal  start  of  type  [FE]                            ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  if(c  <  0x1f  &&  c  <=  0x7f  ||  outputCharsetEncoder.canEncode(c))  {  [BUGGY]    sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	if(c  <  0x1f  &&  c  <=  0x7f  ||  outputCharsetEncoder.canEncode(c))  {	  if(c    >    0x1f    &&    c    <=    0x7f    &&    outputCharsetEncoder.canEncode(c))    {    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
136	[BUG]  [BUGGY]  if(outputCharsetEncoder!=  null  &&  c  <=  0x7f  &&  c.canEncode(c))  {  [CE]  illegal  start  of  type  [FE]                              ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  if(outputCharsetEncoder!=  null  &&  c  <=  0x7f  &&  c.canEncode(c))  {  [BUGGY]    sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	if(outputCharsetEncoder!=  null  &&  c  <=  0x7f  &&  c.canEncode(c))  {	  if(c    >    0x1f    &&    c    <=    0x7f    &&    outputCharsetEncoder.canEncode(c))    {    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
137	[BUG]  [BUGGY]  if(c  <  0x7f  ||  c  <=  0x7f  &&  outputCharsetEncoder.canEncode(c))  {  [CE]  illegal  start  of  type  [FE]                                ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  if(c  <  0x7f  ||  c  <=  0x7f  &&  outputCharsetEncoder.canEncode(c))  {  [BUGGY]    sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	if(c  <  0x7f  ||  c  <=  0x7f  &&  outputCharsetEncoder.canEncode(c))  {	  if(c    >    0x1f    &&    c    <=    0x7f    &&    outputCharsetEncoder.canEncode(c))    {    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
138	[BUG]  [BUGGY]  if(c  <  0x1f  ||  c  <=  0x7f  ||  c  >  0x7f)  {  [CE]  illegal  start  of  type  [FE]                      ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  if(c  <  0x1f  ||  c  <=  0x7f  ||  c  >  0x7f)  {  [BUGGY]    sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	if(c  <  0x1f  ||  c  <=  0x7f  ||  c  >  0x7f)  {	  if(c    >    0x1f    &&    c    <=    0x7f    ||    c    >    0x7f)    {    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
139	[BUG]  [BUGGY]  if(c  >  0x1f  ||  c  <=  0x7f  ||  c  >  0x7f)  {  [CE]  illegal  start  of  type  [FE]                        ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  if(c  >  0x1f  ||  c  <=  0x7f  ||  c  >  0x7f)  {  [BUGGY]    sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	if(c  >  0x1f  ||  c  <=  0x7f  ||  c  >  0x7f)  {	  if(c    >    0x1f    &&    c    <=    0x7f    ||    c    >    0x7f)    {    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
140	[BUG]  [BUGGY]  if(c  <  0x1f  ||  c  >  0x7f  ||  c  >  0x7f)  {  [CE]  illegal  start  of  type  [FE]                          ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  if(c  <  0x1f  ||  c  >  0x7f  ||  c  >  0x7f)  {  [BUGGY]    sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	if(c  <  0x1f  ||  c  >  0x7f  ||  c  >  0x7f)  {	  if(c    >    0x1f    &&    c    <=    0x7f    ||    c    >    0x7f)    {    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
141	[BUG]  [BUGGY]  if(c  >  0x1f  &&  c  <  0x7f  ||  c  >  0x7f)  {  [CE]  illegal  start  of  type  [FE]                            ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  if(c  >  0x1f  &&  c  <  0x7f  ||  c  >  0x7f)  {  [BUGGY]    sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	if(c  >  0x1f  &&  c  <  0x7f  ||  c  >  0x7f)  {	  if(c    >    0x1f    &&    c    <=    0x7f    ||    c    >    0x7f)    {    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
142	[BUG]  [BUGGY]  if(c  <=  0x1f  ||  c  <=  0x7f  ||  c  >  0x7f)  {  [CE]  illegal  start  of  type  [FE]                              ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  if(c  <=  0x1f  ||  c  <=  0x7f  ||  c  >  0x7f)  {  [BUGGY]    sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	if(c  <=  0x1f  ||  c  <=  0x7f  ||  c  >  0x7f)  {	  if(c    >    0x1f    &&    c    <=    0x7f    ||    c    >    0x7f)    {    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
143	[BUG]  [BUGGY]  if(c  <  0x1f  &&  c  <=  0x7f  ||  c  >  0x7f)  {  [CE]  illegal  start  of  type  [FE]                                ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  if(c  <  0x1f  &&  c  <=  0x7f  ||  c  >  0x7f)  {  [BUGGY]    sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	if(c  <  0x1f  &&  c  <=  0x7f  ||  c  >  0x7f)  {	  if(c    >    0x1f    &&    c    <=    0x7f    ||    c    >    0x7f)    {    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
144	[BUG]  [BUGGY]  if(c  <  0x7f  &&  c  <=  0x7f  ||  c  >  0x7f)  {  [CE]  illegal  start  of  type  [FE]                                  ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  if(c  <  0x7f  &&  c  <=  0x7f  ||  c  >  0x7f)  {  [BUGGY]    sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	if(c  <  0x7f  &&  c  <=  0x7f  ||  c  >  0x7f)  {	  if(c    >    0x1f    &&    c    <=    0x7f    ||    c    >    0x7f)    {    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
145	[BUG]  [BUGGY]  if(c  ==  0x1f  &&  c  <=  0x7f  ||  c  >  0x7f)  {  [CE]  illegal  start  of  type  [FE]                                    ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  if(c  ==  0x1f  &&  c  <=  0x7f  ||  c  >  0x7f)  {  [BUGGY]    sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	if(c  ==  0x1f  &&  c  <=  0x7f  ||  c  >  0x7f)  {	  if(c    >    0x1f    &&    c    <=    0x7f    ||    c    >    0x7f)    {    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
146	[BUG]  [BUGGY]  if(c  >  0x1f  &&  c  <=  0x7f  ||  c  <=  0x7f)  {  [CE]  illegal  start  of  type  [FE]                                      ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  if(c  >  0x1f  &&  c  <=  0x7f  ||  c  <=  0x7f)  {  [BUGGY]    sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	if(c  >  0x1f  &&  c  <=  0x7f  ||  c  <=  0x7f)  {	  if(c    >    0x1f    &&    c    <=    0x7f    ||    c    >    0x7f)    {    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
147	[BUG]  [BUGGY]  String  c  =  outputCharsetEncoder.canEncode(sb,  c);  [CE]  illegal  start  of  type  [FE]              ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  String  c  =  outputCharsetEncoder.canEncode(sb,  c);  [BUGGY]    if  (c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	String  c  =  outputCharsetEncoder.canEncode(sb,  c);	      String    c    =    outputCharsetEncoder.canEncode(c);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
148	[BUG]  [BUGGY]  String  c  =  outputCharsetEncoder.canEncode(s);  [CE]  illegal  start  of  type  [FE]                ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  String  c  =  outputCharsetEncoder.canEncode(s);  [BUGGY]    if  (c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	String  c  =  outputCharsetEncoder.canEncode(s);	      String    c    =    outputCharsetEncoder.canEncode(c);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
149	[BUG]  [BUGGY]  String  c  =  inputCharsetEncoder.canEncode(c);  [CE]  illegal  start  of  type  [FE]                  ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  String  c  =  inputCharsetEncoder.canEncode(c);  [BUGGY]    if  (c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	String  c  =  inputCharsetEncoder.canEncode(c);	      String    c    =    outputCharsetEncoder.canEncode(c);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
150	[BUG]  [BUGGY]  CharsetEncoder  c  =  outputCharsetEncoder.canEncode(c);  [CE]  illegal  start  of  type  [FE]                    ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  CharsetEncoder  c  =  outputCharsetEncoder.canEncode(c);  [BUGGY]    if  (c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	CharsetEncoder  c  =  outputCharsetEncoder.canEncode(c);	      String    c    =    outputCharsetEncoder.canEncode(c);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
151	[BUG]  [BUGGY]  String  c  =  outputCharsetEncoder.encode(c);  [CE]  illegal  start  of  type  [FE]                      ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  String  c  =  outputCharsetEncoder.encode(c);  [BUGGY]    if  (c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	String  c  =  outputCharsetEncoder.encode(c);	      String    c    =    outputCharsetEncoder.canEncode(c);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
152	[BUG]  [BUGGY]  String  c  =  outputCharsetEncoder.canEncode(p);  [CE]  illegal  start  of  type  [FE]                        ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  String  c  =  outputCharsetEncoder.canEncode(p);  [BUGGY]    if  (c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	String  c  =  outputCharsetEncoder.canEncode(p);	      String    c    =    outputCharsetEncoder.canEncode(c);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
153	[BUG]  [BUGGY]  String  c  =  outputCharsetEncoder.canEncode(c,  quote);  [CE]  illegal  start  of  type  [FE]                          ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  String  c  =  outputCharsetEncoder.canEncode(c,  quote);  [BUGGY]    if  (c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	String  c  =  outputCharsetEncoder.canEncode(c,  quote);	      String    c    =    outputCharsetEncoder.canEncode(c);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
154	[BUG]  [BUGGY]  String  c  =  outputCharsetEncoder.canEncode(strEscape);  [CE]  illegal  start  of  type  [FE]                            ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  String  c  =  outputCharsetEncoder.canEncode(strEscape);  [BUGGY]    if  (c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	String  c  =  outputCharsetEncoder.canEncode(strEscape);	      String    c    =    outputCharsetEncoder.canEncode(c);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
155	[BUG]  [BUGGY]  int  c  =  outputCharsetEncoder.canEncode(sb,  c);  [CE]  illegal  start  of  type  [FE]            ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  int  c  =  outputCharsetEncoder.canEncode(sb,  c);  [BUGGY]    if  (c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	int  c  =  outputCharsetEncoder.canEncode(sb,  c);	      int    c    =    outputCharsetEncoder.canEncode(c);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
156	[BUG]  [BUGGY]  int  c  =  inputCharsetEncoder.canEncode(c);  [CE]  illegal  start  of  type  [FE]              ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  int  c  =  inputCharsetEncoder.canEncode(c);  [BUGGY]    if  (c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	int  c  =  inputCharsetEncoder.canEncode(c);	      int    c    =    outputCharsetEncoder.canEncode(c);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
157	[BUG]  [BUGGY]  int  c  =  outputCharsetEncoder.canEncode(s);  [CE]  illegal  start  of  type  [FE]                ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  int  c  =  outputCharsetEncoder.canEncode(s);  [BUGGY]    if  (c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	int  c  =  outputCharsetEncoder.canEncode(s);	      int    c    =    outputCharsetEncoder.canEncode(c);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
158	[BUG]  [BUGGY]  int  c  =  outputCharsetEncoder.canEncode(outputCharset);  [CE]  illegal  start  of  type  [FE]                  ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  int  c  =  outputCharsetEncoder.canEncode(outputCharset);  [BUGGY]    if  (c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	int  c  =  outputCharsetEncoder.canEncode(outputCharset);	      int    c    =    outputCharsetEncoder.canEncode(c);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
159	[BUG]  [BUGGY]  int  c  =  outputCharsetEncoder.canEncode(p);  [CE]  illegal  start  of  type  [FE]                    ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  int  c  =  outputCharsetEncoder.canEncode(p);  [BUGGY]    if  (c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	int  c  =  outputCharsetEncoder.canEncode(p);	      int    c    =    outputCharsetEncoder.canEncode(c);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
160	[BUG]  [BUGGY]  int  c  =  outputCharsetEncoder.encode(c);  [CE]  illegal  start  of  type  [FE]                      ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  int  c  =  outputCharsetEncoder.encode(c);  [BUGGY]    if  (c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	int  c  =  outputCharsetEncoder.encode(c);	      int    c    =    outputCharsetEncoder.canEncode(c);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
161	[BUG]  [BUGGY]  int  c  =  outputCharsetEncoder.canEncode(char);  [CE]  illegal  start  of  type  [FE]                        ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  int  c  =  outputCharsetEncoder.canEncode(char);  [BUGGY]    if  (c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	int  c  =  outputCharsetEncoder.canEncode(char);	      int    c    =    outputCharsetEncoder.canEncode(c);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
162	[BUG]  [BUGGY]  int  c  =  outputCharsetEncoder.canEncode(sb,  quote);  [CE]  illegal  start  of  type  [FE]        ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  int  c  =  outputCharsetEncoder.canEncode(sb,  quote);  [BUGGY]    if  (c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	int  c  =  outputCharsetEncoder.canEncode(sb,  quote);	      int    c    =    outputCharsetEncoder.canEncode(sb);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
163	[BUG]  [BUGGY]  int  c  =  outputCharsetEncoder.canEncode(sb,  backslashEscape);  [CE]  illegal  start  of  type  [FE]          ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  int  c  =  outputCharsetEncoder.canEncode(sb,  backslashEscape);  [BUGGY]    if  (c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	int  c  =  outputCharsetEncoder.canEncode(sb,  backslashEscape);	      int    c    =    outputCharsetEncoder.canEncode(sb);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
164	[BUG]  [BUGGY]  int  c  =  inputCharsetEncoder.canEncode(sb);  [CE]  illegal  start  of  type  [FE]            ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  int  c  =  inputCharsetEncoder.canEncode(sb);  [BUGGY]    if  (c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	int  c  =  inputCharsetEncoder.canEncode(sb);	      int    c    =    outputCharsetEncoder.canEncode(sb);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
165	[BUG]  [BUGGY]  int  c  =  outputCharsetEncoder.encode(sb);  [CE]  illegal  start  of  type  [FE]              ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  int  c  =  outputCharsetEncoder.encode(sb);  [BUGGY]    if  (c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	int  c  =  outputCharsetEncoder.encode(sb);	      int    c    =    outputCharsetEncoder.canEncode(sb);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
166	[BUG]  [BUGGY]  int  c  =  outputCharsetEncoder.canEncode(sb,  outputCharsetEncoder);  [CE]  illegal  start  of  type  [FE]                ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  int  c  =  outputCharsetEncoder.canEncode(sb,  outputCharsetEncoder);  [BUGGY]    if  (c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	int  c  =  outputCharsetEncoder.canEncode(sb,  outputCharsetEncoder);	      int    c    =    outputCharsetEncoder.canEncode(sb);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
167	[BUG]  [BUGGY]  Character  c  =  Character.toLowerCase(outputCharsetEncoder,  quote);  [CE]  illegal  start  of  type  [FE]                ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  Character  c  =  Character.toLowerCase(outputCharsetEncoder,  quote);  [BUGGY]    if  (c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	Character  c  =  Character.toLowerCase(outputCharsetEncoder,  quote);	      Character    c    =    Character.toLowerCase(outputCharsetEncoder);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
168	[BUG]  [BUGGY]  Character  c  =  Character.toLowerCase(lhsContext,  outputCharsetEncoder);  [CE]  illegal  start  of  type  [FE]                  ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  Character  c  =  Character.toLowerCase(lhsContext,  outputCharsetEncoder);  [BUGGY]    if  (c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	Character  c  =  Character.toLowerCase(lhsContext,  outputCharsetEncoder);	      Character    c    =    Character.toLowerCase(outputCharsetEncoder);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
169	[BUG]  [BUGGY]  Character  c  =  Character.toUpperCase(outputCharsetEncoder);  [CE]  illegal  start  of  type  [FE]                    ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  Character  c  =  Character.toUpperCase(outputCharsetEncoder);  [BUGGY]    if  (c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	Character  c  =  Character.toUpperCase(outputCharsetEncoder);	      Character    c    =    Character.toLowerCase(outputCharsetEncoder);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
170	[BUG]  [BUGGY]  Character  c  =  Character.toLowerCase(backslashEscape);  [CE]  illegal  start  of  type  [FE]                      ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  Character  c  =  Character.toLowerCase(backslashEscape);  [BUGGY]    if  (c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	Character  c  =  Character.toLowerCase(backslashEscape);	      Character    c    =    Character.toLowerCase(outputCharsetEncoder);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
171	[BUG]  [BUGGY]  Character  c  =  outputCharsetEncoder.toLowerCase(Character.class);  [CE]  illegal  start  of  type  [FE]                        ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  Character  c  =  outputCharsetEncoder.toLowerCase(Character.class);  [BUGGY]    if  (c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	Character  c  =  outputCharsetEncoder.toLowerCase(Character.class);	      Character    c    =    Character.toLowerCase(outputCharsetEncoder);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
172	[BUG]  [BUGGY]  Character  c  =  outputCharsetEncoder.toLowerCase(Character.DEFAULT);  [CE]  illegal  start  of  type  [FE]                          ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  Character  c  =  outputCharsetEncoder.toLowerCase(Character.DEFAULT);  [BUGGY]    if  (c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	Character  c  =  outputCharsetEncoder.toLowerCase(Character.DEFAULT);	      Character    c    =    Character.toLowerCase(outputCharsetEncoder);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
173	[BUG]  [BUGGY]  Character  c  =  outputCharsetEncoder.toLowerCase(Character.DEFAULT_SCRIPT);  [CE]  illegal  start  of  type  [FE]                            ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  Character  c  =  outputCharsetEncoder.toLowerCase(Character.DEFAULT_SCRIPT);  [BUGGY]    if  (c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	Character  c  =  outputCharsetEncoder.toLowerCase(Character.DEFAULT_SCRIPT);	      Character    c    =    Character.toLowerCase(outputCharsetEncoder);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
174	[BUG]  [BUGGY]  Character  c  =  outputCharsetEncoder.toLowerCase(Character.START_COMMENT);  [CE]  illegal  start  of  type  [FE]                              ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  Character  c  =  outputCharsetEncoder.toLowerCase(Character.START_COMMENT);  [BUGGY]    if  (c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	Character  c  =  outputCharsetEncoder.toLowerCase(Character.START_COMMENT);	      Character    c    =    Character.toLowerCase(outputCharsetEncoder);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
175	[BUG]  [BUGGY]  Character  c  =  outputCharsetEncoder.toLowerCase(Character.toLowerCase(c));  [CE]  illegal  start  of  type  [FE]                                ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  Character  c  =  outputCharsetEncoder.toLowerCase(Character.toLowerCase(c));  [BUGGY]    if  (c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	Character  c  =  outputCharsetEncoder.toLowerCase(Character.toLowerCase(c));	      Character    c    =    Character.toLowerCase(outputCharsetEncoder);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
176	[BUG]  [BUGGY]  Character  c  =  Character.toLowerCase(outputCharsetEncoder,  outputCharsetEncoder);  [CE]  illegal  start  of  type  [FE]                                  ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  Character  c  =  Character.toLowerCase(outputCharsetEncoder,  outputCharsetEncoder);  [BUGGY]    if  (c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	Character  c  =  Character.toLowerCase(outputCharsetEncoder,  outputCharsetEncoder);	      Character    c    =    Character.toLowerCase(outputCharsetEncoder);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
177	[BUG]  [BUGGY]  if  (c  <=  0x1f  &&  c  <=  0x7f)  {  [CE]  illegal  start  of  type  [FE]                ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  if  (c  <=  0x1f  &&  c  <=  0x7f)  {  [BUGGY]    sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	if  (c  <=  0x1f  &&  c  <=  0x7f)  {	  if    (c    <    0x1f    &&    c    <=    0x7f)    {    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
178	[BUG]  [BUGGY]  StringBuilder  sb  =  new  StringBuilder(outputCharsetEncoder.encode(c),  backslashEscape);  [CE]  illegal  start  of  type  [FE]                    ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  StringBuilder  sb  =  new  StringBuilder(outputCharsetEncoder.encode(c),  backslashEscape);  [BUGGY]    if  (c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	StringBuilder  sb  =  new  StringBuilder(outputCharsetEncoder.encode(c),  backslashEscape);	      StringBuilder    sb    =    new    StringBuilder(outputCharsetEncoder.encode(c),    quote);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
179	[BUG]  [BUGGY]  StringBuilder  sb  =  new  StringBuilder(outputCharsetEncoder.encode(c),  quote,  backslashEscape);  [CE]  illegal  start  of  type  [FE]                      ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  StringBuilder  sb  =  new  StringBuilder(outputCharsetEncoder.encode(c),  quote,  backslashEscape);  [BUGGY]    if  (c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	StringBuilder  sb  =  new  StringBuilder(outputCharsetEncoder.encode(c),  quote,  backslashEscape);	      StringBuilder    sb    =    new    StringBuilder(outputCharsetEncoder.encode(c),    quote);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
180	[BUG]  [BUGGY]  StringBuilder  sb  =  new  StringBuilder(outputCharsetEncoder.encode(c),  quote  +  1);  [CE]  illegal  start  of  type  [FE]                        ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  StringBuilder  sb  =  new  StringBuilder(outputCharsetEncoder.encode(c),  quote  +  1);  [BUGGY]    if  (c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	StringBuilder  sb  =  new  StringBuilder(outputCharsetEncoder.encode(c),  quote  +  1);	      StringBuilder    sb    =    new    StringBuilder(outputCharsetEncoder.encode(c),    quote);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
181	[BUG]  [BUGGY]  StringBuilder  sb  =  new  StringBuilder(outputCharsetEncoder.encode(c)+  quote,  quote);  [CE]  illegal  start  of  type  [FE]                          ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  StringBuilder  sb  =  new  StringBuilder(outputCharsetEncoder.encode(c)+  quote,  quote);  [BUGGY]    if  (c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	StringBuilder  sb  =  new  StringBuilder(outputCharsetEncoder.encode(c)+  quote,  quote);	      StringBuilder    sb    =    new    StringBuilder(outputCharsetEncoder.encode(c),    quote);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
182	[BUG]  [BUGGY]  StringBuilder  sb  =  new  StringBuilder(c,  outputCharsetEncoder.encode(c),  quote);  [CE]  illegal  start  of  type  [FE]                            ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  StringBuilder  sb  =  new  StringBuilder(c,  outputCharsetEncoder.encode(c),  quote);  [BUGGY]    if  (c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	StringBuilder  sb  =  new  StringBuilder(c,  outputCharsetEncoder.encode(c),  quote);	      StringBuilder    sb    =    new    StringBuilder(outputCharsetEncoder.encode(c),    quote);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
183	[BUG]  [BUGGY]  StringBuilder  sb  =  new  StringBuilder(outputCharsetEncoder.encode(c),  this.backslashEscape);  [CE]  illegal  start  of  type  [FE]                              ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  StringBuilder  sb  =  new  StringBuilder(outputCharsetEncoder.encode(c),  this.backslashEscape);  [BUGGY]    if  (c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	StringBuilder  sb  =  new  StringBuilder(outputCharsetEncoder.encode(c),  this.backslashEscape);	      StringBuilder    sb    =    new    StringBuilder(outputCharsetEncoder.encode(c),    quote);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
184	[BUG]  [BUGGY]  StringBuilder  sb  =  new  StringBuilder(outputCharsetEncoder.encode(c),  quote,  true);  [CE]  illegal  start  of  type  [FE]                                ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  StringBuilder  sb  =  new  StringBuilder(outputCharsetEncoder.encode(c),  quote,  true);  [BUGGY]    if  (c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	StringBuilder  sb  =  new  StringBuilder(outputCharsetEncoder.encode(c),  quote,  true);	      StringBuilder    sb    =    new    StringBuilder(outputCharsetEncoder.encode(c),    quote);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
185	[BUG]  [BUGGY]  StringBuilder  sb  =  new  StringBuilder(outputCharsetEncoder.encode(c),  backslashEscape,  quote);  [CE]  illegal  start  of  type  [FE]                                  ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  StringBuilder  sb  =  new  StringBuilder(outputCharsetEncoder.encode(c),  backslashEscape,  quote);  [BUGGY]    if  (c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	StringBuilder  sb  =  new  StringBuilder(outputCharsetEncoder.encode(c),  backslashEscape,  quote);	      StringBuilder    sb    =    new    StringBuilder(outputCharsetEncoder.encode(c),    quote);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
186	[BUG]  [BUGGY]  StringBuilder  sb  =  new  StringBuilder(outputCharsetEncoder.encode(c),  quote)+  1;  [CE]  illegal  start  of  type  [FE]                                    ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  StringBuilder  sb  =  new  StringBuilder(outputCharsetEncoder.encode(c),  quote)+  1;  [BUGGY]    if  (c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	StringBuilder  sb  =  new  StringBuilder(outputCharsetEncoder.encode(c),  quote)+  1;	      StringBuilder    sb    =    new    StringBuilder(outputCharsetEncoder.encode(c),    quote);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
187	[BUG]  [BUGGY]  if(c  <  0x1f  &&  c  <=  0x7f  &&  sb.charAt(c  -  1)!=  '/')  {  [CE]  illegal  start  of  type  [FE]                ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  if(c  <  0x1f  &&  c  <=  0x7f  &&  sb.charAt(c  -  1)!=  '/')  {  [BUGGY]    sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	if(c  <  0x1f  &&  c  <=  0x7f  &&  sb.charAt(c  -  1)!=  '/')  {	  if(c    >    0x1f    &&    c    <=    0x7f    &&    sb.charAt(c    -    1)!=    '/')    {    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
188	[BUG]  [BUGGY]  if(c  >=  0x1f  &&  c  <=  0x7f  &&  sb.charAt(c  -  1)!=  '/')  {  [CE]  illegal  start  of  type  [FE]                  ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  if(c  >=  0x1f  &&  c  <=  0x7f  &&  sb.charAt(c  -  1)!=  '/')  {  [BUGGY]    sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	if(c  >=  0x1f  &&  c  <=  0x7f  &&  sb.charAt(c  -  1)!=  '/')  {	  if(c    >    0x1f    &&    c    <=    0x7f    &&    sb.charAt(c    -    1)!=    '/')    {    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
189	[BUG]  [BUGGY]  if(c  >  0x1f  ||  c  <=  0x7f  &&  sb.charAt(c  -  1)!=  '/')  {  [CE]  illegal  start  of  type  [FE]                    ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  if(c  >  0x1f  ||  c  <=  0x7f  &&  sb.charAt(c  -  1)!=  '/')  {  [BUGGY]    sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	if(c  >  0x1f  ||  c  <=  0x7f  &&  sb.charAt(c  -  1)!=  '/')  {	  if(c    >    0x1f    &&    c    <=    0x7f    &&    sb.charAt(c    -    1)!=    '/')    {    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
190	[BUG]  [BUGGY]  if(c  >  0x1f  &&  c  <  0x7f  &&  sb.charAt(c  -  1)!=  '/')  {  [CE]  illegal  start  of  type  [FE]                      ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  if(c  >  0x1f  &&  c  <  0x7f  &&  sb.charAt(c  -  1)!=  '/')  {  [BUGGY]    sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	if(c  >  0x1f  &&  c  <  0x7f  &&  sb.charAt(c  -  1)!=  '/')  {	  if(c    >    0x1f    &&    c    <=    0x7f    &&    sb.charAt(c    -    1)!=    '/')    {    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
191	[BUG]  [BUGGY]  if(c  >  0x1f  &&  c  <=  0x7f  &&  sb.charAt(c  -  1)  ==  '/')  {  [CE]  illegal  start  of  type  [FE]                        ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  if(c  >  0x1f  &&  c  <=  0x7f  &&  sb.charAt(c  -  1)  ==  '/')  {  [BUGGY]    sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	if(c  >  0x1f  &&  c  <=  0x7f  &&  sb.charAt(c  -  1)  ==  '/')  {	  if(c    >    0x1f    &&    c    <=    0x7f    &&    sb.charAt(c    -    1)!=    '/')    {    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
192	[BUG]  [BUGGY]  if(c  <  0x7f  &&  c  <=  0x7f  &&  sb.charAt(c  -  1)!=  '/')  {  [CE]  illegal  start  of  type  [FE]                          ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  if(c  <  0x7f  &&  c  <=  0x7f  &&  sb.charAt(c  -  1)!=  '/')  {  [BUGGY]    sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	if(c  <  0x7f  &&  c  <=  0x7f  &&  sb.charAt(c  -  1)!=  '/')  {	  if(c    >    0x1f    &&    c    <=    0x7f    &&    sb.charAt(c    -    1)!=    '/')    {    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
193	[BUG]  [BUGGY]  if(c  <  0x1f  ||  c  <=  0x7f  &&  sb.charAt(c  -  1)!=  '/')  {  [CE]  illegal  start  of  type  [FE]                            ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  if(c  <  0x1f  ||  c  <=  0x7f  &&  sb.charAt(c  -  1)!=  '/')  {  [BUGGY]    sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	if(c  <  0x1f  ||  c  <=  0x7f  &&  sb.charAt(c  -  1)!=  '/')  {	  if(c    >    0x1f    &&    c    <=    0x7f    &&    sb.charAt(c    -    1)!=    '/')    {    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
194	[BUG]  [BUGGY]  if(c  <  0x7f  ||  c  <=  0x7f  &&  sb.charAt(c  -  1)!=  '/')  {  [CE]  illegal  start  of  type  [FE]                              ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  if(c  <  0x7f  ||  c  <=  0x7f  &&  sb.charAt(c  -  1)!=  '/')  {  [BUGGY]    sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	if(c  <  0x7f  ||  c  <=  0x7f  &&  sb.charAt(c  -  1)!=  '/')  {	  if(c    >    0x1f    &&    c    <=    0x7f    &&    sb.charAt(c    -    1)!=    '/')    {    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
195	[BUG]  [BUGGY]  if(c  >=  '/'  &&  c  <=  0x7f  &&  sb.charAt(c  -  1)!=  '/')  {  [CE]  illegal  start  of  type  [FE]                                ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  if(c  >=  '/'  &&  c  <=  0x7f  &&  sb.charAt(c  -  1)!=  '/')  {  [BUGGY]    sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	if(c  >=  '/'  &&  c  <=  0x7f  &&  sb.charAt(c  -  1)!=  '/')  {	  if(c    >    0x1f    &&    c    <=    0x7f    &&    sb.charAt(c    -    1)!=    '/')    {    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
196	[BUG]  [BUGGY]  if(c  >  0x1f  &&  c  <=  0x7f  ||  c.charAt(c  -  1)!=  '/')  {  [CE]  illegal  start  of  type  [FE]                                  ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  if(c  >  0x1f  &&  c  <=  0x7f  ||  c.charAt(c  -  1)!=  '/')  {  [BUGGY]    sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	if(c  >  0x1f  &&  c  <=  0x7f  ||  c.charAt(c  -  1)!=  '/')  {	  if(c    >    0x1f    &&    c    <=    0x7f    &&    sb.charAt(c    -    1)!=    '/')    {    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
197	[BUG]  [BUGGY]  if(c  >  0x1f  ||  c  <=  0x7f  ||!outputCharsetEncoder.canEncode(c))  {  [CE]  illegal  start  of  type  [FE]                    ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  if(c  >  0x1f  ||  c  <=  0x7f  ||!outputCharsetEncoder.canEncode(c))  {  [BUGGY]    sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	if(c  >  0x1f  ||  c  <=  0x7f  ||!outputCharsetEncoder.canEncode(c))  {	  if(c    >    0x1f    &&    c    <=    0x7f    ||!outputCharsetEncoder.canEncode(c))    {    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
198	[BUG]  [BUGGY]  if(c  <  0x1f  ||  c  <=  0x7f  ||!outputCharsetEncoder.canEncode(c))  {  [CE]  illegal  start  of  type  [FE]                      ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  if(c  <  0x1f  ||  c  <=  0x7f  ||!outputCharsetEncoder.canEncode(c))  {  [BUGGY]    sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	if(c  <  0x1f  ||  c  <=  0x7f  ||!outputCharsetEncoder.canEncode(c))  {	  if(c    >    0x1f    &&    c    <=    0x7f    ||!outputCharsetEncoder.canEncode(c))    {    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
199	[BUG]  [BUGGY]  if(c  <  0x1f  &&  c  <=  0x7f  ||!outputCharsetEncoder.canEncode(c))  {  [CE]  illegal  start  of  type  [FE]                        ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  if(c  <  0x1f  &&  c  <=  0x7f  ||!outputCharsetEncoder.canEncode(c))  {  [BUGGY]    sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	if(c  <  0x1f  &&  c  <=  0x7f  ||!outputCharsetEncoder.canEncode(c))  {	  if(c    >    0x1f    &&    c    <=    0x7f    ||!outputCharsetEncoder.canEncode(c))    {    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
200	[BUG]  [BUGGY]  if(c  >=  0x1f  &&  c  <=  0x7f  ||!outputCharsetEncoder.canEncode(c))  {  [CE]  illegal  start  of  type  [FE]                          ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  if(c  >=  0x1f  &&  c  <=  0x7f  ||!outputCharsetEncoder.canEncode(c))  {  [BUGGY]    sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	if(c  >=  0x1f  &&  c  <=  0x7f  ||!outputCharsetEncoder.canEncode(c))  {	  if(c    >    0x1f    &&    c    <=    0x7f    ||!outputCharsetEncoder.canEncode(c))    {    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
201	[BUG]  [BUGGY]  if(c  ==  0x1f  &&  c  <=  0x7f  ||!outputCharsetEncoder.canEncode(c))  {  [CE]  illegal  start  of  type  [FE]                            ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  if(c  ==  0x1f  &&  c  <=  0x7f  ||!outputCharsetEncoder.canEncode(c))  {  [BUGGY]    sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	if(c  ==  0x1f  &&  c  <=  0x7f  ||!outputCharsetEncoder.canEncode(c))  {	  if(c    >    0x1f    &&    c    <=    0x7f    ||!outputCharsetEncoder.canEncode(c))    {    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
202	[BUG]  [BUGGY]  if(c  <=  0x1f  &&  c  <=  0x7f  ||!outputCharsetEncoder.canEncode(c))  {  [CE]  illegal  start  of  type  [FE]                              ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  if(c  <=  0x1f  &&  c  <=  0x7f  ||!outputCharsetEncoder.canEncode(c))  {  [BUGGY]    sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	if(c  <=  0x1f  &&  c  <=  0x7f  ||!outputCharsetEncoder.canEncode(c))  {	  if(c    >    0x1f    &&    c    <=    0x7f    ||!outputCharsetEncoder.canEncode(c))    {    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
203	[BUG]  [BUGGY]  sb.append(c);  [CE]  illegal  start  of  type  [FE]        ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  sb.append(c);  [BUGGY]    if  (c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	sb.append(c);	      c    >    0x1f    &&    c    <=    0x7f)    {    sb.append(c);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
204	[BUG]  [BUGGY]  c  >  0x1f  &&  c  <  0x7f)  {  sb.append(c);  [CE]  illegal  start  of  type  [FE]          ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  c  >  0x1f  &&  c  <  0x7f)  {  sb.append(c);  [BUGGY]    if  (c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	c  >  0x1f  &&  c  <  0x7f)  {  sb.append(c);	      c    >    0x1f    &&    c    <=    0x7f)    {    sb.append(c);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
205	[BUG]  [BUGGY]  if(c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  [CE]  illegal  start  of  type  [FE]            ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  if(c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  [BUGGY]    if  (c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	if(c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }	      c    >    0x1f    &&    c    <=    0x7f)    {    sb.append(c);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
206	[BUG]  [BUGGY]  c  <=  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  [CE]  illegal  start  of  type  [FE]              ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  c  <=  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  [BUGGY]    if  (c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	c  <=  0x1f  &&  c  <=  0x7f)  {  sb.append(c);	      c    >    0x1f    &&    c    <=    0x7f)    {    sb.append(c);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
207	[BUG]  [BUGGY]  c  <=  0x7f  &&  c  <=  0x1f)  {  sb.append(c);  [CE]  illegal  start  of  type  [FE]                ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  c  <=  0x7f  &&  c  <=  0x1f)  {  sb.append(c);  [BUGGY]    if  (c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	c  <=  0x7f  &&  c  <=  0x1f)  {  sb.append(c);	      c    >    0x1f    &&    c    <=    0x7f)    {    sb.append(c);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
208	[BUG]  [BUGGY]  c  >  0x1f  ||  c  <=  0x7f)  {  sb.append(c);  [CE]  illegal  start  of  type  [FE]                  ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  c  >  0x1f  ||  c  <=  0x7f)  {  sb.append(c);  [BUGGY]    if  (c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	c  >  0x1f  ||  c  <=  0x7f)  {  sb.append(c);	      c    >    0x1f    &&    c    <=    0x7f)    {    sb.append(c);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
209	[BUG]  [BUGGY]  if(c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  [CE]  illegal  start  of  type  [FE]                    ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  if(c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  [BUGGY]    if  (c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	if(c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }	      c    >    0x1f    &&    c    <=    0x7f)    {    sb.append(c);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
210	[BUG]  [BUGGY]  c  >  0x1f  &&  c  <=  0x7f)  {  sb.append('n');  [CE]  illegal  start  of  type  [FE]                      ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  c  >  0x1f  &&  c  <=  0x7f)  {  sb.append('n');  [BUGGY]    if  (c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	c  >  0x1f  &&  c  <=  0x7f)  {  sb.append('n');	      c    >    0x1f    &&    c    <=    0x7f)    {    sb.append(c);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
211	[BUG]  [BUGGY]  c  <  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  [CE]  illegal  start  of  type  [FE]                        ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  c  <  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  [BUGGY]    if  (c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	c  <  0x1f  &&  c  <=  0x7f)  {  sb.append(c);	      c    >    0x1f    &&    c    <=    0x7f)    {    sb.append(c);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
212	[BUG]  [BUGGY]  if(c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  else  {  AppendHexJavaScriptRepresentation(sb,  c);  }  [CE]  illegal  start  of  type  [FE]                          ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  if(c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  else  {  AppendHexJavaScriptRepresentation(sb,  c);  }  [BUGGY]    if  (c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	if(c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  else  {  AppendHexJavaScriptRepresentation(sb,  c);  }	      c    >    0x1f    &&    c    <=    0x7f)    {    sb.append(c);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
213	[BUG]  [BUGGY]  StringBuilder  sb  =  new  StringBuilder(c.encode(quote));  [CE]  illegal  start  of  type  [FE]                ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  StringBuilder  sb  =  new  StringBuilder(c.encode(quote));  [BUGGY]    if  (c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	StringBuilder  sb  =  new  StringBuilder(c.encode(quote));	      StringBuilder    sb    =    new    StringBuilder(outputCharsetEncoder.encode(quote));    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
214	[BUG]  [BUGGY]  StringBuilder  sb  =  new  StringBuilder(c,  outputCharsetEncoder.encode(quote));  [CE]  illegal  start  of  type  [FE]                  ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  StringBuilder  sb  =  new  StringBuilder(c,  outputCharsetEncoder.encode(quote));  [BUGGY]    if  (c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	StringBuilder  sb  =  new  StringBuilder(c,  outputCharsetEncoder.encode(quote));	      StringBuilder    sb    =    new    StringBuilder(outputCharsetEncoder.encode(quote));    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
215	[BUG]  [BUGGY]  sb  =  new  StringBuilder(outputCharsetEncoder.encode(c));  [CE]  illegal  start  of  type  [FE]                    ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  sb  =  new  StringBuilder(outputCharsetEncoder.encode(c));  [BUGGY]    if  (c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	sb  =  new  StringBuilder(outputCharsetEncoder.encode(c));	      StringBuilder    sb    =    new    StringBuilder(outputCharsetEncoder.encode(quote));    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
216	[BUG]  [BUGGY]  StringBuilder  sb  =  new  StringBuilder(s.charAt(i),  outputCharsetEncoder.encode(quote));  [CE]  illegal  start  of  type  [FE]                      ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  StringBuilder  sb  =  new  StringBuilder(s.charAt(i),  outputCharsetEncoder.encode(quote));  [BUGGY]    if  (c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	StringBuilder  sb  =  new  StringBuilder(s.charAt(i),  outputCharsetEncoder.encode(quote));	      StringBuilder    sb    =    new    StringBuilder(outputCharsetEncoder.encode(quote));    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
217	[BUG]  [BUGGY]  StringBuilder  sb  =  new  StringBuilder(quoteEscape.encode(outputCharsetEncoder));  [CE]  illegal  start  of  type  [FE]                        ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  StringBuilder  sb  =  new  StringBuilder(quoteEscape.encode(outputCharsetEncoder));  [BUGGY]    if  (c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	StringBuilder  sb  =  new  StringBuilder(quoteEscape.encode(outputCharsetEncoder));	      StringBuilder    sb    =    new    StringBuilder(outputCharsetEncoder.encode(quote));    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
218	[BUG]  [BUGGY]  StringBuilder  sb  =  new  StringBuilder(s.encode(quote));  [CE]  illegal  start  of  type  [FE]                          ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  StringBuilder  sb  =  new  StringBuilder(s.encode(quote));  [BUGGY]    if  (c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	StringBuilder  sb  =  new  StringBuilder(s.encode(quote));	      StringBuilder    sb    =    new    StringBuilder(outputCharsetEncoder.encode(quote));    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
219	[BUG]  [BUGGY]  StringBuilder  sb  =  new  StringBuilder(outputCharsetEncoder.encodeHexJavaScriptRepresentation(c,  quote));  [CE]  illegal  start  of  type  [FE]                            ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  StringBuilder  sb  =  new  StringBuilder(outputCharsetEncoder.encodeHexJavaScriptRepresentation(c,  quote));  [BUGGY]    if  (c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	StringBuilder  sb  =  new  StringBuilder(outputCharsetEncoder.encodeHexJavaScriptRepresentation(c,  quote));	      StringBuilder    sb    =    new    StringBuilder(outputCharsetEncoder.encode(quote));    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
220	[BUG]  [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.canEncode(sb);  [CE]  illegal  start  of  type  [FE]                  ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.canEncode(sb);  [BUGGY]    if  (c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	CharsetEncoder  cc  =  outputCharsetEncoder.canEncode(sb);	      CharsetEncoder    cc    =    outputCharsetEncoder.canEncode(c);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
221	[BUG]  [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.canEncode(c,  backslashEscape);  [CE]  illegal  start  of  type  [FE]                    ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.canEncode(c,  backslashEscape);  [BUGGY]    if  (c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	CharsetEncoder  cc  =  outputCharsetEncoder.canEncode(c,  backslashEscape);	      CharsetEncoder    cc    =    outputCharsetEncoder.canEncode(c);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
222	[BUG]  [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.canEncode(sb,  c);  [CE]  illegal  start  of  type  [FE]                      ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.canEncode(sb,  c);  [BUGGY]    if  (c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	CharsetEncoder  cc  =  outputCharsetEncoder.canEncode(sb,  c);	      CharsetEncoder    cc    =    outputCharsetEncoder.canEncode(c);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
223	[BUG]  [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.canEncode(c,  quote);  [CE]  illegal  start  of  type  [FE]                        ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.canEncode(c,  quote);  [BUGGY]    if  (c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	CharsetEncoder  cc  =  outputCharsetEncoder.canEncode(c,  quote);	      CharsetEncoder    cc    =    outputCharsetEncoder.canEncode(c);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
224	[BUG]  [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.getEncoder(c);  [CE]  illegal  start  of  type  [FE]                          ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.getEncoder(c);  [BUGGY]    if  (c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	CharsetEncoder  cc  =  outputCharsetEncoder.getEncoder(c);	      CharsetEncoder    cc    =    outputCharsetEncoder.canEncode(c);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
225	[BUG]  [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.canEncode(c,  sb);  [CE]  illegal  start  of  type  [FE]                            ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.canEncode(c,  sb);  [BUGGY]    if  (c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	CharsetEncoder  cc  =  outputCharsetEncoder.canEncode(c,  sb);	      CharsetEncoder    cc    =    outputCharsetEncoder.canEncode(c);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
226	[BUG]  [BUGGY]  CharsetEncoder  cc  =  inputCharsetEncoder.canEncode(c);  [CE]  illegal  start  of  type  [FE]                              ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  CharsetEncoder  cc  =  inputCharsetEncoder.canEncode(c);  [BUGGY]    if  (c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	CharsetEncoder  cc  =  inputCharsetEncoder.canEncode(c);	      CharsetEncoder    cc    =    outputCharsetEncoder.canEncode(c);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
227	[BUG]  [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.getCurrentCharsetEncoder();  [CE]  illegal  start  of  type  [FE]                                ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.getCurrentCharsetEncoder();  [BUGGY]    if  (c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	CharsetEncoder  cc  =  outputCharsetEncoder.getCurrentCharsetEncoder();	      CharsetEncoder    cc    =    outputCharsetEncoder.canEncode(c);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
228	[BUG]  [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.isEncoded(c);  [CE]  illegal  start  of  type  [FE]                                  ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.isEncoded(c);  [BUGGY]    if  (c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	CharsetEncoder  cc  =  outputCharsetEncoder.isEncoded(c);	      CharsetEncoder    cc    =    outputCharsetEncoder.canEncode(c);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
229	[BUG]  [BUGGY]  if  (c  <  0x1f  ||  c  >=  0x7f)  {  [CE]  illegal  start  of  type  [FE]          ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  if  (c  <  0x1f  ||  c  >=  0x7f)  {  [BUGGY]    sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	if  (c  <  0x1f  ||  c  >=  0x7f)  {	  if    (c    <    0x1f    ||    c    <=    0x7f)    {    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
230	[BUG]  [BUGGY]  if  (c  <  0x1f  ||  c  ==  0x7f)  {  [CE]  illegal  start  of  type  [FE]            ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  if  (c  <  0x1f  ||  c  ==  0x7f)  {  [BUGGY]    sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	if  (c  <  0x1f  ||  c  ==  0x7f)  {	  if    (c    <    0x1f    ||    c    <=    0x7f)    {    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
231	[BUG]  [BUGGY]  Character  c  =  outputCharsetEncoder.canEncode(s);  [CE]  illegal  start  of  type  [FE]                    ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  Character  c  =  outputCharsetEncoder.canEncode(s);  [BUGGY]    if  (c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	Character  c  =  outputCharsetEncoder.canEncode(s);	      Character    c    =    outputCharsetEncoder.canEncode(c);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
232	[BUG]  [BUGGY]  Character  c  =  outputCharsetEncoder.canEncode(sb,  c);  [CE]  illegal  start  of  type  [FE]                      ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  Character  c  =  outputCharsetEncoder.canEncode(sb,  c);  [BUGGY]    if  (c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	Character  c  =  outputCharsetEncoder.canEncode(sb,  c);	      Character    c    =    outputCharsetEncoder.canEncode(c);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
233	[BUG]  [BUGGY]  Character  c  =  outputCharsetEncoder.canEncode(c,  quote);  [CE]  illegal  start  of  type  [FE]                        ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  Character  c  =  outputCharsetEncoder.canEncode(c,  quote);  [BUGGY]    if  (c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	Character  c  =  outputCharsetEncoder.canEncode(c,  quote);	      Character    c    =    outputCharsetEncoder.canEncode(c);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
234	[BUG]  [BUGGY]  Character  c  =  inputCharsetEncoder.canEncode(c);  [CE]  illegal  start  of  type  [FE]                          ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  Character  c  =  inputCharsetEncoder.canEncode(c);  [BUGGY]    if  (c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	Character  c  =  inputCharsetEncoder.canEncode(c);	      Character    c    =    outputCharsetEncoder.canEncode(c);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
235	[BUG]  [BUGGY]  Character  c  =  outputCharsetEncoder.canEncode(shortquoteEscape);  [CE]  illegal  start  of  type  [FE]                            ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  Character  c  =  outputCharsetEncoder.canEncode(shortquoteEscape);  [BUGGY]    if  (c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	Character  c  =  outputCharsetEncoder.canEncode(shortquoteEscape);	      Character    c    =    outputCharsetEncoder.canEncode(c);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
236	[BUG]  [BUGGY]  Character  c  =  outputCharsetEncoder.canEncode(strEscape);  [CE]  illegal  start  of  type  [FE]                              ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  Character  c  =  outputCharsetEncoder.canEncode(strEscape);  [BUGGY]    if  (c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	Character  c  =  outputCharsetEncoder.canEncode(strEscape);	      Character    c    =    outputCharsetEncoder.canEncode(c);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
237	[BUG]  [BUGGY]  Character  c  =  outputCharsetEncoder.canEncode(char);  [CE]  illegal  start  of  type  [FE]                                ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  Character  c  =  outputCharsetEncoder.canEncode(char);  [BUGGY]    if  (c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	Character  c  =  outputCharsetEncoder.canEncode(char);	      Character    c    =    outputCharsetEncoder.canEncode(c);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
238	[BUG]  [BUGGY]  c  =  outputCharsetEncoder.encode(sb,  c);  [CE]  illegal  start  of  type  [FE]                        ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  c  =  outputCharsetEncoder.encode(sb,  c);  [BUGGY]    if  (c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	c  =  outputCharsetEncoder.encode(sb,  c);	      c    =    outputCharsetEncoder.encode(c);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
239	[BUG]  [BUGGY]  c  =  outputCharsetEncoder.encode(c,  backslashEscape);  [CE]  illegal  start  of  type  [FE]                          ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  c  =  outputCharsetEncoder.encode(c,  backslashEscape);  [BUGGY]    if  (c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	c  =  outputCharsetEncoder.encode(c,  backslashEscape);	      c    =    outputCharsetEncoder.encode(c);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
240	[BUG]  [BUGGY]  c  =  outputCharsetEncoder.encode(c,  quote);  [CE]  illegal  start  of  type  [FE]                            ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  c  =  outputCharsetEncoder.encode(c,  quote);  [BUGGY]    if  (c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	c  =  outputCharsetEncoder.encode(c,  quote);	      c    =    outputCharsetEncoder.encode(c);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
241	[BUG]  [BUGGY]  c  =  outputCharsetEncoder.encode(sb);  [CE]  illegal  start  of  type  [FE]                              ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  c  =  outputCharsetEncoder.encode(sb);  [BUGGY]    if  (c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	c  =  outputCharsetEncoder.encode(sb);	      c    =    outputCharsetEncoder.encode(c);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
242	[BUG]  [BUGGY]  c  =  inputCharsetEncoder.encode(c);  [CE]  illegal  start  of  type  [FE]                                ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  c  =  inputCharsetEncoder.encode(c);  [BUGGY]    if  (c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	c  =  inputCharsetEncoder.encode(c);	      c    =    outputCharsetEncoder.encode(c);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
243	[BUG]  [BUGGY]  c  =  inputCharsetEncoder.encode(c,  sb);  [CE]  illegal  start  of  type  [FE]                                  ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  c  =  inputCharsetEncoder.encode(c,  sb);  [BUGGY]    if  (c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	c  =  inputCharsetEncoder.encode(c,  sb);	      c    =    outputCharsetEncoder.encode(c);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
244	[BUG]  [BUGGY]  c  =  outputCharsetEncoder.encode(s,  c);  [CE]  illegal  start  of  type  [FE]                                    ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  c  =  outputCharsetEncoder.encode(s,  c);  [BUGGY]    if  (c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	c  =  outputCharsetEncoder.encode(s,  c);	      c    =    outputCharsetEncoder.encode(c);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
245	[BUG]  [BUGGY]  c  =  outputCharsetEncoder.encode(outputCharsetEncoder,  c);  [CE]  illegal  start  of  type  [FE]                                      ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  c  =  outputCharsetEncoder.encode(outputCharsetEncoder,  c);  [BUGGY]    if  (c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	c  =  outputCharsetEncoder.encode(outputCharsetEncoder,  c);	      c    =    outputCharsetEncoder.encode(c);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
246	[BUG]  [BUGGY]  c  =  outputCharsetEncoder.encode(c,  sb);  [CE]  illegal  start  of  type  [FE]                                        ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  c  =  outputCharsetEncoder.encode(c,  sb);  [BUGGY]    if  (c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	c  =  outputCharsetEncoder.encode(c,  sb);	      c    =    outputCharsetEncoder.encode(c);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
247	[BUG]  [BUGGY]  c  =  outputCharsetEncoder.encode(char,  quote);  [CE]  illegal  start  of  type  [FE]                                          ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  c  =  outputCharsetEncoder.encode(char,  quote);  [BUGGY]    if  (c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	c  =  outputCharsetEncoder.encode(char,  quote);	      c    =    outputCharsetEncoder.encode(c);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
248	[BUG]  [BUGGY]  c  =  outputCharsetEncoder.encode(ptr);  [CE]  illegal  start  of  type  [FE]                                            ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  c  =  outputCharsetEncoder.encode(ptr);  [BUGGY]    if  (c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	c  =  outputCharsetEncoder.encode(ptr);	      c    =    outputCharsetEncoder.encode(c);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
249	[BUG]  [BUGGY]  CharsetEncoder  cc  =  inputCharsetEncoder.getEncoder();  [CE]  illegal  start  of  type  [FE]                      ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  CharsetEncoder  cc  =  inputCharsetEncoder.getEncoder();  [BUGGY]    if  (c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	CharsetEncoder  cc  =  inputCharsetEncoder.getEncoder();	      CharsetEncoder    cc    =    outputCharsetEncoder.getEncoder();    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
250	[BUG]  [BUGGY]  CharsetEncoder  cc  =  this.outputCharsetEncoder.getEncoder();  [CE]  illegal  start  of  type  [FE]                        ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  CharsetEncoder  cc  =  this.outputCharsetEncoder.getEncoder();  [BUGGY]    if  (c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	CharsetEncoder  cc  =  this.outputCharsetEncoder.getEncoder();	      CharsetEncoder    cc    =    outputCharsetEncoder.getEncoder();    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
251	[BUG]  [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.getEncoder(backslashEscape);  [CE]  illegal  start  of  type  [FE]                          ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.getEncoder(backslashEscape);  [BUGGY]    if  (c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	CharsetEncoder  cc  =  outputCharsetEncoder.getEncoder(backslashEscape);	      CharsetEncoder    cc    =    outputCharsetEncoder.getEncoder();    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
252	[BUG]  [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.getEncoder(outputCharsetEncoder);  [CE]  illegal  start  of  type  [FE]                            ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.getEncoder(outputCharsetEncoder);  [BUGGY]    if  (c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	CharsetEncoder  cc  =  outputCharsetEncoder.getEncoder(outputCharsetEncoder);	      CharsetEncoder    cc    =    outputCharsetEncoder.getEncoder();    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
253	[BUG]  [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.getEncoder(sb);  [CE]  illegal  start  of  type  [FE]                              ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.getEncoder(sb);  [BUGGY]    if  (c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	CharsetEncoder  cc  =  outputCharsetEncoder.getEncoder(sb);	      CharsetEncoder    cc    =    outputCharsetEncoder.getEncoder();    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
254	[BUG]  [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.getEncoder(context);  [CE]  illegal  start  of  type  [FE]                                ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.getEncoder(context);  [BUGGY]    if  (c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	CharsetEncoder  cc  =  outputCharsetEncoder.getEncoder(context);	      CharsetEncoder    cc    =    outputCharsetEncoder.getEncoder();    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
255	[BUG]  [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.charAt(i);  [CE]  illegal  start  of  type  [FE]                                  ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.charAt(i);  [BUGGY]    if  (c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	CharsetEncoder  cc  =  outputCharsetEncoder.charAt(i);	      CharsetEncoder    cc    =    outputCharsetEncoder.getEncoder();    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
256	[BUG]  [BUGGY]  if(c  >  0x1f  ||  c  <=  0x7f  &&!outputCharsetEncoder.canEncode(c))  {  [CE]  illegal  start  of  type  [FE]        ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  if(c  >  0x1f  ||  c  <=  0x7f  &&!outputCharsetEncoder.canEncode(c))  {  [BUGGY]    sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	if(c  >  0x1f  ||  c  <=  0x7f  &&!outputCharsetEncoder.canEncode(c))  {	  if(c    >    0x1f    &&    c    <=    0x7f    &&!outputCharsetEncoder.canEncode(c))    {    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
257	[BUG]  [BUGGY]  if(c  <  0x1f  &&  c  <=  0x7f  &&!outputCharsetEncoder.canEncode(c))  {  [CE]  illegal  start  of  type  [FE]          ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  if(c  <  0x1f  &&  c  <=  0x7f  &&!outputCharsetEncoder.canEncode(c))  {  [BUGGY]    sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	if(c  <  0x1f  &&  c  <=  0x7f  &&!outputCharsetEncoder.canEncode(c))  {	  if(c    >    0x1f    &&    c    <=    0x7f    &&!outputCharsetEncoder.canEncode(c))    {    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
258	[BUG]  [BUGGY]  if(c  >  0x1f  &&  c  <  0x7f  &&!outputCharsetEncoder.canEncode(c))  {  [CE]  illegal  start  of  type  [FE]            ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  if(c  >  0x1f  &&  c  <  0x7f  &&!outputCharsetEncoder.canEncode(c))  {  [BUGGY]    sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	if(c  >  0x1f  &&  c  <  0x7f  &&!outputCharsetEncoder.canEncode(c))  {	  if(c    >    0x1f    &&    c    <=    0x7f    &&!outputCharsetEncoder.canEncode(c))    {    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
259	[BUG]  [BUGGY]  if(c  >=  0x1f  &&  c  <=  0x7f  &&!outputCharsetEncoder.canEncode(c))  {  [CE]  illegal  start  of  type  [FE]              ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  if(c  >=  0x1f  &&  c  <=  0x7f  &&!outputCharsetEncoder.canEncode(c))  {  [BUGGY]    sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	if(c  >=  0x1f  &&  c  <=  0x7f  &&!outputCharsetEncoder.canEncode(c))  {	  if(c    >    0x1f    &&    c    <=    0x7f    &&!outputCharsetEncoder.canEncode(c))    {    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
260	[BUG]  [BUGGY]  if(c  <=  0x1f  &&  c  <=  0x7f  &&!outputCharsetEncoder.canEncode(c))  {  [CE]  illegal  start  of  type  [FE]                ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  if(c  <=  0x1f  &&  c  <=  0x7f  &&!outputCharsetEncoder.canEncode(c))  {  [BUGGY]    sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	if(c  <=  0x1f  &&  c  <=  0x7f  &&!outputCharsetEncoder.canEncode(c))  {	  if(c    >    0x1f    &&    c    <=    0x7f    &&!outputCharsetEncoder.canEncode(c))    {    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
261	[BUG]  [BUGGY]  if(c  >  0x1f  ||  c  <=  0x7f  ||  c  >  0x10FFFF)  {  [CE]  illegal  start  of  type  [FE]            ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  if(c  >  0x1f  ||  c  <=  0x7f  ||  c  >  0x10FFFF)  {  [BUGGY]    sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	if(c  >  0x1f  ||  c  <=  0x7f  ||  c  >  0x10FFFF)  {	  if(c    >    0x1f    &&    c    <=    0x7f    ||    c    >    0x10FFFF)    {    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
262	[BUG]  [BUGGY]  if(c  <  0x1f  ||  c  <=  0x7f  ||  c  >  0x10FFFF)  {  [CE]  illegal  start  of  type  [FE]              ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  if(c  <  0x1f  ||  c  <=  0x7f  ||  c  >  0x10FFFF)  {  [BUGGY]    sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	if(c  <  0x1f  ||  c  <=  0x7f  ||  c  >  0x10FFFF)  {	  if(c    >    0x1f    &&    c    <=    0x7f    ||    c    >    0x10FFFF)    {    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
263	[BUG]  [BUGGY]  if(c  <  0x7f  ||  c  >  0x10FFFF)  {  [CE]  illegal  start  of  type  [FE]                ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  if(c  <  0x7f  ||  c  >  0x10FFFF)  {  [BUGGY]    sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	if(c  <  0x7f  ||  c  >  0x10FFFF)  {	  if(c    >    0x1f    &&    c    <=    0x7f    ||    c    >    0x10FFFF)    {    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
264	[BUG]  [BUGGY]  if(c  <  0x1f  ||  c  >  0x7f  ||  c  >  0x10FFFF)  {  [CE]  illegal  start  of  type  [FE]                  ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  if(c  <  0x1f  ||  c  >  0x7f  ||  c  >  0x10FFFF)  {  [BUGGY]    sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	if(c  <  0x1f  ||  c  >  0x7f  ||  c  >  0x10FFFF)  {	  if(c    >    0x1f    &&    c    <=    0x7f    ||    c    >    0x10FFFF)    {    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
265	[BUG]  [BUGGY]  if(c  >=  0x1f  &&  c  <=  0x7f  ||  c  >  0x10FFFF)  {  [CE]  illegal  start  of  type  [FE]                    ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  if(c  >=  0x1f  &&  c  <=  0x7f  ||  c  >  0x10FFFF)  {  [BUGGY]    sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	if(c  >=  0x1f  &&  c  <=  0x7f  ||  c  >  0x10FFFF)  {	  if(c    >    0x1f    &&    c    <=    0x7f    ||    c    >    0x10FFFF)    {    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
266	[BUG]  [BUGGY]  if(c  >  0x1f  &&  c  <  0x7f  ||  c  >  0x10FFFF)  {  [CE]  illegal  start  of  type  [FE]                      ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  if(c  >  0x1f  &&  c  <  0x7f  ||  c  >  0x10FFFF)  {  [BUGGY]    sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	if(c  >  0x1f  &&  c  <  0x7f  ||  c  >  0x10FFFF)  {	  if(c    >    0x1f    &&    c    <=    0x7f    ||    c    >    0x10FFFF)    {    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
267	[BUG]  [BUGGY]  if(c  <=  0x1f  ||  c  <=  0x7f  ||  c  >  0x10FFFF)  {  [CE]  illegal  start  of  type  [FE]                        ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  if(c  <=  0x1f  ||  c  <=  0x7f  ||  c  >  0x10FFFF)  {  [BUGGY]    sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	if(c  <=  0x1f  ||  c  <=  0x7f  ||  c  >  0x10FFFF)  {	  if(c    >    0x1f    &&    c    <=    0x7f    ||    c    >    0x10FFFF)    {    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
268	[BUG]  [BUGGY]  if(c  >  0x1f  &&  c  <=  0x7f  ||  c  <=  0x10FFFF)  {  [CE]  illegal  start  of  type  [FE]                          ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  if(c  >  0x1f  &&  c  <=  0x7f  ||  c  <=  0x10FFFF)  {  [BUGGY]    sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	if(c  >  0x1f  &&  c  <=  0x7f  ||  c  <=  0x10FFFF)  {	  if(c    >    0x1f    &&    c    <=    0x7f    ||    c    >    0x10FFFF)    {    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
269	[BUG]  [BUGGY]  if(c  ==  0x1f  &&  c  <=  0x7f  ||  c  >  0x10FFFF)  {  [CE]  illegal  start  of  type  [FE]                            ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  if(c  ==  0x1f  &&  c  <=  0x7f  ||  c  >  0x10FFFF)  {  [BUGGY]    sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	if(c  ==  0x1f  &&  c  <=  0x7f  ||  c  >  0x10FFFF)  {	  if(c    >    0x1f    &&    c    <=    0x7f    ||    c    >    0x10FFFF)    {    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
270	[BUG]  [BUGGY]  if(c  <  0x1f  &&  c  <=  0x7f  ||  c  >  0x10FFFF)  {  [CE]  illegal  start  of  type  [FE]                              ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  if(c  <  0x1f  &&  c  <=  0x7f  ||  c  >  0x10FFFF)  {  [BUGGY]    sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	if(c  <  0x1f  &&  c  <=  0x7f  ||  c  >  0x10FFFF)  {	  if(c    >    0x1f    &&    c    <=    0x7f    ||    c    >    0x10FFFF)    {    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
271	[BUG]  [BUGGY]  if(c  <=  0x1f  ||  c  >  0x7f  ||  c  >  0x10FFFF)  {  [CE]  illegal  start  of  type  [FE]                                ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  if(c  <=  0x1f  ||  c  >  0x7f  ||  c  >  0x10FFFF)  {  [BUGGY]    sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	if(c  <=  0x1f  ||  c  >  0x7f  ||  c  >  0x10FFFF)  {	  if(c    >    0x1f    &&    c    <=    0x7f    ||    c    >    0x10FFFF)    {    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
272	[BUG]  [BUGGY]  Character  c  =  outputCharsetEncoder.encode(sb);  [CE]  illegal  start  of  type  [FE]                            ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  Character  c  =  outputCharsetEncoder.encode(sb);  [BUGGY]    if  (c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	Character  c  =  outputCharsetEncoder.encode(sb);	      Character    c    =    outputCharsetEncoder.encode(c);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
273	[BUG]  [BUGGY]  Character  c  =  outputCharsetEncoder.encode(c,  quote);  [CE]  illegal  start  of  type  [FE]                              ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  Character  c  =  outputCharsetEncoder.encode(c,  quote);  [BUGGY]    if  (c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	Character  c  =  outputCharsetEncoder.encode(c,  quote);	      Character    c    =    outputCharsetEncoder.encode(c);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
274	[BUG]  [BUGGY]  Character  c  =  outputCharsetEncoder.encode(sb,  c);  [CE]  illegal  start  of  type  [FE]                                ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  Character  c  =  outputCharsetEncoder.encode(sb,  c);  [BUGGY]    if  (c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	Character  c  =  outputCharsetEncoder.encode(sb,  c);	      Character    c    =    outputCharsetEncoder.encode(c);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
275	[BUG]  [BUGGY]  Character  c  =  outputCharsetEncoder.encode(s);  [CE]  illegal  start  of  type  [FE]                                  ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  Character  c  =  outputCharsetEncoder.encode(s);  [BUGGY]    if  (c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	Character  c  =  outputCharsetEncoder.encode(s);	      Character    c    =    outputCharsetEncoder.encode(c);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
276	[BUG]  [BUGGY]  Character  c  =  inputCharsetEncoder.encode(c);  [CE]  illegal  start  of  type  [FE]                                    ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  Character  c  =  inputCharsetEncoder.encode(c);  [BUGGY]    if  (c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	Character  c  =  inputCharsetEncoder.encode(c);	      Character    c    =    outputCharsetEncoder.encode(c);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
277	[BUG]  [BUGGY]  Character  c  =  outputCharsetEncoder.encode(char);  [CE]  illegal  start  of  type  [FE]                                      ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  Character  c  =  outputCharsetEncoder.encode(char);  [BUGGY]    if  (c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	Character  c  =  outputCharsetEncoder.encode(char);	      Character    c    =    outputCharsetEncoder.encode(c);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
278	[BUG]  [BUGGY]  CharsetEncoder  c  =  outputCharsetEncoder.encode(c);  [CE]  illegal  start  of  type  [FE]                                        ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  CharsetEncoder  c  =  outputCharsetEncoder.encode(c);  [BUGGY]    if  (c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	CharsetEncoder  c  =  outputCharsetEncoder.encode(c);	      Character    c    =    outputCharsetEncoder.encode(c);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
279	[BUG]  [BUGGY]  Character  c  =  outputCharsetEncoder.encode(p);  [CE]  illegal  start  of  type  [FE]                                          ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  Character  c  =  outputCharsetEncoder.encode(p);  [BUGGY]    if  (c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	Character  c  =  outputCharsetEncoder.encode(p);	      Character    c    =    outputCharsetEncoder.encode(c);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
280	[BUG]  [BUGGY]  Character  c  =  outputCharsetEncoder.encode(strEscape,  c);  [CE]  illegal  start  of  type  [FE]                                            ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  Character  c  =  outputCharsetEncoder.encode(strEscape,  c);  [BUGGY]    if  (c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	Character  c  =  outputCharsetEncoder.encode(strEscape,  c);	      Character    c    =    outputCharsetEncoder.encode(c);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
281	[BUG]  [BUGGY]  Character  c  =  outputCharsetEncoder.encode(c,  backslashEscape);  [CE]  illegal  start  of  type  [FE]                                              ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  Character  c  =  outputCharsetEncoder.encode(c,  backslashEscape);  [BUGGY]    if  (c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	Character  c  =  outputCharsetEncoder.encode(c,  backslashEscape);	      Character    c    =    outputCharsetEncoder.encode(c);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
282	[BUG]  [BUGGY]  c  =  outputCharsetEncoder.canEncode(sb,  quote);  [CE]  illegal  start  of  type  [FE]              ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  c  =  outputCharsetEncoder.canEncode(sb,  quote);  [BUGGY]    if  (c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	c  =  outputCharsetEncoder.canEncode(sb,  quote);	      c    =    outputCharsetEncoder.canEncode(sb);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
283	[BUG]  [BUGGY]  c  =  inputCharsetEncoder.canEncode(c);  [CE]  illegal  start  of  type  [FE]                ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  c  =  inputCharsetEncoder.canEncode(c);  [BUGGY]    if  (c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	c  =  inputCharsetEncoder.canEncode(c);	      c    =    outputCharsetEncoder.canEncode(sb);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
284	[BUG]  [BUGGY]  c  =  outputCharsetEncoder.canEncode(sb,  backslashEscape);  [CE]  illegal  start  of  type  [FE]                  ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  c  =  outputCharsetEncoder.canEncode(sb,  backslashEscape);  [BUGGY]    if  (c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	c  =  outputCharsetEncoder.canEncode(sb,  backslashEscape);	      c    =    outputCharsetEncoder.canEncode(sb);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
285	[BUG]  [BUGGY]  c  =  outputCharsetEncoder.charAt(c);  [CE]  illegal  start  of  type  [FE]                    ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  c  =  outputCharsetEncoder.charAt(c);  [BUGGY]    if  (c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	c  =  outputCharsetEncoder.charAt(c);	      c    =    outputCharsetEncoder.canEncode(sb);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
286	[BUG]  [BUGGY]  c  =  outputCharsetEncoder.canEncode(sb,  outputCharsetEncoder);  [CE]  illegal  start  of  type  [FE]                      ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  c  =  outputCharsetEncoder.canEncode(sb,  outputCharsetEncoder);  [BUGGY]    if  (c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	c  =  outputCharsetEncoder.canEncode(sb,  outputCharsetEncoder);	      c    =    outputCharsetEncoder.canEncode(sb);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
287	[BUG]  [BUGGY]  char  c  =  outputCharsetEncoder.encode(c,  quote);  [CE]  illegal  start  of  type  [FE]                        ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  char  c  =  outputCharsetEncoder.encode(c,  quote);  [BUGGY]    if  (c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	char  c  =  outputCharsetEncoder.encode(c,  quote);	      char    c    =    outputCharsetEncoder.encode(c);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
288	[BUG]  [BUGGY]  char  c  =  inputCharsetEncoder.encode(c);  [CE]  illegal  start  of  type  [FE]                          ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  char  c  =  inputCharsetEncoder.encode(c);  [BUGGY]    if  (c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	char  c  =  inputCharsetEncoder.encode(c);	      char    c    =    outputCharsetEncoder.encode(c);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
289	[BUG]  [BUGGY]  Char  c  =  outputCharsetEncoder.encode(c);  [CE]  illegal  start  of  type  [FE]                            ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  Char  c  =  outputCharsetEncoder.encode(c);  [BUGGY]    if  (c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	Char  c  =  outputCharsetEncoder.encode(c);	      char    c    =    outputCharsetEncoder.encode(c);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
290	[BUG]  [BUGGY]  char  c  =  outputCharsetEncoder.encode(sb);  [CE]  illegal  start  of  type  [FE]                              ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  char  c  =  outputCharsetEncoder.encode(sb);  [BUGGY]    if  (c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	char  c  =  outputCharsetEncoder.encode(sb);	      char    c    =    outputCharsetEncoder.encode(c);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
291	[BUG]  [BUGGY]  char  c  =  outputCharsetEncoder.encode(c,  backslashEscape);  [CE]  illegal  start  of  type  [FE]                                ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  char  c  =  outputCharsetEncoder.encode(c,  backslashEscape);  [BUGGY]    if  (c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	char  c  =  outputCharsetEncoder.encode(c,  backslashEscape);	      char    c    =    outputCharsetEncoder.encode(c);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
292	[BUG]  [BUGGY]  CharsetEncoder  cc  =  getCharsetEncoder(outputCharsetEncoder,  outputCharsetEncoder);  [CE]  illegal  start  of  type  [FE]                              ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  CharsetEncoder  cc  =  getCharsetEncoder(outputCharsetEncoder,  outputCharsetEncoder);  [BUGGY]    if  (c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	CharsetEncoder  cc  =  getCharsetEncoder(outputCharsetEncoder,  outputCharsetEncoder);	      CharsetEncoder    cc    =    getCharsetEncoder();    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
293	[BUG]  [BUGGY]  CharsetEncoder  cc  =  getCharsetEncoder(outputCharsetEncoding);  [CE]  illegal  start  of  type  [FE]                                ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  CharsetEncoder  cc  =  getCharsetEncoder(outputCharsetEncoding);  [BUGGY]    if  (c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	CharsetEncoder  cc  =  getCharsetEncoder(outputCharsetEncoding);	      CharsetEncoder    cc    =    getCharsetEncoder();    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
294	[BUG]  [BUGGY]  CharsetEncoder  cc  =  getCharsetEncoder(backslashEscape);  [CE]  illegal  start  of  type  [FE]                                  ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  CharsetEncoder  cc  =  getCharsetEncoder(backslashEscape);  [BUGGY]    if  (c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	CharsetEncoder  cc  =  getCharsetEncoder(backslashEscape);	      CharsetEncoder    cc    =    getCharsetEncoder();    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
295	[BUG]  [BUGGY]  CharsetEncoder  cc  =  getCharsetEncoder(outputCharsetEscape);  [CE]  illegal  start  of  type  [FE]                                    ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  CharsetEncoder  cc  =  getCharsetEncoder(outputCharsetEscape);  [BUGGY]    if  (c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	CharsetEncoder  cc  =  getCharsetEncoder(outputCharsetEscape);	      CharsetEncoder    cc    =    getCharsetEncoder();    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
296	[BUG]  [BUGGY]  CharsetEncoder  cc  =  getCharsetEncoder2();  [CE]  <identifier>  expected  [FE]                                      ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  CharsetEncoder  cc  =  getCharsetEncoder2();  [BUGGY]    if  (c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	CharsetEncoder  cc  =  getCharsetEncoder2();	      CharsetEncoder    cc    =    getCharsetEncoder();    	non-compiled	[CE]  <identifier>  expected	12	None	replace
297	[BUG]  [BUGGY]  if(c  >>  0x1f  &&  c  <  0x7f)  {  [CE]  <identifier>  expected  [FE]                  ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  if(c  >>  0x1f  &&  c  <  0x7f)  {  [BUGGY]    sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	if(c  >>  0x1f  &&  c  <  0x7f)  {	  if(c    >=    0x1f    &&    c    <=    0x7f)    {    	non-compiled	[CE]  <identifier>  expected	18	None	replace
298	[BUG]  [BUGGY]  Integer  c  =  outputCharsetEncoder.canEncode(outputCharsetEncoder);  [CE]  <identifier>  expected  [FE]                      ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  Integer  c  =  outputCharsetEncoder.canEncode(outputCharsetEncoder);  [BUGGY]    if  (c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	Integer  c  =  outputCharsetEncoder.canEncode(outputCharsetEncoder);	      Integer    c    =    outputCharsetEncoder.canEncode(c);    	non-compiled	[CE]  <identifier>  expected	8	None	replace
299	[BUG]  [BUGGY]  Integer  c  =  outputCharsetEncoder.canEncode(ptr);  [CE]  illegal  start  of  type  [FE]                        ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  Integer  c  =  outputCharsetEncoder.canEncode(ptr);  [BUGGY]    if  (c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	Integer  c  =  outputCharsetEncoder.canEncode(ptr);	      Integer    c    =    outputCharsetEncoder.canEncode(c);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
300	[BUG]  [BUGGY]  Integer  c  =  outputCharsetEncoder.canEncode(char);  [CE]  illegal  start  of  type  [FE]                          ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  Integer  c  =  outputCharsetEncoder.canEncode(char);  [BUGGY]    if  (c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	Integer  c  =  outputCharsetEncoder.canEncode(char);	      Integer    c    =    outputCharsetEncoder.canEncode(c);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
301	[BUG]  [BUGGY]  Integer  c  =  outputCharsetEncoder.canEncode(outputCharsetEscape);  [CE]  illegal  start  of  type  [FE]                            ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  Integer  c  =  outputCharsetEncoder.canEncode(outputCharsetEscape);  [BUGGY]    if  (c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	Integer  c  =  outputCharsetEncoder.canEncode(outputCharsetEscape);	      Integer    c    =    outputCharsetEncoder.canEncode(c);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
302	[BUG]  [BUGGY]  if(c  >  0x1f  &&  c  <=  0x7f  ||!outputCharsetEncoder.canEncodeHex(c))  {  [CE]  illegal  start  of  type  [FE]                    ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  if(c  >  0x1f  &&  c  <=  0x7f  ||!outputCharsetEncoder.canEncodeHex(c))  {  [BUGGY]    sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	if(c  >  0x1f  &&  c  <=  0x7f  ||!outputCharsetEncoder.canEncodeHex(c))  {	  if(c    >    0x1f    &&    c    <=    0x7f    ||!outputCharsetEncoder.canEncode(c))    {    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
303	[BUG]  [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.getEncoderCurrentStructure(c);  [CE]  illegal  start  of  type  [FE]                  ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.getEncoderCurrentStructure(c);  [BUGGY]    if  (c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	CharsetEncoder  cc  =  outputCharsetEncoder.getEncoderCurrentStructure(c);	      CharsetEncoder    cc    =    outputCharsetEncoder.canEncode(c);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
304	[BUG]  [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.canEncode(c,  outputCharsetEncoder);  [CE]  illegal  start  of  type  [FE]                    ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.canEncode(c,  outputCharsetEncoder);  [BUGGY]    if  (c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	CharsetEncoder  cc  =  outputCharsetEncoder.canEncode(c,  outputCharsetEncoder);	      CharsetEncoder    cc    =    outputCharsetEncoder.canEncode(c);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
305	[BUG]  [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.getEncoderCurrentSegment();  [CE]  illegal  start  of  type  [FE]                      ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.getEncoderCurrentSegment();  [BUGGY]    if  (c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	CharsetEncoder  cc  =  outputCharsetEncoder.getEncoderCurrentSegment();	      CharsetEncoder    cc    =    outputCharsetEncoder.canEncode(c);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
306	[BUG]  [BUGGY]  if(c  >  0x7f  &&  c  <=  0x7f)  {  [CE]  illegal  start  of  type  [FE]            ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  if(c  >  0x7f  &&  c  <=  0x7f)  {  [BUGGY]    sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	if(c  >  0x7f  &&  c  <=  0x7f)  {	  if(c    >    0x1f    &&    c    <    0x7f)    {    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
307	[BUG]  [BUGGY]  if(c  >  0x7f  ||  c  <  0x1f)  {  [CE]  illegal  start  of  type  [FE]              ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  if(c  >  0x7f  ||  c  <  0x1f)  {  [BUGGY]    sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	if(c  >  0x7f  ||  c  <  0x1f)  {	  if(c    >    0x1f    &&    c    <    0x7f)    {    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
308	[BUG]  [BUGGY]  if(c  >  0x1e  &&  c  <=  0x7f)  {  [CE]  illegal  start  of  type  [FE]                ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  if(c  >  0x1e  &&  c  <=  0x7f)  {  [BUGGY]    sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	if(c  >  0x1e  &&  c  <=  0x7f)  {	  if(c    >    0x1f    &&    c    <    0x7f)    {    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
309	[BUG]  [BUGGY]  int  c  =  outputCharsetEncoder.canEncode(backslashEscape);  [CE]  illegal  start  of  type  [FE]            ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  int  c  =  outputCharsetEncoder.canEncode(backslashEscape);  [BUGGY]    if  (c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	int  c  =  outputCharsetEncoder.canEncode(backslashEscape);	      int    c    =    outputCharsetEncoder.canEncode(c);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
310	[BUG]  [BUGGY]  int  c  =  outputCharsetEncoder.canEncode(outputCharsetEncoder);  [CE]  illegal  start  of  type  [FE]              ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  int  c  =  outputCharsetEncoder.canEncode(outputCharsetEncoder);  [BUGGY]    if  (c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	int  c  =  outputCharsetEncoder.canEncode(outputCharsetEncoder);	      int    c    =    outputCharsetEncoder.canEncode(c);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
311	[BUG]  [BUGGY]  int  c  =  outputCharsetEncoder.canEncode(outputCharsetEscape);  [CE]  illegal  start  of  type  [FE]                ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  int  c  =  outputCharsetEncoder.canEncode(outputCharsetEscape);  [BUGGY]    if  (c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	int  c  =  outputCharsetEncoder.canEncode(outputCharsetEscape);	      int    c    =    outputCharsetEncoder.canEncode(c);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
312	[BUG]  [BUGGY]  if(c  >=  0x7f  ||  c  <=  0x1f)  {  [CE]  illegal  start  of  type  [FE]        ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  if(c  >=  0x7f  ||  c  <=  0x1f)  {  [BUGGY]    sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	if(c  >=  0x7f  ||  c  <=  0x1f)  {	  if(c    >    0x1f    ||    c    <=    0x7f)    {    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
313	[BUG]  [BUGGY]  if(c  >  0x1f  &&  c  <=  0x7f  &&  c  <=  HexJavaScriptRepresentation.DEFAULT_SCRIPT)  {  [CE]  illegal  start  of  type  [FE]                  ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  if(c  >  0x1f  &&  c  <=  0x7f  &&  c  <=  HexJavaScriptRepresentation.DEFAULT_SCRIPT)  {  [BUGGY]    sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	if(c  >  0x1f  &&  c  <=  0x7f  &&  c  <=  HexJavaScriptRepresentation.DEFAULT_SCRIPT)  {	  if(c    >    0x1f    &&    c    <=    0x7f    &&    c    <=    quote)    {    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
314	[BUG]  [BUGGY]  if(c  ==  0x1f  &&  c  <=  0x7f  &&  c  <=  quote)  {  [CE]  illegal  start  of  type  [FE]                    ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  if(c  ==  0x1f  &&  c  <=  0x7f  &&  c  <=  quote)  {  [BUGGY]    sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	if(c  ==  0x1f  &&  c  <=  0x7f  &&  c  <=  quote)  {	  if(c    >    0x1f    &&    c    <=    0x7f    &&    c    <=    quote)    {    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
315	[BUG]  [BUGGY]  if(c  >  0x1f  &&  c  <  0x7f  &&  c  <  quote)  {  [CE]  illegal  start  of  type  [FE]                      ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  if(c  >  0x1f  &&  c  <  0x7f  &&  c  <  quote)  {  [BUGGY]    sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	if(c  >  0x1f  &&  c  <  0x7f  &&  c  <  quote)  {	  if(c    >    0x1f    &&    c    <=    0x7f    &&    c    <=    quote)    {    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
316	[BUG]  [BUGGY]  if(c  >  0x1f  &&  c  <  quote  &&  c  <=  0x7f)  {  [CE]  illegal  start  of  type  [FE]                        ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  if(c  >  0x1f  &&  c  <  quote  &&  c  <=  0x7f)  {  [BUGGY]    sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	if(c  >  0x1f  &&  c  <  quote  &&  c  <=  0x7f)  {	  if(c    >    0x1f    &&    c    <=    0x7f    &&    c    <=    quote)    {    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
317	[BUG]  [BUGGY]  if(c!=  0x1f  &&  c  <=  0x7f  &&  c  <=  quote)  {  [CE]  illegal  start  of  type  [FE]                          ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  if(c!=  0x1f  &&  c  <=  0x7f  &&  c  <=  quote)  {  [BUGGY]    sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	if(c!=  0x1f  &&  c  <=  0x7f  &&  c  <=  quote)  {	  if(c    >    0x1f    &&    c    <=    0x7f    &&    c    <=    quote)    {    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
318	[BUG]  [BUGGY]  StringBuilder  sb  =  new  StringBuilder(outputCharsetEncoder.appendHexJavaScriptRepresentation(sb,  c));  [CE]  illegal  start  of  type  [FE]                  ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  StringBuilder  sb  =  new  StringBuilder(outputCharsetEncoder.appendHexJavaScriptRepresentation(sb,  c));  [BUGGY]    if  (c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	StringBuilder  sb  =  new  StringBuilder(outputCharsetEncoder.appendHexJavaScriptRepresentation(sb,  c));	      StringBuilder    sb    =    new    StringBuilder(outputCharsetEncoder.canEncode(c));    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
319	[BUG]  [BUGGY]  StringBuilder  sb  =  new  StringBuilder(outputCharsetEncoder.encodeHexString(c));  [CE]  illegal  start  of  type  [FE]                    ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  StringBuilder  sb  =  new  StringBuilder(outputCharsetEncoder.encodeHexString(c));  [BUGGY]    if  (c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	StringBuilder  sb  =  new  StringBuilder(outputCharsetEncoder.encodeHexString(c));	      StringBuilder    sb    =    new    StringBuilder(outputCharsetEncoder.canEncode(c));    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
320	[BUG]  [BUGGY]  StringBuilder  sb  =  new  StringBuilder(outputCharsetEncoder.encodeHex(c));  [CE]  illegal  start  of  type  [FE]                      ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  StringBuilder  sb  =  new  StringBuilder(outputCharsetEncoder.encodeHex(c));  [BUGGY]    if  (c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	StringBuilder  sb  =  new  StringBuilder(outputCharsetEncoder.encodeHex(c));	      StringBuilder    sb    =    new    StringBuilder(outputCharsetEncoder.canEncode(c));    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
321	[BUG]  [BUGGY]  StringBuilder  sb  =  new  StringBuilder(outputCharsetEncoder.computeHexJavaScriptRepresentation(sb,  c));  [CE]  illegal  start  of  type  [FE]                        ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  StringBuilder  sb  =  new  StringBuilder(outputCharsetEncoder.computeHexJavaScriptRepresentation(sb,  c));  [BUGGY]    if  (c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	StringBuilder  sb  =  new  StringBuilder(outputCharsetEncoder.computeHexJavaScriptRepresentation(sb,  c));	      StringBuilder    sb    =    new    StringBuilder(outputCharsetEncoder.canEncode(c));    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
322	[BUG]  [BUGGY]  StringBuilder  sb  =  new  StringBuilder(outputCharsetEncoder.resetAndStart());  [CE]  orphaned  case  [FE]                          ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  StringBuilder  sb  =  new  StringBuilder(outputCharsetEncoder.resetAndStart());  [BUGGY]    if  (c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	StringBuilder  sb  =  new  StringBuilder(outputCharsetEncoder.resetAndStart());	      StringBuilder    sb    =    new    StringBuilder(outputCharsetEncoder.canEncode(c));    	non-compiled	[CE]  orphaned  case	25	None	replace
323	[BUG]  [BUGGY]  StringBuilder  sb  =  new  StringBuilder(outputCharsetEncoder.getHexJavaScriptRepresentation(c));  [CE]  illegal  start  of  type  [FE]                            ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  StringBuilder  sb  =  new  StringBuilder(outputCharsetEncoder.getHexJavaScriptRepresentation(c));  [BUGGY]    if  (c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	StringBuilder  sb  =  new  StringBuilder(outputCharsetEncoder.getHexJavaScriptRepresentation(c));	      StringBuilder    sb    =    new    StringBuilder(outputCharsetEncoder.canEncode(c));    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
324	[BUG]  [BUGGY]  if(c  >  0x1f  ||  c  <  0x7f  ||  c  >  0x10FFFF)  {  [CE]  illegal  start  of  type  [FE]            ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  if(c  >  0x1f  ||  c  <  0x7f  ||  c  >  0x10FFFF)  {  [BUGGY]    sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	if(c  >  0x1f  ||  c  <  0x7f  ||  c  >  0x10FFFF)  {	  if(c    >    0x1f    &&    c    <=    0x7f    ||    c    >    0x10FFFF)    {    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
325	[BUG]  [BUGGY]  if(c  >  0x1f  &&  c  <=  0x7f  ||  c  >=  0x10FFFF)  {  [CE]  orphaned  case  [FE]              ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  if(c  >  0x1f  &&  c  <=  0x7f  ||  c  >=  0x10FFFF)  {  [BUGGY]    sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	if(c  >  0x1f  &&  c  <=  0x7f  ||  c  >=  0x10FFFF)  {	  if(c    >    0x1f    &&    c    <=    0x7f    ||    c    >    0x10FFFF)    {    	non-compiled	[CE]  orphaned  case	32	None	replace
326	[BUG]  [BUGGY]  if(c  >=  0x7f  &&  c  <=  0x7f  &&  sb.charAt(c  -  1)!=  '/')  {  [CE]  orphaned  case  [FE]                ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  if(c  >=  0x7f  &&  c  <=  0x7f  &&  sb.charAt(c  -  1)!=  '/')  {  [BUGGY]    sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	if(c  >=  0x7f  &&  c  <=  0x7f  &&  sb.charAt(c  -  1)!=  '/')  {	  if(c    >    0x1f    &&    c    <=    0x7f    &&    sb.charAt(c    -    1)!=    '/')    {    	non-compiled	[CE]  orphaned  case	34	None	replace
327	[BUG]  [BUGGY]  if(c  >=  '.'  &&  c  <=  0x7f  &&  sb.charAt(c  -  1)!=  '/')  {  [CE]  orphaned  case  [FE]                  ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  if(c  >=  '.'  &&  c  <=  0x7f  &&  sb.charAt(c  -  1)!=  '/')  {  [BUGGY]    sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	if(c  >=  '.'  &&  c  <=  0x7f  &&  sb.charAt(c  -  1)!=  '/')  {	  if(c    >    0x1f    &&    c    <=    0x7f    &&    sb.charAt(c    -    1)!=    '/')    {    	non-compiled	[CE]  orphaned  case	34	None	replace
328	[BUG]  [BUGGY]  if(c  >  0x1f  &&  c  <=  0x7f  ||  sb.charAt(c  -  1)!=  '/')  {  [CE]  orphaned  case  [FE]                    ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  if(c  >  0x1f  &&  c  <=  0x7f  ||  sb.charAt(c  -  1)!=  '/')  {  [BUGGY]    sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	if(c  >  0x1f  &&  c  <=  0x7f  ||  sb.charAt(c  -  1)!=  '/')  {	  if(c    >    0x1f    &&    c    <=    0x7f    &&    sb.charAt(c    -    1)!=    '/')    {    	non-compiled	[CE]  orphaned  case	34	None	replace
329	[BUG]  [BUGGY]  if(c  >  0x7f  &&  c  <=  0x7f  &&  sb.charAt(c  -  1)!=  '/')  {  [CE]  orphaned  case  [FE]                      ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  if(c  >  0x7f  &&  c  <=  0x7f  &&  sb.charAt(c  -  1)!=  '/')  {  [BUGGY]    sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	if(c  >  0x7f  &&  c  <=  0x7f  &&  sb.charAt(c  -  1)!=  '/')  {	  if(c    >    0x1f    &&    c    <=    0x7f    &&    sb.charAt(c    -    1)!=    '/')    {    	non-compiled	[CE]  orphaned  case	34	None	replace
330	[BUG]  [BUGGY]  if(c  >=  '#'  &&  c  <=  0x7f  &&  sb.charAt(c  -  1)!=  '/')  {  [CE]  orphaned  case  [FE]                        ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  if(c  >=  '#'  &&  c  <=  0x7f  &&  sb.charAt(c  -  1)!=  '/')  {  [BUGGY]    sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	if(c  >=  '#'  &&  c  <=  0x7f  &&  sb.charAt(c  -  1)!=  '/')  {	  if(c    >    0x1f    &&    c    <=    0x7f    &&    sb.charAt(c    -    1)!=    '/')    {    	non-compiled	[CE]  orphaned  case	34	None	replace
331	[BUG]  [BUGGY]  c  =  outputCharsetEncoder.encode(bufferedquoteEscape,  c);  [CE]  orphaned  case  [FE]                        ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  c  =  outputCharsetEncoder.encode(bufferedquoteEscape,  c);  [BUGGY]    if  (c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	c  =  outputCharsetEncoder.encode(bufferedquoteEscape,  c);	      c    =    outputCharsetEncoder.encode(c);    	non-compiled	[CE]  orphaned  case	9	None	replace
332	[BUG]  [BUGGY]  c  =  outputCharsetEncoder.encode(backslashEscape,  c);  [CE]  orphaned  case  [FE]                          ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  c  =  outputCharsetEncoder.encode(backslashEscape,  c);  [BUGGY]    if  (c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	c  =  outputCharsetEncoder.encode(backslashEscape,  c);	      c    =    outputCharsetEncoder.encode(c);    	non-compiled	[CE]  orphaned  case	9	None	replace
333	[BUG]  [BUGGY]  c  =  outputCharsetEncoder.encode(hexEscape,  c);  [CE]  orphaned  case  [FE]                            ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  c  =  outputCharsetEncoder.encode(hexEscape,  c);  [BUGGY]    if  (c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	c  =  outputCharsetEncoder.encode(hexEscape,  c);	      c    =    outputCharsetEncoder.encode(c);    	non-compiled	[CE]  orphaned  case	9	None	replace
334	[BUG]  [BUGGY]  c  =  outputCharsetEncoder.encode(outputCharsetEncoder,  sb);  [CE]  orphaned  case  [FE]                              ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  c  =  outputCharsetEncoder.encode(outputCharsetEncoder,  sb);  [BUGGY]    if  (c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	c  =  outputCharsetEncoder.encode(outputCharsetEncoder,  sb);	      c    =    outputCharsetEncoder.encode(c);    	non-compiled	[CE]  orphaned  case	9	None	replace
335	[BUG]  [BUGGY]  c  =  outputCharsetEncoder.encode(sb,  CATCH_OF_EXPR);  [CE]  orphaned  case  [FE]                                ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  c  =  outputCharsetEncoder.encode(sb,  CATCH_OF_EXPR);  [BUGGY]    if  (c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	c  =  outputCharsetEncoder.encode(sb,  CATCH_OF_EXPR);	      c    =    outputCharsetEncoder.encode(c);    	non-compiled	[CE]  orphaned  case	9	None	replace
336	[BUG]  [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.charAt(outputCharsetEncoder.getEncoder());  [CE]  orphaned  case  [FE]                      ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.charAt(outputCharsetEncoder.getEncoder());  [BUGGY]    if  (c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	CharsetEncoder  cc  =  outputCharsetEncoder.charAt(outputCharsetEncoder.getEncoder());	      CharsetEncoder    cc    =    outputCharsetEncoder.getEncoder();    	non-compiled	[CE]  orphaned  case	27	None	replace
337	[BUG]  [BUGGY]  if(c  >  0x1f  &&  c  <=  0x7f  &&!outputCharsetEncoder.canEncodeHex(c))  {  [CE]  orphaned  case  [FE]        ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  if(c  >  0x1f  &&  c  <=  0x7f  &&!outputCharsetEncoder.canEncodeHex(c))  {  [BUGGY]    sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	if(c  >  0x1f  &&  c  <=  0x7f  &&!outputCharsetEncoder.canEncodeHex(c))  {	  if(c    >    0x1f    &&    c    <=    0x7f    &&!outputCharsetEncoder.canEncode(c))    {    	non-compiled	[CE]  orphaned  case	30	None	replace
338	[BUG]  [BUGGY]  StringBuilder  sb  =  new  StringBuilder(outputCharsetEncoder.encodeHexJavaScriptRepresentation(quote));  [CE]  orphaned  case  [FE]                ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  StringBuilder  sb  =  new  StringBuilder(outputCharsetEncoder.encodeHexJavaScriptRepresentation(quote));  [BUGGY]    if  (c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	StringBuilder  sb  =  new  StringBuilder(outputCharsetEncoder.encodeHexJavaScriptRepresentation(quote));	      StringBuilder    sb    =    new    StringBuilder(outputCharsetEncoder.encode(quote));    	non-compiled	[CE]  orphaned  case	24	None	replace
339	[BUG]  [BUGGY]  StringBuilder  sb  =  new  StringBuilder(outputCharsetEncoder.encodeHexJavaScriptRepresentation(c),  quote);  [CE]  orphaned  case  [FE]                  ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  StringBuilder  sb  =  new  StringBuilder(outputCharsetEncoder.encodeHexJavaScriptRepresentation(c),  quote);  [BUGGY]    if  (c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	StringBuilder  sb  =  new  StringBuilder(outputCharsetEncoder.encodeHexJavaScriptRepresentation(c),  quote);	      StringBuilder    sb    =    new    StringBuilder(outputCharsetEncoder.encode(quote));    	non-compiled	[CE]  orphaned  case	24	None	replace
340	[BUG]  [BUGGY]  StringBuilder  sb  =  new  StringBuilder(outputCharsetEncoder.encodeHexJavaScriptRepresentation(singlequoteEscape,  c));  [CE]  orphaned  case  [FE]                    ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  StringBuilder  sb  =  new  StringBuilder(outputCharsetEncoder.encodeHexJavaScriptRepresentation(singlequoteEscape,  c));  [BUGGY]    if  (c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	StringBuilder  sb  =  new  StringBuilder(outputCharsetEncoder.encodeHexJavaScriptRepresentation(singlequoteEscape,  c));	      StringBuilder    sb    =    new    StringBuilder(outputCharsetEncoder.encode(quote));    	non-compiled	[CE]  orphaned  case	24	None	replace
341	[BUG]  [BUGGY]  StringBuilder  sb  =  new  StringBuilder(outputCharsetEncoder.encode(doublequoteEscape));  [CE]  orphaned  case  [FE]                      ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  StringBuilder  sb  =  new  StringBuilder(outputCharsetEncoder.encode(doublequoteEscape));  [BUGGY]    if  (c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	StringBuilder  sb  =  new  StringBuilder(outputCharsetEncoder.encode(doublequoteEscape));	      StringBuilder    sb    =    new    StringBuilder(outputCharsetEncoder.encode(quote));    	non-compiled	[CE]  orphaned  case	24	None	replace
342	[BUG]  [BUGGY]  StringBuilder  sb  =  new  StringBuilder(outputCharsetEncoder.encodeHexJavaScriptRepresentation(singlequoteEscape));  [CE]  orphaned  case  [FE]                        ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  StringBuilder  sb  =  new  StringBuilder(outputCharsetEncoder.encodeHexJavaScriptRepresentation(singlequoteEscape));  [BUGGY]    if  (c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	StringBuilder  sb  =  new  StringBuilder(outputCharsetEncoder.encodeHexJavaScriptRepresentation(singlequoteEscape));	      StringBuilder    sb    =    new    StringBuilder(outputCharsetEncoder.encode(quote));    	non-compiled	[CE]  orphaned  case	24	None	replace
343	[BUG]  [BUGGY]  StringBuilder  sb  =  new  StringBuilder(outputCharsetEncoder.encodeHexJavaScriptRepresentation(singlequoteEscape,  quote));  [CE]  orphaned  case  [FE]                          ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  StringBuilder  sb  =  new  StringBuilder(outputCharsetEncoder.encodeHexJavaScriptRepresentation(singlequoteEscape,  quote));  [BUGGY]    if  (c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	StringBuilder  sb  =  new  StringBuilder(outputCharsetEncoder.encodeHexJavaScriptRepresentation(singlequoteEscape,  quote));	      StringBuilder    sb    =    new    StringBuilder(outputCharsetEncoder.encode(quote));    	non-compiled	[CE]  orphaned  case	24	None	replace
344	[BUG]  [BUGGY]  StringBuilder  sb  =  new  StringBuilder(outputCharsetEncoder.encode(ptr));  [CE]  orphaned  case  [FE]                            ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  StringBuilder  sb  =  new  StringBuilder(outputCharsetEncoder.encode(ptr));  [BUGGY]    if  (c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	StringBuilder  sb  =  new  StringBuilder(outputCharsetEncoder.encode(ptr));	      StringBuilder    sb    =    new    StringBuilder(outputCharsetEncoder.encode(quote));    	non-compiled	[CE]  orphaned  case	24	None	replace
345	[BUG]  [BUGGY]  c  =  outputCharsetEncoder.canEncodeHexJavaScriptRepresentation(sb);  [CE]  orphaned  case  [FE]              ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  c  =  outputCharsetEncoder.canEncodeHexJavaScriptRepresentation(sb);  [BUGGY]    if  (c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	c  =  outputCharsetEncoder.canEncodeHexJavaScriptRepresentation(sb);	      c    =    outputCharsetEncoder.canEncode(sb);    	non-compiled	[CE]  orphaned  case	23	None	replace
346	[BUG]  [BUGGY]  c  =  outputCharsetEncoder.canEncodeHexJavaScriptRepresentation(sb,  c);  [CE]  orphaned  case  [FE]                ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  c  =  outputCharsetEncoder.canEncodeHexJavaScriptRepresentation(sb,  c);  [BUGGY]    if  (c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	c  =  outputCharsetEncoder.canEncodeHexJavaScriptRepresentation(sb,  c);	      c    =    outputCharsetEncoder.canEncode(sb);    	non-compiled	[CE]  orphaned  case	23	None	replace
347	[BUG]  [BUGGY]  char  c  =  outputCharsetEncoder.canEncode(c,  backslashEscape);  [CE]  orphaned  case  [FE]          ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  char  c  =  outputCharsetEncoder.canEncode(c,  backslashEscape);  [BUGGY]    if  (c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	char  c  =  outputCharsetEncoder.canEncode(c,  backslashEscape);	      char    c    =    outputCharsetEncoder.canEncode(c);    	non-compiled	[CE]  orphaned  case	2	None	replace
348	[BUG]  [BUGGY]  char  c  =  outputCharsetEncoder.canEncode(c,  quote);  [CE]  orphaned  case  [FE]            ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  char  c  =  outputCharsetEncoder.canEncode(c,  quote);  [BUGGY]    if  (c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	char  c  =  outputCharsetEncoder.canEncode(c,  quote);	      char    c    =    outputCharsetEncoder.canEncode(c);    	non-compiled	[CE]  orphaned  case	2	None	replace
349	[BUG]  [BUGGY]  char  c  =  outputCharsetEncoder.canEncode(pt);  [CE]  orphaned  case  [FE]              ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  char  c  =  outputCharsetEncoder.canEncode(pt);  [BUGGY]    if  (c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	char  c  =  outputCharsetEncoder.canEncode(pt);	      char    c    =    outputCharsetEncoder.canEncode(c);    	non-compiled	[CE]  orphaned  case	2	None	replace
350	[BUG]  [BUGGY]  Char  c  =  outputCharsetEncoder.canEncode(sb);  [CE]  orphaned  case  [FE]            ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  Char  c  =  outputCharsetEncoder.canEncode(sb);  [BUGGY]    if  (c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	Char  c  =  outputCharsetEncoder.canEncode(sb);	      char    c    =    outputCharsetEncoder.canEncode(sb);    	non-compiled	[CE]  orphaned  case	22	None	replace
351	[BUG]  [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.encode(char);  [CE]  orphaned  case  [FE]                          ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.encode(char);  [BUGGY]    if  (c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	CharsetEncoder  cc  =  outputCharsetEncoder.encode(char);	      CharsetEncoder    cc    =    outputCharsetEncoder.encode(c);    	non-compiled	[CE]  orphaned  case	10	None	replace
352	[BUG]  [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.encode(bufferedquoteEscape,  c);  [CE]  orphaned  case  [FE]                            ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.encode(bufferedquoteEscape,  c);  [BUGGY]    if  (c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	CharsetEncoder  cc  =  outputCharsetEncoder.encode(bufferedquoteEscape,  c);	      CharsetEncoder    cc    =    outputCharsetEncoder.encode(c);    	non-compiled	[CE]  orphaned  case	10	None	replace
353	[BUG]  [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.encode(quote,  c);  [CE]  orphaned  case  [FE]                              ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.encode(quote,  c);  [BUGGY]    if  (c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	CharsetEncoder  cc  =  outputCharsetEncoder.encode(quote,  c);	      CharsetEncoder    cc    =    outputCharsetEncoder.encode(c);    	non-compiled	[CE]  orphaned  case	10	None	replace
354	[BUG]  [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.encode(buffer,  sb,  c);  [CE]  orphaned  case  [FE]                                ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.encode(buffer,  sb,  c);  [BUGGY]    if  (c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	CharsetEncoder  cc  =  outputCharsetEncoder.encode(buffer,  sb,  c);	      CharsetEncoder    cc    =    outputCharsetEncoder.encode(c);    	non-compiled	[CE]  orphaned  case	10	None	replace
355	[BUG]  [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.encode(context,  sb);  [CE]  orphaned  case  [FE]                                  ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.encode(context,  sb);  [BUGGY]    if  (c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	CharsetEncoder  cc  =  outputCharsetEncoder.encode(context,  sb);	      CharsetEncoder    cc    =    outputCharsetEncoder.encode(c);    	non-compiled	[CE]  orphaned  case	10	None	replace
356	[BUG]  [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.encode(c,  backwardslashEscape);  [CE]  orphaned  case  [FE]                                    ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.encode(c,  backwardslashEscape);  [BUGGY]    if  (c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	CharsetEncoder  cc  =  outputCharsetEncoder.encode(c,  backwardslashEscape);	      CharsetEncoder    cc    =    outputCharsetEncoder.encode(c);    	non-compiled	[CE]  orphaned  case	10	None	replace
357	[BUG]  [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.encode(hsContext,  c);  [CE]  orphaned  case  [FE]                                      ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.encode(hsContext,  c);  [BUGGY]    if  (c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	CharsetEncoder  cc  =  outputCharsetEncoder.encode(hsContext,  c);	      CharsetEncoder    cc    =    outputCharsetEncoder.encode(c);    	non-compiled	[CE]  orphaned  case	10	None	replace
358	[BUG]  [BUGGY]  if(c  >=  0x7f  ||  c  <  0x1f)  {  [CE]  orphaned  case  [FE]        ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  if(c  >=  0x7f  ||  c  <  0x1f)  {  [BUGGY]    sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	if(c  >=  0x7f  ||  c  <  0x1f)  {	  if(c    >    0x1f    ||    c    <    0x7f)    {    	non-compiled	[CE]  orphaned  case	29	None	replace
359	[BUG]  [BUGGY]  if(c  >=  0x7f  ||  c  >  0x1f)  {  [CE]  orphaned  case  [FE]          ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  if(c  >=  0x7f  ||  c  >  0x1f)  {  [BUGGY]    sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	if(c  >=  0x7f  ||  c  >  0x1f)  {	  if(c    >    0x1f    ||    c    <    0x7f)    {    	non-compiled	[CE]  orphaned  case	29	None	replace
360	[BUG]  [BUGGY]  c  =  outputCharsetEncoder.canEncode(c)&&!outputCharsetEncoder.isWhitespace(c);  [CE]  orphaned  case  [FE]        ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  c  =  outputCharsetEncoder.canEncode(c)&&!outputCharsetEncoder.isWhitespace(c);  [BUGGY]    if  (c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	c  =  outputCharsetEncoder.canEncode(c)&&!outputCharsetEncoder.isWhitespace(c);	      c    =    outputCharsetEncoder.canEncode(c);    	non-compiled	[CE]  orphaned  case	1	None	replace
361	[BUG]  [BUGGY]  c  =  outputCharsetEncoder.canEncode(c)&&!outputCharsetEncoder.isSyntheticBlock(c);  [CE]  orphaned  case  [FE]          ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  c  =  outputCharsetEncoder.canEncode(c)&&!outputCharsetEncoder.isSyntheticBlock(c);  [BUGGY]    if  (c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	c  =  outputCharsetEncoder.canEncode(c)&&!outputCharsetEncoder.isSyntheticBlock(c);	      c    =    outputCharsetEncoder.canEncode(c);    	non-compiled	[CE]  orphaned  case	1	None	replace
362	[BUG]  [BUGGY]  c  =  outputCharsetEncoder.canEncode(c)&&!outputCharsetEncoder.isResourceName(c);  [CE]  orphaned  case  [FE]            ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  c  =  outputCharsetEncoder.canEncode(c)&&!outputCharsetEncoder.isResourceName(c);  [BUGGY]    if  (c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	c  =  outputCharsetEncoder.canEncode(c)&&!outputCharsetEncoder.isResourceName(c);	      c    =    outputCharsetEncoder.canEncode(c);    	non-compiled	[CE]  orphaned  case	1	None	replace
363	[BUG]  [BUGGY]  c  =  outputCharsetEncoder.canEncode(c)&&!outputCharsetEncoder.isEmpty();  [CE]  orphaned  case  [FE]              ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  c  =  outputCharsetEncoder.canEncode(c)&&!outputCharsetEncoder.isEmpty();  [BUGGY]    if  (c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	c  =  outputCharsetEncoder.canEncode(c)&&!outputCharsetEncoder.isEmpty();	      c    =    outputCharsetEncoder.canEncode(c);    	non-compiled	[CE]  orphaned  case	1	None	replace
364	[BUG]  [BUGGY]  Character  c  =  outputCharsetEncoder.encode(c,  this);  [CE]  orphaned  case  [FE]                            ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  Character  c  =  outputCharsetEncoder.encode(c,  this);  [BUGGY]    if  (c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	Character  c  =  outputCharsetEncoder.encode(c,  this);	      Character    c    =    outputCharsetEncoder.encode(c);    	non-compiled	[CE]  orphaned  case	11	None	replace
365	[BUG]  [BUGGY]  Character  c  =  outputCharsetEncoder.encode(c,  backwardslashEscape);  [CE]  orphaned  case  [FE]                              ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  Character  c  =  outputCharsetEncoder.encode(c,  backwardslashEscape);  [BUGGY]    if  (c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	Character  c  =  outputCharsetEncoder.encode(c,  backwardslashEscape);	      Character    c    =    outputCharsetEncoder.encode(c);    	non-compiled	[CE]  orphaned  case	11	None	replace
366	[BUG]  [BUGGY]  Character  c  =  outputCharsetEncoder.encode(ptr);  [CE]  orphaned  case  [FE]                                ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  Character  c  =  outputCharsetEncoder.encode(ptr);  [BUGGY]    if  (c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	Character  c  =  outputCharsetEncoder.encode(ptr);	      Character    c    =    outputCharsetEncoder.encode(c);    	non-compiled	[CE]  orphaned  case	11	None	replace
367	[BUG]  [BUGGY]  Character  c  =  outputCharsetEncoder.encode(c,  buf);  [CE]  orphaned  case  [FE]                                  ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  Character  c  =  outputCharsetEncoder.encode(c,  buf);  [BUGGY]    if  (c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	Character  c  =  outputCharsetEncoder.encode(c,  buf);	      Character    c    =    outputCharsetEncoder.encode(c);    	non-compiled	[CE]  orphaned  case	11	None	replace
368	[BUG]  [BUGGY]  int  c  =  outputCharsetEncoder.canEncodeHexJavaScriptRepresentation(sb);  [CE]  orphaned  case  [FE]        ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  int  c  =  outputCharsetEncoder.canEncodeHexJavaScriptRepresentation(sb);  [BUGGY]    if  (c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	int  c  =  outputCharsetEncoder.canEncodeHexJavaScriptRepresentation(sb);	      int    c    =    outputCharsetEncoder.canEncode(sb);    	non-compiled	[CE]  orphaned  case	38	None	replace
369	[BUG]  [BUGGY]  int  c  =  outputCharsetEncoder.canEncodeHex(sb);  [CE]  orphaned  case  [FE]          ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  int  c  =  outputCharsetEncoder.canEncodeHex(sb);  [BUGGY]    if  (c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	int  c  =  outputCharsetEncoder.canEncodeHex(sb);	      int    c    =    outputCharsetEncoder.canEncode(sb);    	non-compiled	[CE]  orphaned  case	38	None	replace
370	[BUG]  [BUGGY]  StringBuilder  sb  =  new  StringBuilder(outputCharsetEncoder.encode(c),  doublequoteEscape);  [CE]  orphaned  case  [FE]                    ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  StringBuilder  sb  =  new  StringBuilder(outputCharsetEncoder.encode(c),  doublequoteEscape);  [BUGGY]    if  (c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	StringBuilder  sb  =  new  StringBuilder(outputCharsetEncoder.encode(c),  doublequoteEscape);	      StringBuilder    sb    =    new    StringBuilder(outputCharsetEncoder.encode(c),    quote);    	non-compiled	[CE]  orphaned  case	26	None	replace
371	[BUG]  [BUGGY]  StringBuilder  sb  =  new  StringBuilder(outputCharsetEncoder.encode(c),  shortquoteEscape);  [CE]  orphaned  case  [FE]                      ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  StringBuilder  sb  =  new  StringBuilder(outputCharsetEncoder.encode(c),  shortquoteEscape);  [BUGGY]    if  (c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	StringBuilder  sb  =  new  StringBuilder(outputCharsetEncoder.encode(c),  shortquoteEscape);	      StringBuilder    sb    =    new    StringBuilder(outputCharsetEncoder.encode(c),    quote);    	non-compiled	[CE]  orphaned  case	26	None	replace
372	[BUG]  [BUGGY]  StringBuilder  sb  =  new  StringBuilder(outputCharsetEncoder.encode(c),  buf);  [CE]  orphaned  case  [FE]                        ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  StringBuilder  sb  =  new  StringBuilder(outputCharsetEncoder.encode(c),  buf);  [BUGGY]    if  (c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	StringBuilder  sb  =  new  StringBuilder(outputCharsetEncoder.encode(c),  buf);	      StringBuilder    sb    =    new    StringBuilder(outputCharsetEncoder.encode(c),    quote);    	non-compiled	[CE]  orphaned  case	26	None	replace
373	[BUG]  [BUGGY]  char  c  =  outputCharsetEncoder.encode(c)+  1;  [CE]  orphaned  case  [FE]                        ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  char  c  =  outputCharsetEncoder.encode(c)+  1;  [BUGGY]    if  (c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	char  c  =  outputCharsetEncoder.encode(c)+  1;	      char    c    =    outputCharsetEncoder.encode(c);    	non-compiled	[CE]  orphaned  case	28	None	replace
374	[BUG]  [BUGGY]  if(outputCharsetEncoder!=  null)  {  c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  [CE]  illegal  start  of  type  [FE]        ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  if(outputCharsetEncoder!=  null)  {  c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  [BUGGY]    if  (c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	if(outputCharsetEncoder!=  null)  {  c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }	      c    >    0x1f    &&    c    <=    0x7f)    {    sb.append(c);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
375	[BUG]  [BUGGY]  if(outputCharsetEncoder  ==  null)  {  c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  [CE]  illegal  start  of  type  [FE]          ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  if(outputCharsetEncoder  ==  null)  {  c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  [BUGGY]    if  (c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	if(outputCharsetEncoder  ==  null)  {  c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }	      c    >    0x1f    &&    c    <=    0x7f)    {    sb.append(c);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
376	[BUG]  [BUGGY]  c  <=  0x7f)  {  sb.append(c);  [CE]  orphaned  case  [FE]            ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  c  <=  0x7f)  {  sb.append(c);  [BUGGY]    if  (c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	c  <=  0x7f)  {  sb.append(c);	      c    >    0x1f    &&    c    <=    0x7f)    {    sb.append(c);    	non-compiled	[CE]  orphaned  case	20	None	replace
377	[BUG]  [BUGGY]  c  >  0x1f  &&  c  <  0x7f)  {  sb.append('n');  [CE]  orphaned  case  [FE]              ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  c  >  0x1f  &&  c  <  0x7f)  {  sb.append('n');  [BUGGY]    if  (c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	c  >  0x1f  &&  c  <  0x7f)  {  sb.append('n');	      c    >    0x1f    &&    c    <=    0x7f)    {    sb.append(c);    	non-compiled	[CE]  orphaned  case	20	None	replace
378	[BUG]  [BUGGY]  if(c  >  0x1f  ||  c  <  0x7f  ||  c  >  0x7f)  {  [CE]  orphaned  case  [FE]                      ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  if(c  >  0x1f  ||  c  <  0x7f  ||  c  >  0x7f)  {  [BUGGY]    sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	if(c  >  0x1f  ||  c  <  0x7f  ||  c  >  0x7f)  {	  if(c    >    0x1f    &&    c    <=    0x7f    ||    c    >    0x7f)    {    	non-compiled	[CE]  orphaned  case	37	None	replace
379	[BUG]  [BUGGY]  if(c  >=  0x7f  &&  c  <=  0x7f  ||  c  >  0x7f)  {  [CE]  orphaned  case  [FE]                        ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  if(c  >=  0x7f  &&  c  <=  0x7f  ||  c  >  0x7f)  {  [BUGGY]    sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	if(c  >=  0x7f  &&  c  <=  0x7f  ||  c  >  0x7f)  {	  if(c    >    0x1f    &&    c    <=    0x7f    ||    c    >    0x7f)    {    	non-compiled	[CE]  orphaned  case	37	None	replace
380	[BUG]  [BUGGY]  if(c  >  0x1f  &&  c  <=  0x7f  ||  c  >=  0x7f)  {  [CE]  orphaned  case  [FE]                          ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  if(c  >  0x1f  &&  c  <=  0x7f  ||  c  >=  0x7f)  {  [BUGGY]    sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	if(c  >  0x1f  &&  c  <=  0x7f  ||  c  >=  0x7f)  {	  if(c    >    0x1f    &&    c    <=    0x7f    ||    c    >    0x7f)    {    	non-compiled	[CE]  orphaned  case	37	None	replace
381	[BUG]  [BUGGY]  if(c  <=  0x7f  ||  c  >  0x1f)  {  [CE]  orphaned  case  [FE]                            ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  if(c  <=  0x7f  ||  c  >  0x1f)  {  [BUGGY]    sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	if(c  <=  0x7f  ||  c  >  0x1f)  {	  if(c    >    0x1f    &&    c    <=    0x7f    ||    c    >    0x7f)    {    	non-compiled	[CE]  orphaned  case	37	None	replace
382	[BUG]  [BUGGY]  Character  c  =  outputCharsetEncoder.canEncode(c,  backslashEscape);  [CE]  orphaned  case  [FE]                    ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  Character  c  =  outputCharsetEncoder.canEncode(c,  backslashEscape);  [BUGGY]    if  (c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	Character  c  =  outputCharsetEncoder.canEncode(c,  backslashEscape);	      Character    c    =    outputCharsetEncoder.canEncode(c);    	non-compiled	[CE]  orphaned  case	7	None	replace
383	[BUG]  [BUGGY]  Character  c  =  outputCharsetEncoder.canEncode(pt);  [CE]  orphaned  case  [FE]                      ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  Character  c  =  outputCharsetEncoder.canEncode(pt);  [BUGGY]    if  (c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	Character  c  =  outputCharsetEncoder.canEncode(pt);	      Character    c    =    outputCharsetEncoder.canEncode(c);    	non-compiled	[CE]  orphaned  case	7	None	replace
384	[BUG]  [BUGGY]  Character  c  =  outputCharsetEncoder.canEncode(c,  outputCharsetEncoder);  [CE]  orphaned  case  [FE]                        ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  Character  c  =  outputCharsetEncoder.canEncode(c,  outputCharsetEncoder);  [BUGGY]    if  (c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	Character  c  =  outputCharsetEncoder.canEncode(c,  outputCharsetEncoder);	      Character    c    =    outputCharsetEncoder.canEncode(c);    	non-compiled	[CE]  orphaned  case	7	None	replace
385	[BUG]  [BUGGY]  Character  c  =  outputCharsetEncoder.canEncode(outputCharset);  [CE]  orphaned  case  [FE]                          ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  Character  c  =  outputCharsetEncoder.canEncode(outputCharset);  [BUGGY]    if  (c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	Character  c  =  outputCharsetEncoder.canEncode(outputCharset);	      Character    c    =    outputCharsetEncoder.canEncode(c);    	non-compiled	[CE]  orphaned  case	7	None	replace
386	[BUG]  [BUGGY]  Character  c  =  Character.toLowerCase(outputCharsetEncoder,  backslashEscape);  [CE]  illegal  start  of  type  [FE]                ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  Character  c  =  Character.toLowerCase(outputCharsetEncoder,  backslashEscape);  [BUGGY]    if  (c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	Character  c  =  Character.toLowerCase(outputCharsetEncoder,  backslashEscape);	      Character    c    =    Character.toLowerCase(outputCharsetEncoder);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
387	[BUG]  [BUGGY]  Character  c  =  outputCharsetEncoder.toLowerCase(Character.toLowerCase(c);  [CE]  illegal  start  of  type  [FE]                  ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  Character  c  =  outputCharsetEncoder.toLowerCase(Character.toLowerCase(c);  [BUGGY]    if  (c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	Character  c  =  outputCharsetEncoder.toLowerCase(Character.toLowerCase(c);	      Character    c    =    Character.toLowerCase(outputCharsetEncoder);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
388	[BUG]  [BUGGY]  Character  c  =  Character.toLowerCase(outputCharsetEncoder).charValue();  [CE]  illegal  start  of  type  [FE]                    ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  Character  c  =  Character.toLowerCase(outputCharsetEncoder).charValue();  [BUGGY]    if  (c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	Character  c  =  Character.toLowerCase(outputCharsetEncoder).charValue();	      Character    c    =    Character.toLowerCase(outputCharsetEncoder);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
389	[BUG]  [BUGGY]  Character  c  =  Character.toLowerCase(outputCharsetEncoder,  outputCharsetEscape);  [CE]  illegal  start  of  type  [FE]                      ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  Character  c  =  Character.toLowerCase(outputCharsetEncoder,  outputCharsetEscape);  [BUGGY]    if  (c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	Character  c  =  Character.toLowerCase(outputCharsetEncoder,  outputCharsetEscape);	      Character    c    =    Character.toLowerCase(outputCharsetEncoder);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
390	[BUG]  [BUGGY]  if(c  >  0x1f  &&  c  <=  0x7f  &&  c  <  inputCharsetEncoder)  {  [CE]  illegal  start  of  type  [FE]                    ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  if(c  >  0x1f  &&  c  <=  0x7f  &&  c  <  inputCharsetEncoder)  {  [BUGGY]    sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	if(c  >  0x1f  &&  c  <=  0x7f  &&  c  <  inputCharsetEncoder)  {	  if(c    >    0x1f    &&    c    <=    0x7f    &&    c    <    quote)    {    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
391	[BUG]  [BUGGY]  if(c  >  0x1f  &&  c  <=  0x7f  &&  c  <  outputCharsetEncoder.getChars(c))  {  [CE]  illegal  start  of  type  [FE]                      ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  if(c  >  0x1f  &&  c  <=  0x7f  &&  c  <  outputCharsetEncoder.getChars(c))  {  [BUGGY]    sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	if(c  >  0x1f  &&  c  <=  0x7f  &&  c  <  outputCharsetEncoder.getChars(c))  {	  if(c    >    0x1f    &&    c    <=    0x7f    &&    c    <    quote)    {    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
392	[BUG]  [BUGGY]  if(c  >  0x1f  &&  c  <=  0x7f  &&  c  <  inputCharsetEncoder.getChars(c))  {  [CE]  illegal  start  of  type  [FE]                        ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  if(c  >  0x1f  &&  c  <=  0x7f  &&  c  <  inputCharsetEncoder.getChars(c))  {  [BUGGY]    sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	if(c  >  0x1f  &&  c  <=  0x7f  &&  c  <  inputCharsetEncoder.getChars(c))  {	  if(c    >    0x1f    &&    c    <=    0x7f    &&    c    <    quote)    {    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
393	[BUG]  [BUGGY]  if(c  >  0x1f  &&  c  <=  0x7f  &&  c  <  strEscape)  {  [CE]  illegal  start  of  type  [FE]                          ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  if(c  >  0x1f  &&  c  <=  0x7f  &&  c  <  strEscape)  {  [BUGGY]    sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	if(c  >  0x1f  &&  c  <=  0x7f  &&  c  <  strEscape)  {	  if(c    >    0x1f    &&    c    <=    0x7f    &&    c    <    quote)    {    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
394	[BUG]  [BUGGY]  if(c  >  0x1f  &&  c  <=  0x7f  &&  Character.isWhitespace(c))  {  [CE]  illegal  start  of  type  [FE]              ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  if(c  >  0x1f  &&  c  <=  0x7f  &&  Character.isWhitespace(c))  {  [BUGGY]    sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	if(c  >  0x1f  &&  c  <=  0x7f  &&  Character.isWhitespace(c))  {	  if(c    >    0x1f    &&    c    <=    0x7f    &&    Character.isDigit(c))    {    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
395	[BUG]  [BUGGY]  if(c  >  0x1f  &&  c  <=  0x7f  &&  Character.isJavaScriptRepresentation(c))  {  [CE]  illegal  start  of  type  [FE]                ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  if(c  >  0x1f  &&  c  <=  0x7f  &&  Character.isJavaScriptRepresentation(c))  {  [BUGGY]    sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	if(c  >  0x1f  &&  c  <=  0x7f  &&  Character.isJavaScriptRepresentation(c))  {	  if(c    >    0x1f    &&    c    <=    0x7f    &&    Character.isDigit(c))    {    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
396	[BUG]  [BUGGY]  if(c  >  0x1f  &&  c  <=  0x7e  &&  Character.isDigit(c))  {  [CE]  illegal  start  of  type  [FE]                  ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  if(c  >  0x1f  &&  c  <=  0x7e  &&  Character.isDigit(c))  {  [BUGGY]    sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	if(c  >  0x1f  &&  c  <=  0x7e  &&  Character.isDigit(c))  {	  if(c    >    0x1f    &&    c    <=    0x7f    &&    Character.isDigit(c))    {    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
397	[BUG]  [BUGGY]  StringBuilder  sb  =  new  StringBuilder(outputCharsetEncoder.encodeHexJavaScriptRepresentation(c,  outputCharsetEncoder));  [CE]  illegal  start  of  type  [FE]          ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  StringBuilder  sb  =  new  StringBuilder(outputCharsetEncoder.encodeHexJavaScriptRepresentation(c,  outputCharsetEncoder));  [BUGGY]    if  (c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	StringBuilder  sb  =  new  StringBuilder(outputCharsetEncoder.encodeHexJavaScriptRepresentation(c,  outputCharsetEncoder));	      StringBuilder    sb    =    new    StringBuilder(outputCharsetEncoder.encode(c));    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
398	[BUG]  [BUGGY]  StringBuilder  sb  =  new  StringBuilder(outputCharsetEncoder.encodeHexJavaScriptRepresentation(c),  outputCharsetEncoder);  [CE]  illegal  start  of  type  [FE]            ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  StringBuilder  sb  =  new  StringBuilder(outputCharsetEncoder.encodeHexJavaScriptRepresentation(c),  outputCharsetEncoder);  [BUGGY]    if  (c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	StringBuilder  sb  =  new  StringBuilder(outputCharsetEncoder.encodeHexJavaScriptRepresentation(c),  outputCharsetEncoder);	      StringBuilder    sb    =    new    StringBuilder(outputCharsetEncoder.encode(c));    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
399	[BUG]  [BUGGY]  StringBuilder  sb  =  new  StringBuilder(outputCharsetEncoder.encodeHexJavaScriptRepresentation(c),  c);  [CE]  illegal  start  of  type  [FE]              ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  StringBuilder  sb  =  new  StringBuilder(outputCharsetEncoder.encodeHexJavaScriptRepresentation(c),  c);  [BUGGY]    if  (c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	StringBuilder  sb  =  new  StringBuilder(outputCharsetEncoder.encodeHexJavaScriptRepresentation(c),  c);	      StringBuilder    sb    =    new    StringBuilder(outputCharsetEncoder.encode(c));    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
400	[BUG]  [BUGGY]  if(c  >  0x1f  &&  c  <  0x7f  &&  c  <  127)  {  [CE]  illegal  start  of  type  [FE]          ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  if(c  >  0x1f  &&  c  <  0x7f  &&  c  <  127)  {  [BUGGY]    sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	if(c  >  0x1f  &&  c  <  0x7f  &&  c  <  127)  {	  if(c    >    0x1f    &&    c    <=    0x7f    &&    c    <=    127)    {    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
401	[BUG]  [BUGGY]  if(c  <  0x1f  &&  c  <=  0x7f  &&  c  <  127)  {  [CE]  illegal  start  of  type  [FE]            ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  if(c  <  0x1f  &&  c  <=  0x7f  &&  c  <  127)  {  [BUGGY]    sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	if(c  <  0x1f  &&  c  <=  0x7f  &&  c  <  127)  {	  if(c    >    0x1f    &&    c    <=    0x7f    &&    c    <=    127)    {    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
402	[BUG]  [BUGGY]  if(c  >  0x1f  &&  c  <=  0x7f  ||  c  <  127)  {  [CE]  illegal  start  of  type  [FE]              ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  if(c  >  0x1f  &&  c  <=  0x7f  ||  c  <  127)  {  [BUGGY]    sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	if(c  >  0x1f  &&  c  <=  0x7f  ||  c  <  127)  {	  if(c    >    0x1f    &&    c    <=    0x7f    &&    c    <=    127)    {    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
403	[BUG]  [BUGGY]  if(outputCharsetEncoder!=  null  &&  c  >  0x1f  &&  c  <=  0x7f  &&  outputCharsetEncoder.canEncode(c))  {  [CE]  illegal  start  of  type  [FE]              ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  if(outputCharsetEncoder!=  null  &&  c  >  0x1f  &&  c  <=  0x7f  &&  outputCharsetEncoder.canEncode(c))  {  [BUGGY]    sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	if(outputCharsetEncoder!=  null  &&  c  >  0x1f  &&  c  <=  0x7f  &&  outputCharsetEncoder.canEncode(c))  {	  if(c    >    0x1f    &&    c    <=    0x7f    &&    outputCharsetEncoder.canEncode(c))    {    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
404	[BUG]  [BUGGY]  if(c  >  0x1f  &&  c  <=  0x7f  &&  outputCharsetEncoder.canEncodeHex(c))  {  [CE]  illegal  start  of  type  [FE]                ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  if(c  >  0x1f  &&  c  <=  0x7f  &&  outputCharsetEncoder.canEncodeHex(c))  {  [BUGGY]    sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	if(c  >  0x1f  &&  c  <=  0x7f  &&  outputCharsetEncoder.canEncodeHex(c))  {	  if(c    >    0x1f    &&    c    <=    0x7f    &&    outputCharsetEncoder.canEncode(c))    {    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
405	[BUG]  [BUGGY]  if(outputCharsetEncoder!=  null  &&  c  <=  0x7f  &&  outputCharsetEncoder.canEncode(c))  {  [CE]  illegal  start  of  type  [FE]                  ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  if(outputCharsetEncoder!=  null  &&  c  <=  0x7f  &&  outputCharsetEncoder.canEncode(c))  {  [BUGGY]    sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	if(outputCharsetEncoder!=  null  &&  c  <=  0x7f  &&  outputCharsetEncoder.canEncode(c))  {	  if(c    >    0x1f    &&    c    <=    0x7f    &&    outputCharsetEncoder.canEncode(c))    {    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
406	[BUG]  [BUGGY]  if(c  >  0x1f  &&  outputCharsetEncoder!=  null  &&  outputCharsetEncoder.canEncode(c))  {  [CE]  illegal  start  of  type  [FE]                    ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  if(c  >  0x1f  &&  outputCharsetEncoder!=  null  &&  outputCharsetEncoder.canEncode(c))  {  [BUGGY]    sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	if(c  >  0x1f  &&  outputCharsetEncoder!=  null  &&  outputCharsetEncoder.canEncode(c))  {	  if(c    >    0x1f    &&    c    <=    0x7f    &&    outputCharsetEncoder.canEncode(c))    {    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
407	[BUG]  [BUGGY]  if(c  >  0x1f  &&  c  <  0x7f  &&  outputCharsetEncoder.canEncodeHex(c))  {  [CE]  illegal  start  of  type  [FE]                      ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  if(c  >  0x1f  &&  c  <  0x7f  &&  outputCharsetEncoder.canEncodeHex(c))  {  [BUGGY]    sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	if(c  >  0x1f  &&  c  <  0x7f  &&  outputCharsetEncoder.canEncodeHex(c))  {	  if(c    >    0x1f    &&    c    <=    0x7f    &&    outputCharsetEncoder.canEncode(c))    {    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
408	[BUG]  [BUGGY]  String  c  =  outputCharsetEncoder.canEncode(c,  backslashEscape);  [CE]  illegal  start  of  type  [FE]              ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  String  c  =  outputCharsetEncoder.canEncode(c,  backslashEscape);  [BUGGY]    if  (c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	String  c  =  outputCharsetEncoder.canEncode(c,  backslashEscape);	      String    c    =    outputCharsetEncoder.canEncode(c);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
409	[BUG]  [BUGGY]  String  c  =  outputCharsetEncoder.canEncode(char);  [CE]  illegal  start  of  type  [FE]                ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  String  c  =  outputCharsetEncoder.canEncode(char);  [BUGGY]    if  (c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	String  c  =  outputCharsetEncoder.canEncode(char);	      String    c    =    outputCharsetEncoder.canEncode(c);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
410	[BUG]  [BUGGY]  String  c  =  outputCharsetEncoder.canEncode(outputCharsetEncoder);  [CE]  illegal  start  of  type  [FE]                  ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  String  c  =  outputCharsetEncoder.canEncode(outputCharsetEncoder);  [BUGGY]    if  (c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	String  c  =  outputCharsetEncoder.canEncode(outputCharsetEncoder);	      String    c    =    outputCharsetEncoder.canEncode(c);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
411	[BUG]  [BUGGY]  String  c  =  outputCharsetEncoder.canEncode(c)&&!outputCharsetEncoder.isEmpty();  [CE]  illegal  start  of  type  [FE]                    ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  String  c  =  outputCharsetEncoder.canEncode(c)&&!outputCharsetEncoder.isEmpty();  [BUGGY]    if  (c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	String  c  =  outputCharsetEncoder.canEncode(c)&&!outputCharsetEncoder.isEmpty();	      String    c    =    outputCharsetEncoder.canEncode(c);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
412	[BUG]  [BUGGY]  if(c  >  0x1f  &&  c  <=  0x7f  &&  c  <=  128)  {  [CE]  illegal  start  of  type  [FE]                  ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  if(c  >  0x1f  &&  c  <=  0x7f  &&  c  <=  128)  {  [BUGGY]    sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	if(c  >  0x1f  &&  c  <=  0x7f  &&  c  <=  128)  {	  if(c    >    0x1f    &&    c    <=    0x7f    &&    c    <=    quote)    {    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
413	[BUG]  [BUGGY]  if(c  >  0x1f  &&  c  <=  0x7f  &&  c  <=  HexEncoder.encodeHex(c))  {  [CE]  illegal  start  of  type  [FE]                    ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  if(c  >  0x1f  &&  c  <=  0x7f  &&  c  <=  HexEncoder.encodeHex(c))  {  [BUGGY]    sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	if(c  >  0x1f  &&  c  <=  0x7f  &&  c  <=  HexEncoder.encodeHex(c))  {	  if(c    >    0x1f    &&    c    <=    0x7f    &&    c    <=    quote)    {    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
414	[BUG]  [BUGGY]  if(c  >  0x1f  &&  c  <=  0x7f  &&  c  <=  LAST_VALID_BLOCK)  {  [CE]  illegal  start  of  type  [FE]                      ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  if(c  >  0x1f  &&  c  <=  0x7f  &&  c  <=  LAST_VALID_BLOCK)  {  [BUGGY]    sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	if(c  >  0x1f  &&  c  <=  0x7f  &&  c  <=  LAST_VALID_BLOCK)  {	  if(c    >    0x1f    &&    c    <=    0x7f    &&    c    <=    quote)    {    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
415	[BUG]  [BUGGY]  if(c  >  0x1f  &&  c  <=  0x7f  &&  c  <=  HexEncoder.getInstance())  {  [CE]  illegal  start  of  type  [FE]                        ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  if(c  >  0x1f  &&  c  <=  0x7f  &&  c  <=  HexEncoder.getInstance())  {  [BUGGY]    sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	if(c  >  0x1f  &&  c  <=  0x7f  &&  c  <=  HexEncoder.getInstance())  {	  if(c    >    0x1f    &&    c    <=    0x7f    &&    c    <=    quote)    {    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
416	[BUG]  [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.encode();  [CE]  illegal  start  of  type  [FE]                      ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.encode();  [BUGGY]    if  (c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	CharsetEncoder  cc  =  outputCharsetEncoder.encode();	      CharsetEncoder    cc    =    outputCharsetEncoder.getEncoder();    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
417	[BUG]  [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.charAt(c);  [CE]  illegal  start  of  type  [FE]                        ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.charAt(c);  [BUGGY]    if  (c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	CharsetEncoder  cc  =  outputCharsetEncoder.charAt(c);	      CharsetEncoder    cc    =    outputCharsetEncoder.getEncoder();    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
418	[BUG]  [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.decode(c);  [CE]  illegal  start  of  type  [FE]                          ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.decode(c);  [BUGGY]    if  (c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	CharsetEncoder  cc  =  outputCharsetEncoder.decode(c);	      CharsetEncoder    cc    =    outputCharsetEncoder.getEncoder();    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
419	[BUG]  [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.reset();  [CE]  illegal  start  of  type  [FE]                            ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.reset();  [BUGGY]    if  (c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	CharsetEncoder  cc  =  outputCharsetEncoder.reset();	      CharsetEncoder    cc    =    outputCharsetEncoder.getEncoder();    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
420	[BUG]  [BUGGY]  Character  c  =  outputCharsetEncoder.canEncode(outputCharsetEncoder);  [CE]  illegal  start  of  type  [FE]                    ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  Character  c  =  outputCharsetEncoder.canEncode(outputCharsetEncoder);  [BUGGY]    if  (c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	Character  c  =  outputCharsetEncoder.canEncode(outputCharsetEncoder);	      Character    c    =    outputCharsetEncoder.canEncode(c);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
421	[BUG]  [BUGGY]  Character  c  =  outputCharsetEncoder.charAt(c);  [CE]  illegal  start  of  type  [FE]                      ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  Character  c  =  outputCharsetEncoder.charAt(c);  [BUGGY]    if  (c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	Character  c  =  outputCharsetEncoder.charAt(c);	      Character    c    =    outputCharsetEncoder.canEncode(c);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
422	[BUG]  [BUGGY]  Character  c  =  outputCharsetEncoder.outputCharsetEncoder.canEncode(c);  [CE]  illegal  start  of  type  [FE]                        ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  Character  c  =  outputCharsetEncoder.outputCharsetEncoder.canEncode(c);  [BUGGY]    if  (c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	Character  c  =  outputCharsetEncoder.outputCharsetEncoder.canEncode(c);	      Character    c    =    outputCharsetEncoder.canEncode(c);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
423	[BUG]  [BUGGY]  Integer  c  =  outputCharsetEncoder.toEncode(c);  [CE]  illegal  start  of  type  [FE]                      ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  Integer  c  =  outputCharsetEncoder.toEncode(c);  [BUGGY]    if  (c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	Integer  c  =  outputCharsetEncoder.toEncode(c);	      Integer    c    =    outputCharsetEncoder.canEncode(c);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
424	[BUG]  [BUGGY]  Integer  c  =  outputCharsetEncoder.charAt(c);  [CE]  illegal  start  of  type  [FE]                        ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  Integer  c  =  outputCharsetEncoder.charAt(c);  [BUGGY]    if  (c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	Integer  c  =  outputCharsetEncoder.charAt(c);	      Integer    c    =    outputCharsetEncoder.canEncode(c);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
425	[BUG]  [BUGGY]  Integer  c  =  outputCharsetEncoder.canEncode(c,  quote);  [CE]  illegal  start  of  type  [FE]                          ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  Integer  c  =  outputCharsetEncoder.canEncode(c,  quote);  [BUGGY]    if  (c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	Integer  c  =  outputCharsetEncoder.canEncode(c,  quote);	      Integer    c    =    outputCharsetEncoder.canEncode(c);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
426	[BUG]  [BUGGY]  if(c  >  0x1f  &&  c  <=  0x7f  &&!outputCharsetEncoder.isEncoded(c))  {  [CE]  illegal  start  of  type  [FE]        ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  if(c  >  0x1f  &&  c  <=  0x7f  &&!outputCharsetEncoder.isEncoded(c))  {  [BUGGY]    sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	if(c  >  0x1f  &&  c  <=  0x7f  &&!outputCharsetEncoder.isEncoded(c))  {	  if(c    >    0x1f    &&    c    <=    0x7f    &&!outputCharsetEncoder.canEncode(c))    {    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
427	[BUG]  [BUGGY]  if(c  >  0x1f  &&  c  <=  0x7FF  &&!outputCharsetEncoder.canEncode(c))  {  [CE]  illegal  start  of  type  [FE]          ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  if(c  >  0x1f  &&  c  <=  0x7FF  &&!outputCharsetEncoder.canEncode(c))  {  [BUGGY]    sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	if(c  >  0x1f  &&  c  <=  0x7FF  &&!outputCharsetEncoder.canEncode(c))  {	  if(c    >    0x1f    &&    c    <=    0x7f    &&!outputCharsetEncoder.canEncode(c))    {    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
428	[BUG]  [BUGGY]  char  c  =  outputCharsetEncoder.canEncode(c)&&  sb.length()  >  0;  [CE]  illegal  start  of  type  [FE]          ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  char  c  =  outputCharsetEncoder.canEncode(c)&&  sb.length()  >  0;  [BUGGY]    if  (c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	char  c  =  outputCharsetEncoder.canEncode(c)&&  sb.length()  >  0;	      char    c    =    outputCharsetEncoder.canEncode(c);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
429	[BUG]  [BUGGY]  if(c  >  0x7f  ||  c  <=  0x1f)  {  [CE]  illegal  start  of  type  [FE]        ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  if(c  >  0x7f  ||  c  <=  0x1f)  {  [BUGGY]    sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	if(c  >  0x7f  ||  c  <=  0x1f)  {	  if(c    >    0x1f    ||    c    <=    0x7f)    {    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
430	[BUG]  [BUGGY]  c  =  outputCharsetEncoder.canEncode(c)?  sb.toString()  :  quote;  [CE]  illegal  start  of  type  [FE]        ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  c  =  outputCharsetEncoder.canEncode(c)?  sb.toString()  :  quote;  [BUGGY]    if  (c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	c  =  outputCharsetEncoder.canEncode(c)?  sb.toString()  :  quote;	      c    =    outputCharsetEncoder.canEncode(c);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
431	[BUG]  [BUGGY]  c  =  outputCharsetEncoder.canEncode(c)&&!outputCharsetEncoder.endsWith(c);  [CE]  illegal  start  of  type  [FE]          ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  c  =  outputCharsetEncoder.canEncode(c)&&!outputCharsetEncoder.endsWith(c);  [BUGGY]    if  (c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	c  =  outputCharsetEncoder.canEncode(c)&&!outputCharsetEncoder.endsWith(c);	      c    =    outputCharsetEncoder.canEncode(c);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
432	[BUG]  [BUGGY]  int  c  =  outputCharsetEncoder.canEncode(c,  quote);  [CE]  illegal  start  of  type  [FE]            ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  int  c  =  outputCharsetEncoder.canEncode(c,  quote);  [BUGGY]    if  (c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	int  c  =  outputCharsetEncoder.canEncode(c,  quote);	      int    c    =    outputCharsetEncoder.canEncode(c);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
433	[BUG]  [BUGGY]  int  c  =  outputCharsetEncoder.charAt(c);  [CE]  illegal  start  of  type  [FE]              ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  int  c  =  outputCharsetEncoder.charAt(c);  [BUGGY]    if  (c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	int  c  =  outputCharsetEncoder.charAt(c);	      int    c    =    outputCharsetEncoder.canEncode(c);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
434	[BUG]  [BUGGY]  char  c  =  this.outputCharsetEncoder.encode(c);  [CE]  illegal  start  of  type  [FE]                        ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  char  c  =  this.outputCharsetEncoder.encode(c);  [BUGGY]    if  (c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	char  c  =  this.outputCharsetEncoder.encode(c);	      char    c    =    outputCharsetEncoder.encode(c);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
435	[BUG]  [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.canEncode(c)&&  sb.length()  >  0;  [CE]  illegal  start  of  type  [FE]                  ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.canEncode(c)&&  sb.length()  >  0;  [BUGGY]    if  (c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	CharsetEncoder  cc  =  outputCharsetEncoder.canEncode(c)&&  sb.length()  >  0;	      CharsetEncoder    cc    =    outputCharsetEncoder.canEncode(c);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
436	[BUG]  [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.encode(c,  charQuote);  [CE]  illegal  start  of  type  [FE]                          ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.encode(c,  charQuote);  [BUGGY]    if  (c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	CharsetEncoder  cc  =  outputCharsetEncoder.encode(c,  charQuote);	      CharsetEncoder    cc    =    outputCharsetEncoder.encode(c);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
437	[BUG]  [BUGGY]  CharsetEncoder  outputCharsetEncoder  =  outputCharsetEncoder.encode(c,  sb);  [CE]  illegal  start  of  type  [FE]                            ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  CharsetEncoder  outputCharsetEncoder  =  outputCharsetEncoder.encode(c,  sb);  [BUGGY]    if  (c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	CharsetEncoder  outputCharsetEncoder  =  outputCharsetEncoder.encode(c,  sb);	      CharsetEncoder    cc    =    outputCharsetEncoder.encode(c);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
438	[BUG]  [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.encode(c,  this);  [CE]  illegal  start  of  type  [FE]                              ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.encode(c,  this);  [BUGGY]    if  (c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	CharsetEncoder  cc  =  outputCharsetEncoder.encode(c,  this);	      CharsetEncoder    cc    =    outputCharsetEncoder.encode(c);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
439	[BUG]  [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.encode(c,  charPosition);  [CE]  illegal  start  of  type  [FE]                                ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.encode(c,  charPosition);  [BUGGY]    if  (c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	CharsetEncoder  cc  =  outputCharsetEncoder.encode(c,  charPosition);	      CharsetEncoder    cc    =    outputCharsetEncoder.encode(c);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
440	[BUG]  [BUGGY]  StringBuilder  sb  =  new  StringBuilder(c.charAt(i));  [CE]  illegal  start  of  type  [FE]                ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  StringBuilder  sb  =  new  StringBuilder(c.charAt(i));  [BUGGY]    if  (c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	StringBuilder  sb  =  new  StringBuilder(c.charAt(i));	      StringBuilder    sb    =    new    StringBuilder(outputCharsetEncoder.encode(quote));    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
441	[BUG]  [BUGGY]  StringBuilder  sb  =  new  StringBuilder(singlequoteEscape.encode(c));  [CE]  illegal  start  of  type  [FE]                  ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  StringBuilder  sb  =  new  StringBuilder(singlequoteEscape.encode(c));  [BUGGY]    if  (c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	StringBuilder  sb  =  new  StringBuilder(singlequoteEscape.encode(c));	      StringBuilder    sb    =    new    StringBuilder(outputCharsetEncoder.encode(quote));    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
442	[BUG]  [BUGGY]  StringBuilder  sb  =  new  StringBuilder(singlequoteEscape,  outputCharsetEncoder.encode(c));  [CE]  orphaned  case  [FE]                    ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  StringBuilder  sb  =  new  StringBuilder(singlequoteEscape,  outputCharsetEncoder.encode(c));  [BUGGY]    if  (c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	StringBuilder  sb  =  new  StringBuilder(singlequoteEscape,  outputCharsetEncoder.encode(c));	      StringBuilder    sb    =    new    StringBuilder(outputCharsetEncoder.encode(quote));    	non-compiled	[CE]  orphaned  case	24	None	replace
443	[BUG]  [BUGGY]  c  =  outputCharsetEncoder.encode(quote,  c);  [CE]  orphaned  case  [FE]                        ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  c  =  outputCharsetEncoder.encode(quote,  c);  [BUGGY]    if  (c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	c  =  outputCharsetEncoder.encode(quote,  c);	      c    =    outputCharsetEncoder.encode(c);    	non-compiled	[CE]  orphaned  case	9	None	replace
444	[BUG]  [BUGGY]  c  =  outputCharsetEncoder.encode(c,  charQuote);  [CE]  illegal  start  of  type  [FE]                          ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  c  =  outputCharsetEncoder.encode(c,  charQuote);  [BUGGY]    if  (c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	c  =  outputCharsetEncoder.encode(c,  charQuote);	      c    =    outputCharsetEncoder.encode(c);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
445	[BUG]  [BUGGY]  c  =  outputCharsetEncoder.encode(c,  this);  [CE]  orphaned  case  [FE]                            ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  c  =  outputCharsetEncoder.encode(c,  this);  [BUGGY]    if  (c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	c  =  outputCharsetEncoder.encode(c,  this);	      c    =    outputCharsetEncoder.encode(c);    	non-compiled	[CE]  orphaned  case	9	None	replace
446	[BUG]  [BUGGY]  CharsetEncoder  cc  =  getCharsetEncoder(context,  outputCharsetEncoder);  [CE]  orphaned  case  [FE]                              ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  CharsetEncoder  cc  =  getCharsetEncoder(context,  outputCharsetEncoder);  [BUGGY]    if  (c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	CharsetEncoder  cc  =  getCharsetEncoder(context,  outputCharsetEncoder);	      CharsetEncoder    cc    =    getCharsetEncoder();    	non-compiled	[CE]  orphaned  case	12	None	replace
447	[BUG]  [BUGGY]  CharsetEncoder  cc  =  getCharsetEncoder(charsetEscape);  [CE]  orphaned  case  [FE]                                ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  CharsetEncoder  cc  =  getCharsetEncoder(charsetEscape);  [BUGGY]    if  (c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	CharsetEncoder  cc  =  getCharsetEncoder(charsetEscape);	      CharsetEncoder    cc    =    getCharsetEncoder();    	non-compiled	[CE]  orphaned  case	12	None	replace
448	[BUG]  [BUGGY]  if(c  >  0x1f  &&  c  <=  0x7f  &&  c  <=  0x10FFFF)  {  [CE]  orphaned  case  [FE]            ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  if(c  >  0x1f  &&  c  <=  0x7f  &&  c  <=  0x10FFFF)  {  [BUGGY]    sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	if(c  >  0x1f  &&  c  <=  0x7f  &&  c  <=  0x10FFFF)  {	  if(c    >    0x1f    &&    c    <=    0x7f    ||    c    >    0x10FFFF)    {    	non-compiled	[CE]  orphaned  case	32	None	replace
449	[BUG]  [BUGGY]  if(c  >  0x1f  &&  c  <=  0x7f  ||  c  ==  0x10FFFF)  {  [CE]  orphaned  case  [FE]              ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  if(c  >  0x1f  &&  c  <=  0x7f  ||  c  ==  0x10FFFF)  {  [BUGGY]    sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	if(c  >  0x1f  &&  c  <=  0x7f  ||  c  ==  0x10FFFF)  {	  if(c    >    0x1f    &&    c    <=    0x7f    ||    c    >    0x10FFFF)    {    	non-compiled	[CE]  orphaned  case	32	None	replace
450	[BUG]  [BUGGY]  StringBuilder  sb  =  new  StringBuilder(outputCharsetEncoder.computeHexJavaScriptRepresentation(c));  [CE]  orphaned  case  [FE]                  ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  StringBuilder  sb  =  new  StringBuilder(outputCharsetEncoder.computeHexJavaScriptRepresentation(c));  [BUGGY]    if  (c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	StringBuilder  sb  =  new  StringBuilder(outputCharsetEncoder.computeHexJavaScriptRepresentation(c));	      StringBuilder    sb    =    new    StringBuilder(outputCharsetEncoder.canEncode(c));    	non-compiled	[CE]  orphaned  case	25	None	replace
451	[BUG]  [BUGGY]  sb  =  new  StringBuilder(outputCharsetEncoder.encodeHexJavaScriptRepresentation(c));  [CE]  orphaned  case  [FE]                    ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  sb  =  new  StringBuilder(outputCharsetEncoder.encodeHexJavaScriptRepresentation(c));  [BUGGY]    if  (c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	sb  =  new  StringBuilder(outputCharsetEncoder.encodeHexJavaScriptRepresentation(c));	      StringBuilder    sb    =    new    StringBuilder(outputCharsetEncoder.canEncode(c));    	non-compiled	[CE]  orphaned  case	25	None	replace
452	[BUG]  [BUGGY]  String  c  =  outputCharsetEncoder.canEncode(c)&&  sb.length()  >  0;  [CE]  orphaned  case  [FE]              ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  String  c  =  outputCharsetEncoder.canEncode(c)&&  sb.length()  >  0;  [BUGGY]    if  (c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	String  c  =  outputCharsetEncoder.canEncode(c)&&  sb.length()  >  0;	      String    c    =    outputCharsetEncoder.canEncode(c);    	non-compiled	[CE]  orphaned  case	4	None	replace
453	[BUG]  [BUGGY]  String  c  =  outputCharsetEncoder.canEncode(c)?  sb.toString()  :  sb.toString();  [CE]  orphaned  case  [FE]                ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  String  c  =  outputCharsetEncoder.canEncode(c)?  sb.toString()  :  sb.toString();  [BUGGY]    if  (c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	String  c  =  outputCharsetEncoder.canEncode(c)?  sb.toString()  :  sb.toString();	      String    c    =    outputCharsetEncoder.canEncode(c);    	non-compiled	[CE]  orphaned  case	4	None	replace
454	[BUG]  [BUGGY]  String  c  =  outputCharsetEncoder.canEncode(c)&&  Character.isDigit(c);  [CE]  orphaned  case  [FE]                  ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  String  c  =  outputCharsetEncoder.canEncode(c)&&  Character.isDigit(c);  [BUGGY]    if  (c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	String  c  =  outputCharsetEncoder.canEncode(c)&&  Character.isDigit(c);	      String    c    =    outputCharsetEncoder.canEncode(c);    	non-compiled	[CE]  orphaned  case	4	None	replace
455	[BUG]  [BUGGY]  String  c  =  outputCharsetEncoder.canEncode(c)&&!outputCharsetEncoder.isWhitespace(c);  [CE]  orphaned  case  [FE]                    ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  String  c  =  outputCharsetEncoder.canEncode(c)&&!outputCharsetEncoder.isWhitespace(c);  [BUGGY]    if  (c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	String  c  =  outputCharsetEncoder.canEncode(c)&&!outputCharsetEncoder.isWhitespace(c);	      String    c    =    outputCharsetEncoder.canEncode(c);    	non-compiled	[CE]  orphaned  case	4	None	replace
456	[BUG]  [BUGGY]  if(c  >  0x1f  &&  c  <=  0x7f  &&  outputCharsetEncoder.isEncoded(c))  {  [CE]  orphaned  case  [FE]              ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  if(c  >  0x1f  &&  c  <=  0x7f  &&  outputCharsetEncoder.isEncoded(c))  {  [BUGGY]    sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	if(c  >  0x1f  &&  c  <=  0x7f  &&  outputCharsetEncoder.isEncoded(c))  {	  if(c    >    0x1f    &&    c    <=    0x7f    &&    outputCharsetEncoder.canEncode(c))    {    	non-compiled	[CE]  orphaned  case	16	None	replace
457	[BUG]  [BUGGY]  if(c  >  0x1f  &&  c  <=  0x7FF  &&  outputCharsetEncoder.canEncode(c))  {  [CE]  orphaned  case  [FE]                ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  if(c  >  0x1f  &&  c  <=  0x7FF  &&  outputCharsetEncoder.canEncode(c))  {  [BUGGY]    sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	if(c  >  0x1f  &&  c  <=  0x7FF  &&  outputCharsetEncoder.canEncode(c))  {	  if(c    >    0x1f    &&    c    <=    0x7f    &&    outputCharsetEncoder.canEncode(c))    {    	non-compiled	[CE]  orphaned  case	16	None	replace
458	[BUG]  [BUGGY]  if(c  <  0x1f  ||  c  >  0x7f  ||!outputCharsetEncoder.canEncode(c))  {  [CE]  orphaned  case  [FE]                    ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  if(c  <  0x1f  ||  c  >  0x7f  ||!outputCharsetEncoder.canEncode(c))  {  [BUGGY]    sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	if(c  <  0x1f  ||  c  >  0x7f  ||!outputCharsetEncoder.canEncode(c))  {	  if(c    >    0x1f    &&    c    <=    0x7f    ||!outputCharsetEncoder.canEncode(c))    {    	non-compiled	[CE]  orphaned  case	19	None	replace
459	[BUG]  [BUGGY]  int  c  =  outputCharsetEncoder.charAt(sb);  [CE]  orphaned  case  [FE]        ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  int  c  =  outputCharsetEncoder.charAt(sb);  [BUGGY]    if  (c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	int  c  =  outputCharsetEncoder.charAt(sb);	      int    c    =    outputCharsetEncoder.canEncode(sb);    	non-compiled	[CE]  orphaned  case	38	None	replace
460	[BUG]  [BUGGY]  int  c  =  outputCharsetEncoder.toEncode(c);  [CE]  orphaned  case  [FE]          ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  int  c  =  outputCharsetEncoder.toEncode(c);  [BUGGY]    if  (c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	int  c  =  outputCharsetEncoder.toEncode(c);	      int    c    =    outputCharsetEncoder.canEncode(sb);    	non-compiled	[CE]  orphaned  case	38	None	replace
461	[BUG]  [BUGGY]  if(c  >  0x1f  &&  c  <=  0x7f  &&  c  <=  0x7f)  {  [CE]  orphaned  case  [FE]                      ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  if(c  >  0x1f  &&  c  <=  0x7f  &&  c  <=  0x7f)  {  [BUGGY]    sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	if(c  >  0x1f  &&  c  <=  0x7f  &&  c  <=  0x7f)  {	  if(c    >    0x1f    &&    c    <=    0x7f    ||    c    >    0x7f)    {    	non-compiled	[CE]  orphaned  case	37	None	replace
462	[BUG]  [BUGGY]  StringBuilder  sb  =  new  StringBuilder(outputCharsetEncoder.encode(c)&  quote);  [CE]  orphaned  case  [FE]                    ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  StringBuilder  sb  =  new  StringBuilder(outputCharsetEncoder.encode(c)&  quote);  [BUGGY]    if  (c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	StringBuilder  sb  =  new  StringBuilder(outputCharsetEncoder.encode(c)&  quote);	      StringBuilder    sb    =    new    StringBuilder(outputCharsetEncoder.encode(c),    quote);    	non-compiled	[CE]  orphaned  case	26	None	replace
463	[BUG]  [BUGGY]  if(c  >  0x1f  &&  c  <  Character.toLowerCase(c))  {  [CE]  orphaned  case  [FE]            ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  if(c  >  0x1f  &&  c  <  Character.toLowerCase(c))  {  [BUGGY]    sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	if(c  >  0x1f  &&  c  <  Character.toLowerCase(c))  {	  if(c    >    0x1f    &&    c    <    0x7f)    {    	non-compiled	[CE]  orphaned  case	15	None	replace
464	[BUG]  [BUGGY]  if(c  >  0x1f  &&  c  <=  0x7FF)  {  [CE]  orphaned  case  [FE]              ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  if(c  >  0x1f  &&  c  <=  0x7FF)  {  [BUGGY]    sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	if(c  >  0x1f  &&  c  <=  0x7FF)  {	  if(c    >    0x1f    &&    c    <    0x7f)    {    	non-compiled	[CE]  orphaned  case	15	None	replace
465	[BUG]  [BUGGY]  if(c  >  0x3f  &&  c  <  0x7f)  {  [CE]  orphaned  case  [FE]                ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  if(c  >  0x3f  &&  c  <  0x7f)  {  [BUGGY]    sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	if(c  >  0x3f  &&  c  <  0x7f)  {	  if(c    >    0x1f    &&    c    <    0x7f)    {    	non-compiled	[CE]  orphaned  case	15	None	replace
466	[BUG]  [BUGGY]  if(c  >=  0x1f  &&  c  <=  0x7f  &&  quote.charAt(c)!=  '-')  {  [CE]  orphaned  case  [FE]                  ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  if(c  >=  0x1f  &&  c  <=  0x7f  &&  quote.charAt(c)!=  '-')  {  [BUGGY]    sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	if(c  >=  0x1f  &&  c  <=  0x7f  &&  quote.charAt(c)!=  '-')  {	  if(c    >=    0x1f    &&    c    <=    0x7f)    {    	non-compiled	[CE]  orphaned  case	18	None	replace
467	[BUG]  [BUGGY]  if(c  >=  0x1f  &&  c  <=  0x7f  ||  c  >  0x10FF)  {  [CE]  orphaned  case  [FE]                    ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  if(c  >=  0x1f  &&  c  <=  0x7f  ||  c  >  0x10FF)  {  [BUGGY]    sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	if(c  >=  0x1f  &&  c  <=  0x7f  ||  c  >  0x10FF)  {	  if(c    >=    0x1f    &&    c    <=    0x7f)    {    	non-compiled	[CE]  orphaned  case	18	None	replace
468	[BUG]  [BUGGY]  c  =  outputCharsetEncoder.decode(c);  [CE]  orphaned  case  [FE]              ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  c  =  outputCharsetEncoder.decode(c);  [BUGGY]    if  (c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	c  =  outputCharsetEncoder.decode(c);	      c    =    outputCharsetEncoder.canEncode(sb);    	non-compiled	[CE]  orphaned  case	23	None	replace
469	[BUG]  [BUGGY]  c  =  outputCharsetEncoder.charAt(sb.length()  -  1);  [CE]  orphaned  case  [FE]                ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  c  =  outputCharsetEncoder.charAt(sb.length()  -  1);  [BUGGY]    if  (c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	c  =  outputCharsetEncoder.charAt(sb.length()  -  1);	      c    =    outputCharsetEncoder.canEncode(sb);    	non-compiled	[CE]  orphaned  case	23	None	replace
470	[BUG]  [BUGGY]  c  =  outputCharsetEncoder.toEncode(c);  [CE]  orphaned  case  [FE]                  ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  c  =  outputCharsetEncoder.toEncode(c);  [BUGGY]    if  (c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	c  =  outputCharsetEncoder.toEncode(c);	      c    =    outputCharsetEncoder.canEncode(sb);    	non-compiled	[CE]  orphaned  case	23	None	replace
471	[BUG]  [BUGGY]  c  =  outputCharsetEncoder.charAt(i);  [CE]  orphaned  case  [FE]                    ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  c  =  outputCharsetEncoder.charAt(i);  [BUGGY]    if  (c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	c  =  outputCharsetEncoder.charAt(i);	      c    =    outputCharsetEncoder.canEncode(sb);    	non-compiled	[CE]  orphaned  case	23	None	replace
472	[BUG]  [BUGGY]  c  =  outputCharsetEncoder.convert(c);  [CE]  orphaned  case  [FE]                      ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  c  =  outputCharsetEncoder.convert(c);  [BUGGY]    if  (c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	c  =  outputCharsetEncoder.convert(c);	      c    =    outputCharsetEncoder.canEncode(sb);    	non-compiled	[CE]  orphaned  case	23	None	replace
473	[BUG]  [BUGGY]  c  =  outputCharsetEncoder.convertToString(c);  [CE]  orphaned  case  [FE]                        ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  c  =  outputCharsetEncoder.convertToString(c);  [BUGGY]    if  (c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	c  =  outputCharsetEncoder.convertToString(c);	      c    =    outputCharsetEncoder.canEncode(sb);    	non-compiled	[CE]  orphaned  case	23	None	replace
474	[BUG]  [BUGGY]  if(c  >  0x7f  ||  c  <=  0x7f)  {  [CE]  orphaned  case  [FE]        ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  if(c  >  0x7f  ||  c  <=  0x7f)  {  [BUGGY]    sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	if(c  >  0x7f  ||  c  <=  0x7f)  {	  if(c    >    0x1f    ||    c    <    0x7f)    {    	non-compiled	[CE]  orphaned  case	29	None	replace
475	[BUG]  [BUGGY]  if(c  >  0x3f  ||  c  <  0x7f)  {  [CE]  orphaned  case  [FE]          ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  if(c  >  0x3f  ||  c  <  0x7f)  {  [BUGGY]    sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	if(c  >  0x3f  ||  c  <  0x7f)  {	  if(c    >    0x1f    ||    c    <    0x7f)    {    	non-compiled	[CE]  orphaned  case	29	None	replace
476	[BUG]  [BUGGY]  if(c  >  0x17f  ||  c  <  0x7f)  {  [CE]  orphaned  case  [FE]            ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  if(c  >  0x17f  ||  c  <  0x7f)  {  [BUGGY]    sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	if(c  >  0x17f  ||  c  <  0x7f)  {	  if(c    >    0x1f    ||    c    <    0x7f)    {    	non-compiled	[CE]  orphaned  case	29	None	replace
477	[BUG]  [BUGGY]  Character  c  =  Character.toLowerCase(c);  [CE]  orphaned  case  [FE]                ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  Character  c  =  Character.toLowerCase(c);  [BUGGY]    if  (c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	Character  c  =  Character.toLowerCase(c);	      Character    c    =    Character.toLowerCase(outputCharsetEncoder);    	non-compiled	[CE]  orphaned  case	5	None	replace
478	[BUG]  [BUGGY]  Character  c  =  Character.toLowerCase(charsetEncoder,  outputCharsetEncoder);  [CE]  orphaned  case  [FE]                  ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  Character  c  =  Character.toLowerCase(charsetEncoder,  outputCharsetEncoder);  [BUGGY]    if  (c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	Character  c  =  Character.toLowerCase(charsetEncoder,  outputCharsetEncoder);	      Character    c    =    Character.toLowerCase(outputCharsetEncoder);    	non-compiled	[CE]  orphaned  case	5	None	replace
479	[BUG]  [BUGGY]  Character  c  =  Character.toLowerCase(charsetEncoder);  [CE]  orphaned  case  [FE]                    ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  Character  c  =  Character.toLowerCase(charsetEncoder);  [BUGGY]    if  (c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	Character  c  =  Character.toLowerCase(charsetEncoder);	      Character    c    =    Character.toLowerCase(outputCharsetEncoder);    	non-compiled	[CE]  orphaned  case	5	None	replace
480	[BUG]  [BUGGY]  Character  c  =  Character.toLowerCase(quote);  [CE]  orphaned  case  [FE]                      ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  Character  c  =  Character.toLowerCase(quote);  [BUGGY]    if  (c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	Character  c  =  Character.toLowerCase(quote);	      Character    c    =    Character.toLowerCase(outputCharsetEncoder);    	non-compiled	[CE]  orphaned  case	5	None	replace
481	[BUG]  [BUGGY]  Character  c  =  Character.toLowerCase(p);  [CE]  orphaned  case  [FE]                        ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  Character  c  =  Character.toLowerCase(p);  [BUGGY]    if  (c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	Character  c  =  Character.toLowerCase(p);	      Character    c    =    Character.toLowerCase(outputCharsetEncoder);    	non-compiled	[CE]  orphaned  case	5	None	replace
482	[BUG]  [BUGGY]  Character  c  =  outputCharsetEncoder.encode(caracter);  [CE]  orphaned  case  [FE]                            ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  Character  c  =  outputCharsetEncoder.encode(caracter);  [BUGGY]    if  (c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	Character  c  =  outputCharsetEncoder.encode(caracter);	      Character    c    =    outputCharsetEncoder.encode(c);    	non-compiled	[CE]  orphaned  case	11	None	replace
483	[BUG]  [BUGGY]  Character  c  =  outputCharsetEncoder.encode(quote);  [CE]  orphaned  case  [FE]                              ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  Character  c  =  outputCharsetEncoder.encode(quote);  [BUGGY]    if  (c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	Character  c  =  outputCharsetEncoder.encode(quote);	      Character    c    =    outputCharsetEncoder.encode(c);    	non-compiled	[CE]  orphaned  case	11	None	replace
484	[BUG]  [BUGGY]  if(c  >  0x1f  &&  c  <=  0x7FF  &&  Character.isDigit(c))  {  [CE]  orphaned  case  [FE]              ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  if(c  >  0x1f  &&  c  <=  0x7FF  &&  Character.isDigit(c))  {  [BUGGY]    sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	if(c  >  0x1f  &&  c  <=  0x7FF  &&  Character.isDigit(c))  {	  if(c    >    0x1f    &&    c    <=    0x7f    &&    Character.isDigit(c))    {    	non-compiled	[CE]  orphaned  case	33	None	replace
485	[BUG]  [BUGGY]  if(c  <  0x1f  &&  c  <=  0x7f  ||  Character.isDigit(c))  {  [CE]  orphaned  case  [FE]                ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  if(c  <  0x1f  &&  c  <=  0x7f  ||  Character.isDigit(c))  {  [BUGGY]    sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	if(c  <  0x1f  &&  c  <=  0x7f  ||  Character.isDigit(c))  {	  if(c    >    0x1f    &&    c    <=    0x7f    &&    Character.isDigit(c))    {    	non-compiled	[CE]  orphaned  case	33	None	replace
486	[BUG]  [BUGGY]  if(c  >  0x1f  &&  c  <=  0x7F  &&  Character.isDigit(c))  {  [CE]  orphaned  case  [FE]                  ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  if(c  >  0x1f  &&  c  <=  0x7F  &&  Character.isDigit(c))  {  [BUGGY]    sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	if(c  >  0x1f  &&  c  <=  0x7F  &&  Character.isDigit(c))  {	  if(c    >    0x1f    &&    c    <=    0x7f    &&    Character.isDigit(c))    {    	non-compiled	[CE]  orphaned  case	33	None	replace
487	[BUG]  [BUGGY]  if(c  <  0x1f  ||  c  >  0x7FF)  {  [CE]  orphaned  case  [FE]          ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  if(c  <  0x1f  ||  c  >  0x7FF)  {  [BUGGY]    sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	if(c  <  0x1f  ||  c  >  0x7FF)  {	  if    (c    <    0x1f    ||    c    <=    0x7f)    {    	non-compiled	[CE]  orphaned  case	14	None	replace
488	[BUG]  [BUGGY]  if(c  >  0x1f  &&  c  <=  0x7FF  &&  sb.charAt(c  -  1)!=  '/')  {  [CE]  orphaned  case  [FE]                ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  if(c  >  0x1f  &&  c  <=  0x7FF  &&  sb.charAt(c  -  1)!=  '/')  {  [BUGGY]    sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	if(c  >  0x1f  &&  c  <=  0x7FF  &&  sb.charAt(c  -  1)!=  '/')  {	  if(c    >    0x1f    &&    c    <=    0x7f    &&    sb.charAt(c    -    1)!=    '/')    {    	non-compiled	[CE]  orphaned  case	34	None	replace
489	[BUG]  [BUGGY]  if(c  >  0x1f  &&  c  <=  0x7F  &&  sb.charAt(c  -  1)!=  '/')  {  [CE]  orphaned  case  [FE]                  ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  if(c  >  0x1f  &&  c  <=  0x7F  &&  sb.charAt(c  -  1)!=  '/')  {  [BUGGY]    sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	if(c  >  0x1f  &&  c  <=  0x7F  &&  sb.charAt(c  -  1)!=  '/')  {	  if(c    >    0x1f    &&    c    <=    0x7f    &&    sb.charAt(c    -    1)!=    '/')    {    	non-compiled	[CE]  orphaned  case	34	None	replace
490	[BUG]  [BUGGY]  if(c  >  0x1f  &&  c  <=  0x7f  &&  sb.charAt(0)!=  '/')  {  [CE]  orphaned  case  [FE]                    ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  if(c  >  0x1f  &&  c  <=  0x7f  &&  sb.charAt(0)!=  '/')  {  [BUGGY]    sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	if(c  >  0x1f  &&  c  <=  0x7f  &&  sb.charAt(0)!=  '/')  {	  if(c    >    0x1f    &&    c    <=    0x7f    &&    sb.charAt(c    -    1)!=    '/')    {    	non-compiled	[CE]  orphaned  case	34	None	replace
491	[BUG]  [BUGGY]  if(c  >  0x1f  &&  c  <=  0x7f  &&  c  <  end)  {  [CE]  orphaned  case  [FE]                    ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  if(c  >  0x1f  &&  c  <=  0x7f  &&  c  <  end)  {  [BUGGY]    sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	if(c  >  0x1f  &&  c  <=  0x7f  &&  c  <  end)  {	  if(c    >    0x1f    &&    c    <=    0x7f    &&    c    <    quote)    {    	non-compiled	[CE]  orphaned  case	36	None	replace
492	[BUG]  [BUGGY]  if(c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  else  {  outputCharsetEncoder.canEncode(c);  appendHexJavaScriptRepresentation(sb,  c);  }  [CE]  orphaned  case  [FE]        ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  if(c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  else  {  outputCharsetEncoder.canEncode(c);  appendHexJavaScriptRepresentation(sb,  c);  }  [BUGGY]    if  (c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	if(c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  else  {  outputCharsetEncoder.canEncode(c);  appendHexJavaScriptRepresentation(sb,  c);  }	      c    >    0x1f    &&    c    <=    0x7f)    {    sb.append(c);    	non-compiled	[CE]  orphaned  case	20	None	replace
493	[BUG]  [BUGGY]  if(c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  else  {  FormatUtils.appendPaddedInteger(sb,  c);  }  [CE]  orphaned  case  [FE]          ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  if(c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  else  {  FormatUtils.appendPaddedInteger(sb,  c);  }  [BUGGY]    if  (c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	if(c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  else  {  FormatUtils.appendPaddedInteger(sb,  c);  }	      c    >    0x1f    &&    c    <=    0x7f)    {    sb.append(c);    	non-compiled	[CE]  orphaned  case	20	None	replace
494	[BUG]  [BUGGY]  if(c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  return;  }  [CE]  orphaned  case  [FE]            ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  if(c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  return;  }  [BUGGY]    if  (c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	if(c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  return;  }	      c    >    0x1f    &&    c    <=    0x7f)    {    sb.append(c);    	non-compiled	[CE]  orphaned  case	20	None	replace
495	[BUG]  [BUGGY]  if(c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  [CE]  orphaned  case  [FE]              ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  if(c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  [BUGGY]    if  (c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	if(c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);	      c    >    0x1f    &&    c    <=    0x7f)    {    sb.append(c);    	non-compiled	[CE]  orphaned  case	20	None	replace
496	[BUG]  [BUGGY]  if(c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  null);  }  [CE]  orphaned  case  [FE]                ComparisonFailure    [CONTEXT]    if  (outputCharsetEncoder.canEncode(c))  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  c);  }  }  else  {        [BUGGY]  if(c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  null);  }  [BUGGY]    if  (c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  else  {    appendHexJavaScriptRepresentation(sb,  c);  }  }  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2672612419124244	1045	1045	1	replace	if(c  >  0x1f  &&  c  <=  0x7f)  {  sb.append(c);  }  else  {  appendHexJavaScriptRepresentation(sb,  null);  }	      c    >    0x1f    &&    c    <=    0x7f)    {    sb.append(c);    	non-compiled	[CE]  orphaned  case	20	None	replace
