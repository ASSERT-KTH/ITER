bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(c  ==  '0'  ||  c  ==  'n'  ||  c!=  't')  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);    [BUGGY]  if(c  ==  '0'  ||  c  ==  'n'  ||  c!=  't')  {  [BUGGY]    case  '\0':  sb.append(   "\\0   ");  break;  case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	997	997	1	replace	if(c  ==  '0'  ||  c  ==  'n'  ||  c!=  't')  {	  if(c    ==    '0'    ||    c    ==    'n'    ||    c    ==    't')    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
2	[BUG]  [BUGGY]  if(c  >=  '0'  ||  c  ==  'n'  ||  c  ==  't')  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);    [BUGGY]  if(c  >=  '0'  ||  c  ==  'n'  ||  c  ==  't')  {  [BUGGY]    case  '\0':  sb.append(   "\\0   ");  break;  case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	997	997	1	replace	if(c  >=  '0'  ||  c  ==  'n'  ||  c  ==  't')  {	  if(c    ==    '0'    ||    c    ==    'n'    ||    c    ==    't')    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
3	[BUG]  [BUGGY]  if(c  ==  '0'  &&  c  ==  'n'  &&  c  ==  't')  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);    [BUGGY]  if(c  ==  '0'  &&  c  ==  'n'  &&  c  ==  't')  {  [BUGGY]    case  '\0':  sb.append(   "\\0   ");  break;  case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	997	997	1	replace	if(c  ==  '0'  &&  c  ==  'n'  &&  c  ==  't')  {	  if(c    ==    '0'    ||    c    ==    'n'    ||    c    ==    't')    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
4	[BUG]  [BUGGY]  if(c  <  '0'  ||  c  ==  'n'  ||  c  ==  't')  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);    [BUGGY]  if(c  <  '0'  ||  c  ==  'n'  ||  c  ==  't')  {  [BUGGY]    case  '\0':  sb.append(   "\\0   ");  break;  case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	997	997	1	replace	if(c  <  '0'  ||  c  ==  'n'  ||  c  ==  't')  {	  if(c    ==    '0'    ||    c    ==    'n'    ||    c    ==    't')    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
5	[BUG]  [BUGGY]  if(c  ==  '0'  ||  c  ==  'n'  ||  c  ==  '9')  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);    [BUGGY]  if(c  ==  '0'  ||  c  ==  'n'  ||  c  ==  '9')  {  [BUGGY]    case  '\0':  sb.append(   "\\0   ");  break;  case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	997	997	1	replace	if(c  ==  '0'  ||  c  ==  'n'  ||  c  ==  '9')  {	  if(c    ==    '0'    ||    c    ==    'n'    ||    c    ==    'n')    {    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
6	[BUG]  [BUGGY]  if(c  ==  '0'  ||  c  ==  'n'  ||  c  ==  'A')  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);    [BUGGY]  if(c  ==  '0'  ||  c  ==  'n'  ||  c  ==  'A')  {  [BUGGY]    case  '\0':  sb.append(   "\\0   ");  break;  case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	997	997	1	replace	if(c  ==  '0'  ||  c  ==  'n'  ||  c  ==  'A')  {	  if(c    ==    '0'    ||    c    ==    'n'    ||    c    ==    'n')    {    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
7	[BUG]  [BUGGY]  if(c  ==  '0'  ||  c  ==  'n'  ||  c  ==  '0')  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);    [BUGGY]  if(c  ==  '0'  ||  c  ==  'n'  ||  c  ==  '0')  {  [BUGGY]    case  '\0':  sb.append(   "\\0   ");  break;  case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	997	997	1	replace	if(c  ==  '0'  ||  c  ==  'n'  ||  c  ==  '0')  {	  if(c    ==    '0'    ||    c    ==    'n'    ||    c    ==    'n')    {    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
8	[BUG]  [BUGGY]  if(c  ==  '0'  ||  c  ==  'n'  ||  c  ==  'a')  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);    [BUGGY]  if(c  ==  '0'  ||  c  ==  'n'  ||  c  ==  'a')  {  [BUGGY]    case  '\0':  sb.append(   "\\0   ");  break;  case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	997	997	1	replace	if(c  ==  '0'  ||  c  ==  'n'  ||  c  ==  'a')  {	  if(c    ==    '0'    ||    c    ==    'n'    ||    c    ==    'n')    {    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
9	[BUG]  [BUGGY]  if(c  ==  '0'  ||  c  ==  'n'  ||  c  ==  '-')  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);    [BUGGY]  if(c  ==  '0'  ||  c  ==  'n'  ||  c  ==  '-')  {  [BUGGY]    case  '\0':  sb.append(   "\\0   ");  break;  case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	997	997	1	replace	if(c  ==  '0'  ||  c  ==  'n'  ||  c  ==  '-')  {	  if(c    ==    '0'    ||    c    ==    'n'    ||    c    ==    'n')    {    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
10	[BUG]  [BUGGY]  if(c  ==  '0'  ||  c  ==  'n'  ||  c  ==  '1')  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);    [BUGGY]  if(c  ==  '0'  ||  c  ==  'n'  ||  c  ==  '1')  {  [BUGGY]    case  '\0':  sb.append(   "\\0   ");  break;  case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	997	997	1	replace	if(c  ==  '0'  ||  c  ==  'n'  ||  c  ==  '1')  {	  if(c    ==    '0'    ||    c    ==    'n'    ||    c    ==    'n')    {    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
11	[BUG]  [BUGGY]  if(c  ==  '0'  ||  c!=  'n'  ||  c  ==  't')  {  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);    [BUGGY]  if(c  ==  '0'  ||  c!=  'n'  ||  c  ==  't')  {  [BUGGY]    case  '\0':  sb.append(   "\\0   ");  break;  case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	997	997	1	replace	if(c  ==  '0'  ||  c!=  'n'  ||  c  ==  't')  {	  if(c!=    '0'    ||    c    ==    'n'    ||    c    ==    't')    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
12	[BUG]  [BUGGY]  if(c!=  '0'  ||  c  ==  'n'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  't')  {  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);    [BUGGY]  if(c!=  '0'  ||  c  ==  'n'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  't')  {  [BUGGY]    case  '\0':  sb.append(   "\\0   ");  break;  case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	997	997	1	replace	if(c!=  '0'  ||  c  ==  'n'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  't')  {	  if(c    ==    '0'    ||    c    ==    'n'    ||    c    ==    'n'    ||    c    ==    'r'    ||    c    ==    't')    {    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
13	[BUG]  [BUGGY]  if(c  >=  '0'  ||  c  ==  'n'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  't')  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);    [BUGGY]  if(c  >=  '0'  ||  c  ==  'n'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  't')  {  [BUGGY]    case  '\0':  sb.append(   "\\0   ");  break;  case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	997	997	1	replace	if(c  >=  '0'  ||  c  ==  'n'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  't')  {	  if(c    ==    '0'    ||    c    ==    'n'    ||    c    ==    'n'    ||    c    ==    'r'    ||    c    ==    't')    {    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
14	[BUG]  [BUGGY]  if(c  <  '0'  ||  c  ==  'n'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  't')  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);    [BUGGY]  if(c  <  '0'  ||  c  ==  'n'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  't')  {  [BUGGY]    case  '\0':  sb.append(   "\\0   ");  break;  case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	997	997	1	replace	if(c  <  '0'  ||  c  ==  'n'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  't')  {	  if(c    ==    '0'    ||    c    ==    'n'    ||    c    ==    'n'    ||    c    ==    'r'    ||    c    ==    't')    {    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
15	[BUG]  [BUGGY]  if(c  ==  '0'  ||  c  ==  'n'  ||  c  ==  'n'  ||  c!=  'r'  ||  c  ==  't')  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);    [BUGGY]  if(c  ==  '0'  ||  c  ==  'n'  ||  c  ==  'n'  ||  c!=  'r'  ||  c  ==  't')  {  [BUGGY]    case  '\0':  sb.append(   "\\0   ");  break;  case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	997	997	1	replace	if(c  ==  '0'  ||  c  ==  'n'  ||  c  ==  'n'  ||  c!=  'r'  ||  c  ==  't')  {	  if(c    ==    '0'    ||    c    ==    'n'    ||    c    ==    'n'    ||    c    ==    'r'    ||    c    ==    't')    {    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
16	[BUG]  [BUGGY]  if(c  ==  '0'  ||  c  ==  'n'  ||  c!=  'n'  ||  c  ==  'r'  ||  c  ==  't')  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);    [BUGGY]  if(c  ==  '0'  ||  c  ==  'n'  ||  c!=  'n'  ||  c  ==  'r'  ||  c  ==  't')  {  [BUGGY]    case  '\0':  sb.append(   "\\0   ");  break;  case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	997	997	1	replace	if(c  ==  '0'  ||  c  ==  'n'  ||  c!=  'n'  ||  c  ==  'r'  ||  c  ==  't')  {	  if(c    ==    '0'    ||    c    ==    'n'    ||    c    ==    'n'    ||    c    ==    'r'    ||    c    ==    't')    {    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
17	[BUG]  [BUGGY]  if(c  ==  '0'  ||  c  ==  'n'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c!=  't')  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);    [BUGGY]  if(c  ==  '0'  ||  c  ==  'n'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c!=  't')  {  [BUGGY]    case  '\0':  sb.append(   "\\0   ");  break;  case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	997	997	1	replace	if(c  ==  '0'  ||  c  ==  'n'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c!=  't')  {	  if(c    ==    '0'    ||    c    ==    'n'    ||    c    ==    'n'    ||    c    ==    'r'    ||    c    ==    't')    {    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
18	[BUG]  [BUGGY]  if(c  >=  '0'  ||  c  ==  'n'  ||  c  ==  'r')  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);    [BUGGY]  if(c  >=  '0'  ||  c  ==  'n'  ||  c  ==  'r')  {  [BUGGY]    case  '\0':  sb.append(   "\\0   ");  break;  case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	997	997	1	replace	if(c  >=  '0'  ||  c  ==  'n'  ||  c  ==  'r')  {	  if(c!=    '0'    ||    c    ==    'n'    ||    c    ==    'r')    {    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
19	[BUG]  [BUGGY]  if(c  ==  '0'  ||  c  ==  'n'  ||  c!=  'r')  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);    [BUGGY]  if(c  ==  '0'  ||  c  ==  'n'  ||  c!=  'r')  {  [BUGGY]    case  '\0':  sb.append(   "\\0   ");  break;  case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	997	997	1	replace	if(c  ==  '0'  ||  c  ==  'n'  ||  c!=  'r')  {	  if(c!=    '0'    ||    c    ==    'n'    ||    c    ==    'r')    {    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
20	[BUG]  [BUGGY]  if(c  ==  '0'  ||  c!=  'n'  ||  c  ==  'r')  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);    [BUGGY]  if(c  ==  '0'  ||  c!=  'n'  ||  c  ==  'r')  {  [BUGGY]    case  '\0':  sb.append(   "\\0   ");  break;  case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	997	997	1	replace	if(c  ==  '0'  ||  c!=  'n'  ||  c  ==  'r')  {	  if(c!=    '0'    ||    c    ==    'n'    ||    c    ==    'r')    {    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
21	[BUG]  [BUGGY]  if(c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);    [BUGGY]  if(c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {  [BUGGY]    case  '\0':  sb.append(   "\\0   ");  break;  case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	997	997	1	replace	if(c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {	  if(c!=    'n'    ||    c    ==    'r'    ||    c    ==    'n'    ||    c    ==    't')    {    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
22	[BUG]  [BUGGY]  if(c  ==  '0'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);    [BUGGY]  if(c  ==  '0'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {  [BUGGY]    case  '\0':  sb.append(   "\\0   ");  break;  case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	997	997	1	replace	if(c  ==  '0'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {	  if(c!=    'n'    ||    c    ==    'r'    ||    c    ==    'n'    ||    c    ==    't')    {    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
23	[BUG]  [BUGGY]  if(c!=  '0'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);    [BUGGY]  if(c!=  '0'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {  [BUGGY]    case  '\0':  sb.append(   "\\0   ");  break;  case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	997	997	1	replace	if(c!=  '0'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {	  if(c!=    'n'    ||    c    ==    'r'    ||    c    ==    'n'    ||    c    ==    't')    {    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
24	[BUG]  [BUGGY]  if(c  >=  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);    [BUGGY]  if(c  >=  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {  [BUGGY]    case  '\0':  sb.append(   "\\0   ");  break;  case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	997	997	1	replace	if(c  >=  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {	  if(c!=    'n'    ||    c    ==    'r'    ||    c    ==    'n'    ||    c    ==    't')    {    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
25	[BUG]  [BUGGY]  if(c!=  '0'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);    [BUGGY]  if(c!=  '0'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {  [BUGGY]    case  '\0':  sb.append(   "\\0   ");  break;  case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	997	997	1	replace	if(c!=  '0'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {	  if(c    ==    '0'    ||    c    ==    'n'    ||    c    ==    'r'    ||    c    ==    'n'    ||    c    ==    't')    {    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
26	[BUG]  [BUGGY]  if(c  ==  '0'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c!=  'n'  ||  c  ==  't')  {  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);    [BUGGY]  if(c  ==  '0'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c!=  'n'  ||  c  ==  't')  {  [BUGGY]    case  '\0':  sb.append(   "\\0   ");  break;  case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	997	997	1	replace	if(c  ==  '0'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c!=  'n'  ||  c  ==  't')  {	  if(c    ==    '0'    ||    c    ==    'n'    ||    c    ==    'r'    ||    c    ==    'n'    ||    c    ==    't')    {    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
27	[BUG]  [BUGGY]  if(c  ==  '0'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c!=  't')  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);    [BUGGY]  if(c  ==  '0'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c!=  't')  {  [BUGGY]    case  '\0':  sb.append(   "\\0   ");  break;  case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	997	997	1	replace	if(c  ==  '0'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c!=  't')  {	  if(c    ==    '0'    ||    c    ==    'n'    ||    c    ==    'r'    ||    c    ==    'n'    ||    c    ==    't')    {    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
28	[BUG]  [BUGGY]  if(c  >=  '0'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);    [BUGGY]  if(c  >=  '0'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {  [BUGGY]    case  '\0':  sb.append(   "\\0   ");  break;  case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	997	997	1	replace	if(c  >=  '0'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {	  if(c    ==    '0'    ||    c    ==    'n'    ||    c    ==    'r'    ||    c    ==    'n'    ||    c    ==    't')    {    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
29	[BUG]  [BUGGY]  if(c  <  '0'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);    [BUGGY]  if(c  <  '0'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {  [BUGGY]    case  '\0':  sb.append(   "\\0   ");  break;  case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	997	997	1	replace	if(c  <  '0'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {	  if(c    ==    '0'    ||    c    ==    'n'    ||    c    ==    'r'    ||    c    ==    'n'    ||    c    ==    't')    {    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
30	[BUG]  [BUGGY]  if(c  ==  '0'  ||  c  ==  'n'  ||  c!=  'r'  ||  c  ==  'n'  ||  c  ==  't')  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);    [BUGGY]  if(c  ==  '0'  ||  c  ==  'n'  ||  c!=  'r'  ||  c  ==  'n'  ||  c  ==  't')  {  [BUGGY]    case  '\0':  sb.append(   "\\0   ");  break;  case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	997	997	1	replace	if(c  ==  '0'  ||  c  ==  'n'  ||  c!=  'r'  ||  c  ==  'n'  ||  c  ==  't')  {	  if(c    ==    '0'    ||    c    ==    'n'    ||    c    ==    'r'    ||    c    ==    'n'    ||    c    ==    't')    {    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
31	[BUG]  [BUGGY]  if(c  >=  '0'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  't')  {  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);    [BUGGY]  if(c  >=  '0'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  't')  {  [BUGGY]    case  '\0':  sb.append(   "\\0   ");  break;  case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	997	997	1	replace	if(c  >=  '0'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  't')  {	  if(c!=    '0'    ||    c    ==    'n'    ||    c    ==    'r'    ||    c    ==    't')    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
32	[BUG]  [BUGGY]  if(c  ==  '0'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c!=  't')  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);    [BUGGY]  if(c  ==  '0'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c!=  't')  {  [BUGGY]    case  '\0':  sb.append(   "\\0   ");  break;  case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	997	997	1	replace	if(c  ==  '0'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c!=  't')  {	  if(c!=    '0'    ||    c    ==    'n'    ||    c    ==    'r'    ||    c    ==    't')    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
33	[BUG]  [BUGGY]  if(c  ==  '0'  ||  c  ==  'n'  ||  c!=  'r'  ||  c  ==  't')  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);    [BUGGY]  if(c  ==  '0'  ||  c  ==  'n'  ||  c!=  'r'  ||  c  ==  't')  {  [BUGGY]    case  '\0':  sb.append(   "\\0   ");  break;  case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	997	997	1	replace	if(c  ==  '0'  ||  c  ==  'n'  ||  c!=  'r'  ||  c  ==  't')  {	  if(c!=    '0'    ||    c    ==    'n'    ||    c    ==    'r'    ||    c    ==    't')    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
34	[BUG]  [BUGGY]  if(c  ==  '0'  ||  c!=  'n'  ||  c  ==  'r'  ||  c  ==  't')  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);    [BUGGY]  if(c  ==  '0'  ||  c!=  'n'  ||  c  ==  'r'  ||  c  ==  't')  {  [BUGGY]    case  '\0':  sb.append(   "\\0   ");  break;  case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	997	997	1	replace	if(c  ==  '0'  ||  c!=  'n'  ||  c  ==  'r'  ||  c  ==  't')  {	  if(c!=    '0'    ||    c    ==    'n'    ||    c    ==    'r'    ||    c    ==    't')    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
35	[BUG]  [BUGGY]  if(c  ==  '0'  &&  c  ==  'n'  ||  c  ==  'r')  {  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);    [BUGGY]  if(c  ==  '0'  &&  c  ==  'n'  ||  c  ==  'r')  {  [BUGGY]    case  '\0':  sb.append(   "\\0   ");  break;  case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	997	997	1	replace	if(c  ==  '0'  &&  c  ==  'n'  ||  c  ==  'r')  {	  if(c    ==    '0'    ||    c    ==    'n'    ||    c    ==    'r')    {    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
36	[BUG]  [BUGGY]  if(c  <  '0'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  't')  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);    [BUGGY]  if(c  <  '0'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  't')  {  [BUGGY]    case  '\0':  sb.append(   "\\0   ");  break;  case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	997	997	1	replace	if(c  <  '0'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  't')  {	  if(c    ==    '0'    ||    c    ==    'n'    ||    c    ==    'r'    ||    c    ==    't')    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
37	[BUG]  [BUGGY]  CharsetEncoder  cc  =  s.charAt(i);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);    [BUGGY]  CharsetEncoder  cc  =  s.charAt(i);  [BUGGY]    case  '\0':  sb.append(   "\\0   ");  break;  case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	997	997	1	replace	CharsetEncoder  cc  =  s.charAt(i);	  CharsetEncoder    cc    =    outputCharsetEncoder.charAt(i);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
38	[BUG]  [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.charAt(i  +  1);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);    [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.charAt(i  +  1);  [BUGGY]    case  '\0':  sb.append(   "\\0   ");  break;  case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	997	997	1	replace	CharsetEncoder  cc  =  outputCharsetEncoder.charAt(i  +  1);	  CharsetEncoder    cc    =    outputCharsetEncoder.charAt(i);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
39	[BUG]  [BUGGY]  CharsetEncoder  cc  =  c.charAt(i);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);    [BUGGY]  CharsetEncoder  cc  =  c.charAt(i);  [BUGGY]    case  '\0':  sb.append(   "\\0   ");  break;  case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	997	997	1	replace	CharsetEncoder  cc  =  c.charAt(i);	  CharsetEncoder    cc    =    outputCharsetEncoder.charAt(i);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
40	[BUG]  [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.charAt(i,  c);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);    [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.charAt(i,  c);  [BUGGY]    case  '\0':  sb.append(   "\\0   ");  break;  case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	997	997	1	replace	CharsetEncoder  cc  =  outputCharsetEncoder.charAt(i,  c);	  CharsetEncoder    cc    =    outputCharsetEncoder.charAt(i);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
41	[BUG]  [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.charAt(i++);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);    [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.charAt(i++);  [BUGGY]    case  '\0':  sb.append(   "\\0   ");  break;  case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	997	997	1	replace	CharsetEncoder  cc  =  outputCharsetEncoder.charAt(i++);	  CharsetEncoder    cc    =    outputCharsetEncoder.charAt(i);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
42	[BUG]  [BUGGY]  CharsetEncoder  cc  =  chars.charAt(i);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);    [BUGGY]  CharsetEncoder  cc  =  chars.charAt(i);  [BUGGY]    case  '\0':  sb.append(   "\\0   ");  break;  case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	997	997	1	replace	CharsetEncoder  cc  =  chars.charAt(i);	  CharsetEncoder    cc    =    outputCharsetEncoder.charAt(i);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
43	[BUG]  [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.encode(c,  i);  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);    [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.encode(c,  i);  [BUGGY]    case  '\0':  sb.append(   "\\0   ");  break;  case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	997	997	1	replace	CharsetEncoder  cc  =  outputCharsetEncoder.encode(c,  i);	  CharsetEncoder    cc    =    outputCharsetEncoder.encode(c);    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
44	[BUG]  [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.encode(c,  0);  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);    [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.encode(c,  0);  [BUGGY]    case  '\0':  sb.append(   "\\0   ");  break;  case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	997	997	1	replace	CharsetEncoder  cc  =  outputCharsetEncoder.encode(c,  0);	  CharsetEncoder    cc    =    outputCharsetEncoder.encode(c);    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
45	[BUG]  [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.encode(c,  quote);  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);    [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.encode(c,  quote);  [BUGGY]    case  '\0':  sb.append(   "\\0   ");  break;  case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	997	997	1	replace	CharsetEncoder  cc  =  outputCharsetEncoder.encode(c,  quote);	  CharsetEncoder    cc    =    outputCharsetEncoder.encode(c);    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
46	[BUG]  [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.encode(c,  this);  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);    [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.encode(c,  this);  [BUGGY]    case  '\0':  sb.append(   "\\0   ");  break;  case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	997	997	1	replace	CharsetEncoder  cc  =  outputCharsetEncoder.encode(c,  this);	  CharsetEncoder    cc    =    outputCharsetEncoder.encode(c);    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
47	[BUG]  [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.encode(c,  sb);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);    [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.encode(c,  sb);  [BUGGY]    case  '\0':  sb.append(   "\\0   ");  break;  case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	997	997	1	replace	CharsetEncoder  cc  =  outputCharsetEncoder.encode(c,  sb);	  CharsetEncoder    cc    =    outputCharsetEncoder.encode(c);    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
48	[BUG]  [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.encode(c,  context);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);    [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.encode(c,  context);  [BUGGY]    case  '\0':  sb.append(   "\\0   ");  break;  case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	997	997	1	replace	CharsetEncoder  cc  =  outputCharsetEncoder.encode(c,  context);	  CharsetEncoder    cc    =    outputCharsetEncoder.encode(c);    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
49	[BUG]  [BUGGY]  sb.append(c);  break;  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);    [BUGGY]  sb.append(c);  break;  [BUGGY]    case  '\0':  sb.append(   "\\0   ");  break;  case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	997	997	1	replace	sb.append(c);  break;	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
50	[BUG]  [BUGGY]  sb.append(c);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);    [BUGGY]  sb.append(c);  [BUGGY]    case  '\0':  sb.append(   "\\0   ");  break;  case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	997	997	1	replace	sb.append(c);	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
51	[BUG]  [BUGGY]  sb.append(c);  return  sb.toString();  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);    [BUGGY]  sb.append(c);  return  sb.toString();  [BUGGY]    case  '\0':  sb.append(   "\\0   ");  break;  case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	997	997	1	replace	sb.append(c);  return  sb.toString();	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
52	[BUG]  [BUGGY]  sb.append('');  break;  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);    [BUGGY]  sb.append('');  break;  [BUGGY]    case  '\0':  sb.append(   "\\0   ");  break;  case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	997	997	1	replace	sb.append('');  break;	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
53	[BUG]  [BUGGY]  sb.append(c);  case  'n':  sb.append( "n ");  break;  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);    [BUGGY]  sb.append(c);  case  'n':  sb.append( "n ");  break;  [BUGGY]    case  '\0':  sb.append(   "\\0   ");  break;  case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	997	997	1	replace	sb.append(c);  case  'n':  sb.append( "n ");  break;	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
54	[BUG]  [BUGGY]  sb.append(c);  case  '':  sb.append('');  break;  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);    [BUGGY]  sb.append(c);  case  '':  sb.append('');  break;  [BUGGY]    case  '\0':  sb.append(   "\\0   ");  break;  case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	997	997	1	replace	sb.append(c);  case  '':  sb.append('');  break;	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
55	[BUG]  [BUGGY]  sb.append(c);  case  'n':  sb.append( "t ");  break;  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);    [BUGGY]  sb.append(c);  case  'n':  sb.append( "t ");  break;  [BUGGY]    case  '\0':  sb.append(   "\\0   ");  break;  case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	997	997	1	replace	sb.append(c);  case  'n':  sb.append( "t ");  break;	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
56	[BUG]  [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.charAt(i  +  2);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);    [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.charAt(i  +  2);  [BUGGY]    case  '\0':  sb.append(   "\\0   ");  break;  case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	997	997	1	replace	CharsetEncoder  cc  =  outputCharsetEncoder.charAt(i  +  2);	  CharsetEncoder    cc    =    outputCharsetEncoder.charAt(i);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
57	[BUG]  [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.charAt(i  +  1,  c);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);    [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.charAt(i  +  1,  c);  [BUGGY]    case  '\0':  sb.append(   "\\0   ");  break;  case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	997	997	1	replace	CharsetEncoder  cc  =  outputCharsetEncoder.charAt(i  +  1,  c);	  CharsetEncoder    cc    =    outputCharsetEncoder.charAt(i);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
58	[BUG]  [BUGGY]  if(c!=  '0'  &&  c  <=  'n'  ||  c  ==  'r')  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);    [BUGGY]  if(c!=  '0'  &&  c  <=  'n'  ||  c  ==  'r')  {  [BUGGY]    case  '\0':  sb.append(   "\\0   ");  break;  case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	997	997	1	replace	if(c!=  '0'  &&  c  <=  'n'  ||  c  ==  'r')  {	  if(c!=    '0'    ||    c    ==    'n'    ||    c    ==    'r')    {    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
59	[BUG]  [BUGGY]  if(c!=  '0'  &&  c  <=  'n'  ||  c  >=  'r')  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);    [BUGGY]  if(c!=  '0'  &&  c  <=  'n'  ||  c  >=  'r')  {  [BUGGY]    case  '\0':  sb.append(   "\\0   ");  break;  case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	997	997	1	replace	if(c!=  '0'  &&  c  <=  'n'  ||  c  >=  'r')  {	  if(c!=    '0'    ||    c    ==    'n'    ||    c    ==    'r')    {    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
60	[BUG]  [BUGGY]  if(c  <  '0'  ||  c  >  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);    [BUGGY]  if(c  <  '0'  ||  c  >  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {  [BUGGY]    case  '\0':  sb.append(   "\\0   ");  break;  case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	997	997	1	replace	if(c  <  '0'  ||  c  >  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {	  if(c    ==    '0'    ||    c    ==    'n'    ||    c    ==    'r'    ||    c    ==    'n'    ||    c    ==    't')    {    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
61	[BUG]  [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.encode(c,  backslashEscape);  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);    [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.encode(c,  backslashEscape);  [BUGGY]    case  '\0':  sb.append(   "\\0   ");  break;  case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	997	997	1	replace	CharsetEncoder  cc  =  outputCharsetEncoder.encode(c,  backslashEscape);	  CharsetEncoder    cc    =    outputCharsetEncoder.encode(c);    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
62	[BUG]  [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.encode(c,  i  +  1);  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);    [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.encode(c,  i  +  1);  [BUGGY]    case  '\0':  sb.append(   "\\0   ");  break;  case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	997	997	1	replace	CharsetEncoder  cc  =  outputCharsetEncoder.encode(c,  i  +  1);	  CharsetEncoder    cc    =    outputCharsetEncoder.encode(c);    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
63	[BUG]  [BUGGY]  if(c!=  '0'  &&  c  <=  'n'  ||  c  >=  't')  {  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);    [BUGGY]  if(c!=  '0'  &&  c  <=  'n'  ||  c  >=  't')  {  [BUGGY]    case  '\0':  sb.append(   "\\0   ");  break;  case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	997	997	1	replace	if(c!=  '0'  &&  c  <=  'n'  ||  c  >=  't')  {	  if(c!=    '0'    ||    c    ==    'n'    ||    c    ==    't')    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
64	[BUG]  [BUGGY]  if(c!=  '0'  &&  c  <=  'n'  ||  c  ==  't')  {  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);    [BUGGY]  if(c!=  '0'  &&  c  <=  'n'  ||  c  ==  't')  {  [BUGGY]    case  '\0':  sb.append(   "\\0   ");  break;  case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	997	997	1	replace	if(c!=  '0'  &&  c  <=  'n'  ||  c  ==  't')  {	  if(c!=    '0'    ||    c    ==    'n'    ||    c    ==    't')    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
65	[BUG]  [BUGGY]  case  'n':  sb.append(c);  break;  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);    [BUGGY]  case  'n':  sb.append(c);  break;  [BUGGY]    case  '\0':  sb.append(   "\\0   ");  break;  case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	997	997	1	replace	case  'n':  sb.append(c);  break;	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
66	[BUG]  [BUGGY]  case  '0':  sb.append(c);  break;  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);    [BUGGY]  case  '0':  sb.append(c);  break;  [BUGGY]    case  '\0':  sb.append(   "\\0   ");  break;  case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	997	997	1	replace	case  '0':  sb.append(c);  break;	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
67	[BUG]  [BUGGY]  case  '0':  sb.append(c);  break;case  'n':  sb.append( "n ");  break;  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);    [BUGGY]  case  '0':  sb.append(c);  break;case  'n':  sb.append( "n ");  break;  [BUGGY]    case  '\0':  sb.append(   "\\0   ");  break;  case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	997	997	1	replace	case  '0':  sb.append(c);  break;case  'n':  sb.append( "n ");  break;	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
68	[BUG]  [BUGGY]  case  '0':  sb.append( "0 ");  break;case  'n':  sb.append(c);  break;  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);    [BUGGY]  case  '0':  sb.append( "0 ");  break;case  'n':  sb.append(c);  break;  [BUGGY]    case  '\0':  sb.append(   "\\0   ");  break;  case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	997	997	1	replace	case  '0':  sb.append( "0 ");  break;case  'n':  sb.append(c);  break;	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
69	[BUG]  [BUGGY]  case  '0':  sb.append( "0 ");  break;  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);    [BUGGY]  case  '0':  sb.append( "0 ");  break;  [BUGGY]    case  '\0':  sb.append(   "\\0   ");  break;  case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	997	997	1	replace	case  '0':  sb.append( "0 ");  break;	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
70	[BUG]  [BUGGY]  case  '0':  sb.append(c);  break;case  'n':  sb.append( "t ");  break;  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);    [BUGGY]  case  '0':  sb.append(c);  break;case  'n':  sb.append( "t ");  break;  [BUGGY]    case  '\0':  sb.append(   "\\0   ");  break;  case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	997	997	1	replace	case  '0':  sb.append(c);  break;case  'n':  sb.append( "t ");  break;	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
71	[BUG]  [BUGGY]  if(c  ==  '0'  ||  c  ==  'r'  ||  c  ==  't')  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);    [BUGGY]  if(c  ==  '0'  ||  c  ==  'r'  ||  c  ==  't')  {  [BUGGY]    case  '\0':  sb.append(   "\\0   ");  break;  case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	997	997	1	replace	if(c  ==  '0'  ||  c  ==  'r'  ||  c  ==  't')  {	  if(c    ==    '0'    ||    c    ==    'n'    ||    c    ==    'r'    ||    c    ==    't')    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
72	[BUG]  [BUGGY]  if(c  <  '0'  ||  c  >  'n'  ||  c  ==  'r'  ||  c  ==  't')  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);    [BUGGY]  if(c  <  '0'  ||  c  >  'n'  ||  c  ==  'r'  ||  c  ==  't')  {  [BUGGY]    case  '\0':  sb.append(   "\\0   ");  break;  case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	997	997	1	replace	if(c  <  '0'  ||  c  >  'n'  ||  c  ==  'r'  ||  c  ==  't')  {	  if(c    ==    '0'    ||    c    ==    'n'    ||    c    ==    'r'    ||    c    ==    't')    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
73	[BUG]  [BUGGY]  if(c  <  '0'  ||  c  >  'n'  ||  c  ==  't')  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);    [BUGGY]  if(c  <  '0'  ||  c  >  'n'  ||  c  ==  't')  {  [BUGGY]    case  '\0':  sb.append(   "\\0   ");  break;  case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	997	997	1	replace	if(c  <  '0'  ||  c  >  'n'  ||  c  ==  't')  {	  if(c    ==    '0'    ||    c    ==    'n'    ||    c    ==    't')    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
74	[BUG]  [BUGGY]  if(c  ==  '0'  ||  c  ==  '9'  ||  c  ==  'n'  ||  c  ==  't')  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);    [BUGGY]  if(c  ==  '0'  ||  c  ==  '9'  ||  c  ==  'n'  ||  c  ==  't')  {  [BUGGY]    case  '\0':  sb.append(   "\\0   ");  break;  case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	997	997	1	replace	if(c  ==  '0'  ||  c  ==  '9'  ||  c  ==  'n'  ||  c  ==  't')  {	  if(c    ==    '0'    ||    c    ==    'n'    ||    c    ==    't')    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
75	[BUG]  [BUGGY]  if(c!=  '0'  &&  c  <=  'n'  ||  c  ==  'r'  ||  c  ==  't')  {  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);    [BUGGY]  if(c!=  '0'  &&  c  <=  'n'  ||  c  ==  'r'  ||  c  ==  't')  {  [BUGGY]    case  '\0':  sb.append(   "\\0   ");  break;  case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	997	997	1	replace	if(c!=  '0'  &&  c  <=  'n'  ||  c  ==  'r'  ||  c  ==  't')  {	  if(c!=    '0'    ||    c    ==    'n'    ||    c    ==    'r'    ||    c    ==    't')    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
76	[BUG]  [BUGGY]  if(c!=  '0'  &&  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  't')  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);    [BUGGY]  if(c!=  '0'  &&  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  't')  {  [BUGGY]    case  '\0':  sb.append(   "\\0   ");  break;  case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	997	997	1	replace	if(c!=  '0'  &&  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  't')  {	  if(c!=    '0'    ||    c    ==    'n'    ||    c    ==    'r'    ||    c    ==    't')    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
77	[BUG]  [BUGGY]  if(c  <  '0'  ||  c  >  'n'  ||  c  ==  'r')  {  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);    [BUGGY]  if(c  <  '0'  ||  c  >  'n'  ||  c  ==  'r')  {  [BUGGY]    case  '\0':  sb.append(   "\\0   ");  break;  case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	997	997	1	replace	if(c  <  '0'  ||  c  >  'n'  ||  c  ==  'r')  {	  if(c    ==    '0'    ||    c    ==    'n'    ||    c    ==    'r')    {    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
78	[BUG]  [BUGGY]  if(c  ==  '0'  ||  c  ==  'r'  ||  c  ==  '0'  ||  c  ==  'n'  ||  c  ==  'r')  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);    [BUGGY]  if(c  ==  '0'  ||  c  ==  'r'  ||  c  ==  '0'  ||  c  ==  'n'  ||  c  ==  'r')  {  [BUGGY]    case  '\0':  sb.append(   "\\0   ");  break;  case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	997	997	1	replace	if(c  ==  '0'  ||  c  ==  'r'  ||  c  ==  '0'  ||  c  ==  'n'  ||  c  ==  'r')  {	  if(c    ==    '0'    ||    c    ==    'n'    ||    c    ==    'r')    {    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
79	[BUG]  [BUGGY]  if(c  ==  '0'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r')  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);    [BUGGY]  if(c  ==  '0'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r')  {  [BUGGY]    case  '\0':  sb.append(   "\\0   ");  break;  case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	997	997	1	replace	if(c  ==  '0'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r')  {	  if(c    ==    '0'    ||    c    ==    'n'    ||    c    ==    'r')    {    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
80	[BUG]  [BUGGY]  if(c  ==  '0'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  't')  {  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);    [BUGGY]  if(c  ==  '0'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  't')  {  [BUGGY]    case  '\0':  sb.append(   "\\0   ");  break;  case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	997	997	1	replace	if(c  ==  '0'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  't')  {	  if(c    ==    '0'    ||    c    ==    'n'    ||    c    ==    'n'    ||    c    ==    'r'    ||    c    ==    't')    {    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
81	[BUG]  [BUGGY]  if(c  <  '0'  ||  c  >=  'n'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  't')  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);    [BUGGY]  if(c  <  '0'  ||  c  >=  'n'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  't')  {  [BUGGY]    case  '\0':  sb.append(   "\\0   ");  break;  case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	997	997	1	replace	if(c  <  '0'  ||  c  >=  'n'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  't')  {	  if(c    ==    '0'    ||    c    ==    'n'    ||    c    ==    'n'    ||    c    ==    'r'    ||    c    ==    't')    {    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
82	[BUG]  [BUGGY]  if(c  <  '0'  ||  c  >  'n'  ||  c  ==  'n')  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);    [BUGGY]  if(c  <  '0'  ||  c  >  'n'  ||  c  ==  'n')  {  [BUGGY]    case  '\0':  sb.append(   "\\0   ");  break;  case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	997	997	1	replace	if(c  <  '0'  ||  c  >  'n'  ||  c  ==  'n')  {	  if(c    ==    '0'    ||    c    ==    'n'    ||    c    ==    'n')    {    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
83	[BUG]  [BUGGY]  if(c  ==  '0'  ||  c  ==  'n'  ||  c  ==  '#')  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);    [BUGGY]  if(c  ==  '0'  ||  c  ==  'n'  ||  c  ==  '#')  {  [BUGGY]    case  '\0':  sb.append(   "\\0   ");  break;  case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	997	997	1	replace	if(c  ==  '0'  ||  c  ==  'n'  ||  c  ==  '#')  {	  if(c    ==    '0'    ||    c    ==    'n'    ||    c    ==    'n')    {    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
84	[BUG]  [BUGGY]  if(c  ==  'N'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);    [BUGGY]  if(c  ==  'N'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {  [BUGGY]    case  '\0':  sb.append(   "\\0   ");  break;  case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	997	997	1	replace	if(c  ==  'N'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {	  if(c!=    'n'    ||    c    ==    'r'    ||    c    ==    'n'    ||    c    ==    't')    {    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
85	[BUG]  [BUGGY]  if(c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c!=  't')  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);    [BUGGY]  if(c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c!=  't')  {  [BUGGY]    case  '\0':  sb.append(   "\\0   ");  break;  case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	997	997	1	replace	if(c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c!=  't')  {	  if(c!=    'n'    ||    c    ==    'r'    ||    c    ==    'n'    ||    c    ==    't')    {    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
86	[BUG]  [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.encode(c,  END_SCRIPT);  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);    [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.encode(c,  END_SCRIPT);  [BUGGY]    case  '\0':  sb.append(   "\\0   ");  break;  case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	997	997	1	replace	CharsetEncoder  cc  =  outputCharsetEncoder.encode(c,  END_SCRIPT);	  CharsetEncoder    cc    =    outputCharsetEncoder.encode(c);    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
87	[BUG]  [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.encode(c,  char);  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);    [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.encode(c,  char);  [BUGGY]    case  '\0':  sb.append(   "\\0   ");  break;  case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	997	997	1	replace	CharsetEncoder  cc  =  outputCharsetEncoder.encode(c,  char);	  CharsetEncoder    cc    =    outputCharsetEncoder.encode(c);    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
88	[BUG]  [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.encode(c,  s);  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);    [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.encode(c,  s);  [BUGGY]    case  '\0':  sb.append(   "\\0   ");  break;  case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	997	997	1	replace	CharsetEncoder  cc  =  outputCharsetEncoder.encode(c,  s);	  CharsetEncoder    cc    =    outputCharsetEncoder.encode(c);    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
89	[BUG]  [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.encode(c,  'n');  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);    [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.encode(c,  'n');  [BUGGY]    case  '\0':  sb.append(   "\\0   ");  break;  case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	997	997	1	replace	CharsetEncoder  cc  =  outputCharsetEncoder.encode(c,  'n');	  CharsetEncoder    cc    =    outputCharsetEncoder.encode(c);    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
90	[BUG]  [BUGGY]  if(c  <  '0'  ||  c  >  '9'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  't')  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);    [BUGGY]  if(c  <  '0'  ||  c  >  '9'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  't')  {  [BUGGY]    case  '\0':  sb.append(   "\\0   ");  break;  case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	997	997	1	replace	if(c  <  '0'  ||  c  >  '9'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  't')  {	  if(c    ==    '0'    ||    c    ==    'n'    ||    c    ==    'r'    ||    c    ==    't')    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
91	[BUG]  [BUGGY]  if(c  <  '0'  ||  c  >  '9'  ||  c  ==  'n'  ||  c  ==  'r')  {  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);    [BUGGY]  if(c  <  '0'  ||  c  >  '9'  ||  c  ==  'n'  ||  c  ==  'r')  {  [BUGGY]    case  '\0':  sb.append(   "\\0   ");  break;  case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	997	997	1	replace	if(c  <  '0'  ||  c  >  '9'  ||  c  ==  'n'  ||  c  ==  'r')  {	  if(c    ==    '0'    ||    c    ==    'n'    ||    c    ==    'r')    {    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
92	[BUG]  [BUGGY]  if(c  ==  '0'  &&  c  <=  'n'  ||  c  ==  'r')  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);    [BUGGY]  if(c  ==  '0'  &&  c  <=  'n'  ||  c  ==  'r')  {  [BUGGY]    case  '\0':  sb.append(   "\\0   ");  break;  case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	997	997	1	replace	if(c  ==  '0'  &&  c  <=  'n'  ||  c  ==  'r')  {	  if(c    ==    '0'    ||    c    ==    'n'    ||    c    ==    'r')    {    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
93	[BUG]  [BUGGY]  if(c  ==  '0'  ||  c  ==  't'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);    [BUGGY]  if(c  ==  '0'  ||  c  ==  't'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {  [BUGGY]    case  '\0':  sb.append(   "\\0   ");  break;  case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	997	997	1	replace	if(c  ==  '0'  ||  c  ==  't'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {	  if(c    ==    '0'    ||    c    ==    'n'    ||    c    ==    'r'    ||    c    ==    'n'    ||    c    ==    't')    {    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
94	[BUG]  [BUGGY]  if(c  <  '0'  ||  c  >  '9'  ||  c  ==  'n'  ||  c  ==  't')  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);    [BUGGY]  if(c  <  '0'  ||  c  >  '9'  ||  c  ==  'n'  ||  c  ==  't')  {  [BUGGY]    case  '\0':  sb.append(   "\\0   ");  break;  case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	997	997	1	replace	if(c  <  '0'  ||  c  >  '9'  ||  c  ==  'n'  ||  c  ==  't')  {	  if(c    ==    '0'    ||    c    ==    'n'    ||    c    ==    't')    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
95	[BUG]  [BUGGY]  if(c  ==  '0'  &&  c  ==  'n'  ||  c  ==  't')  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);    [BUGGY]  if(c  ==  '0'  &&  c  ==  'n'  ||  c  ==  't')  {  [BUGGY]    case  '\0':  sb.append(   "\\0   ");  break;  case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	997	997	1	replace	if(c  ==  '0'  &&  c  ==  'n'  ||  c  ==  't')  {	  if(c    ==    '0'    ||    c    ==    'n'    ||    c    ==    't')    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
96	[BUG]  [BUGGY]  if(c  ==  '0'  &&  c  <=  'n'  ||  c  ==  't')  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);    [BUGGY]  if(c  ==  '0'  &&  c  <=  'n'  ||  c  ==  't')  {  [BUGGY]    case  '\0':  sb.append(   "\\0   ");  break;  case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	997	997	1	replace	if(c  ==  '0'  &&  c  <=  'n'  ||  c  ==  't')  {	  if(c    ==    '0'    ||    c    ==    'n'    ||    c    ==    't')    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
97	[BUG]  [BUGGY]  if(c!=  '0'  &&  c  ==  'n'  ||  c  ==  't')  {  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);    [BUGGY]  if(c!=  '0'  &&  c  ==  'n'  ||  c  ==  't')  {  [BUGGY]    case  '\0':  sb.append(   "\\0   ");  break;  case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	997	997	1	replace	if(c!=  '0'  &&  c  ==  'n'  ||  c  ==  't')  {	  if(c!=    '0'    ||    c    ==    'n'    ||    c    ==    't')    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
98	[BUG]  [BUGGY]  if(c!=  '0'  &&  c  <=  'n'  &&  c  <=  't')  {  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);    [BUGGY]  if(c!=  '0'  &&  c  <=  'n'  &&  c  <=  't')  {  [BUGGY]    case  '\0':  sb.append(   "\\0   ");  break;  case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	997	997	1	replace	if(c!=  '0'  &&  c  <=  'n'  &&  c  <=  't')  {	  if(c!=    '0'    ||    c    ==    'n'    ||    c    ==    't')    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
99	[BUG]  [BUGGY]  if(c!=  '0'  &&  c  <=  'n')  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);    [BUGGY]  if(c!=  '0'  &&  c  <=  'n')  {  [BUGGY]    case  '\0':  sb.append(   "\\0   ");  break;  case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	997	997	1	replace	if(c!=  '0'  &&  c  <=  'n')  {	  if(c!=    '0'    ||    c    ==    'n'    ||    c    ==    't')    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
100	[BUG]  [BUGGY]  if(c  <  '0'  ||  c  >  '9'  ||  c  ==  'n'  ||  c  ==  'n')  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);    [BUGGY]  if(c  <  '0'  ||  c  >  '9'  ||  c  ==  'n'  ||  c  ==  'n')  {  [BUGGY]    case  '\0':  sb.append(   "\\0   ");  break;  case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	997	997	1	replace	if(c  <  '0'  ||  c  >  '9'  ||  c  ==  'n'  ||  c  ==  'n')  {	  if(c    ==    '0'    ||    c    ==    'n'    ||    c    ==    'n')    {    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
101	[BUG]  [BUGGY]  if(c  <  '0'  ||  c  ==  'n'  ||  c  ==  'n')  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);    [BUGGY]  if(c  <  '0'  ||  c  ==  'n'  ||  c  ==  'n')  {  [BUGGY]    case  '\0':  sb.append(   "\\0   ");  break;  case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	997	997	1	replace	if(c  <  '0'  ||  c  ==  'n'  ||  c  ==  'n')  {	  if(c    ==    '0'    ||    c    ==    'n'    ||    c    ==    'n')    {    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
102	[BUG]  [BUGGY]  if(c  ==  '0'  &&  c  ==  'n'  ||  c  ==  'n')  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);    [BUGGY]  if(c  ==  '0'  &&  c  ==  'n'  ||  c  ==  'n')  {  [BUGGY]    case  '\0':  sb.append(   "\\0   ");  break;  case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	997	997	1	replace	if(c  ==  '0'  &&  c  ==  'n'  ||  c  ==  'n')  {	  if(c    ==    '0'    ||    c    ==    'n'    ||    c    ==    'n')    {    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
103	[BUG]  [BUGGY]  if(c  >=  '0'  ||  c  ==  'n'  ||  c  ==  'n')  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);    [BUGGY]  if(c  >=  '0'  ||  c  ==  'n'  ||  c  ==  'n')  {  [BUGGY]    case  '\0':  sb.append(   "\\0   ");  break;  case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	997	997	1	replace	if(c  >=  '0'  ||  c  ==  'n'  ||  c  ==  'n')  {	  if(c    ==    '0'    ||    c    ==    'n'    ||    c    ==    'n')    {    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
104	[BUG]  [BUGGY]  if(c!=  '0'  ||  c  ==  'n'  ||  c  ==  'n')  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);    [BUGGY]  if(c!=  '0'  ||  c  ==  'n'  ||  c  ==  'n')  {  [BUGGY]    case  '\0':  sb.append(   "\\0   ");  break;  case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	997	997	1	replace	if(c!=  '0'  ||  c  ==  'n'  ||  c  ==  'n')  {	  if(c    ==    '0'    ||    c    ==    'n'    ||    c    ==    'n')    {    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
105	[BUG]  [BUGGY]  if(c!=  '0'  &&  c  ==  'n'  ||  c  ==  'r')  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);    [BUGGY]  if(c!=  '0'  &&  c  ==  'n'  ||  c  ==  'r')  {  [BUGGY]    case  '\0':  sb.append(   "\\0   ");  break;  case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	997	997	1	replace	if(c!=  '0'  &&  c  ==  'n'  ||  c  ==  'r')  {	  if(c!=    '0'    ||    c    ==    'n'    ||    c    ==    'r')    {    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
106	[BUG]  [BUGGY]  if(c!=  '0'  &&  c  <=  'n'  &&  c  <=  'r')  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);    [BUGGY]  if(c!=  '0'  &&  c  <=  'n'  &&  c  <=  'r')  {  [BUGGY]    case  '\0':  sb.append(   "\\0   ");  break;  case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	997	997	1	replace	if(c!=  '0'  &&  c  <=  'n'  &&  c  <=  'r')  {	  if(c!=    '0'    ||    c    ==    'n'    ||    c    ==    'r')    {    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
107	[BUG]  [BUGGY]  if(c  <  '0'  ||  c  >  '9'  ||  c  ==  'n'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  't')  {  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);    [BUGGY]  if(c  <  '0'  ||  c  >  '9'  ||  c  ==  'n'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  't')  {  [BUGGY]    case  '\0':  sb.append(   "\\0   ");  break;  case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	997	997	1	replace	if(c  <  '0'  ||  c  >  '9'  ||  c  ==  'n'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  't')  {	  if(c    ==    '0'    ||    c    ==    'n'    ||    c    ==    'n'    ||    c    ==    'r'    ||    c    ==    't')    {    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
108	[BUG]  [BUGGY]  case  't':  sb.append(c);  break;  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);    [BUGGY]  case  't':  sb.append(c);  break;  [BUGGY]    case  '\0':  sb.append(   "\\0   ");  break;  case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	997	997	1	replace	case  't':  sb.append(c);  break;	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
109	[BUG]  [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.encode(c);  break;  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);    [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.encode(c);  break;  [BUGGY]    case  '\0':  sb.append(   "\\0   ");  break;  case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	997	997	1	replace	CharsetEncoder  cc  =  outputCharsetEncoder.encode(c);  break;	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
110	[BUG]  [BUGGY]  case  'r':  sb.append(c);  break;  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);    [BUGGY]  case  'r':  sb.append(c);  break;  [BUGGY]    case  '\0':  sb.append(   "\\0   ");  break;  case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	997	997	1	replace	case  'r':  sb.append(c);  break;	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
111	[BUG]  [BUGGY]  case  ''':  sb.append(c);  break;  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure    [CONTEXT]    CharsetEncoder  outputCharsetEncoder)  {  StringBuilder  sb  =  new  StringBuilder(s.length()  +  2);  sb.append(quote);  for  (int  i  =  0;  i  <  s.length();  i++)  {  char  c  =  s.charAt(i);    [BUGGY]  case  ''':  sb.append(c);  break;  [BUGGY]    case  '\0':  sb.append(   "\\0   ");  break;  case  '\n':  sb.append(   "\\n   ");  break;  case  '\r':  sb.append(   "\\r   ");  break;  case  '\t':  sb.append(   "\\t   ");  break;  case  '\\':  sb.append(backslashEscape);  break;  case  '\   "':  sb.append(doublequoteEscape);  break;  case  '\'':  sb.append(singlequoteEscape);  break;  case  '>':  //  Break  -->  into  --\>  or  ]]>  into  ]]\>  if  (i  >=  2  &&  ((s.charAt(i  -  1)  ==  '-'  &&  s.charAt(i  -  2)  ==  '-')  ||  [CLASS]  CodeGenerator  Context  [METHOD]  strEscape  [RETURN_TYPE]  String  String  s  char  quote  String  doublequoteEscape  String  singlequoteEscape  String  backslashEscape  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  StringBuilder  sb  char  c  quote  CodeConsumer  cc  consumer  String  END_SCRIPT  START_COMMENT  backslashEscape  doublequoteEscape  s  singlequoteEscape  CharsetEncoder  outputCharsetEncoder  int  i  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	997	997	1	replace	case  ''':  sb.append(c);  break;	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
