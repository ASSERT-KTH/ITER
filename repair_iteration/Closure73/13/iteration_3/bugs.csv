bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  switch(s,  outputCharsetEncoder.substring(i  +  1))  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  switch(s,  outputCharsetEncoder.substring(i  +  1))  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	switch(s,  outputCharsetEncoder.substring(i  +  1))  {	  switch(outputCharsetEncoder.substring(i    +    1))    {    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
2	[BUG]  [BUGGY]  switch(outputCharsetEncoder.substring(i,  s.length()  +  1))  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  switch(outputCharsetEncoder.substring(i,  s.length()  +  1))  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	switch(outputCharsetEncoder.substring(i,  s.length()  +  1))  {	  switch(outputCharsetEncoder.substring(i    +    1))    {    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
3	[BUG]  [BUGGY]  switch(outputCharsetEncoder.substring(i  +  1),  singleq)  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  switch(outputCharsetEncoder.substring(i  +  1),  singleq)  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	switch(outputCharsetEncoder.substring(i  +  1),  singleq)  {	  switch(outputCharsetEncoder.substring(i    +    1))    {    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
4	[BUG]  [BUGGY]  switch(outputCharsetEncoder.substring(i,  i  +  1))  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  switch(outputCharsetEncoder.substring(i,  i  +  1))  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	switch(outputCharsetEncoder.substring(i,  i  +  1))  {	  switch(outputCharsetEncoder.substring(i    +    1))    {    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
5	[BUG]  [BUGGY]  switch(outputCharsetEncoder.substring(i,  singleq  +  1))  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  switch(outputCharsetEncoder.substring(i,  singleq  +  1))  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	switch(outputCharsetEncoder.substring(i,  singleq  +  1))  {	  switch(outputCharsetEncoder.substring(i    +    1))    {    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
6	[BUG]  [BUGGY]  Context  cc  =  Context.getCurrentContext();  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  Context  cc  =  Context.getCurrentContext();  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	Context  cc  =  Context.getCurrentContext();	  Context    cc    =    Context.getCurrentContext();    break;    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
7	[BUG]  [BUGGY]  Context  cc  =  context.getCurrentContext();  break;  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  Context  cc  =  context.getCurrentContext();  break;  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	Context  cc  =  context.getCurrentContext();  break;	  Context    cc    =    Context.getCurrentContext();    break;    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
8	[BUG]  [BUGGY]  Context  cc  =  Context.getCurrentContext(i);  break;  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  Context  cc  =  Context.getCurrentContext(i);  break;  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	Context  cc  =  Context.getCurrentContext(i);  break;	  Context    cc    =    Context.getCurrentContext();    break;    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
9	[BUG]  [BUGGY]  Context  cc  =  Context.currentContext();  break;  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  Context  cc  =  Context.currentContext();  break;  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	Context  cc  =  Context.currentContext();  break;	  Context    cc    =    Context.getCurrentContext();    break;    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
10	[BUG]  [BUGGY]  Context  cc  =  Context.createContext(s,  i);  break;  [CE]  illegal  start  of  expression  [FE]                                    ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  Context  cc  =  Context.createContext(s,  i);  break;  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	Context  cc  =  Context.createContext(s,  i);  break;	  Context    cc    =    Context.getCurrentContext();    break;    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
11	[BUG]  [BUGGY]  CharSequence[]  singleq  =  s.toCharArray();  switch(s.charAt(0))  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  CharSequence[]  singleq  =  s.toCharArray();  switch(s.charAt(0))  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	CharSequence[]  singleq  =  s.toCharArray();  switch(s.charAt(0))  {	  CharSequence[]    singleq    =    s.toCharArray();    switch(s.charAt(i))    {    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
12	[BUG]  [BUGGY]  CharSequence[]  singleq  =  s.toCharArray();  switch(s.charAt(i  +  1))  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  CharSequence[]  singleq  =  s.toCharArray();  switch(s.charAt(i  +  1))  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	CharSequence[]  singleq  =  s.toCharArray();  switch(s.charAt(i  +  1))  {	  CharSequence[]    singleq    =    s.toCharArray();    switch(s.charAt(i))    {    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
13	[BUG]  [BUGGY]  CharSequence[]  singleq  =  s.toCharArray();  switch(s.charAt(i,  singleq))  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  CharSequence[]  singleq  =  s.toCharArray();  switch(s.charAt(i,  singleq))  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	CharSequence[]  singleq  =  s.toCharArray();  switch(s.charAt(i,  singleq))  {	  CharSequence[]    singleq    =    s.toCharArray();    switch(s.charAt(i))    {    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
14	[BUG]  [BUGGY]  CharSequence[]  singleq  =  s.toCharArray();  switch(s.charAt(i),  doubleq)  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  CharSequence[]  singleq  =  s.toCharArray();  switch(s.charAt(i),  doubleq)  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	CharSequence[]  singleq  =  s.toCharArray();  switch(s.charAt(i),  doubleq)  {	  CharSequence[]    singleq    =    s.toCharArray();    switch(s.charAt(i))    {    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
15	[BUG]  [BUGGY]  CharSequence[]  singleq  =  s.toCharArray();  switch(s.charAt(i++))  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  CharSequence[]  singleq  =  s.toCharArray();  switch(s.charAt(i++))  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	CharSequence[]  singleq  =  s.toCharArray();  switch(s.charAt(i++))  {	  CharSequence[]    singleq    =    s.toCharArray();    switch(s.charAt(i))    {    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
16	[BUG]  [BUGGY]  CharSequence  singleq  =  outputCharsetEncoder.toCharArray();  switch(s.charAt(i))  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  CharSequence  singleq  =  outputCharsetEncoder.toCharArray();  switch(s.charAt(i))  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	CharSequence  singleq  =  outputCharsetEncoder.toCharArray();  switch(s.charAt(i))  {	  CharSequence    char[]    singleq    =    s.toCharArray();    switch(outputCharsetEncoder.charAt(i))    {    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
17	[BUG]  [BUGGY]  CharSequence  char[]  singleq  =  outputCharsetEncoder.toCharArray();  switch(s.charAt(i))  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  CharSequence  char[]  singleq  =  outputCharsetEncoder.toCharArray();  switch(s.charAt(i))  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	CharSequence  char[]  singleq  =  outputCharsetEncoder.toCharArray();  switch(s.charAt(i))  {	  CharSequence    char[]    singleq    =    s.toCharArray();    switch(outputCharsetEncoder.charAt(i))    {    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
18	[BUG]  [BUGGY]  CharSequence  outputCharsetEncoder  =  outputCharsetEncoder.toCharArray();  switch(s.charAt(i))  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  CharSequence  outputCharsetEncoder  =  outputCharsetEncoder.toCharArray();  switch(s.charAt(i))  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	CharSequence  outputCharsetEncoder  =  outputCharsetEncoder.toCharArray();  switch(s.charAt(i))  {	  CharSequence    char[]    singleq    =    s.toCharArray();    switch(outputCharsetEncoder.charAt(i))    {    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
19	[BUG]  [BUGGY]  CharSequence[]  singleq  =  outputCharsetEncoder.toCharArray();  switch(s.charAt(i))  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  CharSequence[]  singleq  =  outputCharsetEncoder.toCharArray();  switch(s.charAt(i))  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	CharSequence[]  singleq  =  outputCharsetEncoder.toCharArray();  switch(s.charAt(i))  {	  CharSequence    char[]    singleq    =    s.toCharArray();    switch(outputCharsetEncoder.charAt(i))    {    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
20	[BUG]  [BUGGY]  CharSequence  singleq  =  outputCharsetEncoder.toCharArray();  switch(singleq,  outputCharsetEncoder.charAt(i))  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  CharSequence  singleq  =  outputCharsetEncoder.toCharArray();  switch(singleq,  outputCharsetEncoder.charAt(i))  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	CharSequence  singleq  =  outputCharsetEncoder.toCharArray();  switch(singleq,  outputCharsetEncoder.charAt(i))  {	  CharSequence    char[]    singleq    =    s.toCharArray();    switch(outputCharsetEncoder.charAt(i))    {    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
21	[BUG]  [BUGGY]  CharSequence  s  =  outputCharsetEncoder.toCharArray();  switch(s.charAt(i))  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  CharSequence  s  =  outputCharsetEncoder.toCharArray();  switch(s.charAt(i))  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	CharSequence  s  =  outputCharsetEncoder.toCharArray();  switch(s.charAt(i))  {	  CharSequence    char[]    singleq    =    s.toCharArray();    switch(outputCharsetEncoder.charAt(i))    {    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
22	[BUG]  [BUGGY]  CharSequence  singleq  =  outputCharsetEncoder.toCharArray();  switch(s.substring(i,  singleq))  {  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  CharSequence  singleq  =  outputCharsetEncoder.toCharArray();  switch(s.substring(i,  singleq))  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	CharSequence  singleq  =  outputCharsetEncoder.toCharArray();  switch(s.substring(i,  singleq))  {	  CharSequence    char[]    singleq    =    s.toCharArray();    switch(outputCharsetEncoder.charAt(i))    {    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
23	[BUG]  [BUGGY]  CharSequence[]  singleq  =  outputCharsetEncoder.toCharArray();  switch(singleq[i])  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  CharSequence[]  singleq  =  outputCharsetEncoder.toCharArray();  switch(singleq[i])  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	CharSequence[]  singleq  =  outputCharsetEncoder.toCharArray();  switch(singleq[i])  {	  CharSequence[]    singleq    =    s.toCharArray();    switch(singleq[i])    {    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
24	[BUG]  [BUGGY]  CharSequence[]  singleq  =  s.toCharArray();  switch(singleq[i],  doubleq)  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  CharSequence[]  singleq  =  s.toCharArray();  switch(singleq[i],  doubleq)  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	CharSequence[]  singleq  =  s.toCharArray();  switch(singleq[i],  doubleq)  {	  CharSequence[]    singleq    =    s.toCharArray();    switch(singleq[i])    {    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
25	[BUG]  [BUGGY]  CharSequence[]  singleq  =  s.toCharArray();  switch(singleq[i],  quote)  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  CharSequence[]  singleq  =  s.toCharArray();  switch(singleq[i],  quote)  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	CharSequence[]  singleq  =  s.toCharArray();  switch(singleq[i],  quote)  {	  CharSequence[]    singleq    =    s.toCharArray();    switch(singleq[i])    {    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
26	[BUG]  [BUGGY]  CharSequence[]  singleq  =  s.toCharArray();  switch(singleq[i].charAt(i))  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  CharSequence[]  singleq  =  s.toCharArray();  switch(singleq[i].charAt(i))  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	CharSequence[]  singleq  =  s.toCharArray();  switch(singleq[i].charAt(i))  {	  CharSequence[]    singleq    =    s.toCharArray();    switch(singleq[i])    {    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
27	[BUG]  [BUGGY]  CharSequence[]  singleq  =  s.toCharArray();  switch(doubleq[i])  {  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  CharSequence[]  singleq  =  s.toCharArray();  switch(doubleq[i])  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	CharSequence[]  singleq  =  s.toCharArray();  switch(doubleq[i])  {	  CharSequence[]    singleq    =    s.toCharArray();    switch(singleq[i])    {    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
28	[BUG]  [BUGGY]  switch(s.substring(i  +  1),  doubleq)  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  switch(s.substring(i  +  1),  doubleq)  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	switch(s.substring(i  +  1),  doubleq)  {	  switch(s.substring(i    +    1),    singleq)    {    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
29	[BUG]  [BUGGY]  switch(s.substring(i  +  1),  singleq,  quote)  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  switch(s.substring(i  +  1),  singleq,  quote)  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	switch(s.substring(i  +  1),  singleq,  quote)  {	  switch(s.substring(i    +    1),    singleq)    {    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
30	[BUG]  [BUGGY]  switch(s.substring(i  +  1),  singleq,  doubleq)  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  switch(s.substring(i  +  1),  singleq,  doubleq)  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	switch(s.substring(i  +  1),  singleq,  doubleq)  {	  switch(s.substring(i    +    1),    singleq)    {    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
31	[BUG]  [BUGGY]  switch(s.substring(i  +  1),  singleq  -  doubleq)  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  switch(s.substring(i  +  1),  singleq  -  doubleq)  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	switch(s.substring(i  +  1),  singleq  -  doubleq)  {	  switch(s.substring(i    +    1),    singleq)    {    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
32	[BUG]  [BUGGY]  switch(s.substring(i  +  1),  singleq  -  1,  doubleq)  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  switch(s.substring(i  +  1),  singleq  -  1,  doubleq)  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	switch(s.substring(i  +  1),  singleq  -  1,  doubleq)  {	  switch(s.substring(i    +    1),    singleq)    {    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
33	[BUG]  [BUGGY]  switch(s.substring(i  +  1,  singleq))  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  switch(s.substring(i  +  1,  singleq))  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	switch(s.substring(i  +  1,  singleq))  {	  switch(s.substring(i    +    1),    singleq)    {    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
34	[BUG]  [BUGGY]  switch(s.charAt(i),  s.charAt(0))  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  switch(s.charAt(i),  s.charAt(0))  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	switch(s.charAt(i),  s.charAt(0))  {	  switch(s.charAt(i),    s.charAt(i))    {    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
35	[BUG]  [BUGGY]  switch(s.charAt(i),  s.charAt(i  +  1))  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  switch(s.charAt(i),  s.charAt(i  +  1))  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	switch(s.charAt(i),  s.charAt(i  +  1))  {	  switch(s.charAt(i),    s.charAt(i))    {    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
36	[BUG]  [BUGGY]  switch(s.charAt(i),  s.charAt(i++))  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  switch(s.charAt(i),  s.charAt(i++))  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	switch(s.charAt(i),  s.charAt(i++))  {	  switch(s.charAt(i),    s.charAt(i))    {    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
37	[BUG]  [BUGGY]  char[]  singleq  =  outputCharsetEncoder.toCharArray(s,  i);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  char[]  singleq  =  outputCharsetEncoder.toCharArray(s,  i);  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	char[]  singleq  =  outputCharsetEncoder.toCharArray(s,  i);	  char[]    singleq    =    outputCharsetEncoder.toCharArray(i);    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
38	[BUG]  [BUGGY]  char[]  singleq  =  outputCharsetEncoder.toCharArray(i,  s.length());  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  char[]  singleq  =  outputCharsetEncoder.toCharArray(i,  s.length());  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	char[]  singleq  =  outputCharsetEncoder.toCharArray(i,  s.length());	  char[]    singleq    =    outputCharsetEncoder.toCharArray(i);    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
39	[BUG]  [BUGGY]  char[]  singleq  =  outputCharsetEncoder.toCharArray(i,  s.length);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  char[]  singleq  =  outputCharsetEncoder.toCharArray(i,  s.length);  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	char[]  singleq  =  outputCharsetEncoder.toCharArray(i,  s.length);	  char[]    singleq    =    outputCharsetEncoder.toCharArray(i);    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
40	[BUG]  [BUGGY]  char[]  singleq  =  outputCharsetEncoder.toCharArray(i,  doubleq);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  char[]  singleq  =  outputCharsetEncoder.toCharArray(i,  doubleq);  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	char[]  singleq  =  outputCharsetEncoder.toCharArray(i,  doubleq);	  char[]    singleq    =    outputCharsetEncoder.toCharArray(i);    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
41	[BUG]  [BUGGY]  char[]  singleq  =  outputCharsetEncoder.toCharArray(i  +  1);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  char[]  singleq  =  outputCharsetEncoder.toCharArray(i  +  1);  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	char[]  singleq  =  outputCharsetEncoder.toCharArray(i  +  1);	  char[]    singleq    =    outputCharsetEncoder.toCharArray(i);    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
42	[BUG]  [BUGGY]  switch(s.substring(i,  s.length()  -  1))  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  switch(s.substring(i,  s.length()  -  1))  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	switch(s.substring(i,  s.length()  -  1))  {	  switch(s.substring(i,    s.length()))    {    	non-compiled	[CE]  illegal  start  of  expression	106	None	replace
43	[BUG]  [BUGGY]  switch(s.substring(i,  s.length()  +  1))  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  switch(s.substring(i,  s.length()  +  1))  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	switch(s.substring(i,  s.length()  +  1))  {	  switch(s.substring(i,    s.length()))    {    	non-compiled	[CE]  illegal  start  of  expression	106	None	replace
44	[BUG]  [BUGGY]  switch(s.substring(0,  s.length()))  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  switch(s.substring(0,  s.length()))  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	switch(s.substring(0,  s.length()))  {	  switch(s.substring(i,    s.length()))    {    	non-compiled	[CE]  illegal  start  of  expression	106	None	replace
45	[BUG]  [BUGGY]  switch(s.substring(i,  s.length()  +  2))  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  switch(s.substring(i,  s.length()  +  2))  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	switch(s.substring(i,  s.length()  +  2))  {	  switch(s.substring(i,    s.length()))    {    	non-compiled	[CE]  illegal  start  of  expression	106	None	replace
46	[BUG]  [BUGGY]  switch(s.substring(i,  s.length()  -  2))  {  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  switch(s.substring(i,  s.length()  -  2))  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	switch(s.substring(i,  s.length()  -  2))  {	  switch(s.substring(i,    s.length()))    {    	non-compiled	[CE]  illegal  start  of  expression	106	None	replace
47	[BUG]  [BUGGY]  switch(outputCharsetEncoder.charAt(i),  doubleq)  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  switch(outputCharsetEncoder.charAt(i),  doubleq)  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	switch(outputCharsetEncoder.charAt(i),  doubleq)  {	  switch(outputCharsetEncoder.charAt(i),    singleq)    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
48	[BUG]  [BUGGY]  switch(s,  outputCharsetEncoder.charAt(i),  singleq)  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  switch(s,  outputCharsetEncoder.charAt(i),  singleq)  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	switch(s,  outputCharsetEncoder.charAt(i),  singleq)  {	  switch(outputCharsetEncoder.charAt(i),    singleq)    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
49	[BUG]  [BUGGY]  switch(outputCharsetEncoder.charAt(i),  singleq,  quote)  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  switch(outputCharsetEncoder.charAt(i),  singleq,  quote)  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	switch(outputCharsetEncoder.charAt(i),  singleq,  quote)  {	  switch(outputCharsetEncoder.charAt(i),    singleq)    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
50	[BUG]  [BUGGY]  switch(i,  outputCharsetEncoder.charAt(i),  singleq)  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  switch(i,  outputCharsetEncoder.charAt(i),  singleq)  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	switch(i,  outputCharsetEncoder.charAt(i),  singleq)  {	  switch(outputCharsetEncoder.charAt(i),    singleq)    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
51	[BUG]  [BUGGY]  switch(s.substring(0,  i),  singleq  +  1))  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  switch(s.substring(0,  i),  singleq  +  1))  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	switch(s.substring(0,  i),  singleq  +  1))  {	  switch(s.substring(0,    i    +    1))    {    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
52	[BUG]  [BUGGY]  switch(s.substring(0,  i  +  1)&&  s.charAt(i)  ==  ''')  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  switch(s.substring(0,  i  +  1)&&  s.charAt(i)  ==  ''')  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	switch(s.substring(0,  i  +  1)&&  s.charAt(i)  ==  ''')  {	  switch(s.substring(0,    i    +    1))    {    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
53	[BUG]  [BUGGY]  switch(s.substring(0,  i  +  1)&&  s.charAt(i)!=  ''')  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  switch(s.substring(0,  i  +  1)&&  s.charAt(i)!=  ''')  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	switch(s.substring(0,  i  +  1)&&  s.charAt(i)!=  ''')  {	  switch(s.substring(0,    i    +    1))    {    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
54	[BUG]  [BUGGY]  switch(s.substring(0,  i  +  1)&&  s.charAt(i  +  1)  ==  ''')  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  switch(s.substring(0,  i  +  1)&&  s.charAt(i  +  1)  ==  ''')  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	switch(s.substring(0,  i  +  1)&&  s.charAt(i  +  1)  ==  ''')  {	  switch(s.substring(0,    i    +    1))    {    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
55	[BUG]  [BUGGY]  switch(s.substring(0,  i  +  1)&&  s.charAt(i)  >=  ''')  {  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  switch(s.substring(0,  i  +  1)&&  s.charAt(i)  >=  ''')  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	switch(s.substring(0,  i  +  1)&&  s.charAt(i)  >=  ''')  {	  switch(s.substring(0,    i    +    1))    {    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
56	[BUG]  [BUGGY]  String  quote  =  s.charAt(i  +  1);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  String  quote  =  s.charAt(i  +  1);  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	String  quote  =  s.charAt(i  +  1);	  char    quote    =    s.charAt(i    +    1);    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
57	[BUG]  [BUGGY]  char  quote  =  s.charAt(i  +  2);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  char  quote  =  s.charAt(i  +  2);  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	char  quote  =  s.charAt(i  +  2);	  char    quote    =    s.charAt(i    +    1);    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
58	[BUG]  [BUGGY]  char  quote  =  s.charAt(i  +  3);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  char  quote  =  s.charAt(i  +  3);  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	char  quote  =  s.charAt(i  +  3);	  char    quote    =    s.charAt(i    +    1);    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
59	[BUG]  [BUGGY]  char  quote  =  s.charAt(i  +  1,  singleq);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  char  quote  =  s.charAt(i  +  1,  singleq);  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	char  quote  =  s.charAt(i  +  1,  singleq);	  char    quote    =    s.charAt(i    +    1);    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
60	[BUG]  [BUGGY]  switch(s,  s.charAt(i))  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  switch(s,  s.charAt(i))  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	switch(s,  s.charAt(i))  {	  switch(s,    outputCharsetEncoder.charAt(i))    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
61	[BUG]  [BUGGY]  switch(s,  outputCharsetEncoder.charAt(i),  doubleq)  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  switch(s,  outputCharsetEncoder.charAt(i),  doubleq)  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	switch(s,  outputCharsetEncoder.charAt(i),  doubleq)  {	  switch(s,    outputCharsetEncoder.charAt(i))    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
62	[BUG]  [BUGGY]  switch(s,  inputCharsetEncoder.charAt(i))  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  switch(s,  inputCharsetEncoder.charAt(i))  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	switch(s,  inputCharsetEncoder.charAt(i))  {	  switch(s,    outputCharsetEncoder.charAt(i))    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
63	[BUG]  [BUGGY]  switch(s,  outputCharsetEncoder.charAt(i  +  1))  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  switch(s,  outputCharsetEncoder.charAt(i  +  1))  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	switch(s,  outputCharsetEncoder.charAt(i  +  1))  {	  switch(s,    outputCharsetEncoder.charAt(i))    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
64	[BUG]  [BUGGY]  switch(s,  outputCharsetEncoder.substring(i))  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  switch(s,  outputCharsetEncoder.substring(i))  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	switch(s,  outputCharsetEncoder.substring(i))  {	  switch(s,    outputCharsetEncoder.charAt(i))    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
65	[BUG]  [BUGGY]  switch(s.substring(i,  s.charAt(i)))  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  switch(s.substring(i,  s.charAt(i)))  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	switch(s.substring(i,  s.charAt(i)))  {	  switch(s.substring(i,    outputCharsetEncoder.charAt(i)))    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
66	[BUG]  [BUGGY]  switch(s.substring(i,  s.lastIndexOf('.')))  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  switch(s.substring(i,  s.lastIndexOf('.')))  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	switch(s.substring(i,  s.lastIndexOf('.')))  {	  switch(s.substring(i,    outputCharsetEncoder.charAt(i)))    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
67	[BUG]  [BUGGY]  switch(s.substring(i,  s.lastIndexOf(''')))  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  switch(s.substring(i,  s.lastIndexOf(''')))  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	switch(s.substring(i,  s.lastIndexOf(''')))  {	  switch(s.substring(i,    outputCharsetEncoder.charAt(i)))    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
68	[BUG]  [BUGGY]  switch(s.substring(0,  s.charAt(i)))  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  switch(s.substring(0,  s.charAt(i)))  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	switch(s.substring(0,  s.charAt(i)))  {	  switch(s.substring(i,    outputCharsetEncoder.charAt(i)))    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
69	[BUG]  [BUGGY]  switch(s.substring(i,  s.indexOf(''')))  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  switch(s.substring(i,  s.indexOf(''')))  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	switch(s.substring(i,  s.indexOf(''')))  {	  switch(s.substring(i,    outputCharsetEncoder.charAt(i)))    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
70	[BUG]  [BUGGY]  char[]  singleq  =  s.toCharArray()  +  i  +  1;  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  char[]  singleq  =  s.toCharArray()  +  i  +  1;  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	char[]  singleq  =  s.toCharArray()  +  i  +  1;	  char[]    singleq    =    s.toCharArray()    +    i;    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
71	[BUG]  [BUGGY]  char[]  singleq  =  s.toCharArray()  +  1;  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  char[]  singleq  =  s.toCharArray()  +  1;  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	char[]  singleq  =  s.toCharArray()  +  1;	  char[]    singleq    =    s.toCharArray()    +    i;    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
72	[BUG]  [BUGGY]  char[]  singleq  =  s.toCharArray()  *  i;  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  char[]  singleq  =  s.toCharArray()  *  i;  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	char[]  singleq  =  s.toCharArray()  *  i;	  char[]    singleq    =    s.toCharArray()    +    i;    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
73	[BUG]  [BUGGY]  char[]  singleq  =  s.toCharArray()  /  i;  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  char[]  singleq  =  s.toCharArray()  /  i;  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	char[]  singleq  =  s.toCharArray()  /  i;	  char[]    singleq    =    s.toCharArray()    +    i;    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
74	[BUG]  [BUGGY]  char[]  singleq  =  s.toCharArray().trim()  +  i;  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  char[]  singleq  =  s.toCharArray().trim()  +  i;  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	char[]  singleq  =  s.toCharArray().trim()  +  i;	  char[]    singleq    =    s.toCharArray()    +    i;    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
75	[BUG]  [BUGGY]  String  quote  =  s.substring(i,  s.length()  -  1);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  String  quote  =  s.substring(i,  s.length()  -  1);  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	String  quote  =  s.substring(i,  s.length()  -  1);	  String    quote    =    s.charAt(i);    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
76	[BUG]  [BUGGY]  String  quote  =  s.substring(i,  s.length());  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  String  quote  =  s.substring(i,  s.length());  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	String  quote  =  s.substring(i,  s.length());	  String    quote    =    s.charAt(i);    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
77	[BUG]  [BUGGY]  String  quote  =  s.charAt(i)+  1;  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  String  quote  =  s.charAt(i)+  1;  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	String  quote  =  s.charAt(i)+  1;	  String    quote    =    s.charAt(i);    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
78	[BUG]  [BUGGY]  String  quote  =  s.substring(i  +  1,  s.length()  -  1);  break;  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  String  quote  =  s.substring(i  +  1,  s.length()  -  1);  break;  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	String  quote  =  s.substring(i  +  1,  s.length()  -  1);  break;	  String    quote    =    s.substring(i    +    1,    s.length());    break;    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
79	[BUG]  [BUGGY]  String  quote  =  s.substring(i  +  1,  s.length()  -  2);  break;  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  String  quote  =  s.substring(i  +  1,  s.length()  -  2);  break;  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	String  quote  =  s.substring(i  +  1,  s.length()  -  2);  break;	  String    quote    =    s.substring(i    +    1,    s.length());    break;    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
80	[BUG]  [BUGGY]  String  quote  =  s.substring(i  +  1,  s.length()  -  1);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  String  quote  =  s.substring(i  +  1,  s.length()  -  1);  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	String  quote  =  s.substring(i  +  1,  s.length()  -  1);	  String    quote    =    s.substring(i    +    1,    s.length());    break;    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
81	[BUG]  [BUGGY]  String  quote  =  s.substring(i  +  1,  s.length()  +  1);  break;  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  String  quote  =  s.substring(i  +  1,  s.length()  +  1);  break;  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	String  quote  =  s.substring(i  +  1,  s.length()  +  1);  break;	  String    quote    =    s.substring(i    +    1,    s.length());    break;    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
82	[BUG]  [BUGGY]  String  quote  =  s.substring(i  +  1,  s.length()  *  2);  break;  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  String  quote  =  s.substring(i  +  1,  s.length()  *  2);  break;  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	String  quote  =  s.substring(i  +  1,  s.length()  *  2);  break;	  String    quote    =    s.substring(i    +    1,    s.length());    break;    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
83	[BUG]  [BUGGY]  String  quote  =  s.substring(i  +  1,  s.length()  -  3);  break;  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  String  quote  =  s.substring(i  +  1,  s.length()  -  3);  break;  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	String  quote  =  s.substring(i  +  1,  s.length()  -  3);  break;	  String    quote    =    s.substring(i    +    1,    s.length());    break;    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
84	[BUG]  [BUGGY]  switch(s.substring(i  +  1),  outputCharsetEncoder,  quote)  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  switch(s.substring(i  +  1),  outputCharsetEncoder,  quote)  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	switch(s.substring(i  +  1),  outputCharsetEncoder,  quote)  {	  switch(s.substring(i    +    1),    outputCharsetEncoder)    {    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
85	[BUG]  [BUGGY]  switch(s.substring(i  +  1),  outputCharsetEncoder,  singleq)  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  switch(s.substring(i  +  1),  outputCharsetEncoder,  singleq)  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	switch(s.substring(i  +  1),  outputCharsetEncoder,  singleq)  {	  switch(s.substring(i    +    1),    outputCharsetEncoder)    {    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
86	[BUG]  [BUGGY]  switch(s.substring(i  +  1),  outputCharsetEncoder),  singleq)  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  switch(s.substring(i  +  1),  outputCharsetEncoder),  singleq)  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	switch(s.substring(i  +  1),  outputCharsetEncoder),  singleq)  {	  switch(s.substring(i    +    1),    outputCharsetEncoder)    {    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
87	[BUG]  [BUGGY]  switch(s.substring(i  +  1),  outputCharsetEncoder,  s.length())  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  switch(s.substring(i  +  1),  outputCharsetEncoder,  s.length())  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	switch(s.substring(i  +  1),  outputCharsetEncoder,  s.length())  {	  switch(s.substring(i    +    1),    outputCharsetEncoder)    {    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
88	[BUG]  [BUGGY]  switch(s.substring(i  +  1),  outputCharsetEncoder).trim())  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  switch(s.substring(i  +  1),  outputCharsetEncoder).trim())  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	switch(s.substring(i  +  1),  outputCharsetEncoder).trim())  {	  switch(s.substring(i    +    1),    outputCharsetEncoder)    {    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
89	[BUG]  [BUGGY]  switch(s.substring(i),  s.charAt(i))  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  switch(s.substring(i),  s.charAt(i))  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	switch(s.substring(i),  s.charAt(i))  {	  switch(s.substring(i),    outputCharsetEncoder.charAt(i))    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
90	[BUG]  [BUGGY]  switch(s.substring(0,  i),  outputCharsetEncoder.charAt(i))  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  switch(s.substring(0,  i),  outputCharsetEncoder.charAt(i))  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	switch(s.substring(0,  i),  outputCharsetEncoder.charAt(i))  {	  switch(s.substring(i),    outputCharsetEncoder.charAt(i))    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
91	[BUG]  [BUGGY]  switch(s.substring(i),  outputCharsetEncoder.charAt(i  +  1))  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  switch(s.substring(i),  outputCharsetEncoder.charAt(i  +  1))  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	switch(s.substring(i),  outputCharsetEncoder.charAt(i  +  1))  {	  switch(s.substring(i),    outputCharsetEncoder.charAt(i))    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
92	[BUG]  [BUGGY]  switch(s.substring(i  +  1),  outputCharsetEncoder.charAt(i))  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  switch(s.substring(i  +  1),  outputCharsetEncoder.charAt(i))  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	switch(s.substring(i  +  1),  outputCharsetEncoder.charAt(i))  {	  switch(s.substring(i),    outputCharsetEncoder.charAt(i))    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
93	[BUG]  [BUGGY]  switch(s.substring(i),  outputCharsetEncoder.charAt(i++))  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  switch(s.substring(i),  outputCharsetEncoder.charAt(i++))  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	switch(s.substring(i),  outputCharsetEncoder.charAt(i++))  {	  switch(s.substring(i),    outputCharsetEncoder.charAt(i))    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
94	[BUG]  [BUGGY]  String  quote  =  outputCharsetEncoder.charAt(i);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  String  quote  =  outputCharsetEncoder.charAt(i);  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	String  quote  =  outputCharsetEncoder.charAt(i);	  char    quote    =    outputCharsetEncoder.charAt(i);    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
95	[BUG]  [BUGGY]  char  quote  =  outputCharsetEncoder.charAt(i  +  1);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  char  quote  =  outputCharsetEncoder.charAt(i  +  1);  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	char  quote  =  outputCharsetEncoder.charAt(i  +  1);	  char    quote    =    outputCharsetEncoder.charAt(i);    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
96	[BUG]  [BUGGY]  char  quote  =  outputCharsetEncoder.charAt(i,  singleq);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  char  quote  =  outputCharsetEncoder.charAt(i,  singleq);  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	char  quote  =  outputCharsetEncoder.charAt(i,  singleq);	  char    quote    =    outputCharsetEncoder.charAt(i);    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
97	[BUG]  [BUGGY]  char  quote  =  outputCharsetEncoder.charAt(i)+  1;  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  char  quote  =  outputCharsetEncoder.charAt(i)+  1;  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	char  quote  =  outputCharsetEncoder.charAt(i)+  1;	  char    quote    =    outputCharsetEncoder.charAt(i);    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
98	[BUG]  [BUGGY]  switch(s,  outputCharsetEncoder.charAt(i),  s)  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  switch(s,  outputCharsetEncoder.charAt(i),  s)  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	switch(s,  outputCharsetEncoder.charAt(i),  s)  {	  switch(outputCharsetEncoder.charAt(i),    s)    {    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
99	[BUG]  [BUGGY]  switch(outputCharsetEncoder.charAt(i),  s,  quote)  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  switch(outputCharsetEncoder.charAt(i),  s,  quote)  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	switch(outputCharsetEncoder.charAt(i),  s,  quote)  {	  switch(outputCharsetEncoder.charAt(i),    s)    {    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
100	[BUG]  [BUGGY]  Switch(s.charAt(i),  outputCharsetEncoder)  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  Switch(s.charAt(i),  outputCharsetEncoder)  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	Switch(s.charAt(i),  outputCharsetEncoder)  {	  switch(outputCharsetEncoder.charAt(i),    s)    {    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
101	[BUG]  [BUGGY]  switch(s.charAt(i),  outputCharsetEncoder,  consumer)  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  switch(s.charAt(i),  outputCharsetEncoder,  consumer)  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	switch(s.charAt(i),  outputCharsetEncoder,  consumer)  {	  switch(s.charAt(i),    outputCharsetEncoder,    context)    {    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
102	[BUG]  [BUGGY]  switch(s.charAt(i),  outputCharsetEncoder,  cc)  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  switch(s.charAt(i),  outputCharsetEncoder,  cc)  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	switch(s.charAt(i),  outputCharsetEncoder,  cc)  {	  switch(s.charAt(i),    outputCharsetEncoder,    context)    {    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
103	[BUG]  [BUGGY]  switch(s.charAt(i),  outputCharsetEncoder,  this)  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  switch(s.charAt(i),  outputCharsetEncoder,  this)  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	switch(s.charAt(i),  outputCharsetEncoder,  this)  {	  switch(s.charAt(i),    outputCharsetEncoder,    context)    {    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
104	[BUG]  [BUGGY]  switch(s.charAt(i),  outputCharsetEncoder,  line)  {  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  switch(s.charAt(i),  outputCharsetEncoder,  line)  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	switch(s.charAt(i),  outputCharsetEncoder,  line)  {	  switch(s.charAt(i),    outputCharsetEncoder,    context)    {    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
105	[BUG]  [BUGGY]  switch(s.jsString(),  outputCharsetEncoder)  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  switch(s.jsString(),  outputCharsetEncoder)  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	switch(s.jsString(),  outputCharsetEncoder)  {	  switch(outputCharsetEncoder.jsString(),    i)    {    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
106	[BUG]  [BUGGY]  switch(s.jsString(),  i)  {  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  switch(s.jsString(),  i)  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	switch(s.jsString(),  i)  {	  switch(outputCharsetEncoder.jsString(),    i)    {    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
107	[BUG]  [BUGGY]  switch(s,  outputCharsetEncoder.jsString(),  i)  {  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  switch(s,  outputCharsetEncoder.jsString(),  i)  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	switch(s,  outputCharsetEncoder.jsString(),  i)  {	  switch(outputCharsetEncoder.jsString(),    i)    {    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
108	[BUG]  [BUGGY]  switch(i.jsString(),  outputCharsetEncoder)  {  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  switch(i.jsString(),  outputCharsetEncoder)  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	switch(i.jsString(),  outputCharsetEncoder)  {	  switch(outputCharsetEncoder.jsString(),    i)    {    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
109	[BUG]  [BUGGY]  switch(s.jsString(),  inputCharsetEncoder)  {  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  switch(s.jsString(),  inputCharsetEncoder)  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	switch(s.jsString(),  inputCharsetEncoder)  {	  switch(outputCharsetEncoder.jsString(),    i)    {    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
110	[BUG]  [BUGGY]  switch(outputCharsetEncoder.jsString(),  singleq)  {  [CE]  illegal  start  of  expression  [FE]                                    ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  switch(outputCharsetEncoder.jsString(),  singleq)  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	switch(outputCharsetEncoder.jsString(),  singleq)  {	  switch(outputCharsetEncoder.jsString(),    i)    {    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
111	[BUG]  [BUGGY]  switch(outputCharsetEncoder.jsString(),  s,  i)  {  [CE]  illegal  start  of  expression  [FE]                                      ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  switch(outputCharsetEncoder.jsString(),  s,  i)  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	switch(outputCharsetEncoder.jsString(),  s,  i)  {	  switch(outputCharsetEncoder.jsString(),    i)    {    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
112	[BUG]  [BUGGY]  CharsetEncoder  consumer  =  s.getContext();  break;  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  CharsetEncoder  consumer  =  s.getContext();  break;  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	CharsetEncoder  consumer  =  s.getContext();  break;	  CharsetEncoder    consumer    =    outputCharsetEncoder.getContext();    break;    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
113	[BUG]  [BUGGY]  CharsetEncoder  consumer  =  outputCharsetEncoder.getContext(),  i);  break;  [CE]  illegal  start  of  expression  [FE]                                    ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  CharsetEncoder  consumer  =  outputCharsetEncoder.getContext(),  i);  break;  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	CharsetEncoder  consumer  =  outputCharsetEncoder.getContext(),  i);  break;	  CharsetEncoder    consumer    =    outputCharsetEncoder.getContext();    break;    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
114	[BUG]  [BUGGY]  CharsetEncoder  consumer  =  outputCharsetEncoder.getCurrentContext();  break;  [CE]  illegal  start  of  expression  [FE]                                      ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  CharsetEncoder  consumer  =  outputCharsetEncoder.getCurrentContext();  break;  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	CharsetEncoder  consumer  =  outputCharsetEncoder.getCurrentContext();  break;	  CharsetEncoder    consumer    =    outputCharsetEncoder.getContext();    break;    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
115	[BUG]  [BUGGY]  CharsetEncoder  consumer  =  outputCharsetEncoder.getContext(),  s);  break;  [CE]  illegal  start  of  expression  [FE]                                        ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  CharsetEncoder  consumer  =  outputCharsetEncoder.getContext(),  s);  break;  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	CharsetEncoder  consumer  =  outputCharsetEncoder.getContext(),  s);  break;	  CharsetEncoder    consumer    =    outputCharsetEncoder.getContext();    break;    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
116	[BUG]  [BUGGY]  CharsetEncoder  consumer  =  outputCharsetEncoder.getContext(),  i  +  1;  break;  [CE]  illegal  start  of  expression  [FE]                                          ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  CharsetEncoder  consumer  =  outputCharsetEncoder.getContext(),  i  +  1;  break;  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	CharsetEncoder  consumer  =  outputCharsetEncoder.getContext(),  i  +  1;  break;	  CharsetEncoder    consumer    =    outputCharsetEncoder.getContext();    break;    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
117	[BUG]  [BUGGY]  CharsetEncoder  consumer  =  outputCharsetEncoder.getContext(),  i;  break;  [CE]  illegal  start  of  expression  [FE]                                            ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  CharsetEncoder  consumer  =  outputCharsetEncoder.getContext(),  i;  break;  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	CharsetEncoder  consumer  =  outputCharsetEncoder.getContext(),  i;  break;	  CharsetEncoder    consumer    =    outputCharsetEncoder.getContext();    break;    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
118	[BUG]  [BUGGY]  switch(s.substring(i,  s.lastIndexOf(i)))  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  switch(s.substring(i,  s.lastIndexOf(i)))  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	switch(s.substring(i,  s.lastIndexOf(i)))  {	  switch(s.substring(i,    s.indexOf(i)))    {    	non-compiled	[CE]  illegal  start  of  expression	104	None	replace
119	[BUG]  [BUGGY]  switch(s.substring(0,  s.indexOf(i)))  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  switch(s.substring(0,  s.indexOf(i)))  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	switch(s.substring(0,  s.indexOf(i)))  {	  switch(s.substring(i,    s.indexOf(i)))    {    	non-compiled	[CE]  illegal  start  of  expression	104	None	replace
120	[BUG]  [BUGGY]  switch(s.substring(i,  s.indexOf(i),  singleq))  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  switch(s.substring(i,  s.indexOf(i),  singleq))  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	switch(s.substring(i,  s.indexOf(i),  singleq))  {	  switch(s.substring(i,    s.indexOf(i)))    {    	non-compiled	[CE]  illegal  start  of  expression	104	None	replace
121	[BUG]  [BUGGY]  switch(s.substring(i,  s.indexOf(i),  doubleq))  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  switch(s.substring(i,  s.indexOf(i),  doubleq))  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	switch(s.substring(i,  s.indexOf(i),  doubleq))  {	  switch(s.substring(i,    s.indexOf(i)))    {    	non-compiled	[CE]  illegal  start  of  expression	104	None	replace
122	[BUG]  [BUGGY]  CharTypes.char[]  singleq  =  outputCharsetEncoder.toCharArray();  switch(s.charAt(i))  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  CharTypes.char[]  singleq  =  outputCharsetEncoder.toCharArray();  switch(s.charAt(i))  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	CharTypes.char[]  singleq  =  outputCharsetEncoder.toCharArray();  switch(s.charAt(i))  {	  CharTypes.char[]    singleq    =    s.toCharArray();    switch(outputCharsetEncoder.charAt(i))    {    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
123	[BUG]  [BUGGY]  CharTypes.Char[]  singleq  =  outputCharsetEncoder.toCharArray();  switch(s.charAt(i))  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  CharTypes.Char[]  singleq  =  outputCharsetEncoder.toCharArray();  switch(s.charAt(i))  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	CharTypes.Char[]  singleq  =  outputCharsetEncoder.toCharArray();  switch(s.charAt(i))  {	  CharTypes.char[]    singleq    =    s.toCharArray();    switch(outputCharsetEncoder.charAt(i))    {    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
124	[BUG]  [BUGGY]  CharTypes.String[]  singleq  =  outputCharsetEncoder.toCharArray();  switch(s.charAt(i))  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  CharTypes.String[]  singleq  =  outputCharsetEncoder.toCharArray();  switch(s.charAt(i))  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	CharTypes.String[]  singleq  =  outputCharsetEncoder.toCharArray();  switch(s.charAt(i))  {	  CharTypes.char[]    singleq    =    s.toCharArray();    switch(outputCharsetEncoder.charAt(i))    {    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
125	[BUG]  [BUGGY]  CharTypes.String[]  singleq  =  s.toCharArray();  switch(outputCharsetEncoder.charAt(i))  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  CharTypes.String[]  singleq  =  s.toCharArray();  switch(outputCharsetEncoder.charAt(i))  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	CharTypes.String[]  singleq  =  s.toCharArray();  switch(outputCharsetEncoder.charAt(i))  {	  CharTypes.char[]    singleq    =    s.toCharArray();    switch(outputCharsetEncoder.charAt(i))    {    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
126	[BUG]  [BUGGY]  CharTypes.char[]  singleq  =  inputCharsetEncoder.toCharArray();  switch(s.charAt(i))  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  CharTypes.char[]  singleq  =  inputCharsetEncoder.toCharArray();  switch(s.charAt(i))  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	CharTypes.char[]  singleq  =  inputCharsetEncoder.toCharArray();  switch(s.charAt(i))  {	  CharTypes.char[]    singleq    =    s.toCharArray();    switch(outputCharsetEncoder.charAt(i))    {    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
127	[BUG]  [BUGGY]  char[]  singleq  =  outputCharsetEncoder.toCharArray();  switch(s.charAt(i))  {  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  char[]  singleq  =  outputCharsetEncoder.toCharArray();  switch(s.charAt(i))  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	char[]  singleq  =  outputCharsetEncoder.toCharArray();  switch(s.charAt(i))  {	  CharTypes.char[]    singleq    =    s.toCharArray();    switch(outputCharsetEncoder.charAt(i))    {    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
128	[BUG]  [BUGGY]  switch(s.substring(i),  outputCharsetEncoder,  quote)  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  switch(s.substring(i),  outputCharsetEncoder,  quote)  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	switch(s.substring(i),  outputCharsetEncoder,  quote)  {	  switch(s.substring(i),    outputCharsetEncoder)    {    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
129	[BUG]  [BUGGY]  switch(s.substring(0,  i),  outputCharsetEncoder)  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  switch(s.substring(0,  i),  outputCharsetEncoder)  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	switch(s.substring(0,  i),  outputCharsetEncoder)  {	  switch(s.substring(i),    outputCharsetEncoder)    {    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
130	[BUG]  [BUGGY]  switch(s.substring(i),  outputCharsetEncoder,  s.length())  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  switch(s.substring(i),  outputCharsetEncoder,  s.length())  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	switch(s.substring(i),  outputCharsetEncoder,  s.length())  {	  switch(s.substring(i),    outputCharsetEncoder)    {    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
131	[BUG]  [BUGGY]  switch(s.substring(i),  outputCharsetEncoder,  true)  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  switch(s.substring(i),  outputCharsetEncoder,  true)  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	switch(s.substring(i),  outputCharsetEncoder,  true)  {	  switch(s.substring(i),    outputCharsetEncoder)    {    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
132	[BUG]  [BUGGY]  switch(s.substring(i  +  1,  s.length()  +  1))  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  switch(s.substring(i  +  1,  s.length()  +  1))  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	switch(s.substring(i  +  1,  s.length()  +  1))  {	  switch(s.substring(i,    i    +    1))    {    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
133	[BUG]  [BUGGY]  switch(s.substring(i,  doubleq  +  1))  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  switch(s.substring(i,  doubleq  +  1))  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	switch(s.substring(i,  doubleq  +  1))  {	  switch(s.substring(i,    i    +    1))    {    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
134	[BUG]  [BUGGY]  CharsetEncoder  outputCharsetEncoder  =  outputCharsetEncoder.charAt(i  +  1);  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  CharsetEncoder  outputCharsetEncoder  =  outputCharsetEncoder.charAt(i  +  1);  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	CharsetEncoder  outputCharsetEncoder  =  outputCharsetEncoder.charAt(i  +  1);	  CharsetEncoder    outputCharsetEncoder    =    outputCharsetEncoder.charAt(i);    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
135	[BUG]  [BUGGY]  CharsetEncoder  charsetEncoder  =  outputCharsetEncoder.charAt(i);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  CharsetEncoder  charsetEncoder  =  outputCharsetEncoder.charAt(i);  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	CharsetEncoder  charsetEncoder  =  outputCharsetEncoder.charAt(i);	  CharsetEncoder    outputCharsetEncoder    =    outputCharsetEncoder.charAt(i);    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
136	[BUG]  [BUGGY]  CharsetEncoder  outputCharsetEncoder  =  outputCharsetEncoder.charAt(i,  s.length());  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  CharsetEncoder  outputCharsetEncoder  =  outputCharsetEncoder.charAt(i,  s.length());  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	CharsetEncoder  outputCharsetEncoder  =  outputCharsetEncoder.charAt(i,  s.length());	  CharsetEncoder    outputCharsetEncoder    =    outputCharsetEncoder.charAt(i);    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
137	[BUG]  [BUGGY]  CharsetEncoder  outputCharsetEncoder  =  outputCharsetEncoder.charAt(i  -  1);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  CharsetEncoder  outputCharsetEncoder  =  outputCharsetEncoder.charAt(i  -  1);  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	CharsetEncoder  outputCharsetEncoder  =  outputCharsetEncoder.charAt(i  -  1);	  CharsetEncoder    outputCharsetEncoder    =    outputCharsetEncoder.charAt(i);    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
138	[BUG]  [BUGGY]  CharSequence  singleq  =  s.toCharArray();  switch(s.charAt(i))  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  CharSequence  singleq  =  s.toCharArray();  switch(s.charAt(i))  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	CharSequence  singleq  =  s.toCharArray();  switch(s.charAt(i))  {	  CharSequence    char[]    singleq    =    s.toCharArray();    switch(s.charAt(i))    {    	non-compiled	[CE]  illegal  start  of  expression	103	None	replace
139	[BUG]  [BUGGY]  CharSequence  char[]  singleq  =  s.toCharArray();  switch(s.charAt(i  +  1))  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  CharSequence  char[]  singleq  =  s.toCharArray();  switch(s.charAt(i  +  1))  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	CharSequence  char[]  singleq  =  s.toCharArray();  switch(s.charAt(i  +  1))  {	  CharSequence    char[]    singleq    =    s.toCharArray();    switch(s.charAt(i))    {    	non-compiled	[CE]  illegal  start  of  expression	103	None	replace
140	[BUG]  [BUGGY]  CharSequence  char[]  singleq  =  s.toCharArray();  switch(s.charAt(0))  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  CharSequence  char[]  singleq  =  s.toCharArray();  switch(s.charAt(0))  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	CharSequence  char[]  singleq  =  s.toCharArray();  switch(s.charAt(0))  {	  CharSequence    char[]    singleq    =    s.toCharArray();    switch(s.charAt(i))    {    	non-compiled	[CE]  illegal  start  of  expression	103	None	replace
141	[BUG]  [BUGGY]  switch(s.substring(i,  singleq  -  1))  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  switch(s.substring(i,  singleq  -  1))  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	switch(s.substring(i,  singleq  -  1))  {	  switch(s.substring(i,    singleq))    {    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
142	[BUG]  [BUGGY]  CharSequence[]  singleq  =  outputCharsetEncoder.toCharArray();  switch(singleq,  outputCharsetEncoder.charAt(i))  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  CharSequence[]  singleq  =  outputCharsetEncoder.toCharArray();  switch(singleq,  outputCharsetEncoder.charAt(i))  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	CharSequence[]  singleq  =  outputCharsetEncoder.toCharArray();  switch(singleq,  outputCharsetEncoder.charAt(i))  {	  CharSequence[]    singleq    =    s.toCharArray();    switch(outputCharsetEncoder.charAt(i))    {    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
143	[BUG]  [BUGGY]  CharSequence[]  singleq  =  inputCharsetEncoder.toCharArray();  switch(s.charAt(i))  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  CharSequence[]  singleq  =  inputCharsetEncoder.toCharArray();  switch(s.charAt(i))  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	CharSequence[]  singleq  =  inputCharsetEncoder.toCharArray();  switch(s.charAt(i))  {	  CharSequence[]    singleq    =    s.toCharArray();    switch(outputCharsetEncoder.charAt(i))    {    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
144	[BUG]  [BUGGY]  CharSequence[]  singleq  =  outputCharsetEncoder.toCharArray();  switch(s.toCharArray())  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  CharSequence[]  singleq  =  outputCharsetEncoder.toCharArray();  switch(s.toCharArray())  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	CharSequence[]  singleq  =  outputCharsetEncoder.toCharArray();  switch(s.toCharArray())  {	  CharSequence[]    singleq    =    s.toCharArray();    switch(outputCharsetEncoder.charAt(i))    {    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
145	[BUG]  [BUGGY]  CharSequence[]  singleq  =  outputCharsetEncoder.toCharArray();  switch(s.substring(i,  singleq))  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  CharSequence[]  singleq  =  outputCharsetEncoder.toCharArray();  switch(s.substring(i,  singleq))  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	CharSequence[]  singleq  =  outputCharsetEncoder.toCharArray();  switch(s.substring(i,  singleq))  {	  CharSequence[]    singleq    =    s.toCharArray();    switch(outputCharsetEncoder.charAt(i))    {    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
146	[BUG]  [BUGGY]  CharSequence[]  singleq  =  outputCharsetEncoder.toCharArray();  switch(s.asCharArray())  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  CharSequence[]  singleq  =  outputCharsetEncoder.toCharArray();  switch(s.asCharArray())  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	CharSequence[]  singleq  =  outputCharsetEncoder.toCharArray();  switch(s.asCharArray())  {	  CharSequence[]    singleq    =    s.toCharArray();    switch(outputCharsetEncoder.charAt(i))    {    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
147	[BUG]  [BUGGY]  String  quote  =  jsString(s,  outputCharsetEncoder,  singleq);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  String  quote  =  jsString(s,  outputCharsetEncoder,  singleq);  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	String  quote  =  jsString(s,  outputCharsetEncoder,  singleq);	  String    quote    =    jsString(s,    outputCharsetEncoder);    case    ''':    doubleq++;    break;    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
148	[BUG]  [BUGGY]  String  quote  =  jsString(s,  outputCharsetEncoder,  singleq);  case  ''':  doubleq++;  break;  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  String  quote  =  jsString(s,  outputCharsetEncoder,  singleq);  case  ''':  doubleq++;  break;  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	String  quote  =  jsString(s,  outputCharsetEncoder,  singleq);  case  ''':  doubleq++;  break;	  String    quote    =    jsString(s,    outputCharsetEncoder);    case    ''':    doubleq++;    break;    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
149	[BUG]  [BUGGY]  String  quote  =  jsString(s,  outputCharsetEncoder,  doubleq);  case  ''':  doubleq++;  break;  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  String  quote  =  jsString(s,  outputCharsetEncoder,  doubleq);  case  ''':  doubleq++;  break;  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	String  quote  =  jsString(s,  outputCharsetEncoder,  doubleq);  case  ''':  doubleq++;  break;	  String    quote    =    jsString(s,    outputCharsetEncoder);    case    ''':    doubleq++;    break;    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
150	[BUG]  [BUGGY]  CharsetEncoder  outputCharsetEncoder  =  s.charAt(i  +  1);  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  CharsetEncoder  outputCharsetEncoder  =  s.charAt(i  +  1);  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	CharsetEncoder  outputCharsetEncoder  =  s.charAt(i  +  1);	  CharsetEncoder    outputCharsetEncoder    =    s.charAt(i);    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
151	[BUG]  [BUGGY]  CharsetEncoder  outputCharsetEncoder  =  s.charAt(i++);  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  CharsetEncoder  outputCharsetEncoder  =  s.charAt(i++);  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	CharsetEncoder  outputCharsetEncoder  =  s.charAt(i++);	  CharsetEncoder    outputCharsetEncoder    =    s.charAt(i);    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
152	[BUG]  [BUGGY]  CharsetEncoder  outputCharsetEncoder  =  s.charAt(i)+  1;  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  CharsetEncoder  outputCharsetEncoder  =  s.charAt(i)+  1;  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	CharsetEncoder  outputCharsetEncoder  =  s.charAt(i)+  1;	  CharsetEncoder    outputCharsetEncoder    =    s.charAt(i);    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
153	[BUG]  [BUGGY]  CharsetEncoder  outputCharsetEncoder  =  s.substring(i  +  1,  s.length());  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  CharsetEncoder  outputCharsetEncoder  =  s.substring(i  +  1,  s.length());  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	CharsetEncoder  outputCharsetEncoder  =  s.substring(i  +  1,  s.length());	  CharsetEncoder    outputCharsetEncoder    =    s.charAt(i);    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
154	[BUG]  [BUGGY]  CharsetEncoder  outputCharsetEncoder  =  s.charAt(i];  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  CharsetEncoder  outputCharsetEncoder  =  s.charAt(i];  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	CharsetEncoder  outputCharsetEncoder  =  s.charAt(i];	  CharsetEncoder    outputCharsetEncoder    =    s.charAt(i);    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
155	[BUG]  [BUGGY]  switch(s.substring(i),  doubleq)  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  switch(s.substring(i),  doubleq)  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	switch(s.substring(i),  doubleq)  {	  switch(s.substring(i),    singleq)    {    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
156	[BUG]  [BUGGY]  switch(s.substring(i),  singleq,  quote)  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  switch(s.substring(i),  singleq,  quote)  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	switch(s.substring(i),  singleq,  quote)  {	  switch(s.substring(i),    singleq)    {    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
157	[BUG]  [BUGGY]  switch(s.substring(i),  singleq  -  1)  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  switch(s.substring(i),  singleq  -  1)  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	switch(s.substring(i),  singleq  -  1)  {	  switch(s.substring(i),    singleq)    {    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
158	[BUG]  [BUGGY]  switch(s.substring(i,  singleq  +  1)&&  s.charAt(i)  ==  ''')  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  switch(s.substring(i,  singleq  +  1)&&  s.charAt(i)  ==  ''')  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	switch(s.substring(i,  singleq  +  1)&&  s.charAt(i)  ==  ''')  {	  switch(s.substring(i,    singleq    +    1))    {    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
159	[BUG]  [BUGGY]  switch(s.substring(i,  singleq  +  1)&&  s.charAt(i)!=  ''')  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  switch(s.substring(i,  singleq  +  1)&&  s.charAt(i)!=  ''')  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	switch(s.substring(i,  singleq  +  1)&&  s.charAt(i)!=  ''')  {	  switch(s.substring(i,    singleq    +    1))    {    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
160	[BUG]  [BUGGY]  switch(s.substring(i,  singleq  +  1)&&  s.charAt(i)  >=  ''')  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  switch(s.substring(i,  singleq  +  1)&&  s.charAt(i)  >=  ''')  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	switch(s.substring(i,  singleq  +  1)&&  s.charAt(i)  >=  ''')  {	  switch(s.substring(i,    singleq    +    1))    {    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
161	[BUG]  [BUGGY]  CharSequence[]  singleq  =  outputCharsetEncoder.toCharArray();  switch(singleq[i],  s)  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  CharSequence[]  singleq  =  outputCharsetEncoder.toCharArray();  switch(singleq[i],  s)  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	CharSequence[]  singleq  =  outputCharsetEncoder.toCharArray();  switch(singleq[i],  s)  {	  CharSequence[]    singleq    =    s.toCharArray();    switch(singleq[i],    outputCharsetEncoder)    {    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
162	[BUG]  [BUGGY]  CharSequence[]  singleq  =  s.toCharArray();  switch(singleq[0],  outputCharsetEncoder)  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  CharSequence[]  singleq  =  s.toCharArray();  switch(singleq[0],  outputCharsetEncoder)  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	CharSequence[]  singleq  =  s.toCharArray();  switch(singleq[0],  outputCharsetEncoder)  {	  CharSequence[]    singleq    =    s.toCharArray();    switch(singleq[i],    outputCharsetEncoder)    {    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
163	[BUG]  [BUGGY]  CharSequence[]  singleq  =  s.toCharArray();  switch(singleq[i],  outputCharsetEncoder,  quote)  {  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  CharSequence[]  singleq  =  s.toCharArray();  switch(singleq[i],  outputCharsetEncoder,  quote)  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	CharSequence[]  singleq  =  s.toCharArray();  switch(singleq[i],  outputCharsetEncoder,  quote)  {	  CharSequence[]    singleq    =    s.toCharArray();    switch(singleq[i],    outputCharsetEncoder)    {    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
164	[BUG]  [BUGGY]  CharSequence[]  singleq  =  s.toCharArray();  switch(outputCharsetEncoder[i],  singleq)  {  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  CharSequence[]  singleq  =  s.toCharArray();  switch(outputCharsetEncoder[i],  singleq)  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	CharSequence[]  singleq  =  s.toCharArray();  switch(outputCharsetEncoder[i],  singleq)  {	  CharSequence[]    singleq    =    s.toCharArray();    switch(singleq[i],    outputCharsetEncoder)    {    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
165	[BUG]  [BUGGY]  CharSequence[]  singleq  =  s.toCharArray();  switch(strategy[i],  outputCharsetEncoder)  {  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  CharSequence[]  singleq  =  s.toCharArray();  switch(strategy[i],  outputCharsetEncoder)  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	CharSequence[]  singleq  =  s.toCharArray();  switch(strategy[i],  outputCharsetEncoder)  {	  CharSequence[]    singleq    =    s.toCharArray();    switch(singleq[i],    outputCharsetEncoder)    {    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
166	[BUG]  [BUGGY]  CharSequence[]  singleq  =  s.toCharArray();  switch(str[i],  outputCharsetEncoder)  {  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  CharSequence[]  singleq  =  s.toCharArray();  switch(str[i],  outputCharsetEncoder)  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	CharSequence[]  singleq  =  s.toCharArray();  switch(str[i],  outputCharsetEncoder)  {	  CharSequence[]    singleq    =    s.toCharArray();    switch(singleq[i],    outputCharsetEncoder)    {    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
167	[BUG]  [BUGGY]  String  quote  =  s.substring(i  +  1,  s.length()  -  1);  case  ''':  doubleq++;  break;  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  String  quote  =  s.substring(i  +  1,  s.length()  -  1);  case  ''':  doubleq++;  break;  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	String  quote  =  s.substring(i  +  1,  s.length()  -  1);  case  ''':  doubleq++;  break;	  String    quote    =    s.substring(i    +    1,    s.length());    case    ''':    doubleq++;    break;    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
168	[BUG]  [BUGGY]  String  quote  =  s.substring(i  +  1,  s.length()  -  2);  case  ''':  doubleq++;  break;  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  String  quote  =  s.substring(i  +  1,  s.length()  -  2);  case  ''':  doubleq++;  break;  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	String  quote  =  s.substring(i  +  1,  s.length()  -  2);  case  ''':  doubleq++;  break;	  String    quote    =    s.substring(i    +    1,    s.length());    case    ''':    doubleq++;    break;    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
169	[BUG]  [BUGGY]  String  quote  =  s.substring(i  +  1,  s.length()  -  2);  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  String  quote  =  s.substring(i  +  1,  s.length()  -  2);  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	String  quote  =  s.substring(i  +  1,  s.length()  -  2);	  String    quote    =    s.substring(i    +    1,    s.length());    case    ''':    doubleq++;    break;    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
170	[BUG]  [BUGGY]  switch(s.substring(i  +  1,  s.length()  -  1))  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  switch(s.substring(i  +  1,  s.length()  -  1))  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	switch(s.substring(i  +  1,  s.length()  -  1))  {	  switch(s.substring(i    +    1,    s.length()))    {    	non-compiled	[CE]  illegal  start  of  expression	101	None	replace
171	[BUG]  [BUGGY]  switch(s.substring(i  +  1,  s.length()),  outputCharsetEncoder)  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  switch(s.substring(i  +  1,  s.length()),  outputCharsetEncoder)  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	switch(s.substring(i  +  1,  s.length()),  outputCharsetEncoder)  {	  switch(s.substring(i    +    1,    s.length()))    {    	non-compiled	[CE]  illegal  start  of  expression	101	None	replace
172	[BUG]  [BUGGY]  switch(s.substring(i,  singleq  +  1,  s.length()))  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  switch(s.substring(i,  singleq  +  1,  s.length()))  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	switch(s.substring(i,  singleq  +  1,  s.length()))  {	  switch(s.substring(i    +    1,    s.length()))    {    	non-compiled	[CE]  illegal  start  of  expression	101	None	replace
173	[BUG]  [BUGGY]  switch(s.substring(i  +  1,  s.length()  *  2))  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  switch(s.substring(i  +  1,  s.length()  *  2))  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	switch(s.substring(i  +  1,  s.length()  *  2))  {	  switch(s.substring(i    +    1,    s.length()))    {    	non-compiled	[CE]  illegal  start  of  expression	101	None	replace
174	[BUG]  [BUGGY]  String  quote  =  s.charAt(i)];  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  String  quote  =  s.charAt(i)];  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	String  quote  =  s.charAt(i)];	  char    quote    =    s.charAt(i)];    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
175	[BUG]  [BUGGY]  char  quote  =  s.charAt(i  +  1)];  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  char  quote  =  s.charAt(i  +  1)];  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	char  quote  =  s.charAt(i  +  1)];	  char    quote    =    s.charAt(i)];    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
176	[BUG]  [BUGGY]  char  quote  =  s.charAt(i)+  1];  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  char  quote  =  s.charAt(i)+  1];  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	char  quote  =  s.charAt(i)+  1];	  char    quote    =    s.charAt(i)];    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
177	[BUG]  [BUGGY]  CharType[]  singleq  =  outputCharsetEncoder.toCharArray();  switch(singleq[i])  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  CharType[]  singleq  =  outputCharsetEncoder.toCharArray();  switch(singleq[i])  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	CharType[]  singleq  =  outputCharsetEncoder.toCharArray();  switch(singleq[i])  {	  CharType[]    singleq    =    s.toCharArray();    switch(singleq[i])    {    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
178	[BUG]  [BUGGY]  CharType[]  singleq  =  s.toCharArray();  switch(singleq[i],  outputCharsetEncoder)  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  CharType[]  singleq  =  s.toCharArray();  switch(singleq[i],  outputCharsetEncoder)  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	CharType[]  singleq  =  s.toCharArray();  switch(singleq[i],  outputCharsetEncoder)  {	  CharType[]    singleq    =    s.toCharArray();    switch(singleq[i])    {    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
179	[BUG]  [BUGGY]  CharType[]  singleq  =  s.toCharArray();  switch(singleq[i],  doubleq)  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  CharType[]  singleq  =  s.toCharArray();  switch(singleq[i],  doubleq)  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	CharType[]  singleq  =  s.toCharArray();  switch(singleq[i],  doubleq)  {	  CharType[]    singleq    =    s.toCharArray();    switch(singleq[i])    {    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
180	[BUG]  [BUGGY]  CharType[]  singleq  =  s.toCharArray();  switch(singleq[i].charAt(i))  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  CharType[]  singleq  =  s.toCharArray();  switch(singleq[i].charAt(i))  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	CharType[]  singleq  =  s.toCharArray();  switch(singleq[i].charAt(i))  {	  CharType[]    singleq    =    s.toCharArray();    switch(singleq[i])    {    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
181	[BUG]  [BUGGY]  CharType[]  singleq  =  s.toCharArray();  switch(singleq[i],  quote)  {  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  CharType[]  singleq  =  s.toCharArray();  switch(singleq[i],  quote)  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	CharType[]  singleq  =  s.toCharArray();  switch(singleq[i],  quote)  {	  CharType[]    singleq    =    s.toCharArray();    switch(singleq[i])    {    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
182	[BUG]  [BUGGY]  CharType[]  singleq  =  s.toCharArray();  switch(singleq[i  +  1])  {  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  CharType[]  singleq  =  s.toCharArray();  switch(singleq[i  +  1])  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	CharType[]  singleq  =  s.toCharArray();  switch(singleq[i  +  1])  {	  CharType[]    singleq    =    s.toCharArray();    switch(singleq[i])    {    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
183	[BUG]  [BUGGY]  switch(s.substring(i,  Double.POSITIVE_INFINITY,  singleq))  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  switch(s.substring(i,  Double.POSITIVE_INFINITY,  singleq))  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	switch(s.substring(i,  Double.POSITIVE_INFINITY,  singleq))  {	  switch(s.substring(i,    Double.POSITIVE_INFINITY))    {    	non-compiled	[CE]  illegal  start  of  expression	99	None	replace
184	[BUG]  [BUGGY]  switch(s.substring(i,  Double.POSITIVE_INFINITY,  doubleq))  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  switch(s.substring(i,  Double.POSITIVE_INFINITY,  doubleq))  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	switch(s.substring(i,  Double.POSITIVE_INFINITY,  doubleq))  {	  switch(s.substring(i,    Double.POSITIVE_INFINITY))    {    	non-compiled	[CE]  illegal  start  of  expression	99	None	replace
185	[BUG]  [BUGGY]  switch(s.substring(i,  Double.POSITIVE_INFINITY),  s.length())  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  switch(s.substring(i,  Double.POSITIVE_INFINITY),  s.length())  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	switch(s.substring(i,  Double.POSITIVE_INFINITY),  s.length())  {	  switch(s.substring(i,    Double.POSITIVE_INFINITY))    {    	non-compiled	[CE]  illegal  start  of  expression	99	None	replace
186	[BUG]  [BUGGY]  switch(s.substring(i,  Double.POSITIVE_INFINITY,  s.length()))  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  switch(s.substring(i,  Double.POSITIVE_INFINITY,  s.length()))  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	switch(s.substring(i,  Double.POSITIVE_INFINITY,  s.length()))  {	  switch(s.substring(i,    Double.POSITIVE_INFINITY))    {    	non-compiled	[CE]  illegal  start  of  expression	99	None	replace
187	[BUG]  [BUGGY]  switch(s.substring(i,  Double.POSITIVE_INFINITY,  quote))  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  switch(s.substring(i,  Double.POSITIVE_INFINITY,  quote))  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	switch(s.substring(i,  Double.POSITIVE_INFINITY,  quote))  {	  switch(s.substring(i,    Double.POSITIVE_INFINITY))    {    	non-compiled	[CE]  illegal  start  of  expression	99	None	replace
188	[BUG]  [BUGGY]  switch(s.substring(i,  Double.POSITIVE_INFINITY),  outputCharsetEncoder)  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  switch(s.substring(i,  Double.POSITIVE_INFINITY),  outputCharsetEncoder)  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	switch(s.substring(i,  Double.POSITIVE_INFINITY),  outputCharsetEncoder)  {	  switch(s.substring(i,    Double.POSITIVE_INFINITY))    {    	non-compiled	[CE]  illegal  start  of  expression	99	None	replace
189	[BUG]  [BUGGY]  switch(s.substring(i,  1  -  1))  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  switch(s.substring(i,  1  -  1))  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	switch(s.substring(i,  1  -  1))  {	  switch(s.substring(i,    1))    {    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
190	[BUG]  [BUGGY]  switch(s.substring(i,  2))  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  switch(s.substring(i,  2))  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	switch(s.substring(i,  2))  {	  switch(s.substring(i,    1))    {    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
191	[BUG]  [BUGGY]  CharSequence  singleq  =  s.toCharArray();  switch(singleq[i],  doubleq)  {  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  CharSequence  singleq  =  s.toCharArray();  switch(singleq[i],  doubleq)  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	CharSequence  singleq  =  s.toCharArray();  switch(singleq[i],  doubleq)  {	  char[]    singleq    =    s.toCharArray();    switch(singleq[i],    doubleq)    {    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
192	[BUG]  [BUGGY]  CharSequence  s  =  s.toCharArray();  switch(s.charAt(i),  doubleq)  {  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  CharSequence  s  =  s.toCharArray();  switch(s.charAt(i),  doubleq)  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	CharSequence  s  =  s.toCharArray();  switch(s.charAt(i),  doubleq)  {	  char[]    singleq    =    s.toCharArray();    switch(singleq[i],    doubleq)    {    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
193	[BUG]  [BUGGY]  CharSequence  s  =  s.toCharArray();  switch(s.charAt(i],  doubleq)  {  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  CharSequence  s  =  s.toCharArray();  switch(s.charAt(i],  doubleq)  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	CharSequence  s  =  s.toCharArray();  switch(s.charAt(i],  doubleq)  {	  char[]    singleq    =    s.toCharArray();    switch(singleq[i],    doubleq)    {    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
194	[BUG]  [BUGGY]  CharSequence[]  singleq  =  s.toCharArray();  switch(singleq[i],  DoubleQuote)  {  [CE]  illegal  start  of  expression  [FE]                                    ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  CharSequence[]  singleq  =  s.toCharArray();  switch(singleq[i],  DoubleQuote)  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	CharSequence[]  singleq  =  s.toCharArray();  switch(singleq[i],  DoubleQuote)  {	  char[]    singleq    =    s.toCharArray();    switch(singleq[i],    doubleq)    {    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
195	[BUG]  [BUGGY]  CharType[]  singleq  =  s.toCharArray();  switch(s.charAt(0))  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  CharType[]  singleq  =  s.toCharArray();  switch(s.charAt(0))  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	CharType[]  singleq  =  s.toCharArray();  switch(s.charAt(0))  {	  char[]    singleq    =    s.toCharArray();    switch(s.charAt(0))    {    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
196	[BUG]  [BUGGY]  CharTypes.char[]  singleq  =  s.toCharArray();  switch(s.charAt(0))  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  CharTypes.char[]  singleq  =  s.toCharArray();  switch(s.charAt(0))  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	CharTypes.char[]  singleq  =  s.toCharArray();  switch(s.charAt(0))  {	  char[]    singleq    =    s.toCharArray();    switch(s.charAt(0))    {    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
197	[BUG]  [BUGGY]  switch(s.substring(i,  s.jsString()))  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  switch(s.substring(i,  s.jsString()))  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	switch(s.substring(i,  s.jsString()))  {	  switch(s.substring(i,    outputCharsetEncoder.jsString()))    {    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
198	[BUG]  [BUGGY]  switch(s.substring(i,  outputCharsetEncoder.length()))  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  switch(s.substring(i,  outputCharsetEncoder.length()))  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	switch(s.substring(i,  outputCharsetEncoder.length()))  {	  switch(s.substring(i,    outputCharsetEncoder.jsString()))    {    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
199	[BUG]  [BUGGY]  switch(s.substring(i,  outputCharsetEncoder.getValue(i)))  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  switch(s.substring(i,  outputCharsetEncoder.getValue(i)))  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	switch(s.substring(i,  outputCharsetEncoder.getValue(i)))  {	  switch(s.substring(i,    outputCharsetEncoder.jsString()))    {    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
200	[BUG]  [BUGGY]  switch(s.substring(i,  outputCharsetEncoder.jsString()  +  1))  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  switch(s.substring(i,  outputCharsetEncoder.jsString()  +  1))  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	switch(s.substring(i,  outputCharsetEncoder.jsString()  +  1))  {	  switch(s.substring(i,    outputCharsetEncoder.jsString()))    {    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
201	[BUG]  [BUGGY]  CharsetEncoder  outputCharsetEncoder  =  outputCharsetEncoder.encode(s,  i  +  1);  switch(outputCharsetEncoder)  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  CharsetEncoder  outputCharsetEncoder  =  outputCharsetEncoder.encode(s,  i  +  1);  switch(outputCharsetEncoder)  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	CharsetEncoder  outputCharsetEncoder  =  outputCharsetEncoder.encode(s,  i  +  1);  switch(outputCharsetEncoder)  {	  CharsetEncoder    outputCharsetEncoder    =    outputCharsetEncoder.encode(s,    i);    switch(outputCharsetEncoder)    {    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
202	[BUG]  [BUGGY]  CharsetEncoder  outputCharsetEncoder  =  inputCharsetEncoder.encode(s,  i);  switch(outputCharsetEncoder)  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  CharsetEncoder  outputCharsetEncoder  =  inputCharsetEncoder.encode(s,  i);  switch(outputCharsetEncoder)  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	CharsetEncoder  outputCharsetEncoder  =  inputCharsetEncoder.encode(s,  i);  switch(outputCharsetEncoder)  {	  CharsetEncoder    outputCharsetEncoder    =    outputCharsetEncoder.encode(s,    i);    switch(outputCharsetEncoder)    {    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
203	[BUG]  [BUGGY]  CharsetEncoder  outputCharsetEncoder  =  s.encode(i);  switch(outputCharsetEncoder)  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  CharsetEncoder  outputCharsetEncoder  =  s.encode(i);  switch(outputCharsetEncoder)  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	CharsetEncoder  outputCharsetEncoder  =  s.encode(i);  switch(outputCharsetEncoder)  {	  CharsetEncoder    outputCharsetEncoder    =    outputCharsetEncoder.encode(s,    i);    switch(outputCharsetEncoder)    {    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
204	[BUG]  [BUGGY]  CharsetEncoder  outputCharsetEncoder  =  outputCharsetEncoder.encode(s,  i);  switch(inputCharsetEncoder)  {  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  CharsetEncoder  outputCharsetEncoder  =  outputCharsetEncoder.encode(s,  i);  switch(inputCharsetEncoder)  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	CharsetEncoder  outputCharsetEncoder  =  outputCharsetEncoder.encode(s,  i);  switch(inputCharsetEncoder)  {	  CharsetEncoder    outputCharsetEncoder    =    outputCharsetEncoder.encode(s,    i);    switch(outputCharsetEncoder)    {    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
205	[BUG]  [BUGGY]  CharsetEncoder  outputCharsetEncoder  =  outputCharsetEncoder.encode(s,  i);  switch(expCharsetEncoder)  {  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  CharsetEncoder  outputCharsetEncoder  =  outputCharsetEncoder.encode(s,  i);  switch(expCharsetEncoder)  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	CharsetEncoder  outputCharsetEncoder  =  outputCharsetEncoder.encode(s,  i);  switch(expCharsetEncoder)  {	  CharsetEncoder    outputCharsetEncoder    =    outputCharsetEncoder.encode(s,    i);    switch(outputCharsetEncoder)    {    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
206	[BUG]  [BUGGY]  String  quote  =  s.substring(i  +  1,  s.length()  +  1);  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  String  quote  =  s.substring(i  +  1,  s.length()  +  1);  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	String  quote  =  s.substring(i  +  1,  s.length()  +  1);	  String    quote    =    s.substring(i    +    1,    s.length());    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
207	[BUG]  [BUGGY]  String  quote  =  s.substring(i  +  1,  s.length(),  s.length());  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  String  quote  =  s.substring(i  +  1,  s.length(),  s.length());  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	String  quote  =  s.substring(i  +  1,  s.length(),  s.length());	  String    quote    =    s.substring(i    +    1,    s.length());    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
208	[BUG]  [BUGGY]  String  quote  =  s.substring(i  +  1,  s.length()  -  4);  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  String  quote  =  s.substring(i  +  1,  s.length()  -  4);  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	String  quote  =  s.substring(i  +  1,  s.length()  -  4);	  String    quote    =    s.substring(i    +    1,    s.length());    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
209	[BUG]  [BUGGY]  String  quote  =  s.substring(i  +  1,  s.length()  -  3);  [CE]  illegal  start  of  expression  [FE]                                    ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  String  quote  =  s.substring(i  +  1,  s.length()  -  3);  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	String  quote  =  s.substring(i  +  1,  s.length()  -  3);	  String    quote    =    s.substring(i    +    1,    s.length());    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
210	[BUG]  [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.encode(s,  i  +  1);  switch(cc.toString())  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.encode(s,  i  +  1);  switch(cc.toString())  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	CharsetEncoder  cc  =  outputCharsetEncoder.encode(s,  i  +  1);  switch(cc.toString())  {	  CharsetEncoder    cc    =    outputCharsetEncoder.encode(s,    i);    switch(cc.toString())    {    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
211	[BUG]  [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.encode(s,  i  +  1,  s.length());  switch(cc.toString())  {  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.encode(s,  i  +  1,  s.length());  switch(cc.toString())  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	CharsetEncoder  cc  =  outputCharsetEncoder.encode(s,  i  +  1,  s.length());  switch(cc.toString())  {	  CharsetEncoder    cc    =    outputCharsetEncoder.encode(s,    i);    switch(cc.toString())    {    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
212	[BUG]  [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.encode(s,  i);  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.encode(s,  i);  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	CharsetEncoder  cc  =  outputCharsetEncoder.encode(s,  i);	  CharsetEncoder    cc    =    outputCharsetEncoder.encode(s,    i);    switch(cc.toString())    {    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
213	[BUG]  [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.encode(s,  i++);  switch(cc.toString())  {  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.encode(s,  i++);  switch(cc.toString())  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	CharsetEncoder  cc  =  outputCharsetEncoder.encode(s,  i++);  switch(cc.toString())  {	  CharsetEncoder    cc    =    outputCharsetEncoder.encode(s,    i);    switch(cc.toString())    {    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
214	[BUG]  [BUGGY]  CharsetEncoder  cc  =  inputCharsetEncoder.encode(s,  i);  switch(cc.toString())  {  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  CharsetEncoder  cc  =  inputCharsetEncoder.encode(s,  i);  switch(cc.toString())  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	CharsetEncoder  cc  =  inputCharsetEncoder.encode(s,  i);  switch(cc.toString())  {	  CharsetEncoder    cc    =    outputCharsetEncoder.encode(s,    i);    switch(cc.toString())    {    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
215	[BUG]  [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.encode(s,  i  +  1,  singleq);  switch(cc.toString())  {  [CE]  illegal  start  of  expression  [FE]                                    ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.encode(s,  i  +  1,  singleq);  switch(cc.toString())  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	CharsetEncoder  cc  =  outputCharsetEncoder.encode(s,  i  +  1,  singleq);  switch(cc.toString())  {	  CharsetEncoder    cc    =    outputCharsetEncoder.encode(s,    i);    switch(cc.toString())    {    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
216	[BUG]  [BUGGY]  switch(s.substring(i,  0,  s.length()))  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  switch(s.substring(i,  0,  s.length()))  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	switch(s.substring(i,  0,  s.length()))  {	  switch(s.substring(i,    0))    {    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
217	[BUG]  [BUGGY]  switch(s.substring(i),  s.trim())  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  switch(s.substring(i),  s.trim())  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	switch(s.substring(i),  s.trim())  {	  switch(s.substring(i).trim())    {    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
218	[BUG]  [BUGGY]  switch(s.substring(i),  outputCharsetEncoder.trim())  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  switch(s.substring(i),  outputCharsetEncoder.trim())  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	switch(s.substring(i),  outputCharsetEncoder.trim())  {	  switch(s.substring(i).trim())    {    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
219	[BUG]  [BUGGY]  switch(s.substring(i)).trim())  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  switch(s.substring(i)).trim())  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	switch(s.substring(i)).trim())  {	  switch(s.substring(i).trim())    {    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
220	[BUG]  [BUGGY]  switch(s.substring(i,  s.length()).trim())  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  switch(s.substring(i,  s.length()).trim())  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	switch(s.substring(i,  s.length()).trim())  {	  switch(s.substring(i).trim())    {    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
221	[BUG]  [BUGGY]  switch(s.substring(i  +  1).trim())  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  switch(s.substring(i  +  1).trim())  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	switch(s.substring(i  +  1).trim())  {	  switch(s.substring(i).trim())    {    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
222	[BUG]  [BUGGY]  switch(s.substring(i,  singleq).trim())  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  switch(s.substring(i,  singleq).trim())  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	switch(s.substring(i,  singleq).trim())  {	  switch(s.substring(i).trim())    {    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
223	[BUG]  [BUGGY]  String  quote  =  s.jsString(outputCharsetEncoder,  i);  break;  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  String  quote  =  s.jsString(outputCharsetEncoder,  i);  break;  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	String  quote  =  s.jsString(outputCharsetEncoder,  i);  break;	  String    quote    =    outputCharsetEncoder.jsString(s,    i);    break;    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
224	[BUG]  [BUGGY]  String  quote  =  outputCharsetEncoder.jsString(s,  i  +  1);  break;  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  String  quote  =  outputCharsetEncoder.jsString(s,  i  +  1);  break;  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	String  quote  =  outputCharsetEncoder.jsString(s,  i  +  1);  break;	  String    quote    =    outputCharsetEncoder.jsString(s,    i);    break;    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
225	[BUG]  [BUGGY]  String  quote  =  s.jsString(i);  break;  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  String  quote  =  s.jsString(i);  break;  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	String  quote  =  s.jsString(i);  break;	  String    quote    =    outputCharsetEncoder.jsString(s,    i);    break;    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
226	[BUG]  [BUGGY]  String  quote  =  s.jsString(outputCharsetEncoder);  break;  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  String  quote  =  s.jsString(outputCharsetEncoder);  break;  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	String  quote  =  s.jsString(outputCharsetEncoder);  break;	  String    quote    =    outputCharsetEncoder.jsString(s,    i);    break;    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
227	[BUG]  [BUGGY]  String  quote  =  s.jsString(i,  outputCharsetEncoder);  break;  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  String  quote  =  s.jsString(i,  outputCharsetEncoder);  break;  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	String  quote  =  s.jsString(i,  outputCharsetEncoder);  break;	  String    quote    =    outputCharsetEncoder.jsString(s,    i);    break;    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
228	[BUG]  [BUGGY]  switch(s.getText())  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  switch(s.getText())  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	switch(s.getText())  {	  switch(s.jsString())    {    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
229	[BUG]  [BUGGY]  switch(s.toCharArray())  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  switch(s.toCharArray())  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	switch(s.toCharArray())  {	  switch(s.jsString())    {    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
230	[BUG]  [BUGGY]  char  quote  =  s.charAt(i,  doubleq);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  char  quote  =  s.charAt(i,  doubleq);  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	char  quote  =  s.charAt(i,  doubleq);	  char    quote    =    s.charAt(i,    singleq);    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
231	[BUG]  [BUGGY]  char  quote  =  s.charAt(i,  singleq  +  1);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  char  quote  =  s.charAt(i,  singleq  +  1);  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	char  quote  =  s.charAt(i,  singleq  +  1);	  char    quote    =    s.charAt(i,    singleq);    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
232	[BUG]  [BUGGY]  char  quote  =  s.charAt(i,  doubleq  +  1);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  char  quote  =  s.charAt(i,  doubleq  +  1);  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	char  quote  =  s.charAt(i,  doubleq  +  1);	  char    quote    =    s.charAt(i,    singleq);    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
233	[BUG]  [BUGGY]  char  quote  =  s.charAt(i,  singleq  -  1);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  char  quote  =  s.charAt(i,  singleq  -  1);  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	char  quote  =  s.charAt(i,  singleq  -  1);	  char    quote    =    s.charAt(i,    singleq);    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
234	[BUG]  [BUGGY]  String  quote  =  s.charAt(i,  singleq);  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  String  quote  =  s.charAt(i,  singleq);  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	String  quote  =  s.charAt(i,  singleq);	  char    quote    =    s.charAt(i,    singleq);    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
235	[BUG]  [BUGGY]  char  quote  =  s.charAt(i,  singleq  +  2);  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  char  quote  =  s.charAt(i,  singleq  +  2);  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	char  quote  =  s.charAt(i,  singleq  +  2);	  char    quote    =    s.charAt(i,    singleq);    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
236	[BUG]  [BUGGY]  switch(s.charAt(i),  outputCharsetEncoder.charAt(i))  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  switch(s.charAt(i),  outputCharsetEncoder.charAt(i))  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	switch(s.charAt(i),  outputCharsetEncoder.charAt(i))  {	  switch(i,    outputCharsetEncoder.charAt(i))    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
237	[BUG]  [BUGGY]  switch(s[i],  outputCharsetEncoder.charAt(i))  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  switch(s[i],  outputCharsetEncoder.charAt(i))  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	switch(s[i],  outputCharsetEncoder.charAt(i))  {	  switch(i,    outputCharsetEncoder.charAt(i))    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
238	[BUG]  [BUGGY]  switch(i,  s.charAt(i))  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  switch(i,  s.charAt(i))  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	switch(i,  s.charAt(i))  {	  switch(i,    outputCharsetEncoder.charAt(i))    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
239	[BUG]  [BUGGY]  char[]  singleq  =  s.substring(i,  s.length());  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  char[]  singleq  =  s.substring(i,  s.length());  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	char[]  singleq  =  s.substring(i,  s.length());	  char[]    singleq    =    s.substring(i,    s.length()    -    1);    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
240	[BUG]  [BUGGY]  char[]  singleq  =  s.substring(0,  s.length()  -  1);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  char[]  singleq  =  s.substring(0,  s.length()  -  1);  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	char[]  singleq  =  s.substring(0,  s.length()  -  1);	  char[]    singleq    =    s.substring(i,    s.length()    -    1);    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
241	[BUG]  [BUGGY]  String  singleq  =  s.substring(i,  s.length());  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  String  singleq  =  s.substring(i,  s.length());  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	String  singleq  =  s.substring(i,  s.length());	  char[]    singleq    =    s.substring(i,    s.length()    -    1);    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
242	[BUG]  [BUGGY]  char[]  singleq  =  s.substring(i,  s.length()  +  1);  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  char[]  singleq  =  s.substring(i,  s.length()  +  1);  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	char[]  singleq  =  s.substring(i,  s.length()  +  1);	  char[]    singleq    =    s.substring(i,    s.length()    -    1);    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
243	[BUG]  [BUGGY]  char[]  singleq  =  outputCharsetEncoder.substring(i,  s.length()  -  1);  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  char[]  singleq  =  outputCharsetEncoder.substring(i,  s.length()  -  1);  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	char[]  singleq  =  outputCharsetEncoder.substring(i,  s.length()  -  1);	  char[]    singleq    =    s.substring(i,    s.length()    -    1);    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
244	[BUG]  [BUGGY]  s  =  outputCharsetEncoder.trim();  break;  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  s  =  outputCharsetEncoder.trim();  break;  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	s  =  outputCharsetEncoder.trim();  break;	  s    =    s.trim();    break;    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
245	[BUG]  [BUGGY]  s  =  s.substring(i,  s.length()  -  1);  break;  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  s  =  s.substring(i,  s.length()  -  1);  break;  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	s  =  s.substring(i,  s.length()  -  1);  break;	  s    =    s.trim();    break;    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
246	[BUG]  [BUGGY]  s  =  s.substring(0,  i);  break;  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  s  =  s.substring(0,  i);  break;  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	s  =  s.substring(0,  i);  break;	  s    =    s.trim();    break;    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
247	[BUG]  [BUGGY]  s  =  s.trim()  +  i;  break;  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  s  =  s.trim()  +  i;  break;  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	s  =  s.trim()  +  i;  break;	  s    =    s.trim();    break;    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
248	[BUG]  [BUGGY]  s  =  s.substring(i,  s.length());  break;  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  s  =  s.substring(i,  s.length());  break;  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	s  =  s.substring(i,  s.length());  break;	  s    =    s.trim();    break;    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
249	[BUG]  [BUGGY]  String  quote  =  s.substring(0,  i  +  1);  break;  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  String  quote  =  s.substring(0,  i  +  1);  break;  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	String  quote  =  s.substring(0,  i  +  1);  break;	  String    quote    =    s.substring(0,    i);    break;    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
250	[BUG]  [BUGGY]  String  quote  =  s.substring(0,  i).trim();  break;  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  String  quote  =  s.substring(0,  i).trim();  break;  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	String  quote  =  s.substring(0,  i).trim();  break;	  String    quote    =    s.substring(0,    i);    break;    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
251	[BUG]  [BUGGY]  String  quote  =  s.substring(0,  i  +  1,  s.length());  break;  [CE]  illegal  start  of  expression  [FE]                                    ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  String  quote  =  s.substring(0,  i  +  1,  s.length());  break;  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	String  quote  =  s.substring(0,  i  +  1,  s.length());  break;	  String    quote    =    s.substring(0,    i);    break;    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
252	[BUG]  [BUGGY]  String  quote  =  s.substring(0,  i)+  1;  break;  [CE]  illegal  start  of  expression  [FE]                                      ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  String  quote  =  s.substring(0,  i)+  1;  break;  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	String  quote  =  s.substring(0,  i)+  1;  break;	  String    quote    =    s.substring(0,    i);    break;    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
253	[BUG]  [BUGGY]  String  quote  =  s.substring(0,  i  +  2);  break;  [CE]  illegal  start  of  expression  [FE]                                        ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  String  quote  =  s.substring(0,  i  +  2);  break;  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	String  quote  =  s.substring(0,  i  +  2);  break;	  String    quote    =    s.substring(0,    i);    break;    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
254	[BUG]  [BUGGY]  switch(s.charAt(i),  outputCharsetEncoder,  0,  s.length())  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  switch(s.charAt(i),  outputCharsetEncoder,  0,  s.length())  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	switch(s.charAt(i),  outputCharsetEncoder,  0,  s.length())  {	  switch(s.charAt(i),    outputCharsetEncoder,    0)    {    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
255	[BUG]  [BUGGY]  switch(s.charAt(i),  singleq,  0)  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  switch(s.charAt(i),  singleq,  0)  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	switch(s.charAt(i),  singleq,  0)  {	  switch(s.charAt(i),    outputCharsetEncoder,    0)    {    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
256	[BUG]  [BUGGY]  switch(s.charAt(i),  outputCharsetEncoder,  0,  0)  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  switch(s.charAt(i),  outputCharsetEncoder,  0,  0)  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	switch(s.charAt(i),  outputCharsetEncoder,  0,  0)  {	  switch(s.charAt(i),    outputCharsetEncoder,    0)    {    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
257	[BUG]  [BUGGY]  switch(s.charAt(i),  outputCharsetEncoder,  0,  false)  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  switch(s.charAt(i),  outputCharsetEncoder,  0,  false)  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	switch(s.charAt(i),  outputCharsetEncoder,  0,  false)  {	  switch(s.charAt(i),    outputCharsetEncoder,    0)    {    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
258	[BUG]  [BUGGY]  switch(s.charAt(i),  outputCharsetEncoder,  0,  true)  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  switch(s.charAt(i),  outputCharsetEncoder,  0,  true)  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	switch(s.charAt(i),  outputCharsetEncoder,  0,  true)  {	  switch(s.charAt(i),    outputCharsetEncoder,    0)    {    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
259	[BUG]  [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.encode(s,  i  +  1);  break;  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.encode(s,  i  +  1);  break;  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	CharsetEncoder  cc  =  outputCharsetEncoder.encode(s,  i  +  1);  break;	  CharsetEncoder    cc    =    outputCharsetEncoder.encode(s,    i);    break;    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
260	[BUG]  [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.encode(s,  i,  singleq);  break;  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.encode(s,  i,  singleq);  break;  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	CharsetEncoder  cc  =  outputCharsetEncoder.encode(s,  i,  singleq);  break;	  CharsetEncoder    cc    =    outputCharsetEncoder.encode(s,    i);    break;    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
261	[BUG]  [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.encode(s,  i  +  1,  s.length());  break;  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.encode(s,  i  +  1,  s.length());  break;  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	CharsetEncoder  cc  =  outputCharsetEncoder.encode(s,  i  +  1,  s.length());  break;	  CharsetEncoder    cc    =    outputCharsetEncoder.encode(s,    i);    break;    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
262	[BUG]  [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.encode(s,  i++);  break;  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.encode(s,  i++);  break;  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	CharsetEncoder  cc  =  outputCharsetEncoder.encode(s,  i++);  break;	  CharsetEncoder    cc    =    outputCharsetEncoder.encode(s,    i);    break;    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
263	[BUG]  [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.encode(s,  i  +  1,  singleq);  break;  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.encode(s,  i  +  1,  singleq);  break;  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	CharsetEncoder  cc  =  outputCharsetEncoder.encode(s,  i  +  1,  singleq);  break;	  CharsetEncoder    cc    =    outputCharsetEncoder.encode(s,    i);    break;    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
264	[BUG]  [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.encode(s,  i  +  2);  break;  [CE]  illegal  start  of  expression  [FE]                                    ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.encode(s,  i  +  2);  break;  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	CharsetEncoder  cc  =  outputCharsetEncoder.encode(s,  i  +  2);  break;	  CharsetEncoder    cc    =    outputCharsetEncoder.encode(s,    i);    break;    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
265	[BUG]  [BUGGY]  switch(s.substring(i  +  1),  outputCharsetEncoder.length())  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  switch(s.substring(i  +  1),  outputCharsetEncoder.length())  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	switch(s.substring(i  +  1),  outputCharsetEncoder.length())  {	  switch(s.substring(i    +    1),    s.length())    {    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
266	[BUG]  [BUGGY]  switch(s.substring(i  +  1),  outputCharsetEncoder.toLowerCase())  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  switch(s.substring(i  +  1),  outputCharsetEncoder.toLowerCase())  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	switch(s.substring(i  +  1),  outputCharsetEncoder.toLowerCase())  {	  switch(s.substring(i    +    1),    s.length())    {    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
267	[BUG]  [BUGGY]  switch(s.substring(i  +  1),  outputCharsetEncoder.charAt(i),  s.length())  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  switch(s.substring(i  +  1),  outputCharsetEncoder.charAt(i),  s.length())  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	switch(s.substring(i  +  1),  outputCharsetEncoder.charAt(i),  s.length())  {	  switch(s.substring(i    +    1),    s.length())    {    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
268	[BUG]  [BUGGY]  switch(s.substring(i  +  1),  outputCharsetEncoder.jsString())  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  switch(s.substring(i  +  1),  outputCharsetEncoder.jsString())  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	switch(s.substring(i  +  1),  outputCharsetEncoder.jsString())  {	  switch(s.substring(i    +    1),    s.length())    {    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
269	[BUG]  [BUGGY]  switch(s.substring(i  +  1),  outputCharsetEncoder.endsWith(s[i]))  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  switch(s.substring(i  +  1),  outputCharsetEncoder.endsWith(s[i]))  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	switch(s.substring(i  +  1),  outputCharsetEncoder.endsWith(s[i]))  {	  switch(s.substring(i    +    1),    s.length())    {    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
270	[BUG]  [BUGGY]  char  quote  =  s.charAt(i)+  2;  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  char  quote  =  s.charAt(i)+  2;  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	char  quote  =  s.charAt(i)+  2;	  char    quote    =    s.charAt(i)+    1;    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
271	[BUG]  [BUGGY]  char  quote  =  s.charAt(i)+  3;  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  char  quote  =  s.charAt(i)+  3;  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	char  quote  =  s.charAt(i)+  3;	  char    quote    =    s.charAt(i)+    1;    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
272	[BUG]  [BUGGY]  char  quote  =  s.charAt(i)+  4;  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  char  quote  =  s.charAt(i)+  4;  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	char  quote  =  s.charAt(i)+  4;	  char    quote    =    s.charAt(i)+    1;    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
273	[BUG]  [BUGGY]  char  quote  =  s.charAt(i)+  5;  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  char  quote  =  s.charAt(i)+  5;  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	char  quote  =  s.charAt(i)+  5;	  char    quote    =    s.charAt(i)+    1;    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
274	[BUG]  [BUGGY]  char  quote  =  s.charAt(i)+  6;  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  char  quote  =  s.charAt(i)+  6;  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	char  quote  =  s.charAt(i)+  6;	  char    quote    =    s.charAt(i)+    1;    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
275	[BUG]  [BUGGY]  switch(s.substring(i  +  1),  s.charAt(i  +  2))  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  switch(s.substring(i  +  1),  s.charAt(i  +  2))  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	switch(s.substring(i  +  1),  s.charAt(i  +  2))  {	  switch(s.substring(i    +    1),    s.charAt(i    +    1))    {    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
276	[BUG]  [BUGGY]  switch(s.substring(i  +  1),  s.charAt(i  +  1)||  s.charAt(i  +  1))  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  switch(s.substring(i  +  1),  s.charAt(i  +  1)||  s.charAt(i  +  1))  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	switch(s.substring(i  +  1),  s.charAt(i  +  1)||  s.charAt(i  +  1))  {	  switch(s.substring(i    +    1),    s.charAt(i    +    1))    {    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
277	[BUG]  [BUGGY]  switch(s.substring(i  +  1,  s.charAt(i  +  1)))  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  switch(s.substring(i  +  1,  s.charAt(i  +  1)))  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	switch(s.substring(i  +  1,  s.charAt(i  +  1)))  {	  switch(s.substring(i    +    1),    s.charAt(i    +    1))    {    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
278	[BUG]  [BUGGY]  char  quote  =  s.substring(i  +  1,  s.charAt(i  +  1))  {  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  char  quote  =  s.substring(i  +  1,  s.charAt(i  +  1))  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	char  quote  =  s.substring(i  +  1,  s.charAt(i  +  1))  {	  switch(s.substring(i    +    1),    s.charAt(i    +    1))    {    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
279	[BUG]  [BUGGY]  CharSequence  s  =  s.substring(i  +  1,  s.charAt(i  +  1));  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  CharSequence  s  =  s.substring(i  +  1,  s.charAt(i  +  1));  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	CharSequence  s  =  s.substring(i  +  1,  s.charAt(i  +  1));	  switch(s.substring(i    +    1),    s.charAt(i    +    1))    {    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
280	[BUG]  [BUGGY]  switch(s.substring(i,  i  +  1),  s.charAt(i  +  1))  {  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  switch(s.substring(i,  i  +  1),  s.charAt(i  +  1))  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	switch(s.substring(i,  i  +  1),  s.charAt(i  +  1))  {	  switch(s.substring(i    +    1),    s.charAt(i    +    1))    {    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
281	[BUG]  [BUGGY]  char[]  singleq  =  s.toCharArray(i,  outputCharsetEncoder);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  char[]  singleq  =  s.toCharArray(i,  outputCharsetEncoder);  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	char[]  singleq  =  s.toCharArray(i,  outputCharsetEncoder);	  char[]    singleq    =    s.toCharArray(i);    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
282	[BUG]  [BUGGY]  char[]  singleq  =  s.toCharArray(i  +  1);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  char[]  singleq  =  s.toCharArray(i  +  1);  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	char[]  singleq  =  s.toCharArray(i  +  1);	  char[]    singleq    =    s.toCharArray(i);    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
283	[BUG]  [BUGGY]  char[]  singleq  =  s.toCharArray(i),  outputCharsetEncoder);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  char[]  singleq  =  s.toCharArray(i),  outputCharsetEncoder);  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	char[]  singleq  =  s.toCharArray(i),  outputCharsetEncoder);	  char[]    singleq    =    s.toCharArray(i);    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
284	[BUG]  [BUGGY]  char[]  singleq  =  s.toCharArray(i  +  1,  s.length());  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  char[]  singleq  =  s.toCharArray(i  +  1,  s.length());  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	char[]  singleq  =  s.toCharArray(i  +  1,  s.length());	  char[]    singleq    =    s.toCharArray(i);    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
285	[BUG]  [BUGGY]  char[]  singleq  =  s.toCharArray(i)+  1;  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  char[]  singleq  =  s.toCharArray(i)+  1;  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	char[]  singleq  =  s.toCharArray(i)+  1;	  char[]    singleq    =    s.toCharArray(i);    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
286	[BUG]  [BUGGY]  CharTypes.int[]  singleq  =  s.toCharArray();  switch(outputCharsetEncoder.charAt(i))  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  CharTypes.int[]  singleq  =  s.toCharArray();  switch(outputCharsetEncoder.charAt(i))  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	CharTypes.int[]  singleq  =  s.toCharArray();  switch(outputCharsetEncoder.charAt(i))  {	  CharTypes.int[]    singleq    =    s.toCharArray();    switch(s.charAt(i))    {    	non-compiled	[CE]  illegal  start  of  expression	102	None	replace
287	[BUG]  [BUGGY]  CharTypes.int[]  singleq  =  s.toCharArray();  switch(s.charAt(i,  singleq))  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  CharTypes.int[]  singleq  =  s.toCharArray();  switch(s.charAt(i,  singleq))  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	CharTypes.int[]  singleq  =  s.toCharArray();  switch(s.charAt(i,  singleq))  {	  CharTypes.int[]    singleq    =    s.toCharArray();    switch(s.charAt(i))    {    	non-compiled	[CE]  illegal  start  of  expression	102	None	replace
288	[BUG]  [BUGGY]  CharTypes.int[]  singleq  =  s.toCharArray();  switch(s.charAt(0))  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  CharTypes.int[]  singleq  =  s.toCharArray();  switch(s.charAt(0))  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	CharTypes.int[]  singleq  =  s.toCharArray();  switch(s.charAt(0))  {	  CharTypes.int[]    singleq    =    s.toCharArray();    switch(s.charAt(i))    {    	non-compiled	[CE]  illegal  start  of  expression	102	None	replace
289	[BUG]  [BUGGY]  CharTypes.int[]  singleq  =  s.toCharArray();  switch(s.charAt(i  +  1))  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  CharTypes.int[]  singleq  =  s.toCharArray();  switch(s.charAt(i  +  1))  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	CharTypes.int[]  singleq  =  s.toCharArray();  switch(s.charAt(i  +  1))  {	  CharTypes.int[]    singleq    =    s.toCharArray();    switch(s.charAt(i))    {    	non-compiled	[CE]  illegal  start  of  expression	102	None	replace
290	[BUG]  [BUGGY]  CharTypes.int[]  singleq  =  s.toCharArray();  switch(s.charAt(i),  doubleq)  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  CharTypes.int[]  singleq  =  s.toCharArray();  switch(s.charAt(i),  doubleq)  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	CharTypes.int[]  singleq  =  s.toCharArray();  switch(s.charAt(i),  doubleq)  {	  CharTypes.int[]    singleq    =    s.toCharArray();    switch(s.charAt(i))    {    	non-compiled	[CE]  illegal  start  of  expression	102	None	replace
291	[BUG]  [BUGGY]  CharsetEncoder  outputCharsetEncoder  =  outputCharsetEncoder.encode(s,  i  +  1);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  CharsetEncoder  outputCharsetEncoder  =  outputCharsetEncoder.encode(s,  i  +  1);  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	CharsetEncoder  outputCharsetEncoder  =  outputCharsetEncoder.encode(s,  i  +  1);	  CharsetEncoder    outputCharsetEncoder    =    outputCharsetEncoder.encode(s,    i);    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
292	[BUG]  [BUGGY]  CharsetEncoder  outputCharsetEncoder  =  outputCharsetEncoder.encode(s,  i  +  1,  s.length());  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  CharsetEncoder  outputCharsetEncoder  =  outputCharsetEncoder.encode(s,  i  +  1,  s.length());  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	CharsetEncoder  outputCharsetEncoder  =  outputCharsetEncoder.encode(s,  i  +  1,  s.length());	  CharsetEncoder    outputCharsetEncoder    =    outputCharsetEncoder.encode(s,    i);    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
293	[BUG]  [BUGGY]  CharsetEncoder  outputCharsetEncoder  =  s.encode(outputCharsetEncoder,  i);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  CharsetEncoder  outputCharsetEncoder  =  s.encode(outputCharsetEncoder,  i);  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	CharsetEncoder  outputCharsetEncoder  =  s.encode(outputCharsetEncoder,  i);	  CharsetEncoder    outputCharsetEncoder    =    outputCharsetEncoder.encode(s,    i);    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
294	[BUG]  [BUGGY]  CharsetEncoder  outputCharsetEncoder  =  s.encode(i);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  CharsetEncoder  outputCharsetEncoder  =  s.encode(i);  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	CharsetEncoder  outputCharsetEncoder  =  s.encode(i);	  CharsetEncoder    outputCharsetEncoder    =    outputCharsetEncoder.encode(s,    i);    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
295	[BUG]  [BUGGY]  CharsetEncoder  outputCharsetEncoder  =  s.encode(i,  outputCharsetEncoder);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  CharsetEncoder  outputCharsetEncoder  =  s.encode(i,  outputCharsetEncoder);  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	CharsetEncoder  outputCharsetEncoder  =  s.encode(i,  outputCharsetEncoder);	  CharsetEncoder    outputCharsetEncoder    =    outputCharsetEncoder.encode(s,    i);    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
296	[BUG]  [BUGGY]  CharsetEncoder  outputCharsetEncoder  =  outputCharsetEncoder.encode(s,  i  +  2);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  CharsetEncoder  outputCharsetEncoder  =  outputCharsetEncoder.encode(s,  i  +  2);  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	CharsetEncoder  outputCharsetEncoder  =  outputCharsetEncoder.encode(s,  i  +  2);	  CharsetEncoder    outputCharsetEncoder    =    outputCharsetEncoder.encode(s,    i);    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
297	[BUG]  [BUGGY]  String  quote  =  s.charAt(i).trim();  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  String  quote  =  s.charAt(i).trim();  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	String  quote  =  s.charAt(i).trim();	  char    quote    =    s.charAt(i).trim();    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
298	[BUG]  [BUGGY]  char  quote  =  s.charAt(i).toLowerCase();  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  char  quote  =  s.charAt(i).toLowerCase();  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	char  quote  =  s.charAt(i).toLowerCase();	  char    quote    =    s.charAt(i).trim();    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
299	[BUG]  [BUGGY]  char  quote  =  s.charAt(i).trim()  +  1;  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  char  quote  =  s.charAt(i).trim()  +  1;  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	char  quote  =  s.charAt(i).trim()  +  1;	  char    quote    =    s.charAt(i).trim();    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
300	[BUG]  [BUGGY]  char  quote  =  s.charAt(i).toCharArray();  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  char  quote  =  s.charAt(i).toCharArray();  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	char  quote  =  s.charAt(i).toCharArray();	  char    quote    =    s.charAt(i).trim();    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
301	[BUG]  [BUGGY]  char[]  singleq  =  s.substring(i  +  1,  s.length()  -  1);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  char[]  singleq  =  s.substring(i  +  1,  s.length()  -  1);  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	char[]  singleq  =  s.substring(i  +  1,  s.length()  -  1);	  char[]    singleq    =    s.substring(i    +    1,    s.length());    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
302	[BUG]  [BUGGY]  char[]  singleq  =  s.substring(i  +  1,  s.length()  -  2);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  char[]  singleq  =  s.substring(i  +  1,  s.length()  -  2);  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	char[]  singleq  =  s.substring(i  +  1,  s.length()  -  2);	  char[]    singleq    =    s.substring(i    +    1,    s.length());    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
303	[BUG]  [BUGGY]  char[]  singleq  =  s.substring(i  +  1,  s.length()  +  1);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  char[]  singleq  =  s.substring(i  +  1,  s.length()  +  1);  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	char[]  singleq  =  s.substring(i  +  1,  s.length()  +  1);	  char[]    singleq    =    s.substring(i    +    1,    s.length());    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
304	[BUG]  [BUGGY]  char[]  singleq  =  s.substring(i  +  1,  s.length()  -  4);  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  char[]  singleq  =  s.substring(i  +  1,  s.length()  -  4);  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	char[]  singleq  =  s.substring(i  +  1,  s.length()  -  4);	  char[]    singleq    =    s.substring(i    +    1,    s.length());    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
305	[BUG]  [BUGGY]  char[]  singleq  =  s.substring(i  +  1,  s.length()  *  2);  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  char[]  singleq  =  s.substring(i  +  1,  s.length()  *  2);  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	char[]  singleq  =  s.substring(i  +  1,  s.length()  *  2);	  char[]    singleq    =    s.substring(i    +    1,    s.length());    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
306	[BUG]  [BUGGY]  char[]  singleq  =  s.substring(i  +  1,  s.length()  -  3);  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  char[]  singleq  =  s.substring(i  +  1,  s.length()  -  3);  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	char[]  singleq  =  s.substring(i  +  1,  s.length()  -  3);	  char[]    singleq    =    s.substring(i    +    1,    s.length());    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
307	[BUG]  [BUGGY]  String  singleq  =  s.toCharArray(i);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  String  singleq  =  s.toCharArray(i);  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	String  singleq  =  s.toCharArray(i);	  String    singleq    =    s.toCharArray();    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
308	[BUG]  [BUGGY]  String  singleq  =  s.substring(i  +  1,  s.length());  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  String  singleq  =  s.substring(i  +  1,  s.length());  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	String  singleq  =  s.substring(i  +  1,  s.length());	  String    singleq    =    s.toCharArray();    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
309	[BUG]  [BUGGY]  String  singleq  =  s.substring(i,  s.length()  -  1);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  String  singleq  =  s.substring(i,  s.length()  -  1);  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	String  singleq  =  s.substring(i,  s.length()  -  1);	  String    singleq    =    s.toCharArray();    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
310	[BUG]  [BUGGY]  String  singleq  =  s.substring(i  +  1);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  String  singleq  =  s.substring(i  +  1);  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	String  singleq  =  s.substring(i  +  1);	  String    singleq    =    s.toCharArray();    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
311	[BUG]  [BUGGY]  String  singleq  =  s.substring(i);  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  String  singleq  =  s.substring(i);  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	String  singleq  =  s.substring(i);	  String    singleq    =    s.toCharArray();    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
312	[BUG]  [BUGGY]  String  singleq  =  s.substring(0,  i);  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  String  singleq  =  s.substring(0,  i);  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	String  singleq  =  s.substring(0,  i);	  String    singleq    =    s.toCharArray();    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
313	[BUG]  [BUGGY]  switch(s.charAt(i),  doubleq)  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  switch(s.charAt(i),  doubleq)  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	switch(s.charAt(i),  doubleq)  {	  switch(s.charAt(i),    singleq)    {    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
314	[BUG]  [BUGGY]  switch(s.charAt(i),  quote)  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  switch(s.charAt(i),  quote)  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	switch(s.charAt(i),  quote)  {	  switch(s.charAt(i),    singleq)    {    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
315	[BUG]  [BUGGY]  switch(s.charAt(i),  singleq,  quote)  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  switch(s.charAt(i),  singleq,  quote)  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	switch(s.charAt(i),  singleq,  quote)  {	  switch(s.charAt(i),    singleq)    {    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
316	[BUG]  [BUGGY]  switch(s.charAt(i),  singleq  -  1)  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  switch(s.charAt(i),  singleq  -  1)  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	switch(s.charAt(i),  singleq  -  1)  {	  switch(s.charAt(i),    singleq)    {    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
317	[BUG]  [BUGGY]  CharsetEncoder[]  singleq  =  s.toCharArray();  switch(singleq[i],  outputCharsetEncoder)  {  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  CharsetEncoder[]  singleq  =  s.toCharArray();  switch(singleq[i],  outputCharsetEncoder)  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	CharsetEncoder[]  singleq  =  s.toCharArray();  switch(singleq[i],  outputCharsetEncoder)  {	  char[]    singleq    =    s.toCharArray();    switch(singleq[i],    outputCharsetEncoder)    {    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
318	[BUG]  [BUGGY]  CharsetEncoder  singleq  =  s.toCharArray();  switch(singleq[i],  outputCharsetEncoder)  {  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  CharsetEncoder  singleq  =  s.toCharArray();  switch(singleq[i],  outputCharsetEncoder)  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	CharsetEncoder  singleq  =  s.toCharArray();  switch(singleq[i],  outputCharsetEncoder)  {	  char[]    singleq    =    s.toCharArray();    switch(singleq[i],    outputCharsetEncoder)    {    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
319	[BUG]  [BUGGY]  CharsetEncoder  singleq  =  outputCharsetEncoder.toCharArray();  switch(singleq[i],  outputCharsetEncoder)  {  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  CharsetEncoder  singleq  =  outputCharsetEncoder.toCharArray();  switch(singleq[i],  outputCharsetEncoder)  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	CharsetEncoder  singleq  =  outputCharsetEncoder.toCharArray();  switch(singleq[i],  outputCharsetEncoder)  {	  char[]    singleq    =    s.toCharArray();    switch(singleq[i],    outputCharsetEncoder)    {    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
320	[BUG]  [BUGGY]  CharsetEncoder  outputCharsetEncoder  =  outputCharsetEncoder.toCharArray();  switch(s[i],  outputCharsetEncoder)  {  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  CharsetEncoder  outputCharsetEncoder  =  outputCharsetEncoder.toCharArray();  switch(s[i],  outputCharsetEncoder)  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	CharsetEncoder  outputCharsetEncoder  =  outputCharsetEncoder.toCharArray();  switch(s[i],  outputCharsetEncoder)  {	  char[]    singleq    =    s.toCharArray();    switch(singleq[i],    outputCharsetEncoder)    {    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
321	[BUG]  [BUGGY]  CharsetEncoder  singleq  =  outputCharsetEncoder.toCharArray();  switch(singleq[i],  s)  {  [CE]  illegal  start  of  expression  [FE]                                    ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  CharsetEncoder  singleq  =  outputCharsetEncoder.toCharArray();  switch(singleq[i],  s)  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	CharsetEncoder  singleq  =  outputCharsetEncoder.toCharArray();  switch(singleq[i],  s)  {	  char[]    singleq    =    s.toCharArray();    switch(singleq[i],    outputCharsetEncoder)    {    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
322	[BUG]  [BUGGY]  switch(s.charAt(i)||  outputCharsetEncoder.charAt(i)  ==  ''')  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  switch(s.charAt(i)||  outputCharsetEncoder.charAt(i)  ==  ''')  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	switch(s.charAt(i)||  outputCharsetEncoder.charAt(i)  ==  ''')  {	  switch(outputCharsetEncoder.charAt(i)||    s.charAt(i)    ==    ''')    {    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
323	[BUG]  [BUGGY]  switch(s.charAt(i)||  outputCharsetEncoder.charAt(i)!=  ''')  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  switch(s.charAt(i)||  outputCharsetEncoder.charAt(i)!=  ''')  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	switch(s.charAt(i)||  outputCharsetEncoder.charAt(i)!=  ''')  {	  switch(outputCharsetEncoder.charAt(i)||    s.charAt(i)    ==    ''')    {    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
324	[BUG]  [BUGGY]  switch(s.charAt(i)||  inputCharsetEncoder.charAt(i)  ==  ''')  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  switch(s.charAt(i)||  inputCharsetEncoder.charAt(i)  ==  ''')  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	switch(s.charAt(i)||  inputCharsetEncoder.charAt(i)  ==  ''')  {	  switch(outputCharsetEncoder.charAt(i)||    s.charAt(i)    ==    ''')    {    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
325	[BUG]  [BUGGY]  switch(s.charAt(i)||  s.charAt(i)  ==  ''')  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  switch(s.charAt(i)||  s.charAt(i)  ==  ''')  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	switch(s.charAt(i)||  s.charAt(i)  ==  ''')  {	  switch(outputCharsetEncoder.charAt(i)||    s.charAt(i)    ==    ''')    {    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
326	[BUG]  [BUGGY]  Switch(s.charAt(i)||  outputCharsetEncoder.charAt(i)  ==  ''')  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  Switch(s.charAt(i)||  outputCharsetEncoder.charAt(i)  ==  ''')  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	Switch(s.charAt(i)||  outputCharsetEncoder.charAt(i)  ==  ''')  {	  switch(outputCharsetEncoder.charAt(i)||    s.charAt(i)    ==    ''')    {    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
327	[BUG]  [BUGGY]  switch(s.substring(0,  i),  singleq)  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  switch(s.substring(0,  i),  singleq)  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	switch(s.substring(0,  i),  singleq)  {	  switch(s.substring(0,    i))    {    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
328	[BUG]  [BUGGY]  switch(s.substring(0,  i),  doubleq)  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  switch(s.substring(0,  i),  doubleq)  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	switch(s.substring(0,  i),  doubleq)  {	  switch(s.substring(0,    i))    {    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
329	[BUG]  [BUGGY]  switch(s.substring(0,  i)+  1)  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  switch(s.substring(0,  i)+  1)  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	switch(s.substring(0,  i)+  1)  {	  switch(s.substring(0,    i))    {    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
330	[BUG]  [BUGGY]  CharSequence  s  =  outputCharsetEncoder.toCharArray();  switch(s[i])  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  CharSequence  s  =  outputCharsetEncoder.toCharArray();  switch(s[i])  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	CharSequence  s  =  outputCharsetEncoder.toCharArray();  switch(s[i])  {	  CharSequence    s    =    s.toCharArray();    switch(singleq[i])    {    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
331	[BUG]  [BUGGY]  CharSequence  s  =  outputCharsetEncoder.toCharArray();  switch(s,  singleq[i])  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  CharSequence  s  =  outputCharsetEncoder.toCharArray();  switch(s,  singleq[i])  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	CharSequence  s  =  outputCharsetEncoder.toCharArray();  switch(s,  singleq[i])  {	  CharSequence    s    =    s.toCharArray();    switch(singleq[i])    {    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
332	[BUG]  [BUGGY]  CharSequence  s  =  outputCharsetEncoder.toCharArray();  switch(singleq[i])  {  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  CharSequence  s  =  outputCharsetEncoder.toCharArray();  switch(singleq[i])  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	CharSequence  s  =  outputCharsetEncoder.toCharArray();  switch(singleq[i])  {	  CharSequence    s    =    s.toCharArray();    switch(singleq[i])    {    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
333	[BUG]  [BUGGY]  CharSequence  s  =  outputCharsetEncoder.toCharArray();  switch(s.substring(i,  singleq))  {  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  CharSequence  s  =  outputCharsetEncoder.toCharArray();  switch(s.substring(i,  singleq))  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	CharSequence  s  =  outputCharsetEncoder.toCharArray();  switch(s.substring(i,  singleq))  {	  CharSequence    s    =    s.toCharArray();    switch(singleq[i])    {    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
334	[BUG]  [BUGGY]  CharSequence  s  =  outputCharsetEncoder.toCharArray();  switch(symbol[i])  {  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  CharSequence  s  =  outputCharsetEncoder.toCharArray();  switch(symbol[i])  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	CharSequence  s  =  outputCharsetEncoder.toCharArray();  switch(symbol[i])  {	  CharSequence    s    =    s.toCharArray();    switch(singleq[i])    {    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
335	[BUG]  [BUGGY]  switch(s.jsString(i,  outputCharsetEncoder))  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  switch(s.jsString(i,  outputCharsetEncoder))  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	switch(s.jsString(i,  outputCharsetEncoder))  {	  switch(outputCharsetEncoder.jsString(s,    i))    {    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
336	[BUG]  [BUGGY]  switch(s.jsString(outputCharsetEncoder,  i))  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  switch(s.jsString(outputCharsetEncoder,  i))  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	switch(s.jsString(outputCharsetEncoder,  i))  {	  switch(outputCharsetEncoder.jsString(s,    i))    {    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
337	[BUG]  [BUGGY]  switch(outputCharsetEncoder.jsString(s,  i),  singleq)  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  switch(outputCharsetEncoder.jsString(s,  i),  singleq)  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	switch(outputCharsetEncoder.jsString(s,  i),  singleq)  {	  switch(outputCharsetEncoder.jsString(s,    i))    {    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
338	[BUG]  [BUGGY]  switch(outputCharsetEncoder.jsString(s,  i),  doubleq)  {  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  switch(outputCharsetEncoder.jsString(s,  i),  doubleq)  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	switch(outputCharsetEncoder.jsString(s,  i),  doubleq)  {	  switch(outputCharsetEncoder.jsString(s,    i))    {    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
339	[BUG]  [BUGGY]  switch(s.substring(i,  outputCharsetEncoder.jsString(s,  i)))  {  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  switch(s.substring(i,  outputCharsetEncoder.jsString(s,  i)))  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	switch(s.substring(i,  outputCharsetEncoder.jsString(s,  i)))  {	  switch(outputCharsetEncoder.jsString(s,    i))    {    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
340	[BUG]  [BUGGY]  switch(outputCharsetEncoder.jsString(s,  i),  quote)  {  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  switch(outputCharsetEncoder.jsString(s,  i),  quote)  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	switch(outputCharsetEncoder.jsString(s,  i),  quote)  {	  switch(outputCharsetEncoder.jsString(s,    i))    {    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
341	[BUG]  [BUGGY]  switch(s.getQualifiedName())  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  switch(s.getQualifiedName())  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	switch(s.getQualifiedName())  {	  switch(s.getString())    {    	non-compiled	[CE]  illegal  start  of  expression	107	None	replace
342	[BUG]  [BUGGY]  switch(s.getString(),  i)  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  switch(s.getString(),  i)  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	switch(s.getString(),  i)  {	  switch(s.getString())    {    	non-compiled	[CE]  illegal  start  of  expression	107	None	replace
343	[BUG]  [BUGGY]  switch(s.getString(),  outputCharsetEncoder)  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  switch(s.getString(),  outputCharsetEncoder)  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	switch(s.getString(),  outputCharsetEncoder)  {	  switch(s.getString())    {    	non-compiled	[CE]  illegal  start  of  expression	107	None	replace
344	[BUG]  [BUGGY]  switch(s.getLineno())  {  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  switch(s.getLineno())  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	switch(s.getLineno())  {	  switch(s.getString())    {    	non-compiled	[CE]  illegal  start  of  expression	107	None	replace
345	[BUG]  [BUGGY]  switch(s.getString()  +  i)  {  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  switch(s.getString()  +  i)  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	switch(s.getString()  +  i)  {	  switch(s.getString())    {    	non-compiled	[CE]  illegal  start  of  expression	107	None	replace
346	[BUG]  [BUGGY]  switch(s.jsString(i))  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  switch(s.jsString(i))  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	switch(s.jsString(i))  {	  switch(outputCharsetEncoder.jsString(i))    {    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
347	[BUG]  [BUGGY]  switch(s.substring(i,  outputCharsetEncoder.jsString(i)))  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  switch(s.substring(i,  outputCharsetEncoder.jsString(i)))  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	switch(s.substring(i,  outputCharsetEncoder.jsString(i)))  {	  switch(outputCharsetEncoder.jsString(i))    {    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
348	[BUG]  [BUGGY]  switch(s,  outputCharsetEncoder.jsString(i))  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  switch(s,  outputCharsetEncoder.jsString(i))  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	switch(s,  outputCharsetEncoder.jsString(i))  {	  switch(outputCharsetEncoder.jsString(i))    {    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
349	[BUG]  [BUGGY]  switch(s.substring(i,  outputCharsetEncoder.jsString(i),  singleq))  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  switch(s.substring(i,  outputCharsetEncoder.jsString(i),  singleq))  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	switch(s.substring(i,  outputCharsetEncoder.jsString(i),  singleq))  {	  switch(outputCharsetEncoder.jsString(i))    {    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
350	[BUG]  [BUGGY]  switch(s.substring(i,  doubleq  -  1))  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  switch(s.substring(i,  doubleq  -  1))  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	switch(s.substring(i,  doubleq  -  1))  {	  switch(s.substring(i,    doubleq))    {    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
351	[BUG]  [BUGGY]  char  quote  =  s.charAt(i  +  1);  break;  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  char  quote  =  s.charAt(i  +  1);  break;  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	char  quote  =  s.charAt(i  +  1);  break;	  char    quote    =    s.charAt(i);    break;    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
352	[BUG]  [BUGGY]  String  quote  =  s.charAt(i);  break;  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  String  quote  =  s.charAt(i);  break;  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	String  quote  =  s.charAt(i);  break;	  char    quote    =    s.charAt(i);    break;    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
353	[BUG]  [BUGGY]  char  quote  =  s.charAt(i,  singleq);  break;  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  char  quote  =  s.charAt(i,  singleq);  break;  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	char  quote  =  s.charAt(i,  singleq);  break;	  char    quote    =    s.charAt(i);    break;    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
354	[BUG]  [BUGGY]  char  quote  =  s.charAt(i)+  1;  break;  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  char  quote  =  s.charAt(i)+  1;  break;  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	char  quote  =  s.charAt(i)+  1;  break;	  char    quote    =    s.charAt(i);    break;    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
355	[BUG]  [BUGGY]  String  quote  =  s.charAt(i++);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  String  quote  =  s.charAt(i++);  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	String  quote  =  s.charAt(i++);	  char    quote    =    s.charAt(i++);    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
356	[BUG]  [BUGGY]  char  quote  =  s.charAt(i++)+  1;  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  char  quote  =  s.charAt(i++)+  1;  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	char  quote  =  s.charAt(i++)+  1;	  char    quote    =    s.charAt(i++);    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
357	[BUG]  [BUGGY]  char  quote  =  s.charAt(i,  singleq++);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  char  quote  =  s.charAt(i,  singleq++);  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	char  quote  =  s.charAt(i,  singleq++);	  char    quote    =    s.charAt(i++);    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
358	[BUG]  [BUGGY]  char  quote  =  s.charAt(i));  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  char  quote  =  s.charAt(i));  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	char  quote  =  s.charAt(i));	  char    quote    =    s.charAt(i++);    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
359	[BUG]  [BUGGY]  CharTypes.int[]  singleq  =  s.toCharArray();  switch(singleq[i],  outputCharsetEncoder)  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  CharTypes.int[]  singleq  =  s.toCharArray();  switch(singleq[i],  outputCharsetEncoder)  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	CharTypes.int[]  singleq  =  s.toCharArray();  switch(singleq[i],  outputCharsetEncoder)  {	  CharTypes.int[]    singleq    =    s.toCharArray();    switch(singleq[i])    {    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
360	[BUG]  [BUGGY]  CharTypes.int[]  singleq  =  s.toCharArray();  switch(singleq[i],  doubleq)  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  CharTypes.int[]  singleq  =  s.toCharArray();  switch(singleq[i],  doubleq)  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	CharTypes.int[]  singleq  =  s.toCharArray();  switch(singleq[i],  doubleq)  {	  CharTypes.int[]    singleq    =    s.toCharArray();    switch(singleq[i])    {    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
361	[BUG]  [BUGGY]  CharTypes.int[]  singleq  =  outputCharsetEncoder.toCharArray();  switch(singleq[i])  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  CharTypes.int[]  singleq  =  outputCharsetEncoder.toCharArray();  switch(singleq[i])  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	CharTypes.int[]  singleq  =  outputCharsetEncoder.toCharArray();  switch(singleq[i])  {	  CharTypes.int[]    singleq    =    s.toCharArray();    switch(singleq[i])    {    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
362	[BUG]  [BUGGY]  CharTypes.int[]  singleq  =  s.toCharArray();  switch(singleq[i],  quote)  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  CharTypes.int[]  singleq  =  s.toCharArray();  switch(singleq[i],  quote)  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	CharTypes.int[]  singleq  =  s.toCharArray();  switch(singleq[i],  quote)  {	  CharTypes.int[]    singleq    =    s.toCharArray();    switch(singleq[i])    {    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
363	[BUG]  [BUGGY]  CharTypes.char[]  singleq  =  s.toCharArray();  switch(singleq[i])  {  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  CharTypes.char[]  singleq  =  s.toCharArray();  switch(singleq[i])  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	CharTypes.char[]  singleq  =  s.toCharArray();  switch(singleq[i])  {	  CharTypes.int[]    singleq    =    s.toCharArray();    switch(singleq[i])    {    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
364	[BUG]  [BUGGY]  CharTypes.int[]  singleq  =  s.toCharArray();  switch(singleq[i].charAt(i))  {  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  CharTypes.int[]  singleq  =  s.toCharArray();  switch(singleq[i].charAt(i))  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	CharTypes.int[]  singleq  =  s.toCharArray();  switch(singleq[i].charAt(i))  {	  CharTypes.int[]    singleq    =    s.toCharArray();    switch(singleq[i])    {    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
365	[BUG]  [BUGGY]  switch(s.charAt(i)||  outputCharsetEncoder.charAt(i)!=  '-')  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  switch(s.charAt(i)||  outputCharsetEncoder.charAt(i)!=  '-')  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	switch(s.charAt(i)||  outputCharsetEncoder.charAt(i)!=  '-')  {	  switch(outputCharsetEncoder.charAt(i)||    s.charAt(i)!=    '-')    {    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
366	[BUG]  [BUGGY]  switch(s.charAt(i)||  outputCharsetEncoder.charAt(i)  ==  '-')  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  switch(s.charAt(i)||  outputCharsetEncoder.charAt(i)  ==  '-')  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	switch(s.charAt(i)||  outputCharsetEncoder.charAt(i)  ==  '-')  {	  switch(outputCharsetEncoder.charAt(i)||    s.charAt(i)!=    '-')    {    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
367	[BUG]  [BUGGY]  switch(s.charAt(i)||  inputCharsetEncoder.charAt(i)!=  '-')  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  switch(s.charAt(i)||  inputCharsetEncoder.charAt(i)!=  '-')  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	switch(s.charAt(i)||  inputCharsetEncoder.charAt(i)!=  '-')  {	  switch(outputCharsetEncoder.charAt(i)||    s.charAt(i)!=    '-')    {    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
368	[BUG]  [BUGGY]  switch(s.charAt(i)||  outputCharsetEncoder.charAt(i)  >=  '-')  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  switch(s.charAt(i)||  outputCharsetEncoder.charAt(i)  >=  '-')  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	switch(s.charAt(i)||  outputCharsetEncoder.charAt(i)  >=  '-')  {	  switch(outputCharsetEncoder.charAt(i)||    s.charAt(i)!=    '-')    {    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
369	[BUG]  [BUGGY]  switch(s.charAt(i)||  outputCharsetEncoder.charAt(i)  >>  '-')  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  switch(s.charAt(i)||  outputCharsetEncoder.charAt(i)  >>  '-')  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	switch(s.charAt(i)||  outputCharsetEncoder.charAt(i)  >>  '-')  {	  switch(outputCharsetEncoder.charAt(i)||    s.charAt(i)!=    '-')    {    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
370	[BUG]  [BUGGY]  Switch(s.charAt(i)||  outputCharsetEncoder.charAt(i)!=  '-')  {  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  Switch(s.charAt(i)||  outputCharsetEncoder.charAt(i)!=  '-')  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	Switch(s.charAt(i)||  outputCharsetEncoder.charAt(i)!=  '-')  {	  switch(outputCharsetEncoder.charAt(i)||    s.charAt(i)!=    '-')    {    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
371	[BUG]  [BUGGY]  switch(s,  outputCharsetEncoder.jsString(),  quote)  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  switch(s,  outputCharsetEncoder.jsString(),  quote)  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	switch(s,  outputCharsetEncoder.jsString(),  quote)  {	  switch(s,    outputCharsetEncoder.jsString())    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
372	[BUG]  [BUGGY]  switch(s,  i.jsString())  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  switch(s,  i.jsString())  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	switch(s,  i.jsString())  {	  switch(s,    outputCharsetEncoder.jsString())    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
373	[BUG]  [BUGGY]  switch(s,  outputCharsetEncoder.toString())  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  switch(s,  outputCharsetEncoder.toString())  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	switch(s,  outputCharsetEncoder.toString())  {	  switch(s,    outputCharsetEncoder.jsString())    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
374	[BUG]  [BUGGY]  switch(s,  outputCharsetEncoder.jsString()  +  i)  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  switch(s,  outputCharsetEncoder.jsString()  +  i)  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	switch(s,  outputCharsetEncoder.jsString()  +  i)  {	  switch(s,    outputCharsetEncoder.jsString())    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
375	[BUG]  [BUGGY]  switch(s.charAt(i)||  outputCharsetEncoder.charAt(i)  >=  ''')  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  switch(s.charAt(i)||  outputCharsetEncoder.charAt(i)  >=  ''')  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	switch(s.charAt(i)||  outputCharsetEncoder.charAt(i)  >=  ''')  {	  switch(outputCharsetEncoder.charAt(i)||    s.charAt(i)!=    ''')    {    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
376	[BUG]  [BUGGY]  switch(s.charAt(i)||  inputCharsetEncoder.charAt(i)!=  ''')  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  switch(s.charAt(i)||  inputCharsetEncoder.charAt(i)!=  ''')  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	switch(s.charAt(i)||  inputCharsetEncoder.charAt(i)!=  ''')  {	  switch(outputCharsetEncoder.charAt(i)||    s.charAt(i)!=    ''')    {    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
377	[BUG]  [BUGGY]  switch(s.charAt(i)||  outputCharsetEncoder.charAt(i)  >>  ''')  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  switch(s.charAt(i)||  outputCharsetEncoder.charAt(i)  >>  ''')  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	switch(s.charAt(i)||  outputCharsetEncoder.charAt(i)  >>  ''')  {	  switch(outputCharsetEncoder.charAt(i)||    s.charAt(i)!=    ''')    {    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
378	[BUG]  [BUGGY]  Switch(s.charAt(i)||  outputCharsetEncoder.charAt(i)!=  ''')  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  Switch(s.charAt(i)||  outputCharsetEncoder.charAt(i)!=  ''')  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	Switch(s.charAt(i)||  outputCharsetEncoder.charAt(i)!=  ''')  {	  switch(outputCharsetEncoder.charAt(i)||    s.charAt(i)!=    ''')    {    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
379	[BUG]  [BUGGY]  switch(s.substring(i),  s.length()  +  1)  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  switch(s.substring(i),  s.length()  +  1)  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	switch(s.substring(i),  s.length()  +  1)  {	  switch(s.substring(i),    s.length())    {    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
380	[BUG]  [BUGGY]  switch(s.substring(0,  i),  s.length())  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  switch(s.substring(0,  i),  s.length())  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	switch(s.substring(0,  i),  s.length())  {	  switch(s.substring(i),    s.length())    {    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
381	[BUG]  [BUGGY]  switch(s.substring(i)+  1),  s.length())  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  switch(s.substring(i)+  1),  s.length())  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	switch(s.substring(i)+  1),  s.length())  {	  switch(s.substring(i),    s.length())    {    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
382	[BUG]  [BUGGY]  CharSequence  s  =  inputCharsetEncoder.toCharArray();  switch(s.charAt(i))  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  CharSequence  s  =  inputCharsetEncoder.toCharArray();  switch(s.charAt(i))  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	CharSequence  s  =  inputCharsetEncoder.toCharArray();  switch(s.charAt(i))  {	  CharSequence    s    =    s.toCharArray();    switch(s.charAt(i))    {    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
383	[BUG]  [BUGGY]  CharSequence  s  =  outputCharsetEncoder.toString();  switch(s.charAt(i))  {  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  CharSequence  s  =  outputCharsetEncoder.toString();  switch(s.charAt(i))  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	CharSequence  s  =  outputCharsetEncoder.toString();  switch(s.charAt(i))  {	  CharSequence    s    =    s.toCharArray();    switch(s.charAt(i))    {    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
384	[BUG]  [BUGGY]  CharSequence  s  =  outputCharsetEncoder.charAt(i);  switch(s.charAt(i))  {  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  CharSequence  s  =  outputCharsetEncoder.charAt(i);  switch(s.charAt(i))  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	CharSequence  s  =  outputCharsetEncoder.charAt(i);  switch(s.charAt(i))  {	  CharSequence    s    =    s.toCharArray();    switch(s.charAt(i))    {    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
385	[BUG]  [BUGGY]  CharSequence  s  =  outputCharsetEncoder.toCharArray(i);  switch(s.charAt(i))  {  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  CharSequence  s  =  outputCharsetEncoder.toCharArray(i);  switch(s.charAt(i))  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	CharSequence  s  =  outputCharsetEncoder.toCharArray(i);  switch(s.charAt(i))  {	  CharSequence    s    =    s.toCharArray();    switch(s.charAt(i))    {    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
386	[BUG]  [BUGGY]  CharacterSequence  s  =  s.toCharArray();  switch(s.charAt(i))  {  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  CharacterSequence  s  =  s.toCharArray();  switch(s.charAt(i))  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	CharacterSequence  s  =  s.toCharArray();  switch(s.charAt(i))  {	  CharSequence    s    =    s.toCharArray();    switch(s.charAt(i))    {    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
387	[BUG]  [BUGGY]  String  quote  =  s.charAt(i];  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  String  quote  =  s.charAt(i];  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	String  quote  =  s.charAt(i];	  char    quote    =    s.charAt(i];    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
388	[BUG]  [BUGGY]  char  quote  =  s.charAt(i]  +  1;  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  char  quote  =  s.charAt(i]  +  1;  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	char  quote  =  s.charAt(i]  +  1;	  char    quote    =    s.charAt(i];    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
389	[BUG]  [BUGGY]  char  quote  =  s.charAt(i],  singleq);  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  char  quote  =  s.charAt(i],  singleq);  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	char  quote  =  s.charAt(i],  singleq);	  char    quote    =    s.charAt(i];    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
390	[BUG]  [BUGGY]  switch(s.charAt(i)),  singleq)  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  switch(s.charAt(i)),  singleq)  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	switch(s.charAt(i)),  singleq)  {	  switch(s.charAt(i)),    outputCharsetEncoder)    {    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
391	[BUG]  [BUGGY]  switch(s.substring(i)),  outputCharsetEncoder)  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  switch(s.substring(i)),  outputCharsetEncoder)  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	switch(s.substring(i)),  outputCharsetEncoder)  {	  switch(s.charAt(i)),    outputCharsetEncoder)    {    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
392	[BUG]  [BUGGY]  switch(s.charAt(i)),  this.outputCharsetEncoder)  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  switch(s.charAt(i)),  this.outputCharsetEncoder)  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	switch(s.charAt(i)),  this.outputCharsetEncoder)  {	  switch(s.charAt(i)),    outputCharsetEncoder)    {    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
393	[BUG]  [BUGGY]  switch(s.charAt(i)),  inputCharsetEncoder)  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  switch(s.charAt(i)),  inputCharsetEncoder)  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	switch(s.charAt(i)),  inputCharsetEncoder)  {	  switch(s.charAt(i)),    outputCharsetEncoder)    {    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
394	[BUG]  [BUGGY]  switch(s.charAt(i)),  quote)  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  switch(s.charAt(i)),  quote)  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	switch(s.charAt(i)),  quote)  {	  switch(s.charAt(i)),    outputCharsetEncoder)    {    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
395	[BUG]  [BUGGY]  switch(s.substring(i,  outputCharsetEncoder))  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  switch(s.substring(i,  outputCharsetEncoder))  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	switch(s.substring(i,  outputCharsetEncoder))  {	  switch(outputCharsetEncoder.substring(i,    i))    {    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
396	[BUG]  [BUGGY]  switch(s.substring(i,  outputCharsetEncoder.id))  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  switch(s.substring(i,  outputCharsetEncoder.id))  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	switch(s.substring(i,  outputCharsetEncoder.id))  {	  switch(outputCharsetEncoder.substring(i,    i))    {    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
397	[BUG]  [BUGGY]  switch(s.substring(i,  outputCharsetEncoder.lastIndexOf(i)))  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  switch(s.substring(i,  outputCharsetEncoder.lastIndexOf(i)))  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	switch(s.substring(i,  outputCharsetEncoder.lastIndexOf(i)))  {	  switch(outputCharsetEncoder.substring(i,    i))    {    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
398	[BUG]  [BUGGY]  switch(s.substring(i,  outputCharsetEncoder.i))  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  switch(s.substring(i,  outputCharsetEncoder.i))  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	switch(s.substring(i,  outputCharsetEncoder.i))  {	  switch(outputCharsetEncoder.substring(i,    i))    {    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
399	[BUG]  [BUGGY]  switch(s.substring(i,  outputCharsetEncoder.indexOf(i)))  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  switch(s.substring(i,  outputCharsetEncoder.indexOf(i)))  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	switch(s.substring(i,  outputCharsetEncoder.indexOf(i)))  {	  switch(outputCharsetEncoder.substring(i,    i))    {    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
400	[BUG]  [BUGGY]  switch(s.substring(i  +  1,  doubleq))  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  switch(s.substring(i  +  1,  doubleq))  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	switch(s.substring(i  +  1,  doubleq))  {	  switch(s.substring(i    +    1,    i))    {    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
401	[BUG]  [BUGGY]  switch(s.substring(i,  singleq  +  1,  i))  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  switch(s.substring(i,  singleq  +  1,  i))  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	switch(s.substring(i,  singleq  +  1,  i))  {	  switch(s.substring(i    +    1,    i))    {    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
402	[BUG]  [BUGGY]  CharTypes.Char[]  singleq  =  s.toCharArray();  switch(s.charAt(i))  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  CharTypes.Char[]  singleq  =  s.toCharArray();  switch(s.charAt(i))  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	CharTypes.Char[]  singleq  =  s.toCharArray();  switch(s.charAt(i))  {	  CharTypes.char[]    singleq    =    s.toCharArray();    switch(s.charAt(i))    {    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
403	[BUG]  [BUGGY]  CharTypes.String[]  singleq  =  s.toCharArray();  switch(s.charAt(i))  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  CharTypes.String[]  singleq  =  s.toCharArray();  switch(s.charAt(i))  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	CharTypes.String[]  singleq  =  s.toCharArray();  switch(s.charAt(i))  {	  CharTypes.char[]    singleq    =    s.toCharArray();    switch(s.charAt(i))    {    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
404	[BUG]  [BUGGY]  CharTypes.char[]  singleq  =  s.toCharArray();  switch(s.charAt(i  +  1))  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  CharTypes.char[]  singleq  =  s.toCharArray();  switch(s.charAt(i  +  1))  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	CharTypes.char[]  singleq  =  s.toCharArray();  switch(s.charAt(i  +  1))  {	  CharTypes.char[]    singleq    =    s.toCharArray();    switch(s.charAt(i))    {    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
405	[BUG]  [BUGGY]  s  =  s.substring(i  +  1,  s.length()  -  1);  break;  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  s  =  s.substring(i  +  1,  s.length()  -  1);  break;  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	s  =  s.substring(i  +  1,  s.length()  -  1);  break;	  s    =    s.substring(i    +    1,    s.length());    break;    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
406	[BUG]  [BUGGY]  s  =  s.substring(i  +  1,  s.length()  +  1);  break;  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  s  =  s.substring(i  +  1,  s.length()  +  1);  break;  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	s  =  s.substring(i  +  1,  s.length()  +  1);  break;	  s    =    s.substring(i    +    1,    s.length());    break;    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
407	[BUG]  [BUGGY]  s  =  s.substring(i  +  1,  s.length()  -  2);  break;  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  s  =  s.substring(i  +  1,  s.length()  -  2);  break;  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	s  =  s.substring(i  +  1,  s.length()  -  2);  break;	  s    =    s.substring(i    +    1,    s.length());    break;    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
408	[BUG]  [BUGGY]  s  =  s.substring(i  +  1,  s.length()  *  2);  break;  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  s  =  s.substring(i  +  1,  s.length()  *  2);  break;  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	s  =  s.substring(i  +  1,  s.length()  *  2);  break;	  s    =    s.substring(i    +    1,    s.length());    break;    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
409	[BUG]  [BUGGY]  s  =  s.substring(i  +  1,  s.length()  -  1);  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  s  =  s.substring(i  +  1,  s.length()  -  1);  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	s  =  s.substring(i  +  1,  s.length()  -  1);	  s    =    s.substring(i    +    1,    s.length());    break;    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
410	[BUG]  [BUGGY]  s  =  s.substring(i  +  1,  s.length());  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  s  =  s.substring(i  +  1,  s.length());  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	s  =  s.substring(i  +  1,  s.length());	  s    =    s.substring(i    +    1,    s.length());    break;    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
411	[BUG]  [BUGGY]  Char[]  singleq  =  outputCharsetEncoder.toCharArray();  switch(singleq[i])  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  Char[]  singleq  =  outputCharsetEncoder.toCharArray();  switch(singleq[i])  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	Char[]  singleq  =  outputCharsetEncoder.toCharArray();  switch(singleq[i])  {	  Char[]    singleq    =    s.toCharArray();    switch(singleq[i])    {    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
412	[BUG]  [BUGGY]  Char[]  singleq  =  s.toCharArray();  switch(singleq[i],  doubleq)  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  Char[]  singleq  =  s.toCharArray();  switch(singleq[i],  doubleq)  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	Char[]  singleq  =  s.toCharArray();  switch(singleq[i],  doubleq)  {	  Char[]    singleq    =    s.toCharArray();    switch(singleq[i])    {    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
413	[BUG]  [BUGGY]  Char[]  singleq  =  s.toCharArray();  switch(singleq[i],  outputCharsetEncoder)  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  Char[]  singleq  =  s.toCharArray();  switch(singleq[i],  outputCharsetEncoder)  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	Char[]  singleq  =  s.toCharArray();  switch(singleq[i],  outputCharsetEncoder)  {	  Char[]    singleq    =    s.toCharArray();    switch(singleq[i])    {    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
414	[BUG]  [BUGGY]  Char[]  singleq  =  s.toCharArray();  switch(singleq[i],  quote)  {  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  Char[]  singleq  =  s.toCharArray();  switch(singleq[i],  quote)  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	Char[]  singleq  =  s.toCharArray();  switch(singleq[i],  quote)  {	  Char[]    singleq    =    s.toCharArray();    switch(singleq[i])    {    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
415	[BUG]  [BUGGY]  Char[]  singleq  =  s.toCharArray();  switch(singleq[i].charAt(i))  {  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  Char[]  singleq  =  s.toCharArray();  switch(singleq[i].charAt(i))  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	Char[]  singleq  =  s.toCharArray();  switch(singleq[i].charAt(i))  {	  Char[]    singleq    =    s.toCharArray();    switch(singleq[i])    {    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
416	[BUG]  [BUGGY]  switch(s.charAt(i),  outputCharsetEncoder,  true)  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  switch(s.charAt(i),  outputCharsetEncoder,  true)  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	switch(s.charAt(i),  outputCharsetEncoder,  true)  {	  switch(s.charAt(i),    outputCharsetEncoder,    false)    {    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
417	[BUG]  [BUGGY]  switch(s.charAt(i),  singleq,  false)  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  switch(s.charAt(i),  singleq,  false)  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	switch(s.charAt(i),  singleq,  false)  {	  switch(s.charAt(i),    outputCharsetEncoder,    false)    {    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
418	[BUG]  [BUGGY]  switch(s.substring(i),  outputCharsetEncoder,  false)  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  switch(s.substring(i),  outputCharsetEncoder,  false)  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	switch(s.substring(i),  outputCharsetEncoder,  false)  {	  switch(s.charAt(i),    outputCharsetEncoder,    false)    {    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
419	[BUG]  [BUGGY]  switch(s.charAt(i),  outputCharsetEncoder,  null)  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  switch(s.charAt(i),  outputCharsetEncoder,  null)  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	switch(s.charAt(i),  outputCharsetEncoder,  null)  {	  switch(s.charAt(i),    outputCharsetEncoder,    false)    {    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
420	[BUG]  [BUGGY]  switch(s.charAt(i),  s,  false)  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  switch(s.charAt(i),  s,  false)  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	switch(s.charAt(i),  s,  false)  {	  switch(s.charAt(i),    outputCharsetEncoder,    false)    {    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
421	[BUG]  [BUGGY]  Char[]  singleq  =  s.toCharArray();  switch(s.charAt(0))  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  Char[]  singleq  =  s.toCharArray();  switch(s.charAt(0))  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	Char[]  singleq  =  s.toCharArray();  switch(s.charAt(0))  {	  Char[]    singleq    =    s.toCharArray();    switch(s.charAt(i))    {    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
422	[BUG]  [BUGGY]  Char[]  singleq  =  s.toCharArray();  switch(outputCharsetEncoder.charAt(i))  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  Char[]  singleq  =  s.toCharArray();  switch(outputCharsetEncoder.charAt(i))  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	Char[]  singleq  =  s.toCharArray();  switch(outputCharsetEncoder.charAt(i))  {	  Char[]    singleq    =    s.toCharArray();    switch(s.charAt(i))    {    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
423	[BUG]  [BUGGY]  Char[]  singleq  =  s.toCharArray();  switch(s.charAt(i  +  1))  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  Char[]  singleq  =  s.toCharArray();  switch(s.charAt(i  +  1))  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	Char[]  singleq  =  s.toCharArray();  switch(s.charAt(i  +  1))  {	  Char[]    singleq    =    s.toCharArray();    switch(s.charAt(i))    {    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
424	[BUG]  [BUGGY]  CharType[]  singleq  =  s.toCharArray();  switch(s.charAt(i))  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  CharType[]  singleq  =  s.toCharArray();  switch(s.charAt(i))  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	CharType[]  singleq  =  s.toCharArray();  switch(s.charAt(i))  {	  Char[]    singleq    =    s.toCharArray();    switch(s.charAt(i))    {    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
425	[BUG]  [BUGGY]  Switch(s.jsString(),  outputCharsetEncoder)  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  Switch(s.jsString(),  outputCharsetEncoder)  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	Switch(s.jsString(),  outputCharsetEncoder)  {	  switch(outputCharsetEncoder.jsString(),    s)    {    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
426	[BUG]  [BUGGY]  switch(s.hsString(),  outputCharsetEncoder)  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  switch(s.hsString(),  outputCharsetEncoder)  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	switch(s.hsString(),  outputCharsetEncoder)  {	  switch(outputCharsetEncoder.jsString(),    s)    {    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
427	[BUG]  [BUGGY]  switch(outputCharsetEncoder.jsString(),  s,  quote)  {  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  switch(outputCharsetEncoder.jsString(),  s,  quote)  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	switch(outputCharsetEncoder.jsString(),  s,  quote)  {	  switch(outputCharsetEncoder.jsString(),    s)    {    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
428	[BUG]  [BUGGY]  String  singleq  =  outputCharsetEncoder.toCharArray();  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  String  singleq  =  outputCharsetEncoder.toCharArray();  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	String  singleq  =  outputCharsetEncoder.toCharArray();	  char[]    singleq    =    outputCharsetEncoder.toCharArray();    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
429	[BUG]  [BUGGY]  Char[]  singleq  =  s.toCharArray();  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  Char[]  singleq  =  s.toCharArray();  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	Char[]  singleq  =  s.toCharArray();	  char[]    singleq    =    outputCharsetEncoder.toCharArray();    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
430	[BUG]  [BUGGY]  CharSequence  singleq  =  s.toCharArray(i);  switch(singleq[i])  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  CharSequence  singleq  =  s.toCharArray(i);  switch(singleq[i])  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	CharSequence  singleq  =  s.toCharArray(i);  switch(singleq[i])  {	  CharSequence    char[]    singleq    =    s.toCharArray();    switch(singleq[i])    {    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
431	[BUG]  [BUGGY]  CharSequence  singleq  =  outputCharsetEncoder.toCharArray();  switch(singleq[i])  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  CharSequence  singleq  =  outputCharsetEncoder.toCharArray();  switch(singleq[i])  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	CharSequence  singleq  =  outputCharsetEncoder.toCharArray();  switch(singleq[i])  {	  CharSequence    char[]    singleq    =    s.toCharArray();    switch(singleq[i])    {    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
432	[BUG]  [BUGGY]  CharSequence  <?>  singleq  =  s.toCharArray();  switch(singleq[i])  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  CharSequence  <?>  singleq  =  s.toCharArray();  switch(singleq[i])  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	CharSequence  <?>  singleq  =  s.toCharArray();  switch(singleq[i])  {	  CharSequence    char[]    singleq    =    s.toCharArray();    switch(singleq[i])    {    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
433	[BUG]  [BUGGY]  CharSequence  singleq  =  s.toCharArray();  switch(singleq[i].charAt(i))  {  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  CharSequence  singleq  =  s.toCharArray();  switch(singleq[i].charAt(i))  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	CharSequence  singleq  =  s.toCharArray();  switch(singleq[i].charAt(i))  {	  CharSequence    char[]    singleq    =    s.toCharArray();    switch(singleq[i])    {    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
434	[BUG]  [BUGGY]  switch(s.toLowerCase())  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  switch(s.toLowerCase())  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	switch(s.toLowerCase())  {	  switch(s.hashCode())    {    	non-compiled	[CE]  illegal  start  of  expression	105	None	replace
435	[BUG]  [BUGGY]  switch(s.hashCode(),  i)  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  switch(s.hashCode(),  i)  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	switch(s.hashCode(),  i)  {	  switch(s.hashCode())    {    	non-compiled	[CE]  illegal  start  of  expression	105	None	replace
436	[BUG]  [BUGGY]  switch(outputCharsetEncoder.substring(i,  s.length()))  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  switch(outputCharsetEncoder.substring(i,  s.length()))  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	switch(outputCharsetEncoder.substring(i,  s.length()))  {	  switch(outputCharsetEncoder.substring(i))    {    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
437	[BUG]  [BUGGY]  switch(outputCharsetEncoder.substring(i,  singleq))  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  switch(outputCharsetEncoder.substring(i,  singleq))  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	switch(outputCharsetEncoder.substring(i,  singleq))  {	  switch(outputCharsetEncoder.substring(i))    {    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
438	[BUG]  [BUGGY]  switch(outputCharsetEncoder.substring(s,  i))  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  switch(outputCharsetEncoder.substring(s,  i))  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	switch(outputCharsetEncoder.substring(s,  i))  {	  switch(outputCharsetEncoder.substring(i))    {    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
439	[BUG]  [BUGGY]  String  quote  =  jsString(s,  outputCharsetEncoder,  quote);  break;  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  String  quote  =  jsString(s,  outputCharsetEncoder,  quote);  break;  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	String  quote  =  jsString(s,  outputCharsetEncoder,  quote);  break;	  String    quote    =    jsString(s,    outputCharsetEncoder);    break;    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
440	[BUG]  [BUGGY]  String  quote  =  jsString(s,  outputCharsetEncoder,  singleq);  break;  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  String  quote  =  jsString(s,  outputCharsetEncoder,  singleq);  break;  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	String  quote  =  jsString(s,  outputCharsetEncoder,  singleq);  break;	  String    quote    =    jsString(s,    outputCharsetEncoder);    break;    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
441	[BUG]  [BUGGY]  String  quote  =  jsString(s,  outputCharsetEncoder,  doubleq);  break;  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  String  quote  =  jsString(s,  outputCharsetEncoder,  doubleq);  break;  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	String  quote  =  jsString(s,  outputCharsetEncoder,  doubleq);  break;	  String    quote    =    jsString(s,    outputCharsetEncoder);    break;    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
442	[BUG]  [BUGGY]  String  quote  =  jsString(s,  outputCharsetEncoder,  1);  break;  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  String  quote  =  jsString(s,  outputCharsetEncoder,  1);  break;  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	String  quote  =  jsString(s,  outputCharsetEncoder,  1);  break;	  String    quote    =    jsString(s,    outputCharsetEncoder);    break;    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
443	[BUG]  [BUGGY]  String  quote  =  jsString(s,  outputCharsetEncoder,  false);  break;  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  String  quote  =  jsString(s,  outputCharsetEncoder,  false);  break;  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	String  quote  =  jsString(s,  outputCharsetEncoder,  false);  break;	  String    quote    =    jsString(s,    outputCharsetEncoder);    break;    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
444	[BUG]  [BUGGY]  String  quote  =  jsString(s,  outputCharsetEncoder,  Double.POSITIVE_INFINITY);  break;  [CE]  illegal  start  of  expression  [FE]                                    ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  String  quote  =  jsString(s,  outputCharsetEncoder,  Double.POSITIVE_INFINITY);  break;  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	String  quote  =  jsString(s,  outputCharsetEncoder,  Double.POSITIVE_INFINITY);  break;	  String    quote    =    jsString(s,    outputCharsetEncoder);    break;    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
445	[BUG]  [BUGGY]  switch(s.charAt(i  +  1),  singleq)  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  switch(s.charAt(i  +  1),  singleq)  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	switch(s.charAt(i  +  1),  singleq)  {	  switch(s.charAt(i    +    1),    outputCharsetEncoder)    {    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
446	[BUG]  [BUGGY]  switch(s.charAt(i  +  1),  outputCharsetEncoder,  quote)  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  switch(s.charAt(i  +  1),  outputCharsetEncoder,  quote)  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	switch(s.charAt(i  +  1),  outputCharsetEncoder,  quote)  {	  switch(s.charAt(i    +    1),    outputCharsetEncoder)    {    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
447	[BUG]  [BUGGY]  switch(s.charAt(i)+  1,  outputCharsetEncoder)  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  switch(s.charAt(i)+  1,  outputCharsetEncoder)  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	switch(s.charAt(i)+  1,  outputCharsetEncoder)  {	  switch(s.charAt(i    +    1),    outputCharsetEncoder)    {    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
448	[BUG]  [BUGGY]  switch(s.charAt(i  +  1),  outputCharsetEncoder),  singleq)  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  switch(s.charAt(i  +  1),  outputCharsetEncoder),  singleq)  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	switch(s.charAt(i  +  1),  outputCharsetEncoder),  singleq)  {	  switch(s.charAt(i    +    1),    outputCharsetEncoder)    {    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
449	[BUG]  [BUGGY]  char  quote  =  s.charAt(i  +  1),  outputCharsetEncoder)  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  char  quote  =  s.charAt(i  +  1),  outputCharsetEncoder)  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	char  quote  =  s.charAt(i  +  1),  outputCharsetEncoder)  {	  switch(s.charAt(i    +    1),    outputCharsetEncoder)    {    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
450	[BUG]  [BUGGY]  String  quote  =  jsString(s,  outputCharsetEncoder,  quote);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  String  quote  =  jsString(s,  outputCharsetEncoder,  quote);  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	String  quote  =  jsString(s,  outputCharsetEncoder,  quote);	  String    quote    =    jsString(s,    outputCharsetEncoder);    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
451	[BUG]  [BUGGY]  String  quote  =  jsString(s,  outputCharsetEncoder,  doubleq);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  String  quote  =  jsString(s,  outputCharsetEncoder,  doubleq);  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	String  quote  =  jsString(s,  outputCharsetEncoder,  doubleq);	  String    quote    =    jsString(s,    outputCharsetEncoder);    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
452	[BUG]  [BUGGY]  String  quote  =  jsString(s,  outputCharsetEncoder,  1);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  String  quote  =  jsString(s,  outputCharsetEncoder,  1);  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	String  quote  =  jsString(s,  outputCharsetEncoder,  1);	  String    quote    =    jsString(s,    outputCharsetEncoder);    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
453	[BUG]  [BUGGY]  String  quote  =  jsString(s,  outputCharsetEncoder,  Double.POSITIVE_INFINITY);  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  String  quote  =  jsString(s,  outputCharsetEncoder,  Double.POSITIVE_INFINITY);  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	String  quote  =  jsString(s,  outputCharsetEncoder,  Double.POSITIVE_INFINITY);	  String    quote    =    jsString(s,    outputCharsetEncoder);    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
454	[BUG]  [BUGGY]  String  quote  =  jsString(s,  outputCharsetEncoder,  Double.parseDouble(i));  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  String  quote  =  jsString(s,  outputCharsetEncoder,  Double.parseDouble(i));  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	String  quote  =  jsString(s,  outputCharsetEncoder,  Double.parseDouble(i));	  String    quote    =    jsString(s,    outputCharsetEncoder);    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
455	[BUG]  [BUGGY]  String  quote  =  jsString(s,  outputCharsetEncoder,  false);  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  String  quote  =  jsString(s,  outputCharsetEncoder,  false);  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	String  quote  =  jsString(s,  outputCharsetEncoder,  false);	  String    quote    =    jsString(s,    outputCharsetEncoder);    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
456	[BUG]  [BUGGY]  switch(s.charAt(i),  quote,  outputCharsetEncoder)  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  switch(s.charAt(i),  quote,  outputCharsetEncoder)  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	switch(s.charAt(i),  quote,  outputCharsetEncoder)  {	  switch(s.charAt(i),    outputCharsetEncoder,    quote)    {    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
457	[BUG]  [BUGGY]  switch(s.charAt(i),  singleq,  outputCharsetEncoder)  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  switch(s.charAt(i),  singleq,  outputCharsetEncoder)  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	switch(s.charAt(i),  singleq,  outputCharsetEncoder)  {	  switch(s.charAt(i),    outputCharsetEncoder,    quote)    {    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
458	[BUG]  [BUGGY]  CharsetEncoder  consumer  =  s.charAt(i);  switch(consume.charAt(i),  outputCharsetEncoder,  quote)  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  CharsetEncoder  consumer  =  s.charAt(i);  switch(consume.charAt(i),  outputCharsetEncoder,  quote)  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	CharsetEncoder  consumer  =  s.charAt(i);  switch(consume.charAt(i),  outputCharsetEncoder,  quote)  {	  switch(s.charAt(i),    outputCharsetEncoder,    quote)    {    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
459	[BUG]  [BUGGY]  switch(s.charAt(i),  singleq,  s.charAt(i))  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  switch(s.charAt(i),  singleq,  s.charAt(i))  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	switch(s.charAt(i),  singleq,  s.charAt(i))  {	  switch(s.charAt(i),    outputCharsetEncoder,    quote)    {    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
460	[BUG]  [BUGGY]  CharsetEncoder  consumer  =  s.charAt(i);  switch(consume,  outputCharsetEncoder,  quote)  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  CharsetEncoder  consumer  =  s.charAt(i);  switch(consume,  outputCharsetEncoder,  quote)  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	CharsetEncoder  consumer  =  s.charAt(i);  switch(consume,  outputCharsetEncoder,  quote)  {	  switch(s.charAt(i),    outputCharsetEncoder,    quote)    {    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
461	[BUG]  [BUGGY]  switch(s.charAt(i),  quotes,  outputCharsetEncoder)  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  switch(s.charAt(i),  quotes,  outputCharsetEncoder)  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	switch(s.charAt(i),  quotes,  outputCharsetEncoder)  {	  switch(s.charAt(i),    outputCharsetEncoder,    quote)    {    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
462	[BUG]  [BUGGY]  switch(s.charAt(i)||  inputCharsetEncoder.charAt(i)  >=  ''')  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  switch(s.charAt(i)||  inputCharsetEncoder.charAt(i)  >=  ''')  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	switch(s.charAt(i)||  inputCharsetEncoder.charAt(i)  >=  ''')  {	  switch(outputCharsetEncoder.charAt(i)||    s.charAt(i)    >=    ''')    {    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
463	[BUG]  [BUGGY]  switch(s.charAt(i)||  outputCharsetEncoder.charAt(i)  [Delete]  ''')  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  switch(s.charAt(i)||  outputCharsetEncoder.charAt(i)  [Delete]  ''')  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	switch(s.charAt(i)||  outputCharsetEncoder.charAt(i)  [Delete]  ''')  {	  switch(outputCharsetEncoder.charAt(i)||    s.charAt(i)    >=    ''')    {    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
464	[BUG]  [BUGGY]  CharsetEncoder  outputCharsetEncoder  =  outputCharsetEncoder.charAt(i);  switch(s.toCharArray())  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  CharsetEncoder  outputCharsetEncoder  =  outputCharsetEncoder.charAt(i);  switch(s.toCharArray())  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	CharsetEncoder  outputCharsetEncoder  =  outputCharsetEncoder.charAt(i);  switch(s.toCharArray())  {	  char[]    singleq    =    s.toCharArray();    switch(outputCharsetEncoder.charAt(i))    {    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
465	[BUG]  [BUGGY]  CharSetEncoder  outputCharsetEncoder  =  outputCharsetEncoder.charAt(i);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  CharSetEncoder  outputCharsetEncoder  =  outputCharsetEncoder.charAt(i);  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	CharSetEncoder  outputCharsetEncoder  =  outputCharsetEncoder.charAt(i);	  char[]    singleq    =    s.toCharArray();    switch(outputCharsetEncoder.charAt(i))    {    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
466	[BUG]  [BUGGY]  CharsetEncoder  outputCharsetEncoder  =  outputCharsetEncoder.toCharArray();  switch(s.charAt(i))  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  CharsetEncoder  outputCharsetEncoder  =  outputCharsetEncoder.toCharArray();  switch(s.charAt(i))  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	CharsetEncoder  outputCharsetEncoder  =  outputCharsetEncoder.toCharArray();  switch(s.charAt(i))  {	  char[]    singleq    =    s.toCharArray();    switch(outputCharsetEncoder.charAt(i))    {    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
467	[BUG]  [BUGGY]  CharSetEncoder  outputCharsetEncoder  =  outputCharsetEncoder.charAt(i);  switch(s.toCharArray())  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  CharSetEncoder  outputCharsetEncoder  =  outputCharsetEncoder.charAt(i);  switch(s.toCharArray())  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	CharSetEncoder  outputCharsetEncoder  =  outputCharsetEncoder.charAt(i);  switch(s.toCharArray())  {	  char[]    singleq    =    s.toCharArray();    switch(outputCharsetEncoder.charAt(i))    {    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
468	[BUG]  [BUGGY]  CharSequence  singleq  =  s.toString();  switch(singleq[i])  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  CharSequence  singleq  =  s.toString();  switch(singleq[i])  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	CharSequence  singleq  =  s.toString();  switch(singleq[i])  {	  CharSequence    singleq    =    s.toCharArray();    switch(singleq[i])    {    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
469	[BUG]  [BUGGY]  CharSequence  singleq  =  s.toCharArray();  switch(doubleq[i])  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  CharSequence  singleq  =  s.toCharArray();  switch(doubleq[i])  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	CharSequence  singleq  =  s.toCharArray();  switch(doubleq[i])  {	  CharSequence    singleq    =    s.toCharArray();    switch(singleq[i])    {    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
470	[BUG]  [BUGGY]  switch(s.charAt(i),  outputCharsetEncoder,  singleq)  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  switch(s.charAt(i),  outputCharsetEncoder,  singleq)  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	switch(s.charAt(i),  outputCharsetEncoder,  singleq)  {	  switch(s.charAt(i),    outputCharsetEncoder,    quote)    {    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
471	[BUG]  [BUGGY]  switch(s.charAt(i),  outputCharsetEncoder,  doubleq)  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  switch(s.charAt(i),  outputCharsetEncoder,  doubleq)  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	switch(s.charAt(i),  outputCharsetEncoder,  doubleq)  {	  switch(s.charAt(i),    outputCharsetEncoder,    quote)    {    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
472	[BUG]  [BUGGY]  String  quote  =  s.substring(i);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  String  quote  =  s.substring(i);  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	String  quote  =  s.substring(i);	  String    quote    =    s.charAt(i);    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
473	[BUG]  [BUGGY]  String  quote  =  s.substring(i  +  1);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  String  quote  =  s.substring(i  +  1);  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	String  quote  =  s.substring(i  +  1);	  String    quote    =    s.charAt(i);    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
474	[BUG]  [BUGGY]  CharsetEncoder  outputCharsetEncoder  =  outputCharsetEncoder.substring(i  +  1,  s.length());  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  CharsetEncoder  outputCharsetEncoder  =  outputCharsetEncoder.substring(i  +  1,  s.length());  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	CharsetEncoder  outputCharsetEncoder  =  outputCharsetEncoder.substring(i  +  1,  s.length());	  switch(outputCharsetEncoder.substring(i    +    1))    {    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
475	[BUG]  [BUGGY]  CharsetEncoder  outputCharsetEncoder  =  outputCharsetEncoder.substring(i  +  1);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  CharsetEncoder  outputCharsetEncoder  =  outputCharsetEncoder.substring(i  +  1);  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	CharsetEncoder  outputCharsetEncoder  =  outputCharsetEncoder.substring(i  +  1);	  switch(outputCharsetEncoder.substring(i    +    1))    {    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
476	[BUG]  [BUGGY]  switch(s,  outputCharsetEncoder.jsString(),  singleq)  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  switch(s,  outputCharsetEncoder.jsString(),  singleq)  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	switch(s,  outputCharsetEncoder.jsString(),  singleq)  {	  switch(s,    outputCharsetEncoder.jsString())    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
477	[BUG]  [BUGGY]  switch(s,  outputCharsetEncoder.jsString(),  doubleq)  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  switch(s,  outputCharsetEncoder.jsString(),  doubleq)  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	switch(s,  outputCharsetEncoder.jsString(),  doubleq)  {	  switch(s,    outputCharsetEncoder.jsString())    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
478	[BUG]  [BUGGY]  CharsetEncoder  outputCharsetEncoder  =  chars.charAt(i);  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  CharsetEncoder  outputCharsetEncoder  =  chars.charAt(i);  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	CharsetEncoder  outputCharsetEncoder  =  chars.charAt(i);	  CharsetEncoder    outputCharsetEncoder    =    outputCharsetEncoder.charAt(i);    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
479	[BUG]  [BUGGY]  CharsetEncoder  outputCharsetEncoder  =  inputCharsetEncoder.charAt(i);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  CharsetEncoder  outputCharsetEncoder  =  inputCharsetEncoder.charAt(i);  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	CharsetEncoder  outputCharsetEncoder  =  inputCharsetEncoder.charAt(i);	  CharsetEncoder    outputCharsetEncoder    =    outputCharsetEncoder.charAt(i);    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
480	[BUG]  [BUGGY]  CharsetEncoder  s  =  outputCharsetEncoder.charAt(i);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  CharsetEncoder  s  =  outputCharsetEncoder.charAt(i);  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	CharsetEncoder  s  =  outputCharsetEncoder.charAt(i);	  CharsetEncoder    outputCharsetEncoder    =    outputCharsetEncoder.charAt(i);    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
481	[BUG]  [BUGGY]  CharTypes.int[]  singleq  =  s.toCharArray();  switch(expCharsetEncoder.charAt(i))  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  CharTypes.int[]  singleq  =  s.toCharArray();  switch(expCharsetEncoder.charAt(i))  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	CharTypes.int[]  singleq  =  s.toCharArray();  switch(expCharsetEncoder.charAt(i))  {	  CharTypes.int[]    singleq    =    s.toCharArray();    switch(s.charAt(i))    {    	non-compiled	[CE]  illegal  start  of  expression	102	None	replace
482	[BUG]  [BUGGY]  CharTypes.int[]  singleq  =  outputCharsetEncoder.toCharArray();  switch(s.charAt(i))  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  CharTypes.int[]  singleq  =  outputCharsetEncoder.toCharArray();  switch(s.charAt(i))  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	CharTypes.int[]  singleq  =  outputCharsetEncoder.toCharArray();  switch(s.charAt(i))  {	  CharTypes.int[]    singleq    =    s.toCharArray();    switch(s.charAt(i))    {    	non-compiled	[CE]  illegal  start  of  expression	102	None	replace
483	[BUG]  [BUGGY]  String  quote  =  outputCharsetEncoder.jsString(s,  i);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  String  quote  =  outputCharsetEncoder.jsString(s,  i);  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	String  quote  =  outputCharsetEncoder.jsString(s,  i);	  String    quote    =    outputCharsetEncoder.jsString(s,    i);    break;    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
484	[BUG]  [BUGGY]  String  quote  =  outputCharsetEncoder.jsString(s,  i++);  break;  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  String  quote  =  outputCharsetEncoder.jsString(s,  i++);  break;  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	String  quote  =  outputCharsetEncoder.jsString(s,  i++);  break;	  String    quote    =    outputCharsetEncoder.jsString(s,    i);    break;    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
485	[BUG]  [BUGGY]  switch(s.substring(i),  s.length()))  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  switch(s.substring(i),  s.length()))  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	switch(s.substring(i),  s.length()))  {	  switch(s.substring(i,    s.length()))    {    	non-compiled	[CE]  illegal  start  of  expression	106	None	replace
486	[BUG]  [BUGGY]  switch(s.get(i))  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  switch(s.get(i))  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	switch(s.get(i))  {	  switch(s.hashCode())    {    	non-compiled	[CE]  illegal  start  of  expression	105	None	replace
487	[BUG]  [BUGGY]  switch(s.indexOf(i))  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  switch(s.indexOf(i))  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	switch(s.indexOf(i))  {	  switch(s.hashCode())    {    	non-compiled	[CE]  illegal  start  of  expression	105	None	replace
488	[BUG]  [BUGGY]  char  s  =  s.toCharArray();  switch(s.charAt(i))  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  char  s  =  s.toCharArray();  switch(s.charAt(i))  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	char  s  =  s.toCharArray();  switch(s.charAt(i))  {	  CharSequence    s    =    s.toCharArray();    switch(s.charAt(i))    {    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
489	[BUG]  [BUGGY]  CharSequence  s  =  out.toCharArray();  switch(s.charAt(i))  {  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  CharSequence  s  =  out.toCharArray();  switch(s.charAt(i))  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	CharSequence  s  =  out.toCharArray();  switch(s.charAt(i))  {	  CharSequence    s    =    s.toCharArray();    switch(s.charAt(i))    {    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
490	[BUG]  [BUGGY]  char[]  s  =  s.toCharArray();  switch(s.charAt(i))  {  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  char[]  s  =  s.toCharArray();  switch(s.charAt(i))  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	char[]  s  =  s.toCharArray();  switch(s.charAt(i))  {	  CharSequence    s    =    s.toCharArray();    switch(s.charAt(i))    {    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
491	[BUG]  [BUGGY]  String  quote  =  jsString(s,  outputCharsetEncoder.charAt(i));  break;  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  String  quote  =  jsString(s,  outputCharsetEncoder.charAt(i));  break;  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	String  quote  =  jsString(s,  outputCharsetEncoder.charAt(i));  break;	  String    quote    =    jsString(s,    outputCharsetEncoder);    break;    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
492	[BUG]  [BUGGY]  CharSequence[]  singleq  =  outputCharsetEncoder.toCharArray();  switch(singleq[i],  outputCharsetEncoder)  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  CharSequence[]  singleq  =  outputCharsetEncoder.toCharArray();  switch(singleq[i],  outputCharsetEncoder)  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	CharSequence[]  singleq  =  outputCharsetEncoder.toCharArray();  switch(singleq[i],  outputCharsetEncoder)  {	  CharSequence[]    singleq    =    s.toCharArray();    switch(singleq[i],    outputCharsetEncoder)    {    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
493	[BUG]  [BUGGY]  CharSequence[]  singleq  =  s.toCharArray();  switch(outputCharsetEncoder[i],  outputCharsetEncoder)  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  CharSequence[]  singleq  =  s.toCharArray();  switch(outputCharsetEncoder[i],  outputCharsetEncoder)  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	CharSequence[]  singleq  =  s.toCharArray();  switch(outputCharsetEncoder[i],  outputCharsetEncoder)  {	  CharSequence[]    singleq    =    s.toCharArray();    switch(singleq[i],    outputCharsetEncoder)    {    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
494	[BUG]  [BUGGY]  CharSequence[]  singleq  =  chars.toCharArray();  switch(singleq[i],  outputCharsetEncoder)  {  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  CharSequence[]  singleq  =  chars.toCharArray();  switch(singleq[i],  outputCharsetEncoder)  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	CharSequence[]  singleq  =  chars.toCharArray();  switch(singleq[i],  outputCharsetEncoder)  {	  CharSequence[]    singleq    =    s.toCharArray();    switch(singleq[i],    outputCharsetEncoder)    {    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
495	[BUG]  [BUGGY]  switch(outputCharsetEncoder.charAt(i),  s,  false)  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  switch(outputCharsetEncoder.charAt(i),  s,  false)  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	switch(outputCharsetEncoder.charAt(i),  s,  false)  {	  switch(s.charAt(i),    outputCharsetEncoder,    false)    {    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
496	[BUG]  [BUGGY]  s  =  s.substring(i  +  1,  s.length()  -  3);  break;  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  s  =  s.substring(i  +  1,  s.length()  -  3);  break;  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	s  =  s.substring(i  +  1,  s.length()  -  3);  break;	  s    =    s.substring(i    +    1,    s.length());    break;    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
497	[BUG]  [BUGGY]  char  quote  =  s.charAt(i)/  1;  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  char  quote  =  s.charAt(i)/  1;  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	char  quote  =  s.charAt(i)/  1;	  char    quote    =    s.charAt(i)+    1;    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
498	[BUG]  [BUGGY]  CharsetEncoder[]  singleq  =  s.toCharArray();  switch(outputCharsetEncoder[i],  singleq)  {  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  CharsetEncoder[]  singleq  =  s.toCharArray();  switch(outputCharsetEncoder[i],  singleq)  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	CharsetEncoder[]  singleq  =  s.toCharArray();  switch(outputCharsetEncoder[i],  singleq)  {	  char[]    singleq    =    s.toCharArray();    switch(singleq[i],    outputCharsetEncoder)    {    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
499	[BUG]  [BUGGY]  CharsetEncoder  singleq  =  s.toCharArray();  switch(outputCharsetEncoder[i],  singleq)  {  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  CharsetEncoder  singleq  =  s.toCharArray();  switch(outputCharsetEncoder[i],  singleq)  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	CharsetEncoder  singleq  =  s.toCharArray();  switch(outputCharsetEncoder[i],  singleq)  {	  char[]    singleq    =    s.toCharArray();    switch(singleq[i],    outputCharsetEncoder)    {    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
500	[BUG]  [BUGGY]  CharsetEncoder  outputCharsetEncoder  =  s.toCharArray();  switch(outputCharsetEncoder,  singleq)  {  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  CharsetEncoder  outputCharsetEncoder  =  s.toCharArray();  switch(outputCharsetEncoder,  singleq)  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	CharsetEncoder  outputCharsetEncoder  =  s.toCharArray();  switch(outputCharsetEncoder,  singleq)  {	  char[]    singleq    =    s.toCharArray();    switch(singleq[i],    outputCharsetEncoder)    {    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
501	[BUG]  [BUGGY]  CharsetEncoder  outputCharsetEncoder  =  s.toCharArray();  switch(outputCharsetEncoder[i],  s)  {  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  CharsetEncoder  outputCharsetEncoder  =  s.toCharArray();  switch(outputCharsetEncoder[i],  s)  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	CharsetEncoder  outputCharsetEncoder  =  s.toCharArray();  switch(outputCharsetEncoder[i],  s)  {	  char[]    singleq    =    s.toCharArray();    switch(singleq[i],    outputCharsetEncoder)    {    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
502	[BUG]  [BUGGY]  String  singleq  =  outputCharsetEncoder.toCharArray(i);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  String  singleq  =  outputCharsetEncoder.toCharArray(i);  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	String  singleq  =  outputCharsetEncoder.toCharArray(i);	  String    singleq    =    s.toCharArray();    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
503	[BUG]  [BUGGY]  switch(s.substring(i,  Double.POSITIVE_INFINITY),  singleq)  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  switch(s.substring(i,  Double.POSITIVE_INFINITY),  singleq)  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	switch(s.substring(i,  Double.POSITIVE_INFINITY),  singleq)  {	  switch(s.substring(i,    Double.POSITIVE_INFINITY))    {    	non-compiled	[CE]  illegal  start  of  expression	99	None	replace
504	[BUG]  [BUGGY]  switch(s.substring(i,  Double.POSITIVE_INFINITY),  true)  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  switch(s.substring(i,  Double.POSITIVE_INFINITY),  true)  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	switch(s.substring(i,  Double.POSITIVE_INFINITY),  true)  {	  switch(s.substring(i,    Double.POSITIVE_INFINITY))    {    	non-compiled	[CE]  illegal  start  of  expression	99	None	replace
505	[BUG]  [BUGGY]  switch(s.substring(i,  Double.POSITIVE_INFINITY),  false)  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  switch(s.substring(i,  Double.POSITIVE_INFINITY),  false)  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	switch(s.substring(i,  Double.POSITIVE_INFINITY),  false)  {	  switch(s.substring(i,    Double.POSITIVE_INFINITY))    {    	non-compiled	[CE]  illegal  start  of  expression	99	None	replace
506	[BUG]  [BUGGY]  switch(s.substring(i,  Double.POSITIVE_INFINITY  +  1))  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  switch(s.substring(i,  Double.POSITIVE_INFINITY  +  1))  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	switch(s.substring(i,  Double.POSITIVE_INFINITY  +  1))  {	  switch(s.substring(i,    Double.POSITIVE_INFINITY))    {    	non-compiled	[CE]  illegal  start  of  expression	99	None	replace
507	[BUG]  [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.encode(s,  i  +  1);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.encode(s,  i  +  1);  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	CharsetEncoder  cc  =  outputCharsetEncoder.encode(s,  i  +  1);	  CharsetEncoder    cc    =    outputCharsetEncoder.encode(s,    i);    break;    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
508	[BUG]  [BUGGY]  switch(s.charAt(i),  outputCharsetEncoder,  1)  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  switch(s.charAt(i),  outputCharsetEncoder,  1)  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	switch(s.charAt(i),  outputCharsetEncoder,  1)  {	  switch(s.charAt(i),    outputCharsetEncoder,    0)    {    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
509	[BUG]  [BUGGY]  char  quote  =  s.charAt(i  *  1);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  char  quote  =  s.charAt(i  *  1);  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	char  quote  =  s.charAt(i  *  1);	  char    quote    =    s.charAt(i    +    1);    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
510	[BUG]  [BUGGY]  char[]  singleq  =  s.toCharArray(i  +  1,  outputCharsetEncoder);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  char[]  singleq  =  s.toCharArray(i  +  1,  outputCharsetEncoder);  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	char[]  singleq  =  s.toCharArray(i  +  1,  outputCharsetEncoder);	  char[]    singleq    =    s.toCharArray(i);    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
511	[BUG]  [BUGGY]  Switch(s.charAt(i)),  outputCharsetEncoder)  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  Switch(s.charAt(i)),  outputCharsetEncoder)  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	Switch(s.charAt(i)),  outputCharsetEncoder)  {	  switch(s.charAt(i)),    outputCharsetEncoder)    {    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
512	[BUG]  [BUGGY]  CharsetEncoder  consumer  =  outputCharsetEncoder.encode(s,  i);  break;  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  CharsetEncoder  consumer  =  outputCharsetEncoder.encode(s,  i);  break;  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	CharsetEncoder  consumer  =  outputCharsetEncoder.encode(s,  i);  break;	  CharsetEncoder    consumer    =    outputCharsetEncoder.getContext();    break;    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
513	[BUG]  [BUGGY]  CharsetEncoder  consumer  =  outputCharsetEncoder.getContext(i);  break;  [CE]  illegal  start  of  expression  [FE]                                    ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  CharsetEncoder  consumer  =  outputCharsetEncoder.getContext(i);  break;  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	CharsetEncoder  consumer  =  outputCharsetEncoder.getContext(i);  break;	  CharsetEncoder    consumer    =    outputCharsetEncoder.getContext();    break;    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
514	[BUG]  [BUGGY]  CharSequence  singleq  =  s.toCharArray();  switch(singleq[i],  outputCharsetEncoder)  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  CharSequence  singleq  =  s.toCharArray();  switch(singleq[i],  outputCharsetEncoder)  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	CharSequence  singleq  =  s.toCharArray();  switch(singleq[i],  outputCharsetEncoder)  {	  CharSequence    singleq    =    s.toCharArray();    switch(singleq[i])    {    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
515	[BUG]  [BUGGY]  char[]  singleq  =  s.toCharArray()  +  doubleq;  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  char[]  singleq  =  s.toCharArray()  +  doubleq;  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	char[]  singleq  =  s.toCharArray()  +  doubleq;	  char[]    singleq    =    s.toCharArray()    +    i;    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
516	[BUG]  [BUGGY]  switch(outputCharsetEncoder.substring(0,  i))  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  switch(outputCharsetEncoder.substring(0,  i))  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	switch(outputCharsetEncoder.substring(0,  i))  {	  switch(s.substring(0,    i))    {    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
517	[BUG]  [BUGGY]  switch(s.substring(0,  i),  false)  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  switch(s.substring(0,  i),  false)  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	switch(s.substring(0,  i),  false)  {	  switch(s.substring(0,    i))    {    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
518	[BUG]  [BUGGY]  CharSequence  char[]  singleq  =  outputCharsetEncoder.toCharArray();  switch(singleq,  outputCharsetEncoder.charAt(i))  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  CharSequence  char[]  singleq  =  outputCharsetEncoder.toCharArray();  switch(singleq,  outputCharsetEncoder.charAt(i))  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	CharSequence  char[]  singleq  =  outputCharsetEncoder.toCharArray();  switch(singleq,  outputCharsetEncoder.charAt(i))  {	  CharSequence    char[]    singleq    =    s.toCharArray();    switch(outputCharsetEncoder.charAt(i))    {    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
519	[BUG]  [BUGGY]  CharSequence  singleq  =  s.toCharArray();  switch(outputCharsetEncoder.charAt(i))  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  CharSequence  singleq  =  s.toCharArray();  switch(outputCharsetEncoder.charAt(i))  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	CharSequence  singleq  =  s.toCharArray();  switch(outputCharsetEncoder.charAt(i))  {	  CharSequence    char[]    singleq    =    s.toCharArray();    switch(outputCharsetEncoder.charAt(i))    {    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
520	[BUG]  [BUGGY]  CharSequence  singleq  =  outputCharsetEncoder.toCharArray();  switch(singleq)  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  CharSequence  singleq  =  outputCharsetEncoder.toCharArray();  switch(singleq)  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	CharSequence  singleq  =  outputCharsetEncoder.toCharArray();  switch(singleq)  {	  CharSequence    char[]    singleq    =    s.toCharArray();    switch(outputCharsetEncoder.charAt(i))    {    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
521	[BUG]  [BUGGY]  switch(s.substring(i,  0),  outputCharsetEncoder)  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  switch(s.substring(i,  0),  outputCharsetEncoder)  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	switch(s.substring(i,  0),  outputCharsetEncoder)  {	  switch(s.substring(i,    0))    {    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
522	[BUG]  [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.encode(s,  i  +  1,  false);  switch(cc.toString())  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.encode(s,  i  +  1,  false);  switch(cc.toString())  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	CharsetEncoder  cc  =  outputCharsetEncoder.encode(s,  i  +  1,  false);  switch(cc.toString())  {	  CharsetEncoder    cc    =    outputCharsetEncoder.encode(s,    i);    switch(cc.toString())    {    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
523	[BUG]  [BUGGY]  CharTypes.Char[]  singleq  =  s.toCharArray();  switch(outputCharsetEncoder.charAt(i))  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  CharTypes.Char[]  singleq  =  s.toCharArray();  switch(outputCharsetEncoder.charAt(i))  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	CharTypes.Char[]  singleq  =  s.toCharArray();  switch(outputCharsetEncoder.charAt(i))  {	  CharTypes.char[]    singleq    =    s.toCharArray();    switch(outputCharsetEncoder.charAt(i))    {    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
524	[BUG]  [BUGGY]  CharTypes.char[]  singleq  =  outputCharsetEncoder.toCharArray();  switch(singleq,  outputCharsetEncoder.charAt(i))  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  CharTypes.char[]  singleq  =  outputCharsetEncoder.toCharArray();  switch(singleq,  outputCharsetEncoder.charAt(i))  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	CharTypes.char[]  singleq  =  outputCharsetEncoder.toCharArray();  switch(singleq,  outputCharsetEncoder.charAt(i))  {	  CharTypes.char[]    singleq    =    s.toCharArray();    switch(outputCharsetEncoder.charAt(i))    {    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
525	[BUG]  [BUGGY]  CharTypes.String  singleq  =  s.toCharArray();  switch(outputCharsetEncoder.charAt(i))  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  CharTypes.String  singleq  =  s.toCharArray();  switch(outputCharsetEncoder.charAt(i))  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	CharTypes.String  singleq  =  s.toCharArray();  switch(outputCharsetEncoder.charAt(i))  {	  CharTypes.char[]    singleq    =    s.toCharArray();    switch(outputCharsetEncoder.charAt(i))    {    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
526	[BUG]  [BUGGY]  char  quote  =  s.charAt(i).substring(1);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  char  quote  =  s.charAt(i).substring(1);  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	char  quote  =  s.charAt(i).substring(1);	  char    quote    =    s.charAt(i).trim();    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
527	[BUG]  [BUGGY]  switch(s.substring(i  +  1,  i),  outputCharsetEncoder)  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  switch(s.substring(i  +  1,  i),  outputCharsetEncoder)  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	switch(s.substring(i  +  1,  i),  outputCharsetEncoder)  {	  switch(s.substring(i    +    1,    i))    {    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
528	[BUG]  [BUGGY]  switch(outputCharsetEncoder.substring(i  +  1,  s.length()))  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  switch(outputCharsetEncoder.substring(i  +  1,  s.length()))  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	switch(outputCharsetEncoder.substring(i  +  1,  s.length()))  {	  switch(s.substring(i    +    1,    i))    {    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
529	[BUG]  [BUGGY]  switch(outputCharsetEncoder.getString())  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  switch(outputCharsetEncoder.getString())  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	switch(outputCharsetEncoder.getString())  {	  switch(s.getString())    {    	non-compiled	[CE]  illegal  start  of  expression	107	None	replace
530	[BUG]  [BUGGY]  switch(s.substring(i,  outputCharsetEncoder.getQualifiedName()))  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  switch(s.substring(i,  outputCharsetEncoder.getQualifiedName()))  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	switch(s.substring(i,  outputCharsetEncoder.getQualifiedName()))  {	  switch(s.substring(i,    outputCharsetEncoder.jsString()))    {    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
531	[BUG]  [BUGGY]  switch(outputCharsetEncoder.substring(i),  singleq)  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  switch(outputCharsetEncoder.substring(i),  singleq)  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	switch(outputCharsetEncoder.substring(i),  singleq)  {	  switch(outputCharsetEncoder.substring(i))    {    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
532	[BUG]  [BUGGY]  String  quote  =  s.substring(i  +  1,  s.length()).trim();  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  String  quote  =  s.substring(i  +  1,  s.length()).trim();  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	String  quote  =  s.substring(i  +  1,  s.length()).trim();	  String    quote    =    s.substring(i    +    1,    s.length());    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
533	[BUG]  [BUGGY]  String  quote  =  s.substring(0,  s.length());  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  String  quote  =  s.substring(0,  s.length());  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	String  quote  =  s.substring(0,  s.length());	  String    quote    =    s.substring(i    +    1,    s.length());    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
534	[BUG]  [BUGGY]  String  quote  =  s.substring(i  +  1,  s.length())+  1;  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  String  quote  =  s.substring(i  +  1,  s.length())+  1;  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	String  quote  =  s.substring(i  +  1,  s.length())+  1;	  String    quote    =    s.substring(i    +    1,    s.length());    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
535	[BUG]  [BUGGY]  switch(outputCharsetEncoder.jsString(),  doubleq)  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  switch(outputCharsetEncoder.jsString(),  doubleq)  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	switch(outputCharsetEncoder.jsString(),  doubleq)  {	  switch(outputCharsetEncoder.jsString(),    s)    {    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
536	[BUG]  [BUGGY]  switch(outputCharsetEncoder.jsString(),  Double.POSITIVE_INFINITY)  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  switch(outputCharsetEncoder.jsString(),  Double.POSITIVE_INFINITY)  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	switch(outputCharsetEncoder.jsString(),  Double.POSITIVE_INFINITY)  {	  switch(outputCharsetEncoder.jsString(),    s)    {    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
537	[BUG]  [BUGGY]  switch(outputCharsetEncoder.jsString(),  Double.parseDouble(s))  {  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  switch(outputCharsetEncoder.jsString(),  Double.parseDouble(s))  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	switch(outputCharsetEncoder.jsString(),  Double.parseDouble(s))  {	  switch(outputCharsetEncoder.jsString(),    s)    {    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
538	[BUG]  [BUGGY]  char  quote  =  outputCharsetEncoder.charAt(i++);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  char  quote  =  outputCharsetEncoder.charAt(i++);  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	char  quote  =  outputCharsetEncoder.charAt(i++);	  char    quote    =    s.charAt(i++);    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
539	[BUG]  [BUGGY]  switch(s.substring(i)+  1),  outputCharsetEncoder.charAt(i))  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  switch(s.substring(i)+  1),  outputCharsetEncoder.charAt(i))  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	switch(s.substring(i)+  1),  outputCharsetEncoder.charAt(i))  {	  switch(s.substring(i),    outputCharsetEncoder.charAt(i))    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
540	[BUG]  [BUGGY]  switch(s.substring(i,  i),  outputCharsetEncoder.charAt(i))  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  switch(s.substring(i,  i),  outputCharsetEncoder.charAt(i))  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	switch(s.substring(i,  i),  outputCharsetEncoder.charAt(i))  {	  switch(s.substring(i),    outputCharsetEncoder.charAt(i))    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
541	[BUG]  [BUGGY]  CharSequence  singleq  =  s.toCharArray(i);  switch(outputCharsetEncoder.charAt(i))  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  CharSequence  singleq  =  s.toCharArray(i);  switch(outputCharsetEncoder.charAt(i))  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	CharSequence  singleq  =  s.toCharArray(i);  switch(outputCharsetEncoder.charAt(i))  {	  CharSequence    char[]    singleq    =    s.toCharArray();    switch(s.charAt(i))    {    	non-compiled	[CE]  illegal  start  of  expression	103	None	replace
542	[BUG]  [BUGGY]  char  quote  =  s.charAt(i,  Double.POSITIVE_IN_CLAUSE);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  char  quote  =  s.charAt(i,  Double.POSITIVE_IN_CLAUSE);  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	char  quote  =  s.charAt(i,  Double.POSITIVE_IN_CLAUSE);	  char    quote    =    s.charAt(i,    singleq);    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
543	[BUG]  [BUGGY]  CharTypes.String  singleq  =  s.toCharArray();  switch(s.charAt(i))  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  CharTypes.String  singleq  =  s.toCharArray();  switch(s.charAt(i))  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	CharTypes.String  singleq  =  s.toCharArray();  switch(s.charAt(i))  {	  CharTypes.char[]    singleq    =    s.toCharArray();    switch(s.charAt(i))    {    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
544	[BUG]  [BUGGY]  switch(s.substring(i,  s.lastIndexOf('-')))  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  switch(s.substring(i,  s.lastIndexOf('-')))  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	switch(s.substring(i,  s.lastIndexOf('-')))  {	  switch(s.substring(i,    s.indexOf(i)))    {    	non-compiled	[CE]  illegal  start  of  expression	104	None	replace
545	[BUG]  [BUGGY]  switch(s.substring(i  +  1),  Double.POSITIVE_INFINITY)  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  switch(s.substring(i  +  1),  Double.POSITIVE_INFINITY)  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	switch(s.substring(i  +  1),  Double.POSITIVE_INFINITY)  {	  switch(s.substring(i    +    1),    singleq)    {    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
546	[BUG]  [BUGGY]  switch(s.substring(i  +  1,  singleq),  doubleq)  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  switch(s.substring(i  +  1,  singleq),  doubleq)  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	switch(s.substring(i  +  1,  singleq),  doubleq)  {	  switch(s.substring(i    +    1),    singleq)    {    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
547	[BUG]  [BUGGY]  switch(s.substring(i,  i  +  1),  singleq)  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  switch(s.substring(i,  i  +  1),  singleq)  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	switch(s.substring(i,  i  +  1),  singleq)  {	  switch(s.substring(i    +    1),    singleq)    {    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
548	[BUG]  [BUGGY]  switch(s.charAt(i),  outputCharsetEncoder,  case  ''')  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  switch(s.charAt(i),  outputCharsetEncoder,  case  ''')  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	switch(s.charAt(i),  outputCharsetEncoder,  case  ''')  {	  switch(s.charAt(i),    outputCharsetEncoder,    context)    {    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
549	[BUG]  [BUGGY]  switch(outputCharsetEncoder.substring(i,  0))  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  switch(outputCharsetEncoder.substring(i,  0))  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	switch(outputCharsetEncoder.substring(i,  0))  {	  switch(outputCharsetEncoder.substring(i,    i))    {    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
550	[BUG]  [BUGGY]  switch(outputCharsetEncoder.substring(i,  doubleq))  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  switch(outputCharsetEncoder.substring(i,  doubleq))  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	switch(outputCharsetEncoder.substring(i,  doubleq))  {	  switch(outputCharsetEncoder.substring(i,    i))    {    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
551	[BUG]  [BUGGY]  CharSequence  char[]  singleq  =  s.toCharArray();  switch(singleq[i],  outputCharsetEncoder)  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  CharSequence  char[]  singleq  =  s.toCharArray();  switch(singleq[i],  outputCharsetEncoder)  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	CharSequence  char[]  singleq  =  s.toCharArray();  switch(singleq[i],  outputCharsetEncoder)  {	  CharSequence    char[]    singleq    =    s.toCharArray();    switch(singleq[i])    {    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
552	[BUG]  [BUGGY]  char[]  singleq  =  outputCharsetEncoder.toString();  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  char[]  singleq  =  outputCharsetEncoder.toString();  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	char[]  singleq  =  outputCharsetEncoder.toString();	  char[]    singleq    =    outputCharsetEncoder.toCharArray();    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
553	[BUG]  [BUGGY]  char[]  singleq  =  outputCharsetEncoder.toCharArray(jsString());  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  char[]  singleq  =  outputCharsetEncoder.toCharArray(jsString());  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	char[]  singleq  =  outputCharsetEncoder.toCharArray(jsString());	  char[]    singleq    =    outputCharsetEncoder.toCharArray();    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
554	[BUG]  [BUGGY]  CharSequence  singleq  =  outputCharsetEncoder.toCharArray(i);  switch(singleq[i],  doubleq)  {  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  CharSequence  singleq  =  outputCharsetEncoder.toCharArray(i);  switch(singleq[i],  doubleq)  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	CharSequence  singleq  =  outputCharsetEncoder.toCharArray(i);  switch(singleq[i],  doubleq)  {	  char[]    singleq    =    s.toCharArray();    switch(singleq[i],    doubleq)    {    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
555	[BUG]  [BUGGY]  CharType  type  =  s.toCharArray();  switch(type,  singleq[i],  doubleq)  {  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  CharType  type  =  s.toCharArray();  switch(type,  singleq[i],  doubleq)  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	CharType  type  =  s.toCharArray();  switch(type,  singleq[i],  doubleq)  {	  char[]    singleq    =    s.toCharArray();    switch(singleq[i],    doubleq)    {    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
556	[BUG]  [BUGGY]  CharTypes.checkState(s.toCharArray());  switch(singleq[i],  doubleq)  {  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  CharTypes.checkState(s.toCharArray());  switch(singleq[i],  doubleq)  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	CharTypes.checkState(s.toCharArray());  switch(singleq[i],  doubleq)  {	  char[]    singleq    =    s.toCharArray();    switch(singleq[i],    doubleq)    {    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
557	[BUG]  [BUGGY]  switch(s.charAt(i)||  s.charAt(i)!=  '-')  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  switch(s.charAt(i)||  s.charAt(i)!=  '-')  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	switch(s.charAt(i)||  s.charAt(i)!=  '-')  {	  switch(outputCharsetEncoder.charAt(i)||    s.charAt(i)!=    '-')    {    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
558	[BUG]  [BUGGY]  switch(outputCharsetEncoder.charAt(i)||  s.charAt(i)  ==  '-')  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  switch(outputCharsetEncoder.charAt(i)||  s.charAt(i)  ==  '-')  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	switch(outputCharsetEncoder.charAt(i)||  s.charAt(i)  ==  '-')  {	  switch(outputCharsetEncoder.charAt(i)||    s.charAt(i)!=    '-')    {    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
559	[BUG]  [BUGGY]  switch(s.substring(i  +  1),  outputCharsetEncoder.charAt(i  +  1))  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  switch(s.substring(i  +  1),  outputCharsetEncoder.charAt(i  +  1))  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	switch(s.substring(i  +  1),  outputCharsetEncoder.charAt(i  +  1))  {	  switch(s.substring(i    +    1),    s.charAt(i    +    1))    {    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
560	[BUG]  [BUGGY]  switch(s.substring(i),  s.charAt(i  +  1))  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  switch(s.substring(i),  s.charAt(i  +  1))  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	switch(s.substring(i),  s.charAt(i  +  1))  {	  switch(s.substring(i    +    1),    s.charAt(i    +    1))    {    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
561	[BUG]  [BUGGY]  s  =  s.substring(i  +  1,  s.charAt(i  +  1))  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  s  =  s.substring(i  +  1,  s.charAt(i  +  1))  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	s  =  s.substring(i  +  1,  s.charAt(i  +  1))  {	  switch(s.substring(i    +    1),    s.charAt(i    +    1))    {    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
562	[BUG]  [BUGGY]  char[]  singleq  =  s.toCharArray();  switch(outputCharsetEncoder.charAt(0))  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  char[]  singleq  =  s.toCharArray();  switch(outputCharsetEncoder.charAt(0))  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	char[]  singleq  =  s.toCharArray();  switch(outputCharsetEncoder.charAt(0))  {	  char[]    singleq    =    s.toCharArray();    switch(s.charAt(0))    {    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
563	[BUG]  [BUGGY]  String  singleq  =  s.toCharArray();  switch(s.charAt(i))  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  String  singleq  =  s.toCharArray();  switch(s.charAt(i))  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	String  singleq  =  s.toCharArray();  switch(s.charAt(i))  {	  char[]    singleq    =    s.toCharArray();    switch(s.charAt(0))    {    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
564	[BUG]  [BUGGY]  String  quote  =  jsString(s,  outputCharsetEncoder,  Double.NaN);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  String  quote  =  jsString(s,  outputCharsetEncoder,  Double.NaN);  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	String  quote  =  jsString(s,  outputCharsetEncoder,  Double.NaN);	  String    quote    =    jsString(s,    outputCharsetEncoder);    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
565	[BUG]  [BUGGY]  String  quote  =  jsString(s,  outputCharsetEncoder,  null);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  String  quote  =  jsString(s,  outputCharsetEncoder,  null);  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	String  quote  =  jsString(s,  outputCharsetEncoder,  null);	  String    quote    =    jsString(s,    outputCharsetEncoder);    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
566	[BUG]  [BUGGY]  switch(s.substring(i,  i  +  1),  outputCharsetEncoder)  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  switch(s.substring(i,  i  +  1),  outputCharsetEncoder)  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	switch(s.substring(i,  i  +  1),  outputCharsetEncoder)  {	  switch(s.substring(i    +    1),    outputCharsetEncoder)    {    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
567	[BUG]  [BUGGY]  switch(s.substring(i  +  1),  outputCharsetEncoder).toLowerCase()  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  switch(s.substring(i  +  1),  outputCharsetEncoder).toLowerCase()  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	switch(s.substring(i  +  1),  outputCharsetEncoder).toLowerCase()  {	  switch(s.substring(i    +    1),    outputCharsetEncoder)    {    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
568	[BUG]  [BUGGY]  switch(s.substring(i  +  1,  outputCharsetEncoder))  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  switch(s.substring(i  +  1,  outputCharsetEncoder))  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	switch(s.substring(i  +  1,  outputCharsetEncoder))  {	  switch(s.substring(i    +    1),    outputCharsetEncoder)    {    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
569	[BUG]  [BUGGY]  switch(s.substring(i  +  1),  outputCharsetEncoder).toLowerCase())  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  switch(s.substring(i  +  1),  outputCharsetEncoder).toLowerCase())  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	switch(s.substring(i  +  1),  outputCharsetEncoder).toLowerCase())  {	  switch(s.substring(i    +    1),    outputCharsetEncoder)    {    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
570	[BUG]  [BUGGY]  switch(s.substring(i  +  1,  singleq),  outputCharsetEncoder)  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  switch(s.substring(i  +  1,  singleq),  outputCharsetEncoder)  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	switch(s.substring(i  +  1,  singleq),  outputCharsetEncoder)  {	  switch(s.substring(i    +    1),    outputCharsetEncoder)    {    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
571	[BUG]  [BUGGY]  Switch(s.substring(i  +  1),  outputCharsetEncoder)  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  Switch(s.substring(i  +  1),  outputCharsetEncoder)  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	Switch(s.substring(i  +  1),  outputCharsetEncoder)  {	  switch(s.substring(i    +    1),    outputCharsetEncoder)    {    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
572	[BUG]  [BUGGY]  CharTypes.int[]  singleq  =  s.toCharArray();  switch(outputCharsetEncoder,  singleq[i])  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  CharTypes.int[]  singleq  =  s.toCharArray();  switch(outputCharsetEncoder,  singleq[i])  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	CharTypes.int[]  singleq  =  s.toCharArray();  switch(outputCharsetEncoder,  singleq[i])  {	  CharTypes.int[]    singleq    =    s.toCharArray();    switch(singleq[i])    {    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
573	[BUG]  [BUGGY]  CharTypes.int[]  singleq  =  s.toCharArray();  switch(outputCharsetEncoder)  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  CharTypes.int[]  singleq  =  s.toCharArray();  switch(outputCharsetEncoder)  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	CharTypes.int[]  singleq  =  s.toCharArray();  switch(outputCharsetEncoder)  {	  CharTypes.int[]    singleq    =    s.toCharArray();    switch(singleq[i])    {    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
574	[BUG]  [BUGGY]  CharTypes.int[]  singleq  =  s.toCharArray();  switch(singleq[0])  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  CharTypes.int[]  singleq  =  s.toCharArray();  switch(singleq[0])  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	CharTypes.int[]  singleq  =  s.toCharArray();  switch(singleq[0])  {	  CharTypes.int[]    singleq    =    s.toCharArray();    switch(singleq[i])    {    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
575	[BUG]  [BUGGY]  switch(outputCharsetEncoder.jsString(s,  i  +  1))  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  switch(outputCharsetEncoder.jsString(s,  i  +  1))  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	switch(outputCharsetEncoder.jsString(s,  i  +  1))  {	  switch(outputCharsetEncoder.jsString(s,    i))    {    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
576	[BUG]  [BUGGY]  switch(outputCharsetEncoder.jsString(s,  i),  false)  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  switch(outputCharsetEncoder.jsString(s,  i),  false)  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	switch(outputCharsetEncoder.jsString(s,  i),  false)  {	  switch(outputCharsetEncoder.jsString(s,    i))    {    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
577	[BUG]  [BUGGY]  switch(outputCharsetEncoder.jsString(s,  i),  true)  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  switch(outputCharsetEncoder.jsString(s,  i),  true)  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	switch(outputCharsetEncoder.jsString(s,  i),  true)  {	  switch(outputCharsetEncoder.jsString(s,    i))    {    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
578	[BUG]  [BUGGY]  char  quote  =  s.charAt(i++)];  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  char  quote  =  s.charAt(i++)];  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	char  quote  =  s.charAt(i++)];	  char    quote    =    s.charAt(i)];    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
579	[BUG]  [BUGGY]  char[]  singleq  =  outputCharsetEncoder.substring(i  +  1,  s.length());  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  char[]  singleq  =  outputCharsetEncoder.substring(i  +  1,  s.length());  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	char[]  singleq  =  outputCharsetEncoder.substring(i  +  1,  s.length());	  char[]    singleq    =    s.substring(i    +    1,    s.length());    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
580	[BUG]  [BUGGY]  char[]  singleq  =  s.substring(i  +  1,  s.length())+  1;  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  char[]  singleq  =  s.substring(i  +  1,  s.length())+  1;  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	char[]  singleq  =  s.substring(i  +  1,  s.length())+  1;	  char[]    singleq    =    s.substring(i    +    1,    s.length());    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
581	[BUG]  [BUGGY]  char  quote  =  s.charAt(i++);  break;  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  char  quote  =  s.charAt(i++);  break;  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	char  quote  =  s.charAt(i++);  break;	  char    quote    =    s.charAt(i);    break;    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
582	[BUG]  [BUGGY]  char  quote  =  s.charAt(i).trim();  break;  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  char  quote  =  s.charAt(i).trim();  break;  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	char  quote  =  s.charAt(i).trim();  break;	  char    quote    =    s.charAt(i);    break;    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
583	[BUG]  [BUGGY]  Char[]  singleq  =  outputCharsetEncoder.toCharArray();  switch(s.charAt(i))  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  Char[]  singleq  =  outputCharsetEncoder.toCharArray();  switch(s.charAt(i))  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	Char[]  singleq  =  outputCharsetEncoder.toCharArray();  switch(s.charAt(i))  {	  Char[]    singleq    =    s.toCharArray();    switch(s.charAt(i))    {    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
584	[BUG]  [BUGGY]  char  quote  =  s.charAt(i],  outputCharsetEncoder);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  char  quote  =  s.charAt(i],  outputCharsetEncoder);  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	char  quote  =  s.charAt(i],  outputCharsetEncoder);	  char    quote    =    s.charAt(i];    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
585	[BUG]  [BUGGY]  CharSequence  s  =  outputCharsetEncoder.toCharArray();  switch(strategy[i])  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  CharSequence  s  =  outputCharsetEncoder.toCharArray();  switch(strategy[i])  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	CharSequence  s  =  outputCharsetEncoder.toCharArray();  switch(strategy[i])  {	  CharSequence    s    =    s.toCharArray();    switch(singleq[i])    {    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
586	[BUG]  [BUGGY]  CharSequence  s  =  outputCharsetEncoder.toCharArray();  switch(str[i])  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  CharSequence  s  =  outputCharsetEncoder.toCharArray();  switch(str[i])  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	CharSequence  s  =  outputCharsetEncoder.toCharArray();  switch(str[i])  {	  CharSequence    s    =    s.toCharArray();    switch(singleq[i])    {    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
587	[BUG]  [BUGGY]  CharSequence  s  =  outputCharsetEncoder.toCharArray();  switch(symbols[i])  {  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  CharSequence  s  =  outputCharsetEncoder.toCharArray();  switch(symbols[i])  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	CharSequence  s  =  outputCharsetEncoder.toCharArray();  switch(symbols[i])  {	  CharSequence    s    =    s.toCharArray();    switch(singleq[i])    {    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
588	[BUG]  [BUGGY]  switch(s.substring(i),  singleq,  outputCharsetEncoder)  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  switch(s.substring(i),  singleq,  outputCharsetEncoder)  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	switch(s.substring(i),  singleq,  outputCharsetEncoder)  {	  switch(s.substring(i),    singleq)    {    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
589	[BUG]  [BUGGY]  switch(s.substring(i).trim(),  singleq)  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  switch(s.substring(i).trim(),  singleq)  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	switch(s.substring(i).trim(),  singleq)  {	  switch(s.substring(i),    singleq)    {    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
590	[BUG]  [BUGGY]  char  quote  =  jsString(s,  outputCharsetEncoder);  case  ''':  doubleq++;  break;  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  char  quote  =  jsString(s,  outputCharsetEncoder);  case  ''':  doubleq++;  break;  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	char  quote  =  jsString(s,  outputCharsetEncoder);  case  ''':  doubleq++;  break;	  String    quote    =    jsString(s,    outputCharsetEncoder);    case    ''':    doubleq++;    break;    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
591	[BUG]  [BUGGY]  String  quote  =  outputCharsetEncoder.jsString(s,  i);  case  ''':  doubleq++;  break;  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  String  quote  =  outputCharsetEncoder.jsString(s,  i);  case  ''':  doubleq++;  break;  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	String  quote  =  outputCharsetEncoder.jsString(s,  i);  case  ''':  doubleq++;  break;	  String    quote    =    jsString(s,    outputCharsetEncoder);    case    ''':    doubleq++;    break;    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
592	[BUG]  [BUGGY]  String  quote  =  jsString(s,  outputCharsetEncoder);  case  ''':  singleq++;  break;  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  String  quote  =  jsString(s,  outputCharsetEncoder);  case  ''':  singleq++;  break;  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	String  quote  =  jsString(s,  outputCharsetEncoder);  case  ''':  singleq++;  break;	  String    quote    =    jsString(s,    outputCharsetEncoder);    case    ''':    doubleq++;    break;    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
593	[BUG]  [BUGGY]  switch(outputCharsetEncoder.charAt(i),  doubleq,  singleq)  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  switch(outputCharsetEncoder.charAt(i),  doubleq,  singleq)  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	switch(outputCharsetEncoder.charAt(i),  doubleq,  singleq)  {	  switch(outputCharsetEncoder.charAt(i),    singleq)    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
594	[BUG]  [BUGGY]  Context  cc  =  Context.current();  break;  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  Context  cc  =  Context.current();  break;  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	Context  cc  =  Context.current();  break;	  Context    cc    =    Context.getCurrentContext();    break;    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
595	[BUG]  [BUGGY]  switch(s.charAt(i)||  s.charAt(i)  >=  ''')  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  switch(s.charAt(i)||  s.charAt(i)  >=  ''')  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	switch(s.charAt(i)||  s.charAt(i)  >=  ''')  {	  switch(outputCharsetEncoder.charAt(i)||    s.charAt(i)    >=    ''')    {    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
596	[BUG]  [BUGGY]  Switch(s.charAt(i)||  outputCharsetEncoder.charAt(i)  >=  ''')  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  Switch(s.charAt(i)||  outputCharsetEncoder.charAt(i)  >=  ''')  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	Switch(s.charAt(i)||  outputCharsetEncoder.charAt(i)  >=  ''')  {	  switch(outputCharsetEncoder.charAt(i)||    s.charAt(i)    >=    ''')    {    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
597	[BUG]  [BUGGY]  CharSequence[]  singleq  =  s.toCharArray();  switch(expCharsetEncoder.charAt(i))  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  CharSequence[]  singleq  =  s.toCharArray();  switch(expCharsetEncoder.charAt(i))  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	CharSequence[]  singleq  =  s.toCharArray();  switch(expCharsetEncoder.charAt(i))  {	  CharSequence[]    singleq    =    s.toCharArray();    switch(s.charAt(i))    {    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
598	[BUG]  [BUGGY]  s  =  s.trim(i);  break;  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  s  =  s.trim(i);  break;  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	s  =  s.trim(i);  break;	  s    =    s.trim();    break;    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
599	[BUG]  [BUGGY]  s  =  s.substring(i  +  1);  break;  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  s  =  s.substring(i  +  1);  break;  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	s  =  s.substring(i  +  1);  break;	  s    =    s.trim();    break;    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
600	[BUG]  [BUGGY]  switch(s.substring(i  +  1,  i  +  1))  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  switch(s.substring(i  +  1,  i  +  1))  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	switch(s.substring(i  +  1,  i  +  1))  {	  switch(s.substring(i,    i    +    1))    {    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
601	[BUG]  [BUGGY]  switch(s.substring(i),  outputCharsetEncoder.encode(s))  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  switch(s.substring(i),  outputCharsetEncoder.encode(s))  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	switch(s.substring(i),  outputCharsetEncoder.encode(s))  {	  switch(s.substring(i),    s.length())    {    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
602	[BUG]  [BUGGY]  switch(s.substring(i),  outputCharsetEncoder.length())  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  switch(s.substring(i),  outputCharsetEncoder.length())  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	switch(s.substring(i),  outputCharsetEncoder.length())  {	  switch(s.substring(i),    s.length())    {    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
603	[BUG]  [BUGGY]  switch(s.substring(i),  outputCharsetEncoder.indexOf(s))  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  switch(s.substring(i),  outputCharsetEncoder.indexOf(s))  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	switch(s.substring(i),  outputCharsetEncoder.indexOf(s))  {	  switch(s.substring(i),    s.length())    {    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
604	[BUG]  [BUGGY]  switch(s.substring(i,  doubleq),  outputCharsetEncoder)  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  switch(s.substring(i,  doubleq),  outputCharsetEncoder)  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	switch(s.substring(i,  doubleq),  outputCharsetEncoder)  {	  switch(s.substring(i,    doubleq))    {    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
605	[BUG]  [BUGGY]  switch(outputCharsetEncoder.charAt(i),  s  +  1)  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  switch(outputCharsetEncoder.charAt(i),  s  +  1)  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	switch(outputCharsetEncoder.charAt(i),  s  +  1)  {	  switch(outputCharsetEncoder.charAt(i),    s)    {    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
606	[BUG]  [BUGGY]  CharsetEncoder  outputCharsetEncoder  =  s.charAt(i,  outputCharsetEncoder);  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  CharsetEncoder  outputCharsetEncoder  =  s.charAt(i,  outputCharsetEncoder);  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	CharsetEncoder  outputCharsetEncoder  =  s.charAt(i,  outputCharsetEncoder);	  CharsetEncoder    outputCharsetEncoder    =    s.charAt(i);    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
607	[BUG]  [BUGGY]  switch(s.charAt(i)||  s.charAt(i)!=  ''')  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  switch(s.charAt(i)||  s.charAt(i)!=  ''')  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	switch(s.charAt(i)||  s.charAt(i)!=  ''')  {	  switch(outputCharsetEncoder.charAt(i)||    s.charAt(i)!=    ''')    {    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
608	[BUG]  [BUGGY]  switch(s.substring(i),  outputCharsetEncoder.charAt(i)))  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  switch(s.substring(i),  outputCharsetEncoder.charAt(i)))  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	switch(s.substring(i),  outputCharsetEncoder.charAt(i)))  {	  switch(s.substring(i,    outputCharsetEncoder.charAt(i)))    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
609	[BUG]  [BUGGY]  switch(s.substring(i  +  1,  outputCharsetEncoder.charAt(i)))  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  switch(s.substring(i  +  1,  outputCharsetEncoder.charAt(i)))  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	switch(s.substring(i  +  1,  outputCharsetEncoder.charAt(i)))  {	  switch(s.substring(i,    outputCharsetEncoder.charAt(i)))    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
610	[BUG]  [BUGGY]  switch(outputCharsetEncoder.substring(i,  s.charAt(i)))  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  switch(outputCharsetEncoder.substring(i,  s.charAt(i)))  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	switch(outputCharsetEncoder.substring(i,  s.charAt(i)))  {	  switch(s.substring(i,    outputCharsetEncoder.charAt(i)))    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
611	[BUG]  [BUGGY]  switch(s.substring(i).trim(),  outputCharsetEncoder)  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  switch(s.substring(i).trim(),  outputCharsetEncoder)  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	switch(s.substring(i).trim(),  outputCharsetEncoder)  {	  switch(s.substring(i),    outputCharsetEncoder)    {    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
612	[BUG]  [BUGGY]  switch(s.substring(i,  i),  outputCharsetEncoder)  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  switch(s.substring(i,  i),  outputCharsetEncoder)  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	switch(s.substring(i,  i),  outputCharsetEncoder)  {	  switch(s.substring(i),    outputCharsetEncoder)    {    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
613	[BUG]  [BUGGY]  switch(s.substring(i  +  1),  outputCharsetEncoder.encode(s))  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  switch(s.substring(i  +  1),  outputCharsetEncoder.encode(s))  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	switch(s.substring(i  +  1),  outputCharsetEncoder.encode(s))  {	  switch(s.substring(i    +    1),    s.length())    {    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
614	[BUG]  [BUGGY]  switch(s.substring(i  +  1),  outputCharsetEncoder.indexOf(s))  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  switch(s.substring(i  +  1),  outputCharsetEncoder.indexOf(s))  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	switch(s.substring(i  +  1),  outputCharsetEncoder.indexOf(s))  {	  switch(s.substring(i    +    1),    s.length())    {    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
615	[BUG]  [BUGGY]  switch(s.substring(i  +  1),  outputCharsetEncoder.encode(s),  s.length())  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  switch(s.substring(i  +  1),  outputCharsetEncoder.encode(s),  s.length())  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	switch(s.substring(i  +  1),  outputCharsetEncoder.encode(s),  s.length())  {	  switch(s.substring(i    +    1),    s.length())    {    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
616	[BUG]  [BUGGY]  String  quote  =  s.substring(0,  s.length());  break;  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  String  quote  =  s.substring(0,  s.length());  break;  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	String  quote  =  s.substring(0,  s.length());  break;	  String    quote    =    s.substring(i    +    1,    s.length());    break;    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
617	[BUG]  [BUGGY]  char[]  singleq  =  s.substring(0,  s.length());  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  char[]  singleq  =  s.substring(0,  s.length());  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	char[]  singleq  =  s.substring(0,  s.length());	  char[]    singleq    =    s.substring(i,    s.length()    -    1);    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
618	[BUG]  [BUGGY]  CharsetEncoder  outputCharsetEncoder  =  s.encode(i,  outputCharset);  switch(outputCharsetEncoder)  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  CharsetEncoder  outputCharsetEncoder  =  s.encode(i,  outputCharset);  switch(outputCharsetEncoder)  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	CharsetEncoder  outputCharsetEncoder  =  s.encode(i,  outputCharset);  switch(outputCharsetEncoder)  {	  CharsetEncoder    outputCharsetEncoder    =    outputCharsetEncoder.encode(s,    i);    switch(outputCharsetEncoder)    {    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
619	[BUG]  [BUGGY]  CharsetEncoder  outputCharsetEncoder  =  s.encode(i,  outputCharsetEncoder);  switch(outputCharsetEncoder)  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  CharsetEncoder  outputCharsetEncoder  =  s.encode(i,  outputCharsetEncoder);  switch(outputCharsetEncoder)  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	CharsetEncoder  outputCharsetEncoder  =  s.encode(i,  outputCharsetEncoder);  switch(outputCharsetEncoder)  {	  CharsetEncoder    outputCharsetEncoder    =    outputCharsetEncoder.encode(s,    i);    switch(outputCharsetEncoder)    {    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
620	[BUG]  [BUGGY]  switch(outputCharsetEncoder.substring(0,  i  +  1))  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  switch(outputCharsetEncoder.substring(0,  i  +  1))  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	switch(outputCharsetEncoder.substring(0,  i  +  1))  {	  switch(s.substring(0,    i    +    1))    {    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
621	[BUG]  [BUGGY]  switch(s.substring(i,  Double.POSITIVE_IN_STRING))  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  switch(s.substring(i,  Double.POSITIVE_IN_STRING))  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	switch(s.substring(i,  Double.POSITIVE_IN_STRING))  {	  switch(s.substring(i,    singleq))    {    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
622	[BUG]  [BUGGY]  switch(s.charAt(i  -  1),  outputCharsetEncoder)  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  switch(s.charAt(i  -  1),  outputCharsetEncoder)  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	switch(s.charAt(i  -  1),  outputCharsetEncoder)  {	  switch(s.charAt(i    +    1),    outputCharsetEncoder)    {    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
623	[BUG]  [BUGGY]  switch(s.charAt(i)+  1),  outputCharsetEncoder)  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  switch(s.charAt(i)+  1),  outputCharsetEncoder)  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	switch(s.charAt(i)+  1),  outputCharsetEncoder)  {	  switch(s.charAt(i    +    1),    outputCharsetEncoder)    {    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
624	[BUG]  [BUGGY]  CharSequence[]  singleq  =  s.toCharArray();  switch(outputCharsetEncoder,  singleq[i])  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  CharSequence[]  singleq  =  s.toCharArray();  switch(outputCharsetEncoder,  singleq[i])  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	CharSequence[]  singleq  =  s.toCharArray();  switch(outputCharsetEncoder,  singleq[i])  {	  CharSequence[]    singleq    =    s.toCharArray();    switch(singleq[i])    {    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
625	[BUG]  [BUGGY]  CharSequence[]  singleq  =  s.toCharArray();  switch(singleq[0])  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  CharSequence[]  singleq  =  s.toCharArray();  switch(singleq[0])  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	CharSequence[]  singleq  =  s.toCharArray();  switch(singleq[0])  {	  CharSequence[]    singleq    =    s.toCharArray();    switch(singleq[i])    {    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
626	[BUG]  [BUGGY]  CharSequence[]  singleq  =  s.toCharArray();  switch(outputCharsetEncoder)  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  CharSequence[]  singleq  =  s.toCharArray();  switch(outputCharsetEncoder)  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	CharSequence[]  singleq  =  s.toCharArray();  switch(outputCharsetEncoder)  {	  CharSequence[]    singleq    =    s.toCharArray();    switch(singleq[i])    {    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
627	[BUG]  [BUGGY]  Switch(s,  outputCharsetEncoder.charAt(i))  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  Switch(s,  outputCharsetEncoder.charAt(i))  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	Switch(s,  outputCharsetEncoder.charAt(i))  {	  switch(i,    outputCharsetEncoder.charAt(i))    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
628	[BUG]  [BUGGY]  switch(s,  outCharsetEncoder.charAt(i))  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  switch(s,  outCharsetEncoder.charAt(i))  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	switch(s,  outCharsetEncoder.charAt(i))  {	  switch(i,    outputCharsetEncoder.charAt(i))    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
629	[BUG]  [BUGGY]  CharsetEncoder  outputCharsetEncoder  =  outputCharsetEncoder.toCharArray();  switch(outputCharsetEncoder.charAt(i))  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  CharsetEncoder  outputCharsetEncoder  =  outputCharsetEncoder.toCharArray();  switch(outputCharsetEncoder.charAt(i))  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	CharsetEncoder  outputCharsetEncoder  =  outputCharsetEncoder.toCharArray();  switch(outputCharsetEncoder.charAt(i))  {	  char[]    singleq    =    s.toCharArray();    switch(outputCharsetEncoder.charAt(i))    {    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
630	[BUG]  [BUGGY]  CharsetEncoder  outputCharsetEncoder  =  outputCharsetEncoder.toCharArray(i);  switch(outputCharsetEncoder.charAt(i))  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  CharsetEncoder  outputCharsetEncoder  =  outputCharsetEncoder.toCharArray(i);  switch(outputCharsetEncoder.charAt(i))  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	CharsetEncoder  outputCharsetEncoder  =  outputCharsetEncoder.toCharArray(i);  switch(outputCharsetEncoder.charAt(i))  {	  char[]    singleq    =    s.toCharArray();    switch(outputCharsetEncoder.charAt(i))    {    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
631	[BUG]  [BUGGY]  CharSetEncoder  outputCharsetEncoder  =  outputCharsetEncoder.toCharArray();  switch(s.charAt(i))  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  CharSetEncoder  outputCharsetEncoder  =  outputCharsetEncoder.toCharArray();  switch(s.charAt(i))  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	CharSetEncoder  outputCharsetEncoder  =  outputCharsetEncoder.toCharArray();  switch(s.charAt(i))  {	  char[]    singleq    =    s.toCharArray();    switch(outputCharsetEncoder.charAt(i))    {    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
632	[BUG]  [BUGGY]  switch(s.substring(i),  outputCharsetEncoder.jsString(i))  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  switch(s.substring(i),  outputCharsetEncoder.jsString(i))  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	switch(s.substring(i),  outputCharsetEncoder.jsString(i))  {	  switch(outputCharsetEncoder.jsString(i))    {    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
633	[BUG]  [BUGGY]  switch(outputCharsetEncoder.jsString(i),  singleq)  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  switch(outputCharsetEncoder.jsString(i),  singleq)  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	switch(outputCharsetEncoder.jsString(i),  singleq)  {	  switch(outputCharsetEncoder.jsString(i))    {    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
634	[BUG]  [BUGGY]  CharType[]  singleq  =  s.toCharArray();  switch(singleq[0])  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  CharType[]  singleq  =  s.toCharArray();  switch(singleq[0])  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	CharType[]  singleq  =  s.toCharArray();  switch(singleq[0])  {	  CharType[]    singleq    =    s.toCharArray();    switch(singleq[i])    {    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
635	[BUG]  [BUGGY]  CharType[]  singleq  =  s.toCharArray();  switch(outputCharsetEncoder)  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  CharType[]  singleq  =  s.toCharArray();  switch(outputCharsetEncoder)  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	CharType[]  singleq  =  s.toCharArray();  switch(outputCharsetEncoder)  {	  CharType[]    singleq    =    s.toCharArray();    switch(singleq[i])    {    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
636	[BUG]  [BUGGY]  switch(s.substring(i,  i).trim())  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  switch(s.substring(i,  i).trim())  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	switch(s.substring(i,  i).trim())  {	  switch(s.substring(i).trim())    {    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
637	[BUG]  [BUGGY]  switch(s.substring(i),  outputCharsetEncoder).trim())  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  switch(s.substring(i),  outputCharsetEncoder).trim())  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	switch(s.substring(i),  outputCharsetEncoder).trim())  {	  switch(s.substring(i).trim())    {    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
638	[BUG]  [BUGGY]  String  quote  =  s.substring(0,  s.length());  case  ''':  doubleq++;  break;  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  String  quote  =  s.substring(0,  s.length());  case  ''':  doubleq++;  break;  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	String  quote  =  s.substring(0,  s.length());  case  ''':  doubleq++;  break;	  String    quote    =    s.substring(i    +    1,    s.length());    case    ''':    doubleq++;    break;    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
639	[BUG]  [BUGGY]  switch(s.substring(i  +  1,  outputCharsetEncoder.length()))  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  switch(s.substring(i  +  1,  outputCharsetEncoder.length()))  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	switch(s.substring(i  +  1,  outputCharsetEncoder.length()))  {	  switch(s.substring(i    +    1,    s.length()))    {    	non-compiled	[CE]  illegal  start  of  expression	101	None	replace
640	[BUG]  [BUGGY]  Switch(s.substring(i  +  1,  s.length()))  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  Switch(s.substring(i  +  1,  s.length()))  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	Switch(s.substring(i  +  1,  s.length()))  {	  switch(s.substring(i    +    1,    s.length()))    {    	non-compiled	[CE]  illegal  start  of  expression	101	None	replace
641	[BUG]  [BUGGY]  CharsetEncoder  outputCharsetEncoder  =  s.encode(outputCharsetEncoder);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  CharsetEncoder  outputCharsetEncoder  =  s.encode(outputCharsetEncoder);  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	CharsetEncoder  outputCharsetEncoder  =  s.encode(outputCharsetEncoder);	  CharsetEncoder    outputCharsetEncoder    =    outputCharsetEncoder.encode(s,    i);    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
642	[BUG]  [BUGGY]  switch(s.substring(i,  1  -  s.length()))  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  switch(s.substring(i,  1  -  s.length()))  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	switch(s.substring(i,  1  -  s.length()))  {	  switch(s.substring(i,    1))    {    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
643	[BUG]  [BUGGY]  switch(s.substring(i,  1  +  s.length()))  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  switch(s.substring(i,  1  +  s.length()))  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	switch(s.substring(i,  1  +  s.length()))  {	  switch(s.substring(i,    1))    {    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
644	[BUG]  [BUGGY]  switch(s.substring(i,  1  -  doubleq))  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  switch(s.substring(i,  1  -  doubleq))  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	switch(s.substring(i,  1  -  doubleq))  {	  switch(s.substring(i,    1))    {    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
645	[BUG]  [BUGGY]  CharSequence[]  singleq  =  outputCharsetEncoder.toCharArray();  switch(singleq)  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  CharSequence[]  singleq  =  outputCharsetEncoder.toCharArray();  switch(singleq)  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	CharSequence[]  singleq  =  outputCharsetEncoder.toCharArray();  switch(singleq)  {	  CharSequence[]    singleq    =    s.toCharArray();    switch(outputCharsetEncoder.charAt(i))    {    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
646	[BUG]  [BUGGY]  CharSequence[]  singleq  =  outputCharsetEncoder.toCharArray();  switch(str.charAt(i))  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  CharSequence[]  singleq  =  outputCharsetEncoder.toCharArray();  switch(str.charAt(i))  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	CharSequence[]  singleq  =  outputCharsetEncoder.toCharArray();  switch(str.charAt(i))  {	  CharSequence[]    singleq    =    s.toCharArray();    switch(outputCharsetEncoder.charAt(i))    {    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
647	[BUG]  [BUGGY]  CharSequence[]  singleq  =  outputCharsetEncoder.toCharArray();  switch(s.substring(i))  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  CharSequence[]  singleq  =  outputCharsetEncoder.toCharArray();  switch(s.substring(i))  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	CharSequence[]  singleq  =  outputCharsetEncoder.toCharArray();  switch(s.substring(i))  {	  CharSequence[]    singleq    =    s.toCharArray();    switch(outputCharsetEncoder.charAt(i))    {    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
648	[BUG]  [BUGGY]  CharSequence[]  singleq  =  outputCharsetEncoder.toCharArray();  switch(singleq);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  CharSequence[]  singleq  =  outputCharsetEncoder.toCharArray();  switch(singleq);  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	CharSequence[]  singleq  =  outputCharsetEncoder.toCharArray();  switch(singleq);	  CharSequence[]    singleq    =    s.toCharArray();    switch(outputCharsetEncoder.charAt(i))    {    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
649	[BUG]  [BUGGY]  switch(s.substring(i  +  1,  singleq  +  1))  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  switch(s.substring(i  +  1,  singleq  +  1))  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	switch(s.substring(i  +  1,  singleq  +  1))  {	  switch(s.substring(i,    singleq    +    1))    {    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
650	[BUG]  [BUGGY]  switch(s,  outputCharsetEncoder.encode(i))  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  switch(s,  outputCharsetEncoder.encode(i))  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	switch(s,  outputCharsetEncoder.encode(i))  {	  switch(s,    outputCharsetEncoder.charAt(i))    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
651	[BUG]  [BUGGY]  CharTypes.int[]  singleq  =  s.toCharArray();  switch(s.charAt(i),  singleq)  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  CharTypes.int[]  singleq  =  s.toCharArray();  switch(s.charAt(i),  singleq)  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	CharTypes.int[]  singleq  =  s.toCharArray();  switch(s.charAt(i),  singleq)  {	  CharTypes.int[]    singleq    =    s.toCharArray();    switch(s.charAt(i))    {    	non-compiled	[CE]  illegal  start  of  expression	102	None	replace
652	[BUG]  [BUGGY]  switch(s.charAt(i)),  s.charAt(i))  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  switch(s.charAt(i)),  s.charAt(i))  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	switch(s.charAt(i)),  s.charAt(i))  {	  switch(s.charAt(i),    s.charAt(i))    {    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
653	[BUG]  [BUGGY]  char[]  singleq  =  s.substring(i,  s.length())+  1;  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  char[]  singleq  =  s.substring(i,  s.length())+  1;  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	char[]  singleq  =  s.substring(i,  s.length())+  1;	  char[]    singleq    =    s.substring(i,    s.length()    -    1);    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
654	[BUG]  [BUGGY]  String  quote  =  jsString(s,  outputCharsetEncoder.quoteAsString());  case  ''':  doubleq++;  break;  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  String  quote  =  jsString(s,  outputCharsetEncoder.quoteAsString());  case  ''':  doubleq++;  break;  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	String  quote  =  jsString(s,  outputCharsetEncoder.quoteAsString());  case  ''':  doubleq++;  break;	  String    quote    =    jsString(s,    outputCharsetEncoder);    case    ''':    doubleq++;    break;    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
655	[BUG]  [BUGGY]  String  quote  =  outputCharsetEncoder.quote(s,  i);  case  ''':  doubleq++;  break;  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  String  quote  =  outputCharsetEncoder.quote(s,  i);  case  ''':  doubleq++;  break;  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	String  quote  =  outputCharsetEncoder.quote(s,  i);  case  ''':  doubleq++;  break;	  String    quote    =    jsString(s,    outputCharsetEncoder);    case    ''':    doubleq++;    break;    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
656	[BUG]  [BUGGY]  switch(s,  outputCharsetEncoder.toUpperCase())  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  switch(s,  outputCharsetEncoder.toUpperCase())  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	switch(s,  outputCharsetEncoder.toUpperCase())  {	  switch(s,    outputCharsetEncoder.charAt(i))    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
657	[BUG]  [BUGGY]  CharSequence  s  =  s.toCharArray();  switch(singleq[i],  outputCharsetEncoder)  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  CharSequence  s  =  s.toCharArray();  switch(singleq[i],  outputCharsetEncoder)  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	CharSequence  s  =  s.toCharArray();  switch(singleq[i],  outputCharsetEncoder)  {	  CharSequence    s    =    s.toCharArray();    switch(singleq[i])    {    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
658	[BUG]  [BUGGY]  CharSequence  s  =  outputCharsetEncoder.toCharArray(i);  switch(singleq[i])  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  CharSequence  s  =  outputCharsetEncoder.toCharArray(i);  switch(singleq[i])  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	CharSequence  s  =  outputCharsetEncoder.toCharArray(i);  switch(singleq[i])  {	  CharSequence    s    =    s.toCharArray();    switch(singleq[i])    {    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
659	[BUG]  [BUGGY]  CharSequence  s  =  s.charAt(i);  switch(singleq[i])  {  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  CharSequence  s  =  s.charAt(i);  switch(singleq[i])  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	CharSequence  s  =  s.charAt(i);  switch(singleq[i])  {	  CharSequence    s    =    s.toCharArray();    switch(singleq[i])    {    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
660	[BUG]  [BUGGY]  CharSequence  s  =  inputCharsetEncoder.toCharArray();  switch(singleq[i])  {  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  CharSequence  s  =  inputCharsetEncoder.toCharArray();  switch(singleq[i])  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	CharSequence  s  =  inputCharsetEncoder.toCharArray();  switch(singleq[i])  {	  CharSequence    s    =    s.toCharArray();    switch(singleq[i])    {    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
661	[BUG]  [BUGGY]  CharSequence  s  =  s.toCharArray(i);  switch(singleq[i])  {  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  CharSequence  s  =  s.toCharArray(i);  switch(singleq[i])  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	CharSequence  s  =  s.toCharArray(i);  switch(singleq[i])  {	  CharSequence    s    =    s.toCharArray();    switch(singleq[i])    {    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
662	[BUG]  [BUGGY]  s  =  s.substring(i  +  1,  s.length(),  outputCharsetEncoder);  break;  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  s  =  s.substring(i  +  1,  s.length(),  outputCharsetEncoder);  break;  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	s  =  s.substring(i  +  1,  s.length(),  outputCharsetEncoder);  break;	  s    =    s.substring(i    +    1,    s.length());    break;    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
663	[BUG]  [BUGGY]  s  =  s.substring(0,  i  +  1,  s.length());  break;  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  s  =  s.substring(0,  i  +  1,  s.length());  break;  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	s  =  s.substring(0,  i  +  1,  s.length());  break;	  s    =    s.substring(i    +    1,    s.length());    break;    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
664	[BUG]  [BUGGY]  switch(s.substring(i,  outputCharsetEncoder.jsString(s,  i))  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  switch(s.substring(i,  outputCharsetEncoder.jsString(s,  i))  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	switch(s.substring(i,  outputCharsetEncoder.jsString(s,  i))  {	  switch(outputCharsetEncoder.jsString(s,    i))    {    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
665	[BUG]  [BUGGY]  CharsetEncoder  s  =  s.charAt(i);  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  CharsetEncoder  s  =  s.charAt(i);  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	CharsetEncoder  s  =  s.charAt(i);	  CharsetEncoder    outputCharsetEncoder    =    s.charAt(i);    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
666	[BUG]  [BUGGY]  Context  cc  =  Context.currentTimeMillis();  break;  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  Context  cc  =  Context.currentTimeMillis();  break;  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	Context  cc  =  Context.currentTimeMillis();  break;	  Context    cc    =    Context.getCurrentContext();    break;    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
667	[BUG]  [BUGGY]  switch(s.substring(i,  1);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  switch(s.substring(i,  1);  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	switch(s.substring(i,  1);	  switch(s.substring(i,    1))    {    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
668	[BUG]  [BUGGY]  CharTypes.int[]  singleq  =  s.toCharArray();  switch(singleq,  singleq[i])  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  CharTypes.int[]  singleq  =  s.toCharArray();  switch(singleq,  singleq[i])  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	CharTypes.int[]  singleq  =  s.toCharArray();  switch(singleq,  singleq[i])  {	  CharTypes.int[]    singleq    =    s.toCharArray();    switch(singleq[i])    {    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
669	[BUG]  [BUGGY]  CharTypes.int[]  singleq  =  s.toCharArray();  switch(singleq[i],  singleq)  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  CharTypes.int[]  singleq  =  s.toCharArray();  switch(singleq[i],  singleq)  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	CharTypes.int[]  singleq  =  s.toCharArray();  switch(singleq[i],  singleq)  {	  CharTypes.int[]    singleq    =    s.toCharArray();    switch(singleq[i])    {    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
670	[BUG]  [BUGGY]  CharTypes.int[]  singleq  =  s.toCharArray();  switch(singleq[i],  this.outputCharsetEncoder)  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  CharTypes.int[]  singleq  =  s.toCharArray();  switch(singleq[i],  this.outputCharsetEncoder)  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	CharTypes.int[]  singleq  =  s.toCharArray();  switch(singleq[i],  this.outputCharsetEncoder)  {	  CharTypes.int[]    singleq    =    s.toCharArray();    switch(singleq[i])    {    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
671	[BUG]  [BUGGY]  switch(s.substring(i,  singleq),  outputCharsetEncoder)  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  switch(s.substring(i,  singleq),  outputCharsetEncoder)  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	switch(s.substring(i,  singleq),  outputCharsetEncoder)  {	  switch(s.substring(i,    singleq))    {    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
672	[BUG]  [BUGGY]  switch(s.substring(0,  i).trim())  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  switch(s.substring(0,  i).trim())  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	switch(s.substring(0,  i).trim())  {	  switch(s.substring(0,    i))    {    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
673	[BUG]  [BUGGY]  CharsetEncoder  s  =  s.toCharArray();  switch(singleq[i],  outputCharsetEncoder)  {  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  CharsetEncoder  s  =  s.toCharArray();  switch(singleq[i],  outputCharsetEncoder)  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	CharsetEncoder  s  =  s.toCharArray();  switch(singleq[i],  outputCharsetEncoder)  {	  char[]    singleq    =    s.toCharArray();    switch(singleq[i],    outputCharsetEncoder)    {    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
674	[BUG]  [BUGGY]  switch(s[i],  outputCharsetEncoder)  {  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  switch(s[i],  outputCharsetEncoder)  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	switch(s[i],  outputCharsetEncoder)  {	  char[]    singleq    =    s.toCharArray();    switch(singleq[i],    outputCharsetEncoder)    {    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
675	[BUG]  [BUGGY]  CharsetEncoder  outputCharsetEncoder  =  s.toCharArray();  switch(outputCharsetEncoder[i],  singleq)  {  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  CharsetEncoder  outputCharsetEncoder  =  s.toCharArray();  switch(outputCharsetEncoder[i],  singleq)  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	CharsetEncoder  outputCharsetEncoder  =  s.toCharArray();  switch(outputCharsetEncoder[i],  singleq)  {	  char[]    singleq    =    s.toCharArray();    switch(singleq[i],    outputCharsetEncoder)    {    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
676	[BUG]  [BUGGY]  switch(singleq[i],  outputCharsetEncoder)  {  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  switch(singleq[i],  outputCharsetEncoder)  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	switch(singleq[i],  outputCharsetEncoder)  {	  char[]    singleq    =    s.toCharArray();    switch(singleq[i],    outputCharsetEncoder)    {    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
677	[BUG]  [BUGGY]  CharSequence  char[]  singleq  =  s.toCharArray();  switch(outputCharsetEncoder.charAt(0))  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  CharSequence  char[]  singleq  =  s.toCharArray();  switch(outputCharsetEncoder.charAt(0))  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	CharSequence  char[]  singleq  =  s.toCharArray();  switch(outputCharsetEncoder.charAt(0))  {	  CharSequence    char[]    singleq    =    s.toCharArray();    switch(outputCharsetEncoder.charAt(i))    {    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
678	[BUG]  [BUGGY]  switch(s.substring(i,  outputCharsetEncoder.jsString(),  s))  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  switch(s.substring(i,  outputCharsetEncoder.jsString(),  s))  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	switch(s.substring(i,  outputCharsetEncoder.jsString(),  s))  {	  switch(outputCharsetEncoder.jsString(),    s)    {    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
679	[BUG]  [BUGGY]  switch(s.substring(i,  outputCharsetEncoder.jsString()),  s)  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  switch(s.substring(i,  outputCharsetEncoder.jsString()),  s)  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	switch(s.substring(i,  outputCharsetEncoder.jsString()),  s)  {	  switch(outputCharsetEncoder.jsString(),    s)    {    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
680	[BUG]  [BUGGY]  switch(outputCharsetEncoder.jsString(),  s,  singleq)  {  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  switch(outputCharsetEncoder.jsString(),  s,  singleq)  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	switch(outputCharsetEncoder.jsString(),  s,  singleq)  {	  switch(outputCharsetEncoder.jsString(),    s)    {    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
681	[BUG]  [BUGGY]  switch(s.hashCode(),  outputCharsetEncoder)  {  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  switch(s.hashCode(),  outputCharsetEncoder)  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	switch(s.hashCode(),  outputCharsetEncoder)  {	  switch(outputCharsetEncoder.jsString(),    s)    {    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
682	[BUG]  [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.encode(s,  i  +  1,  s.charAt(i  +  1));  switch(cc.toString())  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.encode(s,  i  +  1,  s.charAt(i  +  1));  switch(cc.toString())  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	CharsetEncoder  cc  =  outputCharsetEncoder.encode(s,  i  +  1,  s.charAt(i  +  1));  switch(cc.toString())  {	  CharsetEncoder    cc    =    outputCharsetEncoder.encode(s,    i);    switch(cc.toString())    {    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
683	[BUG]  [BUGGY]  String  quote  =  s.substring(i  +  1,  s.length(),  outputCharsetEncoder);  break;  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  String  quote  =  s.substring(i  +  1,  s.length(),  outputCharsetEncoder);  break;  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	String  quote  =  s.substring(i  +  1,  s.length(),  outputCharsetEncoder);  break;	  String    quote    =    s.substring(i    +    1,    s.length());    break;    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
684	[BUG]  [BUGGY]  CharsetEncoder  outputCharsetEncoder  =  s.toCharArray();  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  CharsetEncoder  outputCharsetEncoder  =  s.toCharArray();  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	CharsetEncoder  outputCharsetEncoder  =  s.toCharArray();	  char[]    singleq    =    outputCharsetEncoder.toCharArray();    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
685	[BUG]  [BUGGY]  CharsetEncoder  outputCharsetEncoder  =  s.substring(i,  s.length()  -  1);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  CharsetEncoder  outputCharsetEncoder  =  s.substring(i,  s.length()  -  1);  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	CharsetEncoder  outputCharsetEncoder  =  s.substring(i,  s.length()  -  1);	  char[]    singleq    =    outputCharsetEncoder.toCharArray();    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
686	[BUG]  [BUGGY]  switch(s.substring(0,  Double.POSITIVE_INFINITY))  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  switch(s.substring(0,  Double.POSITIVE_INFINITY))  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	switch(s.substring(0,  Double.POSITIVE_INFINITY))  {	  switch(s.substring(i,    Double.POSITIVE_INFINITY))    {    	non-compiled	[CE]  illegal  start  of  expression	99	None	replace
687	[BUG]  [BUGGY]  char  quote  =  s.charAt(i]);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  char  quote  =  s.charAt(i]);  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	char  quote  =  s.charAt(i]);	  char    quote    =    s.charAt(i];    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
688	[BUG]  [BUGGY]  CharsetEncoder  outputCharsetEncoder  =  s.toCharArray(i);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  CharsetEncoder  outputCharsetEncoder  =  s.toCharArray(i);  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	CharsetEncoder  outputCharsetEncoder  =  s.toCharArray(i);	  char[]    singleq    =    outputCharsetEncoder.toCharArray(i);    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
689	[BUG]  [BUGGY]  switch(outputCharsetEncoder.substring(i,  s.indexOf(i  +  1)))  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  switch(outputCharsetEncoder.substring(i,  s.indexOf(i  +  1)))  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	switch(outputCharsetEncoder.substring(i,  s.indexOf(i  +  1)))  {	  switch(outputCharsetEncoder.substring(i    +    1))    {    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
690	[BUG]  [BUGGY]  switch(outputCharsetEncoder.substring(i  +  1),  s.charAt(i  +  1))  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  switch(outputCharsetEncoder.substring(i  +  1),  s.charAt(i  +  1))  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	switch(outputCharsetEncoder.substring(i  +  1),  s.charAt(i  +  1))  {	  switch(outputCharsetEncoder.substring(i    +    1))    {    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
691	[BUG]  [BUGGY]  Char  quote  =  s.charAt(i);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  Char  quote  =  s.charAt(i);  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	Char  quote  =  s.charAt(i);	  char    quote    =    outputCharsetEncoder.charAt(i);    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
692	[BUG]  [BUGGY]  Character  quote  =  s.charAt(i);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  Character  quote  =  s.charAt(i);  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	Character  quote  =  s.charAt(i);	  char    quote    =    outputCharsetEncoder.charAt(i);    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
693	[BUG]  [BUGGY]  char[]  singleq  =  s.toCharArray(i);  switch(s.charAt(0))  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  char[]  singleq  =  s.toCharArray(i);  switch(s.charAt(0))  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	char[]  singleq  =  s.toCharArray(i);  switch(s.charAt(0))  {	  char[]    singleq    =    s.toCharArray();    switch(s.charAt(0))    {    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
694	[BUG]  [BUGGY]  switch(s.substring(i,  i++))  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  switch(s.substring(i,  i++))  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	switch(s.substring(i,  i++))  {	  switch(s.substring(i,    i    +    1))    {    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
695	[BUG]  [BUGGY]  switch(s.substring(i  +  1,  doubleq),  singleq)  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  switch(s.substring(i  +  1,  doubleq),  singleq)  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	switch(s.substring(i  +  1,  doubleq),  singleq)  {	  switch(s.substring(i    +    1),    singleq)    {    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
696	[BUG]  [BUGGY]  switch(s.substring(0,  i  +  1),  singleq)  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  switch(s.substring(0,  i  +  1),  singleq)  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	switch(s.substring(0,  i  +  1),  singleq)  {	  switch(s.substring(i    +    1),    singleq)    {    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
697	[BUG]  [BUGGY]  CharSequence[]  singleq  =  s.toCharArray();  switch(outputCharsetEncoder.charAt(0))  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  CharSequence[]  singleq  =  s.toCharArray();  switch(outputCharsetEncoder.charAt(0))  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	CharSequence[]  singleq  =  s.toCharArray();  switch(outputCharsetEncoder.charAt(0))  {	  CharSequence[]    singleq    =    s.toCharArray();    switch(outputCharsetEncoder.charAt(i))    {    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
698	[BUG]  [BUGGY]  CharSequence[]  singleq  =  s.toString();  switch(outputCharsetEncoder.charAt(i))  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  CharSequence[]  singleq  =  s.toString();  switch(outputCharsetEncoder.charAt(i))  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	CharSequence[]  singleq  =  s.toString();  switch(outputCharsetEncoder.charAt(i))  {	  CharSequence[]    singleq    =    s.toCharArray();    switch(outputCharsetEncoder.charAt(i))    {    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
699	[BUG]  [BUGGY]  CharSequence[]  singleq  =  s.toCharArray();  switch(outputCharsetEncoder.charAt(i),  singleq)  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  CharSequence[]  singleq  =  s.toCharArray();  switch(outputCharsetEncoder.charAt(i),  singleq)  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	CharSequence[]  singleq  =  s.toCharArray();  switch(outputCharsetEncoder.charAt(i),  singleq)  {	  CharSequence[]    singleq    =    s.toCharArray();    switch(outputCharsetEncoder.charAt(i))    {    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
700	[BUG]  [BUGGY]  switch(s.substring(i,  s.indexOf('')))  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  switch(s.substring(i,  s.indexOf('')))  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	switch(s.substring(i,  s.indexOf('')))  {	  switch(s.substring(i,    outputCharsetEncoder.jsString()))    {    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
701	[BUG]  [BUGGY]  switch(s.substring(i,  s.lastIndexOf('')))  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  switch(s.substring(i,  s.lastIndexOf('')))  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	switch(s.substring(i,  s.lastIndexOf('')))  {	  switch(s.substring(i,    outputCharsetEncoder.jsString()))    {    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
702	[BUG]  [BUGGY]  CharSequence[]  singleq  =  s.toString();  switch(s.charAt(i))  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  CharSequence[]  singleq  =  s.toString();  switch(s.charAt(i))  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	CharSequence[]  singleq  =  s.toString();  switch(s.charAt(i))  {	  CharSequence[]    singleq    =    s.toCharArray();    switch(s.charAt(i))    {    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
703	[BUG]  [BUGGY]  CharSequence[]  singleq  =  s.toCharArray();  switch(s.charAt(i),  singleq)  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  CharSequence[]  singleq  =  s.toCharArray();  switch(s.charAt(i),  singleq)  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	CharSequence[]  singleq  =  s.toCharArray();  switch(s.charAt(i),  singleq)  {	  CharSequence[]    singleq    =    s.toCharArray();    switch(s.charAt(i))    {    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
704	[BUG]  [BUGGY]  CharsetEncoder  outputCharsetEncoder  =  s.charAt(i);  switch(outputCharsetEncoder)  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  CharsetEncoder  outputCharsetEncoder  =  s.charAt(i);  switch(outputCharsetEncoder)  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	CharsetEncoder  outputCharsetEncoder  =  s.charAt(i);  switch(outputCharsetEncoder)  {	  CharsetEncoder    outputCharsetEncoder    =    outputCharsetEncoder.encode(s,    i);    switch(outputCharsetEncoder)    {    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
705	[BUG]  [BUGGY]  CharsetEncoder  outputCharsetEncoder  =  outputCharsetEncoder.encode(s,  i  +  1,  s.length());  switch(outputCharsetEncoder)  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  CharsetEncoder  outputCharsetEncoder  =  outputCharsetEncoder.encode(s,  i  +  1,  s.length());  switch(outputCharsetEncoder)  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	CharsetEncoder  outputCharsetEncoder  =  outputCharsetEncoder.encode(s,  i  +  1,  s.length());  switch(outputCharsetEncoder)  {	  CharsetEncoder    outputCharsetEncoder    =    outputCharsetEncoder.encode(s,    i);    switch(outputCharsetEncoder)    {    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
706	[BUG]  [BUGGY]  Charset[]  singleq  =  s.toCharArray();  switch(s.charAt(i))  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  Charset[]  singleq  =  s.toCharArray();  switch(s.charAt(i))  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	Charset[]  singleq  =  s.toCharArray();  switch(s.charAt(i))  {	  Char[]    singleq    =    s.toCharArray();    switch(s.charAt(i))    {    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
707	[BUG]  [BUGGY]  CharSetSequence  s  =  s.toCharArray();  switch(s.charAt(i))  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  CharSetSequence  s  =  s.toCharArray();  switch(s.charAt(i))  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	CharSetSequence  s  =  s.toCharArray();  switch(s.charAt(i))  {	  Char[]    singleq    =    s.toCharArray();    switch(s.charAt(i))    {    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
708	[BUG]  [BUGGY]  switch(s.toString())  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  switch(s.toString())  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	switch(s.toString())  {	  switch(s.jsString())    {    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
709	[BUG]  [BUGGY]  switch(s.substring(i  +  1,  s.charAt(i  +  1))  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  switch(s.substring(i  +  1,  s.charAt(i  +  1))  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	switch(s.substring(i  +  1,  s.charAt(i  +  1))  {	  switch(s.substring(i    +    1),    s.charAt(i    +    1))    {    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
710	[BUG]  [BUGGY]  switch(s.substring(0,  i),  s.charAt(i  +  1))  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  switch(s.substring(0,  i),  s.charAt(i  +  1))  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	switch(s.substring(0,  i),  s.charAt(i  +  1))  {	  switch(s.substring(i    +    1),    s.charAt(i    +    1))    {    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
711	[BUG]  [BUGGY]  switch(s.charAt(i  +  1),  s.substring(i  +  1))  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  switch(s.charAt(i  +  1),  s.substring(i  +  1))  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	switch(s.charAt(i  +  1),  s.substring(i  +  1))  {	  switch(s.substring(i    +    1),    s.charAt(i    +    1))    {    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
712	[BUG]  [BUGGY]  switch(s.charAt(i  +  1),  outputCharsetEncoder).toLowerCase())  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  switch(s.charAt(i  +  1),  outputCharsetEncoder).toLowerCase())  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	switch(s.charAt(i  +  1),  outputCharsetEncoder).toLowerCase())  {	  switch(s.charAt(i    +    1),    outputCharsetEncoder)    {    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
713	[BUG]  [BUGGY]  switch(s.charAt(i  +  1),  inputCharsetEncoder)  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  switch(s.charAt(i  +  1),  inputCharsetEncoder)  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	switch(s.charAt(i  +  1),  inputCharsetEncoder)  {	  switch(s.charAt(i    +    1),    outputCharsetEncoder)    {    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
714	[BUG]  [BUGGY]  switch(s.charAt(i++),  outputCharsetEncoder)  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  switch(s.charAt(i++),  outputCharsetEncoder)  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	switch(s.charAt(i++),  outputCharsetEncoder)  {	  switch(s.charAt(i    +    1),    outputCharsetEncoder)    {    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
715	[BUG]  [BUGGY]  CharSequence  s  =  s.trim();  switch(s.charAt(i))  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  CharSequence  s  =  s.trim();  switch(s.charAt(i))  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	CharSequence  s  =  s.trim();  switch(s.charAt(i))  {	  CharSequence    s    =    s.toCharArray();    switch(s.charAt(i))    {    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
716	[BUG]  [BUGGY]  CharSequence  s  =  s.charAt(i);  switch(s.charAt(i))  {  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  CharSequence  s  =  s.charAt(i);  switch(s.charAt(i))  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	CharSequence  s  =  s.charAt(i);  switch(s.charAt(i))  {	  CharSequence    s    =    s.toCharArray();    switch(s.charAt(i))    {    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
717	[BUG]  [BUGGY]  CharSequence  s  =  s.toCharArray();  switch(s.charAt(i  +  1))  {  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  CharSequence  s  =  s.toCharArray();  switch(s.charAt(i  +  1))  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	CharSequence  s  =  s.toCharArray();  switch(s.charAt(i  +  1))  {	  CharSequence    s    =    s.toCharArray();    switch(s.charAt(i))    {    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
718	[BUG]  [BUGGY]  CharSequence  s  =  s.toCharArray();  switch(s.charAt(0))  {  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  CharSequence  s  =  s.toCharArray();  switch(s.charAt(0))  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	CharSequence  s  =  s.toCharArray();  switch(s.charAt(0))  {	  CharSequence    s    =    s.toCharArray();    switch(s.charAt(i))    {    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
719	[BUG]  [BUGGY]  CharSequence  s  =  s.substring(0,  i);  switch(s.charAt(i))  {  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  CharSequence  s  =  s.substring(0,  i);  switch(s.charAt(i))  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	CharSequence  s  =  s.substring(0,  i);  switch(s.charAt(i))  {	  CharSequence    s    =    s.toCharArray();    switch(s.charAt(i))    {    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
720	[BUG]  [BUGGY]  switch(s.charAt(i),  singleq  -  doubleq)  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  switch(s.charAt(i),  singleq  -  doubleq)  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	switch(s.charAt(i),  singleq  -  doubleq)  {	  switch(s.charAt(i),    singleq)    {    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
721	[BUG]  [BUGGY]  CharsetEncoder  s  =  outputCharsetEncoder.encode(s,  i);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  CharsetEncoder  s  =  outputCharsetEncoder.encode(s,  i);  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	CharsetEncoder  s  =  outputCharsetEncoder.encode(s,  i);	  CharsetEncoder    outputCharsetEncoder    =    outputCharsetEncoder.encode(s,    i);    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
722	[BUG]  [BUGGY]  CharSequence[]  singleq  =  s.toCharArray();  switch(singleq[i],  singleq)  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  CharSequence[]  singleq  =  s.toCharArray();  switch(singleq[i],  singleq)  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	CharSequence[]  singleq  =  s.toCharArray();  switch(singleq[i],  singleq)  {	  CharSequence[]    singleq    =    s.toCharArray();    switch(singleq[i])    {    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
723	[BUG]  [BUGGY]  CharSequence[]  singleq  =  s.toCharArray();  switch(singleq,  singleq[i])  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  CharSequence[]  singleq  =  s.toCharArray();  switch(singleq,  singleq[i])  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	CharSequence[]  singleq  =  s.toCharArray();  switch(singleq,  singleq[i])  {	  CharSequence[]    singleq    =    s.toCharArray();    switch(singleq[i])    {    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
724	[BUG]  [BUGGY]  Charset[]  singleq  =  s.toCharArray();  switch(singleq[i])  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  Charset[]  singleq  =  s.toCharArray();  switch(singleq[i])  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	Charset[]  singleq  =  s.toCharArray();  switch(singleq[i])  {	  Char[]    singleq    =    s.toCharArray();    switch(singleq[i])    {    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
725	[BUG]  [BUGGY]  switch(s.hashCode(),  outputCharsetEncoder.jsString(i))  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  switch(s.hashCode(),  outputCharsetEncoder.jsString(i))  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	switch(s.hashCode(),  outputCharsetEncoder.jsString(i))  {	  switch(outputCharsetEncoder.jsString(i))    {    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
726	[BUG]  [BUGGY]  CharTypes.char[]  singleq  =  s.toCharArray();  switch(outputCharsetEncoder.charAt(0))  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  CharTypes.char[]  singleq  =  s.toCharArray();  switch(outputCharsetEncoder.charAt(0))  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	CharTypes.char[]  singleq  =  s.toCharArray();  switch(outputCharsetEncoder.charAt(0))  {	  CharTypes.char[]    singleq    =    s.toCharArray();    switch(outputCharsetEncoder.charAt(i))    {    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
727	[BUG]  [BUGGY]  CharTypes.char[]  singleq  =  s.toCharArray();  switch(outputCharsetEncoder,  outputCharsetEncoder.charAt(i))  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  CharTypes.char[]  singleq  =  s.toCharArray();  switch(outputCharsetEncoder,  outputCharsetEncoder.charAt(i))  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	CharTypes.char[]  singleq  =  s.toCharArray();  switch(outputCharsetEncoder,  outputCharsetEncoder.charAt(i))  {	  CharTypes.char[]    singleq    =    s.toCharArray();    switch(outputCharsetEncoder.charAt(i))    {    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
728	[BUG]  [BUGGY]  String  quote  =  s.substring(i  +  1,  s.length(),  outputCharsetEncoder);  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  String  quote  =  s.substring(i  +  1,  s.length(),  outputCharsetEncoder);  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	String  quote  =  s.substring(i  +  1,  s.length(),  outputCharsetEncoder);	  String    quote    =    s.substring(i    +    1,    s.length());    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
729	[BUG]  [BUGGY]  String  quote  =  s.substring(0,  i  +  1,  s.length());  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  String  quote  =  s.substring(0,  i  +  1,  s.length());  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	String  quote  =  s.substring(0,  i  +  1,  s.length());	  String    quote    =    s.substring(i    +    1,    s.length());    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
730	[BUG]  [BUGGY]  String  quote  =  s.substring(i  +  1,  s.length()  *  2);  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  String  quote  =  s.substring(i  +  1,  s.length()  *  2);  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	String  quote  =  s.substring(i  +  1,  s.length()  *  2);	  String    quote    =    s.substring(i    +    1,    s.length());    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
731	[BUG]  [BUGGY]  switch(s.substring(i  +  1,  s.length()),  singleq)  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  switch(s.substring(i  +  1,  s.length()),  singleq)  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	switch(s.substring(i  +  1,  s.length()),  singleq)  {	  switch(s.substring(i    +    1,    s.length()))    {    	non-compiled	[CE]  illegal  start  of  expression	101	None	replace
732	[BUG]  [BUGGY]  switch(s,  outputCharsetEncoder.toLowerCase())  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  switch(s,  outputCharsetEncoder.toLowerCase())  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	switch(s,  outputCharsetEncoder.toLowerCase())  {	  switch(s,    outputCharsetEncoder.jsString())    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
733	[BUG]  [BUGGY]  CharSequence  char[]  singleq  =  s.toString();  switch(s.charAt(i))  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  CharSequence  char[]  singleq  =  s.toString();  switch(s.charAt(i))  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	CharSequence  char[]  singleq  =  s.toString();  switch(s.charAt(i))  {	  CharSequence    char[]    singleq    =    s.toCharArray();    switch(s.charAt(i))    {    	non-compiled	[CE]  illegal  start  of  expression	103	None	replace
734	[BUG]  [BUGGY]  CharsetEncoder  consumer  =  s.getCurrentContext();  break;  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  CharsetEncoder  consumer  =  s.getCurrentContext();  break;  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	CharsetEncoder  consumer  =  s.getCurrentContext();  break;	  CharsetEncoder    consumer    =    outputCharsetEncoder.getContext();    break;    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
735	[BUG]  [BUGGY]  CharsetEncoder  consumer  =  outputCharsetEncoder.encode(s);  break;  [CE]  illegal  start  of  expression  [FE]                                    ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  CharsetEncoder  consumer  =  outputCharsetEncoder.encode(s);  break;  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	CharsetEncoder  consumer  =  outputCharsetEncoder.encode(s);  break;	  CharsetEncoder    consumer    =    outputCharsetEncoder.getContext();    break;    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
736	[BUG]  [BUGGY]  switch(s.substring(i,  outputCharsetEncoder.getIndex(i)))  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  switch(s.substring(i,  outputCharsetEncoder.getIndex(i)))  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	switch(s.substring(i,  outputCharsetEncoder.getIndex(i)))  {	  switch(outputCharsetEncoder.substring(i,    i))    {    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
737	[BUG]  [BUGGY]  switch(s.substring(i,  outputCharsetEncoder.lastIndexOf(''')))  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  switch(s.substring(i,  outputCharsetEncoder.lastIndexOf(''')))  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	switch(s.substring(i,  outputCharsetEncoder.lastIndexOf(''')))  {	  switch(outputCharsetEncoder.substring(i,    i))    {    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
738	[BUG]  [BUGGY]  switch(s.substring(i,  outputCharsetEncoder.lastIndexOf('/')))  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  switch(s.substring(i,  outputCharsetEncoder.lastIndexOf('/')))  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	switch(s.substring(i,  outputCharsetEncoder.lastIndexOf('/')))  {	  switch(outputCharsetEncoder.substring(i,    i))    {    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
739	[BUG]  [BUGGY]  switch(s.substring(i,  outputCharsetEncoder.lastIndexOf('.')))  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  switch(s.substring(i,  outputCharsetEncoder.lastIndexOf('.')))  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	switch(s.substring(i,  outputCharsetEncoder.lastIndexOf('.')))  {	  switch(outputCharsetEncoder.substring(i,    i))    {    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
740	[BUG]  [BUGGY]  char  quote  =  s.charAt(i,  singleq)+  1;  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  char  quote  =  s.charAt(i,  singleq)+  1;  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	char  quote  =  s.charAt(i,  singleq)+  1;	  char    quote    =    s.charAt(i,    singleq);    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
741	[BUG]  [BUGGY]  char  quote  =  s.charAt(i).replace('',  '');  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  char  quote  =  s.charAt(i).replace('',  '');  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	char  quote  =  s.charAt(i).replace('',  '');	  char    quote    =    s.charAt(i).trim();    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
742	[BUG]  [BUGGY]  char  quote  =  s.charAt(i).trim()  +  ''';  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  char  quote  =  s.charAt(i).trim()  +  ''';  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	char  quote  =  s.charAt(i).trim()  +  ''';	  char    quote    =    s.charAt(i).trim();    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
743	[BUG]  [BUGGY]  char  quote  =  jsString(s,  outputCharsetEncoder);  break;  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  char  quote  =  jsString(s,  outputCharsetEncoder);  break;  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	char  quote  =  jsString(s,  outputCharsetEncoder);  break;	  String    quote    =    jsString(s,    outputCharsetEncoder);    break;    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
744	[BUG]  [BUGGY]  String  quote  =  jsString(s,  outputCharsetEncoder.encode(i));  break;  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  String  quote  =  jsString(s,  outputCharsetEncoder.encode(i));  break;  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	String  quote  =  jsString(s,  outputCharsetEncoder.encode(i));  break;	  String    quote    =    jsString(s,    outputCharsetEncoder);    break;    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
745	[BUG]  [BUGGY]  CharSequence[]  singleq  =  s.toString();  switch(singleq[i],  outputCharsetEncoder)  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  CharSequence[]  singleq  =  s.toString();  switch(singleq[i],  outputCharsetEncoder)  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	CharSequence[]  singleq  =  s.toString();  switch(singleq[i],  outputCharsetEncoder)  {	  CharSequence[]    singleq    =    s.toCharArray();    switch(singleq[i],    outputCharsetEncoder)    {    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
746	[BUG]  [BUGGY]  CharSequence[]  singleq  =  s.toCharArray(i);  switch(singleq[i],  outputCharsetEncoder)  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  CharSequence[]  singleq  =  s.toCharArray(i);  switch(singleq[i],  outputCharsetEncoder)  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	CharSequence[]  singleq  =  s.toCharArray(i);  switch(singleq[i],  outputCharsetEncoder)  {	  CharSequence[]    singleq    =    s.toCharArray();    switch(singleq[i],    outputCharsetEncoder)    {    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
747	[BUG]  [BUGGY]  CharSetSequence[]  singleq  =  s.toCharArray();  switch(singleq[i],  outputCharsetEncoder)  {  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  CharSetSequence[]  singleq  =  s.toCharArray();  switch(singleq[i],  outputCharsetEncoder)  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	CharSetSequence[]  singleq  =  s.toCharArray();  switch(singleq[i],  outputCharsetEncoder)  {	  CharSequence[]    singleq    =    s.toCharArray();    switch(singleq[i],    outputCharsetEncoder)    {    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
748	[BUG]  [BUGGY]  Charsequence[]  singleq  =  s.toCharArray();  switch(singleq[i],  outputCharsetEncoder)  {  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  Charsequence[]  singleq  =  s.toCharArray();  switch(singleq[i],  outputCharsetEncoder)  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	Charsequence[]  singleq  =  s.toCharArray();  switch(singleq[i],  outputCharsetEncoder)  {	  CharSequence[]    singleq    =    s.toCharArray();    switch(singleq[i],    outputCharsetEncoder)    {    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
749	[BUG]  [BUGGY]  CharType[]  singleq  =  s.toCharArray();  switch(singleq,  singleq[i])  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  CharType[]  singleq  =  s.toCharArray();  switch(singleq,  singleq[i])  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	CharType[]  singleq  =  s.toCharArray();  switch(singleq,  singleq[i])  {	  CharType[]    singleq    =    s.toCharArray();    switch(singleq[i])    {    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
750	[BUG]  [BUGGY]  switch(s.charAt(i),  s,  outputCharsetEncoder)  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  switch(s.charAt(i),  s,  outputCharsetEncoder)  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	switch(s.charAt(i),  s,  outputCharsetEncoder)  {	  switch(s.charAt(i),    outputCharsetEncoder,    quote)    {    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
751	[BUG]  [BUGGY]  switch(s.charAt(i),  line,  outputCharsetEncoder)  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  switch(s.charAt(i),  line,  outputCharsetEncoder)  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	switch(s.charAt(i),  line,  outputCharsetEncoder)  {	  switch(s.charAt(i),    outputCharsetEncoder,    quote)    {    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
752	[BUG]  [BUGGY]  CharSequence  singleq  =  s.toCharArray();  switch(singleq,  singleq[i])  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  CharSequence  singleq  =  s.toCharArray();  switch(singleq,  singleq[i])  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	CharSequence  singleq  =  s.toCharArray();  switch(singleq,  singleq[i])  {	  CharSequence    singleq    =    s.toCharArray();    switch(singleq[i])    {    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
753	[BUG]  [BUGGY]  CharSequence  singleq  =  s.toCharArray();  switch(singleq[i],  singleq)  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  CharSequence  singleq  =  s.toCharArray();  switch(singleq[i],  singleq)  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	CharSequence  singleq  =  s.toCharArray();  switch(singleq[i],  singleq)  {	  CharSequence    singleq    =    s.toCharArray();    switch(singleq[i])    {    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
754	[BUG]  [BUGGY]  switch(s.substring(i),  outputCharsetEncoder.endsWith(s.substring(i)))  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  switch(s.substring(i),  outputCharsetEncoder.endsWith(s.substring(i)))  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	switch(s.substring(i),  outputCharsetEncoder.endsWith(s.substring(i)))  {	  switch(outputCharsetEncoder.substring(i))    {    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
755	[BUG]  [BUGGY]  switch(s.substring(i,  outputCharsetEncoder.startsWith(s)))  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  switch(s.substring(i,  outputCharsetEncoder.startsWith(s)))  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	switch(s.substring(i,  outputCharsetEncoder.startsWith(s)))  {	  switch(outputCharsetEncoder.substring(i))    {    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
756	[BUG]  [BUGGY]  switch(s.substring(i  +  1),  s.substring(i  +  1))  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  switch(s.substring(i  +  1),  s.substring(i  +  1))  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	switch(s.substring(i  +  1),  s.substring(i  +  1))  {	  switch(s.substring(i    +    1),    outputCharsetEncoder)    {    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
757	[BUG]  [BUGGY]  String  quote  =  jsString(s,  i);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  String  quote  =  jsString(s,  i);  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	String  quote  =  jsString(s,  i);	  String    quote    =    jsString(s,    outputCharsetEncoder);    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
758	[BUG]  [BUGGY]  String  quote  =  jsString(s,  outputCharsetEncoder,  true);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  String  quote  =  jsString(s,  outputCharsetEncoder,  true);  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	String  quote  =  jsString(s,  outputCharsetEncoder,  true);	  String    quote    =    jsString(s,    outputCharsetEncoder);    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
759	[BUG]  [BUGGY]  switch(s.substring(0,  i  +  1)&&  s.charAt(i  +  1)!=  ''')  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  switch(s.substring(0,  i  +  1)&&  s.charAt(i  +  1)!=  ''')  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	switch(s.substring(0,  i  +  1)&&  s.charAt(i  +  1)!=  ''')  {	  switch(s.substring(0,    i    +    1))    {    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
760	[BUG]  [BUGGY]  switch(s.substring(0,  i  +  1)&&  s.charAt(i  +  1)  ==  '-')  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  switch(s.substring(0,  i  +  1)&&  s.charAt(i  +  1)  ==  '-')  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	switch(s.substring(0,  i  +  1)&&  s.charAt(i  +  1)  ==  '-')  {	  switch(s.substring(0,    i    +    1))    {    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
761	[BUG]  [BUGGY]  switch(s.hsString(),  i)  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  switch(s.hsString(),  i)  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	switch(s.hsString(),  i)  {	  switch(outputCharsetEncoder.jsString(),    i)    {    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
762	[BUG]  [BUGGY]  switch(s.toString(),  i)  {  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  switch(s.toString(),  i)  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	switch(s.toString(),  i)  {	  switch(outputCharsetEncoder.jsString(),    i)    {    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
763	[BUG]  [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.encode(s,  i  +  1,  s.charAt(i  +  1));  break;  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.encode(s,  i  +  1,  s.charAt(i  +  1));  break;  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	CharsetEncoder  cc  =  outputCharsetEncoder.encode(s,  i  +  1,  s.charAt(i  +  1));  break;	  CharsetEncoder    cc    =    outputCharsetEncoder.encode(s,    i);    break;    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
764	[BUG]  [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.encode(s,  i  +  1,  s.charAt(i));  break;  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.encode(s,  i  +  1,  s.charAt(i));  break;  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	CharsetEncoder  cc  =  outputCharsetEncoder.encode(s,  i  +  1,  s.charAt(i));  break;	  CharsetEncoder    cc    =    outputCharsetEncoder.encode(s,    i);    break;    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
765	[BUG]  [BUGGY]  CharsetEncoder  cc  =  s.encode(outputCharsetEncoder);  break;  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  CharsetEncoder  cc  =  s.encode(outputCharsetEncoder);  break;  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	CharsetEncoder  cc  =  s.encode(outputCharsetEncoder);  break;	  CharsetEncoder    cc    =    outputCharsetEncoder.encode(s,    i);    break;    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
766	[BUG]  [BUGGY]  switch(s.getKey())  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  switch(s.getKey())  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	switch(s.getKey())  {	  switch(s.getString())    {    	non-compiled	[CE]  illegal  start  of  expression	107	None	replace
767	[BUG]  [BUGGY]  switch(s.substring(i,  Double.NaN))  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  switch(s.substring(i,  Double.NaN))  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	switch(s.substring(i,  Double.NaN))  {	  switch(s.substring(i,    0))    {    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
768	[BUG]  [BUGGY]  char[]  singleq  =  s.substring(i  +  1,  s.length(),  outputCharsetEncoder);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  char[]  singleq  =  s.substring(i  +  1,  s.length(),  outputCharsetEncoder);  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	char[]  singleq  =  s.substring(i  +  1,  s.length(),  outputCharsetEncoder);	  char[]    singleq    =    s.substring(i    +    1,    s.length());    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
769	[BUG]  [BUGGY]  char[]  singleq  =  s.substring(i  +  1,  s.length()).trim();  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  char[]  singleq  =  s.substring(i  +  1,  s.length()).trim();  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	char[]  singleq  =  s.substring(i  +  1,  s.length()).trim();	  char[]    singleq    =    s.substring(i    +    1,    s.length());    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
770	[BUG]  [BUGGY]  CharsetEncoder  outputCharsetEncoder  =  s.toCharArray();  switch(outputCharsetEncoder.charAt(i))  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  CharsetEncoder  outputCharsetEncoder  =  s.toCharArray();  switch(outputCharsetEncoder.charAt(i))  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	CharsetEncoder  outputCharsetEncoder  =  s.toCharArray();  switch(outputCharsetEncoder.charAt(i))  {	  char[]    singleq    =    s.toCharArray();    switch(outputCharsetEncoder.charAt(i))    {    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
771	[BUG]  [BUGGY]  CharsetEncoder  outputCharsetEncoder  =  outputCharsetEncoder.encode(s);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  CharsetEncoder  outputCharsetEncoder  =  outputCharsetEncoder.encode(s);  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	CharsetEncoder  outputCharsetEncoder  =  outputCharsetEncoder.encode(s);	  char[]    singleq    =    s.toCharArray();    switch(outputCharsetEncoder.charAt(i))    {    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
772	[BUG]  [BUGGY]  CharsetEncoder  outputCharsetEncoder  =  outputCharsetEncoder.encode(s);  switch(outputCharsetEncoder.charAt(i))  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  CharsetEncoder  outputCharsetEncoder  =  outputCharsetEncoder.encode(s);  switch(outputCharsetEncoder.charAt(i))  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	CharsetEncoder  outputCharsetEncoder  =  outputCharsetEncoder.encode(s);  switch(outputCharsetEncoder.charAt(i))  {	  char[]    singleq    =    s.toCharArray();    switch(outputCharsetEncoder.charAt(i))    {    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
773	[BUG]  [BUGGY]  CharsetEncoder  outputCharsetEncoder  =  outputCharsetEncoder.toCharArray(i);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  CharsetEncoder  outputCharsetEncoder  =  outputCharsetEncoder.toCharArray(i);  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	CharsetEncoder  outputCharsetEncoder  =  outputCharsetEncoder.toCharArray(i);	  char[]    singleq    =    s.toCharArray();    switch(outputCharsetEncoder.charAt(i))    {    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
774	[BUG]  [BUGGY]  CharsetEncoder  outputCharsetEncoder  =  outputCharsetEncoder.encode(s,  i);  switch(outputCharsetEncoder,  doubleq)  {  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  CharsetEncoder  outputCharsetEncoder  =  outputCharsetEncoder.encode(s,  i);  switch(outputCharsetEncoder,  doubleq)  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	CharsetEncoder  outputCharsetEncoder  =  outputCharsetEncoder.encode(s,  i);  switch(outputCharsetEncoder,  doubleq)  {	  char[]    singleq    =    s.toCharArray();    switch(singleq[i],    doubleq)    {    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
775	[BUG]  [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.encode(s,  i);  switch(cc,  singleq[i],  doubleq)  {  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.encode(s,  i);  switch(cc,  singleq[i],  doubleq)  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	CharsetEncoder  cc  =  outputCharsetEncoder.encode(s,  i);  switch(cc,  singleq[i],  doubleq)  {	  char[]    singleq    =    s.toCharArray();    switch(singleq[i],    doubleq)    {    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
776	[BUG]  [BUGGY]  CharSequence  s  =  s.toCharArray();  switch(singleq[i],  doubleq)  {  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  CharSequence  s  =  s.toCharArray();  switch(singleq[i],  doubleq)  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	CharSequence  s  =  s.toCharArray();  switch(singleq[i],  doubleq)  {	  char[]    singleq    =    s.toCharArray();    switch(singleq[i],    doubleq)    {    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
777	[BUG]  [BUGGY]  switch(singleq[i],  doubleq)  {  [CE]  illegal  start  of  expression  [FE]                                    ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  switch(singleq[i],  doubleq)  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	switch(singleq[i],  doubleq)  {	  char[]    singleq    =    s.toCharArray();    switch(singleq[i],    doubleq)    {    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
778	[BUG]  [BUGGY]  switch(s.substring(i  +  1),  s.charAt(i))  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  switch(s.substring(i  +  1),  s.charAt(i))  {  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	switch(s.substring(i  +  1),  s.charAt(i))  {	  switch(s.substring(i),    outputCharsetEncoder.charAt(i))    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
779	[BUG]  [BUGGY]  char[]  singleq  =  s.toCharArray()  [i];  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  char[]  singleq  =  s.toCharArray()  [i];  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	char[]  singleq  =  s.toCharArray()  [i];	  char[]    singleq    =    s.toCharArray()    +    i;    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
780	[BUG]  [BUGGY]  CharsetEncoder  outputCharsetEncoder  =  charsetEncoder.charAt(i);  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  CharsetEncoder  outputCharsetEncoder  =  charsetEncoder.charAt(i);  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	CharsetEncoder  outputCharsetEncoder  =  charsetEncoder.charAt(i);	  CharsetEncoder    outputCharsetEncoder    =    outputCharsetEncoder.charAt(i);    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
781	[BUG]  [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.charAt(i);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  CharsetEncoder  cc  =  outputCharsetEncoder.charAt(i);  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	CharsetEncoder  cc  =  outputCharsetEncoder.charAt(i);	  CharsetEncoder    outputCharsetEncoder    =    outputCharsetEncoder.charAt(i);    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
782	[BUG]  [BUGGY]  CharsetEncoder  i  =  outputCharsetEncoder.charAt(i);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  CharsetEncoder  i  =  outputCharsetEncoder.charAt(i);  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	CharsetEncoder  i  =  outputCharsetEncoder.charAt(i);	  CharsetEncoder    outputCharsetEncoder    =    outputCharsetEncoder.charAt(i);    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
783	[BUG]  [BUGGY]  CharsetEncoder  charsetEncoder  =  s.charAt(i);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  CharsetEncoder  charsetEncoder  =  s.charAt(i);  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	CharsetEncoder  charsetEncoder  =  s.charAt(i);	  CharsetEncoder    outputCharsetEncoder    =    outputCharsetEncoder.charAt(i);    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
784	[BUG]  [BUGGY]  CharsetEncoder  encoder  =  s.charAt(i);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      static  String  jsString(String  s,  CharsetEncoder  outputCharsetEncoder)  {  int  singleq  =  0,  doubleq  =  0;  for  (int  i  =  0;  i  <  s.length();  i++)  {      [BUGGY]  CharsetEncoder  encoder  =  s.charAt(i);  [BUGGY]      case  '     "':  doubleq++;  break;  case  '\'':  singleq++;  break;  }  }  String  doublequote,  singlequote;  char  quote;  if  (singleq  <  doubleq)  {  quote  =  '\'';  [CLASS]  CodeGenerator  Context  [METHOD]  jsString  [RETURN_TYPE]  String  String  s  CharsetEncoder  outputCharsetEncoder  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  lhsContext  rhsContext  boolean  char  quote  CodeConsumer  cc  consumer  String  doublequote  s  singlequote  CharsetEncoder  outputCharsetEncoder  int  doubleq  i  singleq  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	944	944	1	replace	CharsetEncoder  encoder  =  s.charAt(i);	  CharsetEncoder    outputCharsetEncoder    =    outputCharsetEncoder.charAt(i);    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
