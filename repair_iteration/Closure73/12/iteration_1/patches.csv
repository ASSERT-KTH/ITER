bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  int  childCount  =  n.getChildCount()  -  1;  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]    break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(     "Unexpected  String  children:     "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));    [BUGGY]  int  childCount  =  n.getChildCount()  -  1;  [BUGGY]      case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(   "delete     ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	int  childCount  =  n.getChildCount()  -  1;	  int    childCount    =    n.getChildCount();    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
2	[BUG]  [BUGGY]  int  childCount  =  n.getChildCount()  +  1;  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]    break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(     "Unexpected  String  children:     "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));    [BUGGY]  int  childCount  =  n.getChildCount()  +  1;  [BUGGY]      case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(   "delete     ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	int  childCount  =  n.getChildCount()  +  1;	  int    childCount    =    n.getChildCount();    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
3	[BUG]  [BUGGY]  int  childCount  =  n.getChildCount()  *  2;  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure    [CONTEXT]    break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(     "Unexpected  String  children:     "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));    [BUGGY]  int  childCount  =  n.getChildCount()  *  2;  [BUGGY]      case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(   "delete     ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	int  childCount  =  n.getChildCount()  *  2;	  int    childCount    =    n.getChildCount();    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
4	[BUG]  [BUGGY]  int  childCount  =  n.getChildCount()  -  2;  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure    [CONTEXT]    break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(     "Unexpected  String  children:     "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));    [BUGGY]  int  childCount  =  n.getChildCount()  -  2;  [BUGGY]      case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(   "delete     ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	int  childCount  =  n.getChildCount()  -  2;	  int    childCount    =    n.getChildCount();    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
5	[BUG]  [BUGGY]  int  childCount  =  n.getFirstChild();  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure    [CONTEXT]    break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(     "Unexpected  String  children:     "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));    [BUGGY]  int  childCount  =  n.getFirstChild();  [BUGGY]      case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(   "delete     ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	int  childCount  =  n.getFirstChild();	  int    childCount    =    n.getChildCount();    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
6	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure    [CONTEXT]    break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(     "Unexpected  String  children:     "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));    [BUGGY]  if(n.getType()  ==  Token.STRING)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(   "delete     ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	if(n.getType()  ==  Token.STRING)  {  throw  new  IllegalStateException( " ");  }	  if(n.getType()    ==    Token.STRING)    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
7	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING  ||  n.getType()  ==  Token.OBJECTLIT)  {  break;  }  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure    [CONTEXT]    break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(     "Unexpected  String  children:     "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));    [BUGGY]  if(n.getType()  ==  Token.STRING  ||  n.getType()  ==  Token.OBJECTLIT)  {  break;  }  [BUGGY]      case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(   "delete     ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	if(n.getType()  ==  Token.STRING  ||  n.getType()  ==  Token.OBJECTLIT)  {  break;  }	  if(n.getType()    ==    Token.STRING)    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
8	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING  ||  n.getType()  ==  Token.FUNCTION)  {  break;  }  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure    [CONTEXT]    break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(     "Unexpected  String  children:     "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));    [BUGGY]  if(n.getType()  ==  Token.STRING  ||  n.getType()  ==  Token.FUNCTION)  {  break;  }  [BUGGY]      case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(   "delete     ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	if(n.getType()  ==  Token.STRING  ||  n.getType()  ==  Token.FUNCTION)  {  break;  }	  if(n.getType()    ==    Token.STRING)    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
9	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING  ||  n.getType()  ==  Token.NAME)  {  break;  }  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure    [CONTEXT]    break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(     "Unexpected  String  children:     "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));    [BUGGY]  if(n.getType()  ==  Token.STRING  ||  n.getType()  ==  Token.NAME)  {  break;  }  [BUGGY]      case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(   "delete     ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	if(n.getType()  ==  Token.STRING  ||  n.getType()  ==  Token.NAME)  {  break;  }	  if(n.getType()    ==    Token.STRING)    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
10	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING  ||  n.getType()  ==  Token.DELPROP)  {  break;  }  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure    [CONTEXT]    break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(     "Unexpected  String  children:     "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));    [BUGGY]  if(n.getType()  ==  Token.STRING  ||  n.getType()  ==  Token.DELPROP)  {  break;  }  [BUGGY]      case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(   "delete     ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	if(n.getType()  ==  Token.STRING  ||  n.getType()  ==  Token.DELPROP)  {  break;  }	  if(n.getType()    ==    Token.STRING)    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
11	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING  ||  n.getType()  ==  Token.START)  {  break;  }  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure    [CONTEXT]    break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(     "Unexpected  String  children:     "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));    [BUGGY]  if(n.getType()  ==  Token.STRING  ||  n.getType()  ==  Token.START)  {  break;  }  [BUGGY]      case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(   "delete     ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	if(n.getType()  ==  Token.STRING  ||  n.getType()  ==  Token.START)  {  break;  }	  if(n.getType()    ==    Token.STRING)    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
12	[BUG]  [BUGGY]  int  childCount  =  n.getFirstChild().getString();  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]    break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(     "Unexpected  String  children:     "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));    [BUGGY]  int  childCount  =  n.getFirstChild().getString();  [BUGGY]      case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(   "delete     ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	int  childCount  =  n.getFirstChild().getString();	  int    childCount    =    n.getLastChild().getString();    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
13	[BUG]  [BUGGY]  int  childCount  =  n.getLastChild().getNext().getString();  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure    [CONTEXT]    break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(     "Unexpected  String  children:     "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));    [BUGGY]  int  childCount  =  n.getLastChild().getNext().getString();  [BUGGY]      case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(   "delete     ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	int  childCount  =  n.getLastChild().getNext().getString();	  int    childCount    =    n.getLastChild().getString();    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
14	[BUG]  [BUGGY]  int  childCount  =  n.getLastChild().getString()  +  1;  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure    [CONTEXT]    break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(     "Unexpected  String  children:     "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));    [BUGGY]  int  childCount  =  n.getLastChild().getString()  +  1;  [BUGGY]      case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(   "delete     ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	int  childCount  =  n.getLastChild().getString()  +  1;	  int    childCount    =    n.getLastChild().getString();    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
15	[BUG]  [BUGGY]  int  childCount  =  n.getChildCount().getString();  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure    [CONTEXT]    break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(     "Unexpected  String  children:     "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));    [BUGGY]  int  childCount  =  n.getChildCount().getString();  [BUGGY]      case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(   "delete     ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	int  childCount  =  n.getChildCount().getString();	  int    childCount    =    n.getLastChild().getString();    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
16	[BUG]  [BUGGY]  int  childCount  =  n.getLastChild().getCharIndex();  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure    [CONTEXT]    break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(     "Unexpected  String  children:     "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));    [BUGGY]  int  childCount  =  n.getLastChild().getCharIndex();  [BUGGY]      case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(   "delete     ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	int  childCount  =  n.getLastChild().getCharIndex();	  int    childCount    =    n.getLastChild().getString();    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
17	[BUG]  [BUGGY]  int  childCount  =  n.getLastChild().getType();  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(     "Unexpected  String  children:     "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));    [BUGGY]  int  childCount  =  n.getLastChild().getType();  [BUGGY]      case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(   "delete     ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	int  childCount  =  n.getLastChild().getType();	  int    childCount    =    n.getFirstChild().getType();    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
18	[BUG]  [BUGGY]  int  childCount  =  n.getFirstChild().getLastChild().getType();  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]    break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(     "Unexpected  String  children:     "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));    [BUGGY]  int  childCount  =  n.getFirstChild().getLastChild().getType();  [BUGGY]      case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(   "delete     ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	int  childCount  =  n.getFirstChild().getLastChild().getType();	  int    childCount    =    n.getFirstChild().getType();    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
19	[BUG]  [BUGGY]  int  childCount  =  n.getFirstChild().getType()  +  1;  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]    break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(     "Unexpected  String  children:     "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));    [BUGGY]  int  childCount  =  n.getFirstChild().getType()  +  1;  [BUGGY]      case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(   "delete     ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	int  childCount  =  n.getFirstChild().getType()  +  1;	  int    childCount    =    n.getFirstChild().getType();    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
20	[BUG]  [BUGGY]  int  childCount  =  n.getFirstChild().getNext().getType();  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure    [CONTEXT]    break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(     "Unexpected  String  children:     "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));    [BUGGY]  int  childCount  =  n.getFirstChild().getNext().getType();  [BUGGY]      case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(   "delete     ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	int  childCount  =  n.getFirstChild().getNext().getType();	  int    childCount    =    n.getFirstChild().getType();    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
21	[BUG]  [BUGGY]  int  childCount  =  n.getFirstChild().getType()  ||  context  ==  Context.START_OF_EXPR;  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure    [CONTEXT]    break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(     "Unexpected  String  children:     "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));    [BUGGY]  int  childCount  =  n.getFirstChild().getType()  ||  context  ==  Context.START_OF_EXPR;  [BUGGY]      case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(   "delete     ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	int  childCount  =  n.getFirstChild().getType()  ||  context  ==  Context.START_OF_EXPR;	  int    childCount    =    n.getFirstChild().getType();    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
22	[BUG]  [BUGGY]  add(first,  context  ==  Context.START_OF_EXPR);  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure    [CONTEXT]    break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(     "Unexpected  String  children:     "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));    [BUGGY]  add(first,  context  ==  Context.START_OF_EXPR);  [BUGGY]      case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(   "delete     ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	add(first,  context  ==  Context.START_OF_EXPR);	  add(context    ==    Context.START_OF_EXPR);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
23	[BUG]  [BUGGY]  add(context  ==  Context.END_OF_EXPR);  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]    break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(     "Unexpected  String  children:     "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));    [BUGGY]  add(context  ==  Context.END_OF_EXPR);  [BUGGY]      case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(   "delete     ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	add(context  ==  Context.END_OF_EXPR);	  add(context    ==    Context.START_OF_EXPR);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
24	[BUG]  [BUGGY]  add(n,  context  ==  Context.START_OF_EXPR);  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(     "Unexpected  String  children:     "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));    [BUGGY]  add(n,  context  ==  Context.START_OF_EXPR);  [BUGGY]      case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(   "delete     ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	add(n,  context  ==  Context.START_OF_EXPR);	  add(context    ==    Context.START_OF_EXPR);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
25	[BUG]  [BUGGY]  add(context!=  Context.START_OF_EXPR);  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]    break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(     "Unexpected  String  children:     "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));    [BUGGY]  add(context!=  Context.START_OF_EXPR);  [BUGGY]      case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(   "delete     ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	add(context!=  Context.START_OF_EXPR);	  add(context    ==    Context.START_OF_EXPR);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
26	[BUG]  [BUGGY]  add(context  ==  Context.STATEMENT);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]    break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(     "Unexpected  String  children:     "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));    [BUGGY]  add(context  ==  Context.STATEMENT);  [BUGGY]      case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(   "delete     ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	add(context  ==  Context.STATEMENT);	  add(context    ==    Context.START_OF_EXPR);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
27	[BUG]  [BUGGY]  add(context  ==  Context.START_OF_EXPR));  [CE]  [FE]                  ComparisonFailure    [CONTEXT]    break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(     "Unexpected  String  children:     "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));    [BUGGY]  add(context  ==  Context.START_OF_EXPR));  [BUGGY]      case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(   "delete     ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	add(context  ==  Context.START_OF_EXPR));	  add(context    ==    Context.START_OF_EXPR);    	non-compiled	[CE]  	1	None	replace
28	[BUG]  [BUGGY]  int  childCount  =  n.getFirstChild().getIndex()  +  1;  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure    [CONTEXT]    break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(     "Unexpected  String  children:     "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));    [BUGGY]  int  childCount  =  n.getFirstChild().getIndex()  +  1;  [BUGGY]      case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(   "delete     ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	int  childCount  =  n.getFirstChild().getIndex()  +  1;	  int    childCount    =    n.getFirstChild().getIndex();    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
29	[BUG]  [BUGGY]  int  childCount  =  n.getLastChild().getIndex();  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure    [CONTEXT]    break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(     "Unexpected  String  children:     "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));    [BUGGY]  int  childCount  =  n.getLastChild().getIndex();  [BUGGY]      case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(   "delete     ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	int  childCount  =  n.getLastChild().getIndex();	  int    childCount    =    n.getFirstChild().getIndex();    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
30	[BUG]  [BUGGY]  int  childCount  =  n.getFirstChild().getIndex()  -  1;  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure    [CONTEXT]    break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(     "Unexpected  String  children:     "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));    [BUGGY]  int  childCount  =  n.getFirstChild().getIndex()  -  1;  [BUGGY]      case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(   "delete     ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	int  childCount  =  n.getFirstChild().getIndex()  -  1;	  int    childCount    =    n.getFirstChild().getIndex();    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
31	[BUG]  [BUGGY]  int  childCount  =  n.getFirstChild().getStartIndex();  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure    [CONTEXT]    break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(     "Unexpected  String  children:     "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));    [BUGGY]  int  childCount  =  n.getFirstChild().getStartIndex();  [BUGGY]      case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(   "delete     ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	int  childCount  =  n.getFirstChild().getStartIndex();	  int    childCount    =    n.getFirstChild().getIndex();    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
32	[BUG]  [BUGGY]  int  childCount  =  n.getFirstChild().getIndex()  *  2;  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure    [CONTEXT]    break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(     "Unexpected  String  children:     "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));    [BUGGY]  int  childCount  =  n.getFirstChild().getIndex()  *  2;  [BUGGY]      case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(   "delete     ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	int  childCount  =  n.getFirstChild().getIndex()  *  2;	  int    childCount    =    n.getFirstChild().getIndex();    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
33	[BUG]  [BUGGY]  int  childCount  =  n.getFirstChild().getColumnCount();  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure    [CONTEXT]    break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(     "Unexpected  String  children:     "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));    [BUGGY]  int  childCount  =  n.getFirstChild().getColumnCount();  [BUGGY]      case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(   "delete     ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	int  childCount  =  n.getFirstChild().getColumnCount();	  int    childCount    =    n.getFirstChild().getIndex();    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
34	[BUG]  [BUGGY]  last  =  n.getFirstChild();  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure    [CONTEXT]    break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(     "Unexpected  String  children:     "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));    [BUGGY]  last  =  n.getFirstChild();  [BUGGY]      case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(   "delete     ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	last  =  n.getFirstChild();	  last    =    n.getLastChild();    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
35	[BUG]  [BUGGY]  last  =  n.getLastChild()  +  1;  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]    break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(     "Unexpected  String  children:     "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));    [BUGGY]  last  =  n.getLastChild()  +  1;  [BUGGY]      case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(   "delete     ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	last  =  n.getLastChild()  +  1;	  last    =    n.getLastChild();    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
36	[BUG]  [BUGGY]  last  =  context.getLastChild();  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(     "Unexpected  String  children:     "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));    [BUGGY]  last  =  context.getLastChild();  [BUGGY]      case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(   "delete     ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	last  =  context.getLastChild();	  last    =    n.getLastChild();    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
37	[BUG]  [BUGGY]  last  =  n.getNext();  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]    break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(     "Unexpected  String  children:     "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));    [BUGGY]  last  =  n.getNext();  [BUGGY]      case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(   "delete     ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	last  =  n.getNext();	  last    =    n.getLastChild();    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
38	[BUG]  [BUGGY]  last  =  n.getPreviousChild();  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]    break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(     "Unexpected  String  children:     "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));    [BUGGY]  last  =  n.getPreviousChild();  [BUGGY]      case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(   "delete     ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	last  =  n.getPreviousChild();	  last    =    n.getLastChild();    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
39	[BUG]  [BUGGY]  int  childCount  =  n.getParent().getFirstChild();  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(     "Unexpected  String  children:     "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));    [BUGGY]  int  childCount  =  n.getParent().getFirstChild();  [BUGGY]      case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(   "delete     ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	int  childCount  =  n.getParent().getFirstChild();	  int    childCount    =    n.getParent().getLastChild();    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
40	[BUG]  [BUGGY]  int  childCount  =  n.getFirstChild().getLastChild();  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]    break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(     "Unexpected  String  children:     "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));    [BUGGY]  int  childCount  =  n.getFirstChild().getLastChild();  [BUGGY]      case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(   "delete     ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	int  childCount  =  n.getFirstChild().getLastChild();	  int    childCount    =    n.getParent().getLastChild();    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
41	[BUG]  [BUGGY]  int  childCount  =  n.getNext().getLastChild();  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]    break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(     "Unexpected  String  children:     "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));    [BUGGY]  int  childCount  =  n.getNext().getLastChild();  [BUGGY]      case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(   "delete     ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	int  childCount  =  n.getNext().getLastChild();	  int    childCount    =    n.getParent().getLastChild();    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
42	[BUG]  [BUGGY]  int  childCount  =  n.getParent().getLastChild()  +  1;  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure    [CONTEXT]    break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(     "Unexpected  String  children:     "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));    [BUGGY]  int  childCount  =  n.getParent().getLastChild()  +  1;  [BUGGY]      case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(   "delete     ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	int  childCount  =  n.getParent().getLastChild()  +  1;	  int    childCount    =    n.getParent().getLastChild();    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
43	[BUG]  [BUGGY]  int  childCount  =  n.getLastChild();  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure    [CONTEXT]    break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(     "Unexpected  String  children:     "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));    [BUGGY]  int  childCount  =  n.getLastChild();  [BUGGY]      case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(   "delete     ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	int  childCount  =  n.getLastChild();	  int    childCount    =    n.getParent().getLastChild();    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
44	[BUG]  [BUGGY]  Preconditions.checkState(childCount  ==  1);  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure    [CONTEXT]    break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(     "Unexpected  String  children:     "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));    [BUGGY]  Preconditions.checkState(childCount  ==  1);  [BUGGY]      case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(   "delete     ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	Preconditions.checkState(childCount  ==  1);	  Preconditions.checkState(childCount    ==    0);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
45	[BUG]  [BUGGY]  Preconditions.checkState(childCount  ==  2);  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]    break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(     "Unexpected  String  children:     "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));    [BUGGY]  Preconditions.checkState(childCount  ==  2);  [BUGGY]      case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(   "delete     ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	Preconditions.checkState(childCount  ==  2);	  Preconditions.checkState(childCount    ==    0);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
46	[BUG]  [BUGGY]  Preconditions.checkState(childCount!=  0);  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(     "Unexpected  String  children:     "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));    [BUGGY]  Preconditions.checkState(childCount!=  0);  [BUGGY]      case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(   "delete     ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	Preconditions.checkState(childCount!=  0);	  Preconditions.checkState(childCount    ==    0);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
47	[BUG]  [BUGGY]  Preconditions.checkState(childCount  ==  3);  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]    break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(     "Unexpected  String  children:     "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));    [BUGGY]  Preconditions.checkState(childCount  ==  3);  [BUGGY]      case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(   "delete     ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	Preconditions.checkState(childCount  ==  3);	  Preconditions.checkState(childCount    ==    0);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
48	[BUG]  [BUGGY]  Preconditions.checkState(childCount  >=  0);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]    break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(     "Unexpected  String  children:     "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));    [BUGGY]  Preconditions.checkState(childCount  >=  0);  [BUGGY]      case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(   "delete     ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	Preconditions.checkState(childCount  >=  0);	  Preconditions.checkState(childCount    ==    0);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
49	[BUG]  [BUGGY]  int  childCount  =  n.getParent().getChildCount()  -  1;  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]    break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(     "Unexpected  String  children:     "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));    [BUGGY]  int  childCount  =  n.getParent().getChildCount()  -  1;  [BUGGY]      case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(   "delete     ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	int  childCount  =  n.getParent().getChildCount()  -  1;	  int    childCount    =    n.getParent().getChildCount();    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
50	[BUG]  [BUGGY]  int  childCount  =  n.getParent().getChildCount()  +  1;  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(     "Unexpected  String  children:     "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));    [BUGGY]  int  childCount  =  n.getParent().getChildCount()  +  1;  [BUGGY]      case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(   "delete     ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	int  childCount  =  n.getParent().getChildCount()  +  1;	  int    childCount    =    n.getParent().getChildCount();    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
51	[BUG]  [BUGGY]  int  childCount  =  n.getFirstChild().getChildCount();  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]    break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(     "Unexpected  String  children:     "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));    [BUGGY]  int  childCount  =  n.getFirstChild().getChildCount();  [BUGGY]      case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(   "delete     ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	int  childCount  =  n.getFirstChild().getChildCount();	  int    childCount    =    n.getParent().getChildCount();    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
52	[BUG]  [BUGGY]  int  childCount  =  n.getNext().getChildCount();  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]    break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(     "Unexpected  String  children:     "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));    [BUGGY]  int  childCount  =  n.getNext().getChildCount();  [BUGGY]      case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(   "delete     ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	int  childCount  =  n.getNext().getChildCount();	  int    childCount    =    n.getParent().getChildCount();    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
53	[BUG]  [BUGGY]  int  childCount  =  n.getLastChild().getChildCount();  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure    [CONTEXT]    break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(     "Unexpected  String  children:     "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));    [BUGGY]  int  childCount  =  n.getLastChild().getChildCount();  [BUGGY]      case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(   "delete     ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	int  childCount  =  n.getLastChild().getChildCount();	  int    childCount    =    n.getParent().getChildCount();    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
54	[BUG]  [BUGGY]  Preconditions.checkState(childCount  ==  1);  break;  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure    [CONTEXT]    break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(     "Unexpected  String  children:     "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));    [BUGGY]  Preconditions.checkState(childCount  ==  1);  break;  [BUGGY]      case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(   "delete     ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	Preconditions.checkState(childCount  ==  1);  break;	      	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
55	[BUG]  [BUGGY]  Preconditions.checkState(childCount  ==  0);  break;  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure    [CONTEXT]    break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(     "Unexpected  String  children:     "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));    [BUGGY]  Preconditions.checkState(childCount  ==  0);  break;  [BUGGY]      case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(   "delete     ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	Preconditions.checkState(childCount  ==  0);  break;	      	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
56	[BUG]  [BUGGY]  int  childCount  =  n.getChildCount();  add(first);  break;  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure    [CONTEXT]    break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(     "Unexpected  String  children:     "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));    [BUGGY]  int  childCount  =  n.getChildCount();  add(first);  break;  [BUGGY]      case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(   "delete     ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	int  childCount  =  n.getChildCount();  add(first);  break;	      	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
57	[BUG]  [BUGGY]  int  childCount  =  n.getChildCount();  break;  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure    [CONTEXT]    break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(     "Unexpected  String  children:     "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));    [BUGGY]  int  childCount  =  n.getChildCount();  break;  [BUGGY]      case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(   "delete     ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	int  childCount  =  n.getChildCount();  break;	      	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
58	[BUG]  [BUGGY]  int  childCount  =  n.getNext().getType();  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]    break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(     "Unexpected  String  children:     "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));    [BUGGY]  int  childCount  =  n.getNext().getType();  [BUGGY]      case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(   "delete     ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	int  childCount  =  n.getNext().getType();	  int    childCount    =    n.getParent().getType();    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
59	[BUG]  [BUGGY]  int  childCount  =  n.getChildCount().getType();  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(     "Unexpected  String  children:     "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));    [BUGGY]  int  childCount  =  n.getChildCount().getType();  [BUGGY]      case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(   "delete     ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	int  childCount  =  n.getChildCount().getType();	  int    childCount    =    n.getParent().getType();    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
60	[BUG]  [BUGGY]  int  childCount  =  n.getParent().getType()  +  1;  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]    break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(     "Unexpected  String  children:     "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));    [BUGGY]  int  childCount  =  n.getParent().getType()  +  1;  [BUGGY]      case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(   "delete     ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	int  childCount  =  n.getParent().getType()  +  1;	  int    childCount    =    n.getParent().getType();    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
61	[BUG]  [BUGGY]  int  childCount  =  n.getParent().getChildCount();  break;  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure    [CONTEXT]    break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(     "Unexpected  String  children:     "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));    [BUGGY]  int  childCount  =  n.getParent().getChildCount();  break;  [BUGGY]      case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(   "delete     ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	int  childCount  =  n.getParent().getChildCount();  break;	      	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
62	[BUG]  [BUGGY]  Preconditions.checkState(childCount  ==  2);  break;  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure    [CONTEXT]    break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(     "Unexpected  String  children:     "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));    [BUGGY]  Preconditions.checkState(childCount  ==  2);  break;  [BUGGY]      case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(   "delete     ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	Preconditions.checkState(childCount  ==  2);  break;	      	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
63	[BUG]  [BUGGY]  int  childCount  =  n.getFirstChild().getParent().getType();  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(     "Unexpected  String  children:     "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));    [BUGGY]  int  childCount  =  n.getFirstChild().getParent().getType();  [BUGGY]      case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(   "delete     ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	int  childCount  =  n.getFirstChild().getParent().getType();	  int    childCount    =    n.getFirstChild().getType();    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
64	[BUG]  [BUGGY]  int  childCount  =  n.getChildCount()  /  2;  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]    break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(     "Unexpected  String  children:     "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));    [BUGGY]  int  childCount  =  n.getChildCount()  /  2;  [BUGGY]      case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(   "delete     ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	int  childCount  =  n.getChildCount()  /  2;	  int    childCount    =    n.getChildCount();    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
65	[BUG]  [BUGGY]  int  childCount  =  n.getFirstChild().getEndIndex();  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure    [CONTEXT]    break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(     "Unexpected  String  children:     "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));    [BUGGY]  int  childCount  =  n.getFirstChild().getEndIndex();  [BUGGY]      case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(   "delete     ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	int  childCount  =  n.getFirstChild().getEndIndex();	  int    childCount    =    n.getFirstChild().getIndex();    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
66	[BUG]  [BUGGY]  int  childCount  =  n.getFirstChild().getLength();  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure    [CONTEXT]    break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(     "Unexpected  String  children:     "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));    [BUGGY]  int  childCount  =  n.getFirstChild().getLength();  [BUGGY]      case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(   "delete     ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	int  childCount  =  n.getFirstChild().getLength();	  int    childCount    =    n.getFirstChild().getIndex();    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
67	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING  ||  n.getType()  ==  Token.GETPROP)  {  break;  }  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure    [CONTEXT]    break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(     "Unexpected  String  children:     "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));    [BUGGY]  if(n.getType()  ==  Token.STRING  ||  n.getType()  ==  Token.GETPROP)  {  break;  }  [BUGGY]      case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(   "delete     ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	if(n.getType()  ==  Token.STRING  ||  n.getType()  ==  Token.GETPROP)  {  break;  }	  if(n.getType()    ==    Token.STRING)    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
68	[BUG]  [BUGGY]  add(first);  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure    [CONTEXT]    break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(     "Unexpected  String  children:     "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));    [BUGGY]  add(first);  [BUGGY]      case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(   "delete     ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	add(first);	  add(context    ==    Context.START_OF_EXPR);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
69	[BUG]  [BUGGY]  add(childCount  ==  Context.START_OF_EXPR);  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]    break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(     "Unexpected  String  children:     "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));    [BUGGY]  add(childCount  ==  Context.START_OF_EXPR);  [BUGGY]      case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(   "delete     ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	add(childCount  ==  Context.START_OF_EXPR);	  add(context    ==    Context.START_OF_EXPR);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
70	[BUG]  [BUGGY]  int  childCount  =  n.getParent().getFirstChild().getType();  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]    break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(     "Unexpected  String  children:     "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));    [BUGGY]  int  childCount  =  n.getParent().getFirstChild().getType();  [BUGGY]      case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(   "delete     ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	int  childCount  =  n.getParent().getFirstChild().getType();	  int    childCount    =    n.getParent().getType();    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
71	[BUG]  [BUGGY]  last  =  n.getfirstChild();  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure    [CONTEXT]    break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(     "Unexpected  String  children:     "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));    [BUGGY]  last  =  n.getfirstChild();  [BUGGY]      case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(   "delete     ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	last  =  n.getfirstChild();	  last    =    n.getLastChild();    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
72	[BUG]  [BUGGY]  last  =  n.getlastChild();  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]    break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(     "Unexpected  String  children:     "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));    [BUGGY]  last  =  n.getlastChild();  [BUGGY]      case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(   "delete     ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	last  =  n.getlastChild();	  last    =    n.getLastChild();    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
73	[BUG]  [BUGGY]  Integer  childCount  =  n.getFirstChild().getString();  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]    break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(     "Unexpected  String  children:     "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));    [BUGGY]  Integer  childCount  =  n.getFirstChild().getString();  [BUGGY]      case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(   "delete     ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	Integer  childCount  =  n.getFirstChild().getString();	  int    childCount    =    n.getLastChild().getString();    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
74	[BUG]  [BUGGY]  last  =  n.removeFirstChild();  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure    [CONTEXT]    break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(     "Unexpected  String  children:     "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));    [BUGGY]  last  =  n.removeFirstChild();  [BUGGY]      case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(   "delete     ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	last  =  n.removeFirstChild();	  last    =    n.getLastChild();    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
75	[BUG]  [BUGGY]  last  =  n.getPreviousSibling();  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]    break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(     "Unexpected  String  children:     "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));    [BUGGY]  last  =  n.getPreviousSibling();  [BUGGY]      case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(   "delete     ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	last  =  n.getPreviousSibling();	  last    =    n.getLastChild();    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
76	[BUG]  [BUGGY]  int  childCount  =  n.getLastChild().getIndexedChildCount();  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]    break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(     "Unexpected  String  children:     "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));    [BUGGY]  int  childCount  =  n.getLastChild().getIndexedChildCount();  [BUGGY]      case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(   "delete     ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	int  childCount  =  n.getLastChild().getIndexedChildCount();	  int    childCount    =    n.getLastChild().getString();    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
77	[BUG]  [BUGGY]  int  childCount  =  n.getfirstChild().getString();  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure    [CONTEXT]    break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(     "Unexpected  String  children:     "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));    [BUGGY]  int  childCount  =  n.getfirstChild().getString();  [BUGGY]      case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(   "delete     ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	int  childCount  =  n.getfirstChild().getString();	  int    childCount    =    n.getLastChild().getString();    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
78	[BUG]  [BUGGY]  int  childCount  =  n.getFirstChild().getType();  break;  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure    [CONTEXT]    break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(     "Unexpected  String  children:     "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));    [BUGGY]  int  childCount  =  n.getFirstChild().getType();  break;  [BUGGY]      case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(   "delete     ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	int  childCount  =  n.getFirstChild().getType();  break;	      	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
79	[BUG]  [BUGGY]  int  childCount  =  n.getFirstChild().getIndex();  break;  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure    [CONTEXT]    break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(     "Unexpected  String  children:     "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));    [BUGGY]  int  childCount  =  n.getFirstChild().getIndex();  break;  [BUGGY]      case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(   "delete     ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	int  childCount  =  n.getFirstChild().getIndex();  break;	      	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
80	[BUG]  [BUGGY]  int  childCount  =  n.getLastChild().getString();  break;  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure    [CONTEXT]    break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(     "Unexpected  String  children:     "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));    [BUGGY]  int  childCount  =  n.getLastChild().getString();  break;  [BUGGY]      case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(   "delete     ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	int  childCount  =  n.getLastChild().getString();  break;	      	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
81	[BUG]  [BUGGY]  add(context  ==  Context.BEFORE_DANGLING_ELSE);  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure    [CONTEXT]    break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(     "Unexpected  String  children:     "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));    [BUGGY]  add(context  ==  Context.BEFORE_DANGLING_ELSE);  [BUGGY]      case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(   "delete     ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	add(context  ==  Context.BEFORE_DANGLING_ELSE);	  add(context    ==    Context.START_OF_EXPR);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
82	[BUG]  [BUGGY]  add(context  ==  Context.TEXT_OF_EXPR);  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]    break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(     "Unexpected  String  children:     "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));    [BUGGY]  add(context  ==  Context.TEXT_OF_EXPR);  [BUGGY]      case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(   "delete     ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	add(context  ==  Context.TEXT_OF_EXPR);	  add(context    ==    Context.START_OF_EXPR);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
83	[BUG]  [BUGGY]  add(n.getString(),  outputCharsetEncoder);  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(     "Unexpected  String  children:     "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));    [BUGGY]  add(n.getString(),  outputCharsetEncoder);  [BUGGY]      case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(   "delete     ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	add(n.getString(),  outputCharsetEncoder);	  add(context    ==    Context.START_OF_EXPR);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
84	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING  ||  n.getString().equals( "string "))  {  break;  }  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure    [CONTEXT]    break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(     "Unexpected  String  children:     "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));    [BUGGY]  if(n.getType()  ==  Token.STRING  ||  n.getString().equals( "string "))  {  break;  }  [BUGGY]      case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(   "delete     ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	if(n.getType()  ==  Token.STRING  ||  n.getString().equals( "string "))  {  break;  }	  if(n.getType()    ==    Token.STRING)    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
85	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING  ||  n.getType()  ==  Token.EXPR_RESULT)  {  break;  }  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure    [CONTEXT]    break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(     "Unexpected  String  children:     "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));    [BUGGY]  if(n.getType()  ==  Token.STRING  ||  n.getType()  ==  Token.EXPR_RESULT)  {  break;  }  [BUGGY]      case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(   "delete     ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	if(n.getType()  ==  Token.STRING  ||  n.getType()  ==  Token.EXPR_RESULT)  {  break;  }	  if(n.getType()    ==    Token.STRING)    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
86	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING  ||  n.getType()  ==  Token.CATCH)  {  break;  }  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure    [CONTEXT]    break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(     "Unexpected  String  children:     "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));    [BUGGY]  if(n.getType()  ==  Token.STRING  ||  n.getType()  ==  Token.CATCH)  {  break;  }  [BUGGY]      case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(   "delete     ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	if(n.getType()  ==  Token.STRING  ||  n.getType()  ==  Token.CATCH)  {  break;  }	  if(n.getType()    ==    Token.STRING)    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
87	[BUG]  [BUGGY]  int  childCount  =  n.getParent().getChildCount(context);  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]    break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(     "Unexpected  String  children:     "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));    [BUGGY]  int  childCount  =  n.getParent().getChildCount(context);  [BUGGY]      case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(   "delete     ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	int  childCount  =  n.getParent().getChildCount(context);	  int    childCount    =    n.getParent().getChildCount();    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
