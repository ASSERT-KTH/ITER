bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  int  childCount  =  n.getParent().getChildCount()  *  1;  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  int  childCount  =  n.getParent().getChildCount()  *  1;  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	int  childCount  =  n.getParent().getChildCount()  *  1;	  int    childCount    =    n.getParent().getChildCount()    +    1;    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
2	[BUG]  [BUGGY]  int  childCount  =  n.getFirstChild().getChildCount()  +  1;  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  int  childCount  =  n.getFirstChild().getChildCount()  +  1;  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	int  childCount  =  n.getFirstChild().getChildCount()  +  1;	  int    childCount    =    n.getParent().getChildCount()    +    1;    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
3	[BUG]  [BUGGY]  int  childCount  =  n.getParent().getChildCount()  /  1;  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  int  childCount  =  n.getParent().getChildCount()  /  1;  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	int  childCount  =  n.getParent().getChildCount()  /  1;	  int    childCount    =    n.getParent().getChildCount()    +    1;    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
4	[BUG]  [BUGGY]  int  childCount  =  n.getChildCount().getChildCount();  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  int  childCount  =  n.getChildCount().getChildCount();  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	int  childCount  =  n.getChildCount().getChildCount();	  int    childCount    =    n.getParent().getChildCount()    +    1;    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
5	[BUG]  [BUGGY]  int  childCount  =  context.getChildCount()  /  2;  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  int  childCount  =  context.getChildCount()  /  2;  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	int  childCount  =  context.getChildCount()  /  2;	  int    childCount    =    n.getChildCount()    /    2;    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
6	[BUG]  [BUGGY]  int  childCount  =  node.getChildCount()  /  2;  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  int  childCount  =  node.getChildCount()  /  2;  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	int  childCount  =  node.getChildCount()  /  2;	  int    childCount    =    n.getChildCount()    /    2;    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
7	[BUG]  [BUGGY]  int  childCount  =  first.getChildCount()  /  2;  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  int  childCount  =  first.getChildCount()  /  2;  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	int  childCount  =  first.getChildCount()  /  2;	  int    childCount    =    n.getChildCount()    /    2;    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
8	[BUG]  [BUGGY]  int  childCount  =  n.getLastChild().getNext().getType();  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  int  childCount  =  n.getLastChild().getNext().getType();  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	int  childCount  =  n.getLastChild().getNext().getType();	  int    childCount    =    n.getFirstChild().getNext().getType();    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
9	[BUG]  [BUGGY]  int  childCount  =  n.getFirstChild().getNext().getType()  +  1;  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  int  childCount  =  n.getFirstChild().getNext().getType()  +  1;  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	int  childCount  =  n.getFirstChild().getNext().getType()  +  1;	  int    childCount    =    n.getFirstChild().getNext().getType();    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
10	[BUG]  [BUGGY]  int  childCount  =  n.getFirstChild().getNext().getParent().getType();  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  int  childCount  =  n.getFirstChild().getNext().getParent().getType();  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	int  childCount  =  n.getFirstChild().getNext().getParent().getType();	  int    childCount    =    n.getFirstChild().getNext().getType();    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
11	[BUG]  [BUGGY]  int  childCount  =  n.getFirstChild().getPrevious().getType();  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  int  childCount  =  n.getFirstChild().getPrevious().getType();  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	int  childCount  =  n.getFirstChild().getPrevious().getType();	  int    childCount    =    n.getFirstChild().getNext().getType();    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
12	[BUG]  [BUGGY]  add(first,  context!=  Context.START_OF_EXPR);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  add(first,  context!=  Context.START_OF_EXPR);  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	add(first,  context!=  Context.START_OF_EXPR);	  add(context!=    Context.START_OF_EXPR);    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
13	[BUG]  [BUGGY]  add(n.getString(),  outputCharsetEncoder));  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  add(n.getString(),  outputCharsetEncoder));  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	add(n.getString(),  outputCharsetEncoder));	  add(context!=    Context.START_OF_EXPR);    	non-compiled	[CE]  	25	None	replace
14	[BUG]  [BUGGY]  int  childCount  =  n.getParent().getFirstChild()  +  1;  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  int  childCount  =  n.getParent().getFirstChild()  +  1;  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	int  childCount  =  n.getParent().getFirstChild()  +  1;	  int    childCount    =    n.getParent().getLastChild()    +    1;    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
15	[BUG]  [BUGGY]  int  childCount  =  n.getFirstChild().getLastChild()  +  1;  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  int  childCount  =  n.getFirstChild().getLastChild()  +  1;  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	int  childCount  =  n.getFirstChild().getLastChild()  +  1;	  int    childCount    =    n.getParent().getLastChild()    +    1;    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
16	[BUG]  [BUGGY]  int  childCount  =  n.getNext().getLastChild()  +  1;  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  int  childCount  =  n.getNext().getLastChild()  +  1;  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	int  childCount  =  n.getNext().getLastChild()  +  1;	  int    childCount    =    n.getParent().getLastChild()    +    1;    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
17	[BUG]  [BUGGY]  int  childCount  =  n.getParent().getNext().getLastChild();  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  int  childCount  =  n.getParent().getNext().getLastChild();  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	int  childCount  =  n.getParent().getNext().getLastChild();	  int    childCount    =    n.getParent().getLastChild()    +    1;    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
18	[BUG]  [BUGGY]  int  childCount  =  n.getParent().getChildCount()  -  1;  break;  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  int  childCount  =  n.getParent().getChildCount()  -  1;  break;  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	int  childCount  =  n.getParent().getChildCount()  -  1;  break;	  int    childCount    =    n.getParent().getChildCount();    break;    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
19	[BUG]  [BUGGY]  int  childCount  =  n.getParent().getChildCount()  +  1;  break;  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  int  childCount  =  n.getParent().getChildCount()  +  1;  break;  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	int  childCount  =  n.getParent().getChildCount()  +  1;  break;	  int    childCount    =    n.getParent().getChildCount();    break;    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
20	[BUG]  [BUGGY]  int  childCount  =  n.getFirstChild().getChildCount();  break;  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  int  childCount  =  n.getFirstChild().getChildCount();  break;  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	int  childCount  =  n.getFirstChild().getChildCount();  break;	  int    childCount    =    n.getParent().getChildCount();    break;    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
21	[BUG]  [BUGGY]  int  childCount  =  n.getNext().getChildCount();  break;  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  int  childCount  =  n.getNext().getChildCount();  break;  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	int  childCount  =  n.getNext().getChildCount();  break;	  int    childCount    =    n.getParent().getChildCount();    break;    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
22	[BUG]  [BUGGY]  int  childCount  =  n.getLastChild().getChildCount();  break;  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  int  childCount  =  n.getLastChild().getChildCount();  break;  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	int  childCount  =  n.getLastChild().getChildCount();  break;	  int    childCount    =    n.getParent().getChildCount();    break;    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
23	[BUG]  [BUGGY]  int  childCount  =  n.getParent().getChildCount()  *  2;  break;  [CE]  illegal  start  of  expression  [FE]                                    ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  int  childCount  =  n.getParent().getChildCount()  *  2;  break;  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	int  childCount  =  n.getParent().getChildCount()  *  2;  break;	  int    childCount    =    n.getParent().getChildCount();    break;    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
24	[BUG]  [BUGGY]  int  childCount  =  n.getChildCount().getFirstChild().getString();  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  int  childCount  =  n.getChildCount().getFirstChild().getString();  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	int  childCount  =  n.getChildCount().getFirstChild().getString();	  int    childCount    =    n.getChildCount().getString();    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
25	[BUG]  [BUGGY]  int  childCount  =  n.getChildCount().getFirstChild();  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  int  childCount  =  n.getChildCount().getFirstChild();  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	int  childCount  =  n.getChildCount().getFirstChild();	  int    childCount    =    n.getChildCount().getString();    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
26	[BUG]  [BUGGY]  int  childCount  =  n.getChildCount().getLength();  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  int  childCount  =  n.getChildCount().getLength();  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	int  childCount  =  n.getChildCount().getLength();	  int    childCount    =    n.getChildCount().getString();    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
27	[BUG]  [BUGGY]  int  childCount  =  n.getChildCount().getLastChild();  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  int  childCount  =  n.getChildCount().getLastChild();  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	int  childCount  =  n.getChildCount().getLastChild();	  int    childCount    =    n.getChildCount().getString();    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
28	[BUG]  [BUGGY]  int  childCount  =  n.getChildCount().getValue();  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  int  childCount  =  n.getChildCount().getValue();  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	int  childCount  =  n.getChildCount().getValue();	  int    childCount    =    n.getChildCount().getString();    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
29	[BUG]  [BUGGY]  int  childCount  =  n.getChildCount().getCharsCount();  [CE]  illegal  start  of  expression  [FE]                                    ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  int  childCount  =  n.getChildCount().getCharsCount();  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	int  childCount  =  n.getChildCount().getCharsCount();	  int    childCount    =    n.getChildCount().getString();    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
30	[BUG]  [BUGGY]  int  childCount  =  n.getChildCount().getString()  +  1;  [CE]  illegal  start  of  expression  [FE]                                      ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  int  childCount  =  n.getChildCount().getString()  +  1;  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	int  childCount  =  n.getChildCount().getString()  +  1;	  int    childCount    =    n.getChildCount().getString();    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
31	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING  &&  n.getType()  ==  Token.NAME)  {  break;  }  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  if(n.getType()  ==  Token.STRING  &&  n.getType()  ==  Token.NAME)  {  break;  }  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	if(n.getType()  ==  Token.STRING  &&  n.getType()  ==  Token.NAME)  {  break;  }	  if(n.getType()    ==    Token.STRING    ||    n.getType()    ==    Token.NAME)    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
32	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.STRING)  {  break;  }  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  if(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.STRING)  {  break;  }  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	if(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.STRING)  {  break;  }	  if(n.getType()    ==    Token.STRING    ||    n.getType()    ==    Token.NAME)    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
33	[BUG]  [BUGGY]  n.getType()  ==  Token.STRING  ||  n.getType()  ==  Token.NAME)  {  break;  }  [CE]  not  a  statement  [FE]                                ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  n.getType()  ==  Token.STRING  ||  n.getType()  ==  Token.NAME)  {  break;  }  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	n.getType()  ==  Token.STRING  ||  n.getType()  ==  Token.NAME)  {  break;  }	  if(n.getType()    ==    Token.STRING    ||    n.getType()    ==    Token.NAME)    {    break;    }    	non-compiled	[CE]  not  a  statement	9	None	replace
34	[BUG]  [BUGGY]  if(n.getType()!=  Token.STRING  &&  n.getType()  ==  Token.NAME)  {  break;  }  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  if(n.getType()!=  Token.STRING  &&  n.getType()  ==  Token.NAME)  {  break;  }  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	if(n.getType()!=  Token.STRING  &&  n.getType()  ==  Token.NAME)  {  break;  }	  if(n.getType()    ==    Token.STRING    ||    n.getType()    ==    Token.NAME)    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
35	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING  ||  n.getType()!=  Token.NAME)  {  break;  }  [CE]  illegal  start  of  expression  [FE]                                    ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  if(n.getType()  ==  Token.STRING  ||  n.getType()!=  Token.NAME)  {  break;  }  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	if(n.getType()  ==  Token.STRING  ||  n.getType()!=  Token.NAME)  {  break;  }	  if(n.getType()    ==    Token.STRING    ||    n.getType()    ==    Token.NAME)    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
36	[BUG]  [BUGGY]  n.setType(Token.STRING  ||  n.getType()  ==  Token.NAME)  {  break;  }  [CE]  [FE]                                      ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  n.setType(Token.STRING  ||  n.getType()  ==  Token.NAME)  {  break;  }  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	n.setType(Token.STRING  ||  n.getType()  ==  Token.NAME)  {  break;  }	  if(n.getType()    ==    Token.STRING    ||    n.getType()    ==    Token.NAME)    {    break;    }    	non-compiled	[CE]  	9	None	replace
37	[BUG]  [BUGGY]  add(jsString(n.getString(),  outputCharsetEncoder));  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  add(jsString(n.getString(),  outputCharsetEncoder));  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	add(jsString(n.getString(),  outputCharsetEncoder));	  add(n.getString(),    outputCharsetEncoder);    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
38	[BUG]  [BUGGY]  add(n.getString(),  outputCharsetEncoder,  context);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  add(n.getString(),  outputCharsetEncoder,  context);  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	add(n.getString(),  outputCharsetEncoder,  context);	  add(n.getString(),    outputCharsetEncoder);    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
39	[BUG]  [BUGGY]  add(outputCharsetEncoder.getString(),  n);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  add(outputCharsetEncoder.getString(),  n);  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	add(outputCharsetEncoder.getString(),  n);	  add(n.getString(),    outputCharsetEncoder);    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
40	[BUG]  [BUGGY]  add(first.getString(),  outputCharsetEncoder);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  add(first.getString(),  outputCharsetEncoder);  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	add(first.getString(),  outputCharsetEncoder);	  add(n.getString(),    outputCharsetEncoder);    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
41	[BUG]  [BUGGY]  add(n.getString(),  outputCharsetEncoder,  first);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  add(n.getString(),  outputCharsetEncoder,  first);  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	add(n.getString(),  outputCharsetEncoder,  first);	  add(n.getString(),    outputCharsetEncoder);    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
42	[BUG]  [BUGGY]  int  childCount  =  n.getFirstChild().getLastChild().getColumnCount();  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  int  childCount  =  n.getFirstChild().getLastChild().getColumnCount();  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	int  childCount  =  n.getFirstChild().getLastChild().getColumnCount();	  int    childCount    =    n.getFirstChild().getColumnCount();    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
43	[BUG]  [BUGGY]  int  childCount  =  n.getLastChild().getColumnCount();  [CE]  illegal  start  of  expression  [FE]                                    ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  int  childCount  =  n.getLastChild().getColumnCount();  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	int  childCount  =  n.getLastChild().getColumnCount();	  int    childCount    =    n.getFirstChild().getColumnCount();    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
44	[BUG]  [BUGGY]  int  childCount  =  n.getFirstChild().getColumnCount()  -  1;  [CE]  illegal  start  of  expression  [FE]                                      ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  int  childCount  =  n.getFirstChild().getColumnCount()  -  1;  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	int  childCount  =  n.getFirstChild().getColumnCount()  -  1;	  int    childCount    =    n.getFirstChild().getColumnCount();    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
45	[BUG]  [BUGGY]  int  childCount  =  n.getFirstChild().getColumnCount()  +  1;  [CE]  illegal  start  of  expression  [FE]                                        ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  int  childCount  =  n.getFirstChild().getColumnCount()  +  1;  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	int  childCount  =  n.getFirstChild().getColumnCount()  +  1;	  int    childCount    =    n.getFirstChild().getColumnCount();    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
46	[BUG]  [BUGGY]  int  childCount  =  n.getFirstChild().getCharCount();  [CE]  illegal  start  of  expression  [FE]                                          ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  int  childCount  =  n.getFirstChild().getCharCount();  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	int  childCount  =  n.getFirstChild().getCharCount();	  int    childCount    =    n.getFirstChild().getColumnCount();    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
47	[BUG]  [BUGGY]  int  childCount  =  n.getNext().getFirstChild();  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  int  childCount  =  n.getNext().getFirstChild();  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	int  childCount  =  n.getNext().getFirstChild();	  int    childCount    =    n.getNext().getLastChild();    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
48	[BUG]  [BUGGY]  int  childCount  =  n.getPrevious().getLastChild();  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  int  childCount  =  n.getPrevious().getLastChild();  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	int  childCount  =  n.getPrevious().getLastChild();	  int    childCount    =    n.getNext().getLastChild();    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
49	[BUG]  [BUGGY]  last  =  n.removeLastChild();  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  last  =  n.removeLastChild();  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	last  =  n.removeLastChild();	  last    =    n.removeFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
50	[BUG]  [BUGGY]  last  =  context.removeFirstChild();  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  last  =  context.removeFirstChild();  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	last  =  context.removeFirstChild();	  last    =    n.removeFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
51	[BUG]  [BUGGY]  last  =  n.replaceChild(n,  first);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  last  =  n.replaceChild(n,  first);  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	last  =  n.replaceChild(n,  first);	  last    =    n.removeFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
52	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING  &&  n.getType()  ==  Token.START)  {  break;  }  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  if(n.getType()  ==  Token.STRING  &&  n.getType()  ==  Token.START)  {  break;  }  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	if(n.getType()  ==  Token.STRING  &&  n.getType()  ==  Token.START)  {  break;  }	  if(n.getType()    ==    Token.STRING    ||    n.getType()    ==    Token.START)    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
53	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING  ||  n.getType()  ==  Token.END)  {  break;  }  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  if(n.getType()  ==  Token.STRING  ||  n.getType()  ==  Token.END)  {  break;  }  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	if(n.getType()  ==  Token.STRING  ||  n.getType()  ==  Token.END)  {  break;  }	  if(n.getType()    ==    Token.STRING    ||    n.getType()    ==    Token.START)    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
54	[BUG]  [BUGGY]  if(n.getType()  ==  Token.START  ||  n.getType()  ==  Token.STRING)  {  break;  }  [CE]  illegal  start  of  expression  [FE]                                    ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  if(n.getType()  ==  Token.START  ||  n.getType()  ==  Token.STRING)  {  break;  }  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	if(n.getType()  ==  Token.START  ||  n.getType()  ==  Token.STRING)  {  break;  }	  if(n.getType()    ==    Token.STRING    ||    n.getType()    ==    Token.START)    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
55	[BUG]  [BUGGY]  if(n.getType()!=  Token.STRING  &&  n.getType()  ==  Token.START)  {  break;  }  [CE]  illegal  start  of  expression  [FE]                                      ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  if(n.getType()!=  Token.STRING  &&  n.getType()  ==  Token.START)  {  break;  }  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	if(n.getType()!=  Token.STRING  &&  n.getType()  ==  Token.START)  {  break;  }	  if(n.getType()    ==    Token.STRING    ||    n.getType()    ==    Token.START)    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
56	[BUG]  [BUGGY]  n.getType()  ==  Token.STRING  ||  n.getType()  ==  Token.START)  {  break;  }  [CE]  not  a  statement  [FE]                                        ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  n.getType()  ==  Token.STRING  ||  n.getType()  ==  Token.START)  {  break;  }  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	n.getType()  ==  Token.STRING  ||  n.getType()  ==  Token.START)  {  break;  }	  if(n.getType()    ==    Token.STRING    ||    n.getType()    ==    Token.START)    {    break;    }    	non-compiled	[CE]  not  a  statement	11	None	replace
57	[BUG]  [BUGGY]  n.getType()  ==  Token.STRING  ||  n.getType()  ==  Token.START)  {  break;  [CE]  not  a  statement  [FE]                                          ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  n.getType()  ==  Token.STRING  ||  n.getType()  ==  Token.START)  {  break;  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	n.getType()  ==  Token.STRING  ||  n.getType()  ==  Token.START)  {  break;	  if(n.getType()    ==    Token.STRING    ||    n.getType()    ==    Token.START)    {    break;    }    	non-compiled	[CE]  not  a  statement	11	None	replace
58	[BUG]  [BUGGY]  int  childCount  =  n.getLastChild().getIndex()  +  1;  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  int  childCount  =  n.getLastChild().getIndex()  +  1;  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	int  childCount  =  n.getLastChild().getIndex()  +  1;	  int    childCount    =    n.getFirstChild().getIndex()    +    1;    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
59	[BUG]  [BUGGY]  int  childCount  =  n.getFirstChild().getStartIndex()  +  1;  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  int  childCount  =  n.getFirstChild().getStartIndex()  +  1;  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	int  childCount  =  n.getFirstChild().getStartIndex()  +  1;	  int    childCount    =    n.getFirstChild().getIndex()    +    1;    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
60	[BUG]  [BUGGY]  int  childCount  =  n.getFirstChild().getIndex()  *  1;  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  int  childCount  =  n.getFirstChild().getIndex()  *  1;  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	int  childCount  =  n.getFirstChild().getIndex()  *  1;	  int    childCount    =    n.getFirstChild().getIndex()    +    1;    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
61	[BUG]  [BUGGY]  int  childCount  =  n.getFirstChild().getIndex()  +  2;  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  int  childCount  =  n.getFirstChild().getIndex()  +  2;  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	int  childCount  =  n.getFirstChild().getIndex()  +  2;	  int    childCount    =    n.getFirstChild().getIndex()    +    1;    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
62	[BUG]  [BUGGY]  add(first,  context  ==  Context.TEXT_OF_EXPR);  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  add(first,  context  ==  Context.TEXT_OF_EXPR);  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	add(first,  context  ==  Context.TEXT_OF_EXPR);	  add(context    ==    Context.TEXT_OF_EXPR);    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
63	[BUG]  [BUGGY]  add(n.getString(),  context  ==  Context.TEXT_OF_EXPR);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  add(n.getString(),  context  ==  Context.TEXT_OF_EXPR);  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	add(n.getString(),  context  ==  Context.TEXT_OF_EXPR);	  add(context    ==    Context.TEXT_OF_EXPR);    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
64	[BUG]  [BUGGY]  add(n,  context  ==  Context.TEXT_OF_EXPR);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  add(n,  context  ==  Context.TEXT_OF_EXPR);  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	add(n,  context  ==  Context.TEXT_OF_EXPR);	  add(context    ==    Context.TEXT_OF_EXPR);    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
65	[BUG]  [BUGGY]  add(context!=  Context.TEXT_OF_EXPR);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  add(context!=  Context.TEXT_OF_EXPR);  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	add(context!=  Context.TEXT_OF_EXPR);	  add(context    ==    Context.TEXT_OF_EXPR);    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
66	[BUG]  [BUGGY]  add(first,  context  ==  Context.END_OF_EXPR);  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  add(first,  context  ==  Context.END_OF_EXPR);  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	add(first,  context  ==  Context.END_OF_EXPR);	  add(first,    context    ==    Context.START_OF_EXPR);    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
67	[BUG]  [BUGGY]  add(first,  childCount  ==  Context.START_OF_EXPR);  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  add(first,  childCount  ==  Context.START_OF_EXPR);  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	add(first,  childCount  ==  Context.START_OF_EXPR);	  add(first,    context    ==    Context.START_OF_EXPR);    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
68	[BUG]  [BUGGY]  add(last,  context  ==  Context.START_OF_EXPR);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  add(last,  context  ==  Context.START_OF_EXPR);  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	add(last,  context  ==  Context.START_OF_EXPR);	  add(first,    context    ==    Context.START_OF_EXPR);    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
69	[BUG]  [BUGGY]  int  childCount  =  n.getLastChild().getEndIndex();  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  int  childCount  =  n.getLastChild().getEndIndex();  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	int  childCount  =  n.getLastChild().getEndIndex();	  int    childCount    =    n.getFirstChild().getEndIndex();    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
70	[BUG]  [BUGGY]  int  childCount  =  n.getFirstChild().getEndIndex()  -  1;  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  int  childCount  =  n.getFirstChild().getEndIndex()  -  1;  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	int  childCount  =  n.getFirstChild().getEndIndex()  -  1;	  int    childCount    =    n.getFirstChild().getEndIndex();    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
71	[BUG]  [BUGGY]  int  childCount  =  n.getFirstChild().getEndIndex()  +  1;  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  int  childCount  =  n.getFirstChild().getEndIndex()  +  1;  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	int  childCount  =  n.getFirstChild().getEndIndex()  +  1;	  int    childCount    =    n.getFirstChild().getEndIndex();    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
72	[BUG]  [BUGGY]  int  childCount  =  n.getFirstChild().getChildCount()  -  1;  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  int  childCount  =  n.getFirstChild().getChildCount()  -  1;  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	int  childCount  =  n.getFirstChild().getChildCount()  -  1;	  int    childCount    =    n.getFirstChild().getChildCount();    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
73	[BUG]  [BUGGY]  int  childCount  =  n.getFirstChild().getLastChild().getChildCount();  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  int  childCount  =  n.getFirstChild().getLastChild().getChildCount();  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	int  childCount  =  n.getFirstChild().getLastChild().getChildCount();	  int    childCount    =    n.getFirstChild().getChildCount();    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
74	[BUG]  [BUGGY]  int  childCount  =  n.getFirstChild().getChildCount()  *  2;  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  int  childCount  =  n.getFirstChild().getChildCount()  *  2;  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	int  childCount  =  n.getFirstChild().getChildCount()  *  2;	  int    childCount    =    n.getFirstChild().getChildCount();    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
75	[BUG]  [BUGGY]  int  childCount  =  n.getFirstChild().getParent().getChildCount();  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  int  childCount  =  n.getFirstChild().getParent().getChildCount();  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	int  childCount  =  n.getFirstChild().getParent().getChildCount();	  int    childCount    =    n.getFirstChild().getChildCount();    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
76	[BUG]  [BUGGY]  Preconditions.checkState(childCount  >  0);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  Preconditions.checkState(childCount  >  0);  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	Preconditions.checkState(childCount  >  0);	  Preconditions.checkState(childCount    >=    0);    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
77	[BUG]  [BUGGY]  Preconditions.checkState(childCount!=  1);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  Preconditions.checkState(childCount!=  1);  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	Preconditions.checkState(childCount!=  1);	  Preconditions.checkState(childCount    >=    0);    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
78	[BUG]  [BUGGY]  Integer  childCount  =  n.getLastChild().getString();  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  Integer  childCount  =  n.getLastChild().getString();  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	Integer  childCount  =  n.getLastChild().getString();	  Integer    childCount    =    n.getFirstChild().getString();    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
79	[BUG]  [BUGGY]  Integer  childCount  =  n.getFirstChild().getIntValue();  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  Integer  childCount  =  n.getFirstChild().getIntValue();  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	Integer  childCount  =  n.getFirstChild().getIntValue();	  Integer    childCount    =    n.getFirstChild().getString();    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
80	[BUG]  [BUGGY]  Integer  childCount  =  n.getFirstChild().getNext().getString();  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  Integer  childCount  =  n.getFirstChild().getNext().getString();  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	Integer  childCount  =  n.getFirstChild().getNext().getString();	  Integer    childCount    =    n.getFirstChild().getString();    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
81	[BUG]  [BUGGY]  Integer  childCount  =  n.getFirstChild().getType();  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  Integer  childCount  =  n.getFirstChild().getType();  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	Integer  childCount  =  n.getFirstChild().getType();	  Integer    childCount    =    n.getFirstChild().getString();    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
82	[BUG]  [BUGGY]  Integer  childCount  =  n.getFirstChild().getString()  +  1;  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  Integer  childCount  =  n.getFirstChild().getString()  +  1;  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	Integer  childCount  =  n.getFirstChild().getString()  +  1;	  Integer    childCount    =    n.getFirstChild().getString();    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
83	[BUG]  [BUGGY]  add(n,  context  ==  Context.END_OF_EXPR);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  add(n,  context  ==  Context.END_OF_EXPR);  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	add(n,  context  ==  Context.END_OF_EXPR);	  add(n,    context    ==    Context.START_OF_EXPR);    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
84	[BUG]  [BUGGY]  add(First,  context  ==  Context.START_OF_EXPR);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  add(First,  context  ==  Context.START_OF_EXPR);  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	add(First,  context  ==  Context.START_OF_EXPR);	  add(n,    context    ==    Context.START_OF_EXPR);    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
85	[BUG]  [BUGGY]  int  childCount  =  n.getFirstChild().length;  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  int  childCount  =  n.getFirstChild().length;  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	int  childCount  =  n.getFirstChild().length;	  int    childCount    =    n.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
86	[BUG]  [BUGGY]  int  childCount  =  n.getFirstChild().getNext();  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  int  childCount  =  n.getFirstChild().getNext();  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	int  childCount  =  n.getFirstChild().getNext();	  int    childCount    =    n.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
87	[BUG]  [BUGGY]  last  =  n.getLast();  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  last  =  n.getLast();  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	last  =  n.getLast();	  last    =    n.getNext();    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
88	[BUG]  [BUGGY]  last  =  n.getNext()  +  1;  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  last  =  n.getNext()  +  1;  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	last  =  n.getNext()  +  1;	  last    =    n.getNext();    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
89	[BUG]  [BUGGY]  last  =  n.getParent();  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  last  =  n.getParent();  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	last  =  n.getParent();	  last    =    n.getNext();    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
90	[BUG]  [BUGGY]  last  =  n.getPrevious();  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  last  =  n.getPrevious();  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	last  =  n.getPrevious();	  last    =    n.getNext();    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
91	[BUG]  [BUGGY]  int  childCount  =  n.getFirstChild().getLastChild().getString();  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  int  childCount  =  n.getFirstChild().getLastChild().getString();  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	int  childCount  =  n.getFirstChild().getLastChild().getString();	  int    childCount    =    n.getFirstChild().getString();    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
92	[BUG]  [BUGGY]  int  childCount  =  n.getFirstChild().getNext().getString();  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  int  childCount  =  n.getFirstChild().getNext().getString();  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	int  childCount  =  n.getFirstChild().getNext().getString();	  int    childCount    =    n.getFirstChild().getString();    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
93	[BUG]  [BUGGY]  int  childCount  =  n.getFirstChild().getString().length();  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  int  childCount  =  n.getFirstChild().getString().length();  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	int  childCount  =  n.getFirstChild().getString().length();	  int    childCount    =    n.getFirstChild().getString();    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
94	[BUG]  [BUGGY]  int  childCount  =  n.getFirstChild().getString()  +  1;  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  int  childCount  =  n.getFirstChild().getString()  +  1;  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	int  childCount  =  n.getFirstChild().getString()  +  1;	  int    childCount    =    n.getFirstChild().getString();    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
95	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING  &&  n.getType()  ==  Token.EXPR_RESULT)  {  break;  }  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  if(n.getType()  ==  Token.STRING  &&  n.getType()  ==  Token.EXPR_RESULT)  {  break;  }  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	if(n.getType()  ==  Token.STRING  &&  n.getType()  ==  Token.EXPR_RESULT)  {  break;  }	  if(n.getType()    ==    Token.STRING    ||    n.getType()    ==    Token.EXPR_RESULT)    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
96	[BUG]  [BUGGY]  if(n.getType()!=  Token.STRING  &&  n.getType()  ==  Token.EXPR_RESULT)  {  break;  }  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  if(n.getType()!=  Token.STRING  &&  n.getType()  ==  Token.EXPR_RESULT)  {  break;  }  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	if(n.getType()!=  Token.STRING  &&  n.getType()  ==  Token.EXPR_RESULT)  {  break;  }	  if(n.getType()    ==    Token.STRING    ||    n.getType()    ==    Token.EXPR_RESULT)    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
97	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING  ||  n.getType()!=  Token.EXPR_RESULT)  {  break;  }  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  if(n.getType()  ==  Token.STRING  ||  n.getType()!=  Token.EXPR_RESULT)  {  break;  }  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	if(n.getType()  ==  Token.STRING  ||  n.getType()!=  Token.EXPR_RESULT)  {  break;  }	  if(n.getType()    ==    Token.STRING    ||    n.getType()    ==    Token.EXPR_RESULT)    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
98	[BUG]  [BUGGY]  if(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()  ==  Token.STRING)  {  break;  }  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  if(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()  ==  Token.STRING)  {  break;  }  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	if(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()  ==  Token.STRING)  {  break;  }	  if(n.getType()    ==    Token.STRING    ||    n.getType()    ==    Token.EXPR_RESULT)    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
99	[BUG]  [BUGGY]  n.getType()  ==  Token.STRING  ||  n.getType()  ==  Token.EXPR_RESULT)  {  break;  }  [CE]  not  a  statement  [FE]                                ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  n.getType()  ==  Token.STRING  ||  n.getType()  ==  Token.EXPR_RESULT)  {  break;  }  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	n.getType()  ==  Token.STRING  ||  n.getType()  ==  Token.EXPR_RESULT)  {  break;  }	  if(n.getType()    ==    Token.STRING    ||    n.getType()    ==    Token.EXPR_RESULT)    {    break;    }    	non-compiled	[CE]  not  a  statement	85	None	replace
100	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING  ||  n.getType()  ==  Token.FUNCTION)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  if(n.getType()  ==  Token.STRING  ||  n.getType()  ==  Token.FUNCTION)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	if(n.getType()  ==  Token.STRING  ||  n.getType()  ==  Token.FUNCTION)  {  throw  new  IllegalStateException( " ");  }	  if(n.getType()    ==    Token.STRING)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
101	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING  ||  n.getType()  ==  Token.NAME)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  if(n.getType()  ==  Token.STRING  ||  n.getType()  ==  Token.NAME)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	if(n.getType()  ==  Token.STRING  ||  n.getType()  ==  Token.NAME)  {  throw  new  IllegalStateException( " ");  }	  if(n.getType()    ==    Token.STRING)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
102	[BUG]  [BUGGY]  Context.checkState(childCount  ==  1);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  Context.checkState(childCount  ==  1);  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	Context.checkState(childCount  ==  1);	  if(n.getType()    ==    Token.STRING)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
103	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING)  {  throw  new  IllegalStateException( "Unexpected  String  children: "  +  n.getString());  }  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  if(n.getType()  ==  Token.STRING)  {  throw  new  IllegalStateException( "Unexpected  String  children: "  +  n.getString());  }  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	if(n.getType()  ==  Token.STRING)  {  throw  new  IllegalStateException( "Unexpected  String  children: "  +  n.getString());  }	  if(n.getType()    ==    Token.STRING)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
104	[BUG]  [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	if(n.getType()  ==  Token.FUNCTION)  {  throw  new  IllegalStateException( " ");  }	  if(n.getType()    ==    Token.STRING)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
105	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  if(n.getType()  ==  Token.NAME)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	if(n.getType()  ==  Token.NAME)  {  throw  new  IllegalStateException( " ");  }	  if(n.getType()    ==    Token.STRING)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
106	[BUG]  [BUGGY]  int  childCount  =  n.getLastChild().getType();  break;  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  int  childCount  =  n.getLastChild().getType();  break;  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	int  childCount  =  n.getLastChild().getType();  break;	  int    childCount    =    n.getFirstChild().getType();    break;    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
107	[BUG]  [BUGGY]  int  childCount  =  n.getFirstChild().getString();  break;  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  int  childCount  =  n.getFirstChild().getString();  break;  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	int  childCount  =  n.getFirstChild().getString();  break;	  int    childCount    =    n.getFirstChild().getType();    break;    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
108	[BUG]  [BUGGY]  int  childCount  =  n.getFirstChild().getType()  +  1;  break;  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  int  childCount  =  n.getFirstChild().getType()  +  1;  break;  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	int  childCount  =  n.getFirstChild().getType()  +  1;  break;	  int    childCount    =    n.getFirstChild().getType();    break;    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
109	[BUG]  [BUGGY]  int  childCount  =  n.getFirstChild().getNext().getType();  break;  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  int  childCount  =  n.getFirstChild().getNext().getType();  break;  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	int  childCount  =  n.getFirstChild().getNext().getType();  break;	  int    childCount    =    n.getFirstChild().getType();    break;    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
110	[BUG]  [BUGGY]  int  childCount  =  n.getLastChild().getLength();  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  int  childCount  =  n.getLastChild().getLength();  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	int  childCount  =  n.getLastChild().getLength();	  int    childCount    =    n.getFirstChild().getLength();    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
111	[BUG]  [BUGGY]  int  childCount  =  n.getFirstChild().getLength()  +  1;  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  int  childCount  =  n.getFirstChild().getLength()  +  1;  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	int  childCount  =  n.getFirstChild().getLength()  +  1;	  int    childCount    =    n.getFirstChild().getLength();    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
112	[BUG]  [BUGGY]  int  childCount  =  n.getFirstChild().getLastChild().getLength();  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  int  childCount  =  n.getFirstChild().getLastChild().getLength();  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	int  childCount  =  n.getFirstChild().getLastChild().getLength();	  int    childCount    =    n.getFirstChild().getLength();    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
113	[BUG]  [BUGGY]  int  childCount  =  n.getFirstChild().getLength()  -  1;  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  int  childCount  =  n.getFirstChild().getLength()  -  1;  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	int  childCount  =  n.getFirstChild().getLength()  -  1;	  int    childCount    =    n.getFirstChild().getLength();    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
114	[BUG]  [BUGGY]  int  childCount  =  n.getFirstChild().getLength()  *  2;  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  int  childCount  =  n.getFirstChild().getLength()  *  2;  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	int  childCount  =  n.getFirstChild().getLength()  *  2;	  int    childCount    =    n.getFirstChild().getLength();    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
115	[BUG]  [BUGGY]  Preconditions.checkState(childCount  ==  3);  break;  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  Preconditions.checkState(childCount  ==  3);  break;  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	Preconditions.checkState(childCount  ==  3);  break;	  Preconditions.checkState(childCount    ==    2);    break;    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
116	[BUG]  [BUGGY]  Preconditions.checkState(childCount!=  2);  break;  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  Preconditions.checkState(childCount!=  2);  break;  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	Preconditions.checkState(childCount!=  2);  break;	  Preconditions.checkState(childCount    ==    2);    break;    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
117	[BUG]  [BUGGY]  Context.checkState(childCount  ==  2);  break;  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  Context.checkState(childCount  ==  2);  break;  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	Context.checkState(childCount  ==  2);  break;	  Preconditions.checkState(childCount    ==    2);    break;    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
118	[BUG]  [BUGGY]  int  childCount  =  n.getParent().getLastChild().getType();  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  int  childCount  =  n.getParent().getLastChild().getType();  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	int  childCount  =  n.getParent().getLastChild().getType();	  int    childCount    =    n.getParent().getFirstChild().getType();    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
119	[BUG]  [BUGGY]  int  childCount  =  n.getNext().getFirstChild().getType();  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  int  childCount  =  n.getNext().getFirstChild().getType();  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	int  childCount  =  n.getNext().getFirstChild().getType();	  int    childCount    =    n.getParent().getFirstChild().getType();    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
120	[BUG]  [BUGGY]  int  childCount  =  n.getChildCount().getFirstChild().getType();  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  int  childCount  =  n.getChildCount().getFirstChild().getType();  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	int  childCount  =  n.getChildCount().getFirstChild().getType();	  int    childCount    =    n.getParent().getFirstChild().getType();    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
121	[BUG]  [BUGGY]  int  childCount  =  n.getParent().getFirstChild().getType()  +  1;  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  int  childCount  =  n.getParent().getFirstChild().getType()  +  1;  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	int  childCount  =  n.getParent().getFirstChild().getType()  +  1;	  int    childCount    =    n.getParent().getFirstChild().getType();    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
122	[BUG]  [BUGGY]  int  childCount  =  n.getLastChild().getString().length();  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  int  childCount  =  n.getLastChild().getString().length();  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	int  childCount  =  n.getLastChild().getString().length();	  int    childCount    =    n.getLastChild().getString()    +    1;    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
123	[BUG]  [BUGGY]  int  childCount  =  n.getLastChild().getString()  *  1;  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  int  childCount  =  n.getLastChild().getString()  *  1;  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	int  childCount  =  n.getLastChild().getString()  *  1;	  int    childCount    =    n.getLastChild().getString()    +    1;    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
124	[BUG]  [BUGGY]  last  =  n.getNextSibling();  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  last  =  n.getNextSibling();  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	last  =  n.getNextSibling();	  last    =    n.getPreviousSibling();    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
125	[BUG]  [BUGGY]  last  =  context.getPreviousSibling();  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  last  =  context.getPreviousSibling();  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	last  =  context.getPreviousSibling();	  last    =    n.getPreviousSibling();    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
126	[BUG]  [BUGGY]  last  =  n.getLastSibling();  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  last  =  n.getLastSibling();  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	last  =  n.getLastSibling();	  last    =    n.getPreviousSibling();    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
127	[BUG]  [BUGGY]  int  childCount  =  n.getLastChild().getType()  +  1;  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  int  childCount  =  n.getLastChild().getType()  +  1;  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	int  childCount  =  n.getLastChild().getType()  +  1;	  int    childCount    =    n.getFirstChild().getType()    +    1;    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
128	[BUG]  [BUGGY]  int  childCount  =  n.getFirstChild().getType()  +  2;  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  int  childCount  =  n.getFirstChild().getType()  +  2;  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	int  childCount  =  n.getFirstChild().getType()  +  2;	  int    childCount    =    n.getFirstChild().getType()    +    1;    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
129	[BUG]  [BUGGY]  int  childCount  =  n.getFirstChild().getType()  *  1;  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  int  childCount  =  n.getFirstChild().getType()  *  1;  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	int  childCount  =  n.getFirstChild().getType()  *  1;	  int    childCount    =    n.getFirstChild().getType()    +    1;    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
130	[BUG]  [BUGGY]  Integer  childCount  =  n.getFirstChild().getType()  +  1;  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  Integer  childCount  =  n.getFirstChild().getType()  +  1;  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	Integer  childCount  =  n.getFirstChild().getType()  +  1;	  int    childCount    =    n.getFirstChild().getType()    +    1;    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
131	[BUG]  [BUGGY]  int  childCount  =  n.getLastChild().getChildCount()  -  1;  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  int  childCount  =  n.getLastChild().getChildCount()  -  1;  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	int  childCount  =  n.getLastChild().getChildCount()  -  1;	  int    childCount    =    n.getLastChild().getChildCount();    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
132	[BUG]  [BUGGY]  int  childCount  =  n.getLastChild().getChildCount()  +  1;  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  int  childCount  =  n.getLastChild().getChildCount()  +  1;  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	int  childCount  =  n.getLastChild().getChildCount()  +  1;	  int    childCount    =    n.getLastChild().getChildCount();    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
133	[BUG]  [BUGGY]  int  childCount  =  context.getLastChild().getChildCount();  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  int  childCount  =  context.getLastChild().getChildCount();  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	int  childCount  =  context.getLastChild().getChildCount();	  int    childCount    =    n.getLastChild().getChildCount();    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
134	[BUG]  [BUGGY]  int  childCount  =  n.getLastChild().getChildCount(context);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  int  childCount  =  n.getLastChild().getChildCount(context);  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	int  childCount  =  n.getLastChild().getChildCount(context);	  int    childCount    =    n.getLastChild().getChildCount();    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
135	[BUG]  [BUGGY]  last  =  context.getFirstChild();  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  last  =  context.getFirstChild();  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	last  =  context.getFirstChild();	  last    =    context.getLastChild();    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
136	[BUG]  [BUGGY]  last  =  context.getLastChild()  -  1;  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  last  =  context.getLastChild()  -  1;  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	last  =  context.getLastChild()  -  1;	  last    =    context.getLastChild();    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
137	[BUG]  [BUGGY]  int  childCount  =  n.getFirstChild().getType()  &&  context  ==  Context.START_OF_EXPR;  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  int  childCount  =  n.getFirstChild().getType()  &&  context  ==  Context.START_OF_EXPR;  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	int  childCount  =  n.getFirstChild().getType()  &&  context  ==  Context.START_OF_EXPR;	  int    childCount    =    n.getFirstChild().getType()    ||    context    ==    Context.START_OF_EXPR;    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
138	[BUG]  [BUGGY]  int  childCount  =  n.getLastChild().getType()  ||  context  ==  Context.START_OF_EXPR;  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  int  childCount  =  n.getLastChild().getType()  ||  context  ==  Context.START_OF_EXPR;  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	int  childCount  =  n.getLastChild().getType()  ||  context  ==  Context.START_OF_EXPR;	  int    childCount    =    n.getFirstChild().getType()    ||    context    ==    Context.START_OF_EXPR;    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
139	[BUG]  [BUGGY]  int  childCount  =  n.getFirstChild().getType()  ||  context  ==  Context.END_OF_EXPR;  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  int  childCount  =  n.getFirstChild().getType()  ||  context  ==  Context.END_OF_EXPR;  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	int  childCount  =  n.getFirstChild().getType()  ||  context  ==  Context.END_OF_EXPR;	  int    childCount    =    n.getFirstChild().getType()    ||    context    ==    Context.START_OF_EXPR;    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
140	[BUG]  [BUGGY]  int  childCount  =  n.getFirstChild().getType()  ||  context!=  Context.START_OF_EXPR;  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  int  childCount  =  n.getFirstChild().getType()  ||  context!=  Context.START_OF_EXPR;  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	int  childCount  =  n.getFirstChild().getType()  ||  context!=  Context.START_OF_EXPR;	  int    childCount    =    n.getFirstChild().getType()    ||    context    ==    Context.START_OF_EXPR;    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
141	[BUG]  [BUGGY]  int  childCount  =  n.getFirstChild().getType()  &&  context!=  Context.START_OF_EXPR;  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  int  childCount  =  n.getFirstChild().getType()  &&  context!=  Context.START_OF_EXPR;  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	int  childCount  =  n.getFirstChild().getType()  &&  context!=  Context.START_OF_EXPR;	  int    childCount    =    n.getFirstChild().getType()    ||    context    ==    Context.START_OF_EXPR;    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
142	[BUG]  [BUGGY]  int  childCount  =  n.getFirstChild().getType(),  context  ==  Context.START_OF_EXPR;  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  int  childCount  =  n.getFirstChild().getType(),  context  ==  Context.START_OF_EXPR;  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	int  childCount  =  n.getFirstChild().getType(),  context  ==  Context.START_OF_EXPR;	  int    childCount    =    n.getFirstChild().getType()    ||    context    ==    Context.START_OF_EXPR;    	non-compiled	[CE]  	21	None	replace
143	[BUG]  [BUGGY]  int  childCount  =  n.getParent().getChildCount(context,  1);  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  int  childCount  =  n.getParent().getChildCount(context,  1);  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	int  childCount  =  n.getParent().getChildCount(context,  1);	  int    childCount    =    n.getParent().getChildCount(context);    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
144	[BUG]  [BUGGY]  int  childCount  =  n.getParent().getChildCount(context,  outputCharsetEncoder);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  int  childCount  =  n.getParent().getChildCount(context,  outputCharsetEncoder);  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	int  childCount  =  n.getParent().getChildCount(context,  outputCharsetEncoder);	  int    childCount    =    n.getParent().getChildCount(context);    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
145	[BUG]  [BUGGY]  int  childCount  =  n.getFirstChild().getChildCount(context);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  int  childCount  =  n.getFirstChild().getChildCount(context);  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	int  childCount  =  n.getFirstChild().getChildCount(context);	  int    childCount    =    n.getParent().getChildCount(context);    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
146	[BUG]  [BUGGY]  int  childCount  =  n.getNext().getChildCount(context);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  int  childCount  =  n.getNext().getChildCount(context);  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	int  childCount  =  n.getNext().getChildCount(context);	  int    childCount    =    n.getParent().getChildCount(context);    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
147	[BUG]  [BUGGY]  int  childCount  =  n.getParent().getChildCount(context)-  1;  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  int  childCount  =  n.getParent().getChildCount(context)-  1;  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	int  childCount  =  n.getParent().getChildCount(context)-  1;	  int    childCount    =    n.getParent().getChildCount(context);    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
148	[BUG]  [BUGGY]  int  childCount  =  n.getFirst().getType();  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  int  childCount  =  n.getFirst().getType();  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	int  childCount  =  n.getFirst().getType();	  int    childCount    =    n.getNext().getType();    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
149	[BUG]  [BUGGY]  int  childCount  =  n.getNext().getType()  +  1;  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  int  childCount  =  n.getNext().getType()  +  1;  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	int  childCount  =  n.getNext().getType()  +  1;	  int    childCount    =    n.getNext().getType();    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
150	[BUG]  [BUGGY]  Preconditions.checkState(childCount!=  1);  break;  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  Preconditions.checkState(childCount!=  1);  break;  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	Preconditions.checkState(childCount!=  1);  break;	  Preconditions.checkState(childCount    ==    1);    break;    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
151	[BUG]  [BUGGY]  Context.checkState(childCount  ==  1);  break;  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  Context.checkState(childCount  ==  1);  break;  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	Context.checkState(childCount  ==  1);  break;	  Preconditions.checkState(childCount    ==    1);    break;    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
152	[BUG]  [BUGGY]  Preconditions.checkState(childCount  >=  1);  break;  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  Preconditions.checkState(childCount  >=  1);  break;  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	Preconditions.checkState(childCount  >=  1);  break;	  Preconditions.checkState(childCount    ==    1);    break;    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
153	[BUG]  [BUGGY]  int  childCount  =  n.getParent().getType()  +  2;  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  int  childCount  =  n.getParent().getType()  +  2;  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	int  childCount  =  n.getParent().getType()  +  2;	  int    childCount    =    n.getParent().getType()    +    1;    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
154	[BUG]  [BUGGY]  int  childCount  =  n.getParent().getType()  *  1;  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  int  childCount  =  n.getParent().getType()  *  1;  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	int  childCount  =  n.getParent().getType()  *  1;	  int    childCount    =    n.getParent().getType()    +    1;    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
155	[BUG]  [BUGGY]  int  childCount  =  n.getLastChild().getParent().getString();  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  int  childCount  =  n.getLastChild().getParent().getString();  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	int  childCount  =  n.getLastChild().getParent().getString();	  int    childCount    =    n.getLastChild().getNext().getString();    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
156	[BUG]  [BUGGY]  int  childCount  =  n.getLastChild().getNext().getValue();  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  int  childCount  =  n.getLastChild().getNext().getValue();  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	int  childCount  =  n.getLastChild().getNext().getValue();	  int    childCount    =    n.getLastChild().getNext().getString();    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
157	[BUG]  [BUGGY]  int  childCount  =  n.getLastChild().getNext().getLength();  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  int  childCount  =  n.getLastChild().getNext().getLength();  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	int  childCount  =  n.getLastChild().getNext().getLength();	  int    childCount    =    n.getLastChild().getNext().getString();    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
158	[BUG]  [BUGGY]  int  childCount  =  n.getLastChild().getNext().getIndex();  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  int  childCount  =  n.getLastChild().getNext().getIndex();  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	int  childCount  =  n.getLastChild().getNext().getIndex();	  int    childCount    =    n.getLastChild().getNext().getString();    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
159	[BUG]  [BUGGY]  int  childCount  =  n.getLastChild().getFirstChild();  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  int  childCount  =  n.getLastChild().getFirstChild();  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	int  childCount  =  n.getLastChild().getFirstChild();	  int    childCount    =    n.getParent().getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
160	[BUG]  [BUGGY]  int  childCount  =  n.getType().getChildCount()  -  1;  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  int  childCount  =  n.getType().getChildCount()  -  1;  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	int  childCount  =  n.getType().getChildCount()  -  1;	  int    childCount    =    n.getParent().getChildCount()    -    1;    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
161	[BUG]  [BUGGY]  int  childCount  =  context.getParent().getChildCount()  -  1;  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  int  childCount  =  context.getParent().getChildCount()  -  1;  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	int  childCount  =  context.getParent().getChildCount()  -  1;	  int    childCount    =    n.getParent().getChildCount()    -    1;    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
162	[BUG]  [BUGGY]  int  childCount  =  n.getChildCount().getType()  -  1;  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  int  childCount  =  n.getChildCount().getType()  -  1;  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	int  childCount  =  n.getChildCount().getType()  -  1;	  int    childCount    =    n.getChildCount().getType();    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
163	[BUG]  [BUGGY]  int  childCount  =  n.getChildCount().getType()  +  1;  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  int  childCount  =  n.getChildCount().getType()  +  1;  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	int  childCount  =  n.getChildCount().getType()  +  1;	  int    childCount    =    n.getChildCount().getType();    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
164	[BUG]  [BUGGY]  int  childCount  =  n.getChildCount().getLastChild().getType();  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  int  childCount  =  n.getChildCount().getLastChild().getType();  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	int  childCount  =  n.getChildCount().getLastChild().getType();	  int    childCount    =    n.getChildCount().getType();    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
165	[BUG]  [BUGGY]  int  childCount  =  n.getChildCount().getParent().getType();  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  int  childCount  =  n.getChildCount().getParent().getType();  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	int  childCount  =  n.getChildCount().getParent().getType();	  int    childCount    =    n.getChildCount().getType();    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
166	[BUG]  [BUGGY]  Preconditions.checkState(childCount  >=  1);  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  Preconditions.checkState(childCount  >=  1);  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	Preconditions.checkState(childCount  >=  1);	  Preconditions.checkState(childCount    ==    1);    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
167	[BUG]  [BUGGY]  int  childCount  =  n.getFirstChild().getIndexedChildCount();  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  int  childCount  =  n.getFirstChild().getIndexedChildCount();  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	int  childCount  =  n.getFirstChild().getIndexedChildCount();	  int    childCount    =    n.getLastChild().getIndexedChildCount();    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
168	[BUG]  [BUGGY]  int  childCount  =  n.getLastChild().getIndexedChildCount()  -  1;  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  int  childCount  =  n.getLastChild().getIndexedChildCount()  -  1;  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	int  childCount  =  n.getLastChild().getIndexedChildCount()  -  1;	  int    childCount    =    n.getLastChild().getIndexedChildCount();    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
169	[BUG]  [BUGGY]  int  childCount  =  n.getLastChild().getIndexedChildCount(context);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  int  childCount  =  n.getLastChild().getIndexedChildCount(context);  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	int  childCount  =  n.getLastChild().getIndexedChildCount(context);	  int    childCount    =    n.getLastChild().getIndexedChildCount();    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
170	[BUG]  [BUGGY]  int  childCount  =  n.getLastChild().getIndexedChildCount()  +  1;  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  int  childCount  =  n.getLastChild().getIndexedChildCount()  +  1;  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	int  childCount  =  n.getLastChild().getIndexedChildCount()  +  1;	  int    childCount    =    n.getLastChild().getIndexedChildCount();    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
171	[BUG]  [BUGGY]  int  childCount  =  n.getLastChild().getFirstChild().getIndexedChildCount();  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  int  childCount  =  n.getLastChild().getFirstChild().getIndexedChildCount();  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	int  childCount  =  n.getLastChild().getFirstChild().getIndexedChildCount();	  int    childCount    =    n.getLastChild().getIndexedChildCount();    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
172	[BUG]  [BUGGY]  int  childCount  =  n.getNext().getChildCount()  -  1;  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  int  childCount  =  n.getNext().getChildCount()  -  1;  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	int  childCount  =  n.getNext().getChildCount()  -  1;	  int    childCount    =    n.getNext().getChildCount();    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
173	[BUG]  [BUGGY]  int  childCount  =  n.getNext().getChildCount()  +  1;  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  int  childCount  =  n.getNext().getChildCount()  +  1;  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	int  childCount  =  n.getNext().getChildCount()  +  1;	  int    childCount    =    n.getNext().getChildCount();    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
174	[BUG]  [BUGGY]  int  childCount  =  n.getFirst().getChildCount();  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  int  childCount  =  n.getFirst().getChildCount();  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	int  childCount  =  n.getFirst().getChildCount();	  int    childCount    =    n.getNext().getChildCount();    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
175	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING  &&  n.getType()  ==  Token.FUNCTION)  {  break;  }  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  if(n.getType()  ==  Token.STRING  &&  n.getType()  ==  Token.FUNCTION)  {  break;  }  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	if(n.getType()  ==  Token.STRING  &&  n.getType()  ==  Token.FUNCTION)  {  break;  }	  if(n.getType()    ==    Token.STRING    ||    n.getType()    ==    Token.FUNCTION)    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
176	[BUG]  [BUGGY]  if(n.getType()!=  Token.STRING  &&  n.getType()  ==  Token.FUNCTION)  {  break;  }  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  if(n.getType()!=  Token.STRING  &&  n.getType()  ==  Token.FUNCTION)  {  break;  }  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	if(n.getType()!=  Token.STRING  &&  n.getType()  ==  Token.FUNCTION)  {  break;  }	  if(n.getType()    ==    Token.STRING    ||    n.getType()    ==    Token.FUNCTION)    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
177	[BUG]  [BUGGY]  n.getType()  ==  Token.STRING  ||  n.getType()  ==  Token.FUNCTION)  {  break;  }  [CE]  not  a  statement  [FE]                              ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  n.getType()  ==  Token.STRING  ||  n.getType()  ==  Token.FUNCTION)  {  break;  }  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	n.getType()  ==  Token.STRING  ||  n.getType()  ==  Token.FUNCTION)  {  break;  }	  if(n.getType()    ==    Token.STRING    ||    n.getType()    ==    Token.FUNCTION)    {    break;    }    	non-compiled	[CE]  not  a  statement	8	None	replace
178	[BUG]  [BUGGY]  if(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.STRING)  {  break;  }  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  if(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.STRING)  {  break;  }  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	if(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.STRING)  {  break;  }	  if(n.getType()    ==    Token.STRING    ||    n.getType()    ==    Token.FUNCTION)    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
179	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING  ||  n.getType()!=  Token.FUNCTION)  {  break;  }  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  if(n.getType()  ==  Token.STRING  ||  n.getType()!=  Token.FUNCTION)  {  break;  }  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	if(n.getType()  ==  Token.STRING  ||  n.getType()!=  Token.FUNCTION)  {  break;  }	  if(n.getType()    ==    Token.STRING    ||    n.getType()    ==    Token.FUNCTION)    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
180	[BUG]  [BUGGY]  n.setType(Token.STRING  ||  n.getType()  ==  Token.FUNCTION)  {  break;  }  [CE]  [FE]                                    ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  n.setType(Token.STRING  ||  n.getType()  ==  Token.FUNCTION)  {  break;  }  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	n.setType(Token.STRING  ||  n.getType()  ==  Token.FUNCTION)  {  break;  }	  if(n.getType()    ==    Token.STRING    ||    n.getType()    ==    Token.FUNCTION)    {    break;    }    	non-compiled	[CE]  	8	None	replace
181	[BUG]  [BUGGY]  last  =  context.getPreviousChild();  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  last  =  context.getPreviousChild();  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	last  =  context.getPreviousChild();	  last    =    n.getPreviousChild();    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
182	[BUG]  [BUGGY]  last  =  first.getPreviousChild();  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  last  =  first.getPreviousChild();  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	last  =  first.getPreviousChild();	  last    =    n.getPreviousChild();    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
183	[BUG]  [BUGGY]  Preconditions.checkState(childCount  ==  4);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  Preconditions.checkState(childCount  ==  4);  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	Preconditions.checkState(childCount  ==  4);	  Preconditions.checkState(childCount    ==    3);    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
184	[BUG]  [BUGGY]  Preconditions.checkState(childCount!=  3);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  Preconditions.checkState(childCount!=  3);  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	Preconditions.checkState(childCount!=  3);	  Preconditions.checkState(childCount    ==    3);    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
185	[BUG]  [BUGGY]  add(context!=  Context.END_OF_EXPR);  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  add(context!=  Context.END_OF_EXPR);  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	add(context!=  Context.END_OF_EXPR);	  add(context    ==    Context.END_OF_EXPR);    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
186	[BUG]  [BUGGY]  add(context  ==  Context.END_OF_EXPR));  [CE]  [FE]                ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  add(context  ==  Context.END_OF_EXPR));  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	add(context  ==  Context.END_OF_EXPR));	  add(context    ==    Context.END_OF_EXPR);    	non-compiled	[CE]  	23	None	replace
187	[BUG]  [BUGGY]  add(childCount  ==  Context.END_OF_EXPR);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  add(childCount  ==  Context.END_OF_EXPR);  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	add(childCount  ==  Context.END_OF_EXPR);	  add(context    ==    Context.END_OF_EXPR);    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
188	[BUG]  [BUGGY]  int  childCount  =  n.getLastChild().getIndex()  -  1;  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  int  childCount  =  n.getLastChild().getIndex()  -  1;  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	int  childCount  =  n.getLastChild().getIndex()  -  1;	  int    childCount    =    n.getFirstChild().getIndex()    -    1;    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
189	[BUG]  [BUGGY]  int  childCount  =  n.getFirstChild().getStartIndex()  -  1;  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  int  childCount  =  n.getFirstChild().getStartIndex()  -  1;  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	int  childCount  =  n.getFirstChild().getStartIndex()  -  1;	  int    childCount    =    n.getFirstChild().getIndex()    -    1;    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
190	[BUG]  [BUGGY]  int  childCount  =  context.getFirstChild().getIndex()  -  1;  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  int  childCount  =  context.getFirstChild().getIndex()  -  1;  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	int  childCount  =  context.getFirstChild().getIndex()  -  1;	  int    childCount    =    n.getFirstChild().getIndex()    -    1;    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
191	[BUG]  [BUGGY]  add(first,  context  ==  Context.BEFORE_DANGLING_ELSE);  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  add(first,  context  ==  Context.BEFORE_DANGLING_ELSE);  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	add(first,  context  ==  Context.BEFORE_DANGLING_ELSE);	  add(context    ==    Context.BEFORE_DANGLING_ELSE);    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
192	[BUG]  [BUGGY]  add(context  ==  Context.BEFORE_DANGLING_ELSE  ||  context  ==  Context.BEFORE_DANGLING_ELSE);  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  add(context  ==  Context.BEFORE_DANGLING_ELSE  ||  context  ==  Context.BEFORE_DANGLING_ELSE);  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	add(context  ==  Context.BEFORE_DANGLING_ELSE  ||  context  ==  Context.BEFORE_DANGLING_ELSE);	  add(context    ==    Context.BEFORE_DANGLING_ELSE);    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
193	[BUG]  [BUGGY]  add(context  ==  Context.BEFORE_DANGLING_ELSE,  childCount);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  add(context  ==  Context.BEFORE_DANGLING_ELSE,  childCount);  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	add(context  ==  Context.BEFORE_DANGLING_ELSE,  childCount);	  add(context    ==    Context.BEFORE_DANGLING_ELSE);    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
194	[BUG]  [BUGGY]  add(context  ==  Context.BEFORE_DANGLING_ELSE,  children);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  add(context  ==  Context.BEFORE_DANGLING_ELSE,  children);  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	add(context  ==  Context.BEFORE_DANGLING_ELSE,  children);	  add(context    ==    Context.BEFORE_DANGLING_ELSE);    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
195	[BUG]  [BUGGY]  add(n.getString(),  context  ==  Context.BEFORE_DANGLING_ELSE);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  add(n.getString(),  context  ==  Context.BEFORE_DANGLING_ELSE);  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	add(n.getString(),  context  ==  Context.BEFORE_DANGLING_ELSE);	  add(context    ==    Context.BEFORE_DANGLING_ELSE);    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
196	[BUG]  [BUGGY]  int  childCount  =  n.getFirstChild().getLastChild().getNext().getType();  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  int  childCount  =  n.getFirstChild().getLastChild().getNext().getType();  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	int  childCount  =  n.getFirstChild().getLastChild().getNext().getType();	  int    childCount    =    n.getFirstChild().getLastChild().getType();    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
197	[BUG]  [BUGGY]  int  childCount  =  n.getFirstChild().getLastChild().getParent().getType();  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  int  childCount  =  n.getFirstChild().getLastChild().getParent().getType();  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	int  childCount  =  n.getFirstChild().getLastChild().getParent().getType();	  int    childCount    =    n.getFirstChild().getLastChild().getType();    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
198	[BUG]  [BUGGY]  int  childCount  =  n.getFirstChild().getLastChild().getLeastChild().getType();  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  int  childCount  =  n.getFirstChild().getLastChild().getLeastChild().getType();  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	int  childCount  =  n.getFirstChild().getLastChild().getLeastChild().getType();	  int    childCount    =    n.getFirstChild().getLastChild().getType();    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
199	[BUG]  [BUGGY]  int  childCount  =  n.getFirstChild().getLastChild().getType()  +  1;  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  int  childCount  =  n.getFirstChild().getLastChild().getType()  +  1;  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	int  childCount  =  n.getFirstChild().getLastChild().getType()  +  1;	  int    childCount    =    n.getFirstChild().getLastChild().getType();    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
200	[BUG]  [BUGGY]  add(context  ==  Context.STATEMENT  ||  context  ==  Context.START_OF_EXPR);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  add(context  ==  Context.STATEMENT  ||  context  ==  Context.START_OF_EXPR);  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	add(context  ==  Context.STATEMENT  ||  context  ==  Context.START_OF_EXPR);	  add(context    ==    Context.STATEMENT);    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
201	[BUG]  [BUGGY]  add(first,  context  ==  Context.STATEMENT);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  add(first,  context  ==  Context.STATEMENT);  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	add(first,  context  ==  Context.STATEMENT);	  add(context    ==    Context.STATEMENT);    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
202	[BUG]  [BUGGY]  add(context  ==  Context.STATEMENT));  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  add(context  ==  Context.STATEMENT));  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	add(context  ==  Context.STATEMENT));	  add(context    ==    Context.STATEMENT);    	non-compiled	[CE]  	26	None	replace
203	[BUG]  [BUGGY]  add(context  ==  Context.STATEMENT  ||  context  ==  Context.STATEMENT);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  add(context  ==  Context.STATEMENT  ||  context  ==  Context.STATEMENT);  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	add(context  ==  Context.STATEMENT  ||  context  ==  Context.STATEMENT);	  add(context    ==    Context.STATEMENT);    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
204	[BUG]  [BUGGY]  int  childCount  =  n.getFirstChild().getLastChild().getNext();  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  int  childCount  =  n.getFirstChild().getLastChild().getNext();  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	int  childCount  =  n.getFirstChild().getLastChild().getNext();	  int    childCount    =    n.getFirstChild().getLastChild();    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
205	[BUG]  [BUGGY]  int  childCount  =  n.getFirstChild().getFirstChild().getLastChild();  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  int  childCount  =  n.getFirstChild().getFirstChild().getLastChild();  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	int  childCount  =  n.getFirstChild().getFirstChild().getLastChild();	  int    childCount    =    n.getFirstChild().getLastChild();    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
206	[BUG]  [BUGGY]  int  childCount  =  n.getFirstChild().getLastChild().getLastChild();  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  int  childCount  =  n.getFirstChild().getLastChild().getLastChild();  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	int  childCount  =  n.getFirstChild().getLastChild().getLastChild();	  int    childCount    =    n.getFirstChild().getLastChild();    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
207	[BUG]  [BUGGY]  int  childCount  =  n.getChildCount().getIndex();  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  int  childCount  =  n.getChildCount().getIndex();  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	int  childCount  =  n.getChildCount().getIndex();	  int    childCount    =    n.getLastChild().getIndex();    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
208	[BUG]  [BUGGY]  int  childCount  =  n.getLastChild().getStartIndex();  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  int  childCount  =  n.getLastChild().getStartIndex();  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	int  childCount  =  n.getLastChild().getStartIndex();	  int    childCount    =    n.getLastChild().getIndex();    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
209	[BUG]  [BUGGY]  int  childCount  =  n.getFirstChild().getIndex()  +  1;  break;  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  int  childCount  =  n.getFirstChild().getIndex()  +  1;  break;  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	int  childCount  =  n.getFirstChild().getIndex()  +  1;  break;	  int    childCount    =    n.getFirstChild().getIndex();    break;    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
210	[BUG]  [BUGGY]  int  childCount  =  n.getLastChild().getIndex();  break;  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  int  childCount  =  n.getLastChild().getIndex();  break;  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	int  childCount  =  n.getLastChild().getIndex();  break;	  int    childCount    =    n.getFirstChild().getIndex();    break;    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
211	[BUG]  [BUGGY]  int  childCount  =  n.getFirstChild().getIndex()  -  1;  break;  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  int  childCount  =  n.getFirstChild().getIndex()  -  1;  break;  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	int  childCount  =  n.getFirstChild().getIndex()  -  1;  break;	  int    childCount    =    n.getFirstChild().getIndex();    break;    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
212	[BUG]  [BUGGY]  int  childCount  =  n.getFirstChild().getStartIndex();  break;  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  int  childCount  =  n.getFirstChild().getStartIndex();  break;  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	int  childCount  =  n.getFirstChild().getStartIndex();  break;	  int    childCount    =    n.getFirstChild().getIndex();    break;    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
213	[BUG]  [BUGGY]  int  childCount  =  n.getFirstChild().getIndex()  *  2;  break;  [CE]  illegal  start  of  expression  [FE]                                    ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  int  childCount  =  n.getFirstChild().getIndex()  *  2;  break;  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	int  childCount  =  n.getFirstChild().getIndex()  *  2;  break;	  int    childCount    =    n.getFirstChild().getIndex();    break;    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
214	[BUG]  [BUGGY]  int  childCount  =  context.getChildCount()  +  1;  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  int  childCount  =  context.getChildCount()  +  1;  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	int  childCount  =  context.getChildCount()  +  1;	  int    childCount    =    n.getChildCount()    +    1;    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
215	[BUG]  [BUGGY]  int  childCount  =  n.getChildCount()  *  1;  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  int  childCount  =  n.getChildCount()  *  1;  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	int  childCount  =  n.getChildCount()  *  1;	  int    childCount    =    n.getChildCount()    +    1;    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
216	[BUG]  [BUGGY]  Integer  childCount  =  n.getChildCount();  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  Integer  childCount  =  n.getChildCount();  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	Integer  childCount  =  n.getChildCount();	  int    childCount    =    n.getChildCount()    +    1;    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
217	[BUG]  [BUGGY]  int  childCount  =  n.getFirstChild()  +  1;  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  int  childCount  =  n.getFirstChild()  +  1;  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	int  childCount  =  n.getFirstChild()  +  1;	  int    childCount    =    n.getChildCount()    +    1;    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
218	[BUG]  [BUGGY]  int  childCount  =  n.getLastChild().getString()  +  1;  break;  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  int  childCount  =  n.getLastChild().getString()  +  1;  break;  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	int  childCount  =  n.getLastChild().getString()  +  1;  break;	  int    childCount    =    n.getLastChild().getString();    break;    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
219	[BUG]  [BUGGY]  int  childCount  =  n.getChildCount().getString();  break;  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  int  childCount  =  n.getChildCount().getString();  break;  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	int  childCount  =  n.getChildCount().getString();  break;	  int    childCount    =    n.getLastChild().getString();    break;    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
220	[BUG]  [BUGGY]  Integer  childCount  =  n.getFirstChild().getString();  break;  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  Integer  childCount  =  n.getFirstChild().getString();  break;  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	Integer  childCount  =  n.getFirstChild().getString();  break;	  int    childCount    =    n.getLastChild().getString();    break;    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
221	[BUG]  [BUGGY]  int  childCount  =  n.getLastChild().getString().length();  break;  [CE]  illegal  start  of  expression  [FE]                                    ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  int  childCount  =  n.getLastChild().getString().length();  break;  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	int  childCount  =  n.getLastChild().getString().length();  break;	  int    childCount    =    n.getLastChild().getString();    break;    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
222	[BUG]  [BUGGY]  int  childCount  =  n.getFirstChild().getLastChildIndex();  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  int  childCount  =  n.getFirstChild().getLastChildIndex();  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	int  childCount  =  n.getFirstChild().getLastChildIndex();	  int    childCount    =    n.getFirstChild().getStartIndex();    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
223	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING  &&  n.getType()  ==  Token.CATCH)  {  break;  }  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  if(n.getType()  ==  Token.STRING  &&  n.getType()  ==  Token.CATCH)  {  break;  }  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	if(n.getType()  ==  Token.STRING  &&  n.getType()  ==  Token.CATCH)  {  break;  }	  if(n.getType()    ==    Token.STRING    ||    n.getType()    ==    Token.CATCH)    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
224	[BUG]  [BUGGY]  if(n.getType()!=  Token.STRING  &&  n.getType()  ==  Token.CATCH)  {  break;  }  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  if(n.getType()!=  Token.STRING  &&  n.getType()  ==  Token.CATCH)  {  break;  }  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	if(n.getType()!=  Token.STRING  &&  n.getType()  ==  Token.CATCH)  {  break;  }	  if(n.getType()    ==    Token.STRING    ||    n.getType()    ==    Token.CATCH)    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
225	[BUG]  [BUGGY]  n.getType()  ==  Token.STRING  ||  n.getType()  ==  Token.CATCH)  {  break;  }  [CE]  not  a  statement  [FE]                              ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  n.getType()  ==  Token.STRING  ||  n.getType()  ==  Token.CATCH)  {  break;  }  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	n.getType()  ==  Token.STRING  ||  n.getType()  ==  Token.CATCH)  {  break;  }	  if(n.getType()    ==    Token.STRING    ||    n.getType()    ==    Token.CATCH)    {    break;    }    	non-compiled	[CE]  not  a  statement	86	None	replace
226	[BUG]  [BUGGY]  if(n.getType()  ==  Token.CATCH  ||  n.getType()  ==  Token.STRING)  {  break;  }  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  if(n.getType()  ==  Token.CATCH  ||  n.getType()  ==  Token.STRING)  {  break;  }  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	if(n.getType()  ==  Token.CATCH  ||  n.getType()  ==  Token.STRING)  {  break;  }	  if(n.getType()    ==    Token.STRING    ||    n.getType()    ==    Token.CATCH)    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
227	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING  ||  n.getType()!=  Token.CATCH)  {  break;  }  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  if(n.getType()  ==  Token.STRING  ||  n.getType()!=  Token.CATCH)  {  break;  }  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	if(n.getType()  ==  Token.STRING  ||  n.getType()!=  Token.CATCH)  {  break;  }	  if(n.getType()    ==    Token.STRING    ||    n.getType()    ==    Token.CATCH)    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
228	[BUG]  [BUGGY]  n.setType(Token.STRING  ||  n.getType()  ==  Token.CATCH)  {  break;  }  [CE]  [FE]                                    ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  n.setType(Token.STRING  ||  n.getType()  ==  Token.CATCH)  {  break;  }  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	n.setType(Token.STRING  ||  n.getType()  ==  Token.CATCH)  {  break;  }	  if(n.getType()    ==    Token.STRING    ||    n.getType()    ==    Token.CATCH)    {    break;    }    	non-compiled	[CE]  	86	None	replace
229	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING  &&  n.getString().equals( "string "))  {  break;  }  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  if(n.getType()  ==  Token.STRING  &&  n.getString().equals( "string "))  {  break;  }  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	if(n.getType()  ==  Token.STRING  &&  n.getString().equals( "string "))  {  break;  }	  if(n.getType()    ==    Token.STRING    ||    n.getString().equals(   "string   "))    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
230	[BUG]  [BUGGY]  if(n.getType()!=  Token.STRING  &&  n.getString().equals( "string "))  {  break;  }  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  if(n.getType()!=  Token.STRING  &&  n.getString().equals( "string "))  {  break;  }  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	if(n.getType()!=  Token.STRING  &&  n.getString().equals( "string "))  {  break;  }	  if(n.getType()    ==    Token.STRING    ||    n.getString().equals(   "string   "))    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
231	[BUG]  [BUGGY]  If(n.getType()  ==  Token.STRING  &&  n.getString().equals( "string "))  {  break;  }  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  If(n.getType()  ==  Token.STRING  &&  n.getString().equals( "string "))  {  break;  }  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	If(n.getType()  ==  Token.STRING  &&  n.getString().equals( "string "))  {  break;  }	  if(n.getType()    ==    Token.STRING    ||    n.getString().equals(   "string   "))    {    break;    }    	non-compiled	[CE]  	84	None	replace
232	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING  &&  n.getString().equals( ".string "))  {  break;  }  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  if(n.getType()  ==  Token.STRING  &&  n.getString().equals( ".string "))  {  break;  }  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	if(n.getType()  ==  Token.STRING  &&  n.getString().equals( ".string "))  {  break;  }	  if(n.getType()    ==    Token.STRING    ||    n.getString().equals(   "string   "))    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
233	[BUG]  [BUGGY]  if(n.getType()!=  Token.STRING  ||  n.getString().equals( "string "))  {  break;  }  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  if(n.getType()!=  Token.STRING  ||  n.getString().equals( "string "))  {  break;  }  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	if(n.getType()!=  Token.STRING  ||  n.getString().equals( "string "))  {  break;  }	  if(n.getType()    ==    Token.STRING    ||    n.getString().equals(   "string   "))    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
234	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING  &&  n.getType()  ==  Token.DELPROP)  {  break;  }  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  if(n.getType()  ==  Token.STRING  &&  n.getType()  ==  Token.DELPROP)  {  break;  }  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	if(n.getType()  ==  Token.STRING  &&  n.getType()  ==  Token.DELPROP)  {  break;  }	  if(n.getType()    ==    Token.STRING    ||    n.getType()    ==    Token.DELPROP)    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
235	[BUG]  [BUGGY]  n.getType()  ==  Token.STRING  ||  n.getType()  ==  Token.DELPROP)  {  break;  }  [CE]  not  a  statement  [FE]                                ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  n.getType()  ==  Token.STRING  ||  n.getType()  ==  Token.DELPROP)  {  break;  }  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	n.getType()  ==  Token.STRING  ||  n.getType()  ==  Token.DELPROP)  {  break;  }	  if(n.getType()    ==    Token.STRING    ||    n.getType()    ==    Token.DELPROP)    {    break;    }    	non-compiled	[CE]  not  a  statement	10	None	replace
236	[BUG]  [BUGGY]  if(n.getType()!=  Token.STRING  &&  n.getType()  ==  Token.DELPROP)  {  break;  }  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  if(n.getType()!=  Token.STRING  &&  n.getType()  ==  Token.DELPROP)  {  break;  }  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	if(n.getType()!=  Token.STRING  &&  n.getType()  ==  Token.DELPROP)  {  break;  }	  if(n.getType()    ==    Token.STRING    ||    n.getType()    ==    Token.DELPROP)    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
237	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING  ||  n.getType()!=  Token.DELPROP)  {  break;  }  [CE]  illegal  start  of  expression  [FE]                                    ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  if(n.getType()  ==  Token.STRING  ||  n.getType()!=  Token.DELPROP)  {  break;  }  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	if(n.getType()  ==  Token.STRING  ||  n.getType()!=  Token.DELPROP)  {  break;  }	  if(n.getType()    ==    Token.STRING    ||    n.getType()    ==    Token.DELPROP)    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
238	[BUG]  [BUGGY]  if(n.getType()  ==  Token.DELPROP  ||  n.getType()  ==  Token.STRING)  {  break;  }  [CE]  illegal  start  of  expression  [FE]                                      ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  if(n.getType()  ==  Token.DELPROP  ||  n.getType()  ==  Token.STRING)  {  break;  }  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	if(n.getType()  ==  Token.DELPROP  ||  n.getType()  ==  Token.STRING)  {  break;  }	  if(n.getType()    ==    Token.STRING    ||    n.getType()    ==    Token.DELPROP)    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
239	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.DELPROP)  {  break;  }  [CE]  illegal  start  of  expression  [FE]                                        ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  if(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.DELPROP)  {  break;  }  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	if(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.DELPROP)  {  break;  }	  if(n.getType()    ==    Token.STRING    ||    n.getType()    ==    Token.DELPROP)    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
240	[BUG]  [BUGGY]  int  childCount  =  context.getChildCount()  -  1;  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  int  childCount  =  context.getChildCount()  -  1;  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	int  childCount  =  context.getChildCount()  -  1;	  int    childCount    =    n.getChildCount()    -    1;    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
241	[BUG]  [BUGGY]  int  childCount  =  first.getChildCount()  -  1;  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  int  childCount  =  first.getChildCount()  -  1;  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	int  childCount  =  first.getChildCount()  -  1;	  int    childCount    =    n.getChildCount()    -    1;    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
242	[BUG]  [BUGGY]  int  childCount  =  parent.getChildCount()  -  1;  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  int  childCount  =  parent.getChildCount()  -  1;  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	int  childCount  =  parent.getChildCount()  -  1;	  int    childCount    =    n.getChildCount()    -    1;    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
243	[BUG]  [BUGGY]  add(childCount,  context  ==  Context.START_OF_EXPR);  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  add(childCount,  context  ==  Context.START_OF_EXPR);  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	add(childCount,  context  ==  Context.START_OF_EXPR);	  add(childCount    ==    Context.START_OF_EXPR);    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
244	[BUG]  [BUGGY]  add(childCount,  Context.START_OF_EXPR);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  add(childCount,  Context.START_OF_EXPR);  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	add(childCount,  Context.START_OF_EXPR);	  add(childCount    ==    Context.START_OF_EXPR);    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
245	[BUG]  [BUGGY]  add(childCount  {  Context.START_OF_EXPR);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  add(childCount  {  Context.START_OF_EXPR);  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	add(childCount  {  Context.START_OF_EXPR);	  add(childCount    ==    Context.START_OF_EXPR);    	non-compiled	[CE]  	69	None	replace
246	[BUG]  [BUGGY]  add(childCount  >  Context.START_OF_EXPR);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  add(childCount  >  Context.START_OF_EXPR);  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	add(childCount  >  Context.START_OF_EXPR);	  add(childCount    ==    Context.START_OF_EXPR);    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
247	[BUG]  [BUGGY]  int  childCount  =  n.getFirstChild().getIndex()  /  2;  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  int  childCount  =  n.getFirstChild().getIndex()  /  2;  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	int  childCount  =  n.getFirstChild().getIndex()  /  2;	  int    childCount    =    n.getFirstChild().getIndex()    *    2;    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
248	[BUG]  [BUGGY]  int  childCount  =  n.getFirstChild().getIndex()  -  2;  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  int  childCount  =  n.getFirstChild().getIndex()  -  2;  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	int  childCount  =  n.getFirstChild().getIndex()  -  2;	  int    childCount    =    n.getFirstChild().getIndex()    *    2;    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
249	[BUG]  [BUGGY]  int  childCount  =  n.getFirstChild().getIndex()  *  2  +  1;  [CE]  illegal  start  of  expression  [FE]                                    ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  int  childCount  =  n.getFirstChild().getIndex()  *  2  +  1;  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	int  childCount  =  n.getFirstChild().getIndex()  *  2  +  1;	  int    childCount    =    n.getFirstChild().getIndex()    *    2;    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
250	[BUG]  [BUGGY]  int  childCount  =  n.getFirstChild().getCharIndex();  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  int  childCount  =  n.getFirstChild().getCharIndex();  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	int  childCount  =  n.getFirstChild().getCharIndex();	  int    childCount    =    n.getLastChild().getCharIndex();    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
251	[BUG]  [BUGGY]  int  childCount  =  n.getLastChild().getCharIndex()  +  1;  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  int  childCount  =  n.getLastChild().getCharIndex()  +  1;  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	int  childCount  =  n.getLastChild().getCharIndex()  +  1;	  int    childCount    =    n.getLastChild().getCharIndex();    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
252	[BUG]  [BUGGY]  int  childCount  =  n.getLastChild().getCharIndex()  -  1;  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  int  childCount  =  n.getLastChild().getCharIndex()  -  1;  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	int  childCount  =  n.getLastChild().getCharIndex()  -  1;	  int    childCount    =    n.getLastChild().getCharIndex();    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
253	[BUG]  [BUGGY]  int  childCount  =  n.getLastChild().getStringIndex();  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  int  childCount  =  n.getLastChild().getStringIndex();  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	int  childCount  =  n.getLastChild().getStringIndex();	  int    childCount    =    n.getLastChild().getCharIndex();    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
254	[BUG]  [BUGGY]  int  childCount  =  n.getLastChild().getLineno();  [CE]  illegal  start  of  expression  [FE]                                    ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  int  childCount  =  n.getLastChild().getLineno();  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	int  childCount  =  n.getLastChild().getLineno();	  int    childCount    =    n.getLastChild().getCharIndex();    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
255	[BUG]  [BUGGY]  Preconditions.checkState(childCount!=  0);  break;  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  Preconditions.checkState(childCount!=  0);  break;  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	Preconditions.checkState(childCount!=  0);  break;	  Preconditions.checkState(childCount    ==    0);    break;    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
256	[BUG]  [BUGGY]  Context.checkState(childCount  ==  0);  break;  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  Context.checkState(childCount  ==  0);  break;  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	Context.checkState(childCount  ==  0);  break;	  Preconditions.checkState(childCount    ==    0);    break;    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
257	[BUG]  [BUGGY]  int  childCount  =  n.getChildCount()  -  1;  break;  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  int  childCount  =  n.getChildCount()  -  1;  break;  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	int  childCount  =  n.getChildCount()  -  1;  break;	  int    childCount    =    n.getChildCount();    break;    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
258	[BUG]  [BUGGY]  int  childCount  =  n.getChildCount()  +  1;  break;  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  int  childCount  =  n.getChildCount()  +  1;  break;  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	int  childCount  =  n.getChildCount()  +  1;  break;	  int    childCount    =    n.getChildCount();    break;    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
259	[BUG]  [BUGGY]  int  childCount  =  n.getChildCount()  *  2;  break;  [CE]  illegal  start  of  expression  [FE]                                    ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  int  childCount  =  n.getChildCount()  *  2;  break;  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	int  childCount  =  n.getChildCount()  *  2;  break;	  int    childCount    =    n.getChildCount();    break;    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
260	[BUG]  [BUGGY]  int  childCount  =  n.getFirstChild();  break;  [CE]  illegal  start  of  expression  [FE]                                      ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  int  childCount  =  n.getFirstChild();  break;  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	int  childCount  =  n.getFirstChild();  break;	  int    childCount    =    n.getChildCount();    break;    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
261	[BUG]  [BUGGY]  int  childCount  =  n.getChildCount()  -  2;  break;  [CE]  illegal  start  of  expression  [FE]                                        ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  int  childCount  =  n.getChildCount()  -  2;  break;  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	int  childCount  =  n.getChildCount()  -  2;  break;	  int    childCount    =    n.getChildCount();    break;    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
262	[BUG]  [BUGGY]  int  childCount  =  n.getLastChild();  break;  [CE]  illegal  start  of  expression  [FE]                                          ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  int  childCount  =  n.getLastChild();  break;  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	int  childCount  =  n.getLastChild();  break;	  int    childCount    =    n.getChildCount();    break;    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
263	[BUG]  [BUGGY]  add(first,  context  ==  Context.START_OF_EXPR));  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  add(first,  context  ==  Context.START_OF_EXPR));  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	add(first,  context  ==  Context.START_OF_EXPR));	  add(context    ==    Context.START_OF_EXPR));    	non-compiled	[CE]  	27	None	replace
264	[BUG]  [BUGGY]  add(context!=  Context.START_OF_EXPR));  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  add(context!=  Context.START_OF_EXPR));  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	add(context!=  Context.START_OF_EXPR));	  add(context    ==    Context.START_OF_EXPR));    	non-compiled	[CE]  	27	None	replace
265	[BUG]  [BUGGY]  add(childCount  ==  Context.START_OF_EXPR));  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  add(childCount  ==  Context.START_OF_EXPR));  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	add(childCount  ==  Context.START_OF_EXPR));	  add(context    ==    Context.START_OF_EXPR));    	non-compiled	[CE]  	27	None	replace
266	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING  &&  n.getType()  ==  Token.OBJECTLIT)  {  break;  }  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  if(n.getType()  ==  Token.STRING  &&  n.getType()  ==  Token.OBJECTLIT)  {  break;  }  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	if(n.getType()  ==  Token.STRING  &&  n.getType()  ==  Token.OBJECTLIT)  {  break;  }	  if(n.getType()    ==    Token.STRING    ||    n.getType()    ==    Token.OBJECTLIT)    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
267	[BUG]  [BUGGY]  n.getType()  ==  Token.STRING  ||  n.getType()  ==  Token.OBJECTLIT)  {  break;  }  [CE]  not  a  statement  [FE]                          ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  n.getType()  ==  Token.STRING  ||  n.getType()  ==  Token.OBJECTLIT)  {  break;  }  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	n.getType()  ==  Token.STRING  ||  n.getType()  ==  Token.OBJECTLIT)  {  break;  }	  if(n.getType()    ==    Token.STRING    ||    n.getType()    ==    Token.OBJECTLIT)    {    break;    }    	non-compiled	[CE]  not  a  statement	7	None	replace
268	[BUG]  [BUGGY]  if(n.getType()!=  Token.STRING  &&  n.getType()  ==  Token.OBJECTLIT)  {  break;  }  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  if(n.getType()!=  Token.STRING  &&  n.getType()  ==  Token.OBJECTLIT)  {  break;  }  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	if(n.getType()!=  Token.STRING  &&  n.getType()  ==  Token.OBJECTLIT)  {  break;  }	  if(n.getType()    ==    Token.STRING    ||    n.getType()    ==    Token.OBJECTLIT)    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
269	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING  ||  n.getType()!=  Token.OBJECTLIT)  {  break;  }  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  if(n.getType()  ==  Token.STRING  ||  n.getType()!=  Token.OBJECTLIT)  {  break;  }  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	if(n.getType()  ==  Token.STRING  ||  n.getType()!=  Token.OBJECTLIT)  {  break;  }	  if(n.getType()    ==    Token.STRING    ||    n.getType()    ==    Token.OBJECTLIT)    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
270	[BUG]  [BUGGY]  n.setType(Token.STRING  ||  n.getType()  ==  Token.OBJECTLIT)  {  break;  }  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  n.setType(Token.STRING  ||  n.getType()  ==  Token.OBJECTLIT)  {  break;  }  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	n.setType(Token.STRING  ||  n.getType()  ==  Token.OBJECTLIT)  {  break;  }	  if(n.getType()    ==    Token.STRING    ||    n.getType()    ==    Token.OBJECTLIT)    {    break;    }    	non-compiled	[CE]  	7	None	replace
271	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.OBJECTLIT)  {  break;  }  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  if(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.OBJECTLIT)  {  break;  }  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	if(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.OBJECTLIT)  {  break;  }	  if(n.getType()    ==    Token.STRING    ||    n.getType()    ==    Token.OBJECTLIT)    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
272	[BUG]  [BUGGY]  int  childCount  =  n.getLastChild().getNext();  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  int  childCount  =  n.getLastChild().getNext();  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	int  childCount  =  n.getLastChild().getNext();	  int    childCount    =    n.getLastChild();    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
273	[BUG]  [BUGGY]  int  childCount  =  n.getLastChild()  +  1;  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  int  childCount  =  n.getLastChild()  +  1;  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	int  childCount  =  n.getLastChild()  +  1;	  int    childCount    =    n.getLastChild();    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
274	[BUG]  [BUGGY]  int  childCount  =  n.getLastChild().length;  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  int  childCount  =  n.getLastChild().length;  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	int  childCount  =  n.getLastChild().length;	  int    childCount    =    n.getLastChild();    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
275	[BUG]  [BUGGY]  last  =  n.getChildCount();  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  last  =  n.getChildCount();  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	last  =  n.getChildCount();	  last    =    n.getlastChild();    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
276	[BUG]  [BUGGY]  Preconditions.checkState(childCount  ==  2  -  childCount);  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  Preconditions.checkState(childCount  ==  2  -  childCount);  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	Preconditions.checkState(childCount  ==  2  -  childCount);	  Preconditions.checkState(childCount    ==    2);    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
277	[BUG]  [BUGGY]  Preconditions.checkState(childCount!=  2);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  Preconditions.checkState(childCount!=  2);  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	Preconditions.checkState(childCount!=  2);	  Preconditions.checkState(childCount    ==    2);    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
278	[BUG]  [BUGGY]  int  childCount  =(n.getChildCount()  <  1)?  0  :  n.getChildCount()  -  2;  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  int  childCount  =(n.getChildCount()  <  1)?  0  :  n.getChildCount()  -  2;  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	int  childCount  =(n.getChildCount()  <  1)?  0  :  n.getChildCount()  -  2;	  int    childCount    =    n.getChildCount()    -    2;    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
279	[BUG]  [BUGGY]  int  childCount  =(n.getChildCount()  <  2)?  0  :  n.getChildCount();  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  int  childCount  =(n.getChildCount()  <  2)?  0  :  n.getChildCount();  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	int  childCount  =(n.getChildCount()  <  2)?  0  :  n.getChildCount();	  int    childCount    =    n.getChildCount()    -    2;    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
280	[BUG]  [BUGGY]  int  childCount  =(n.getChildCount()  <  2)?  0  :  n.getChildCount()  -  2;  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  int  childCount  =(n.getChildCount()  <  2)?  0  :  n.getChildCount()  -  2;  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	int  childCount  =(n.getChildCount()  <  2)?  0  :  n.getChildCount()  -  2;	  int    childCount    =    n.getChildCount()    -    2;    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
281	[BUG]  [BUGGY]  int  childCount  =(n.getChildCount()  <  1)?  0  :  n.getChildCount();  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  int  childCount  =(n.getChildCount()  <  1)?  0  :  n.getChildCount();  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	int  childCount  =(n.getChildCount()  <  1)?  0  :  n.getChildCount();	  int    childCount    =    n.getChildCount()    -    2;    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
282	[BUG]  [BUGGY]  int  childCount  =(n.getChildCount()  <  2)?  1  :  n.getChildCount();  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  int  childCount  =(n.getChildCount()  <  2)?  1  :  n.getChildCount();  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	int  childCount  =(n.getChildCount()  <  2)?  1  :  n.getChildCount();	  int    childCount    =    n.getChildCount()    -    2;    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
283	[BUG]  [BUGGY]  int  childCount  =  n.getLastChild().getParent().getType();  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  int  childCount  =  n.getLastChild().getParent().getType();  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	int  childCount  =  n.getLastChild().getParent().getType();	  int    childCount    =    n.getFirstChild().getParent().getType();    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
284	[BUG]  [BUGGY]  int  childCount  =  n.getFirstChild().getParent().getString();  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  int  childCount  =  n.getFirstChild().getParent().getString();  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	int  childCount  =  n.getFirstChild().getParent().getString();	  int    childCount    =    n.getFirstChild().getParent().getType();    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
285	[BUG]  [BUGGY]  add(first,  outputCharsetEncoder);  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  add(first,  outputCharsetEncoder);  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	add(first,  outputCharsetEncoder);	  add(first);    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
286	[BUG]  [BUGGY]  add( "delete ");  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  add( "delete ");  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	add( "delete ");	  add(first);    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
287	[BUG]  [BUGGY]  add(n);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  add(n);  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	add(n);	  add(first);    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
288	[BUG]  [BUGGY]  add(last);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  add(last);  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	add(last);	  add(first);    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
289	[BUG]  [BUGGY]  add(first,  context);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  add(first,  context);  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	add(first,  context);	  add(first);    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
290	[BUG]  [BUGGY]  add(context);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  add(context);  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	add(context);	  add(first);    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
291	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING  &&  n.getType()  ==  Token.GETPROP)  {  break;  }  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  if(n.getType()  ==  Token.STRING  &&  n.getType()  ==  Token.GETPROP)  {  break;  }  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	if(n.getType()  ==  Token.STRING  &&  n.getType()  ==  Token.GETPROP)  {  break;  }	  if(n.getType()    ==    Token.STRING    ||    n.getType()    ==    Token.GETPROP)    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
292	[BUG]  [BUGGY]  if(n.getType()!=  Token.STRING  &&  n.getType()  ==  Token.GETPROP)  {  break;  }  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  if(n.getType()!=  Token.STRING  &&  n.getType()  ==  Token.GETPROP)  {  break;  }  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	if(n.getType()!=  Token.STRING  &&  n.getType()  ==  Token.GETPROP)  {  break;  }	  if(n.getType()    ==    Token.STRING    ||    n.getType()    ==    Token.GETPROP)    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
293	[BUG]  [BUGGY]  n.getType()  ==  Token.STRING  ||  n.getType()  ==  Token.GETPROP)  {  break;  }  [CE]  not  a  statement  [FE]                          ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  n.getType()  ==  Token.STRING  ||  n.getType()  ==  Token.GETPROP)  {  break;  }  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	n.getType()  ==  Token.STRING  ||  n.getType()  ==  Token.GETPROP)  {  break;  }	  if(n.getType()    ==    Token.STRING    ||    n.getType()    ==    Token.GETPROP)    {    break;    }    	non-compiled	[CE]  not  a  statement	67	None	replace
294	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING  ||  n.getType()!=  Token.GETPROP)  {  break;  }  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  if(n.getType()  ==  Token.STRING  ||  n.getType()!=  Token.GETPROP)  {  break;  }  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	if(n.getType()  ==  Token.STRING  ||  n.getType()!=  Token.GETPROP)  {  break;  }	  if(n.getType()    ==    Token.STRING    ||    n.getType()    ==    Token.GETPROP)    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
295	[BUG]  [BUGGY]  n.setType(Token.STRING  ||  n.getType()  ==  Token.GETPROP)  {  break;  }  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  n.setType(Token.STRING  ||  n.getType()  ==  Token.GETPROP)  {  break;  }  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	n.setType(Token.STRING  ||  n.getType()  ==  Token.GETPROP)  {  break;  }	  if(n.getType()    ==    Token.STRING    ||    n.getType()    ==    Token.GETPROP)    {    break;    }    	non-compiled	[CE]  	67	None	replace
296	[BUG]  [BUGGY]  if(n.getType()  ==  Token.GETPROP  ||  n.getType()  ==  Token.STRING)  {  break;  }  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  if(n.getType()  ==  Token.GETPROP  ||  n.getType()  ==  Token.STRING)  {  break;  }  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	if(n.getType()  ==  Token.GETPROP  ||  n.getType()  ==  Token.STRING)  {  break;  }	  if(n.getType()    ==    Token.STRING    ||    n.getType()    ==    Token.GETPROP)    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
297	[BUG]  [BUGGY]  int  childCount  =  n.getChildCount()  *  2  +  1;  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  int  childCount  =  n.getChildCount()  *  2  +  1;  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	int  childCount  =  n.getChildCount()  *  2  +  1;	  int    childCount    =    n.getChildCount()    *    2;    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
298	[BUG]  [BUGGY]  last  =  n.getFirstChild()  +  1;  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  last  =  n.getFirstChild()  +  1;  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	last  =  n.getFirstChild()  +  1;	  last    =    n.getLastChild()    +    1;    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
299	[BUG]  [BUGGY]  last  =  n.getLastChild()  +  2;  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  last  =  n.getLastChild()  +  2;  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	last  =  n.getLastChild()  +  2;	  last    =    n.getLastChild()    +    1;    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
300	[BUG]  [BUGGY]  last  =  n.getLastChild()  *  1;  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  last  =  n.getLastChild()  *  1;  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	last  =  n.getLastChild()  *  1;	  last    =    n.getLastChild()    +    1;    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
301	[BUG]  [BUGGY]  last  =  n.getLastChild().getNext()  +  1;  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  last  =  n.getLastChild().getNext()  +  1;  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	last  =  n.getLastChild().getNext()  +  1;	  last    =    n.getLastChild()    +    1;    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
302	[BUG]  [BUGGY]  last  =  context.getLastChild()  +  1;  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  last  =  context.getLastChild()  +  1;  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	last  =  context.getLastChild()  +  1;	  last    =    n.getLastChild()    +    1;    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
303	[BUG]  [BUGGY]  int  childCount  =  n.getChildCount();  add(first,  outputCharsetEncoder);  break;  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  int  childCount  =  n.getChildCount();  add(first,  outputCharsetEncoder);  break;  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	int  childCount  =  n.getChildCount();  add(first,  outputCharsetEncoder);  break;	  int    childCount    =    n.getChildCount();    add(first);    break;    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
304	[BUG]  [BUGGY]  add(first);  break;  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  add(first);  break;  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	add(first);  break;	  int    childCount    =    n.getChildCount();    add(first);    break;    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
305	[BUG]  [BUGGY]  int  childCount  =  n.getChildCount();  add(last,  first);  break;  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  int  childCount  =  n.getChildCount();  add(last,  first);  break;  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	int  childCount  =  n.getChildCount();  add(last,  first);  break;	  int    childCount    =    n.getChildCount();    add(first);    break;    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
306	[BUG]  [BUGGY]  int  childCount  =  n.getChildCount();  add(first,  context);  break;  [CE]  illegal  start  of  expression  [FE]                                    ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  int  childCount  =  n.getChildCount();  add(first,  context);  break;  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	int  childCount  =  n.getChildCount();  add(first,  context);  break;	  int    childCount    =    n.getChildCount();    add(first);    break;    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
307	[BUG]  [BUGGY]  int  childCount  =  n.getChildCount();  add(last);  break;  [CE]  illegal  start  of  expression  [FE]                                      ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  int  childCount  =  n.getChildCount();  add(last);  break;  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	int  childCount  =  n.getChildCount();  add(last);  break;	  int    childCount    =    n.getChildCount();    add(first);    break;    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
308	[BUG]  [BUGGY]  int  childCount  =  n.getFirstChild();  add(first);  break;  [CE]  illegal  start  of  expression  [FE]                                        ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  int  childCount  =  n.getFirstChild();  add(first);  break;  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	int  childCount  =  n.getFirstChild();  add(first);  break;	  int    childCount    =    n.getChildCount();    add(first);    break;    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
309	[BUG]  [BUGGY]  first  =  n.getFirstChild();  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  first  =  n.getFirstChild();  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	first  =  n.getFirstChild();	  last    =    n.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
310	[BUG]  [BUGGY]  last  =  n.getFirst();  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  last  =  n.getFirst();  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	last  =  n.getFirst();	  last    =    n.getNext();    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
311	[BUG]  [BUGGY]  last  =  n.getNextChild();  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  last  =  n.getNextChild();  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	last  =  n.getNextChild();	  last    =    n.getPreviousChild();    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
312	[BUG]  [BUGGY]  add(first,  context  >>  Context.START_OF_EXPR);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  add(first,  context  >>  Context.START_OF_EXPR);  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	add(first,  context  >>  Context.START_OF_EXPR);	  add(context!=    Context.START_OF_EXPR);    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
313	[BUG]  [BUGGY]  add(n,  context!=  Context.START_OF_EXPR);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  add(n,  context!=  Context.START_OF_EXPR);  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	add(n,  context!=  Context.START_OF_EXPR);	  add(context!=    Context.START_OF_EXPR);    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
314	[BUG]  [BUGGY]  int  childCount  =  n.getFirstChild().getLastChild().getEndIndex();  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  int  childCount  =  n.getFirstChild().getLastChild().getEndIndex();  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	int  childCount  =  n.getFirstChild().getLastChild().getEndIndex();	  int    childCount    =    n.getFirstChild().getEndIndex();    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
315	[BUG]  [BUGGY]  add(context  ==  Context.STATEMENT  ||  context  ==  BEFORE_DANGLING_ELSE);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  add(context  ==  Context.STATEMENT  ||  context  ==  BEFORE_DANGLING_ELSE);  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	add(context  ==  Context.STATEMENT  ||  context  ==  BEFORE_DANGLING_ELSE);	  add(context    ==    Context.STATEMENT);    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
316	[BUG]  [BUGGY]  int  childCount  =  n.getfirstChild().getNext().getString();  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  int  childCount  =  n.getfirstChild().getNext().getString();  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	int  childCount  =  n.getfirstChild().getNext().getString();	  int    childCount    =    n.getLastChild().getNext().getString();    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
317	[BUG]  [BUGGY]  int  childCount  =  n.getChildCount().getNext().getString();  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  int  childCount  =  n.getChildCount().getNext().getString();  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	int  childCount  =  n.getChildCount().getNext().getString();	  int    childCount    =    n.getLastChild().getNext().getString();    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
318	[BUG]  [BUGGY]  n.getType()  ==  Token.STRING  &&  n.getType()  ==  Token.NAME)  {  break;  }  [CE]  not  a  statement  [FE]                            ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  n.getType()  ==  Token.STRING  &&  n.getType()  ==  Token.NAME)  {  break;  }  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	n.getType()  ==  Token.STRING  &&  n.getType()  ==  Token.NAME)  {  break;  }	  if(n.getType()    ==    Token.STRING    ||    n.getType()    ==    Token.NAME)    {    break;    }    	non-compiled	[CE]  not  a  statement	9	None	replace
319	[BUG]  [BUGGY]  n.setType(Token.STRING)||  n.getType()  ==  Token.NAME)  {  break;  }  [CE]  not  a  statement  [FE]                              ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  n.setType(Token.STRING)||  n.getType()  ==  Token.NAME)  {  break;  }  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	n.setType(Token.STRING)||  n.getType()  ==  Token.NAME)  {  break;  }	  if(n.getType()    ==    Token.STRING    ||    n.getType()    ==    Token.NAME)    {    break;    }    	non-compiled	[CE]  not  a  statement	9	None	replace
320	[BUG]  [BUGGY]  add(first),  context  ==  Context.START_OF_EXPR));  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  add(first),  context  ==  Context.START_OF_EXPR));  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	add(first),  context  ==  Context.START_OF_EXPR));	  add(context    ==    Context.START_OF_EXPR));    	non-compiled	[CE]  	27	None	replace
321	[BUG]  [BUGGY]  add(context  ==  Context.START_OF_EXPR,  childCount));  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  add(context  ==  Context.START_OF_EXPR,  childCount));  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	add(context  ==  Context.START_OF_EXPR,  childCount));	  add(context    ==    Context.START_OF_EXPR));    	non-compiled	[CE]  	27	None	replace
322	[BUG]  [BUGGY]  add(first,  context  ==  Context.END_OF_EXPR));  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  add(first,  context  ==  Context.END_OF_EXPR));  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	add(first,  context  ==  Context.END_OF_EXPR));	  add(context    ==    Context.START_OF_EXPR));    	non-compiled	[CE]  	27	None	replace
323	[BUG]  [BUGGY]  add(first,  n  ==  Context.START_OF_EXPR);  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  add(first,  n  ==  Context.START_OF_EXPR);  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	add(first,  n  ==  Context.START_OF_EXPR);	  add(first,    context    ==    Context.START_OF_EXPR);    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
324	[BUG]  [BUGGY]  add(first,  Context.START_OF_EXPR);  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  add(first,  Context.START_OF_EXPR);  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	add(first,  Context.START_OF_EXPR);	  add(first,    context    ==    Context.START_OF_EXPR);    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
325	[BUG]  [BUGGY]  Integer  childCount  =  n.getFirstChild().getCharIndex();  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  Integer  childCount  =  n.getFirstChild().getCharIndex();  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	Integer  childCount  =  n.getFirstChild().getCharIndex();	  int    childCount    =    n.getLastChild().getCharIndex();    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
326	[BUG]  [BUGGY]  int  childCount  =  n.getNext().getParent().getType();  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  int  childCount  =  n.getNext().getParent().getType();  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	int  childCount  =  n.getNext().getParent().getType();	  int    childCount    =    n.getNext().getType();    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
327	[BUG]  [BUGGY]  int  childCount  =  n.getChildCount();  add( "delete ");  break;  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  int  childCount  =  n.getChildCount();  add( "delete ");  break;  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	int  childCount  =  n.getChildCount();  add( "delete ");  break;	  int    childCount    =    n.getChildCount();    add(first);    break;    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
328	[BUG]  [BUGGY]  int  childCount  =  n.getChildCount();  add(childCount);  break;  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  int  childCount  =  n.getChildCount();  add(childCount);  break;  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	int  childCount  =  n.getChildCount();  add(childCount);  break;	  int    childCount    =    n.getChildCount();    add(first);    break;    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
329	[BUG]  [BUGGY]  int  childCount  =  n.getChildCount()  +  2;  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  int  childCount  =  n.getChildCount()  +  2;  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	int  childCount  =  n.getChildCount()  +  2;	  int    childCount    =    n.getChildCount()    /    2;    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
330	[BUG]  [BUGGY]  int  childCount  =  n.getChildCount()  /  2  +  1;  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  int  childCount  =  n.getChildCount()  /  2  +  1;  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	int  childCount  =  n.getChildCount()  /  2  +  1;	  int    childCount    =    n.getChildCount()    /    2;    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
331	[BUG]  [BUGGY]  int  childCount  =  n.getChildCount()  *  4;  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  int  childCount  =  n.getChildCount()  *  4;  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	int  childCount  =  n.getChildCount()  *  4;	  int    childCount    =    n.getChildCount()    *    2;    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
332	[BUG]  [BUGGY]  Integer  childCount  =  n.getFirstChild();  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  Integer  childCount  =  n.getFirstChild();  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	Integer  childCount  =  n.getFirstChild();	  int    childCount    =    n.getLastChild();    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
333	[BUG]  [BUGGY]  int  childCount  =  n.getPreviousChild();  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  int  childCount  =  n.getPreviousChild();  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	int  childCount  =  n.getPreviousChild();	  int    childCount    =    n.getLastChild();    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
334	[BUG]  [BUGGY]  n.setType(Token.STRING  ||  n.getType()  ==  Token.START)  {  break;  }  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  n.setType(Token.STRING  ||  n.getType()  ==  Token.START)  {  break;  }  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	n.setType(Token.STRING  ||  n.getType()  ==  Token.START)  {  break;  }	  if(n.getType()    ==    Token.STRING    ||    n.getType()    ==    Token.START)    {    break;    }    	non-compiled	[CE]  	11	None	replace
335	[BUG]  [BUGGY]  n.getType()  ==  Token.STRING  &&  n.getType()  ==  Token.START)  {  break;  }  [CE]  not  a  statement  [FE]                                  ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  n.getType()  ==  Token.STRING  &&  n.getType()  ==  Token.START)  {  break;  }  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	n.getType()  ==  Token.STRING  &&  n.getType()  ==  Token.START)  {  break;  }	  if(n.getType()    ==    Token.STRING    ||    n.getType()    ==    Token.START)    {    break;    }    	non-compiled	[CE]  not  a  statement	11	None	replace
336	[BUG]  [BUGGY]  int  childCount  =(n.getChildCount()  ==  1)?  0  :  n.getChildCount()  +  1;  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  int  childCount  =(n.getChildCount()  ==  1)?  0  :  n.getChildCount()  +  1;  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	int  childCount  =(n.getChildCount()  ==  1)?  0  :  n.getChildCount()  +  1;	  int    childCount    =    n.getChildCount()    +    1;    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
337	[BUG]  [BUGGY]  int  childCount  =(n.getChildCount()  >=  1)?  0  :  n.getChildCount()  +  1;  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  int  childCount  =(n.getChildCount()  >=  1)?  0  :  n.getChildCount()  +  1;  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	int  childCount  =(n.getChildCount()  >=  1)?  0  :  n.getChildCount()  +  1;	  int    childCount    =    n.getChildCount()    +    1;    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
338	[BUG]  [BUGGY]  int  childCount  =(n.getChildCount()  ==  1)?  0  :  n.getChildCount();  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  int  childCount  =(n.getChildCount()  ==  1)?  0  :  n.getChildCount();  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	int  childCount  =(n.getChildCount()  ==  1)?  0  :  n.getChildCount();	  int    childCount    =    n.getChildCount()    +    1;    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
339	[BUG]  [BUGGY]  int  childCount  =(n.getChildCount()  ==  3)?  0  :  n.getChildCount()  +  1;  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  int  childCount  =(n.getChildCount()  ==  3)?  0  :  n.getChildCount()  +  1;  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	int  childCount  =(n.getChildCount()  ==  3)?  0  :  n.getChildCount()  +  1;	  int    childCount    =    n.getChildCount()    +    1;    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
340	[BUG]  [BUGGY]  int  childCount  =(n.getChildCount()  >=  1)?  0  :  n.getChildCount();  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  int  childCount  =(n.getChildCount()  >=  1)?  0  :  n.getChildCount();  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	int  childCount  =(n.getChildCount()  >=  1)?  0  :  n.getChildCount();	  int    childCount    =    n.getChildCount()    +    1;    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
341	[BUG]  [BUGGY]  last  =  n.getPreviousChild()  +  1;  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  last  =  n.getPreviousChild()  +  1;  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	last  =  n.getPreviousChild()  +  1;	  last    =    n.getLastChild()    +    1;    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
342	[BUG]  [BUGGY]  n.setType(Token.STRING  ||  n.getType()  ==  Token.DELPROP)  {  break;  }  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  n.setType(Token.STRING  ||  n.getType()  ==  Token.DELPROP)  {  break;  }  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	n.setType(Token.STRING  ||  n.getType()  ==  Token.DELPROP)  {  break;  }	  if(n.getType()    ==    Token.STRING    ||    n.getType()    ==    Token.DELPROP)    {    break;    }    	non-compiled	[CE]  	10	None	replace
343	[BUG]  [BUGGY]  n.getType()  ==  Token.STRING  &&  n.getType()  ==  Token.DELPROP)  {  break;  }  [CE]  not  a  statement  [FE]                                ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  n.getType()  ==  Token.STRING  &&  n.getType()  ==  Token.DELPROP)  {  break;  }  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	n.getType()  ==  Token.STRING  &&  n.getType()  ==  Token.DELPROP)  {  break;  }	  if(n.getType()    ==    Token.STRING    ||    n.getType()    ==    Token.DELPROP)    {    break;    }    	non-compiled	[CE]  not  a  statement	10	None	replace
344	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING  ||  n.getType()  ==  Token.DELETE)  {  break;  }  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  if(n.getType()  ==  Token.STRING  ||  n.getType()  ==  Token.DELETE)  {  break;  }  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	if(n.getType()  ==  Token.STRING  ||  n.getType()  ==  Token.DELETE)  {  break;  }	  if(n.getType()    ==    Token.STRING    ||    n.getType()    ==    Token.DELPROP)    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
345	[BUG]  [BUGGY]  int  childCount  =  n.getFirstChild().getNext().getLength();  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  int  childCount  =  n.getFirstChild().getNext().getLength();  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	int  childCount  =  n.getFirstChild().getNext().getLength();	  int    childCount    =    n.getFirstChild().getNext().getType();    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
346	[BUG]  [BUGGY]  Integer  childCount  =  n.getFirstChild().getLastChild().getString();  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  Integer  childCount  =  n.getFirstChild().getLastChild().getString();  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	Integer  childCount  =  n.getFirstChild().getLastChild().getString();	  Integer    childCount    =    n.getFirstChild().getString();    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
347	[BUG]  [BUGGY]  n.getType()  ==  Token.STRING  &&  n.getString().equals( "string "))  {  break;  }  [CE]  not  a  statement  [FE]                      ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  n.getType()  ==  Token.STRING  &&  n.getString().equals( "string "))  {  break;  }  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	n.getType()  ==  Token.STRING  &&  n.getString().equals( "string "))  {  break;  }	  if(n.getType()    ==    Token.STRING    ||    n.getString().equals(   "string   "))    {    break;    }    	non-compiled	[CE]  not  a  statement	84	None	replace
348	[BUG]  [BUGGY]  n.getType()  ==  Token.STRING  ||  n.getString().equals( "string "))  {  break;  }  [CE]  not  a  statement  [FE]                        ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  n.getType()  ==  Token.STRING  ||  n.getString().equals( "string "))  {  break;  }  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	n.getType()  ==  Token.STRING  ||  n.getString().equals( "string "))  {  break;  }	  if(n.getType()    ==    Token.STRING    ||    n.getString().equals(   "string   "))    {    break;    }    	non-compiled	[CE]  not  a  statement	84	None	replace
349	[BUG]  [BUGGY]  ||  n.getString().equals( "string "))  {  break;  }  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  ||  n.getString().equals( "string "))  {  break;  }  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	||  n.getString().equals( "string "))  {  break;  }	  if(n.getType()    ==    Token.STRING    ||    n.getString().equals(   "string   "))    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
350	[BUG]  [BUGGY]  int  childCount  =  n.getType().getFirstChild();  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  int  childCount  =  n.getType().getFirstChild();  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	int  childCount  =  n.getType().getFirstChild();	  int    childCount    =    n.getParent().getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
351	[BUG]  [BUGGY]  int  childCount  =  n.getLastChild().getFirstChild()  +  1;  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  int  childCount  =  n.getLastChild().getFirstChild()  +  1;  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	int  childCount  =  n.getLastChild().getFirstChild()  +  1;	  int    childCount    =    n.getParent().getLastChild()    +    1;    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
352	[BUG]  [BUGGY]  int  childCount  =  node.getChildCount()  -  1;  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  int  childCount  =  node.getChildCount()  -  1;  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	int  childCount  =  node.getChildCount()  -  1;	  int    childCount    =    n.getChildCount()    -    1;    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
353	[BUG]  [BUGGY]  Integer  childCount  =  n.getFirstChild().getIndexedChildCount();  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  Integer  childCount  =  n.getFirstChild().getIndexedChildCount();  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	Integer  childCount  =  n.getFirstChild().getIndexedChildCount();	  int    childCount    =    n.getLastChild().getIndexedChildCount();    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
354	[BUG]  [BUGGY]  int  childCount  =  n.getfirstChild().getIndexedChildCount();  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  int  childCount  =  n.getfirstChild().getIndexedChildCount();  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	int  childCount  =  n.getfirstChild().getIndexedChildCount();	  int    childCount    =    n.getLastChild().getIndexedChildCount();    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
355	[BUG]  [BUGGY]  n.getType()  ==  Token.STRING  &&  n.getType()  ==  Token.OBJECTLIT)  {  break;  }  [CE]  not  a  statement  [FE]                        ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  n.getType()  ==  Token.STRING  &&  n.getType()  ==  Token.OBJECTLIT)  {  break;  }  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	n.getType()  ==  Token.STRING  &&  n.getType()  ==  Token.OBJECTLIT)  {  break;  }	  if(n.getType()    ==    Token.STRING    ||    n.getType()    ==    Token.OBJECTLIT)    {    break;    }    	non-compiled	[CE]  not  a  statement	7	None	replace
356	[BUG]  [BUGGY]  n.setType(Token.STRING)||  n.getType()  ==  Token.OBJECTLIT)  {  break;  }  [CE]  not  a  statement  [FE]                          ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  n.setType(Token.STRING)||  n.getType()  ==  Token.OBJECTLIT)  {  break;  }  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	n.setType(Token.STRING)||  n.getType()  ==  Token.OBJECTLIT)  {  break;  }	  if(n.getType()    ==    Token.STRING    ||    n.getType()    ==    Token.OBJECTLIT)    {    break;    }    	non-compiled	[CE]  not  a  statement	7	None	replace
357	[BUG]  [BUGGY]  int  childCount  =(n.getChildCount()  >=  2)?  0  :  n.getChildCount();  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  int  childCount  =(n.getChildCount()  >=  2)?  0  :  n.getChildCount();  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	int  childCount  =(n.getChildCount()  >=  2)?  0  :  n.getChildCount();	  int    childCount    =    n.getChildCount()    -    2;    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
358	[BUG]  [BUGGY]  int  childCount  =(n.getChildCount()  ==  2)?  0  :  n.getChildCount();  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  int  childCount  =(n.getChildCount()  ==  2)?  0  :  n.getChildCount();  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	int  childCount  =(n.getChildCount()  ==  2)?  0  :  n.getChildCount();	  int    childCount    =    n.getChildCount()    -    2;    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
359	[BUG]  [BUGGY]  Integer  childCount  =  n.getFirstChild().getChildCount();  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  Integer  childCount  =  n.getFirstChild().getChildCount();  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	Integer  childCount  =  n.getFirstChild().getChildCount();	  int    childCount    =    n.getLastChild().getChildCount();    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
360	[BUG]  [BUGGY]  int  childCount  =  n.getfirstChild().getChildCount();  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  int  childCount  =  n.getfirstChild().getChildCount();  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	int  childCount  =  n.getfirstChild().getChildCount();	  int    childCount    =    n.getLastChild().getChildCount();    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
361	[BUG]  [BUGGY]  Preconditions.checkState(childCount  >=  0);  break;  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  Preconditions.checkState(childCount  >=  0);  break;  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	Preconditions.checkState(childCount  >=  0);  break;	  Preconditions.checkState(childCount    ==    0);    break;    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
362	[BUG]  [BUGGY]  add(n,  context  ==  Context.BEFORE_DANGLING_ELSE);  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  add(n,  context  ==  Context.BEFORE_DANGLING_ELSE);  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	add(n,  context  ==  Context.BEFORE_DANGLING_ELSE);	  add(context    ==    Context.BEFORE_DANGLING_ELSE);    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
363	[BUG]  [BUGGY]  last  =  first.getFirstChild();  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  last  =  first.getFirstChild();  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	last  =  first.getFirstChild();	  last    =    n.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
364	[BUG]  [BUGGY]  last  =  n.lastChild();  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  last  =  n.lastChild();  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	last  =  n.lastChild();	  last    =    n.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
365	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING  ||  n.getType()  ==  Token.GETPROP)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  if(n.getType()  ==  Token.STRING  ||  n.getType()  ==  Token.GETPROP)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	if(n.getType()  ==  Token.STRING  ||  n.getType()  ==  Token.GETPROP)  {  throw  new  IllegalStateException( " ");  }	  if(n.getType()    ==    Token.STRING)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
366	[BUG]  [BUGGY]  int  childCount  =  n.getFirstChild().getLastChild().getIndex();  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  int  childCount  =  n.getFirstChild().getLastChild().getIndex();  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	int  childCount  =  n.getFirstChild().getLastChild().getIndex();	  int    childCount    =    n.getFirstChild().getLastChild().getType();    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
367	[BUG]  [BUGGY]  int  childCount  =  n.getFirstChild().getFirstChild().getType();  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  int  childCount  =  n.getFirstChild().getFirstChild().getType();  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	int  childCount  =  n.getFirstChild().getFirstChild().getType();	  int    childCount    =    n.getFirstChild().getLastChild().getType();    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
368	[BUG]  [BUGGY]  int  childCount  =  n.getFirstChild().getLastChild().getLineno();  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  int  childCount  =  n.getFirstChild().getLastChild().getLineno();  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	int  childCount  =  n.getFirstChild().getLastChild().getLineno();	  int    childCount    =    n.getFirstChild().getLastChild().getType();    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
369	[BUG]  [BUGGY]  Integer  childCount  =  n.getFirstChild().getIndex();  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  Integer  childCount  =  n.getFirstChild().getIndex();  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	Integer  childCount  =  n.getFirstChild().getIndex();	  int    childCount    =    n.getLastChild().getIndex();    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
370	[BUG]  [BUGGY]  int  childCount  =  n.getFirstChild().getParent().getLastChild().getType();  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  int  childCount  =  n.getFirstChild().getParent().getLastChild().getType();  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	int  childCount  =  n.getFirstChild().getParent().getLastChild().getType();	  int    childCount    =    n.getFirstChild().getParent().getType();    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
371	[BUG]  [BUGGY]  int  childCount  =  n.getParent().getChildCount(context,  2);  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  int  childCount  =  n.getParent().getChildCount(context,  2);  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	int  childCount  =  n.getParent().getChildCount(context,  2);	  int    childCount    =    n.getParent().getChildCount(context);    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
372	[BUG]  [BUGGY]  int  childCount  =  n.getParent().getChildCount(context  +  1);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  int  childCount  =  n.getParent().getChildCount(context  +  1);  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	int  childCount  =  n.getParent().getChildCount(context  +  1);	  int    childCount    =    n.getParent().getChildCount(context);    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
373	[BUG]  [BUGGY]  n.getType()  ==  Token.STRING  &&  n.getType()  ==  Token.GETPROP)  {  break;  }  [CE]  not  a  statement  [FE]                      ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  n.getType()  ==  Token.STRING  &&  n.getType()  ==  Token.GETPROP)  {  break;  }  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	n.getType()  ==  Token.STRING  &&  n.getType()  ==  Token.GETPROP)  {  break;  }	  if(n.getType()    ==    Token.STRING    ||    n.getType()    ==    Token.GETPROP)    {    break;    }    	non-compiled	[CE]  not  a  statement	67	None	replace
374	[BUG]  [BUGGY]  n  =  n.getFirstChild();  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  n  =  n.getFirstChild();  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	n  =  n.getFirstChild();	  if(n.getType()    ==    Token.STRING    ||    n.getType()    ==    Token.GETPROP)    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
375	[BUG]  [BUGGY]  int  childCount  =  n.getFirstChild().getCharsCount();  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  int  childCount  =  n.getFirstChild().getCharsCount();  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	int  childCount  =  n.getFirstChild().getCharsCount();	  int    childCount    =    n.getFirstChild().getLength();    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
376	[BUG]  [BUGGY]  n.getType()  ==  Token.STRING  &&  n.getType()  ==  Token.CATCH)  {  break;  }  [CE]  not  a  statement  [FE]                          ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  n.getType()  ==  Token.STRING  &&  n.getType()  ==  Token.CATCH)  {  break;  }  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	n.getType()  ==  Token.STRING  &&  n.getType()  ==  Token.CATCH)  {  break;  }	  if(n.getType()    ==    Token.STRING    ||    n.getType()    ==    Token.CATCH)    {    break;    }    	non-compiled	[CE]  not  a  statement	86	None	replace
377	[BUG]  [BUGGY]  n.setType(Token.STRING)||  n.getType()  ==  Token.CATCH)  {  break;  }  [CE]  not  a  statement  [FE]                            ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  n.setType(Token.STRING)||  n.getType()  ==  Token.CATCH)  {  break;  }  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	n.setType(Token.STRING)||  n.getType()  ==  Token.CATCH)  {  break;  }	  if(n.getType()    ==    Token.STRING    ||    n.getType()    ==    Token.CATCH)    {    break;    }    	non-compiled	[CE]  not  a  statement	86	None	replace
378	[BUG]  [BUGGY]  int  childCount  =  n.getChildCount().toString();  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  int  childCount  =  n.getChildCount().toString();  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	int  childCount  =  n.getChildCount().toString();	  int    childCount    =    n.getChildCount().getString();    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
379	[BUG]  [BUGGY]  int  childCount  =  n.getChildCount().size();  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  int  childCount  =  n.getChildCount().size();  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	int  childCount  =  n.getChildCount().size();	  int    childCount    =    n.getChildCount().getString();    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
380	[BUG]  [BUGGY]  int  childCount  =  n.getChildCount().getIntValue();  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  int  childCount  =  n.getChildCount().getIntValue();  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	int  childCount  =  n.getChildCount().getIntValue();	  int    childCount    =    n.getChildCount().getString();    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
381	[BUG]  [BUGGY]  int  childCount  =  n.getChildCount().get(0);  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  int  childCount  =  n.getChildCount().get(0);  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	int  childCount  =  n.getChildCount().get(0);	  int    childCount    =    n.getChildCount().getString();    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
382	[BUG]  [BUGGY]  n.getType()  ==  Token.STRING  &&  n.getType()  ==  Token.FUNCTION)  {  break;  }  [CE]  not  a  statement  [FE]                          ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  n.getType()  ==  Token.STRING  &&  n.getType()  ==  Token.FUNCTION)  {  break;  }  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	n.getType()  ==  Token.STRING  &&  n.getType()  ==  Token.FUNCTION)  {  break;  }	  if(n.getType()    ==    Token.STRING    ||    n.getType()    ==    Token.FUNCTION)    {    break;    }    	non-compiled	[CE]  not  a  statement	8	None	replace
383	[BUG]  [BUGGY]  add(childCount  ==  Context.START_OF_EXPR,  outputCharsetEncoder);  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  add(childCount  ==  Context.START_OF_EXPR,  outputCharsetEncoder);  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	add(childCount  ==  Context.START_OF_EXPR,  outputCharsetEncoder);	  add(childCount    ==    Context.START_OF_EXPR);    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
384	[BUG]  [BUGGY]  add(childCount  >>  Context.START_OF_EXPR);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  add(childCount  >>  Context.START_OF_EXPR);  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	add(childCount  >>  Context.START_OF_EXPR);	  add(childCount    ==    Context.START_OF_EXPR);    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
385	[BUG]  [BUGGY]  int  childCount  =  n.getFirstChild().getFirstChild();  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  int  childCount  =  n.getFirstChild().getFirstChild();  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	int  childCount  =  n.getFirstChild().getFirstChild();	  int    childCount    =    n.getFirstChild().getLastChild();    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
386	[BUG]  [BUGGY]  int  childCount  =  n.getFirstChild().getFirstChild().getLastChild()  +  1;  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  int  childCount  =  n.getFirstChild().getFirstChild().getLastChild()  +  1;  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	int  childCount  =  n.getFirstChild().getFirstChild().getLastChild()  +  1;	  int    childCount    =    n.getFirstChild().getLastChild();    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
387	[BUG]  [BUGGY]  int  childCount  =  n.getFirstChild().getFirstChild().getNext();  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  int  childCount  =  n.getFirstChild().getFirstChild().getNext();  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	int  childCount  =  n.getFirstChild().getFirstChild().getNext();	  int    childCount    =    n.getFirstChild().getLastChild();    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
388	[BUG]  [BUGGY]  int  childCount  =  n.getLastChild().getIndex()  *  2;  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  int  childCount  =  n.getLastChild().getIndex()  *  2;  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	int  childCount  =  n.getLastChild().getIndex()  *  2;	  int    childCount    =    n.getFirstChild().getIndex()    *    2;    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
389	[BUG]  [BUGGY]  int  childCount  =  n.getFirstChild().getType()  ||  context  ==  Context.START_OF_ELSE;  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  int  childCount  =  n.getFirstChild().getType()  ||  context  ==  Context.START_OF_ELSE;  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	int  childCount  =  n.getFirstChild().getType()  ||  context  ==  Context.START_OF_ELSE;	  int    childCount    =    n.getFirstChild().getType()    ||    context    ==    Context.START_OF_EXPR;    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
390	[BUG]  [BUGGY]  last  =  n.replaceChild(n,  body);  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  last  =  n.replaceChild(n,  body);  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	last  =  n.replaceChild(n,  body);	  last    =    n.removeFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
391	[BUG]  [BUGGY]  last  =  n.replaceChild(n,  new  Node(Token.EMPTY));  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  last  =  n.replaceChild(n,  new  Node(Token.EMPTY));  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	last  =  n.replaceChild(n,  new  Node(Token.EMPTY));	  last    =    n.removeFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
392	[BUG]  [BUGGY]  add( ") ");  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  add( ") ");  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	add( ") ");	  add(first);    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
393	[BUG]  [BUGGY]  add( "remove ");  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  add( "remove ");  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	add( "remove ");	  add(first);    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
394	[BUG]  [BUGGY]  add( "delete ",  first);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  add( "delete ",  first);  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	add( "delete ",  first);	  add(first);    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
395	[BUG]  [BUGGY]  int  childCount  =  n.getFirstChild().getLastChild().getType();  break;  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  int  childCount  =  n.getFirstChild().getLastChild().getType();  break;  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	int  childCount  =  n.getFirstChild().getLastChild().getType();  break;	  int    childCount    =    n.getFirstChild().getType();    break;    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
396	[BUG]  [BUGGY]  int  childCount  =  n.getFirstChild().getParent().getType();  break;  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  int  childCount  =  n.getFirstChild().getParent().getType();  break;  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	int  childCount  =  n.getFirstChild().getParent().getType();  break;	  int    childCount    =    n.getFirstChild().getType();    break;    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
397	[BUG]  [BUGGY]  int  childCount  =  n.getParent().getFirstChild().getLastChild().getType();  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  int  childCount  =  n.getParent().getFirstChild().getLastChild().getType();  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	int  childCount  =  n.getParent().getFirstChild().getLastChild().getType();	  int    childCount    =    n.getParent().getFirstChild().getType();    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
398	[BUG]  [BUGGY]  last  =  n.getFirstSibling();  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  last  =  n.getFirstSibling();  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	last  =  n.getFirstSibling();	  last    =    n.getPreviousSibling();    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
399	[BUG]  [BUGGY]  int  childCount  =  n.getType().getChildCount();  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  int  childCount  =  n.getType().getChildCount();  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	int  childCount  =  n.getType().getChildCount();	  int    childCount    =    n.getParent().getChildCount()    -    1;    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
400	[BUG]  [BUGGY]  int  childCount  =  n.getName().getChildCount()  -  1;  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  int  childCount  =  n.getName().getChildCount()  -  1;  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	int  childCount  =  n.getName().getChildCount()  -  1;	  int    childCount    =    n.getParent().getChildCount()    -    1;    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
401	[BUG]  [BUGGY]  n.setType(Token.STRING  ||  n.getType()  ==  Token.EXPR_RESULT)  {  break;  }  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  n.setType(Token.STRING  ||  n.getType()  ==  Token.EXPR_RESULT)  {  break;  }  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	n.setType(Token.STRING  ||  n.getType()  ==  Token.EXPR_RESULT)  {  break;  }	  if(n.getType()    ==    Token.STRING    ||    n.getType()    ==    Token.EXPR_RESULT)    {    break;    }    	non-compiled	[CE]  	85	None	replace
402	[BUG]  [BUGGY]  n.setType(Token.STRING)||  n.getType()  ==  Token.EXPR_RESULT)  {  break;  }  [CE]  not  a  statement  [FE]                          ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  n.setType(Token.STRING)||  n.getType()  ==  Token.EXPR_RESULT)  {  break;  }  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	n.setType(Token.STRING)||  n.getType()  ==  Token.EXPR_RESULT)  {  break;  }	  if(n.getType()    ==    Token.STRING    ||    n.getType()    ==    Token.EXPR_RESULT)    {    break;    }    	non-compiled	[CE]  not  a  statement	85	None	replace
403	[BUG]  [BUGGY]  n.getType()  ==  Token.STRING  &&  n.getType()  ==  Token.EXPR_RESULT)  {  break;  }  [CE]  not  a  statement  [FE]                            ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  n.getType()  ==  Token.STRING  &&  n.getType()  ==  Token.EXPR_RESULT)  {  break;  }  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	n.getType()  ==  Token.STRING  &&  n.getType()  ==  Token.EXPR_RESULT)  {  break;  }	  if(n.getType()    ==    Token.STRING    ||    n.getType()    ==    Token.EXPR_RESULT)    {    break;    }    	non-compiled	[CE]  not  a  statement	85	None	replace
404	[BUG]  [BUGGY]  add(childCount,  outputCharsetEncoder);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  add(childCount,  outputCharsetEncoder);  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	add(childCount,  outputCharsetEncoder);	  add(n.getString(),    outputCharsetEncoder);    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
405	[BUG]  [BUGGY]  add(outputCharsetEncoder);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  add(outputCharsetEncoder);  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	add(outputCharsetEncoder);	  add(n.getString(),    outputCharsetEncoder);    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
406	[BUG]  [BUGGY]  add(childCount  ==  Context.TEXT_OF_EXPR);  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  add(childCount  ==  Context.TEXT_OF_EXPR);  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	add(childCount  ==  Context.TEXT_OF_EXPR);	  add(context    ==    Context.TEXT_OF_EXPR);    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
407	[BUG]  [BUGGY]  int  childCount  =  n.getFirstChild().getParent().getType()  +  1;  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  int  childCount  =  n.getFirstChild().getParent().getType()  +  1;  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	int  childCount  =  n.getFirstChild().getParent().getType()  +  1;	  int    childCount    =    n.getFirstChild().getType()    +    1;    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
408	[BUG]  [BUGGY]  int  childCount  =  n.getFirstChild().getString().getType()  +  1;  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  int  childCount  =  n.getFirstChild().getString().getType()  +  1;  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	int  childCount  =  n.getFirstChild().getString().getType()  +  1;	  int    childCount    =    n.getFirstChild().getType()    +    1;    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
409	[BUG]  [BUGGY]  int  childCount  =  n.getFirstChild().getFirstChild().getFirstChild();  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  int  childCount  =  n.getFirstChild().getFirstChild().getFirstChild();  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	int  childCount  =  n.getFirstChild().getFirstChild().getFirstChild();	  int    childCount    =    n.getFirstChild().getLastChild();    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
410	[BUG]  [BUGGY]  int  childCount  =  n.getFirstChild().getFirstChild().getString();  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  int  childCount  =  n.getFirstChild().getFirstChild().getString();  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	int  childCount  =  n.getFirstChild().getFirstChild().getString();	  int    childCount    =    n.getFirstChild().getLastChild();    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
411	[BUG]  [BUGGY]  int  childCount  =  n.getFirstChild().getString().getIndex()  -  1;  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  int  childCount  =  n.getFirstChild().getString().getIndex()  -  1;  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	int  childCount  =  n.getFirstChild().getString().getIndex()  -  1;	  int    childCount    =    n.getFirstChild().getIndex()    -    1;    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
412	[BUG]  [BUGGY]  int  childCount  =  n.getParent().getFirstChild().getChildCount()  -  1;  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  int  childCount  =  n.getParent().getFirstChild().getChildCount()  -  1;  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	int  childCount  =  n.getParent().getFirstChild().getChildCount()  -  1;	  int    childCount    =    n.getParent().getChildCount()    -    1;    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
413	[BUG]  [BUGGY]  add( "delete ",  n);  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  add( "delete ",  n);  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	add( "delete ",  n);	  add(first);    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
414	[BUG]  [BUGGY]  Preconditions.checkState(childCount  ==  4);  break;  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  Preconditions.checkState(childCount  ==  4);  break;  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	Preconditions.checkState(childCount  ==  4);  break;	  Preconditions.checkState(childCount    ==    1);    break;    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
415	[BUG]  [BUGGY]  Context.checkState(childCount  ==  0);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  Context.checkState(childCount  ==  0);  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	Context.checkState(childCount  ==  0);	  Preconditions.checkState(childCount!=    0);    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
416	[BUG]  [BUGGY]  if(childCount  ==  1)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  if(childCount  ==  1)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	if(childCount  ==  1)  {  throw  new  IllegalStateException( " ");  }	  if(n.getType()    ==    Token.STRING)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
417	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING  ||  n.getType()  ==  Token.CATCH)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  if(n.getType()  ==  Token.STRING  ||  n.getType()  ==  Token.CATCH)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	if(n.getType()  ==  Token.STRING  ||  n.getType()  ==  Token.CATCH)  {  throw  new  IllegalStateException( " ");  }	  if(n.getType()    ==    Token.STRING)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
418	[BUG]  [BUGGY]  int  childCount  =  n.getFirstChild().getParent().getLength();  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  int  childCount  =  n.getFirstChild().getParent().getLength();  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	int  childCount  =  n.getFirstChild().getParent().getLength();	  int    childCount    =    n.getFirstChild().getLength();    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
419	[BUG]  [BUGGY]  int  childCount  =  n.getChildCount();  add(first,  count);  break;  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  int  childCount  =  n.getChildCount();  add(first,  count);  break;  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	int  childCount  =  n.getChildCount();  add(first,  count);  break;	  int    childCount    =    n.getChildCount();    add(first);    break;    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
420	[BUG]  [BUGGY]  add(n.getNext(),  outputCharsetEncoder);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  add(n.getNext(),  outputCharsetEncoder);  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	add(n.getNext(),  outputCharsetEncoder);	  add(n.getString(),    outputCharsetEncoder);    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
421	[BUG]  [BUGGY]  add(jsString(n.getString(),  outputCharsetEncoder);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  add(jsString(n.getString(),  outputCharsetEncoder);  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	add(jsString(n.getString(),  outputCharsetEncoder);	  add(n.getString(),    outputCharsetEncoder);    	non-compiled	[CE]  	83	None	replace
422	[BUG]  [BUGGY]  add(n.getFirstChild()!=  Context.START_OF_EXPR);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  add(n.getFirstChild()!=  Context.START_OF_EXPR);  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	add(n.getFirstChild()!=  Context.START_OF_EXPR);	  add(context!=    Context.START_OF_EXPR);    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
423	[BUG]  [BUGGY]  int  childCount  =  n.getFirstChild().getLastChild().getIndexedChildCount();  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  int  childCount  =  n.getFirstChild().getLastChild().getIndexedChildCount();  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	int  childCount  =  n.getFirstChild().getLastChild().getIndexedChildCount();	  int    childCount    =    n.getFirstChild().getLastChild().getType();    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
424	[BUG]  [BUGGY]  if(n.getType()!=  Token.STRING  ||  n.getType()  ==  Token.GETPROP)  {  break;  }  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  if(n.getType()!=  Token.STRING  ||  n.getType()  ==  Token.GETPROP)  {  break;  }  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	if(n.getType()!=  Token.STRING  ||  n.getType()  ==  Token.GETPROP)  {  break;  }	  if(n.getType()    ==    Token.STRING    ||    n.getType()    ==    Token.GETPROP)    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
425	[BUG]  [BUGGY]  n.setType(Token.STRING)||  n.getType()  ==  Token.GETPROP)  {  break;  }  [CE]  not  a  statement  [FE]                        ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  n.setType(Token.STRING)||  n.getType()  ==  Token.GETPROP)  {  break;  }  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	n.setType(Token.STRING)||  n.getType()  ==  Token.GETPROP)  {  break;  }	  if(n.getType()    ==    Token.STRING    ||    n.getType()    ==    Token.GETPROP)    {    break;    }    	non-compiled	[CE]  not  a  statement	67	None	replace
426	[BUG]  [BUGGY]  if(n.getType()!=  Token.STRING  ||  n.getType()  ==  Token.START)  {  break;  }  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  if(n.getType()!=  Token.STRING  ||  n.getType()  ==  Token.START)  {  break;  }  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	if(n.getType()!=  Token.STRING  ||  n.getType()  ==  Token.START)  {  break;  }	  if(n.getType()    ==    Token.STRING    ||    n.getType()    ==    Token.START)    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
427	[BUG]  [BUGGY]  int  childCount  =  n.getFirstChild().getNext().getLastChild().getType();  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  int  childCount  =  n.getFirstChild().getNext().getLastChild().getType();  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	int  childCount  =  n.getFirstChild().getNext().getLastChild().getType();	  int    childCount    =    n.getFirstChild().getNext().getType();    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
428	[BUG]  [BUGGY]  int  childCount  =  n.getFirstChild().getNext().getIndex();  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  int  childCount  =  n.getFirstChild().getNext().getIndex();  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	int  childCount  =  n.getFirstChild().getNext().getIndex();	  int    childCount    =    n.getFirstChild().getNext().getType();    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
429	[BUG]  [BUGGY]  add(context  ==  Context.STATEMENT  ||  context  ==  Context.END_OF_EXPR);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  add(context  ==  Context.STATEMENT  ||  context  ==  Context.END_OF_EXPR);  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	add(context  ==  Context.STATEMENT  ||  context  ==  Context.END_OF_EXPR);	  add(context    ==    Context.STATEMENT);    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
430	[BUG]  [BUGGY]  if(n.getType()!=  Token.STRING  ||  n.getType()  ==  Token.NAME)  {  break;  }  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  if(n.getType()!=  Token.STRING  ||  n.getType()  ==  Token.NAME)  {  break;  }  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	if(n.getType()!=  Token.STRING  ||  n.getType()  ==  Token.NAME)  {  break;  }	  if(n.getType()    ==    Token.STRING    ||    n.getType()    ==    Token.NAME)    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
431	[BUG]  [BUGGY]  int  childCount  =  n.getFirstChild().getLineno();  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  int  childCount  =  n.getFirstChild().getLineno();  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	int  childCount  =  n.getFirstChild().getLineno();	  int    childCount    =    n.getFirstChild().getString();    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
432	[BUG]  [BUGGY]  int  childCount  =  n.getParent().getFirstChild();  break;  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  int  childCount  =  n.getParent().getFirstChild();  break;  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	int  childCount  =  n.getParent().getFirstChild();  break;	  int    childCount    =    n.getParent().getChildCount();    break;    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
433	[BUG]  [BUGGY]  int  childCount  =  n.getLastChild().getNext().getChars();  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  int  childCount  =  n.getLastChild().getNext().getChars();  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	int  childCount  =  n.getLastChild().getNext().getChars();	  int    childCount    =    n.getLastChild().getNext().getString();    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
434	[BUG]  [BUGGY]  add(context  ==  Context.BEFORE_DANGLING_ELSE));  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  add(context  ==  Context.BEFORE_DANGLING_ELSE));  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	add(context  ==  Context.BEFORE_DANGLING_ELSE));	  add(context    ==    Context.START_OF_EXPR));    	non-compiled	[CE]  	27	None	replace
435	[BUG]  [BUGGY]  add(context  ==  Context.TEXT_OF_EXPR));  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  add(context  ==  Context.TEXT_OF_EXPR));  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	add(context  ==  Context.TEXT_OF_EXPR));	  add(context    ==    Context.START_OF_EXPR));    	non-compiled	[CE]  	27	None	replace
436	[BUG]  [BUGGY]  Preconditions.checkState(childCount  >>  0);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  Preconditions.checkState(childCount  >>  0);  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	Preconditions.checkState(childCount  >>  0);	  Preconditions.checkState(childCount    >=    0);    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
437	[BUG]  [BUGGY]  Preconditions.checkState(childCount  >=  2);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  Preconditions.checkState(childCount  >=  2);  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	Preconditions.checkState(childCount  >=  2);	  Preconditions.checkState(childCount    >=    0);    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
438	[BUG]  [BUGGY]  int  childCount  =  n.getfirstChild().getString();  break;  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  int  childCount  =  n.getfirstChild().getString();  break;  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	int  childCount  =  n.getfirstChild().getString();  break;	  int    childCount    =    n.getLastChild().getString();    break;    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
439	[BUG]  [BUGGY]  add(first  ==  Context.START_OF_EXPR);  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  add(first  ==  Context.START_OF_EXPR);  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	add(first  ==  Context.START_OF_EXPR);	  add(childCount    ==    Context.START_OF_EXPR);    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
440	[BUG]  [BUGGY]  add(childCount  ==  Context.START_OF_EXPR,  children);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  add(childCount  ==  Context.START_OF_EXPR,  children);  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	add(childCount  ==  Context.START_OF_EXPR,  children);	  add(childCount    ==    Context.START_OF_EXPR);    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
441	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING  ||  n.getString().equals( ".string "))  {  break;  }  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  if(n.getType()  ==  Token.STRING  ||  n.getString().equals( ".string "))  {  break;  }  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	if(n.getType()  ==  Token.STRING  ||  n.getString().equals( ".string "))  {  break;  }	  if(n.getType()    ==    Token.STRING    ||    n.getString().equals(   "string   "))    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
442	[BUG]  [BUGGY]  int  childCount  =  n.getfirstChild().getIndex();  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  int  childCount  =  n.getfirstChild().getIndex();  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	int  childCount  =  n.getfirstChild().getIndex();	  int    childCount    =    n.getLastChild().getIndex();    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
443	[BUG]  [BUGGY]  last  =  this.context.getLastChild();  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  last  =  this.context.getLastChild();  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	last  =  this.context.getLastChild();	  last    =    context.getLastChild();    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
444	[BUG]  [BUGGY]  if(n.getType()!=  Token.STRING  ||  n.getType()  ==  Token.CATCH)  {  break;  }  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  if(n.getType()!=  Token.STRING  ||  n.getType()  ==  Token.CATCH)  {  break;  }  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	if(n.getType()!=  Token.STRING  ||  n.getType()  ==  Token.CATCH)  {  break;  }	  if(n.getType()    ==    Token.STRING    ||    n.getType()    ==    Token.CATCH)    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
445	[BUG]  [BUGGY]  int  childCount  =  n.getFirstChild().getString().getType();  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  int  childCount  =  n.getFirstChild().getString().getType();  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	int  childCount  =  n.getFirstChild().getString().getType();	  int    childCount    =    n.getFirstChild().getParent().getType();    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
446	[BUG]  [BUGGY]  int  childCount  =  n.getFirstChild().getParent().getIndexedChildCount();  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  int  childCount  =  n.getFirstChild().getParent().getIndexedChildCount();  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	int  childCount  =  n.getFirstChild().getParent().getIndexedChildCount();	  int    childCount    =    n.getFirstChild().getParent().getType();    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
447	[BUG]  [BUGGY]  int  childCount  =  n.removeFirstChild();  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  int  childCount  =  n.removeFirstChild();  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	int  childCount  =  n.removeFirstChild();	  int    childCount    =    n.getLastChild();    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
448	[BUG]  [BUGGY]  Preconditions.checkState(childCount  >  1);  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  Preconditions.checkState(childCount  >  1);  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	Preconditions.checkState(childCount  >  1);	  Preconditions.checkState(childCount    ==    1);    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
449	[BUG]  [BUGGY]  add(context  ==  Context.TEXT_OF_EXPR,  children);  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  add(context  ==  Context.TEXT_OF_EXPR,  children);  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	add(context  ==  Context.TEXT_OF_EXPR,  children);	  add(context    ==    Context.TEXT_OF_EXPR);    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
450	[BUG]  [BUGGY]  add(context  ==  Context.TEXT_OF_EXPR,  childCount);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  add(context  ==  Context.TEXT_OF_EXPR,  childCount);  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	add(context  ==  Context.TEXT_OF_EXPR,  childCount);	  add(context    ==    Context.TEXT_OF_EXPR);    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
451	[BUG]  [BUGGY]  Integer  childCount  =  n.getFirstChild().getLastChild();  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  Integer  childCount  =  n.getFirstChild().getLastChild();  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	Integer  childCount  =  n.getFirstChild().getLastChild();	  Integer    childCount    =    n.getFirstChild().getString();    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
452	[BUG]  [BUGGY]  Integer  childCount  =  n.getFirstChild().getNext();  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  Integer  childCount  =  n.getFirstChild().getNext();  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	Integer  childCount  =  n.getFirstChild().getNext();	  Integer    childCount    =    n.getFirstChild().getString();    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
453	[BUG]  [BUGGY]  if(n.getType()!=  Token.STRING  ||  n.getType()  ==  Token.EXPR_RESULT)  {  break;  }  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  if(n.getType()!=  Token.STRING  ||  n.getType()  ==  Token.EXPR_RESULT)  {  break;  }  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	if(n.getType()!=  Token.STRING  ||  n.getType()  ==  Token.EXPR_RESULT)  {  break;  }	  if(n.getType()    ==    Token.STRING    ||    n.getType()    ==    Token.EXPR_RESULT)    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
454	[BUG]  [BUGGY]  add(n,  context  ==  Context.STATEMENT);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  add(n,  context  ==  Context.STATEMENT);  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	add(n,  context  ==  Context.STATEMENT);	  add(n,    context    ==    Context.START_OF_EXPR);    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
455	[BUG]  [BUGGY]  int  childCount  =  n.getChildCount().length();  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  int  childCount  =  n.getChildCount().length();  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	int  childCount  =  n.getChildCount().length();	  int    childCount    =    n.getChildCount().getString();    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
456	[BUG]  [BUGGY]  int  childCount  =(n.getChildCount()  >  0)?  n.getChildCount()  :  n.getChildCount();  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  int  childCount  =(n.getChildCount()  >  0)?  n.getChildCount()  :  n.getChildCount();  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	int  childCount  =(n.getChildCount()  >  0)?  n.getChildCount()  :  n.getChildCount();	  int    childCount    =    n.getChildCount()    -    2;    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
457	[BUG]  [BUGGY]  int  childCount  =(n.getChildCount()  >  0)?  n.getChildCount()  -  2  :  0;  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  int  childCount  =(n.getChildCount()  >  0)?  n.getChildCount()  -  2  :  0;  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	int  childCount  =(n.getChildCount()  >  0)?  n.getChildCount()  -  2  :  0;	  int    childCount    =    n.getChildCount()    -    2;    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
458	[BUG]  [BUGGY]  if(n.getType()!=  Token.STRING  ||  n.getType()  ==  Token.FUNCTION)  {  break;  }  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  if(n.getType()!=  Token.STRING  ||  n.getType()  ==  Token.FUNCTION)  {  break;  }  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	if(n.getType()!=  Token.STRING  ||  n.getType()  ==  Token.FUNCTION)  {  break;  }	  if(n.getType()    ==    Token.STRING    ||    n.getType()    ==    Token.FUNCTION)    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
459	[BUG]  [BUGGY]  int  childCount  =  n.getfirstChild().getCharIndex();  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  int  childCount  =  n.getfirstChild().getCharIndex();  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	int  childCount  =  n.getfirstChild().getCharIndex();	  int    childCount    =    n.getLastChild().getCharIndex();    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
460	[BUG]  [BUGGY]  int  childCount  =  n.getFirstChild().getNext().getColumnCount();  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  int  childCount  =  n.getFirstChild().getNext().getColumnCount();  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	int  childCount  =  n.getFirstChild().getNext().getColumnCount();	  int    childCount    =    n.getFirstChild().getColumnCount();    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
461	[BUG]  [BUGGY]  int  childCount  =  n.getFirstChild().getStringCount();  [CE]  illegal  start  of  expression  [FE]                                    ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  int  childCount  =  n.getFirstChild().getStringCount();  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	int  childCount  =  n.getFirstChild().getStringCount();	  int    childCount    =    n.getFirstChild().getColumnCount();    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
462	[BUG]  [BUGGY]  int  childCount  =  n.getFirstChild().getParent().getColumnCount();  [CE]  illegal  start  of  expression  [FE]                                      ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  int  childCount  =  n.getFirstChild().getParent().getColumnCount();  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	int  childCount  =  n.getFirstChild().getParent().getColumnCount();	  int    childCount    =    n.getFirstChild().getColumnCount();    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
463	[BUG]  [BUGGY]  int  childCount  =  n.getParent().getFirstChild().getString();  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  int  childCount  =  n.getParent().getFirstChild().getString();  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	int  childCount  =  n.getParent().getFirstChild().getString();	  int    childCount    =    n.getParent().getFirstChild().getType();    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
464	[BUG]  [BUGGY]  int  childCount  =  n.getParent().getFirstChild().getNext().getType();  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  int  childCount  =  n.getParent().getFirstChild().getNext().getType();  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	int  childCount  =  n.getParent().getFirstChild().getNext().getType();	  int    childCount    =    n.getParent().getFirstChild().getType();    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
465	[BUG]  [BUGGY]  int  childCount  =(n.getChildCount()  <  1)?  0  :  n.getChildCount()  +  1;  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  int  childCount  =(n.getChildCount()  <  1)?  0  :  n.getChildCount()  +  1;  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	int  childCount  =(n.getChildCount()  <  1)?  0  :  n.getChildCount()  +  1;	  int    childCount    =    n.getChildCount()    +    1;    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
466	[BUG]  [BUGGY]  int  childCount  =(n.getChildCount()  <  1)?  1  :  n.getChildCount()  +  1;  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  int  childCount  =(n.getChildCount()  <  1)?  1  :  n.getChildCount()  +  1;  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	int  childCount  =(n.getChildCount()  <  1)?  1  :  n.getChildCount()  +  1;	  int    childCount    =    n.getChildCount()    +    1;    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
467	[BUG]  [BUGGY]  int  childCount  =(n.getChildCount()  <  1)?  1  :  n.getChildCount();  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  int  childCount  =(n.getChildCount()  <  1)?  1  :  n.getChildCount();  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	int  childCount  =(n.getChildCount()  <  1)?  1  :  n.getChildCount();	  int    childCount    =    n.getChildCount()    +    1;    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
468	[BUG]  [BUGGY]  int  childCount  =(n.getChildCount()  <  1)?  -1  :  n.getChildCount()  +  1;  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  int  childCount  =(n.getChildCount()  <  1)?  -1  :  n.getChildCount()  +  1;  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	int  childCount  =(n.getChildCount()  <  1)?  -1  :  n.getChildCount()  +  1;	  int    childCount    =    n.getChildCount()    +    1;    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
469	[BUG]  [BUGGY]  if(n.getType()!=  Token.STRING  ||  n.getType()  ==  Token.DELPROP)  {  break;  }  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  if(n.getType()!=  Token.STRING  ||  n.getType()  ==  Token.DELPROP)  {  break;  }  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	if(n.getType()!=  Token.STRING  ||  n.getType()  ==  Token.DELPROP)  {  break;  }	  if(n.getType()    ==    Token.STRING    ||    n.getType()    ==    Token.DELPROP)    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
470	[BUG]  [BUGGY]  int  childCount  =  n.getLastChild().getFirstChild().getType();  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  int  childCount  =  n.getLastChild().getFirstChild().getType();  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	int  childCount  =  n.getLastChild().getFirstChild().getType();	  int    childCount    =    n.getLastChild().getType();    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
471	[BUG]  [BUGGY]  int  childCount  =  n.getFirstChild().getString().getType()  ||  context  ==  Context.START_OF_EXPR;  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  int  childCount  =  n.getFirstChild().getString().getType()  ||  context  ==  Context.START_OF_EXPR;  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	int  childCount  =  n.getFirstChild().getString().getType()  ||  context  ==  Context.START_OF_EXPR;	  int    childCount    =    n.getFirstChild().getType()    ||    context    ==    Context.START_OF_EXPR;    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
472	[BUG]  [BUGGY]  int  childCount  =  n.getFirstChild().getType()  ||  context  ==  Context.STATEMENT;  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  int  childCount  =  n.getFirstChild().getType()  ||  context  ==  Context.STATEMENT;  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	int  childCount  =  n.getFirstChild().getType()  ||  context  ==  Context.STATEMENT;	  int    childCount    =    n.getFirstChild().getType()    ||    context    ==    Context.START_OF_EXPR;    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
473	[BUG]  [BUGGY]  add(context  ==  Context.BEFORE_DANGLING_ELSE  ||  context  ==  Context.START_OF_EXPR);  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  add(context  ==  Context.BEFORE_DANGLING_ELSE  ||  context  ==  Context.START_OF_EXPR);  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	add(context  ==  Context.BEFORE_DANGLING_ELSE  ||  context  ==  Context.START_OF_EXPR);	  add(context    ==    Context.BEFORE_DANGLING_ELSE);    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
474	[BUG]  [BUGGY]  add(context  ==  Context.BEFORE_DANGLING_ELSE,  n.getFirstChild());  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  add(context  ==  Context.BEFORE_DANGLING_ELSE,  n.getFirstChild());  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	add(context  ==  Context.BEFORE_DANGLING_ELSE,  n.getFirstChild());	  add(context    ==    Context.BEFORE_DANGLING_ELSE);    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
475	[BUG]  [BUGGY]  last  =  n.getfirstChild()  +  1;  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  last  =  n.getfirstChild()  +  1;  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	last  =  n.getfirstChild()  +  1;	  last    =    n.getLastChild()    +    1;    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
476	[BUG]  [BUGGY]  if(n.getType()!=  Token.STRING  ||  n.getType()  ==  Token.OBJECTLIT)  {  break;  }  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      break;  case  Token.STRING:  if  (childCount  !=  ((n.getParent()  !=  null  &&  n.getParent().getType()  ==  Token.OBJECTLIT)  ?  1  :  0))  {  throw  new  IllegalStateException(       "Unexpected  String  children:       "  +  n.getParent().toStringTree());  }  add(jsString(n.getString(),  outputCharsetEncoder));      [BUGGY]  if(n.getType()!=  Token.STRING  ||  n.getType()  ==  Token.OBJECTLIT)  {  break;  }  [BUGGY]        case  Token.DELPROP:  Preconditions.checkState(childCount  ==  1);  add(     "delete       ");  add(first);  break;  case  Token.OBJECTLIT:  {  boolean  needsParens  =  (context  ==  Context.START_OF_EXPR);  if  (needsParens)  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preserveBlock  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  key  name  o  opstr  regexp  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure73/src/com/google/javascript/jscomp/CodeGenerator.java	0.2581988897471611	635	635	1	replace	if(n.getType()!=  Token.STRING  ||  n.getType()  ==  Token.OBJECTLIT)  {  break;  }	  if(n.getType()    ==    Token.STRING    ||    n.getType()    ==    Token.OBJECTLIT)    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
