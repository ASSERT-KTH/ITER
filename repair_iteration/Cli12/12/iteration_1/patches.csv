bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Option  options  =  options.getOption(opt,  stopAtNonOption);  [CE]  'else'  without  'if'  [FE]        ComparisonFailure    [CONTEXT]    else  if  (arg.startsWith(   "-   "))  {  String  opt  =  Util.stripLeadingHyphens(arg);    [BUGGY]  Option  options  =  options.getOption(opt,  stopAtNonOption);  [BUGGY]    if  (options.hasOption(opt))    {  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	75	76	3	replace	Option  options  =  options.getOption(opt,  stopAtNonOption);	      Option    options    =    options.getOption(opt);    	non-compiled	[CE]  'else'  without  'if'	20	None	replace
2	[BUG]  [BUGGY]  Option  options  =  options.getOption(opt,  i);  [CE]  'else'  without  'if'  [FE]          ComparisonFailure    [CONTEXT]    else  if  (arg.startsWith(   "-   "))  {  String  opt  =  Util.stripLeadingHyphens(arg);    [BUGGY]  Option  options  =  options.getOption(opt,  i);  [BUGGY]    if  (options.hasOption(opt))    {  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	75	76	3	replace	Option  options  =  options.getOption(opt,  i);	      Option    options    =    options.getOption(opt);    	non-compiled	[CE]  'else'  without  'if'	20	None	replace
3	[BUG]  [BUGGY]  Option  options  =  options.getOption(opt,  null);  [CE]  'else'  without  'if'  [FE]            ComparisonFailure    [CONTEXT]    else  if  (arg.startsWith(   "-   "))  {  String  opt  =  Util.stripLeadingHyphens(arg);    [BUGGY]  Option  options  =  options.getOption(opt,  null);  [BUGGY]    if  (options.hasOption(opt))    {  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	75	76	3	replace	Option  options  =  options.getOption(opt,  null);	      Option    options    =    options.getOption(opt);    	non-compiled	[CE]  'else'  without  'if'	20	None	replace
4	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]    else  if  (arg.startsWith(   "-   "))  {  String  opt  =  Util.stripLeadingHyphens(arg);    [BUGGY]  if(options.hasOption(opt)&&  options.hasOption(opt))  {  [BUGGY]    {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	75	76	3	add	if(options.hasOption(opt)&&  options.hasOption(opt))  {	  if(options.hasOption(opt)||    options.hasOption(opt))    {    	compilable	  [FE]  ComparisonFailure  	4	3	replace
5	[BUG]  [BUGGY]  if(options.hasOption(opt)&&  options.hasOption(opt))  {  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]    else  if  (arg.startsWith(   "-   "))  {  String  opt  =  Util.stripLeadingHyphens(arg);    [BUGGY]  if(options.hasOption(opt)&&  options.hasOption(opt))  {  [BUGGY]    {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	75	76	3	replace	if(options.hasOption(opt)&&  options.hasOption(opt))  {	  if(options.hasOption(opt)||    options.hasOption(opt))    {    	compilable	  [FE]  ComparisonFailure  	4	3	replace
6	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]    else  if  (arg.startsWith(   "-   "))  {  String  opt  =  Util.stripLeadingHyphens(arg);    [BUGGY]  if(options.hasOption(arg)||  options.hasOption(opt))  {  [BUGGY]    {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	75	76	3	add	if(options.hasOption(arg)||  options.hasOption(opt))  {	  if(options.hasOption(opt)||    options.hasOption(opt))    {    	compilable	  [FE]  ComparisonFailure  	4	3	replace
7	[BUG]  [BUGGY]  if(options.hasOption(arg)||  options.hasOption(opt))  {  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]    else  if  (arg.startsWith(   "-   "))  {  String  opt  =  Util.stripLeadingHyphens(arg);    [BUGGY]  if(options.hasOption(arg)||  options.hasOption(opt))  {  [BUGGY]    {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	75	76	3	replace	if(options.hasOption(arg)||  options.hasOption(opt))  {	  if(options.hasOption(opt)||    options.hasOption(opt))    {    	compilable	  [FE]  ComparisonFailure  	4	3	replace
8	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]    else  if  (arg.startsWith(   "-   "))  {  String  opt  =  Util.stripLeadingHyphens(arg);    [BUGGY]  if(options.hasOption(opt)||  options.hasOption(arg))  {  [BUGGY]    {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	75	76	3	add	if(options.hasOption(opt)||  options.hasOption(arg))  {	  if(options.hasOption(opt)||    options.hasOption(opt))    {    	compilable	  [FE]  ComparisonFailure  	4	3	replace
9	[BUG]  [BUGGY]  if(options.hasOption(opt)||  options.hasOption(arg))  {  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]    else  if  (arg.startsWith(   "-   "))  {  String  opt  =  Util.stripLeadingHyphens(arg);    [BUGGY]  if(options.hasOption(opt)||  options.hasOption(arg))  {  [BUGGY]    {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	75	76	3	replace	if(options.hasOption(opt)||  options.hasOption(arg))  {	  if(options.hasOption(opt)||    options.hasOption(opt))    {    	compilable	  [FE]  ComparisonFailure  	4	3	replace
10	[BUG]  [BUGGY]  String[]  options  =  options.getOptions(opt,  i);  [CE]  'else'  without  'if'  [FE]              ComparisonFailure    [CONTEXT]    else  if  (arg.startsWith(   "-   "))  {  String  opt  =  Util.stripLeadingHyphens(arg);    [BUGGY]  String[]  options  =  options.getOptions(opt,  i);  [BUGGY]    if  (options.hasOption(opt))    {  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	75	76	3	replace	String[]  options  =  options.getOptions(opt,  i);	      String[]    options    =    options.getOptions(opt);    	non-compiled	[CE]  'else'  without  'if'	24	None	replace
11	[BUG]  [BUGGY]  String[]  options  =  options.getOptions(opt,  stopAtNonOption);  [CE]  'else'  without  'if'  [FE]                ComparisonFailure    [CONTEXT]    else  if  (arg.startsWith(   "-   "))  {  String  opt  =  Util.stripLeadingHyphens(arg);    [BUGGY]  String[]  options  =  options.getOptions(opt,  stopAtNonOption);  [BUGGY]    if  (options.hasOption(opt))    {  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	75	76	3	replace	String[]  options  =  options.getOptions(opt,  stopAtNonOption);	      String[]    options    =    options.getOptions(opt);    	non-compiled	[CE]  'else'  without  'if'	24	None	replace
12	[BUG]  [BUGGY]  String[]  options  =  options.getOptions(opt,  arguments);  [CE]  'else'  without  'if'  [FE]                  ComparisonFailure    [CONTEXT]    else  if  (arg.startsWith(   "-   "))  {  String  opt  =  Util.stripLeadingHyphens(arg);    [BUGGY]  String[]  options  =  options.getOptions(opt,  arguments);  [BUGGY]    if  (options.hasOption(opt))    {  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	75	76	3	replace	String[]  options  =  options.getOptions(opt,  arguments);	      String[]    options    =    options.getOptions(opt);    	non-compiled	[CE]  'else'  without  'if'	24	None	replace
13	[BUG]  [BUGGY]  if(opt.startsWith( "- "))  {  String[]  arguments  =  Util.stripLeadingHyphens(opt);  if(options.hasOption(arguments[i]))  {  tokens.add(arguments[i]);  }  [CE]  variable  arguments  is  already  defined  in  method  flatten(Options,String[],boolean)  [FE]                ComparisonFailure    [CONTEXT]    else  if  (arg.startsWith(   "-   "))  {  String  opt  =  Util.stripLeadingHyphens(arg);    [BUGGY]  if(opt.startsWith( "- "))  {  String[]  arguments  =  Util.stripLeadingHyphens(opt);  if(options.hasOption(arguments[i]))  {  tokens.add(arguments[i]);  }  [BUGGY]    {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	75	76	3	replace	if(opt.startsWith( "- "))  {  String[]  arguments  =  Util.stripLeadingHyphens(opt);  if(options.hasOption(arguments[i]))  {  tokens.add(arguments[i]);  }	      	non-compiled	[CE]  variable  arguments  is  already  defined  in  method  flatten(Options,String[],boolean)	9	None	replace
14	[BUG]  [BUGGY]  tokens.add(opt);  [CE]  'else'  without  'if'  [FE]                  ComparisonFailure    [CONTEXT]    else  if  (arg.startsWith(   "-   "))  {  String  opt  =  Util.stripLeadingHyphens(arg);    [BUGGY]  tokens.add(opt);  [BUGGY]    {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	75	76	3	replace	tokens.add(opt);	      	non-compiled	[CE]  'else'  without  'if'	9	None	replace
15	[BUG]  [BUGGY]  if(opt.startsWith( "- "))  {  String[]  arguments  =  Util.stripLeadingHyphens(opt);  for(int  i  =  0;  i  <  arguments.length;  ++i)  {  tokens.add(arguments[i]);  }  [CE]  variable  arguments  is  already  defined  in  method  flatten(Options,String[],boolean)  [FE]                    ComparisonFailure    [CONTEXT]    else  if  (arg.startsWith(   "-   "))  {  String  opt  =  Util.stripLeadingHyphens(arg);    [BUGGY]  if(opt.startsWith( "- "))  {  String[]  arguments  =  Util.stripLeadingHyphens(opt);  for(int  i  =  0;  i  <  arguments.length;  ++i)  {  tokens.add(arguments[i]);  }  [BUGGY]    {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	75	76	3	replace	if(opt.startsWith( "- "))  {  String[]  arguments  =  Util.stripLeadingHyphens(opt);  for(int  i  =  0;  i  <  arguments.length;  ++i)  {  tokens.add(arguments[i]);  }	      	non-compiled	[CE]  variable  arguments  is  already  defined  in  method  flatten(Options,String[],boolean)	9	None	replace
16	[BUG]  [BUGGY]  if(opt.startsWith( "- "))  {  String[]  arguments  =  Util.stripLeadingHyphens(opt);  for(int  i  =  0;  i  <  arguments.length;  ++i)  {  tokens.add(options[i]);  }  [CE]  variable  arguments  is  already  defined  in  method  flatten(Options,String[],boolean)  [FE]                      ComparisonFailure    [CONTEXT]    else  if  (arg.startsWith(   "-   "))  {  String  opt  =  Util.stripLeadingHyphens(arg);    [BUGGY]  if(opt.startsWith( "- "))  {  String[]  arguments  =  Util.stripLeadingHyphens(opt);  for(int  i  =  0;  i  <  arguments.length;  ++i)  {  tokens.add(options[i]);  }  [BUGGY]    {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	75	76	3	replace	if(opt.startsWith( "- "))  {  String[]  arguments  =  Util.stripLeadingHyphens(opt);  for(int  i  =  0;  i  <  arguments.length;  ++i)  {  tokens.add(options[i]);  }	      	non-compiled	[CE]  variable  arguments  is  already  defined  in  method  flatten(Options,String[],boolean)	9	None	replace
17	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    else  if  (arg.startsWith(   "-   "))  {  String  opt  =  Util.stripLeadingHyphens(arg);    [BUGGY]      if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  opt  =  Util.stripLeadingHyphens(opt);  }  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  opt  =  Util.stripLeadingHyphens(opt);  }  [BUGGY]    if  (options.hasOption(opt))    {  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	75	76	3	add	        if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    opt    =    Util.stripLeadingHyphens(opt);    }    if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  opt  =  Util.stripLeadingHyphens(opt);  }	  	compilable	  [FE]  AssertionFailedError  	12	11	add
18	[BUG]  [BUGGY]      if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  opt  =  Util.stripLeadingHyphens(opt);  }  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  opt  =  Util.stripLeadingHyphens(opt);  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    else  if  (arg.startsWith(   "-   "))  {  String  opt  =  Util.stripLeadingHyphens(arg);    [BUGGY]      if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  opt  =  Util.stripLeadingHyphens(opt);  }  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  opt  =  Util.stripLeadingHyphens(opt);  }  [BUGGY]    if  (options.hasOption(opt))    {  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	75	76	3	replace	        if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    opt    =    Util.stripLeadingHyphens(opt);    }    if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  opt  =  Util.stripLeadingHyphens(opt);  }	  	compilable	  [FE]  AssertionFailedError  	12	11	add
19	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    else  if  (arg.startsWith(   "-   "))  {  String  opt  =  Util.stripLeadingHyphens(arg);    [BUGGY]      if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  opt  =  Util.stripLeadingHyphens(opt);  }  else  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  opt  =  Util.stripLeadingHyphens(opt);  }  [BUGGY]    if  (options.hasOption(opt))    {  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	75	76	3	add	        if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    opt    =    Util.stripLeadingHyphens(opt);    }    else  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  opt  =  Util.stripLeadingHyphens(opt);  }	  	compilable	  [FE]  AssertionFailedError  	12	11	add
20	[BUG]  [BUGGY]      if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  opt  =  Util.stripLeadingHyphens(opt);  }  else  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  opt  =  Util.stripLeadingHyphens(opt);  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    else  if  (arg.startsWith(   "-   "))  {  String  opt  =  Util.stripLeadingHyphens(arg);    [BUGGY]      if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  opt  =  Util.stripLeadingHyphens(opt);  }  else  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  opt  =  Util.stripLeadingHyphens(opt);  }  [BUGGY]    if  (options.hasOption(opt))    {  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	75	76	3	replace	        if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    opt    =    Util.stripLeadingHyphens(opt);    }    else  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  opt  =  Util.stripLeadingHyphens(opt);  }	  	compilable	  [FE]  AssertionFailedError  	12	11	add
21	[BUG]  [BUGGY]      if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  opt  =  Util.stripLeadingHyphens(opt);  }  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  option  =  Util.stripLeadingHyphens(opt);  }  [CE]  cannot  find  symbol  option  [FE]        AssertionFailedError    [CONTEXT]    else  if  (arg.startsWith(   "-   "))  {  String  opt  =  Util.stripLeadingHyphens(arg);    [BUGGY]      if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  opt  =  Util.stripLeadingHyphens(opt);  }  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  option  =  Util.stripLeadingHyphens(opt);  }  [BUGGY]    if  (options.hasOption(opt))    {  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	75	76	3	replace	        if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    opt    =    Util.stripLeadingHyphens(opt);    }    if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  option  =  Util.stripLeadingHyphens(opt);  }	  	non-compiled	[CE]  cannot  find  symbol  option	12	None	add
22	[BUG]  [BUGGY]      if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  opt  =  Util.stripLeadingHyphens(opt);  }  ||  options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  opt  =  Util.stripLeadingHyphens(opt);  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    else  if  (arg.startsWith(   "-   "))  {  String  opt  =  Util.stripLeadingHyphens(arg);    [BUGGY]      if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  opt  =  Util.stripLeadingHyphens(opt);  }  ||  options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  opt  =  Util.stripLeadingHyphens(opt);  }  [BUGGY]    if  (options.hasOption(opt))    {  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	75	76	3	replace	        if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    opt    =    Util.stripLeadingHyphens(opt);    }    ||  options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  opt  =  Util.stripLeadingHyphens(opt);  }	  	non-compiled	[CE]  illegal  start  of  expression	12	None	add
23	[BUG]  [BUGGY]  options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]    else  if  (arg.startsWith(   "-   "))  {  String  opt  =  Util.stripLeadingHyphens(arg);    [BUGGY]  options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  [BUGGY]    if  (options.hasOption(opt))    {  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	75	76	3	replace	options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }	      if(opt!=    null)    {    if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    }    	non-compiled	[CE]  ';'  expected	28	None	replace
24	[BUG]  [BUGGY]  parent  ==  null  &&  option.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  [CE]  not  a  statement  [FE]              ComparisonFailure    [CONTEXT]    else  if  (arg.startsWith(   "-   "))  {  String  opt  =  Util.stripLeadingHyphens(arg);    [BUGGY]  parent  ==  null  &&  option.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  [BUGGY]    if  (options.hasOption(opt))    {  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	75	76	3	replace	parent  ==  null  &&  option.hasOption(opt))  {  tokens.add(arg.substring(0,  2));	      if(opt!=    null)    {    if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    }    	non-compiled	[CE]  not  a  statement	28	None	replace
25	[BUG]  [BUGGY]  tokens.add(arg.substring(0,  2));  [CE]  'else'  without  'if'  [FE]                ComparisonFailure    [CONTEXT]    else  if  (arg.startsWith(   "-   "))  {  String  opt  =  Util.stripLeadingHyphens(arg);    [BUGGY]  tokens.add(arg.substring(0,  2));  [BUGGY]    if  (options.hasOption(opt))    {  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	75	76	3	replace	tokens.add(arg.substring(0,  2));	      if(opt!=    null)    {    if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    }    	non-compiled	[CE]  'else'  without  'if'	28	None	replace
26	[BUG]  [BUGGY]  parent  ==  null  &&  option.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  [CE]  not  a  statement  [FE]                  ComparisonFailure    [CONTEXT]    else  if  (arg.startsWith(   "-   "))  {  String  opt  =  Util.stripLeadingHyphens(arg);    [BUGGY]  parent  ==  null  &&  option.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  [BUGGY]    if  (options.hasOption(opt))    {  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	75	76	3	replace	parent  ==  null  &&  option.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }	      if(opt!=    null)    {    if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    }    	non-compiled	[CE]  not  a  statement	28	None	replace
27	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    else  if  (arg.startsWith(   "-   "))  {  String  opt  =  Util.stripLeadingHyphens(arg);    [BUGGY]      if(opt!=  null)  {  tokens.add(opt);  }  if(opt!=  null)  {  tokens.add(opt);  }  [BUGGY]    if  (options.hasOption(opt))    {  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	75	76	3	add	        if(opt!=    null)    {    tokens.add(opt);    }    if(opt!=  null)  {  tokens.add(opt);  }	  	compilable	  [FE]  AssertionFailedError  	21	11	add
28	[BUG]  [BUGGY]      if(opt!=  null)  {  tokens.add(opt);  }  if(opt!=  null)  {  tokens.add(opt);  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    else  if  (arg.startsWith(   "-   "))  {  String  opt  =  Util.stripLeadingHyphens(arg);    [BUGGY]      if(opt!=  null)  {  tokens.add(opt);  }  if(opt!=  null)  {  tokens.add(opt);  }  [BUGGY]    if  (options.hasOption(opt))    {  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	75	76	3	replace	        if(opt!=    null)    {    tokens.add(opt);    }    if(opt!=  null)  {  tokens.add(opt);  }	  	compilable	  [FE]  AssertionFailedError  	21	11	add
29	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    else  if  (arg.startsWith(   "-   "))  {  String  opt  =  Util.stripLeadingHyphens(arg);    [BUGGY]      if(opt!=  null)  {  tokens.add(opt);  }  if(opt  ==  null)  {  tokens.add(opt);  }  [BUGGY]    if  (options.hasOption(opt))    {  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	75	76	3	add	        if(opt!=    null)    {    tokens.add(opt);    }    if(opt  ==  null)  {  tokens.add(opt);  }	  	compilable	  [FE]  AssertionFailedError  	21	11	add
30	[BUG]  [BUGGY]      if(opt!=  null)  {  tokens.add(opt);  }  if(opt  ==  null)  {  tokens.add(opt);  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    else  if  (arg.startsWith(   "-   "))  {  String  opt  =  Util.stripLeadingHyphens(arg);    [BUGGY]      if(opt!=  null)  {  tokens.add(opt);  }  if(opt  ==  null)  {  tokens.add(opt);  }  [BUGGY]    if  (options.hasOption(opt))    {  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	75	76	3	replace	        if(opt!=    null)    {    tokens.add(opt);    }    if(opt  ==  null)  {  tokens.add(opt);  }	  	compilable	  [FE]  AssertionFailedError  	21	11	add
31	[BUG]  [BUGGY]      if(opt!=  null)  {  tokens.add(opt);  }  if(opt  >=  null)  {  tokens.add(opt);  }  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]        AssertionFailedError    [CONTEXT]    else  if  (arg.startsWith(   "-   "))  {  String  opt  =  Util.stripLeadingHyphens(arg);    [BUGGY]      if(opt!=  null)  {  tokens.add(opt);  }  if(opt  >=  null)  {  tokens.add(opt);  }  [BUGGY]    if  (options.hasOption(opt))    {  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	75	76	3	replace	        if(opt!=    null)    {    tokens.add(opt);    }    if(opt  >=  null)  {  tokens.add(opt);  }	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	21	None	add
32	[BUG]  [BUGGY]      if(opt!=  null)  {  tokens.add(opt);  }  if(opt  >>  null)  {  tokens.add(opt);  }  [CE]  bad  operand  types  for  binary  operator  '>>'  [FE]          AssertionFailedError    [CONTEXT]    else  if  (arg.startsWith(   "-   "))  {  String  opt  =  Util.stripLeadingHyphens(arg);    [BUGGY]      if(opt!=  null)  {  tokens.add(opt);  }  if(opt  >>  null)  {  tokens.add(opt);  }  [BUGGY]    if  (options.hasOption(opt))    {  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	75	76	3	replace	        if(opt!=    null)    {    tokens.add(opt);    }    if(opt  >>  null)  {  tokens.add(opt);  }	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>>'	21	None	add
33	[BUG]  [BUGGY]  tokens.add(arg);  [CE]  'else'  without  'if'  [FE]    MissingArgumentException    [CONTEXT]    else  if  (arg.startsWith(   "-   "))  {  String  opt  =  Util.stripLeadingHyphens(arg);    [BUGGY]  tokens.add(arg);  [BUGGY]    if  (options.hasOption(opt))    {  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	75	76	3	replace	tokens.add(arg);	      if(opt!=    null)    {    tokens.add(arg);    }    	non-compiled	[CE]  'else'  without  'if'	30	None	replace
34	[BUG]  [BUGGY]  options.hasOption(opt))  {  tokens.add(arg);  }  [CE]  ';'  expected  [FE]      MissingArgumentException    [CONTEXT]    else  if  (arg.startsWith(   "-   "))  {  String  opt  =  Util.stripLeadingHyphens(arg);    [BUGGY]  options.hasOption(opt))  {  tokens.add(arg);  }  [BUGGY]    if  (options.hasOption(opt))    {  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	75	76	3	replace	options.hasOption(opt))  {  tokens.add(arg);  }	      if(opt!=    null)    {    tokens.add(arg);    }    	non-compiled	[CE]  ';'  expected	30	None	replace
35	[BUG]  [BUGGY]  options.hasOption(opt))  {  tokens.add(arg;  }  [CE]  ';'  expected  [FE]        MissingArgumentException    [CONTEXT]    else  if  (arg.startsWith(   "-   "))  {  String  opt  =  Util.stripLeadingHyphens(arg);    [BUGGY]  options.hasOption(opt))  {  tokens.add(arg;  }  [BUGGY]    if  (options.hasOption(opt))    {  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	75	76	3	replace	options.hasOption(opt))  {  tokens.add(arg;  }	      if(opt!=    null)    {    tokens.add(arg);    }    	non-compiled	[CE]  ';'  expected	30	None	replace
36	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    else  if  (arg.startsWith(   "-   "))  {  String  opt  =  Util.stripLeadingHyphens(arg);    [BUGGY]      if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  [BUGGY]    if  (options.hasOption(opt))    {  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	75	76	3	add	        if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    }    if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }	  	compilable	  [FE]  AssertionFailedError  	10	11	add
37	[BUG]  [BUGGY]      if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    else  if  (arg.startsWith(   "-   "))  {  String  opt  =  Util.stripLeadingHyphens(arg);    [BUGGY]      if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  [BUGGY]    if  (options.hasOption(opt))    {  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	75	76	3	replace	        if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    }    if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }	  	compilable	  [FE]  AssertionFailedError  	10	11	add
38	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    else  if  (arg.startsWith(   "-   "))  {  String  opt  =  Util.stripLeadingHyphens(arg);    [BUGGY]      if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  else  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  [BUGGY]    if  (options.hasOption(opt))    {  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	75	76	3	add	        if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    }    else  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }	  	compilable	  [FE]  AssertionFailedError  	10	11	add
39	[BUG]  [BUGGY]      if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  else  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    else  if  (arg.startsWith(   "-   "))  {  String  opt  =  Util.stripLeadingHyphens(arg);    [BUGGY]      if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  else  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  [BUGGY]    if  (options.hasOption(opt))    {  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	75	76	3	replace	        if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    }    else  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }	  	compilable	  [FE]  AssertionFailedError  	10	11	add
40	[BUG]  [BUGGY]      if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  If(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]    else  if  (arg.startsWith(   "-   "))  {  String  opt  =  Util.stripLeadingHyphens(arg);    [BUGGY]      if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  If(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  [BUGGY]    if  (options.hasOption(opt))    {  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	75	76	3	replace	        if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    }    If(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }	  	non-compiled	[CE]  ';'  expected	10	None	add
41	[BUG]  [BUGGY]      if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  else  {  [CE]  'else'  without  'if'  [FE]          AssertionFailedError    [CONTEXT]    else  if  (arg.startsWith(   "-   "))  {  String  opt  =  Util.stripLeadingHyphens(arg);    [BUGGY]      if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  else  {  [BUGGY]    if  (options.hasOption(opt))    {  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	75	76	3	replace	        if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    }    if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  else  {	  	non-compiled	[CE]  'else'  without  'if'	10	None	add
42	[BUG]  [BUGGY]  if(options.hasOption(opt)||  options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }  [CE]  'else'  without  'if'  [FE]          ComparisonFailure    [CONTEXT]    else  if  (arg.startsWith(   "-   "))  {  String  opt  =  Util.stripLeadingHyphens(arg);    [BUGGY]  if(options.hasOption(opt)||  options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }  [BUGGY]    if  (options.hasOption(opt))    {  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	75	76	3	replace	if(options.hasOption(opt)||  options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }	      if(opt!=    null)    {    if(options.hasOption(opt))    {    tokens.add(arg);    }    	non-compiled	[CE]  'else'  without  'if'	27	None	replace
43	[BUG]  [BUGGY]  if(options.hasOption(opt)&&  options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }  [CE]  'else'  without  'if'  [FE]            ComparisonFailure    [CONTEXT]    else  if  (arg.startsWith(   "-   "))  {  String  opt  =  Util.stripLeadingHyphens(arg);    [BUGGY]  if(options.hasOption(opt)&&  options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }  [BUGGY]    if  (options.hasOption(opt))    {  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	75	76	3	replace	if(options.hasOption(opt)&&  options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }	      if(opt!=    null)    {    if(options.hasOption(opt))    {    tokens.add(arg);    }    	non-compiled	[CE]  'else'  without  'if'	27	None	replace
44	[BUG]  [BUGGY]  if(options.hasOption(opt)&&  option.startsWith( "- "))  {  [CE]  cannot  find  symbol  option  [FE]    AssertionFailedError    [CONTEXT]    else  if  (arg.startsWith(   "-   "))  {  String  opt  =  Util.stripLeadingHyphens(arg);    [BUGGY]  if(options.hasOption(opt)&&  option.startsWith( "- "))  {  [BUGGY]    {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	75	76	3	replace	if(options.hasOption(opt)&&  option.startsWith( "- "))  {	  if(options.hasOption(opt)&&    opt.startsWith(   "-   "))    {    	non-compiled	[CE]  cannot  find  symbol  option	6	None	replace
45	[BUG]  [BUGGY]  options.add(arg.substring(0,  2));  [CE]  'else'  without  'if'  [FE]              ComparisonFailure    [CONTEXT]    else  if  (arg.startsWith(   "-   "))  {  String  opt  =  Util.stripLeadingHyphens(arg);    [BUGGY]  options.add(arg.substring(0,  2));  [BUGGY]    if  (options.hasOption(opt))    {  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	75	76	3	replace	options.add(arg.substring(0,  2));	      if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    }    else    {    options.add(opt);    }    	non-compiled	[CE]  'else'  without  'if'	16	None	replace
46	[BUG]  [BUGGY]  ters.add(arg.substring(0,  2));  [CE]  'else'  without  'if'  [FE]                ComparisonFailure    [CONTEXT]    else  if  (arg.startsWith(   "-   "))  {  String  opt  =  Util.stripLeadingHyphens(arg);    [BUGGY]  ters.add(arg.substring(0,  2));  [BUGGY]    if  (options.hasOption(opt))    {  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	75	76	3	replace	ters.add(arg.substring(0,  2));	      if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    }    else    {    options.add(opt);    }    	non-compiled	[CE]  'else'  without  'if'	16	None	replace
47	[BUG]  [BUGGY]  options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]    else  if  (arg.startsWith(   "-   "))  {  String  opt  =  Util.stripLeadingHyphens(arg);    [BUGGY]  options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  [BUGGY]    if  (options.hasOption(opt))    {  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	75	76	3	replace	options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));	      if(opt!=    null)    {    tokens.add(opt);    }    	non-compiled	[CE]  ';'  expected	22	None	replace
48	[BUG]  [BUGGY]  options.hasOption(opt))  {  tokens.add(arg.substring(0,  1));  }  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]    else  if  (arg.startsWith(   "-   "))  {  String  opt  =  Util.stripLeadingHyphens(arg);    [BUGGY]  options.hasOption(opt))  {  tokens.add(arg.substring(0,  1));  }  [BUGGY]    if  (options.hasOption(opt))    {  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	75	76	3	replace	options.hasOption(opt))  {  tokens.add(arg.substring(0,  1));  }	      if(opt!=    null)    {    tokens.add(opt);    }    	non-compiled	[CE]  ';'  expected	22	None	replace
49	[BUG]  [BUGGY]  Option  options  =  options.getOptions(opt,  arguments);  [CE]  'else'  without  'if'  [FE]                ComparisonFailure    [CONTEXT]    else  if  (arg.startsWith(   "-   "))  {  String  opt  =  Util.stripLeadingHyphens(arg);    [BUGGY]  Option  options  =  options.getOptions(opt,  arguments);  [BUGGY]    if  (options.hasOption(opt))    {  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	75	76	3	replace	Option  options  =  options.getOptions(opt,  arguments);	      Option    options    =    options.getOptions(opt);    	non-compiled	[CE]  'else'  without  'if'	25	None	replace
50	[BUG]  [BUGGY]  Option  options  =  options.getOptions(opt,  i);  [CE]  'else'  without  'if'  [FE]                  ComparisonFailure    [CONTEXT]    else  if  (arg.startsWith(   "-   "))  {  String  opt  =  Util.stripLeadingHyphens(arg);    [BUGGY]  Option  options  =  options.getOptions(opt,  i);  [BUGGY]    if  (options.hasOption(opt))    {  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	75	76	3	replace	Option  options  =  options.getOptions(opt,  i);	      Option    options    =    options.getOptions(opt);    	non-compiled	[CE]  'else'  without  'if'	25	None	replace
51	[BUG]  [BUGGY]  Option  options  =  options.getOptions(option);  [CE]  'else'  without  'if'  [FE]                    ComparisonFailure    [CONTEXT]    else  if  (arg.startsWith(   "-   "))  {  String  opt  =  Util.stripLeadingHyphens(arg);    [BUGGY]  Option  options  =  options.getOptions(option);  [BUGGY]    if  (options.hasOption(opt))    {  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	75	76	3	replace	Option  options  =  options.getOptions(option);	      Option    options    =    options.getOptions(opt);    	non-compiled	[CE]  'else'  without  'if'	25	None	replace
52	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    UnrecognizedOptionException    [CONTEXT]    else  if  (arg.startsWith(   "-   "))  {  String  opt  =  Util.stripLeadingHyphens(arg);    [BUGGY]  if(opt.startsWith( "- "))  {  [BUGGY]    {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	75	76	3	add	if(opt.startsWith( "- "))  {	  if(options.hasOption(arg.substring(0,    2)))    {    	compilable	  [FE]  AssertionFailedError  	8	9	replace
53	[BUG]  [BUGGY]  if(opt.startsWith( "- "))  {  [FE]  AssertionFailedError  [FE]    UnrecognizedOptionException    [CONTEXT]    else  if  (arg.startsWith(   "-   "))  {  String  opt  =  Util.stripLeadingHyphens(arg);    [BUGGY]  if(opt.startsWith( "- "))  {  [BUGGY]    {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	75	76	3	replace	if(opt.startsWith( "- "))  {	  if(options.hasOption(arg.substring(0,    2)))    {    	compilable	  [FE]  AssertionFailedError  	8	9	replace
54	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]      UnrecognizedOptionException    [CONTEXT]    else  if  (arg.startsWith(   "-   "))  {  String  opt  =  Util.stripLeadingHyphens(arg);    [BUGGY]  if(options.hasOption(opt.substring(0,  2)))  {  [BUGGY]    {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	75	76	3	add	if(options.hasOption(opt.substring(0,  2)))  {	  if(options.hasOption(arg.substring(0,    2)))    {    	compilable	  [FE]  StringIndexOutOfBoundsException  	8	10	replace
55	[BUG]  [BUGGY]  if(options.hasOption(opt.substring(0,  2)))  {  [FE]  StringIndexOutOfBoundsException  [FE]      UnrecognizedOptionException    [CONTEXT]    else  if  (arg.startsWith(   "-   "))  {  String  opt  =  Util.stripLeadingHyphens(arg);    [BUGGY]  if(options.hasOption(opt.substring(0,  2)))  {  [BUGGY]    {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	75	76	3	replace	if(options.hasOption(opt.substring(0,  2)))  {	  if(options.hasOption(arg.substring(0,    2)))    {    	compilable	  [FE]  StringIndexOutOfBoundsException  	8	10	replace
56	[BUG]  [BUGGY]  [FE]  UnrecognizedOptionException  [FE]        UnrecognizedOptionException    [CONTEXT]    else  if  (arg.startsWith(   "-   "))  {  String  opt  =  Util.stripLeadingHyphens(arg);    [BUGGY]  if(opt!=  null  ||  options.hasOption(arg.substring(0,  2)))  {  [BUGGY]    {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	75	76	3	add	if(opt!=  null  ||  options.hasOption(arg.substring(0,  2)))  {	  if(options.hasOption(arg.substring(0,    2)))    {    	compilable	  [FE]  UnrecognizedOptionException  	8	4	replace
57	[BUG]  [BUGGY]  if(opt!=  null  ||  options.hasOption(arg.substring(0,  2)))  {  [FE]  UnrecognizedOptionException  [FE]        UnrecognizedOptionException    [CONTEXT]    else  if  (arg.startsWith(   "-   "))  {  String  opt  =  Util.stripLeadingHyphens(arg);    [BUGGY]  if(opt!=  null  ||  options.hasOption(arg.substring(0,  2)))  {  [BUGGY]    {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	75	76	3	replace	if(opt!=  null  ||  options.hasOption(arg.substring(0,  2)))  {	  if(options.hasOption(arg.substring(0,    2)))    {    	compilable	  [FE]  UnrecognizedOptionException  	8	4	replace
58	[BUG]  [BUGGY]  [FE]  MissingArgumentException  [FE]    MissingArgumentException    [CONTEXT]    else  if  (arg.startsWith(   "-   "))  {  String  opt  =  Util.stripLeadingHyphens(arg);    [BUGGY]      if(opt!=  null)  {  tokens.add(arg);  }  if(opt!=  null)  {  tokens.add(arg);  }  [BUGGY]    if  (options.hasOption(opt))    {  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	75	76	3	add	        if(opt!=    null)    {    tokens.add(arg);    }    if(opt!=  null)  {  tokens.add(arg);  }	  	compilable	  [FE]  MissingArgumentException  	29	11	add
59	[BUG]  [BUGGY]      if(opt!=  null)  {  tokens.add(arg);  }  if(opt!=  null)  {  tokens.add(arg);  }  [FE]  MissingArgumentException  [FE]    MissingArgumentException    [CONTEXT]    else  if  (arg.startsWith(   "-   "))  {  String  opt  =  Util.stripLeadingHyphens(arg);    [BUGGY]      if(opt!=  null)  {  tokens.add(arg);  }  if(opt!=  null)  {  tokens.add(arg);  }  [BUGGY]    if  (options.hasOption(opt))    {  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	75	76	3	replace	        if(opt!=    null)    {    tokens.add(arg);    }    if(opt!=  null)  {  tokens.add(arg);  }	  	compilable	  [FE]  MissingArgumentException  	29	11	add
60	[BUG]  [BUGGY]  [FE]  MissingArgumentException  [FE]      MissingArgumentException    [CONTEXT]    else  if  (arg.startsWith(   "-   "))  {  String  opt  =  Util.stripLeadingHyphens(arg);    [BUGGY]      if(opt!=  null)  {  tokens.add(arg);  }  if(opt  ==  null)  {  tokens.add(arg);  }  [BUGGY]    if  (options.hasOption(opt))    {  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	75	76	3	add	        if(opt!=    null)    {    tokens.add(arg);    }    if(opt  ==  null)  {  tokens.add(arg);  }	  	compilable	  [FE]  MissingArgumentException  	29	11	add
61	[BUG]  [BUGGY]      if(opt!=  null)  {  tokens.add(arg);  }  if(opt  ==  null)  {  tokens.add(arg);  }  [FE]  MissingArgumentException  [FE]      MissingArgumentException    [CONTEXT]    else  if  (arg.startsWith(   "-   "))  {  String  opt  =  Util.stripLeadingHyphens(arg);    [BUGGY]      if(opt!=  null)  {  tokens.add(arg);  }  if(opt  ==  null)  {  tokens.add(arg);  }  [BUGGY]    if  (options.hasOption(opt))    {  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	75	76	3	replace	        if(opt!=    null)    {    tokens.add(arg);    }    if(opt  ==  null)  {  tokens.add(arg);  }	  	compilable	  [FE]  MissingArgumentException  	29	11	add
62	[BUG]  [BUGGY]      if(opt!=  null)  {  tokens.add(arg);  }  if(opt  >=  null)  {  tokens.add(arg);  }  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]        MissingArgumentException    [CONTEXT]    else  if  (arg.startsWith(   "-   "))  {  String  opt  =  Util.stripLeadingHyphens(arg);    [BUGGY]      if(opt!=  null)  {  tokens.add(arg);  }  if(opt  >=  null)  {  tokens.add(arg);  }  [BUGGY]    if  (options.hasOption(opt))    {  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	75	76	3	replace	        if(opt!=    null)    {    tokens.add(arg);    }    if(opt  >=  null)  {  tokens.add(arg);  }	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	29	None	add
63	[BUG]  [BUGGY]      if(opt!=  null)  {  tokens.add(arg);  }  if(opt  >>  null)  {  tokens.add(arg);  }  [CE]  bad  operand  types  for  binary  operator  '>>'  [FE]          MissingArgumentException    [CONTEXT]    else  if  (arg.startsWith(   "-   "))  {  String  opt  =  Util.stripLeadingHyphens(arg);    [BUGGY]      if(opt!=  null)  {  tokens.add(arg);  }  if(opt  >>  null)  {  tokens.add(arg);  }  [BUGGY]    if  (options.hasOption(opt))    {  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	75	76	3	replace	        if(opt!=    null)    {    tokens.add(arg);    }    if(opt  >>  null)  {  tokens.add(arg);  }	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>>'	29	None	add
64	[BUG]  [BUGGY]  else  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  [CE]  'else'  without  'if'  [FE]    AssertionFailedError    [CONTEXT]    else  if  (arg.startsWith(   "-   "))  {  String  opt  =  Util.stripLeadingHyphens(arg);    [BUGGY]  else  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  [BUGGY]    if  (options.hasOption(opt))    {  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	75	76	3	replace	else  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }	      if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    }    	non-compiled	[CE]  'else'  without  'if'	11	None	replace
65	[BUG]  [BUGGY]  else  if(options.hasOption(opt)||  options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  [CE]  'else'  without  'if'  [FE]      AssertionFailedError    [CONTEXT]    else  if  (arg.startsWith(   "-   "))  {  String  opt  =  Util.stripLeadingHyphens(arg);    [BUGGY]  else  if(options.hasOption(opt)||  options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  [BUGGY]    if  (options.hasOption(opt))    {  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	75	76	3	replace	else  if(options.hasOption(opt)||  options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }	      if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    }    	non-compiled	[CE]  'else'  without  'if'	11	None	replace
66	[BUG]  [BUGGY]  tokens.add(arg.substring(0,  2));  opt  =  Util.stripLeadingHyphens(opt);  [CE]  'else'  without  'if'  [FE]                ComparisonFailure    [CONTEXT]    else  if  (arg.startsWith(   "-   "))  {  String  opt  =  Util.stripLeadingHyphens(arg);    [BUGGY]  tokens.add(arg.substring(0,  2));  opt  =  Util.stripLeadingHyphens(opt);  [BUGGY]    if  (options.hasOption(opt))    {  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	75	76	3	replace	tokens.add(arg.substring(0,  2));  opt  =  Util.stripLeadingHyphens(opt);	      if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    opt    =    Util.stripLeadingHyphens(opt);    }    else    {    options.add(opt);    }    	non-compiled	[CE]  'else'  without  'if'	17	None	replace
67	[BUG]  [BUGGY]  Option  option  =  options.hasOption(arg)?  options.substring(0,  2):  options.add(arg.substring(0,  2));  [CE]  'else'  without  'if'  [FE]                  ComparisonFailure    [CONTEXT]    else  if  (arg.startsWith(   "-   "))  {  String  opt  =  Util.stripLeadingHyphens(arg);    [BUGGY]  Option  option  =  options.hasOption(arg)?  options.substring(0,  2):  options.add(arg.substring(0,  2));  [BUGGY]    if  (options.hasOption(opt))    {  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	75	76	3	replace	Option  option  =  options.hasOption(arg)?  options.substring(0,  2):  options.add(arg.substring(0,  2));	      if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    opt    =    Util.stripLeadingHyphens(opt);    }    else    {    options.add(opt);    }    	non-compiled	[CE]  'else'  without  'if'	17	None	replace
68	[BUG]  [BUGGY]  options.add(arg.substring(0,  2));  opt  =  Util.stripLeadingHyphens(opt);  [CE]  'else'  without  'if'  [FE]                    ComparisonFailure    [CONTEXT]    else  if  (arg.startsWith(   "-   "))  {  String  opt  =  Util.stripLeadingHyphens(arg);    [BUGGY]  options.add(arg.substring(0,  2));  opt  =  Util.stripLeadingHyphens(opt);  [BUGGY]    if  (options.hasOption(opt))    {  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	75	76	3	replace	options.add(arg.substring(0,  2));  opt  =  Util.stripLeadingHyphens(opt);	      if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    opt    =    Util.stripLeadingHyphens(opt);    }    else    {    options.add(opt);    }    	non-compiled	[CE]  'else'  without  'if'	17	None	replace
69	[BUG]  [BUGGY]  else  if(options.hasOption(opt))  {  tokens.add(arg);  }  [CE]  'else'  without  'if'  [FE]    MissingArgumentException    [CONTEXT]    else  if  (arg.startsWith(   "-   "))  {  String  opt  =  Util.stripLeadingHyphens(arg);    [BUGGY]  else  if(options.hasOption(opt))  {  tokens.add(arg);  }  [BUGGY]    if  (options.hasOption(opt))    {  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	75	76	3	replace	else  if(options.hasOption(opt))  {  tokens.add(arg);  }	      if(options.hasOption(opt))    {    tokens.add(arg);    }    	non-compiled	[CE]  'else'  without  'if'	15	None	replace
70	[BUG]  [BUGGY]  else  if(options.hasOption(arg))  {  tokens.add(arg);  }  [CE]  'else'  without  'if'  [FE]      MissingArgumentException    [CONTEXT]    else  if  (arg.startsWith(   "-   "))  {  String  opt  =  Util.stripLeadingHyphens(arg);    [BUGGY]  else  if(options.hasOption(arg))  {  tokens.add(arg);  }  [BUGGY]    if  (options.hasOption(opt))    {  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	75	76	3	replace	else  if(options.hasOption(arg))  {  tokens.add(arg);  }	      if(options.hasOption(opt))    {    tokens.add(arg);    }    	non-compiled	[CE]  'else'  without  'if'	15	None	replace
71	[BUG]  [BUGGY]  else  if(options.hasValue(opt))  {  tokens.add(arg);  }  [CE]  'else'  without  'if'  [FE]        MissingArgumentException    [CONTEXT]    else  if  (arg.startsWith(   "-   "))  {  String  opt  =  Util.stripLeadingHyphens(arg);    [BUGGY]  else  if(options.hasValue(opt))  {  tokens.add(arg);  }  [BUGGY]    if  (options.hasOption(opt))    {  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	75	76	3	replace	else  if(options.hasValue(opt))  {  tokens.add(arg);  }	      if(options.hasOption(opt))    {    tokens.add(arg);    }    	non-compiled	[CE]  'else'  without  'if'	15	None	replace
72	[BUG]  [BUGGY]  [FE]  MissingArgumentException  [FE]    MissingArgumentException    [CONTEXT]    else  if  (arg.startsWith(   "-   "))  {  String  opt  =  Util.stripLeadingHyphens(arg);    [BUGGY]      if(options.hasOption(opt))  {  tokens.add(arg);  }  if(options.hasOption(opt))  {  tokens.add(arg);  }  [BUGGY]    if  (options.hasOption(opt))    {  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	75	76	3	add	        if(options.hasOption(opt))    {    tokens.add(arg);    }    if(options.hasOption(opt))  {  tokens.add(arg);  }	  	compilable	  [FE]  MissingArgumentException  	14	10	add
73	[BUG]  [BUGGY]      if(options.hasOption(opt))  {  tokens.add(arg);  }  if(options.hasOption(opt))  {  tokens.add(arg);  }  [FE]  MissingArgumentException  [FE]    MissingArgumentException    [CONTEXT]    else  if  (arg.startsWith(   "-   "))  {  String  opt  =  Util.stripLeadingHyphens(arg);    [BUGGY]      if(options.hasOption(opt))  {  tokens.add(arg);  }  if(options.hasOption(opt))  {  tokens.add(arg);  }  [BUGGY]    if  (options.hasOption(opt))    {  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	75	76	3	replace	        if(options.hasOption(opt))    {    tokens.add(arg);    }    if(options.hasOption(opt))  {  tokens.add(arg);  }	  	compilable	  [FE]  MissingArgumentException  	14	10	add
74	[BUG]  [BUGGY]  [FE]  MissingArgumentException  [FE]      MissingArgumentException    [CONTEXT]    else  if  (arg.startsWith(   "-   "))  {  String  opt  =  Util.stripLeadingHyphens(arg);    [BUGGY]      if(options.hasOption(opt))  {  tokens.add(arg);  }  else  if(options.hasOption(opt))  {  tokens.add(arg);  }  [BUGGY]    if  (options.hasOption(opt))    {  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	75	76	3	add	        if(options.hasOption(opt))    {    tokens.add(arg);    }    else  if(options.hasOption(opt))  {  tokens.add(arg);  }	  	compilable	  [FE]  MissingArgumentException  	14	10	add
75	[BUG]  [BUGGY]      if(options.hasOption(opt))  {  tokens.add(arg);  }  else  if(options.hasOption(opt))  {  tokens.add(arg);  }  [FE]  MissingArgumentException  [FE]      MissingArgumentException    [CONTEXT]    else  if  (arg.startsWith(   "-   "))  {  String  opt  =  Util.stripLeadingHyphens(arg);    [BUGGY]      if(options.hasOption(opt))  {  tokens.add(arg);  }  else  if(options.hasOption(opt))  {  tokens.add(arg);  }  [BUGGY]    if  (options.hasOption(opt))    {  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	75	76	3	replace	        if(options.hasOption(opt))    {    tokens.add(arg);    }    else  if(options.hasOption(opt))  {  tokens.add(arg);  }	  	compilable	  [FE]  MissingArgumentException  	14	10	add
76	[BUG]  [BUGGY]      if(options.hasOption(opt))  {  tokens.add(arg);  }  If(options.hasOption(opt))  {  tokens.add(arg);  }  [CE]  ';'  expected  [FE]        MissingArgumentException    [CONTEXT]    else  if  (arg.startsWith(   "-   "))  {  String  opt  =  Util.stripLeadingHyphens(arg);    [BUGGY]      if(options.hasOption(opt))  {  tokens.add(arg);  }  If(options.hasOption(opt))  {  tokens.add(arg);  }  [BUGGY]    if  (options.hasOption(opt))    {  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	75	76	3	replace	        if(options.hasOption(opt))    {    tokens.add(arg);    }    If(options.hasOption(opt))  {  tokens.add(arg);  }	  	non-compiled	[CE]  ';'  expected	14	None	add
77	[BUG]  [BUGGY]      if(options.hasOption(opt))  {  tokens.add(arg);  }  if(options.hasOption(opt))  {  tokens.add(arg;  }  [CE]  ')'  expected  [FE]          MissingArgumentException    [CONTEXT]    else  if  (arg.startsWith(   "-   "))  {  String  opt  =  Util.stripLeadingHyphens(arg);    [BUGGY]      if(options.hasOption(opt))  {  tokens.add(arg);  }  if(options.hasOption(opt))  {  tokens.add(arg;  }  [BUGGY]    if  (options.hasOption(opt))    {  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	75	76	3	replace	        if(options.hasOption(opt))    {    tokens.add(arg);    }    if(options.hasOption(opt))  {  tokens.add(arg;  }	  	non-compiled	[CE]  ')'  expected	14	None	add
78	[BUG]  [BUGGY]  String[]  arguments  =  Util.stripLeadingHyphens(opt,  stopAtNonOption);  [CE]  'else'  without  'if'  [FE]        ComparisonFailure    [CONTEXT]    else  if  (arg.startsWith(   "-   "))  {  String  opt  =  Util.stripLeadingHyphens(arg);    [BUGGY]  String[]  arguments  =  Util.stripLeadingHyphens(opt,  stopAtNonOption);  [BUGGY]    if  (options.hasOption(opt))    {  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	75	76	3	replace	String[]  arguments  =  Util.stripLeadingHyphens(opt,  stopAtNonOption);	      String[]    arguments    =    Util.stripLeadingHyphens(opt);    	non-compiled	[CE]  'else'  without  'if'	26	None	replace
79	[BUG]  [BUGGY]  String[]  arguments  =  Util.stripLeadingHyphens(arg);  [CE]  'else'  without  'if'  [FE]          ComparisonFailure    [CONTEXT]    else  if  (arg.startsWith(   "-   "))  {  String  opt  =  Util.stripLeadingHyphens(arg);    [BUGGY]  String[]  arguments  =  Util.stripLeadingHyphens(arg);  [BUGGY]    if  (options.hasOption(opt))    {  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	75	76	3	replace	String[]  arguments  =  Util.stripLeadingHyphens(arg);	      String[]    arguments    =    Util.stripLeadingHyphens(opt);    	non-compiled	[CE]  'else'  without  'if'	26	None	replace
80	[BUG]  [BUGGY]  String[]  arguments  =  Util.stripLeadingHyphens(opt,  i);  [CE]  'else'  without  'if'  [FE]            ComparisonFailure    [CONTEXT]    else  if  (arg.startsWith(   "-   "))  {  String  opt  =  Util.stripLeadingHyphens(arg);    [BUGGY]  String[]  arguments  =  Util.stripLeadingHyphens(opt,  i);  [BUGGY]    if  (options.hasOption(opt))    {  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	75	76	3	replace	String[]  arguments  =  Util.stripLeadingHyphens(opt,  i);	      String[]    arguments    =    Util.stripLeadingHyphens(opt);    	non-compiled	[CE]  'else'  without  'if'	26	None	replace
81	[BUG]  [BUGGY]  String[]  arguments  =  Util.stripLeadingHyphens(option);  [CE]  'else'  without  'if'  [FE]              ComparisonFailure    [CONTEXT]    else  if  (arg.startsWith(   "-   "))  {  String  opt  =  Util.stripLeadingHyphens(arg);    [BUGGY]  String[]  arguments  =  Util.stripLeadingHyphens(option);  [BUGGY]    if  (options.hasOption(opt))    {  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	75	76	3	replace	String[]  arguments  =  Util.stripLeadingHyphens(option);	      String[]    arguments    =    Util.stripLeadingHyphens(opt);    	non-compiled	[CE]  'else'  without  'if'	26	None	replace
82	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    ComparisonFailure    [CONTEXT]    else  if  (arg.startsWith(   "-   "))  {  String  opt  =  Util.stripLeadingHyphens(arg);    [BUGGY]  if(options.hasOption(opt)&&  opt.equals( "- "))  {  [BUGGY]    {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	75	76	3	add	if(options.hasOption(opt)&&  opt.equals( "- "))  {	  if(options.hasOption(opt)||    opt.equals(   "-   "))    {    	compilable	  [FE]  AssertionFailedError  	19	9	replace
83	[BUG]  [BUGGY]  if(options.hasOption(opt)&&  opt.equals( "- "))  {  [FE]  AssertionFailedError  [FE]    ComparisonFailure    [CONTEXT]    else  if  (arg.startsWith(   "-   "))  {  String  opt  =  Util.stripLeadingHyphens(arg);    [BUGGY]  if(options.hasOption(opt)&&  opt.equals( "- "))  {  [BUGGY]    {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	75	76	3	replace	if(options.hasOption(opt)&&  opt.equals( "- "))  {	  if(options.hasOption(opt)||    opt.equals(   "-   "))    {    	compilable	  [FE]  AssertionFailedError  	19	9	replace
84	[BUG]  [BUGGY]  else  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  opt  =  Util.stripLeadingHyphens(opt);  }  [CE]  'else'  without  'if'  [FE]    AssertionFailedError    [CONTEXT]    else  if  (arg.startsWith(   "-   "))  {  String  opt  =  Util.stripLeadingHyphens(arg);    [BUGGY]  else  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  opt  =  Util.stripLeadingHyphens(opt);  }  [BUGGY]    if  (options.hasOption(opt))    {  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	75	76	3	replace	else  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  opt  =  Util.stripLeadingHyphens(opt);  }	      if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    opt    =    Util.stripLeadingHyphens(opt);    }    	non-compiled	[CE]  'else'  without  'if'	13	None	replace
85	[BUG]  [BUGGY]  else  if(stopAtNonOption)  {  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  opt  =  Util.stripLeadingHyphens(opt);  }  [CE]  'else'  without  'if'  [FE]      AssertionFailedError    [CONTEXT]    else  if  (arg.startsWith(   "-   "))  {  String  opt  =  Util.stripLeadingHyphens(arg);    [BUGGY]  else  if(stopAtNonOption)  {  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  opt  =  Util.stripLeadingHyphens(opt);  }  [BUGGY]    if  (options.hasOption(opt))    {  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	75	76	3	replace	else  if(stopAtNonOption)  {  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  opt  =  Util.stripLeadingHyphens(opt);  }	      if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    opt    =    Util.stripLeadingHyphens(opt);    }    	non-compiled	[CE]  'else'  without  'if'	13	None	replace
86	[BUG]  [BUGGY]  else  if(options.hasOption(arg))  {  tokens.add(arg.substring(0,  2));  opt  =  Util.stripLeadingHyphens(opt);  }  [CE]  'else'  without  'if'  [FE]        AssertionFailedError    [CONTEXT]    else  if  (arg.startsWith(   "-   "))  {  String  opt  =  Util.stripLeadingHyphens(arg);    [BUGGY]  else  if(options.hasOption(arg))  {  tokens.add(arg.substring(0,  2));  opt  =  Util.stripLeadingHyphens(opt);  }  [BUGGY]    if  (options.hasOption(opt))    {  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	75	76	3	replace	else  if(options.hasOption(arg))  {  tokens.add(arg.substring(0,  2));  opt  =  Util.stripLeadingHyphens(opt);  }	      if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    opt    =    Util.stripLeadingHyphens(opt);    }    	non-compiled	[CE]  'else'  without  'if'	13	None	replace
87	[BUG]  [BUGGY]  if(options.hasOption(opt)&&  opt.startsWith(   "-   "))  {  if(options.hasOption(opt)&&  opt.startsWith( "-   "))  {  [CE]  reached  end  of  file  while  parsing  [FE]    AssertionFailedError    [CONTEXT]    else  if  (arg.startsWith(   "-   "))  {  String  opt  =  Util.stripLeadingHyphens(arg);    [BUGGY]  if(options.hasOption(opt)&&  opt.startsWith(   "-   "))  {  if(options.hasOption(opt)&&  opt.startsWith( "-   "))  {  [BUGGY]    {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	75	76	3	replace	if(options.hasOption(opt)&&    opt.startsWith(   "-   "))    {    if(options.hasOption(opt)&&  opt.startsWith( "-   "))  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	5	None	add
88	[BUG]  [BUGGY]  if(options.hasOption(opt)&&  opt.startsWith(   "-   "))  {  if(options.hasOption(opt)&&  opt.startsWith( ".- "))  {  [CE]  reached  end  of  file  while  parsing  [FE]      AssertionFailedError    [CONTEXT]    else  if  (arg.startsWith(   "-   "))  {  String  opt  =  Util.stripLeadingHyphens(arg);    [BUGGY]  if(options.hasOption(opt)&&  opt.startsWith(   "-   "))  {  if(options.hasOption(opt)&&  opt.startsWith( ".- "))  {  [BUGGY]    {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	75	76	3	replace	if(options.hasOption(opt)&&    opt.startsWith(   "-   "))    {    if(options.hasOption(opt)&&  opt.startsWith( ".- "))  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	5	None	add
89	[BUG]  [BUGGY]  if(options.hasOption(opt)&&  opt.startsWith(   "-   "))  {  if(options.hasOption(opt)&&  opt.startsWith( ". "))  {  [CE]  reached  end  of  file  while  parsing  [FE]        AssertionFailedError    [CONTEXT]    else  if  (arg.startsWith(   "-   "))  {  String  opt  =  Util.stripLeadingHyphens(arg);    [BUGGY]  if(options.hasOption(opt)&&  opt.startsWith(   "-   "))  {  if(options.hasOption(opt)&&  opt.startsWith( ". "))  {  [BUGGY]    {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	75	76	3	replace	if(options.hasOption(opt)&&    opt.startsWith(   "-   "))    {    if(options.hasOption(opt)&&  opt.startsWith( ". "))  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	5	None	add
90	[BUG]  [BUGGY]  if(options.hasOption(opt)&&  opt.startsWith(   "-   "))  {  if(options.hasOption(opt)&&  option.startsWith( "-   "))  {  [CE]  reached  end  of  file  while  parsing  [FE]          AssertionFailedError    [CONTEXT]    else  if  (arg.startsWith(   "-   "))  {  String  opt  =  Util.stripLeadingHyphens(arg);    [BUGGY]  if(options.hasOption(opt)&&  opt.startsWith(   "-   "))  {  if(options.hasOption(opt)&&  option.startsWith( "-   "))  {  [BUGGY]    {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	75	76	3	replace	if(options.hasOption(opt)&&    opt.startsWith(   "-   "))    {    if(options.hasOption(opt)&&  option.startsWith( "-   "))  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	5	None	add
91	[BUG]  [BUGGY]  if(options.hasOption(opt)||  opt.equals(   "-   "))  {  if(options.hasOption(opt)||  opt.equals( "-   "))  {  [CE]  reached  end  of  file  while  parsing  [FE]    ComparisonFailure    [CONTEXT]    else  if  (arg.startsWith(   "-   "))  {  String  opt  =  Util.stripLeadingHyphens(arg);    [BUGGY]  if(options.hasOption(opt)||  opt.equals(   "-   "))  {  if(options.hasOption(opt)||  opt.equals( "-   "))  {  [BUGGY]    {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	75	76	3	replace	if(options.hasOption(opt)||    opt.equals(   "-   "))    {    if(options.hasOption(opt)||  opt.equals( "-   "))  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	18	None	add
92	[BUG]  [BUGGY]  if(options.hasOption(opt)||  opt.equals(   "-   "))  {  if(options.hasOption(opt)||  opt.equals( ".- "))  {  [CE]  reached  end  of  file  while  parsing  [FE]      ComparisonFailure    [CONTEXT]    else  if  (arg.startsWith(   "-   "))  {  String  opt  =  Util.stripLeadingHyphens(arg);    [BUGGY]  if(options.hasOption(opt)||  opt.equals(   "-   "))  {  if(options.hasOption(opt)||  opt.equals( ".- "))  {  [BUGGY]    {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	75	76	3	replace	if(options.hasOption(opt)||    opt.equals(   "-   "))    {    if(options.hasOption(opt)||  opt.equals( ".- "))  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	18	None	add
93	[BUG]  [BUGGY]  if(options.hasOption(opt)||  opt.equals(   "-   "))  {  if(options.hasOption(opt)||  opt.equals( "-n "))  {  [CE]  reached  end  of  file  while  parsing  [FE]        ComparisonFailure    [CONTEXT]    else  if  (arg.startsWith(   "-   "))  {  String  opt  =  Util.stripLeadingHyphens(arg);    [BUGGY]  if(options.hasOption(opt)||  opt.equals(   "-   "))  {  if(options.hasOption(opt)||  opt.equals( "-n "))  {  [BUGGY]    {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	75	76	3	replace	if(options.hasOption(opt)||    opt.equals(   "-   "))    {    if(options.hasOption(opt)||  opt.equals( "-n "))  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	18	None	add
94	[BUG]  [BUGGY]  if(options.hasOption(opt)||  options.hasOption(opt))  {  if(options.hasOption(opt)||  options.hasOption(opt))  {  [CE]  reached  end  of  file  while  parsing  [FE]    ComparisonFailure    [CONTEXT]    else  if  (arg.startsWith(   "-   "))  {  String  opt  =  Util.stripLeadingHyphens(arg);    [BUGGY]  if(options.hasOption(opt)||  options.hasOption(opt))  {  if(options.hasOption(opt)||  options.hasOption(opt))  {  [BUGGY]    {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	75	76	3	replace	if(options.hasOption(opt)||    options.hasOption(opt))    {    if(options.hasOption(opt)||  options.hasOption(opt))  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	3	None	add
95	[BUG]  [BUGGY]  if(options.hasOption(opt)||  options.hasOption(opt))  {  If(options.hasOption(opt)||  options.hasOption(opt))  {  [CE]  ';'  expected  [FE]      ComparisonFailure    [CONTEXT]    else  if  (arg.startsWith(   "-   "))  {  String  opt  =  Util.stripLeadingHyphens(arg);    [BUGGY]  if(options.hasOption(opt)||  options.hasOption(opt))  {  If(options.hasOption(opt)||  options.hasOption(opt))  {  [BUGGY]    {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	75	76	3	replace	if(options.hasOption(opt)||    options.hasOption(opt))    {    If(options.hasOption(opt)||  options.hasOption(opt))  {	  	non-compiled	[CE]  ';'  expected	3	None	add
96	[BUG]  [BUGGY]  String[]  options  =  opt.getOptions();  [CE]  'else'  without  'if'  [FE]            ComparisonFailure    [CONTEXT]    else  if  (arg.startsWith(   "-   "))  {  String  opt  =  Util.stripLeadingHyphens(arg);    [BUGGY]  String[]  options  =  opt.getOptions();  [BUGGY]    if  (options.hasOption(opt))    {  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	75	76	3	replace	String[]  options  =  opt.getOptions();	      String[]    options    =    options.getOptions();    	non-compiled	[CE]  'else'  without  'if'	23	None	replace
97	[BUG]  [BUGGY]  String[]  options  =  option.getOptions();  [CE]  'else'  without  'if'  [FE]              ComparisonFailure    [CONTEXT]    else  if  (arg.startsWith(   "-   "))  {  String  opt  =  Util.stripLeadingHyphens(arg);    [BUGGY]  String[]  options  =  option.getOptions();  [BUGGY]    if  (options.hasOption(opt))    {  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	75	76	3	replace	String[]  options  =  option.getOptions();	      String[]    options    =    options.getOptions();    	non-compiled	[CE]  'else'  without  'if'	23	None	replace
98	[BUG]  [BUGGY]  String[]  options  =  options.toArray(new  String[options.size()  ]);  [CE]  'else'  without  'if'  [FE]                ComparisonFailure    [CONTEXT]    else  if  (arg.startsWith(   "-   "))  {  String  opt  =  Util.stripLeadingHyphens(arg);    [BUGGY]  String[]  options  =  options.toArray(new  String[options.size()  ]);  [BUGGY]    if  (options.hasOption(opt))    {  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	75	76	3	replace	String[]  options  =  options.toArray(new  String[options.size()  ]);	      String[]    options    =    options.getOptions();    	non-compiled	[CE]  'else'  without  'if'	23	None	replace
99	[BUG]  [BUGGY]  if(options.hasOption(opt)||  opt.startsWith(   "-   "))  {  if(options.hasOption(opt)||  opt.startsWith( "-   "))  {  [CE]  reached  end  of  file  while  parsing  [FE]    ComparisonFailure    [CONTEXT]    else  if  (arg.startsWith(   "-   "))  {  String  opt  =  Util.stripLeadingHyphens(arg);    [BUGGY]  if(options.hasOption(opt)||  opt.startsWith(   "-   "))  {  if(options.hasOption(opt)||  opt.startsWith( "-   "))  {  [BUGGY]    {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	75	76	3	replace	if(options.hasOption(opt)||    opt.startsWith(   "-   "))    {    if(options.hasOption(opt)||  opt.startsWith( "-   "))  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	1	None	add
100	[BUG]  [BUGGY]  if(options.hasOption(opt)||  opt.startsWith(   "-   "))  {  if(options.hasOption(opt)||  opt.startsWith( ".- "))  {  [CE]  reached  end  of  file  while  parsing  [FE]      ComparisonFailure    [CONTEXT]    else  if  (arg.startsWith(   "-   "))  {  String  opt  =  Util.stripLeadingHyphens(arg);    [BUGGY]  if(options.hasOption(opt)||  opt.startsWith(   "-   "))  {  if(options.hasOption(opt)||  opt.startsWith( ".- "))  {  [BUGGY]    {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	75	76	3	replace	if(options.hasOption(opt)||    opt.startsWith(   "-   "))    {    if(options.hasOption(opt)||  opt.startsWith( ".- "))  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	1	None	add
101	[BUG]  [BUGGY]  if(options.hasOption(opt)||  opt.startsWith(   "-   "))  {  if(options.hasOption(opt)||  opt.startsWith( "-n "))  {  [CE]  reached  end  of  file  while  parsing  [FE]        ComparisonFailure    [CONTEXT]    else  if  (arg.startsWith(   "-   "))  {  String  opt  =  Util.stripLeadingHyphens(arg);    [BUGGY]  if(options.hasOption(opt)||  opt.startsWith(   "-   "))  {  if(options.hasOption(opt)||  opt.startsWith( "-n "))  {  [BUGGY]    {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	75	76	3	replace	if(options.hasOption(opt)||    opt.startsWith(   "-   "))    {    if(options.hasOption(opt)||  opt.startsWith( "-n "))  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	1	None	add
102	[BUG]  [BUGGY]  if(options.hasOption(arg.substring(0,  2)))  {  if(options.hasOption(arg.substring(0,  2)))  {  [CE]  reached  end  of  file  while  parsing  [FE]    UnrecognizedOptionException    [CONTEXT]    else  if  (arg.startsWith(   "-   "))  {  String  opt  =  Util.stripLeadingHyphens(arg);    [BUGGY]  if(options.hasOption(arg.substring(0,  2)))  {  if(options.hasOption(arg.substring(0,  2)))  {  [BUGGY]    {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	75	76	3	replace	if(options.hasOption(arg.substring(0,    2)))    {    if(options.hasOption(arg.substring(0,  2)))  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	7	None	add
103	[BUG]  [BUGGY]  if(options.hasOption(arg.substring(0,  2)))  {  else  if(options.hasOption(arg.substring(0,  2)))  {  [CE]  'else'  without  'if'  [FE]      UnrecognizedOptionException    [CONTEXT]    else  if  (arg.startsWith(   "-   "))  {  String  opt  =  Util.stripLeadingHyphens(arg);    [BUGGY]  if(options.hasOption(arg.substring(0,  2)))  {  else  if(options.hasOption(arg.substring(0,  2)))  {  [BUGGY]    {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	75	76	3	replace	if(options.hasOption(arg.substring(0,    2)))    {    else  if(options.hasOption(arg.substring(0,  2)))  {	  	non-compiled	[CE]  'else'  without  'if'	7	None	add
104	[BUG]  [BUGGY]  if(options.hasOption(arg.substring(0,  2)))  {  If(options.hasOption(arg.substring(0,  2)))  {  [CE]  ';'  expected  [FE]        UnrecognizedOptionException    [CONTEXT]    else  if  (arg.startsWith(   "-   "))  {  String  opt  =  Util.stripLeadingHyphens(arg);    [BUGGY]  if(options.hasOption(arg.substring(0,  2)))  {  If(options.hasOption(arg.substring(0,  2)))  {  [BUGGY]    {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	75	76	3	replace	if(options.hasOption(arg.substring(0,    2)))    {    If(options.hasOption(arg.substring(0,  2)))  {	  	non-compiled	[CE]  ';'  expected	7	None	add
105	[BUG]  [BUGGY]  Option  options  =  options.getOptions(opt,  stopAtNonOption);  [CE]  'else'  without  'if'  [FE]                ComparisonFailure    [CONTEXT]    else  if  (arg.startsWith(   "-   "))  {  String  opt  =  Util.stripLeadingHyphens(arg);    [BUGGY]  Option  options  =  options.getOptions(opt,  stopAtNonOption);  [BUGGY]    if  (options.hasOption(opt))    {  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	75	76	3	replace	Option  options  =  options.getOptions(opt,  stopAtNonOption);	      Option    options    =    options.getOptions(opt);    	non-compiled	[CE]  'else'  without  'if'	25	None	replace
106	[BUG]  [BUGGY]  Option  options  =  options.getOptions(opt,  null);  [CE]  'else'  without  'if'  [FE]                  ComparisonFailure    [CONTEXT]    else  if  (arg.startsWith(   "-   "))  {  String  opt  =  Util.stripLeadingHyphens(arg);    [BUGGY]  Option  options  =  options.getOptions(opt,  null);  [BUGGY]    if  (options.hasOption(opt))    {  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	75	76	3	replace	Option  options  =  options.getOptions(opt,  null);	      Option    options    =    options.getOptions(opt);    	non-compiled	[CE]  'else'  without  'if'	25	None	replace
107	[BUG]  [BUGGY]  parent  ==  null  &&  stopAtNonOption)  {  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  [CE]  not  a  statement  [FE]            ComparisonFailure    [CONTEXT]    else  if  (arg.startsWith(   "-   "))  {  String  opt  =  Util.stripLeadingHyphens(arg);    [BUGGY]  parent  ==  null  &&  stopAtNonOption)  {  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  [BUGGY]    if  (options.hasOption(opt))    {  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	75	76	3	replace	parent  ==  null  &&  stopAtNonOption)  {  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }	      if(opt!=    null)    {    if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    }    	non-compiled	[CE]  not  a  statement	28	None	replace
108	[BUG]  [BUGGY]  Option  option  =  options.getOption(opt);  [CE]  'else'  without  'if'  [FE]              ComparisonFailure    [CONTEXT]    else  if  (arg.startsWith(   "-   "))  {  String  opt  =  Util.stripLeadingHyphens(arg);    [BUGGY]  Option  option  =  options.getOption(opt);  [BUGGY]    if  (options.hasOption(opt))    {  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	75	76	3	replace	Option  option  =  options.getOption(opt);	      if(opt!=    null)    {    if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    }    	non-compiled	[CE]  'else'  without  'if'	28	None	replace
109	[BUG]  [BUGGY]  options.hasOption(opt))  {  tokens.add(arg);  [CE]  ';'  expected  [FE]          ComparisonFailure    [CONTEXT]    else  if  (arg.startsWith(   "-   "))  {  String  opt  =  Util.stripLeadingHyphens(arg);    [BUGGY]  options.hasOption(opt))  {  tokens.add(arg);  [BUGGY]    if  (options.hasOption(opt))    {  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	75	76	3	replace	options.hasOption(opt))  {  tokens.add(arg);	      if(opt!=    null)    {    if(options.hasOption(opt))    {    tokens.add(arg);    }    	non-compiled	[CE]  ';'  expected	27	None	replace
110	[BUG]  [BUGGY]      if(options.hasOption(opt))  {  tokens.add(arg);  }  options.hasOption(opt))  {  tokens.add(arg);  }  [CE]  ';'  expected  [FE]    MissingArgumentException    [CONTEXT]    else  if  (arg.startsWith(   "-   "))  {  String  opt  =  Util.stripLeadingHyphens(arg);    [BUGGY]      if(options.hasOption(opt))  {  tokens.add(arg);  }  options.hasOption(opt))  {  tokens.add(arg);  }  [BUGGY]    if  (options.hasOption(opt))    {  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	75	76	3	replace	        if(options.hasOption(opt))    {    tokens.add(arg);    }    options.hasOption(opt))  {  tokens.add(arg);  }	  	non-compiled	[CE]  ';'  expected	14	None	add
111	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    else  if  (arg.startsWith(   "-   "))  {  String  opt  =  Util.stripLeadingHyphens(arg);    [BUGGY]  if(stopAtNonOption)  {  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  opt  =  Util.stripLeadingHyphens(opt);  }  [BUGGY]    if  (options.hasOption(opt))    {  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	75	76	3	add	if(stopAtNonOption)  {  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  opt  =  Util.stripLeadingHyphens(opt);  }	      if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    opt    =    Util.stripLeadingHyphens(opt);    }    	compilable	  [FE]  AssertionFailedError  	13	10	replace
112	[BUG]  [BUGGY]  if(stopAtNonOption)  {  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  opt  =  Util.stripLeadingHyphens(opt);  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    else  if  (arg.startsWith(   "-   "))  {  String  opt  =  Util.stripLeadingHyphens(arg);    [BUGGY]  if(stopAtNonOption)  {  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  opt  =  Util.stripLeadingHyphens(opt);  }  [BUGGY]    if  (options.hasOption(opt))    {  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	75	76	3	replace	if(stopAtNonOption)  {  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  opt  =  Util.stripLeadingHyphens(opt);  }	      if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    opt    =    Util.stripLeadingHyphens(opt);    }    	compilable	  [FE]  AssertionFailedError  	13	10	replace
113	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    else  if  (arg.startsWith(   "-   "))  {  String  opt  =  Util.stripLeadingHyphens(arg);    [BUGGY]  if(stopAtNonOption)  {  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  1));  opt  =  Util.stripLeadingHyphens(opt);  }  [BUGGY]    if  (options.hasOption(opt))    {  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	75	76	3	add	if(stopAtNonOption)  {  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  1));  opt  =  Util.stripLeadingHyphens(opt);  }	      if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    opt    =    Util.stripLeadingHyphens(opt);    }    	compilable	  [FE]  AssertionFailedError  	13	10	replace
114	[BUG]  [BUGGY]  if(stopAtNonOption)  {  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  1));  opt  =  Util.stripLeadingHyphens(opt);  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    else  if  (arg.startsWith(   "-   "))  {  String  opt  =  Util.stripLeadingHyphens(arg);    [BUGGY]  if(stopAtNonOption)  {  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  1));  opt  =  Util.stripLeadingHyphens(opt);  }  [BUGGY]    if  (options.hasOption(opt))    {  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	75	76	3	replace	if(stopAtNonOption)  {  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  1));  opt  =  Util.stripLeadingHyphens(opt);  }	      if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    opt    =    Util.stripLeadingHyphens(opt);    }    	compilable	  [FE]  AssertionFailedError  	13	10	replace
115	[BUG]  [BUGGY]  Option  option  =  options.hasOption(arg);  [CE]  'else'  without  'if'  [FE]              ComparisonFailure    [CONTEXT]    else  if  (arg.startsWith(   "-   "))  {  String  opt  =  Util.stripLeadingHyphens(arg);    [BUGGY]  Option  option  =  options.hasOption(arg);  [BUGGY]    if  (options.hasOption(opt))    {  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	75	76	3	replace	Option  option  =  options.hasOption(arg);	      if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    }    else    {    options.add(opt);    }    	non-compiled	[CE]  'else'  without  'if'	16	None	replace
116	[BUG]  [BUGGY]  [FE]  UnrecognizedOptionException  [FE]    UnrecognizedOptionException    [CONTEXT]    else  if  (arg.startsWith(   "-   "))  {  String  opt  =  Util.stripLeadingHyphens(arg);    [BUGGY]  if(opt!=  null)  {  [BUGGY]    {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	75	76	3	add	if(opt!=  null)  {	  if(options.hasOption(arg.substring(0,    2)))    {    	compilable	  [FE]  UnrecognizedOptionException  	8	4	replace
117	[BUG]  [BUGGY]  if(opt!=  null)  {  [FE]  UnrecognizedOptionException  [FE]    UnrecognizedOptionException    [CONTEXT]    else  if  (arg.startsWith(   "-   "))  {  String  opt  =  Util.stripLeadingHyphens(arg);    [BUGGY]  if(opt!=  null)  {  [BUGGY]    {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	75	76	3	replace	if(opt!=  null)  {	  if(options.hasOption(arg.substring(0,    2)))    {    	compilable	  [FE]  UnrecognizedOptionException  	8	4	replace
118	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      UnrecognizedOptionException    [CONTEXT]    else  if  (arg.startsWith(   "-   "))  {  String  opt  =  Util.stripLeadingHyphens(arg);    [BUGGY]  if(opt  ==  null)  {  [BUGGY]    {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	75	76	3	add	if(opt  ==  null)  {	  if(options.hasOption(arg.substring(0,    2)))    {    	compilable	  [FE]  AssertionFailedError  	8	9	replace
119	[BUG]  [BUGGY]  if(opt  ==  null)  {  [FE]  AssertionFailedError  [FE]      UnrecognizedOptionException    [CONTEXT]    else  if  (arg.startsWith(   "-   "))  {  String  opt  =  Util.stripLeadingHyphens(arg);    [BUGGY]  if(opt  ==  null)  {  [BUGGY]    {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	75	76	3	replace	if(opt  ==  null)  {	  if(options.hasOption(arg.substring(0,    2)))    {    	compilable	  [FE]  AssertionFailedError  	8	9	replace
120	[BUG]  [BUGGY]      if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  opt  =  Util.stripLeadingHyphens(opt);  }  Option  options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  opt  =  Util.stripLeadingHyphens(opt);  }  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]    else  if  (arg.startsWith(   "-   "))  {  String  opt  =  Util.stripLeadingHyphens(arg);    [BUGGY]      if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  opt  =  Util.stripLeadingHyphens(opt);  }  Option  options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  opt  =  Util.stripLeadingHyphens(opt);  }  [BUGGY]    if  (options.hasOption(opt))    {  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	75	76	3	replace	        if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    opt    =    Util.stripLeadingHyphens(opt);    }    Option  options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  opt  =  Util.stripLeadingHyphens(opt);  }	  	non-compiled	[CE]  ';'  expected	12	None	add
121	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]    else  if  (arg.startsWith(   "-   "))  {  String  opt  =  Util.stripLeadingHyphens(arg);    [BUGGY]  if(options.hasOption(opt)||  opt.startsWith( "-- "))  {  [BUGGY]    {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	75	76	3	add	if(options.hasOption(opt)||  opt.startsWith( "-- "))  {	  if(options.hasOption(opt)||    opt.startsWith(   "-   "))    {    	compilable	  [FE]  ComparisonFailure  	2	3	replace
122	[BUG]  [BUGGY]  if(options.hasOption(opt)||  opt.startsWith( "-- "))  {  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]    else  if  (arg.startsWith(   "-   "))  {  String  opt  =  Util.stripLeadingHyphens(arg);    [BUGGY]  if(options.hasOption(opt)||  opt.startsWith( "-- "))  {  [BUGGY]    {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	75	76	3	replace	if(options.hasOption(opt)||  opt.startsWith( "-- "))  {	  if(options.hasOption(opt)||    opt.startsWith(   "-   "))    {    	compilable	  [FE]  ComparisonFailure  	2	3	replace
123	[BUG]  [BUGGY]      if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]    else  if  (arg.startsWith(   "-   "))  {  String  opt  =  Util.stripLeadingHyphens(arg);    [BUGGY]      if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  [BUGGY]    if  (options.hasOption(opt))    {  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	75	76	3	replace	        if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    }    options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }	  	non-compiled	[CE]  ';'  expected	10	None	add
124	[BUG]  [BUGGY]      if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  Option  options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]    else  if  (arg.startsWith(   "-   "))  {  String  opt  =  Util.stripLeadingHyphens(arg);    [BUGGY]      if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  Option  options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  [BUGGY]    if  (options.hasOption(opt))    {  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	75	76	3	replace	        if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    }    Option  options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }	  	non-compiled	[CE]  ';'  expected	10	None	add
125	[BUG]  [BUGGY]  String[]  arguments  =  Util.stripLeadingHyphens(opt,  null);  [CE]  'else'  without  'if'  [FE]        ComparisonFailure    [CONTEXT]    else  if  (arg.startsWith(   "-   "))  {  String  opt  =  Util.stripLeadingHyphens(arg);    [BUGGY]  String[]  arguments  =  Util.stripLeadingHyphens(opt,  null);  [BUGGY]    if  (options.hasOption(opt))    {  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	75	76	3	replace	String[]  arguments  =  Util.stripLeadingHyphens(opt,  null);	      String[]    arguments    =    Util.stripLeadingHyphens(opt);    	non-compiled	[CE]  'else'  without  'if'	26	None	replace
126	[BUG]  [BUGGY]  options.hasOption(opt);  [CE]  'else'  without  'if'  [FE]    AssertionFailedError    [CONTEXT]    else  if  (arg.startsWith(   "-   "))  {  String  opt  =  Util.stripLeadingHyphens(arg);    [BUGGY]  options.hasOption(opt);  [BUGGY]    if  (options.hasOption(opt))    {  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	75	76	3	replace	options.hasOption(opt);	      if(opt!=    null)    {    tokens.add(opt);    }    	non-compiled	[CE]  'else'  without  'if'	22	None	replace
127	[BUG]  [BUGGY]  else  if(options.hasOption(opt)&&  options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }  [CE]  'else'  without  'if'  [FE]    MissingArgumentException    [CONTEXT]    else  if  (arg.startsWith(   "-   "))  {  String  opt  =  Util.stripLeadingHyphens(arg);    [BUGGY]  else  if(options.hasOption(opt)&&  options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }  [BUGGY]    if  (options.hasOption(opt))    {  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	75	76	3	replace	else  if(options.hasOption(opt)&&  options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }	      if(options.hasOption(opt))    {    tokens.add(arg);    }    	non-compiled	[CE]  'else'  without  'if'	15	None	replace
128	[BUG]  [BUGGY]  if(options.hasOption(opt)||  opt.equals(   "-   "))  {  if(options.hasOption(opt)||  opt.equals( "-P "))  {  [CE]  reached  end  of  file  while  parsing  [FE]    ComparisonFailure    [CONTEXT]    else  if  (arg.startsWith(   "-   "))  {  String  opt  =  Util.stripLeadingHyphens(arg);    [BUGGY]  if(options.hasOption(opt)||  opt.equals(   "-   "))  {  if(options.hasOption(opt)||  opt.equals( "-P "))  {  [BUGGY]    {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	75	76	3	replace	if(options.hasOption(opt)||    opt.equals(   "-   "))    {    if(options.hasOption(opt)||  opt.equals( "-P "))  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	18	None	add
129	[BUG]  [BUGGY]  if(options.hasOption(opt)||  opt.equals(   "-   "))  {  if(options.hasOption(opt)||  opt.equals( "-D "))  {  [CE]  reached  end  of  file  while  parsing  [FE]      ComparisonFailure    [CONTEXT]    else  if  (arg.startsWith(   "-   "))  {  String  opt  =  Util.stripLeadingHyphens(arg);    [BUGGY]  if(options.hasOption(opt)||  opt.equals(   "-   "))  {  if(options.hasOption(opt)||  opt.equals( "-D "))  {  [BUGGY]    {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	75	76	3	replace	if(options.hasOption(opt)||    opt.equals(   "-   "))    {    if(options.hasOption(opt)||  opt.equals( "-D "))  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	18	None	add
130	[BUG]  [BUGGY]  Option  option  =  options.getOption(arg);  [CE]  'else'  without  'if'  [FE]                ComparisonFailure    [CONTEXT]    else  if  (arg.startsWith(   "-   "))  {  String  opt  =  Util.stripLeadingHyphens(arg);    [BUGGY]  Option  option  =  options.getOption(arg);  [BUGGY]    if  (options.hasOption(opt))    {  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	75	76	3	replace	Option  option  =  options.getOption(arg);	      if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    opt    =    Util.stripLeadingHyphens(opt);    }    else    {    options.add(opt);    }    	non-compiled	[CE]  'else'  without  'if'	17	None	replace
131	[BUG]  [BUGGY]  else  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  1));  }  [CE]  'else'  without  'if'  [FE]    AssertionFailedError    [CONTEXT]    else  if  (arg.startsWith(   "-   "))  {  String  opt  =  Util.stripLeadingHyphens(arg);    [BUGGY]  else  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  1));  }  [BUGGY]    if  (options.hasOption(opt))    {  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	75	76	3	replace	else  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  1));  }	      if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    }    	non-compiled	[CE]  'else'  without  'if'	11	None	replace
132	[BUG]  [BUGGY]  if(options.hasOption(opt)||  options.hasOption(opt))  {  Options.hasOption(opt)||  options.hasOption(opt))  {  [CE]  not  a  statement  [FE]    ComparisonFailure    [CONTEXT]    else  if  (arg.startsWith(   "-   "))  {  String  opt  =  Util.stripLeadingHyphens(arg);    [BUGGY]  if(options.hasOption(opt)||  options.hasOption(opt))  {  Options.hasOption(opt)||  options.hasOption(opt))  {  [BUGGY]    {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	75	76	3	replace	if(options.hasOption(opt)||    options.hasOption(opt))    {    Options.hasOption(opt)||  options.hasOption(opt))  {	  	non-compiled	[CE]  not  a  statement	3	None	add
133	[BUG]  [BUGGY]  String[]  options  =  options.getOptions(opt,  null);  [CE]  'else'  without  'if'  [FE]              ComparisonFailure    [CONTEXT]    else  if  (arg.startsWith(   "-   "))  {  String  opt  =  Util.stripLeadingHyphens(arg);    [BUGGY]  String[]  options  =  options.getOptions(opt,  null);  [BUGGY]    if  (options.hasOption(opt))    {  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	75	76	3	replace	String[]  options  =  options.getOptions(opt,  null);	      String[]    options    =    options.getOptions(opt);    	non-compiled	[CE]  'else'  without  'if'	24	None	replace
134	[BUG]  [BUGGY]  if(opt!=  null)  {  tokens.add(opt);  }  else  {  tokens.add(opt);  }  [CE]  'else'  without  'if'  [FE]                ComparisonFailure    [CONTEXT]    else  if  (arg.startsWith(   "-   "))  {  String  opt  =  Util.stripLeadingHyphens(arg);    [BUGGY]  if(opt!=  null)  {  tokens.add(opt);  }  else  {  tokens.add(opt);  }  [BUGGY]    {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	75	76	3	replace	if(opt!=  null)  {  tokens.add(opt);  }  else  {  tokens.add(opt);  }	      	non-compiled	[CE]  'else'  without  'if'	9	None	replace
135	[BUG]  [BUGGY]  if(opt!=  null)  {  tokens  =  new  String[options.size()  ];  for(int  i  =  0;  i  <  opt.length();  i++)  {  tokens.add(opt.charAt(i));  }  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure    [CONTEXT]    else  if  (arg.startsWith(   "-   "))  {  String  opt  =  Util.stripLeadingHyphens(arg);    [BUGGY]  if(opt!=  null)  {  tokens  =  new  String[options.size()  ];  for(int  i  =  0;  i  <  opt.length();  i++)  {  tokens.add(opt.charAt(i));  }  [BUGGY]    {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	75	76	3	replace	if(opt!=  null)  {  tokens  =  new  String[options.size()  ];  for(int  i  =  0;  i  <  opt.length();  i++)  {  tokens.add(opt.charAt(i));  }	      	non-compiled	[CE]  cannot  find  symbol	9	None	replace
136	[BUG]  [BUGGY]  if(opt  ==  null)  {  tokens.add(opt);  }  else  {  tokens.add(opt);  }  [CE]  'else'  without  'if'  [FE]                    ComparisonFailure    [CONTEXT]    else  if  (arg.startsWith(   "-   "))  {  String  opt  =  Util.stripLeadingHyphens(arg);    [BUGGY]  if(opt  ==  null)  {  tokens.add(opt);  }  else  {  tokens.add(opt);  }  [BUGGY]    {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	75	76	3	replace	if(opt  ==  null)  {  tokens.add(opt);  }  else  {  tokens.add(opt);  }	      	non-compiled	[CE]  'else'  without  'if'	9	None	replace
137	[BUG]  [BUGGY]  if(options.hasOption(arg.substring(0,  2)))  {  if(options.hasOption(arg.substring(0,  2))  ||  options.hasOption(arg.substring(0,  2)))  {  [CE]  reached  end  of  file  while  parsing  [FE]    UnrecognizedOptionException    [CONTEXT]    else  if  (arg.startsWith(   "-   "))  {  String  opt  =  Util.stripLeadingHyphens(arg);    [BUGGY]  if(options.hasOption(arg.substring(0,  2)))  {  if(options.hasOption(arg.substring(0,  2))  ||  options.hasOption(arg.substring(0,  2)))  {  [BUGGY]    {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	75	76	3	replace	if(options.hasOption(arg.substring(0,    2)))    {    if(options.hasOption(arg.substring(0,  2))  ||  options.hasOption(arg.substring(0,  2)))  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	7	None	add
138	[BUG]  [BUGGY]  if(options.hasOption(arg.substring(0,  2)))  {  if(options.hasOption(arg.substring(0,  2))  ||  options.hasOption(arg.substring(0,  2))  {  [CE]  ')'  expected  [FE]      UnrecognizedOptionException    [CONTEXT]    else  if  (arg.startsWith(   "-   "))  {  String  opt  =  Util.stripLeadingHyphens(arg);    [BUGGY]  if(options.hasOption(arg.substring(0,  2)))  {  if(options.hasOption(arg.substring(0,  2))  ||  options.hasOption(arg.substring(0,  2))  {  [BUGGY]    {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	75	76	3	replace	if(options.hasOption(arg.substring(0,    2)))    {    if(options.hasOption(arg.substring(0,  2))  ||  options.hasOption(arg.substring(0,  2))  {	  	non-compiled	[CE]  ')'  expected	7	None	add
139	[BUG]  [BUGGY]  timeout  [FE]    AssertionFailedError    [CONTEXT]    else  if  (arg.startsWith(   "-   "))  {  String  opt  =  Util.stripLeadingHyphens(arg);    [BUGGY]      if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  opt  =  Util.stripLeadingHyphens(opt);  }  while(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  opt  =  Util.stripLeadingHyphens(opt);  }  [BUGGY]    if  (options.hasOption(opt))    {  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	75	76	3	add	        if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    opt    =    Util.stripLeadingHyphens(opt);    }    while(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  opt  =  Util.stripLeadingHyphens(opt);  }	  	compilable	timeout	12	1	add
140	[BUG]  [BUGGY]      if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  opt  =  Util.stripLeadingHyphens(opt);  }  while(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  opt  =  Util.stripLeadingHyphens(opt);  }  timeout  [FE]    AssertionFailedError    [CONTEXT]    else  if  (arg.startsWith(   "-   "))  {  String  opt  =  Util.stripLeadingHyphens(arg);    [BUGGY]      if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  opt  =  Util.stripLeadingHyphens(opt);  }  while(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  opt  =  Util.stripLeadingHyphens(opt);  }  [BUGGY]    if  (options.hasOption(opt))    {  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	75	76	3	replace	        if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    opt    =    Util.stripLeadingHyphens(opt);    }    while(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  opt  =  Util.stripLeadingHyphens(opt);  }	  	compilable	timeout	12	1	add
141	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    ComparisonFailure    [CONTEXT]    else  if  (arg.startsWith(   "-   "))  {  String  opt  =  Util.stripLeadingHyphens(arg);    [BUGGY]  if(options.hasOption(opt)&&  opt.startsWith( ".- "))  {  [BUGGY]    {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	75	76	3	add	if(options.hasOption(opt)&&  opt.startsWith( ".- "))  {	  if(options.hasOption(opt)||    opt.startsWith(   "-   "))    {    	compilable	  [FE]  AssertionFailedError  	2	9	replace
142	[BUG]  [BUGGY]  if(options.hasOption(opt)&&  opt.startsWith( ".- "))  {  [FE]  AssertionFailedError  [FE]    ComparisonFailure    [CONTEXT]    else  if  (arg.startsWith(   "-   "))  {  String  opt  =  Util.stripLeadingHyphens(arg);    [BUGGY]  if(options.hasOption(opt)&&  opt.startsWith( ".- "))  {  [BUGGY]    {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	75	76	3	replace	if(options.hasOption(opt)&&  opt.startsWith( ".- "))  {	  if(options.hasOption(opt)||    opt.startsWith(   "-   "))    {    	compilable	  [FE]  AssertionFailedError  	2	9	replace
143	[BUG]  [BUGGY]  if(options.hasOption(opt)||  opt.startsWith( "- "))  {  tokens.add(arg);  }  [CE]  'else'  without  'if'  [FE]    MissingArgumentException    [CONTEXT]    else  if  (arg.startsWith(   "-   "))  {  String  opt  =  Util.stripLeadingHyphens(arg);    [BUGGY]  if(options.hasOption(opt)||  opt.startsWith( "- "))  {  tokens.add(arg);  }  [BUGGY]    if  (options.hasOption(opt))    {  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	75	76	3	replace	if(options.hasOption(opt)||  opt.startsWith( "- "))  {  tokens.add(arg);  }	      if(options.hasOption(opt))    {    tokens.add(arg);    }    	non-compiled	[CE]  'else'  without  'if'	15	None	replace
144	[BUG]  [BUGGY]  if(options.hasOption(opt)||  opt.equals( "- "))  {  tokens.add(arg);  }  [CE]  'else'  without  'if'  [FE]      MissingArgumentException    [CONTEXT]    else  if  (arg.startsWith(   "-   "))  {  String  opt  =  Util.stripLeadingHyphens(arg);    [BUGGY]  if(options.hasOption(opt)||  opt.equals( "- "))  {  tokens.add(arg);  }  [BUGGY]    if  (options.hasOption(opt))    {  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	75	76	3	replace	if(options.hasOption(opt)||  opt.equals( "- "))  {  tokens.add(arg);  }	      if(options.hasOption(opt))    {    tokens.add(arg);    }    	non-compiled	[CE]  'else'  without  'if'	15	None	replace
145	[BUG]  [BUGGY]  tokens.add(arg.substring(0,  1));  [CE]  'else'  without  'if'  [FE]    AssertionFailedError    [CONTEXT]    else  if  (arg.startsWith(   "-   "))  {  String  opt  =  Util.stripLeadingHyphens(arg);    [BUGGY]  tokens.add(arg.substring(0,  1));  [BUGGY]    if  (options.hasOption(opt))    {  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	75	76	3	replace	tokens.add(arg.substring(0,  1));	      if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    }    	non-compiled	[CE]  'else'  without  'if'	11	None	replace
146	[BUG]  [BUGGY]  if(opt.startsWith( "- "))  {  String[]  arguments  =  opt.split( "- ");  for(int  i  =  0;  i  <  arguments.length;  ++i)  {  tokens.add(arguments[i]);  }  [CE]  variable  arguments  is  already  defined  in  method  flatten(Options,String[],boolean)  [FE]                ComparisonFailure    [CONTEXT]    else  if  (arg.startsWith(   "-   "))  {  String  opt  =  Util.stripLeadingHyphens(arg);    [BUGGY]  if(opt.startsWith( "- "))  {  String[]  arguments  =  opt.split( "- ");  for(int  i  =  0;  i  <  arguments.length;  ++i)  {  tokens.add(arguments[i]);  }  [BUGGY]    {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	75	76	3	replace	if(opt.startsWith( "- "))  {  String[]  arguments  =  opt.split( "- ");  for(int  i  =  0;  i  <  arguments.length;  ++i)  {  tokens.add(arguments[i]);  }	      	non-compiled	[CE]  variable  arguments  is  already  defined  in  method  flatten(Options,String[],boolean)	9	None	replace
147	[BUG]  [BUGGY]  if(opt.startsWith( "- "))  {  tokens.add(opt);  }  else  {  tokens.add(opt);  }  [CE]  'else'  without  'if'  [FE]                  ComparisonFailure    [CONTEXT]    else  if  (arg.startsWith(   "-   "))  {  String  opt  =  Util.stripLeadingHyphens(arg);    [BUGGY]  if(opt.startsWith( "- "))  {  tokens.add(opt);  }  else  {  tokens.add(opt);  }  [BUGGY]    {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	75	76	3	replace	if(opt.startsWith( "- "))  {  tokens.add(opt);  }  else  {  tokens.add(opt);  }	      	non-compiled	[CE]  'else'  without  'if'	9	None	replace
148	[BUG]  [BUGGY]  if(opt.startsWith( "- "))  {  String[]  arguments  =  opt.split( "- ");  for(int  i  =  0,  len  =  arguments.length;  i  <  len;  ++i)  {  tokens.add(arguments[i]);  }  [CE]  variable  arguments  is  already  defined  in  method  flatten(Options,String[],boolean)  [FE]                    ComparisonFailure    [CONTEXT]    else  if  (arg.startsWith(   "-   "))  {  String  opt  =  Util.stripLeadingHyphens(arg);    [BUGGY]  if(opt.startsWith( "- "))  {  String[]  arguments  =  opt.split( "- ");  for(int  i  =  0,  len  =  arguments.length;  i  <  len;  ++i)  {  tokens.add(arguments[i]);  }  [BUGGY]    {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	75	76	3	replace	if(opt.startsWith( "- "))  {  String[]  arguments  =  opt.split( "- ");  for(int  i  =  0,  len  =  arguments.length;  i  <  len;  ++i)  {  tokens.add(arguments[i]);  }	      	non-compiled	[CE]  variable  arguments  is  already  defined  in  method  flatten(Options,String[],boolean)	9	None	replace
149	[BUG]  [BUGGY]      if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  if(options.hasOption(opt))  <  tokens.add(arg.substring(0,  2));  }  [CE]  >  expected  [FE]    AssertionFailedError    [CONTEXT]    else  if  (arg.startsWith(   "-   "))  {  String  opt  =  Util.stripLeadingHyphens(arg);    [BUGGY]      if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  if(options.hasOption(opt))  <  tokens.add(arg.substring(0,  2));  }  [BUGGY]    if  (options.hasOption(opt))    {  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	75	76	3	replace	        if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    }    if(options.hasOption(opt))  <  tokens.add(arg.substring(0,  2));  }	  	non-compiled	[CE]  >  expected	10	None	add
150	[BUG]  [BUGGY]  Option  option  =  options.getOption(arg.substring(0,  2));  [CE]  'else'  without  'if'  [FE]              ComparisonFailure    [CONTEXT]    else  if  (arg.startsWith(   "-   "))  {  String  opt  =  Util.stripLeadingHyphens(arg);    [BUGGY]  Option  option  =  options.getOption(arg.substring(0,  2));  [BUGGY]    if  (options.hasOption(opt))    {  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	75	76	3	replace	Option  option  =  options.getOption(arg.substring(0,  2));	      if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    }    else    {    options.add(opt);    }    	non-compiled	[CE]  'else'  without  'if'	16	None	replace
151	[BUG]  [BUGGY]  tokens.add(arg.substring(0,  2));  }  else  {  options.add(opt);  }  [CE]  'else'  without  'if'  [FE]                ComparisonFailure    [CONTEXT]    else  if  (arg.startsWith(   "-   "))  {  String  opt  =  Util.stripLeadingHyphens(arg);    [BUGGY]  tokens.add(arg.substring(0,  2));  }  else  {  options.add(opt);  }  [BUGGY]    if  (options.hasOption(opt))    {  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	75	76	3	replace	tokens.add(arg.substring(0,  2));  }  else  {  options.add(opt);  }	      if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    }    else    {    options.add(opt);    }    	non-compiled	[CE]  'else'  without  'if'	16	None	replace
152	[BUG]  [BUGGY]  String[]  arguments  =  Util.stripLeadingHyphens(opt,  arg.length());  [CE]  'else'  without  'if'  [FE]        ComparisonFailure    [CONTEXT]    else  if  (arg.startsWith(   "-   "))  {  String  opt  =  Util.stripLeadingHyphens(arg);    [BUGGY]  String[]  arguments  =  Util.stripLeadingHyphens(opt,  arg.length());  [BUGGY]    if  (options.hasOption(opt))    {  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	75	76	3	replace	String[]  arguments  =  Util.stripLeadingHyphens(opt,  arg.length());	      String[]    arguments    =    Util.stripLeadingHyphens(opt);    	non-compiled	[CE]  'else'  without  'if'	26	None	replace
153	[BUG]  [BUGGY]  Option  options  =  options.getOption(arg);  [CE]  'else'  without  'if'  [FE]        ComparisonFailure    [CONTEXT]    else  if  (arg.startsWith(   "-   "))  {  String  opt  =  Util.stripLeadingHyphens(arg);    [BUGGY]  Option  options  =  options.getOption(arg);  [BUGGY]    if  (options.hasOption(opt))    {  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	75	76	3	replace	Option  options  =  options.getOption(arg);	      Option    options    =    options.getOption(opt);    	non-compiled	[CE]  'else'  without  'if'	20	None	replace
154	[BUG]  [BUGGY]  if(options.hasOption(arg))  {  tokens.add(arg.substring(0,  2));  opt  =  Util.stripLeadingHyphens(opt);  }  else  {  options.add(opt);  }  [CE]  'else'  without  'if'  [FE]                ComparisonFailure    [CONTEXT]    else  if  (arg.startsWith(   "-   "))  {  String  opt  =  Util.stripLeadingHyphens(arg);    [BUGGY]  if(options.hasOption(arg))  {  tokens.add(arg.substring(0,  2));  opt  =  Util.stripLeadingHyphens(opt);  }  else  {  options.add(opt);  }  [BUGGY]    if  (options.hasOption(opt))    {  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	75	76	3	replace	if(options.hasOption(arg))  {  tokens.add(arg.substring(0,  2));  opt  =  Util.stripLeadingHyphens(opt);  }  else  {  options.add(opt);  }	      if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    opt    =    Util.stripLeadingHyphens(opt);    }    else    {    options.add(opt);    }    	non-compiled	[CE]  'else'  without  'if'	17	None	replace
155	[BUG]  [BUGGY]  if(options.hasOption(arg))  {  tokens.add(arg.substring(0,  2));  opt  =  Util.stripLeadingHyphens(opt);  }  [CE]  'else'  without  'if'  [FE]                  ComparisonFailure    [CONTEXT]    else  if  (arg.startsWith(   "-   "))  {  String  opt  =  Util.stripLeadingHyphens(arg);    [BUGGY]  if(options.hasOption(arg))  {  tokens.add(arg.substring(0,  2));  opt  =  Util.stripLeadingHyphens(opt);  }  [BUGGY]    if  (options.hasOption(opt))    {  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	75	76	3	replace	if(options.hasOption(arg))  {  tokens.add(arg.substring(0,  2));  opt  =  Util.stripLeadingHyphens(opt);  }	      if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    opt    =    Util.stripLeadingHyphens(opt);    }    else    {    options.add(opt);    }    	non-compiled	[CE]  'else'  without  'if'	17	None	replace
156	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    UnrecognizedOptionException    [CONTEXT]    else  if  (arg.startsWith(   "-   "))  {  String  opt  =  Util.stripLeadingHyphens(arg);    [BUGGY]  if(options.hasOption(arg.substring(0,  1)))  {  [BUGGY]    {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	75	76	3	add	if(options.hasOption(arg.substring(0,  1)))  {	  if(options.hasOption(arg.substring(0,    2)))    {    	compilable	  [FE]  AssertionFailedError  	8	9	replace
157	[BUG]  [BUGGY]  if(options.hasOption(arg.substring(0,  1)))  {  [FE]  AssertionFailedError  [FE]    UnrecognizedOptionException    [CONTEXT]    else  if  (arg.startsWith(   "-   "))  {  String  opt  =  Util.stripLeadingHyphens(arg);    [BUGGY]  if(options.hasOption(arg.substring(0,  1)))  {  [BUGGY]    {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	75	76	3	replace	if(options.hasOption(arg.substring(0,  1)))  {	  if(options.hasOption(arg.substring(0,    2)))    {    	compilable	  [FE]  AssertionFailedError  	8	9	replace
158	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingArguments(arg);  [CE]  'else'  without  'if'  [FE]    MissingArgumentException    [CONTEXT]    else  if  (arg.startsWith(   "-   "))  {  String  opt  =  Util.stripLeadingHyphens(arg);    [BUGGY]  aughtExceptionHandler.handleMissingArguments(arg);  [BUGGY]    if  (options.hasOption(opt))    {  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	75	76	3	replace	aughtExceptionHandler.handleMissingArguments(arg);	      if(opt!=    null)    {    tokens.add(arg);    }    	non-compiled	[CE]  'else'  without  'if'	30	None	replace
159	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingHyphens(arg);  [CE]  'else'  without  'if'  [FE]            ComparisonFailure    [CONTEXT]    else  if  (arg.startsWith(   "-   "))  {  String  opt  =  Util.stripLeadingHyphens(arg);    [BUGGY]  aughtExceptionHandler.handleMissingHyphens(arg);  [BUGGY]    if  (options.hasOption(opt))    {  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	75	76	3	replace	aughtExceptionHandler.handleMissingHyphens(arg);	      if(opt!=    null)    {    if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    }    	non-compiled	[CE]  'else'  without  'if'	28	None	replace
160	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    AssertionFailedError    [CONTEXT]    else  if  (arg.startsWith(   "-   "))  {  String  opt  =  Util.stripLeadingHyphens(arg);    [BUGGY]  if(options.hasOption(opt)&&  arg.startsWith( "- "))  {  [BUGGY]    {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	75	76	3	add	if(options.hasOption(opt)&&  arg.startsWith( "- "))  {	  if(options.hasOption(opt)&&    opt.startsWith(   "-   "))    {    	compilable	  [FE]  ComparisonFailure  	6	3	replace
161	[BUG]  [BUGGY]  if(options.hasOption(opt)&&  arg.startsWith( "- "))  {  [FE]  ComparisonFailure  [FE]    AssertionFailedError    [CONTEXT]    else  if  (arg.startsWith(   "-   "))  {  String  opt  =  Util.stripLeadingHyphens(arg);    [BUGGY]  if(options.hasOption(opt)&&  arg.startsWith( "- "))  {  [BUGGY]    {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	75	76	3	replace	if(options.hasOption(opt)&&  arg.startsWith( "- "))  {	  if(options.hasOption(opt)&&    opt.startsWith(   "-   "))    {    	compilable	  [FE]  ComparisonFailure  	6	3	replace
162	[BUG]  [BUGGY]  String[]  options  =  options.toArray(new  String[opt.size()  ]);  [CE]  'else'  without  'if'  [FE]            ComparisonFailure    [CONTEXT]    else  if  (arg.startsWith(   "-   "))  {  String  opt  =  Util.stripLeadingHyphens(arg);    [BUGGY]  String[]  options  =  options.toArray(new  String[opt.size()  ]);  [BUGGY]    if  (options.hasOption(opt))    {  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	75	76	3	replace	String[]  options  =  options.toArray(new  String[opt.size()  ]);	      String[]    options    =    options.getOptions();    	non-compiled	[CE]  'else'  without  'if'	23	None	replace
163	[BUG]  [BUGGY]  [FE]  MissingArgumentException  [FE]          ComparisonFailure    [CONTEXT]    else  if  (arg.startsWith(   "-   "))  {  String  opt  =  Util.stripLeadingHyphens(arg);    [BUGGY]  if(opt!=  null)  {  if(!stopAtNonOption)  {  tokens.add(arg);  }  [BUGGY]    if  (options.hasOption(opt))    {  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	75	76	3	add	if(opt!=  null)  {  if(!stopAtNonOption)  {  tokens.add(arg);  }	      if(opt!=    null)    {    if(options.hasOption(opt))    {    tokens.add(arg);    }    	compilable	  [FE]  MissingArgumentException  	27	10	replace
164	[BUG]  [BUGGY]  if(opt!=  null)  {  if(!stopAtNonOption)  {  tokens.add(arg);  }  [FE]  MissingArgumentException  [FE]          ComparisonFailure    [CONTEXT]    else  if  (arg.startsWith(   "-   "))  {  String  opt  =  Util.stripLeadingHyphens(arg);    [BUGGY]  if(opt!=  null)  {  if(!stopAtNonOption)  {  tokens.add(arg);  }  [BUGGY]    if  (options.hasOption(opt))    {  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	75	76	3	replace	if(opt!=  null)  {  if(!stopAtNonOption)  {  tokens.add(arg);  }	      if(opt!=    null)    {    if(options.hasOption(opt))    {    tokens.add(arg);    }    	compilable	  [FE]  MissingArgumentException  	27	10	replace
165	[BUG]  [BUGGY]  [FE]  MissingArgumentException  [FE]            ComparisonFailure    [CONTEXT]    else  if  (arg.startsWith(   "-   "))  {  String  opt  =  Util.stripLeadingHyphens(arg);    [BUGGY]  if(opt!=  null)  {  if(options.hasOption(arg))  {  tokens.add(arg);  }  [BUGGY]    if  (options.hasOption(opt))    {  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	75	76	3	add	if(opt!=  null)  {  if(options.hasOption(arg))  {  tokens.add(arg);  }	      if(opt!=    null)    {    if(options.hasOption(opt))    {    tokens.add(arg);    }    	compilable	  [FE]  MissingArgumentException  	27	11	replace
166	[BUG]  [BUGGY]  if(opt!=  null)  {  if(options.hasOption(arg))  {  tokens.add(arg);  }  [FE]  MissingArgumentException  [FE]            ComparisonFailure    [CONTEXT]    else  if  (arg.startsWith(   "-   "))  {  String  opt  =  Util.stripLeadingHyphens(arg);    [BUGGY]  if(opt!=  null)  {  if(options.hasOption(arg))  {  tokens.add(arg);  }  [BUGGY]    if  (options.hasOption(opt))    {  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	75	76	3	replace	if(opt!=  null)  {  if(options.hasOption(arg))  {  tokens.add(arg);  }	      if(opt!=    null)    {    if(options.hasOption(opt))    {    tokens.add(arg);    }    	compilable	  [FE]  MissingArgumentException  	27	11	replace
167	[BUG]  [BUGGY]      if(options.hasOption(opt))  {  tokens.add(arg);  }  if(options.hasOption(opt))  <  tokens.add(arg);  }  [CE]  >  expected  [FE]    MissingArgumentException    [CONTEXT]    else  if  (arg.startsWith(   "-   "))  {  String  opt  =  Util.stripLeadingHyphens(arg);    [BUGGY]      if(options.hasOption(opt))  {  tokens.add(arg);  }  if(options.hasOption(opt))  <  tokens.add(arg);  }  [BUGGY]    if  (options.hasOption(opt))    {  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	75	76	3	replace	        if(options.hasOption(opt))    {    tokens.add(arg);    }    if(options.hasOption(opt))  <  tokens.add(arg);  }	  	non-compiled	[CE]  >  expected	14	None	add
