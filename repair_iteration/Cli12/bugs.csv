bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	failing_test_number	action	patch
1	[BUG] [BUGGY] if (options.hasOption(arg.substring(0, 2)))  { [FE] ComparisonFailure [CONTEXT] if (options.hasOption(opt)) { tokens.add(arg); } else { [BUGGY] if (options.hasOption(arg.substring(0, 2)))     { [BUGGY] {   tokens.add(arg.substring(0, 2)); // -D tokens.add(arg.substring(2)); // property=value } else { eatTheRest = stopAtNonOption; tokens.add(arg); [CLASS] GnuParser [METHOD] flatten [RETURN_TYPE] String[]  Options options String[] arguments boolean stopAtNonOption [VARIABLES] Options options boolean eatTheRest stopAtNonOption List tokens String[] arguments String arg opt int i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	
2	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] if (options.hasOption(opt)) { tokens.add(arg); } else { [BUGGY] [BUGGY] if (options.hasOption(arg.substring(0, 2)))     { {   tokens.add(arg.substring(0, 2)); // -D tokens.add(arg.substring(2)); // property=value } else { eatTheRest = stopAtNonOption; tokens.add(arg); [CLASS] GnuParser [METHOD] flatten [RETURN_TYPE] String[]  Options options String[] arguments boolean stopAtNonOption [VARIABLES] Options options boolean eatTheRest stopAtNonOption List tokens String[] arguments String arg opt int i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	add	
3	[BUG] [BUGGY] tokens.add(arg.substring(0, 2)); // -D  tokens.add(arg.substring(2)); // property=value   } [FE] ComparisonFailure [CONTEXT] if (options.hasOption(opt)) { tokens.add(arg); } else { if (options.hasOption(arg.substring(0, 2))) {   [BUGGY] tokens.add(arg.substring(0, 2)); // -D      tokens.add(arg.substring(2)); // property=value          } [BUGGY] tokens.add(arg.substring(2)); // property=value } else { eatTheRest = stopAtNonOption; tokens.add(arg); } } [CLASS] GnuParser [METHOD] flatten [RETURN_TYPE] String[]  Options options String[] arguments boolean stopAtNonOption [VARIABLES] Options options boolean eatTheRest stopAtNonOption List tokens String[] arguments String arg opt int i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	
4	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] if (options.hasOption(opt)) { tokens.add(arg); } else { if (options.hasOption(arg.substring(0, 2))) {   [BUGGY] [BUGGY] tokens.add(arg.substring(0, 2)); // -D      tokens.add(arg.substring(2)); // property=value          } tokens.add(arg.substring(2)); // property=value } else { eatTheRest = stopAtNonOption; tokens.add(arg); } } [CLASS] GnuParser [METHOD] flatten [RETURN_TYPE] String[]  Options options String[] arguments boolean stopAtNonOption [VARIABLES] Options options boolean eatTheRest stopAtNonOption List tokens String[] arguments String arg opt int i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	add	
5	[BUG] [BUGGY] tokens.add(arg.substring(2)); // property=value  } [FE] ComparisonFailure [CONTEXT] { tokens.add(arg); } else { if (options.hasOption(arg.substring(0, 2))) {   tokens.add(arg.substring(0, 2)); // -D [BUGGY] tokens.add(arg.substring(2)); // property=value     } [BUGGY] } else { eatTheRest = stopAtNonOption; tokens.add(arg); } } [CLASS] GnuParser [METHOD] flatten [RETURN_TYPE] String[]  Options options String[] arguments boolean stopAtNonOption [VARIABLES] Options options boolean eatTheRest stopAtNonOption List tokens String[] arguments String arg opt int i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	
6	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] { tokens.add(arg); } else { if (options.hasOption(arg.substring(0, 2))) {   tokens.add(arg.substring(0, 2)); // -D [BUGGY] [BUGGY] tokens.add(arg.substring(2)); // property=value     } } else { eatTheRest = stopAtNonOption; tokens.add(arg); } } [CLASS] GnuParser [METHOD] flatten [RETURN_TYPE] String[]  Options options String[] arguments boolean stopAtNonOption [VARIABLES] Options options boolean eatTheRest stopAtNonOption List tokens String[] arguments String arg opt int i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	
8	[BUG] [BUGGY] List tokens = new ArrayList(); [FE] ComparisonFailure [CONTEXT] { [BUGGY] List tokens = new ArrayList(); [BUGGY]  boolean eatTheRest = false; for (int i = 0; i < arguments.length; i++) { String arg = arguments[i]; if ("--".equals(arg)) { eatTheRest = true; [CLASS] GnuParser [METHOD] flatten [RETURN_TYPE] String[]  Options options String[] arguments boolean stopAtNonOption [VARIABLES] Options options boolean eatTheRest stopAtNonOption List tokens String[] arguments String arg opt int i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	54	54	3	replace	
9	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] { [BUGGY] [BUGGY] List tokens = new ArrayList(); boolean eatTheRest = false; for (int i = 0; i < arguments.length; i++) { String arg = arguments[i]; if ("--".equals(arg)) { eatTheRest = true; [CLASS] GnuParser [METHOD] flatten [RETURN_TYPE] String[]  Options options String[] arguments boolean stopAtNonOption [VARIABLES] Options options boolean eatTheRest stopAtNonOption List tokens String[] arguments String arg opt int i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	54	54	3	add	
10	[BUG] [BUGGY] boolean eatTheRest = false; [FE] ComparisonFailure [CONTEXT] { List tokens = new ArrayList(); [BUGGY] boolean eatTheRest = false; [BUGGY]  for (int i = 0; i < arguments.length; i++) { String arg = arguments[i]; if ("--".equals(arg)) { eatTheRest = true; tokens.add("--"); } [CLASS] GnuParser [METHOD] flatten [RETURN_TYPE] String[]  Options options String[] arguments boolean stopAtNonOption [VARIABLES] Options options boolean eatTheRest stopAtNonOption List tokens String[] arguments String arg opt int i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	56	56	3	replace	
11	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] { List tokens = new ArrayList(); [BUGGY] [BUGGY] boolean eatTheRest = false; for (int i = 0; i < arguments.length; i++) { String arg = arguments[i]; if ("--".equals(arg)) { eatTheRest = true; tokens.add("--"); } [CLASS] GnuParser [METHOD] flatten [RETURN_TYPE] String[]  Options options String[] arguments boolean stopAtNonOption [VARIABLES] Options options boolean eatTheRest stopAtNonOption List tokens String[] arguments String arg opt int i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	56	56	3	add	
12	[BUG] [BUGGY] for (int i = 0; i < arguments.length; i++) { [FE] ComparisonFailure [CONTEXT] { List tokens = new ArrayList(); boolean eatTheRest = false; [BUGGY] for (int i = 0; i < arguments.length; i++)  { [BUGGY] { String arg = arguments[i]; if ("--".equals(arg)) { eatTheRest = true; tokens.add("--"); } else if ("-".equals(arg)) { [CLASS] GnuParser [METHOD] flatten [RETURN_TYPE] String[]  Options options String[] arguments boolean stopAtNonOption [VARIABLES] Options options boolean eatTheRest stopAtNonOption List tokens String[] arguments String arg opt int i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	58	59	3	replace	
13	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] { List tokens = new ArrayList(); boolean eatTheRest = false; [BUGGY] [BUGGY] for (int i = 0; i < arguments.length; i++)  { { String arg = arguments[i]; if ("--".equals(arg)) { eatTheRest = true; tokens.add("--"); } else if ("-".equals(arg)) { [CLASS] GnuParser [METHOD] flatten [RETURN_TYPE] String[]  Options options String[] arguments boolean stopAtNonOption [VARIABLES] Options options boolean eatTheRest stopAtNonOption List tokens String[] arguments String arg opt int i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	58	59	3	add	
14	[BUG] [BUGGY] String arg = arguments[i]; [FE] ComparisonFailure [CONTEXT] { List tokens = new ArrayList(); boolean eatTheRest = false; for (int i = 0; i < arguments.length; i++) { [BUGGY] String arg = arguments[i]; [BUGGY]  if ("--".equals(arg)) { eatTheRest = true; tokens.add("--"); } else if ("-".equals(arg)) { tokens.add("-"); } [CLASS] GnuParser [METHOD] flatten [RETURN_TYPE] String[]  Options options String[] arguments boolean stopAtNonOption [VARIABLES] Options options boolean eatTheRest stopAtNonOption List tokens String[] arguments String arg opt int i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	
15	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] { List tokens = new ArrayList(); boolean eatTheRest = false; for (int i = 0; i < arguments.length; i++) { [BUGGY] [BUGGY] String arg = arguments[i]; if ("--".equals(arg)) { eatTheRest = true; tokens.add("--"); } else if ("-".equals(arg)) { tokens.add("-"); } [CLASS] GnuParser [METHOD] flatten [RETURN_TYPE] String[]  Options options String[] arguments boolean stopAtNonOption [VARIABLES] Options options boolean eatTheRest stopAtNonOption List tokens String[] arguments String arg opt int i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	add	
16	[BUG] [BUGGY] if ("--".equals(arg)) { [FE] ComparisonFailure [CONTEXT] { List tokens = new ArrayList(); boolean eatTheRest = false; for (int i = 0; i < arguments.length; i++) { String arg = arguments[i]; [BUGGY] if ("--".equals(arg))   { [BUGGY] { eatTheRest = true; tokens.add("--"); } else if ("-".equals(arg)) { tokens.add("-"); } else if (arg.startsWith("-")) { [CLASS] GnuParser [METHOD] flatten [RETURN_TYPE] String[]  Options options String[] arguments boolean stopAtNonOption [VARIABLES] Options options boolean eatTheRest stopAtNonOption List tokens String[] arguments String arg opt int i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	
17	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] { List tokens = new ArrayList(); boolean eatTheRest = false; for (int i = 0; i < arguments.length; i++) { String arg = arguments[i]; [BUGGY] [BUGGY] if ("--".equals(arg))   { { eatTheRest = true; tokens.add("--"); } else if ("-".equals(arg)) { tokens.add("-"); } else if (arg.startsWith("-")) { [CLASS] GnuParser [METHOD] flatten [RETURN_TYPE] String[]  Options options String[] arguments boolean stopAtNonOption [VARIABLES] Options options boolean eatTheRest stopAtNonOption List tokens String[] arguments String arg opt int i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	add	
18	[BUG] [BUGGY] else if ("-".equals(arg)) { [FE] ComparisonFailure [CONTEXT] for (int i = 0; i < arguments.length; i++) { String arg = arguments[i]; if ("--".equals(arg)) { eatTheRest = true; tokens.add("--"); } [BUGGY] else if ("-".equals(arg))   { [BUGGY] { tokens.add("-"); } else if (arg.startsWith("-")) { String opt = Util.stripLeadingHyphens(arg); if (options.hasOption(opt)) { tokens.add(arg); [CLASS] GnuParser [METHOD] flatten [RETURN_TYPE] String[]  Options options String[] arguments boolean stopAtNonOption [VARIABLES] Options options boolean eatTheRest stopAtNonOption List tokens String[] arguments String arg opt int i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	67	68	3	replace	
19	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] for (int i = 0; i < arguments.length; i++) { String arg = arguments[i]; if ("--".equals(arg)) { eatTheRest = true; tokens.add("--"); } [BUGGY] [BUGGY] else if ("-".equals(arg))   { { tokens.add("-"); } else if (arg.startsWith("-")) { String opt = Util.stripLeadingHyphens(arg); if (options.hasOption(opt)) { tokens.add(arg); [CLASS] GnuParser [METHOD] flatten [RETURN_TYPE] String[]  Options options String[] arguments boolean stopAtNonOption [VARIABLES] Options options boolean eatTheRest stopAtNonOption List tokens String[] arguments String arg opt int i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	67	68	3	add	
20	[BUG] [BUGGY] else if (arg.startsWith("-")) { [FE] ComparisonFailure [CONTEXT] if ("--".equals(arg)) { eatTheRest = true; tokens.add("--"); } else if ("-".equals(arg)) { tokens.add("-"); } [BUGGY] else if (arg.startsWith("-"))   { [BUGGY] { String opt = Util.stripLeadingHyphens(arg); if (options.hasOption(opt)) { tokens.add(arg); } else { if (options.hasOption(arg.substring(0, 2))) [CLASS] GnuParser [METHOD] flatten [RETURN_TYPE] String[]  Options options String[] arguments boolean stopAtNonOption [VARIABLES] Options options boolean eatTheRest stopAtNonOption List tokens String[] arguments String arg opt int i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	71	72	3	replace	
21	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] if ("--".equals(arg)) { eatTheRest = true; tokens.add("--"); } else if ("-".equals(arg)) { tokens.add("-"); } [BUGGY] [BUGGY] else if (arg.startsWith("-"))   { { String opt = Util.stripLeadingHyphens(arg); if (options.hasOption(opt)) { tokens.add(arg); } else { if (options.hasOption(arg.substring(0, 2))) [CLASS] GnuParser [METHOD] flatten [RETURN_TYPE] String[]  Options options String[] arguments boolean stopAtNonOption [VARIABLES] Options options boolean eatTheRest stopAtNonOption List tokens String[] arguments String arg opt int i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	71	72	3	add	
22	[BUG] [BUGGY] String opt = Util.stripLeadingHyphens(arg); [FE] ComparisonFailure [CONTEXT] { eatTheRest = true; tokens.add("--"); } else if ("-".equals(arg)) { tokens.add("-"); } else if (arg.startsWith("-")) { [BUGGY] String opt = Util.stripLeadingHyphens(arg); [BUGGY]  if (options.hasOption(opt)) { tokens.add(arg); } else { if (options.hasOption(arg.substring(0, 2))) {  [CLASS] GnuParser [METHOD] flatten [RETURN_TYPE] String[]  Options options String[] arguments boolean stopAtNonOption [VARIABLES] Options options boolean eatTheRest stopAtNonOption List tokens String[] arguments String arg opt int i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	73	73	3	replace	
23	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] { eatTheRest = true; tokens.add("--"); } else if ("-".equals(arg)) { tokens.add("-"); } else if (arg.startsWith("-")) { [BUGGY] [BUGGY] String opt = Util.stripLeadingHyphens(arg); if (options.hasOption(opt)) { tokens.add(arg); } else { if (options.hasOption(arg.substring(0, 2))) {  [CLASS] GnuParser [METHOD] flatten [RETURN_TYPE] String[]  Options options String[] arguments boolean stopAtNonOption [VARIABLES] Options options boolean eatTheRest stopAtNonOption List tokens String[] arguments String arg opt int i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	73	73	3	add	
24	[BUG] [BUGGY] if (options.hasOption(opt)) { [FE] ComparisonFailure [CONTEXT] else if (arg.startsWith("-")) { String opt = Util.stripLeadingHyphens(arg); [BUGGY] if (options.hasOption(opt))    { [BUGGY] { tokens.add(arg); } else { if (options.hasOption(arg.substring(0, 2))) {   tokens.add(arg.substring(0, 2)); // -D [CLASS] GnuParser [METHOD] flatten [RETURN_TYPE] String[]  Options options String[] arguments boolean stopAtNonOption [VARIABLES] Options options boolean eatTheRest stopAtNonOption List tokens String[] arguments String arg opt int i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	75	76	3	replace	
25	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] else if (arg.startsWith("-")) { String opt = Util.stripLeadingHyphens(arg); [BUGGY] [BUGGY] if (options.hasOption(opt))    { { tokens.add(arg); } else { if (options.hasOption(arg.substring(0, 2))) {   tokens.add(arg.substring(0, 2)); // -D [CLASS] GnuParser [METHOD] flatten [RETURN_TYPE] String[]  Options options String[] arguments boolean stopAtNonOption [VARIABLES] Options options boolean eatTheRest stopAtNonOption List tokens String[] arguments String arg opt int i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	75	76	3	add	
27	[BUG] [BUGGY] if (eatTheRest) { [FE] ComparisonFailure [CONTEXT] eatTheRest = stopAtNonOption; tokens.add(arg); } } } else { tokens.add(arg); } [BUGGY] if (eatTheRest)   { [BUGGY] { for (i++; i < arguments.length; i++) { tokens.add(arguments[i]); } } } return (String[]) tokens.toArray(new String[tokens.size()]); } [CLASS] GnuParser [METHOD] flatten [RETURN_TYPE] String[]  Options options String[] arguments boolean stopAtNonOption [VARIABLES] Options options boolean eatTheRest stopAtNonOption List tokens String[] arguments String arg opt int i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	100	101	3	replace	
28	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] eatTheRest = stopAtNonOption; tokens.add(arg); } } } else { tokens.add(arg); } [BUGGY] [BUGGY] if (eatTheRest)   { { for (i++; i < arguments.length; i++) { tokens.add(arguments[i]); } } } return (String[]) tokens.toArray(new String[tokens.size()]); } [CLASS] GnuParser [METHOD] flatten [RETURN_TYPE] String[]  Options options String[] arguments boolean stopAtNonOption [VARIABLES] Options options boolean eatTheRest stopAtNonOption List tokens String[] arguments String arg opt int i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	100	101	3	add	
29	[BUG] [BUGGY] return (String[]) tokens.toArray(new String[tokens.size()]); [FE] ComparisonFailure [CONTEXT] if (eatTheRest) { for (i++; i < arguments.length; i++) { tokens.add(arguments[i]); } } } [BUGGY] return (String[]) tokens.toArray(new String[tokens.size()]); [BUGGY] } [CLASS] GnuParser [METHOD] flatten [RETURN_TYPE] String[]  Options options String[] arguments boolean stopAtNonOption [VARIABLES] Options options boolean eatTheRest stopAtNonOption List tokens String[] arguments String arg opt int i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	109	109	3	replace	
30	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] if (eatTheRest) { for (i++; i < arguments.length; i++) { tokens.add(arguments[i]); } } } [BUGGY] [BUGGY] return (String[]) tokens.toArray(new String[tokens.size()]); } [CLASS] GnuParser [METHOD] flatten [RETURN_TYPE] String[]  Options options String[] arguments boolean stopAtNonOption [VARIABLES] Options options boolean eatTheRest stopAtNonOption List tokens String[] arguments String arg opt int i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	109	109	3	add	
31	[BUG] [BUGGY] eatTheRest = stopAtNonOption; [FE] ComparisonFailure [CONTEXT] { if (options.hasOption(arg.substring(0, 2))) {   tokens.add(arg.substring(0, 2)); // -D tokens.add(arg.substring(2)); // property=value } else { [BUGGY] eatTheRest = stopAtNonOption; [BUGGY] tokens.add(arg); } } [CLASS] GnuParser [METHOD] flatten [RETURN_TYPE] String[]  Options options String[] arguments boolean stopAtNonOption [VARIABLES] Options options boolean eatTheRest stopAtNonOption List tokens String[] arguments String arg opt int i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.3333333333333333	90	90	3	replace	
32	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] { if (options.hasOption(arg.substring(0, 2))) {   tokens.add(arg.substring(0, 2)); // -D tokens.add(arg.substring(2)); // property=value } else { [BUGGY] [BUGGY] eatTheRest = stopAtNonOption; tokens.add(arg); } } [CLASS] GnuParser [METHOD] flatten [RETURN_TYPE] String[]  Options options String[] arguments boolean stopAtNonOption [VARIABLES] Options options boolean eatTheRest stopAtNonOption List tokens String[] arguments String arg opt int i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.3333333333333333	90	90	3	add	
33	[BUG] [BUGGY] tokens.add(arg); [FE] ComparisonFailure [CONTEXT] if (options.hasOption(arg.substring(0, 2))) {   tokens.add(arg.substring(0, 2)); // -D tokens.add(arg.substring(2)); // property=value } else { eatTheRest = stopAtNonOption; [BUGGY] tokens.add(arg); [BUGGY] } } [CLASS] GnuParser [METHOD] flatten [RETURN_TYPE] String[]  Options options String[] arguments boolean stopAtNonOption [VARIABLES] Options options boolean eatTheRest stopAtNonOption List tokens String[] arguments String arg opt int i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.3333333333333333	91	91	3	replace	
34	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] if (options.hasOption(arg.substring(0, 2))) {   tokens.add(arg.substring(0, 2)); // -D tokens.add(arg.substring(2)); // property=value } else { eatTheRest = stopAtNonOption; [BUGGY] [BUGGY] tokens.add(arg); } } [CLASS] GnuParser [METHOD] flatten [RETURN_TYPE] String[]  Options options String[] arguments boolean stopAtNonOption [VARIABLES] Options options boolean eatTheRest stopAtNonOption List tokens String[] arguments String arg opt int i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.3333333333333333	91	91	3	add	
