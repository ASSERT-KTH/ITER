bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    ComparisonFailure  [CONTEXT]  {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  [BUGGY]    tokens.add( "- ");  [BUGGY]  String  arg  =  arguments[i];  if  ( "-- ".equals(arg))  {  eatTheRest  =  true;  tokens.add( "-- ");  }  else  if  ( "- ".equals(arg))  {  tokens.add( "- ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	add	    tokens.add( "- ");		compilable	  [FE]  AssertionFailedError  	15	11	add
2	[BUG]  [BUGGY]    tokens.add( "- ");  [FE]  AssertionFailedError  [FE]    ComparisonFailure  [CONTEXT]  {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  [BUGGY]    tokens.add( "- ");  [BUGGY]  String  arg  =  arguments[i];  if  ( "-- ".equals(arg))  {  eatTheRest  =  true;  tokens.add( "-- ");  }  else  if  ( "- ".equals(arg))  {  tokens.add( "- ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	    tokens.add( "- ");		compilable	  [FE]  AssertionFailedError  	15	11	add
3	[BUG]  [BUGGY]    String[]  arguments[]  =(String[])options.toArray(new  String[arguments[i]);  [CE]  ']'  expected  [FE]      ComparisonFailure  [CONTEXT]  {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  [BUGGY]    String[]  arguments[]  =(String[])options.toArray(new  String[arguments[i]);  [BUGGY]  String  arg  =  arguments[i];  if  ( "-- ".equals(arg))  {  eatTheRest  =  true;  tokens.add( "-- ");  }  else  if  ( "- ".equals(arg))  {  tokens.add( "- ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	    String[]  arguments[]  =(String[])options.toArray(new  String[arguments[i]);		non-compiled	[CE]  ']'  expected	15	None	add
4	[BUG]  [BUGGY]    String[]  arguments[]  =(String[])options.toArray(new  String[args.size()  ]);  [CE]  variable  arguments  is  already  defined  in  method  flatten(Options,String[],boolean)  [FE]        ComparisonFailure  [CONTEXT]  {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  [BUGGY]    String[]  arguments[]  =(String[])options.toArray(new  String[args.size()  ]);  [BUGGY]  String  arg  =  arguments[i];  if  ( "-- ".equals(arg))  {  eatTheRest  =  true;  tokens.add( "-- ");  }  else  if  ( "- ".equals(arg))  {  tokens.add( "- ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	    String[]  arguments[]  =(String[])options.toArray(new  String[args.size()  ]);		non-compiled	[CE]  variable  arguments  is  already  defined  in  method  flatten(Options,String[],boolean)	15	None	add
5	[BUG]  [BUGGY]    String[]  arguments[]  =(String[])options.toArray(new  String[0]);  [CE]  variable  arguments  is  already  defined  in  method  flatten(Options,String[],boolean)  [FE]          ComparisonFailure  [CONTEXT]  {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  [BUGGY]    String[]  arguments[]  =(String[])options.toArray(new  String[0]);  [BUGGY]  String  arg  =  arguments[i];  if  ( "-- ".equals(arg))  {  eatTheRest  =  true;  tokens.add( "-- ");  }  else  if  ( "- ".equals(arg))  {  tokens.add( "- ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	    String[]  arguments[]  =(String[])options.toArray(new  String[0]);		non-compiled	[CE]  variable  arguments  is  already  defined  in  method  flatten(Options,String[],boolean)	15	None	add
6	[BUG]  [BUGGY]    String[]  arguments[]  =  opt.toArray(new  String[arguments[i]);  [CE]  ']'  expected  [FE]            ComparisonFailure  [CONTEXT]  {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  [BUGGY]    String[]  arguments[]  =  opt.toArray(new  String[arguments[i]);  [BUGGY]  String  arg  =  arguments[i];  if  ( "-- ".equals(arg))  {  eatTheRest  =  true;  tokens.add( "-- ");  }  else  if  ( "- ".equals(arg))  {  tokens.add( "- ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	    String[]  arguments[]  =  opt.toArray(new  String[arguments[i]);		non-compiled	[CE]  ']'  expected	15	None	add
7	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure  [CONTEXT]  {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  [BUGGY]  String  arg  =  arguments[i].trim();  [BUGGY]    if  ( "-- ".equals(arg))  {  eatTheRest  =  true;  tokens.add( "-- ");  }  else  if  ( "- ".equals(arg))  {  tokens.add( "- ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	add	String  arg  =  arguments[i].trim();	String  arg  =  arguments[i];  	compilable	  [FE]  ComparisonFailure  	14	3	replace
8	[BUG]  [BUGGY]  String  arg  =  arguments[i].trim();  [FE]  ComparisonFailure  [FE]    ComparisonFailure  [CONTEXT]  {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  [BUGGY]  String  arg  =  arguments[i].trim();  [BUGGY]    if  ( "-- ".equals(arg))  {  eatTheRest  =  true;  tokens.add( "-- ");  }  else  if  ( "- ".equals(arg))  {  tokens.add( "- ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String  arg  =  arguments[i].trim();	String  arg  =  arguments[i];  	compilable	  [FE]  ComparisonFailure  	14	3	replace
9	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure  [CONTEXT]  {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  [BUGGY]  String  arg  =  arguments[i].toString();  [BUGGY]    if  ( "-- ".equals(arg))  {  eatTheRest  =  true;  tokens.add( "-- ");  }  else  if  ( "- ".equals(arg))  {  tokens.add( "- ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	add	String  arg  =  arguments[i].toString();	String  arg  =  arguments[i];  	compilable	  [FE]  ComparisonFailure  	14	3	replace
10	[BUG]  [BUGGY]  String  arg  =  arguments[i].toString();  [FE]  ComparisonFailure  [FE]      ComparisonFailure  [CONTEXT]  {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  [BUGGY]  String  arg  =  arguments[i].toString();  [BUGGY]    if  ( "-- ".equals(arg))  {  eatTheRest  =  true;  tokens.add( "-- ");  }  else  if  ( "- ".equals(arg))  {  tokens.add( "- ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String  arg  =  arguments[i].toString();	String  arg  =  arguments[i];  	compilable	  [FE]  ComparisonFailure  	14	3	replace
11	[BUG]  [BUGGY]  [FE]  UnrecognizedOptionException  [FE]        ComparisonFailure  [CONTEXT]  {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  [BUGGY]  String  arg  =  arguments[i]  + "- ";  [BUGGY]    if  ( "-- ".equals(arg))  {  eatTheRest  =  true;  tokens.add( "-- ");  }  else  if  ( "- ".equals(arg))  {  tokens.add( "- ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	add	String  arg  =  arguments[i]  + "- ";	String  arg  =  arguments[i];  	compilable	  [FE]  UnrecognizedOptionException  	14	13	replace
12	[BUG]  [BUGGY]  String  arg  =  arguments[i]  + "- ";  [FE]  UnrecognizedOptionException  [FE]        ComparisonFailure  [CONTEXT]  {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  [BUGGY]  String  arg  =  arguments[i]  + "- ";  [BUGGY]    if  ( "-- ".equals(arg))  {  eatTheRest  =  true;  tokens.add( "-- ");  }  else  if  ( "- ".equals(arg))  {  tokens.add( "- ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String  arg  =  arguments[i]  + "- ";	String  arg  =  arguments[i];  	compilable	  [FE]  UnrecognizedOptionException  	14	13	replace
13	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure  [CONTEXT]  {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  [BUGGY]  String  arg  =(arguments[i]  ==  null)? "null "  :  arguments[i];  [BUGGY]    if  ( "-- ".equals(arg))  {  eatTheRest  =  true;  tokens.add( "-- ");  }  else  if  ( "- ".equals(arg))  {  tokens.add( "- ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	add	String  arg  =(arguments[i]  ==  null)? "null "  :  arguments[i];	String  arg  =  arguments[i];  	compilable	  [FE]  ComparisonFailure  	14	3	replace
14	[BUG]  [BUGGY]  String  arg  =(arguments[i]  ==  null)? "null "  :  arguments[i];  [FE]  ComparisonFailure  [FE]    ComparisonFailure  [CONTEXT]  {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  [BUGGY]  String  arg  =(arguments[i]  ==  null)? "null "  :  arguments[i];  [BUGGY]    if  ( "-- ".equals(arg))  {  eatTheRest  =  true;  tokens.add( "-- ");  }  else  if  ( "- ".equals(arg))  {  tokens.add( "- ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String  arg  =(arguments[i]  ==  null)? "null "  :  arguments[i];	String  arg  =  arguments[i];  	compilable	  [FE]  ComparisonFailure  	14	3	replace
15	[BUG]  [BUGGY]  String  arg  =  options[i];  [CE]  array  required,  but  Options  found  [FE]      ComparisonFailure  [CONTEXT]  {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  [BUGGY]  String  arg  =  options[i];  [BUGGY]    if  ( "-- ".equals(arg))  {  eatTheRest  =  true;  tokens.add( "-- ");  }  else  if  ( "- ".equals(arg))  {  tokens.add( "- ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String  arg  =  options[i];	String  arg  =  arguments[i];  	non-compiled	[CE]  array  required,  but  Options  found	14	None	replace
16	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        ComparisonFailure  [CONTEXT]  {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  [BUGGY]  String  arg  =(arguments[i]!=  null)? "null "  :  arguments[i];  [BUGGY]    if  ( "-- ".equals(arg))  {  eatTheRest  =  true;  tokens.add( "-- ");  }  else  if  ( "- ".equals(arg))  {  tokens.add( "- ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	add	String  arg  =(arguments[i]!=  null)? "null "  :  arguments[i];	String  arg  =  arguments[i];  	compilable	  [FE]  AssertionFailedError  	14	14	replace
17	[BUG]  [BUGGY]  String  arg  =(arguments[i]!=  null)? "null "  :  arguments[i];  [FE]  AssertionFailedError  [FE]        ComparisonFailure  [CONTEXT]  {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  [BUGGY]  String  arg  =(arguments[i]!=  null)? "null "  :  arguments[i];  [BUGGY]    if  ( "-- ".equals(arg))  {  eatTheRest  =  true;  tokens.add( "-- ");  }  else  if  ( "- ".equals(arg))  {  tokens.add( "- ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String  arg  =(arguments[i]!=  null)? "null "  :  arguments[i];	String  arg  =  arguments[i];  	compilable	  [FE]  AssertionFailedError  	14	14	replace
18	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]          ComparisonFailure  [CONTEXT]  {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  [BUGGY]  String  arg  =(arguments[i]!=  null)?  arguments[i]  : "null ";  [BUGGY]    if  ( "-- ".equals(arg))  {  eatTheRest  =  true;  tokens.add( "-- ");  }  else  if  ( "- ".equals(arg))  {  tokens.add( "- ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	add	String  arg  =(arguments[i]!=  null)?  arguments[i]  : "null ";	String  arg  =  arguments[i];  	compilable	  [FE]  ComparisonFailure  	14	3	replace
19	[BUG]  [BUGGY]  String  arg  =(arguments[i]!=  null)?  arguments[i]  : "null ";  [FE]  ComparisonFailure  [FE]          ComparisonFailure  [CONTEXT]  {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  [BUGGY]  String  arg  =(arguments[i]!=  null)?  arguments[i]  : "null ";  [BUGGY]    if  ( "-- ".equals(arg))  {  eatTheRest  =  true;  tokens.add( "-- ");  }  else  if  ( "- ".equals(arg))  {  tokens.add( "- ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String  arg  =(arguments[i]!=  null)?  arguments[i]  : "null ";	String  arg  =  arguments[i];  	compilable	  [FE]  ComparisonFailure  	14	3	replace
20	[BUG]  [BUGGY]    String[]  arguments  =  options.get(i);  [CE]  variable  arguments  is  already  defined  in  method  flatten(Options,String[],boolean)  [FE]    ComparisonFailure  [CONTEXT]  {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  [BUGGY]    String[]  arguments  =  options.get(i);  [BUGGY]  String  arg  =  arguments[i];  if  ( "-- ".equals(arg))  {  eatTheRest  =  true;  tokens.add( "-- ");  }  else  if  ( "- ".equals(arg))  {  tokens.add( "- ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	    String[]  arguments  =  options.get(i);		non-compiled	[CE]  variable  arguments  is  already  defined  in  method  flatten(Options,String[],boolean)	15	None	add
21	[BUG]  [BUGGY]    TokenBuffer  tokens  =  new  TokenBuffer(tokens.length);  [CE]  cannot  find  symbol  [FE]      ComparisonFailure  [CONTEXT]  {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  [BUGGY]    TokenBuffer  tokens  =  new  TokenBuffer(tokens.length);  [BUGGY]  String  arg  =  arguments[i];  if  ( "-- ".equals(arg))  {  eatTheRest  =  true;  tokens.add( "-- ");  }  else  if  ( "- ".equals(arg))  {  tokens.add( "- ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	    TokenBuffer  tokens  =  new  TokenBuffer(tokens.length);		non-compiled	[CE]  cannot  find  symbol	15	None	add
22	[BUG]  [BUGGY]    String[]  arguments  =  options.get(i).toArray(new  String[arguments[i]);  [CE]  ']'  expected  [FE]        ComparisonFailure  [CONTEXT]  {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  [BUGGY]    String[]  arguments  =  options.get(i).toArray(new  String[arguments[i]);  [BUGGY]  String  arg  =  arguments[i];  if  ( "-- ".equals(arg))  {  eatTheRest  =  true;  tokens.add( "-- ");  }  else  if  ( "- ".equals(arg))  {  tokens.add( "- ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	    String[]  arguments  =  options.get(i).toArray(new  String[arguments[i]);		non-compiled	[CE]  ']'  expected	15	None	add
23	[BUG]  [BUGGY]    TokenBuffer  tokens  =  new  TokenBuffer(tokens.size());  [CE]  cannot  find  symbol  [FE]          ComparisonFailure  [CONTEXT]  {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  [BUGGY]    TokenBuffer  tokens  =  new  TokenBuffer(tokens.size());  [BUGGY]  String  arg  =  arguments[i];  if  ( "-- ".equals(arg))  {  eatTheRest  =  true;  tokens.add( "-- ");  }  else  if  ( "- ".equals(arg))  {  tokens.add( "- ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	    TokenBuffer  tokens  =  new  TokenBuffer(tokens.size());		non-compiled	[CE]  cannot  find  symbol	15	None	add
24	[BUG]  [BUGGY]    String[]  arguments  =(String[])options.toArray(new  String[args.size()  ]);  [CE]  variable  arguments  is  already  defined  in  method  flatten(Options,String[],boolean)  [FE]    ComparisonFailure  [CONTEXT]  {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  [BUGGY]    String[]  arguments  =(String[])options.toArray(new  String[args.size()  ]);  [BUGGY]  String  arg  =  arguments[i];  if  ( "-- ".equals(arg))  {  eatTheRest  =  true;  tokens.add( "-- ");  }  else  if  ( "- ".equals(arg))  {  tokens.add( "- ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	    String[]  arguments  =(String[])options.toArray(new  String[args.size()  ]);		non-compiled	[CE]  variable  arguments  is  already  defined  in  method  flatten(Options,String[],boolean)	15	None	add
25	[BUG]  [BUGGY]    String[]  arguments  =(String[])options.toArray(new  String[0]);  [CE]  variable  arguments  is  already  defined  in  method  flatten(Options,String[],boolean)  [FE]      ComparisonFailure  [CONTEXT]  {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  [BUGGY]    String[]  arguments  =(String[])options.toArray(new  String[0]);  [BUGGY]  String  arg  =  arguments[i];  if  ( "-- ".equals(arg))  {  eatTheRest  =  true;  tokens.add( "-- ");  }  else  if  ( "- ".equals(arg))  {  tokens.add( "- ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	    String[]  arguments  =(String[])options.toArray(new  String[0]);		non-compiled	[CE]  variable  arguments  is  already  defined  in  method  flatten(Options,String[],boolean)	15	None	add
26	[BUG]  [BUGGY]    String[]  arguments  =(String[])options.toArray(new  String[i]);  [CE]  variable  arguments  is  already  defined  in  method  flatten(Options,String[],boolean)  [FE]        ComparisonFailure  [CONTEXT]  {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  [BUGGY]    String[]  arguments  =(String[])options.toArray(new  String[i]);  [BUGGY]  String  arg  =  arguments[i];  if  ( "-- ".equals(arg))  {  eatTheRest  =  true;  tokens.add( "-- ");  }  else  if  ( "- ".equals(arg))  {  tokens.add( "- ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	    String[]  arguments  =(String[])options.toArray(new  String[i]);		non-compiled	[CE]  variable  arguments  is  already  defined  in  method  flatten(Options,String[],boolean)	15	None	add
27	[BUG]  [BUGGY]    String[]  arguments  =(String[])options.toArray(new  String[arguments[i]);  [CE]  ']'  expected  [FE]          ComparisonFailure  [CONTEXT]  {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  [BUGGY]    String[]  arguments  =(String[])options.toArray(new  String[arguments[i]);  [BUGGY]  String  arg  =  arguments[i];  if  ( "-- ".equals(arg))  {  eatTheRest  =  true;  tokens.add( "-- ");  }  else  if  ( "- ".equals(arg))  {  tokens.add( "- ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	    String[]  arguments  =(String[])options.toArray(new  String[arguments[i]);		non-compiled	[CE]  ']'  expected	15	None	add
