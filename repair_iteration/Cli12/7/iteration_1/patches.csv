bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  String[]  arguments[]  =(String[])options.toArray(new  String[i]);  [CE]  variable  arguments  is  already  defined  in  method  flatten(Options,String[],boolean)  [FE]              ComparisonFailure    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {    [BUGGY]  String[]  arguments[]  =(String[])options.toArray(new  String[i]);  [BUGGY]    String  arg  =  arguments[i];  if  (   "--   ".equals(arg))  {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  tokens.add(   "-   ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String[]  arguments[]  =(String[])options.toArray(new  String[i]);	      String[]    arguments[]    =(String[])options.toArray(new    String[0]);    	non-compiled	[CE]  variable  arguments  is  already  defined  in  method  flatten(Options,String[],boolean)	5	None	replace
2	[BUG]  [BUGGY]  String[]  arguments[]  =  options.toArray(new  String[i]);  [CE]  variable  arguments  is  already  defined  in  method  flatten(Options,String[],boolean)  [FE]                ComparisonFailure    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {    [BUGGY]  String[]  arguments[]  =  options.toArray(new  String[i]);  [BUGGY]    String  arg  =  arguments[i];  if  (   "--   ".equals(arg))  {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  tokens.add(   "-   ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String[]  arguments[]  =  options.toArray(new  String[i]);	      String[]    arguments[]    =(String[])options.toArray(new    String[0]);    	non-compiled	[CE]  variable  arguments  is  already  defined  in  method  flatten(Options,String[],boolean)	5	None	replace
3	[BUG]  [BUGGY]  String[]  arguments[]  =  options.toArray(new  String[0]);  [CE]  variable  arguments  is  already  defined  in  method  flatten(Options,String[],boolean)  [FE]                  ComparisonFailure    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {    [BUGGY]  String[]  arguments[]  =  options.toArray(new  String[0]);  [BUGGY]    String  arg  =  arguments[i];  if  (   "--   ".equals(arg))  {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  tokens.add(   "-   ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String[]  arguments[]  =  options.toArray(new  String[0]);	      String[]    arguments[]    =(String[])options.toArray(new    String[0]);    	non-compiled	[CE]  variable  arguments  is  already  defined  in  method  flatten(Options,String[],boolean)	5	None	replace
4	[BUG]  [BUGGY]  String[]  arguments  =  options.get(i).toArray(new  String[arguments[0]);  [CE]  ']'  expected  [FE]            ComparisonFailure    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {    [BUGGY]  String[]  arguments  =  options.get(i).toArray(new  String[arguments[0]);  [BUGGY]    String  arg  =  arguments[i];  if  (   "--   ".equals(arg))  {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  tokens.add(   "-   ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String[]  arguments  =  options.get(i).toArray(new  String[arguments[0]);	      String[]    arguments    =    options.get(i).toArray(new    String[arguments[i]);    	non-compiled	[CE]  ']'  expected	22	None	replace
5	[BUG]  [BUGGY]  String[]  arguments  =  options.get(i).toArray(new  String[arguments[i],  opt);  [CE]  ']'  expected  [FE]              ComparisonFailure    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {    [BUGGY]  String[]  arguments  =  options.get(i).toArray(new  String[arguments[i],  opt);  [BUGGY]    String  arg  =  arguments[i];  if  (   "--   ".equals(arg))  {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  tokens.add(   "-   ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String[]  arguments  =  options.get(i).toArray(new  String[arguments[i],  opt);	      String[]    arguments    =    options.get(i).toArray(new    String[arguments[i]);    	non-compiled	[CE]  ']'  expected	22	None	replace
6	[BUG]  [BUGGY]  String[]  arguments  =  options.get(i).toArray(new  String[arguments[i]  +  1]);  [CE]  variable  arguments  is  already  defined  in  method  flatten(Options,String[],boolean)  [FE]                ComparisonFailure    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {    [BUGGY]  String[]  arguments  =  options.get(i).toArray(new  String[arguments[i]  +  1]);  [BUGGY]    String  arg  =  arguments[i];  if  (   "--   ".equals(arg))  {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  tokens.add(   "-   ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String[]  arguments  =  options.get(i).toArray(new  String[arguments[i]  +  1]);	      String[]    arguments    =    options.get(i).toArray(new    String[arguments[i]);    	non-compiled	[CE]  variable  arguments  is  already  defined  in  method  flatten(Options,String[],boolean)	22	None	replace
7	[BUG]  [BUGGY]  String[]  arguments  =  options.toArray(new  String[arguments[i]);  [CE]  ']'  expected  [FE]              ComparisonFailure    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {    [BUGGY]  String[]  arguments  =  options.toArray(new  String[arguments[i]);  [BUGGY]    String  arg  =  arguments[i];  if  (   "--   ".equals(arg))  {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  tokens.add(   "-   ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String[]  arguments  =  options.toArray(new  String[arguments[i]);	      String[]    arguments    =(String[])options.toArray(new    String[arguments[i]);    	non-compiled	[CE]  ']'  expected	27	None	replace
8	[BUG]  [BUGGY]  String[]  arguments  =(String[])options.toArray(new  String[arguments[i],  opt);  [CE]  ']'  expected  [FE]                ComparisonFailure    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {    [BUGGY]  String[]  arguments  =(String[])options.toArray(new  String[arguments[i],  opt);  [BUGGY]    String  arg  =  arguments[i];  if  (   "--   ".equals(arg))  {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  tokens.add(   "-   ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String[]  arguments  =(String[])options.toArray(new  String[arguments[i],  opt);	      String[]    arguments    =(String[])options.toArray(new    String[arguments[i]);    	non-compiled	[CE]  ']'  expected	27	None	replace
9	[BUG]  [BUGGY]  String[]  arguments  =(String[])options.toArray(new  String[arguments[0]);  [CE]  ']'  expected  [FE]                  ComparisonFailure    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {    [BUGGY]  String[]  arguments  =(String[])options.toArray(new  String[arguments[0]);  [BUGGY]    String  arg  =  arguments[i];  if  (   "--   ".equals(arg))  {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  tokens.add(   "-   ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String[]  arguments  =(String[])options.toArray(new  String[arguments[0]);	      String[]    arguments    =(String[])options.toArray(new    String[arguments[i]);    	non-compiled	[CE]  ']'  expected	27	None	replace
10	[BUG]  [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(arguments.size());  [CE]  cannot  find  symbol  [FE]              ComparisonFailure    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {    [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(arguments.size());  [BUGGY]    String  arg  =  arguments[i];  if  (   "--   ".equals(arg))  {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  tokens.add(   "-   ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	TokenBuffer  tokens  =  new  TokenBuffer(arguments.size());	      TokenBuffer    tokens    =    new    TokenBuffer(tokens.size());    	non-compiled	[CE]  cannot  find  symbol	23	None	replace
11	[BUG]  [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(tokens.size()  -  1);  [CE]  cannot  find  symbol  [FE]                ComparisonFailure    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {    [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(tokens.size()  -  1);  [BUGGY]    String  arg  =  arguments[i];  if  (   "--   ".equals(arg))  {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  tokens.add(   "-   ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	TokenBuffer  tokens  =  new  TokenBuffer(tokens.size()  -  1);	      TokenBuffer    tokens    =    new    TokenBuffer(tokens.size());    	non-compiled	[CE]  cannot  find  symbol	23	None	replace
12	[BUG]  [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(args.size());  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {    [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(args.size());  [BUGGY]    String  arg  =  arguments[i];  if  (   "--   ".equals(arg))  {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  tokens.add(   "-   ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	TokenBuffer  tokens  =  new  TokenBuffer(args.size());	      TokenBuffer    tokens    =    new    TokenBuffer(tokens.size());    	non-compiled	[CE]  cannot  find  symbol	23	None	replace
13	[BUG]  [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(arguments.length.size());  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {    [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(arguments.length.size());  [BUGGY]    String  arg  =  arguments[i];  if  (   "--   ".equals(arg))  {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  tokens.add(   "-   ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	TokenBuffer  tokens  =  new  TokenBuffer(arguments.length.size());	      TokenBuffer    tokens    =    new    TokenBuffer(tokens.size());    	non-compiled	[CE]  cannot  find  symbol	23	None	replace
14	[BUG]  [BUGGY]  String  arg  =(arguments[i]  ==  null)?   "null   "  :  arguments[i];  String  arg  =(arguments[i]  ==  null)?   "null   "  :  arguments[i];  [CE]  variable  arg  is  already  defined  in  method  flatten(Options,String[],boolean)  [FE]    ComparisonFailure    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {    [BUGGY]  String  arg  =(arguments[i]  ==  null)?   "null   "  :  arguments[i];  String  arg  =(arguments[i]  ==  null)?   "null   "  :  arguments[i];  [BUGGY]      if  (   "--   ".equals(arg))  {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  tokens.add(   "-   ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String    arg    =(arguments[i]    ==    null)?   "null   "    :    arguments[i];    String  arg  =(arguments[i]  ==  null)?   "null   "  :  arguments[i];	  	non-compiled	[CE]  variable  arg  is  already  defined  in  method  flatten(Options,String[],boolean)	13	None	add
15	[BUG]  [BUGGY]  String  arg  =(arguments[i]  ==  null)?   "null   "  :  arguments[i];  String  arg  =(arguments[i]!=  null)?   "null   "  :  arguments[i];  [CE]  variable  arg  is  already  defined  in  method  flatten(Options,String[],boolean)  [FE]      ComparisonFailure    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {    [BUGGY]  String  arg  =(arguments[i]  ==  null)?   "null   "  :  arguments[i];  String  arg  =(arguments[i]!=  null)?   "null   "  :  arguments[i];  [BUGGY]      if  (   "--   ".equals(arg))  {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  tokens.add(   "-   ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String    arg    =(arguments[i]    ==    null)?   "null   "    :    arguments[i];    String  arg  =(arguments[i]!=  null)?   "null   "  :  arguments[i];	  	non-compiled	[CE]  variable  arg  is  already  defined  in  method  flatten(Options,String[],boolean)	13	None	add
16	[BUG]  [BUGGY]  String  arg  =(arguments[i]  ==  null)?   "null   "  :  arguments[i];  String  arg  =(arguments[i]  ==  null)?   "null ",  :  arguments[i];  [CE]  :  expected  [FE]        ComparisonFailure    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {    [BUGGY]  String  arg  =(arguments[i]  ==  null)?   "null   "  :  arguments[i];  String  arg  =(arguments[i]  ==  null)?   "null ",  :  arguments[i];  [BUGGY]      if  (   "--   ".equals(arg))  {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  tokens.add(   "-   ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String    arg    =(arguments[i]    ==    null)?   "null   "    :    arguments[i];    String  arg  =(arguments[i]  ==  null)?   "null ",  :  arguments[i];	  	non-compiled	[CE]  :  expected	13	None	add
17	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {    [BUGGY]  String  arg  =  arguments[i].toString().trim();  [BUGGY]      if  (   "--   ".equals(arg))  {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  tokens.add(   "-   ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	add	String  arg  =  arguments[i].toString().trim();	  String    arg    =    arguments[i].toString();    	compilable	  [FE]  ComparisonFailure  	10	3	replace
18	[BUG]  [BUGGY]  String  arg  =  arguments[i].toString().trim();  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {    [BUGGY]  String  arg  =  arguments[i].toString().trim();  [BUGGY]      if  (   "--   ".equals(arg))  {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  tokens.add(   "-   ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String  arg  =  arguments[i].toString().trim();	  String    arg    =    arguments[i].toString();    	compilable	  [FE]  ComparisonFailure  	10	3	replace
19	[BUG]  [BUGGY]  [FE]  UnrecognizedOptionException  [FE]      ComparisonFailure    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {    [BUGGY]  String  arg  =  arguments[i].toString()  + "n ";  [BUGGY]      if  (   "--   ".equals(arg))  {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  tokens.add(   "-   ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	add	String  arg  =  arguments[i].toString()  + "n ";	  String    arg    =    arguments[i].toString();    	compilable	  [FE]  UnrecognizedOptionException  	10	13	replace
20	[BUG]  [BUGGY]  String  arg  =  arguments[i].toString()  + "n ";  [FE]  UnrecognizedOptionException  [FE]      ComparisonFailure    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {    [BUGGY]  String  arg  =  arguments[i].toString()  + "n ";  [BUGGY]      if  (   "--   ".equals(arg))  {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  tokens.add(   "-   ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String  arg  =  arguments[i].toString()  + "n ";	  String    arg    =    arguments[i].toString();    	compilable	  [FE]  UnrecognizedOptionException  	10	13	replace
21	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {    [BUGGY]  String  arg  =  arguments[i].trim().toLowerCase();  [BUGGY]      if  (   "--   ".equals(arg))  {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  tokens.add(   "-   ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	add	String  arg  =  arguments[i].trim().toLowerCase();	  String    arg    =    arguments[i].trim();    	compilable	  [FE]  ComparisonFailure  	8	3	replace
22	[BUG]  [BUGGY]  String  arg  =  arguments[i].trim().toLowerCase();  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {    [BUGGY]  String  arg  =  arguments[i].trim().toLowerCase();  [BUGGY]      if  (   "--   ".equals(arg))  {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  tokens.add(   "-   ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String  arg  =  arguments[i].trim().toLowerCase();	  String    arg    =    arguments[i].trim();    	compilable	  [FE]  ComparisonFailure  	8	3	replace
23	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {    [BUGGY]  String  arg  =  arguments[i].trim().trim();  [BUGGY]      if  (   "--   ".equals(arg))  {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  tokens.add(   "-   ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	add	String  arg  =  arguments[i].trim().trim();	  String    arg    =    arguments[i].trim();    	compilable	  [FE]  ComparisonFailure  	8	3	replace
24	[BUG]  [BUGGY]  String  arg  =  arguments[i].trim().trim();  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {    [BUGGY]  String  arg  =  arguments[i].trim().trim();  [BUGGY]      if  (   "--   ".equals(arg))  {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  tokens.add(   "-   ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String  arg  =  arguments[i].trim().trim();	  String    arg    =    arguments[i].trim();    	compilable	  [FE]  ComparisonFailure  	8	3	replace
25	[BUG]  [BUGGY]  [FE]  UnrecognizedOptionException  [FE]        ComparisonFailure    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {    [BUGGY]  String  arg  =  arguments[i].trim()  +  1;  [BUGGY]      if  (   "--   ".equals(arg))  {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  tokens.add(   "-   ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	add	String  arg  =  arguments[i].trim()  +  1;	  String    arg    =    arguments[i].trim();    	compilable	  [FE]  UnrecognizedOptionException  	8	13	replace
26	[BUG]  [BUGGY]  String  arg  =  arguments[i].trim()  +  1;  [FE]  UnrecognizedOptionException  [FE]        ComparisonFailure    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {    [BUGGY]  String  arg  =  arguments[i].trim()  +  1;  [BUGGY]      if  (   "--   ".equals(arg))  {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  tokens.add(   "-   ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String  arg  =  arguments[i].trim()  +  1;	  String    arg    =    arguments[i].trim();    	compilable	  [FE]  UnrecognizedOptionException  	8	13	replace
27	[BUG]  [BUGGY]  String[]  arguments[]  =  options.toArray(new  String[arguments[i]);  [CE]  ']'  expected  [FE]                ComparisonFailure    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {    [BUGGY]  String[]  arguments[]  =  options.toArray(new  String[arguments[i]);  [BUGGY]    String  arg  =  arguments[i];  if  (   "--   ".equals(arg))  {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  tokens.add(   "-   ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String[]  arguments[]  =  options.toArray(new  String[arguments[i]);	      String[]    arguments[]    =    opt.toArray(new    String[arguments[i]);    	non-compiled	[CE]  ']'  expected	6	None	replace
28	[BUG]  [BUGGY]  String[]  arguments[]  =  option.toArray(new  String[arguments[i]);  [CE]  ']'  expected  [FE]                  ComparisonFailure    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {    [BUGGY]  String[]  arguments[]  =  option.toArray(new  String[arguments[i]);  [BUGGY]    String  arg  =  arguments[i];  if  (   "--   ".equals(arg))  {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  tokens.add(   "-   ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String[]  arguments[]  =  option.toArray(new  String[arguments[i]);	      String[]    arguments[]    =    opt.toArray(new    String[arguments[i]);    	non-compiled	[CE]  ']'  expected	6	None	replace
29	[BUG]  [BUGGY]  String[]  arguments[]  =  tokens.toArray(new  String[arguments[i]);  [CE]  ']'  expected  [FE]                    ComparisonFailure    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {    [BUGGY]  String[]  arguments[]  =  tokens.toArray(new  String[arguments[i]);  [BUGGY]    String  arg  =  arguments[i];  if  (   "--   ".equals(arg))  {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  tokens.add(   "-   ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String[]  arguments[]  =  tokens.toArray(new  String[arguments[i]);	      String[]    arguments[]    =    opt.toArray(new    String[arguments[i]);    	non-compiled	[CE]  ']'  expected	6	None	replace
30	[BUG]  [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(arguments.length);  [CE]  cannot  find  symbol  [FE]          ComparisonFailure    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {    [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(arguments.length);  [BUGGY]    String  arg  =  arguments[i];  if  (   "--   ".equals(arg))  {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  tokens.add(   "-   ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	TokenBuffer  tokens  =  new  TokenBuffer(arguments.length);	      TokenBuffer    tokens    =    new    TokenBuffer(tokens.length);    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
31	[BUG]  [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(tokens,  i);  [CE]  cannot  find  symbol  [FE]            ComparisonFailure    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {    [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(tokens,  i);  [BUGGY]    String  arg  =  arguments[i];  if  (   "--   ".equals(arg))  {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  tokens.add(   "-   ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	TokenBuffer  tokens  =  new  TokenBuffer(tokens,  i);	      TokenBuffer    tokens    =    new    TokenBuffer(tokens.length);    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
32	[BUG]  [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(tokens.length,  arguments.length);  [CE]  cannot  find  symbol  [FE]              ComparisonFailure    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {    [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(tokens.length,  arguments.length);  [BUGGY]    String  arg  =  arguments[i];  if  (   "--   ".equals(arg))  {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  tokens.add(   "-   ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	TokenBuffer  tokens  =  new  TokenBuffer(tokens.length,  arguments.length);	      TokenBuffer    tokens    =    new    TokenBuffer(tokens.length);    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
33	[BUG]  [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(i,  tokens.length);  [CE]  cannot  find  symbol  [FE]                ComparisonFailure    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {    [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(i,  tokens.length);  [BUGGY]    String  arg  =  arguments[i];  if  (   "--   ".equals(arg))  {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  tokens.add(   "-   ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	TokenBuffer  tokens  =  new  TokenBuffer(i,  tokens.length);	      TokenBuffer    tokens    =    new    TokenBuffer(tokens.length);    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
34	[BUG]  [BUGGY]  String  arg  =  arguments[i].toString();  String  arg  =  arguments[i].toString();  [CE]  variable  arg  is  already  defined  in  method  flatten(Options,String[],boolean)  [FE]    ComparisonFailure    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {    [BUGGY]  String  arg  =  arguments[i].toString();  String  arg  =  arguments[i].toString();  [BUGGY]      if  (   "--   ".equals(arg))  {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  tokens.add(   "-   ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String    arg    =    arguments[i].toString();    String  arg  =  arguments[i].toString();	  	non-compiled	[CE]  variable  arg  is  already  defined  in  method  flatten(Options,String[],boolean)	9	None	add
35	[BUG]  [BUGGY]  String  arg  =  arguments[i].toString();  String  arg  =  arguments[i].toString();  }  else  if( "-- ".equals(arg))  {  eatTheRest  =  true;  tokens.add( "-- ");  }  [CE]  [FE]      ComparisonFailure    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {    [BUGGY]  String  arg  =  arguments[i].toString();  String  arg  =  arguments[i].toString();  }  else  if( "-- ".equals(arg))  {  eatTheRest  =  true;  tokens.add( "-- ");  }  [BUGGY]      if  (   "--   ".equals(arg))  {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  tokens.add(   "-   ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String    arg    =    arguments[i].toString();    String  arg  =  arguments[i].toString();  }  else  if( "-- ".equals(arg))  {  eatTheRest  =  true;  tokens.add( "-- ");  }	  	non-compiled	[CE]  	9	None	add
36	[BUG]  [BUGGY]  String  arg  =  arguments[i].toString();  String  arg  =  arguments[i].toString();  }  else  if( "-- ".equals(arg))  {  tokens.add( "-- ");  }  [CE]  [FE]        ComparisonFailure    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {    [BUGGY]  String  arg  =  arguments[i].toString();  String  arg  =  arguments[i].toString();  }  else  if( "-- ".equals(arg))  {  tokens.add( "-- ");  }  [BUGGY]      if  (   "--   ".equals(arg))  {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  tokens.add(   "-   ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String    arg    =    arguments[i].toString();    String  arg  =  arguments[i].toString();  }  else  if( "-- ".equals(arg))  {  tokens.add( "-- ");  }	  	non-compiled	[CE]  	9	None	add
37	[BUG]  [BUGGY]  String  arg  =  arguments[i].toString();  String  arg  =  arguments[i].toString();  }  else  if( "-- ".equals(arg))  {  eatTheRest  =  true;  tokens.add( "-   ");  }  [CE]  [FE]          ComparisonFailure    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {    [BUGGY]  String  arg  =  arguments[i].toString();  String  arg  =  arguments[i].toString();  }  else  if( "-- ".equals(arg))  {  eatTheRest  =  true;  tokens.add( "-   ");  }  [BUGGY]      if  (   "--   ".equals(arg))  {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  tokens.add(   "-   ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String    arg    =    arguments[i].toString();    String  arg  =  arguments[i].toString();  }  else  if( "-- ".equals(arg))  {  eatTheRest  =  true;  tokens.add( "-   ");  }	  	non-compiled	[CE]  	9	None	add
38	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {    [BUGGY]  String  arg  =(arguments[i]  ==  null)?   "null "  :  arguments[i].toString();  [BUGGY]      if  (   "--   ".equals(arg))  {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  tokens.add(   "-   ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	add	String  arg  =(arguments[i]  ==  null)?   "null "  :  arguments[i].toString();	  String    arg    =(arguments[i]    ==    null)?   "null   "    :    arguments[i];    	compilable	  [FE]  ComparisonFailure  	14	3	replace
39	[BUG]  [BUGGY]  String  arg  =(arguments[i]  ==  null)?   "null "  :  arguments[i].toString();  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {    [BUGGY]  String  arg  =(arguments[i]  ==  null)?   "null "  :  arguments[i].toString();  [BUGGY]      if  (   "--   ".equals(arg))  {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  tokens.add(   "-   ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String  arg  =(arguments[i]  ==  null)?   "null "  :  arguments[i].toString();	  String    arg    =(arguments[i]    ==    null)?   "null   "    :    arguments[i];    	compilable	  [FE]  ComparisonFailure  	14	3	replace
40	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {    [BUGGY]  String  arg  =(arguments[i]  ==  null)?   "null "  :  arguments[i].trim();  [BUGGY]      if  (   "--   ".equals(arg))  {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  tokens.add(   "-   ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	add	String  arg  =(arguments[i]  ==  null)?   "null "  :  arguments[i].trim();	  String    arg    =(arguments[i]    ==    null)?   "null   "    :    arguments[i];    	compilable	  [FE]  ComparisonFailure  	14	3	replace
41	[BUG]  [BUGGY]  String  arg  =(arguments[i]  ==  null)?   "null "  :  arguments[i].trim();  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {    [BUGGY]  String  arg  =(arguments[i]  ==  null)?   "null "  :  arguments[i].trim();  [BUGGY]      if  (   "--   ".equals(arg))  {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  tokens.add(   "-   ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String  arg  =(arguments[i]  ==  null)?   "null "  :  arguments[i].trim();	  String    arg    =(arguments[i]    ==    null)?   "null   "    :    arguments[i];    	compilable	  [FE]  ComparisonFailure  	14	3	replace
42	[BUG]  [BUGGY]  [FE]  UnrecognizedOptionException  [FE]    AssertionFailedError    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {    [BUGGY]      tokens.add(   "-   ");  tokens.add( "-   ");  [BUGGY]    String  arg  =  arguments[i];  if  (   "--   ".equals(arg))  {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  tokens.add(   "-   ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	add	        tokens.add(   "-   ");    tokens.add( "-   ");	  	compilable	  [FE]  UnrecognizedOptionException  	1	13	add
43	[BUG]  [BUGGY]      tokens.add(   "-   ");  tokens.add( "-   ");  [FE]  UnrecognizedOptionException  [FE]    AssertionFailedError    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {    [BUGGY]      tokens.add(   "-   ");  tokens.add( "-   ");  [BUGGY]    String  arg  =  arguments[i];  if  (   "--   ".equals(arg))  {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  tokens.add(   "-   ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	        tokens.add(   "-   ");    tokens.add( "-   ");	  	compilable	  [FE]  UnrecognizedOptionException  	1	13	add
44	[BUG]  [BUGGY]  [FE]  UnrecognizedOptionException  [FE]      AssertionFailedError    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {    [BUGGY]      tokens.add(   "-   ");  tokens.add( ",-   ");  [BUGGY]    String  arg  =  arguments[i];  if  (   "--   ".equals(arg))  {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  tokens.add(   "-   ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	add	        tokens.add(   "-   ");    tokens.add( ",-   ");	  	compilable	  [FE]  UnrecognizedOptionException  	1	13	add
45	[BUG]  [BUGGY]      tokens.add(   "-   ");  tokens.add( ",-   ");  [FE]  UnrecognizedOptionException  [FE]      AssertionFailedError    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {    [BUGGY]      tokens.add(   "-   ");  tokens.add( ",-   ");  [BUGGY]    String  arg  =  arguments[i];  if  (   "--   ".equals(arg))  {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  tokens.add(   "-   ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	        tokens.add(   "-   ");    tokens.add( ",-   ");	  	compilable	  [FE]  UnrecognizedOptionException  	1	13	add
46	[BUG]  [BUGGY]  [FE]  UnrecognizedOptionException  [FE]        AssertionFailedError    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {    [BUGGY]      tokens.add(   "-   ");  tokens.add( ".-   ");  [BUGGY]    String  arg  =  arguments[i];  if  (   "--   ".equals(arg))  {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  tokens.add(   "-   ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	add	        tokens.add(   "-   ");    tokens.add( ".-   ");	  	compilable	  [FE]  UnrecognizedOptionException  	1	13	add
47	[BUG]  [BUGGY]      tokens.add(   "-   ");  tokens.add( ".-   ");  [FE]  UnrecognizedOptionException  [FE]        AssertionFailedError    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {    [BUGGY]      tokens.add(   "-   ");  tokens.add( ".-   ");  [BUGGY]    String  arg  =  arguments[i];  if  (   "--   ".equals(arg))  {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  tokens.add(   "-   ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	        tokens.add(   "-   ");    tokens.add( ".-   ");	  	compilable	  [FE]  UnrecognizedOptionException  	1	13	add
48	[BUG]  [BUGGY]  String[]  arguments  =(String[])options.toArray(new  String[arguments.size()  ]);  [CE]  variable  arguments  is  already  defined  in  method  flatten(Options,String[],boolean)  [FE]        ComparisonFailure    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {    [BUGGY]  String[]  arguments  =(String[])options.toArray(new  String[arguments.size()  ]);  [BUGGY]    String  arg  =  arguments[i];  if  (   "--   ".equals(arg))  {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  tokens.add(   "-   ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String[]  arguments  =(String[])options.toArray(new  String[arguments.size()  ]);	      String[]    arguments    =(String[])options.toArray(new    String[args.size()    ]);    	non-compiled	[CE]  variable  arguments  is  already  defined  in  method  flatten(Options,String[],boolean)	24	None	replace
49	[BUG]  [BUGGY]  String[]  arguments  =(String[])options.toArray(new  String[arguments[i.size()  ]);  [CE]  ']'  expected  [FE]          ComparisonFailure    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {    [BUGGY]  String[]  arguments  =(String[])options.toArray(new  String[arguments[i.size()  ]);  [BUGGY]    String  arg  =  arguments[i];  if  (   "--   ".equals(arg))  {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  tokens.add(   "-   ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String[]  arguments  =(String[])options.toArray(new  String[arguments[i.size()  ]);	      String[]    arguments    =(String[])options.toArray(new    String[args.size()    ]);    	non-compiled	[CE]  ']'  expected	24	None	replace
50	[BUG]  [BUGGY]  String[]  arguments  =  options.toArray(new  String[arguments.size()  ]);  [CE]  variable  arguments  is  already  defined  in  method  flatten(Options,String[],boolean)  [FE]            ComparisonFailure    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {    [BUGGY]  String[]  arguments  =  options.toArray(new  String[arguments.size()  ]);  [BUGGY]    String  arg  =  arguments[i];  if  (   "--   ".equals(arg))  {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  tokens.add(   "-   ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String[]  arguments  =  options.toArray(new  String[arguments.size()  ]);	      String[]    arguments    =(String[])options.toArray(new    String[args.size()    ]);    	non-compiled	[CE]  variable  arguments  is  already  defined  in  method  flatten(Options,String[],boolean)	24	None	replace
51	[BUG]  [BUGGY]  String  arg  =  options[i].toString();  [CE]  array  required,  but  Options  found  [FE]          ComparisonFailure    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {    [BUGGY]  String  arg  =  options[i].toString();  [BUGGY]      if  (   "--   ".equals(arg))  {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  tokens.add(   "-   ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String  arg  =  options[i].toString();	  String    arg    =    options[i];    	non-compiled	[CE]  array  required,  but  Options  found	15	None	replace
52	[BUG]  [BUGGY]  String  arg  =  options[i].trim();  [CE]  array  required,  but  Options  found  [FE]            ComparisonFailure    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {    [BUGGY]  String  arg  =  options[i].trim();  [BUGGY]      if  (   "--   ".equals(arg))  {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  tokens.add(   "-   ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String  arg  =  options[i].trim();	  String    arg    =    options[i];    	non-compiled	[CE]  array  required,  but  Options  found	15	None	replace
53	[BUG]  [BUGGY]  [FE]  UnrecognizedOptionException  [FE]    UnrecognizedOptionException    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {    [BUGGY]  String  arg  =  arguments[i]  + ".- ";  [BUGGY]      if  (   "--   ".equals(arg))  {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  tokens.add(   "-   ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	add	String  arg  =  arguments[i]  + ".- ";	  String    arg    =    arguments[i]    +   "-   ";    	compilable	  [FE]  UnrecognizedOptionException  	12	13	replace
54	[BUG]  [BUGGY]  String  arg  =  arguments[i]  + ".- ";  [FE]  UnrecognizedOptionException  [FE]    UnrecognizedOptionException    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {    [BUGGY]  String  arg  =  arguments[i]  + ".- ";  [BUGGY]      if  (   "--   ".equals(arg))  {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  tokens.add(   "-   ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String  arg  =  arguments[i]  + ".- ";	  String    arg    =    arguments[i]    +   "-   ";    	compilable	  [FE]  UnrecognizedOptionException  	12	13	replace
55	[BUG]  [BUGGY]  String  arg  =  arguments[i]+ "- "  +  opt;  [CE]  cannot  find  symbol  opt  [FE]      UnrecognizedOptionException    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {    [BUGGY]  String  arg  =  arguments[i]+ "- "  +  opt;  [BUGGY]      if  (   "--   ".equals(arg))  {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  tokens.add(   "-   ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String  arg  =  arguments[i]+ "- "  +  opt;	  String    arg    =    arguments[i]    +   "-   ";    	non-compiled	[CE]  cannot  find  symbol  opt	12	None	replace
56	[BUG]  [BUGGY]  tokens.add( "- "  +  i);  [CE]  cannot  find  symbol  arg  [FE]    AssertionFailedError    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {    [BUGGY]  tokens.add( "- "  +  i);  [BUGGY]    String  arg  =  arguments[i];  if  (   "--   ".equals(arg))  {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  tokens.add(   "-   ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	tokens.add( "- "  +  i);	      tokens.add(   "-   ");    	non-compiled	[CE]  cannot  find  symbol  arg	2	None	replace
57	[BUG]  [BUGGY]  tokens.add( "- ".equals(i));  [CE]  cannot  find  symbol  arg  [FE]      AssertionFailedError    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {    [BUGGY]  tokens.add( "- ".equals(i));  [BUGGY]    String  arg  =  arguments[i];  if  (   "--   ".equals(arg))  {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  tokens.add(   "-   ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	tokens.add( "- ".equals(i));	      tokens.add(   "-   ");    	non-compiled	[CE]  cannot  find  symbol  arg	2	None	replace
58	[BUG]  [BUGGY]  String[]  arguments  =  options.toArray(new  String[i]);  [CE]  variable  arguments  is  already  defined  in  method  flatten(Options,String[],boolean)  [FE]            ComparisonFailure    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {    [BUGGY]  String[]  arguments  =  options.toArray(new  String[i]);  [BUGGY]    String  arg  =  arguments[i];  if  (   "--   ".equals(arg))  {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  tokens.add(   "-   ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String[]  arguments  =  options.toArray(new  String[i]);	      String[]    arguments    =(String[])options.toArray(new    String[i]);    	non-compiled	[CE]  variable  arguments  is  already  defined  in  method  flatten(Options,String[],boolean)	26	None	replace
59	[BUG]  [BUGGY]  String[]  arguments[]  =(String[])options.toArray(new  String[arguments.size()  ]);  [CE]  variable  arguments  is  already  defined  in  method  flatten(Options,String[],boolean)  [FE]            ComparisonFailure    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {    [BUGGY]  String[]  arguments[]  =(String[])options.toArray(new  String[arguments.size()  ]);  [BUGGY]    String  arg  =  arguments[i];  if  (   "--   ".equals(arg))  {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  tokens.add(   "-   ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String[]  arguments[]  =(String[])options.toArray(new  String[arguments.size()  ]);	      String[]    arguments[]    =(String[])options.toArray(new    String[args.size()    ]);    	non-compiled	[CE]  variable  arguments  is  already  defined  in  method  flatten(Options,String[],boolean)	4	None	replace
60	[BUG]  [BUGGY]  String[]  arguments[]  =(String[])options.toArray(new  String[arguments[i.size()  ]);  [CE]  ']'  expected  [FE]              ComparisonFailure    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {    [BUGGY]  String[]  arguments[]  =(String[])options.toArray(new  String[arguments[i.size()  ]);  [BUGGY]    String  arg  =  arguments[i];  if  (   "--   ".equals(arg))  {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  tokens.add(   "-   ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String[]  arguments[]  =(String[])options.toArray(new  String[arguments[i.size()  ]);	      String[]    arguments[]    =(String[])options.toArray(new    String[args.size()    ]);    	non-compiled	[CE]  ']'  expected	4	None	replace
61	[BUG]  [BUGGY]  String[]  arguments[]  =(String[])options.toArray(new  String[args.size()  +  1]);  [CE]  variable  arguments  is  already  defined  in  method  flatten(Options,String[],boolean)  [FE]                ComparisonFailure    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {    [BUGGY]  String[]  arguments[]  =(String[])options.toArray(new  String[args.size()  +  1]);  [BUGGY]    String  arg  =  arguments[i];  if  (   "--   ".equals(arg))  {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  tokens.add(   "-   ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String[]  arguments[]  =(String[])options.toArray(new  String[args.size()  +  1]);	      String[]    arguments[]    =(String[])options.toArray(new    String[args.size()    ]);    	non-compiled	[CE]  variable  arguments  is  already  defined  in  method  flatten(Options,String[],boolean)	4	None	replace
62	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    ComparisonFailure    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {    [BUGGY]  String  arg  =(arguments[i]  ==  null)?  arguments[i]  : "null ";  [BUGGY]      if  (   "--   ".equals(arg))  {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  tokens.add(   "-   ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	add	String  arg  =(arguments[i]  ==  null)?  arguments[i]  : "null ";	  String    arg    =(arguments[i]!=    null)?    arguments[i]    :   "null   ";    	compilable	  [FE]  AssertionFailedError  	19	14	replace
63	[BUG]  [BUGGY]  String  arg  =(arguments[i]  ==  null)?  arguments[i]  : "null ";  [FE]  AssertionFailedError  [FE]    ComparisonFailure    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {    [BUGGY]  String  arg  =(arguments[i]  ==  null)?  arguments[i]  : "null ";  [BUGGY]      if  (   "--   ".equals(arg))  {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  tokens.add(   "-   ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String  arg  =(arguments[i]  ==  null)?  arguments[i]  : "null ";	  String    arg    =(arguments[i]!=    null)?    arguments[i]    :   "null   ";    	compilable	  [FE]  AssertionFailedError  	19	14	replace
64	[BUG]  [BUGGY]  String  arg  =  arguments[i]  +   "-   ";  String  arg  =  arguments[i]  +   "-   ";  [CE]  variable  arg  is  already  defined  in  method  flatten(Options,String[],boolean)  [FE]    UnrecognizedOptionException    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {    [BUGGY]  String  arg  =  arguments[i]  +   "-   ";  String  arg  =  arguments[i]  +   "-   ";  [BUGGY]      if  (   "--   ".equals(arg))  {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  tokens.add(   "-   ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String    arg    =    arguments[i]    +   "-   ";    String  arg  =  arguments[i]  +   "-   ";	  	non-compiled	[CE]  variable  arg  is  already  defined  in  method  flatten(Options,String[],boolean)	11	None	add
65	[BUG]  [BUGGY]  String  arg  =  arguments[i]  +   "-   ";  String  arg  =  arguments[i]  + ",-   ";  [CE]  variable  arg  is  already  defined  in  method  flatten(Options,String[],boolean)  [FE]      UnrecognizedOptionException    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {    [BUGGY]  String  arg  =  arguments[i]  +   "-   ";  String  arg  =  arguments[i]  + ",-   ";  [BUGGY]      if  (   "--   ".equals(arg))  {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  tokens.add(   "-   ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String    arg    =    arguments[i]    +   "-   ";    String  arg  =  arguments[i]  + ",-   ";	  	non-compiled	[CE]  variable  arg  is  already  defined  in  method  flatten(Options,String[],boolean)	11	None	add
66	[BUG]  [BUGGY]  String  arg  =  arguments[i]  +   "-   ";  String  arg  =  arguments[i]  + ".-   ";  [CE]  variable  arg  is  already  defined  in  method  flatten(Options,String[],boolean)  [FE]        UnrecognizedOptionException    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {    [BUGGY]  String  arg  =  arguments[i]  +   "-   ";  String  arg  =  arguments[i]  + ".-   ";  [BUGGY]      if  (   "--   ".equals(arg))  {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  tokens.add(   "-   ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String    arg    =    arguments[i]    +   "-   ";    String  arg  =  arguments[i]  + ".-   ";	  	non-compiled	[CE]  variable  arg  is  already  defined  in  method  flatten(Options,String[],boolean)	11	None	add
67	[BUG]  [BUGGY]  String  arg  =  arguments[i].trim();  String  arg  =  arguments[i].trim();  [CE]  variable  arg  is  already  defined  in  method  flatten(Options,String[],boolean)  [FE]    ComparisonFailure    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {    [BUGGY]  String  arg  =  arguments[i].trim();  String  arg  =  arguments[i].trim();  [BUGGY]      if  (   "--   ".equals(arg))  {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  tokens.add(   "-   ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String    arg    =    arguments[i].trim();    String  arg  =  arguments[i].trim();	  	non-compiled	[CE]  variable  arg  is  already  defined  in  method  flatten(Options,String[],boolean)	7	None	add
68	[BUG]  [BUGGY]  String  arg  =  arguments[i].trim();  String  arg  =  arguments[i].trim();  }  else  if( "-- ".equals(arg))  {  eatTheRest  =  true;  tokens.add( "-- ");  }  [CE]  [FE]      ComparisonFailure    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {    [BUGGY]  String  arg  =  arguments[i].trim();  String  arg  =  arguments[i].trim();  }  else  if( "-- ".equals(arg))  {  eatTheRest  =  true;  tokens.add( "-- ");  }  [BUGGY]      if  (   "--   ".equals(arg))  {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  tokens.add(   "-   ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String    arg    =    arguments[i].trim();    String  arg  =  arguments[i].trim();  }  else  if( "-- ".equals(arg))  {  eatTheRest  =  true;  tokens.add( "-- ");  }	  	non-compiled	[CE]  	7	None	add
69	[BUG]  [BUGGY]  String  arg  =  arguments[i].trim();  String  arg  =  arguments[i].trim();  }  else  if( "-- ".equals(arg))  {  eatTheRest  =  true;  tokens.add( "-   ");  }  [CE]  [FE]        ComparisonFailure    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {    [BUGGY]  String  arg  =  arguments[i].trim();  String  arg  =  arguments[i].trim();  }  else  if( "-- ".equals(arg))  {  eatTheRest  =  true;  tokens.add( "-   ");  }  [BUGGY]      if  (   "--   ".equals(arg))  {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  tokens.add(   "-   ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String    arg    =    arguments[i].trim();    String  arg  =  arguments[i].trim();  }  else  if( "-- ".equals(arg))  {  eatTheRest  =  true;  tokens.add( "-   ");  }	  	non-compiled	[CE]  	7	None	add
70	[BUG]  [BUGGY]  String  arg  =  arguments[i].trim();  String  arg  =  arguments[i].trim();  }  else  if( "-- ".equals(arg))  {  tokens.add( "-- ");  }  [CE]  [FE]          ComparisonFailure    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {    [BUGGY]  String  arg  =  arguments[i].trim();  String  arg  =  arguments[i].trim();  }  else  if( "-- ".equals(arg))  {  tokens.add( "-- ");  }  [BUGGY]      if  (   "--   ".equals(arg))  {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  tokens.add(   "-   ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String    arg    =    arguments[i].trim();    String  arg  =  arguments[i].trim();  }  else  if( "-- ".equals(arg))  {  tokens.add( "-- ");  }	  	non-compiled	[CE]  	7	None	add
71	[BUG]  [BUGGY]  String[]  arguments  =  options.get(i  +  1);  [CE]  variable  arguments  is  already  defined  in  method  flatten(Options,String[],boolean)  [FE]        ComparisonFailure    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {    [BUGGY]  String[]  arguments  =  options.get(i  +  1);  [BUGGY]    String  arg  =  arguments[i];  if  (   "--   ".equals(arg))  {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  tokens.add(   "-   ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String[]  arguments  =  options.get(i  +  1);	      String[]    arguments    =    options.get(i);    	non-compiled	[CE]  variable  arguments  is  already  defined  in  method  flatten(Options,String[],boolean)	20	None	replace
72	[BUG]  [BUGGY]  String[]  arguments  =  options.get(i,  opt);  [CE]  variable  arguments  is  already  defined  in  method  flatten(Options,String[],boolean)  [FE]          ComparisonFailure    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {    [BUGGY]  String[]  arguments  =  options.get(i,  opt);  [BUGGY]    String  arg  =  arguments[i];  if  (   "--   ".equals(arg))  {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  tokens.add(   "-   ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String[]  arguments  =  options.get(i,  opt);	      String[]    arguments    =    options.get(i);    	non-compiled	[CE]  variable  arguments  is  already  defined  in  method  flatten(Options,String[],boolean)	20	None	replace
73	[BUG]  [BUGGY]  String[]  arguments  =  options.get(i)+  1;  [CE]  variable  arguments  is  already  defined  in  method  flatten(Options,String[],boolean)  [FE]            ComparisonFailure    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {    [BUGGY]  String[]  arguments  =  options.get(i)+  1;  [BUGGY]    String  arg  =  arguments[i];  if  (   "--   ".equals(arg))  {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  tokens.add(   "-   ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String[]  arguments  =  options.get(i)+  1;	      String[]    arguments    =    options.get(i);    	non-compiled	[CE]  variable  arguments  is  already  defined  in  method  flatten(Options,String[],boolean)	20	None	replace
74	[BUG]  [BUGGY]  String  arg  =(arguments[i]  ==  null)?  arguments[i]   "null "  :  arguments[i];  [CE]  :  expected  [FE]    AssertionFailedError    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {    [BUGGY]  String  arg  =(arguments[i]  ==  null)?  arguments[i]   "null "  :  arguments[i];  [BUGGY]      if  (   "--   ".equals(arg))  {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  tokens.add(   "-   ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String  arg  =(arguments[i]  ==  null)?  arguments[i]   "null "  :  arguments[i];	  String    arg    =(arguments[i]!=    null)?   "null   "    :    arguments[i];    	non-compiled	[CE]  :  expected	17	None	replace
75	[BUG]  [BUGGY]  String[]  arguments[]  =(String[])options.toArray(new  String[arguments[0]);  [CE]  ']'  expected  [FE]          ComparisonFailure    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {    [BUGGY]  String[]  arguments[]  =(String[])options.toArray(new  String[arguments[0]);  [BUGGY]    String  arg  =  arguments[i];  if  (   "--   ".equals(arg))  {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  tokens.add(   "-   ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String[]  arguments[]  =(String[])options.toArray(new  String[arguments[0]);	      String[]    arguments[]    =(String[])options.toArray(new    String[arguments[i]);    	non-compiled	[CE]  ']'  expected	3	None	replace
76	[BUG]  [BUGGY]  String[]  arguments[]  =(String[])options.toArray(new  String[arguments[i],  opt);  [CE]  ']'  expected  [FE]            ComparisonFailure    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {    [BUGGY]  String[]  arguments[]  =(String[])options.toArray(new  String[arguments[i],  opt);  [BUGGY]    String  arg  =  arguments[i];  if  (   "--   ".equals(arg))  {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  tokens.add(   "-   ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String[]  arguments[]  =(String[])options.toArray(new  String[arguments[i],  opt);	      String[]    arguments[]    =(String[])options.toArray(new    String[arguments[i]);    	non-compiled	[CE]  ']'  expected	3	None	replace
77	[BUG]  [BUGGY]  String  arg  =(arguments[i]!=  null)?   "null   "  :  arguments[i];  String  arg  =(arguments[i]!=  null)?   "null   "  :  arguments[i];  [CE]  variable  arg  is  already  defined  in  method  flatten(Options,String[],boolean)  [FE]    AssertionFailedError    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {    [BUGGY]  String  arg  =(arguments[i]!=  null)?   "null   "  :  arguments[i];  String  arg  =(arguments[i]!=  null)?   "null   "  :  arguments[i];  [BUGGY]      if  (   "--   ".equals(arg))  {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  tokens.add(   "-   ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String    arg    =(arguments[i]!=    null)?   "null   "    :    arguments[i];    String  arg  =(arguments[i]!=  null)?   "null   "  :  arguments[i];	  	non-compiled	[CE]  variable  arg  is  already  defined  in  method  flatten(Options,String[],boolean)	16	None	add
78	[BUG]  [BUGGY]  String  arg  =(arguments[i]!=  null)?   "null   "  :  arguments[i];  String  arg  =(arguments[i]  ==  null)?   "null   "  :  arguments[i];  [CE]  variable  arg  is  already  defined  in  method  flatten(Options,String[],boolean)  [FE]      AssertionFailedError    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {    [BUGGY]  String  arg  =(arguments[i]!=  null)?   "null   "  :  arguments[i];  String  arg  =(arguments[i]  ==  null)?   "null   "  :  arguments[i];  [BUGGY]      if  (   "--   ".equals(arg))  {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  tokens.add(   "-   ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String    arg    =(arguments[i]!=    null)?   "null   "    :    arguments[i];    String  arg  =(arguments[i]  ==  null)?   "null   "  :  arguments[i];	  	non-compiled	[CE]  variable  arg  is  already  defined  in  method  flatten(Options,String[],boolean)	16	None	add
79	[BUG]  [BUGGY]  String  arg  =(arguments[i]!=  null)?   "null   "  :  arguments[i];  String  arg  =(arguments[i]!=  null)?   "null ",  :  arguments[i];  [CE]  :  expected  [FE]        AssertionFailedError    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {    [BUGGY]  String  arg  =(arguments[i]!=  null)?   "null   "  :  arguments[i];  String  arg  =(arguments[i]!=  null)?   "null ",  :  arguments[i];  [BUGGY]      if  (   "--   ".equals(arg))  {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  tokens.add(   "-   ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String    arg    =(arguments[i]!=    null)?   "null   "    :    arguments[i];    String  arg  =(arguments[i]!=  null)?   "null ",  :  arguments[i];	  	non-compiled	[CE]  :  expected	16	None	add
80	[BUG]  [BUGGY]  String  arg  =(arguments[i]!=  null)?  arguments[i]  :   "null   ";  String  arg  =(arguments[i]!=  null)?  arguments[i]  :   "null ";  [CE]  variable  arg  is  already  defined  in  method  flatten(Options,String[],boolean)  [FE]    ComparisonFailure    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {    [BUGGY]  String  arg  =(arguments[i]!=  null)?  arguments[i]  :   "null   ";  String  arg  =(arguments[i]!=  null)?  arguments[i]  :   "null ";  [BUGGY]      if  (   "--   ".equals(arg))  {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  tokens.add(   "-   ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String    arg    =(arguments[i]!=    null)?    arguments[i]    :   "null   ";    String  arg  =(arguments[i]!=  null)?  arguments[i]  :   "null ";	  	non-compiled	[CE]  variable  arg  is  already  defined  in  method  flatten(Options,String[],boolean)	18	None	add
81	[BUG]  [BUGGY]  String  arg  =(arguments[i]!=  null)?  arguments[i]  :   "null   ";  String  arg  =(arguments[i]  ==  null)?  arguments[i]  :   "null ";  [CE]  variable  arg  is  already  defined  in  method  flatten(Options,String[],boolean)  [FE]      ComparisonFailure    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {    [BUGGY]  String  arg  =(arguments[i]!=  null)?  arguments[i]  :   "null   ";  String  arg  =(arguments[i]  ==  null)?  arguments[i]  :   "null ";  [BUGGY]      if  (   "--   ".equals(arg))  {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  tokens.add(   "-   ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String    arg    =(arguments[i]!=    null)?    arguments[i]    :   "null   ";    String  arg  =(arguments[i]  ==  null)?  arguments[i]  :   "null ";	  	non-compiled	[CE]  variable  arg  is  already  defined  in  method  flatten(Options,String[],boolean)	18	None	add
82	[BUG]  [BUGGY]  String  arg  =  arguments[i].trim();  String  arg  =  arguments[i].trim().trim();  [CE]  variable  arg  is  already  defined  in  method  flatten(Options,String[],boolean)  [FE]    ComparisonFailure    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {    [BUGGY]  String  arg  =  arguments[i].trim();  String  arg  =  arguments[i].trim().trim();  [BUGGY]      if  (   "--   ".equals(arg))  {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  tokens.add(   "-   ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String    arg    =    arguments[i].trim();    String  arg  =  arguments[i].trim().trim();	  	non-compiled	[CE]  variable  arg  is  already  defined  in  method  flatten(Options,String[],boolean)	7	None	add
83	[BUG]  [BUGGY]  String  arg  =  arguments[i].trim();  String  arg  =  arguments[i].trim();  tokens.add( "- ");  [CE]  variable  arg  is  already  defined  in  method  flatten(Options,String[],boolean)  [FE]      ComparisonFailure    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {    [BUGGY]  String  arg  =  arguments[i].trim();  String  arg  =  arguments[i].trim();  tokens.add( "- ");  [BUGGY]      if  (   "--   ".equals(arg))  {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  tokens.add(   "-   ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String    arg    =    arguments[i].trim();    String  arg  =  arguments[i].trim();  tokens.add( "- ");	  	non-compiled	[CE]  variable  arg  is  already  defined  in  method  flatten(Options,String[],boolean)	7	None	add
84	[BUG]  [BUGGY]  String  arg  =  arguments[i].trim();  String  arg  =  arguments[i].split( "n ");  [CE]  variable  arg  is  already  defined  in  method  flatten(Options,String[],boolean)  [FE]        ComparisonFailure    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {    [BUGGY]  String  arg  =  arguments[i].trim();  String  arg  =  arguments[i].split( "n ");  [BUGGY]      if  (   "--   ".equals(arg))  {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  tokens.add(   "-   ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String    arg    =    arguments[i].trim();    String  arg  =  arguments[i].split( "n ");	  	non-compiled	[CE]  variable  arg  is  already  defined  in  method  flatten(Options,String[],boolean)	7	None	add
85	[BUG]  [BUGGY]  String[]  arguments  =  options.toArray(new  String[0]);  [CE]  variable  arguments  is  already  defined  in  method  flatten(Options,String[],boolean)  [FE]          ComparisonFailure    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {    [BUGGY]  String[]  arguments  =  options.toArray(new  String[0]);  [BUGGY]    String  arg  =  arguments[i];  if  (   "--   ".equals(arg))  {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  tokens.add(   "-   ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String[]  arguments  =  options.toArray(new  String[0]);	      String[]    arguments    =(String[])options.toArray(new    String[0]);    	non-compiled	[CE]  variable  arguments  is  already  defined  in  method  flatten(Options,String[],boolean)	25	None	replace
86	[BUG]  [BUGGY]  tokens.add( "-- ");  [CE]  cannot  find  symbol  arg  [FE]    AssertionFailedError    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {    [BUGGY]  tokens.add( "-- ");  [BUGGY]    String  arg  =  arguments[i];  if  (   "--   ".equals(arg))  {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  tokens.add(   "-   ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	tokens.add( "-- ");	      tokens.add(   "-   ");    	non-compiled	[CE]  cannot  find  symbol  arg	2	None	replace
87	[BUG]  [BUGGY]  String  arg  =  arguments[i].trim().toLowerCase(Locale.ENGLISH);  [CE]  cannot  find  symbol  Locale  [FE]    ComparisonFailure    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {    [BUGGY]  String  arg  =  arguments[i].trim().toLowerCase(Locale.ENGLISH);  [BUGGY]      if  (   "--   ".equals(arg))  {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  tokens.add(   "-   ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String  arg  =  arguments[i].trim().toLowerCase(Locale.ENGLISH);	  String    arg    =    arguments[i].trim();    	non-compiled	[CE]  cannot  find  symbol  Locale	8	None	replace
88	[BUG]  [BUGGY]  String  arg  =  options[i]  +  arguments[i];  [CE]  array  required,  but  Options  found  [FE]          ComparisonFailure    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {    [BUGGY]  String  arg  =  options[i]  +  arguments[i];  [BUGGY]      if  (   "--   ".equals(arg))  {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  tokens.add(   "-   ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String  arg  =  options[i]  +  arguments[i];	  String    arg    =    options[i];    	non-compiled	[CE]  array  required,  but  Options  found	15	None	replace
89	[BUG]  [BUGGY]  String[]  arguments  =  options.get(i,  stopAtNonOption);  [CE]  variable  arguments  is  already  defined  in  method  flatten(Options,String[],boolean)  [FE]        ComparisonFailure    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {    [BUGGY]  String[]  arguments  =  options.get(i,  stopAtNonOption);  [BUGGY]    String  arg  =  arguments[i];  if  (   "--   ".equals(arg))  {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  tokens.add(   "-   ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String[]  arguments  =  options.get(i,  stopAtNonOption);	      String[]    arguments    =    options.get(i);    	non-compiled	[CE]  variable  arguments  is  already  defined  in  method  flatten(Options,String[],boolean)	20	None	replace
90	[BUG]  [BUGGY]  String[]  arguments  =  options.get(i).toString();  [CE]  variable  arguments  is  already  defined  in  method  flatten(Options,String[],boolean)  [FE]          ComparisonFailure    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {    [BUGGY]  String[]  arguments  =  options.get(i).toString();  [BUGGY]    String  arg  =  arguments[i];  if  (   "--   ".equals(arg))  {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  tokens.add(   "-   ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String[]  arguments  =  options.get(i).toString();	      String[]    arguments    =    options.get(i);    	non-compiled	[CE]  variable  arguments  is  already  defined  in  method  flatten(Options,String[],boolean)	20	None	replace
91	[BUG]  [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(tokens[i].length);  [CE]  cannot  find  symbol  [FE]          ComparisonFailure    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {    [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(tokens[i].length);  [BUGGY]    String  arg  =  arguments[i];  if  (   "--   ".equals(arg))  {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  tokens.add(   "-   ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	TokenBuffer  tokens  =  new  TokenBuffer(tokens[i].length);	      TokenBuffer    tokens    =    new    TokenBuffer(tokens.length);    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
92	[BUG]  [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(tokens.length,  i);  [CE]  cannot  find  symbol  [FE]            ComparisonFailure    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {    [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(tokens.length,  i);  [BUGGY]    String  arg  =  arguments[i];  if  (   "--   ".equals(arg))  {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  tokens.add(   "-   ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	TokenBuffer  tokens  =  new  TokenBuffer(tokens.length,  i);	      TokenBuffer    tokens    =    new    TokenBuffer(tokens.length);    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
93	[BUG]  [BUGGY]  String  arg  =  arguments[i].toString();  String  arg  =  arguments[i].toString();  tokens.add( "- ");  [CE]  variable  arg  is  already  defined  in  method  flatten(Options,String[],boolean)  [FE]    ComparisonFailure    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {    [BUGGY]  String  arg  =  arguments[i].toString();  String  arg  =  arguments[i].toString();  tokens.add( "- ");  [BUGGY]      if  (   "--   ".equals(arg))  {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  tokens.add(   "-   ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String    arg    =    arguments[i].toString();    String  arg  =  arguments[i].toString();  tokens.add( "- ");	  	non-compiled	[CE]  variable  arg  is  already  defined  in  method  flatten(Options,String[],boolean)	9	None	add
94	[BUG]  [BUGGY]  String  arg  =  arguments[i].toString();  String  arg  =  arguments[i].toString();  tokens.add( "-- ");  [CE]  variable  arg  is  already  defined  in  method  flatten(Options,String[],boolean)  [FE]      ComparisonFailure    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {    [BUGGY]  String  arg  =  arguments[i].toString();  String  arg  =  arguments[i].toString();  tokens.add( "-- ");  [BUGGY]      if  (   "--   ".equals(arg))  {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  tokens.add(   "-   ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String    arg    =    arguments[i].toString();    String  arg  =  arguments[i].toString();  tokens.add( "-- ");	  	non-compiled	[CE]  variable  arg  is  already  defined  in  method  flatten(Options,String[],boolean)	9	None	add
95	[BUG]  [BUGGY]  String  arg  =(arguments[i]!=  null)?  arguments[i]  :   "null   ";  String  arg  =(arguments[i]!=  null)?  arguments[i]  :   "null ",  null;  [CE]  <identifier>  expected  [FE]    ComparisonFailure    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {    [BUGGY]  String  arg  =(arguments[i]!=  null)?  arguments[i]  :   "null   ";  String  arg  =(arguments[i]!=  null)?  arguments[i]  :   "null ",  null;  [BUGGY]      if  (   "--   ".equals(arg))  {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  tokens.add(   "-   ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String    arg    =(arguments[i]!=    null)?    arguments[i]    :   "null   ";    String  arg  =(arguments[i]!=  null)?  arguments[i]  :   "null ",  null;	  	non-compiled	[CE]  <identifier>  expected	18	None	add
96	[BUG]  [BUGGY]  String[]  arguments[]  =  opt.toArray(new  String[arguments[i]),  stopAtNonOption);  [CE]  ']'  expected  [FE]                ComparisonFailure    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {    [BUGGY]  String[]  arguments[]  =  opt.toArray(new  String[arguments[i]),  stopAtNonOption);  [BUGGY]    String  arg  =  arguments[i];  if  (   "--   ".equals(arg))  {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  tokens.add(   "-   ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String[]  arguments[]  =  opt.toArray(new  String[arguments[i]),  stopAtNonOption);	      String[]    arguments[]    =    opt.toArray(new    String[arguments[i]);    	non-compiled	[CE]  ']'  expected	6	None	replace
97	[BUG]  [BUGGY]  String[]  arguments[]  =  options.toArray(new  String[arguments.size()  ]);  [CE]  variable  arguments  is  already  defined  in  method  flatten(Options,String[],boolean)  [FE]            ComparisonFailure    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {    [BUGGY]  String[]  arguments[]  =  options.toArray(new  String[arguments.size()  ]);  [BUGGY]    String  arg  =  arguments[i];  if  (   "--   ".equals(arg))  {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  tokens.add(   "-   ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String[]  arguments[]  =  options.toArray(new  String[arguments.size()  ]);	      String[]    arguments[]    =(String[])options.toArray(new    String[args.size()    ]);    	non-compiled	[CE]  variable  arguments  is  already  defined  in  method  flatten(Options,String[],boolean)	4	None	replace
98	[BUG]  [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(options.size());  [CE]  cannot  find  symbol  [FE]              ComparisonFailure    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {    [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(options.size());  [BUGGY]    String  arg  =  arguments[i];  if  (   "--   ".equals(arg))  {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  tokens.add(   "-   ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	TokenBuffer  tokens  =  new  TokenBuffer(options.size());	      TokenBuffer    tokens    =    new    TokenBuffer(tokens.size());    	non-compiled	[CE]  cannot  find  symbol	23	None	replace
99	[BUG]  [BUGGY]  String  arg  =  options[i]  + "- ";  [CE]  array  required,  but  Options  found  [FE]    UnrecognizedOptionException    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {    [BUGGY]  String  arg  =  options[i]  + "- ";  [BUGGY]      if  (   "--   ".equals(arg))  {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  tokens.add(   "-   ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String  arg  =  options[i]  + "- ";	  String    arg    =    arguments[i]    +   "-   ";    	non-compiled	[CE]  array  required,  but  Options  found	12	None	replace
100	[BUG]  [BUGGY]  String  arg  =(arguments[i]!=  null)?  arguments[i]  :   "null   ";  String  arg  =(arguments[i]!=  null)?  arguments[i]  :   "null ",;  [CE]  <identifier>  expected  [FE]    ComparisonFailure    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {    [BUGGY]  String  arg  =(arguments[i]!=  null)?  arguments[i]  :   "null   ";  String  arg  =(arguments[i]!=  null)?  arguments[i]  :   "null ",;  [BUGGY]      if  (   "--   ".equals(arg))  {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  tokens.add(   "-   ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String    arg    =(arguments[i]!=    null)?    arguments[i]    :   "null   ";    String  arg  =(arguments[i]!=  null)?  arguments[i]  :   "null ",;	  	non-compiled	[CE]  <identifier>  expected	18	None	add
101	[BUG]  [BUGGY]  String[]  arguments  =(String[])options.toArray(new  String[args[i]);  [CE]  ']'  expected  [FE]          ComparisonFailure    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {    [BUGGY]  String[]  arguments  =(String[])options.toArray(new  String[args[i]);  [BUGGY]    String  arg  =  arguments[i];  if  (   "--   ".equals(arg))  {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  tokens.add(   "-   ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String[]  arguments  =(String[])options.toArray(new  String[args[i]);	      String[]    arguments    =(String[])options.toArray(new    String[0]);    	non-compiled	[CE]  ']'  expected	25	None	replace
102	[BUG]  [BUGGY]  String[]  arguments[]  =(String[])options.toArray(new  String[args[i]);  [CE]  ']'  expected  [FE]              ComparisonFailure    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {    [BUGGY]  String[]  arguments[]  =(String[])options.toArray(new  String[args[i]);  [BUGGY]    String  arg  =  arguments[i];  if  (   "--   ".equals(arg))  {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  tokens.add(   "-   ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String[]  arguments[]  =(String[])options.toArray(new  String[args[i]);	      String[]    arguments[]    =(String[])options.toArray(new    String[0]);    	non-compiled	[CE]  ']'  expected	5	None	replace
103	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    ComparisonFailure    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {    [BUGGY]  String  arg  =(arguments[i]  ==  null)?  arguments[i]  : ",null ";  [BUGGY]      if  (   "--   ".equals(arg))  {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  tokens.add(   "-   ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	add	String  arg  =(arguments[i]  ==  null)?  arguments[i]  : ",null ";	  String    arg    =(arguments[i]!=    null)?    arguments[i]    :   "null   ";    	compilable	  [FE]  AssertionFailedError  	19	14	replace
104	[BUG]  [BUGGY]  String  arg  =(arguments[i]  ==  null)?  arguments[i]  : ",null ";  [FE]  AssertionFailedError  [FE]    ComparisonFailure    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {    [BUGGY]  String  arg  =(arguments[i]  ==  null)?  arguments[i]  : ",null ";  [BUGGY]      if  (   "--   ".equals(arg))  {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  tokens.add(   "-   ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String  arg  =(arguments[i]  ==  null)?  arguments[i]  : ",null ";	  String    arg    =(arguments[i]!=    null)?    arguments[i]    :   "null   ";    	compilable	  [FE]  AssertionFailedError  	19	14	replace
105	[BUG]  [BUGGY]  [FE]  UnrecognizedOptionException  [FE]    UnrecognizedOptionException    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {    [BUGGY]  String  arg  =  arguments[i]  + ": ";  [BUGGY]      if  (   "--   ".equals(arg))  {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  tokens.add(   "-   ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	add	String  arg  =  arguments[i]  + ": ";	  String    arg    =    arguments[i]    +   "-   ";    	compilable	  [FE]  UnrecognizedOptionException  	12	13	replace
106	[BUG]  [BUGGY]  String  arg  =  arguments[i]  + ": ";  [FE]  UnrecognizedOptionException  [FE]    UnrecognizedOptionException    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {    [BUGGY]  String  arg  =  arguments[i]  + ": ";  [BUGGY]      if  (   "--   ".equals(arg))  {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  tokens.add(   "-   ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String  arg  =  arguments[i]  + ": ";	  String    arg    =    arguments[i]    +   "-   ";    	compilable	  [FE]  UnrecognizedOptionException  	12	13	replace
107	[BUG]  [BUGGY]  String  arg  =(options[i]!=  null)?  options[i]  :  arguments[i];  [CE]  array  required,  but  Options  found  [FE]          ComparisonFailure    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {    [BUGGY]  String  arg  =(options[i]!=  null)?  options[i]  :  arguments[i];  [BUGGY]      if  (   "--   ".equals(arg))  {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  tokens.add(   "-   ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String  arg  =(options[i]!=  null)?  options[i]  :  arguments[i];	  String    arg    =    options[i];    	non-compiled	[CE]  array  required,  but  Options  found	15	None	replace
108	[BUG]  [BUGGY]  String  arg  =(options[i]  ==  null)?  options[i]  :  arguments[i];  [CE]  array  required,  but  Options  found  [FE]            ComparisonFailure    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {    [BUGGY]  String  arg  =(options[i]  ==  null)?  options[i]  :  arguments[i];  [BUGGY]      if  (   "--   ".equals(arg))  {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  tokens.add(   "-   ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String  arg  =(options[i]  ==  null)?  options[i]  :  arguments[i];	  String    arg    =    options[i];    	non-compiled	[CE]  array  required,  but  Options  found	15	None	replace
109	[BUG]  [BUGGY]  tokens.add( "- ".equals(arguments[i]));  [CE]  cannot  find  symbol  arg  [FE]    AssertionFailedError    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {    [BUGGY]  tokens.add( "- ".equals(arguments[i]));  [BUGGY]    String  arg  =  arguments[i];  if  (   "--   ".equals(arg))  {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  tokens.add(   "-   ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	tokens.add( "- ".equals(arguments[i]));	      tokens.add(   "-   ");    	non-compiled	[CE]  cannot  find  symbol  arg	2	None	replace
110	[BUG]  [BUGGY]  String  arg  =  arguments[i].toString();  String  arg  =  arguments[i].toString());  [CE]  ';'  expected  [FE]    ComparisonFailure    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {    [BUGGY]  String  arg  =  arguments[i].toString();  String  arg  =  arguments[i].toString());  [BUGGY]      if  (   "--   ".equals(arg))  {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  tokens.add(   "-   ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String    arg    =    arguments[i].toString();    String  arg  =  arguments[i].toString());	  	non-compiled	[CE]  ';'  expected	9	None	add
111	[BUG]  [BUGGY]  String  arg  =  arguments[i].toString();  String  arg  =  argument[i].toString();  [CE]  variable  arg  is  already  defined  in  method  flatten(Options,String[],boolean)  [FE]      ComparisonFailure    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {    [BUGGY]  String  arg  =  arguments[i].toString();  String  arg  =  argument[i].toString();  [BUGGY]      if  (   "--   ".equals(arg))  {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  tokens.add(   "-   ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String    arg    =    arguments[i].toString();    String  arg  =  argument[i].toString();	  	non-compiled	[CE]  variable  arg  is  already  defined  in  method  flatten(Options,String[],boolean)	9	None	add
112	[BUG]  [BUGGY]  String[]  arguments  =  options.get(i).toArray(new  String[arguments[i]),  opt);  [CE]  ']'  expected  [FE]            ComparisonFailure    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {    [BUGGY]  String[]  arguments  =  options.get(i).toArray(new  String[arguments[i]),  opt);  [BUGGY]    String  arg  =  arguments[i];  if  (   "--   ".equals(arg))  {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  tokens.add(   "-   ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String[]  arguments  =  options.get(i).toArray(new  String[arguments[i]),  opt);	      String[]    arguments    =    options.get(i).toArray(new    String[arguments[i]);    	non-compiled	[CE]  ']'  expected	22	None	replace
113	[BUG]  [BUGGY]  String  arg  =  arguments[i].trim();  String  arg  =  arguments[i].split( "- ");  [CE]  variable  arg  is  already  defined  in  method  flatten(Options,String[],boolean)  [FE]    ComparisonFailure    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {    [BUGGY]  String  arg  =  arguments[i].trim();  String  arg  =  arguments[i].split( "- ");  [BUGGY]      if  (   "--   ".equals(arg))  {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  tokens.add(   "-   ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String    arg    =    arguments[i].trim();    String  arg  =  arguments[i].split( "- ");	  	non-compiled	[CE]  variable  arg  is  already  defined  in  method  flatten(Options,String[],boolean)	7	None	add
114	[BUG]  [BUGGY]  String  arg  =  arguments[i].trim();  String  arg  =  arguments[i].itrim();  [CE]  variable  arg  is  already  defined  in  method  flatten(Options,String[],boolean)  [FE]      ComparisonFailure    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {    [BUGGY]  String  arg  =  arguments[i].trim();  String  arg  =  arguments[i].itrim();  [BUGGY]      if  (   "--   ".equals(arg))  {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  tokens.add(   "-   ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String    arg    =    arguments[i].trim();    String  arg  =  arguments[i].itrim();	  	non-compiled	[CE]  variable  arg  is  already  defined  in  method  flatten(Options,String[],boolean)	7	None	add
115	[BUG]  [BUGGY]  String  arg  =(arguments[i]  ==  null)?   "null   "  :  arguments[i];  String  arg  =(arguments[i]  ==  null)?   "null ")  :  arguments[i];  [CE]  :  expected  [FE]    ComparisonFailure    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {    [BUGGY]  String  arg  =(arguments[i]  ==  null)?   "null   "  :  arguments[i];  String  arg  =(arguments[i]  ==  null)?   "null ")  :  arguments[i];  [BUGGY]      if  (   "--   ".equals(arg))  {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  tokens.add(   "-   ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String    arg    =(arguments[i]    ==    null)?   "null   "    :    arguments[i];    String  arg  =(arguments[i]  ==  null)?   "null ")  :  arguments[i];	  	non-compiled	[CE]  :  expected	13	None	add
116	[BUG]  [BUGGY]  String[]  arguments[]  =  arguments[i].toArray(new  String[arguments[i]);  [CE]  ']'  expected  [FE]                ComparisonFailure    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {    [BUGGY]  String[]  arguments[]  =  arguments[i].toArray(new  String[arguments[i]);  [BUGGY]    String  arg  =  arguments[i];  if  (   "--   ".equals(arg))  {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  tokens.add(   "-   ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String[]  arguments[]  =  arguments[i].toArray(new  String[arguments[i]);	      String[]    arguments[]    =    opt.toArray(new    String[arguments[i]);    	non-compiled	[CE]  ']'  expected	6	None	replace
117	[BUG]  [BUGGY]  String[]  arguments[]  =(String[])options.toArray(new  String[arguments[i  +  1]);  [CE]  ']'  expected  [FE]          ComparisonFailure    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {    [BUGGY]  String[]  arguments[]  =(String[])options.toArray(new  String[arguments[i  +  1]);  [BUGGY]    String  arg  =  arguments[i];  if  (   "--   ".equals(arg))  {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  tokens.add(   "-   ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String[]  arguments[]  =(String[])options.toArray(new  String[arguments[i  +  1]);	      String[]    arguments[]    =(String[])options.toArray(new    String[arguments[i]);    	non-compiled	[CE]  ']'  expected	3	None	replace
118	[BUG]  [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(arguments[i].length);  [CE]  cannot  find  symbol  [FE]          ComparisonFailure    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {    [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(arguments[i].length);  [BUGGY]    String  arg  =  arguments[i];  if  (   "--   ".equals(arg))  {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  tokens.add(   "-   ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	TokenBuffer  tokens  =  new  TokenBuffer(arguments[i].length);	      TokenBuffer    tokens    =    new    TokenBuffer(tokens.length);    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
119	[BUG]  [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(tokens[i]);  [CE]  cannot  find  symbol  [FE]            ComparisonFailure    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {    [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(tokens[i]);  [BUGGY]    String  arg  =  arguments[i];  if  (   "--   ".equals(arg))  {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  tokens.add(   "-   ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	TokenBuffer  tokens  =  new  TokenBuffer(tokens[i]);	      TokenBuffer    tokens    =    new    TokenBuffer(tokens.length);    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
120	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {    [BUGGY]  String  arg  =  arguments[i].toLowerCase();  [BUGGY]      if  (   "--   ".equals(arg))  {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  tokens.add(   "-   ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	add	String  arg  =  arguments[i].toLowerCase();	  String    arg    =    arguments[i].toString();    	compilable	  [FE]  ComparisonFailure  	10	3	replace
121	[BUG]  [BUGGY]  String  arg  =  arguments[i].toLowerCase();  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {    [BUGGY]  String  arg  =  arguments[i].toLowerCase();  [BUGGY]      if  (   "--   ".equals(arg))  {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  tokens.add(   "-   ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String  arg  =  arguments[i].toLowerCase();	  String    arg    =    arguments[i].toString();    	compilable	  [FE]  ComparisonFailure  	10	3	replace
122	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {    [BUGGY]  String  arg  =(arguments[i]  ==  null)?   "null "  :  arguments[i].toLowerCase();  [BUGGY]      if  (   "--   ".equals(arg))  {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  tokens.add(   "-   ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	add	String  arg  =(arguments[i]  ==  null)?   "null "  :  arguments[i].toLowerCase();	  String    arg    =(arguments[i]    ==    null)?   "null   "    :    arguments[i];    	compilable	  [FE]  ComparisonFailure  	14	3	replace
123	[BUG]  [BUGGY]  String  arg  =(arguments[i]  ==  null)?   "null "  :  arguments[i].toLowerCase();  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {    [BUGGY]  String  arg  =(arguments[i]  ==  null)?   "null "  :  arguments[i].toLowerCase();  [BUGGY]      if  (   "--   ".equals(arg))  {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  tokens.add(   "-   ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String  arg  =(arguments[i]  ==  null)?   "null "  :  arguments[i].toLowerCase();	  String    arg    =(arguments[i]    ==    null)?   "null   "    :    arguments[i];    	compilable	  [FE]  ComparisonFailure  	14	3	replace
124	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    ComparisonFailure    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {    [BUGGY]  String  arg  =(arguments[i].trim()  ==  null)?  arguments[i].trim()  : "null ";  [BUGGY]      if  (   "--   ".equals(arg))  {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  tokens.add(   "-   ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	add	String  arg  =(arguments[i].trim()  ==  null)?  arguments[i].trim()  : "null ";	  String    arg    =    arguments[i].trim();    	compilable	  [FE]  AssertionFailedError  	8	14	replace
125	[BUG]  [BUGGY]  String  arg  =(arguments[i].trim()  ==  null)?  arguments[i].trim()  : "null ";  [FE]  AssertionFailedError  [FE]    ComparisonFailure    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {    [BUGGY]  String  arg  =(arguments[i].trim()  ==  null)?  arguments[i].trim()  : "null ";  [BUGGY]      if  (   "--   ".equals(arg))  {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  tokens.add(   "-   ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String  arg  =(arguments[i].trim()  ==  null)?  arguments[i].trim()  : "null ";	  String    arg    =    arguments[i].trim();    	compilable	  [FE]  AssertionFailedError  	8	14	replace
126	[BUG]  [BUGGY]  String[]  arguments  =(String[])options.toArray(new  String[arguments[i  +  1]);  [CE]  ']'  expected  [FE]              ComparisonFailure    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {    [BUGGY]  String[]  arguments  =(String[])options.toArray(new  String[arguments[i  +  1]);  [BUGGY]    String  arg  =  arguments[i];  if  (   "--   ".equals(arg))  {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  tokens.add(   "-   ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String[]  arguments  =(String[])options.toArray(new  String[arguments[i  +  1]);	      String[]    arguments    =(String[])options.toArray(new    String[arguments[i]);    	non-compiled	[CE]  ']'  expected	27	None	replace
