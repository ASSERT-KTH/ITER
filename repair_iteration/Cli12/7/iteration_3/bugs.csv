bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  tokens.add( "-   ".equals(arg));  [CE]  cannot  find  symbol  arg  [FE]          AssertionFailedError      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  tokens.add( "-   ".equals(arg));  [BUGGY]      String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	tokens.add( "-   ".equals(arg));	  tokens.add(   "-   ".equals(i));    	non-compiled	[CE]  cannot  find  symbol  arg	57	None	replace
2	[BUG]  [BUGGY]  String[]  arguments  =(String[])options.toArray(new  String[arguments.size()  +  1]);  [CE]  variable  arguments  is  already  defined  in  method  flatten(Options,String[],boolean)  [FE]            ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  String[]  arguments  =(String[])options.toArray(new  String[arguments.size()  +  1]);  [BUGGY]      String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String[]  arguments  =(String[])options.toArray(new  String[arguments.size()  +  1]);	  String[]    arguments    =(String[])options.toArray(new    String[arguments.size()    ]);    	non-compiled	[CE]  variable  arguments  is  already  defined  in  method  flatten(Options,String[],boolean)	48	None	replace
3	[BUG]  [BUGGY]  String[]  arguments  =(String[])options.toArray(new  String[arguments.size()  -  1]);  [CE]  variable  arguments  is  already  defined  in  method  flatten(Options,String[],boolean)  [FE]              ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  String[]  arguments  =(String[])options.toArray(new  String[arguments.size()  -  1]);  [BUGGY]      String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String[]  arguments  =(String[])options.toArray(new  String[arguments.size()  -  1]);	  String[]    arguments    =(String[])options.toArray(new    String[arguments.size()    ]);    	non-compiled	[CE]  variable  arguments  is  already  defined  in  method  flatten(Options,String[],boolean)	48	None	replace
4	[BUG]  [BUGGY]  String  arg  =  arguments[i]  + ": "  +  opt;  [CE]  cannot  find  symbol  opt  [FE]    UnrecognizedOptionException    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  String  arg  =  arguments[i]  + ": "  +  opt;  [BUGGY]        if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String  arg  =  arguments[i]  + ": "  +  opt;	  String    arg    =    arguments[i]    +   ":   ";    	non-compiled	[CE]  cannot  find  symbol  opt	106	None	replace
5	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  String  arg  =  arguments[i].toString();  tokens.add( "-- ");  [BUGGY]        if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	add	String  arg  =  arguments[i].toString();  tokens.add( "-- ");	  String    arg    =    arguments[i].toString();    String    arg    =    arguments[i].toString();    tokens.add(   "--   ");    	compilable	  [FE]  AssertionFailedError  	94	14	replace
6	[BUG]  [BUGGY]  String  arg  =  arguments[i].toString();  tokens.add( "-- ");  [FE]  AssertionFailedError  [FE]          ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  String  arg  =  arguments[i].toString();  tokens.add( "-- ");  [BUGGY]        if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String  arg  =  arguments[i].toString();  tokens.add( "-- ");	  String    arg    =    arguments[i].toString();    String    arg    =    arguments[i].toString();    tokens.add(   "--   ");    	compilable	  [FE]  AssertionFailedError  	94	14	replace
7	[BUG]  [BUGGY]  tokens.add( "-- ".equals(arguments[i].toString()));  [CE]  cannot  find  symbol  arg  [FE]            ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  tokens.add( "-- ".equals(arguments[i].toString()));  [BUGGY]        if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	tokens.add( "-- ".equals(arguments[i].toString()));	  String    arg    =    arguments[i].toString();    String    arg    =    arguments[i].toString();    tokens.add(   "--   ");    	non-compiled	[CE]  cannot  find  symbol  arg	94	None	replace
8	[BUG]  [BUGGY]  String  arg  =  argument[i].toString();  [CE]  cannot  find  symbol  argument  [FE]          ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  String  arg  =  argument[i].toString();  [BUGGY]        if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String  arg  =  argument[i].toString();	  String    arg    =    arguments[i].toString();    String    arg    =    argument[i].toString();    	non-compiled	[CE]  cannot  find  symbol  argument	111	None	replace
9	[BUG]  [BUGGY]  Object  arg  =  arguments[i].toString();  [CE]  cannot  find  symbol  [FE]            ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  Object  arg  =  arguments[i].toString();  [BUGGY]        if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	Object  arg  =  arguments[i].toString();	  String    arg    =    arguments[i].toString();    String    arg    =    argument[i].toString();    	non-compiled	[CE]  cannot  find  symbol	111	None	replace
10	[BUG]  [BUGGY]  String  arg  =  arguments[i]  +  options[i];  [CE]  array  required,  but  Options  found  [FE]              ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  String  arg  =  arguments[i]  +  options[i];  [BUGGY]        if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String  arg  =  arguments[i]  +  options[i];	  String    arg    =    options[i]    +    arguments[i];    	non-compiled	[CE]  array  required,  but  Options  found	88	None	replace
11	[BUG]  [BUGGY]  String  arg  =  options[i]  +  arguments[i].trim();  [CE]  array  required,  but  Options  found  [FE]                ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  String  arg  =  options[i]  +  arguments[i].trim();  [BUGGY]        if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String  arg  =  options[i]  +  arguments[i].trim();	  String    arg    =    options[i]    +    arguments[i];    	non-compiled	[CE]  array  required,  but  Options  found	88	None	replace
12	[BUG]  [BUGGY]  String  arg  =  options[i]  +  arguments[i].toString();  [CE]  array  required,  but  Options  found  [FE]                  ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  String  arg  =  options[i]  +  arguments[i].toString();  [BUGGY]        if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String  arg  =  options[i]  +  arguments[i].toString();	  String    arg    =    options[i]    +    arguments[i];    	non-compiled	[CE]  array  required,  but  Options  found	88	None	replace
13	[BUG]  [BUGGY]  tokens.add(arguments[i].toString());  [CE]  cannot  find  symbol  arg  [FE]          ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  tokens.add(arguments[i].toString());  [BUGGY]        if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	tokens.add(arguments[i].toString());	  String    arg    =    arguments[i].toString();    String    arg    =    arguments[i].toString();    }    else    if(   "--   ".equals(arg))    {    eatTheRest    =    true;    tokens.add(   "--   ");    }    	non-compiled	[CE]  cannot  find  symbol  arg	35	None	replace
14	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  String  arg  =(arguments[i]  ==  null)?  null  :  arguments[i];  [BUGGY]        if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	add	String  arg  =(arguments[i]  ==  null)?  null  :  arguments[i];	  String    arg    =(arguments[i]    ==    null)?       "null       "    :    arguments[i];    String    arg    =(arguments[i]    ==    null)?       "null       "    :    arguments[i];    	compilable	  [FE]  ComparisonFailure  	14	3	replace
15	[BUG]  [BUGGY]  String  arg  =(arguments[i]  ==  null)?  null  :  arguments[i];  [FE]  ComparisonFailure  [FE]        ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  String  arg  =(arguments[i]  ==  null)?  null  :  arguments[i];  [BUGGY]        if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String  arg  =(arguments[i]  ==  null)?  null  :  arguments[i];	  String    arg    =(arguments[i]    ==    null)?       "null       "    :    arguments[i];    String    arg    =(arguments[i]    ==    null)?       "null       "    :    arguments[i];    	compilable	  [FE]  ComparisonFailure  	14	3	replace
16	[BUG]  [BUGGY]  String  arg  =  arguments[i].toString().trim( "n ");  [CE]  method  trim  in  class  String  cannot  be  applied  to  given  types;  [FE]    ComparisonFailure    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  String  arg  =  arguments[i].toString().trim( "n ");  [BUGGY]        if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String  arg  =  arguments[i].toString().trim( "n ");	  String    arg    =    arguments[i].toString().trim();    	non-compiled	[CE]  method  trim  in  class  String  cannot  be  applied  to  given  types;	18	None	replace
17	[BUG]  [BUGGY]  String  arg  =  arguments[i].toString().trim( "- ");  [CE]  method  trim  in  class  String  cannot  be  applied  to  given  types;  [FE]      ComparisonFailure    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  String  arg  =  arguments[i].toString().trim( "- ");  [BUGGY]        if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String  arg  =  arguments[i].toString().trim( "- ");	  String    arg    =    arguments[i].toString().trim();    	non-compiled	[CE]  method  trim  in  class  String  cannot  be  applied  to  given  types;	18	None	replace
18	[BUG]  [BUGGY]  String  arg  =  arguments[i].toString().trim(opt);  [CE]  cannot  find  symbol  opt  [FE]        ComparisonFailure    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  String  arg  =  arguments[i].toString().trim(opt);  [BUGGY]        if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String  arg  =  arguments[i].toString().trim(opt);	  String    arg    =    arguments[i].toString().trim();    	non-compiled	[CE]  cannot  find  symbol  opt	18	None	replace
19	[BUG]  [BUGGY]  String  arg  =  arguments[i].getValue();  [CE]  cannot  find  symbol  [FE]            ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  String  arg  =  arguments[i].getValue();  [BUGGY]        if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String  arg  =  arguments[i].getValue();	  String    arg    =    arguments[i].toString();    String    arg    =    arguments[i].toString();    }    else    if(   "--   ".equals(arg))    {    tokens.add(   "--   ");    }    	non-compiled	[CE]  cannot  find  symbol	36	None	replace
20	[BUG]  [BUGGY]  String  arg  =  arguments[i].itrim();  [CE]  cannot  find  symbol  [FE]          ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  String  arg  =  arguments[i].itrim();  [BUGGY]        if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String  arg  =  arguments[i].itrim();	  String    arg    =    arguments[i].trim();    String    arg    =    arguments[i].itrim();    	non-compiled	[CE]  cannot  find  symbol	114	None	replace
21	[BUG]  [BUGGY]  String  arg  =  arguments[i].iterator();  [CE]  cannot  find  symbol  [FE]            ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  String  arg  =  arguments[i].iterator();  [BUGGY]        if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String  arg  =  arguments[i].iterator();	  String    arg    =    arguments[i].trim();    String    arg    =    arguments[i].itrim();    	non-compiled	[CE]  cannot  find  symbol	114	None	replace
22	[BUG]  [BUGGY]  String[]  arguments  =  options.get(i  +  2);  [CE]  variable  arguments  is  already  defined  in  method  flatten(Options,String[],boolean)  [FE]            ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  String[]  arguments  =  options.get(i  +  2);  [BUGGY]      String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String[]  arguments  =  options.get(i  +  2);	  String[]    arguments    =    options.get(i    +    1);    	non-compiled	[CE]  variable  arguments  is  already  defined  in  method  flatten(Options,String[],boolean)	71	None	replace
23	[BUG]  [BUGGY]  String[]  arguments  =  options.get(i  +  11);  [CE]  variable  arguments  is  already  defined  in  method  flatten(Options,String[],boolean)  [FE]              ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  String[]  arguments  =  options.get(i  +  11);  [BUGGY]      String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String[]  arguments  =  options.get(i  +  11);	  String[]    arguments    =    options.get(i    +    1);    	non-compiled	[CE]  variable  arguments  is  already  defined  in  method  flatten(Options,String[],boolean)	71	None	replace
24	[BUG]  [BUGGY]  String[]  arguments[]  =  arguments.toArray(new  String[arguments[i]);  [CE]  ']'  expected  [FE]                        ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  String[]  arguments[]  =  arguments.toArray(new  String[arguments[i]);  [BUGGY]      String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String[]  arguments[]  =  arguments.toArray(new  String[arguments[i]);	  String[]    arguments[]    =    tokens.toArray(new    String[arguments[i]);    	non-compiled	[CE]  ']'  expected	29	None	replace
25	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    AssertionFailedError    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  String  arg  =(arguments[i].trim()!=  null)?  arguments[i].trim()  : "null ";  [BUGGY]        if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	add	String  arg  =(arguments[i].trim()!=  null)?  arguments[i].trim()  : "null ";	  String    arg    =(arguments[i].trim()    ==    null)?    arguments[i].trim()    :   "null   ";    	compilable	  [FE]  ComparisonFailure  	125	3	replace
26	[BUG]  [BUGGY]  String  arg  =(arguments[i].trim()!=  null)?  arguments[i].trim()  : "null ";  [FE]  ComparisonFailure  [FE]    AssertionFailedError    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  String  arg  =(arguments[i].trim()!=  null)?  arguments[i].trim()  : "null ";  [BUGGY]        if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String  arg  =(arguments[i].trim()!=  null)?  arguments[i].trim()  : "null ";	  String    arg    =(arguments[i].trim()    ==    null)?    arguments[i].trim()    :   "null   ";    	compilable	  [FE]  ComparisonFailure  	125	3	replace
27	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  String  arg  =(arguments[i].trim()  ==  null)?  arguments[i].trim()  : "  <  null> ";  [BUGGY]        if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	add	String  arg  =(arguments[i].trim()  ==  null)?  arguments[i].trim()  : "  <  null> ";	  String    arg    =(arguments[i].trim()    ==    null)?    arguments[i].trim()    :   "null   ";    	compilable	  [FE]  AssertionFailedError  	125	14	replace
28	[BUG]  [BUGGY]  String  arg  =(arguments[i].trim()  ==  null)?  arguments[i].trim()  : "  <  null> ";  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  String  arg  =(arguments[i].trim()  ==  null)?  arguments[i].trim()  : "  <  null> ";  [BUGGY]        if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String  arg  =(arguments[i].trim()  ==  null)?  arguments[i].trim()  : "  <  null> ";	  String    arg    =(arguments[i].trim()    ==    null)?    arguments[i].trim()    :   "null   ";    	compilable	  [FE]  AssertionFailedError  	125	14	replace
29	[BUG]  [BUGGY]  String[]  arguments  =(String[])options.toArray(new  String[arguments[i.size()  -  1]);  [CE]  ']'  expected  [FE]              ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  String[]  arguments  =(String[])options.toArray(new  String[arguments[i.size()  -  1]);  [BUGGY]      String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String[]  arguments  =(String[])options.toArray(new  String[arguments[i.size()  -  1]);	  String[]    arguments    =(String[])options.toArray(new    String[arguments[i.size()    ]);    	non-compiled	[CE]  ']'  expected	49	None	replace
30	[BUG]  [BUGGY]  String[]  arguments  =(String[])options.toArray(new  String[arguments[i.size()  +  1]);  [CE]  ']'  expected  [FE]                ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  String[]  arguments  =(String[])options.toArray(new  String[arguments[i.size()  +  1]);  [BUGGY]      String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String[]  arguments  =(String[])options.toArray(new  String[arguments[i.size()  +  1]);	  String[]    arguments    =(String[])options.toArray(new    String[arguments[i.size()    ]);    	non-compiled	[CE]  ']'  expected	49	None	replace
31	[BUG]  [BUGGY]  String  arg  =(arguments[i]  ==  null)?  arguments[i]   "null "  :  arguments[i].toString();  [CE]  :  expected  [FE]        AssertionFailedError      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  String  arg  =(arguments[i]  ==  null)?  arguments[i]   "null "  :  arguments[i].toString();  [BUGGY]        if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String  arg  =(arguments[i]  ==  null)?  arguments[i]   "null "  :  arguments[i].toString();	  String    arg    =(arguments[i]    ==    null)?    arguments[i]       "null   "    :    arguments[i];    	non-compiled	[CE]  :  expected	74	None	replace
32	[BUG]  [BUGGY]  String  arg  =(arguments[i]!=  null)?  arguments[i]   "null "  :  arguments[i];  [CE]  :  expected  [FE]          AssertionFailedError      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  String  arg  =(arguments[i]!=  null)?  arguments[i]   "null "  :  arguments[i];  [BUGGY]        if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String  arg  =(arguments[i]!=  null)?  arguments[i]   "null "  :  arguments[i];	  String    arg    =(arguments[i]    ==    null)?    arguments[i]       "null   "    :    arguments[i];    	non-compiled	[CE]  :  expected	74	None	replace
33	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  String  arg  =  arguments[i].trim().toString();  [BUGGY]        if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	add	String  arg  =  arguments[i].trim().toString();	  String    arg    =    arguments[i].trim().trim();    	compilable	  [FE]  ComparisonFailure  	24	3	replace
34	[BUG]  [BUGGY]  String  arg  =  arguments[i].trim().toString();  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  String  arg  =  arguments[i].trim().toString();  [BUGGY]        if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String  arg  =  arguments[i].trim().toString();	  String    arg    =    arguments[i].trim().trim();    	compilable	  [FE]  ComparisonFailure  	24	3	replace
35	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  String  arg  =  arguments[i].trim();  tokens.add( "- ");  [BUGGY]        if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	add	String  arg  =  arguments[i].trim();  tokens.add( "- ");	  String    arg    =    arguments[i].trim();    String    arg    =    arguments[i].trim();    tokens.add(   "-   ");    	compilable	  [FE]  AssertionFailedError  	83	11	replace
36	[BUG]  [BUGGY]  String  arg  =  arguments[i].trim();  tokens.add( "- ");  [FE]  AssertionFailedError  [FE]          ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  String  arg  =  arguments[i].trim();  tokens.add( "- ");  [BUGGY]        if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String  arg  =  arguments[i].trim();  tokens.add( "- ");	  String    arg    =    arguments[i].trim();    String    arg    =    arguments[i].trim();    tokens.add(   "-   ");    	compilable	  [FE]  AssertionFailedError  	83	11	replace
37	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  String  arg  =  arguments[i].toString();  tokens.add( "- ");  [BUGGY]        if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	add	String  arg  =  arguments[i].toString();  tokens.add( "- ");	  String    arg    =    arguments[i].toString();    String    arg    =    arguments[i].toString();    tokens.add(   "-   ");    	compilable	  [FE]  AssertionFailedError  	93	11	replace
38	[BUG]  [BUGGY]  String  arg  =  arguments[i].toString();  tokens.add( "- ");  [FE]  AssertionFailedError  [FE]        ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  String  arg  =  arguments[i].toString();  tokens.add( "- ");  [BUGGY]        if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String  arg  =  arguments[i].toString();  tokens.add( "- ");	  String    arg    =    arguments[i].toString();    String    arg    =    arguments[i].toString();    tokens.add(   "-   ");    	compilable	  [FE]  AssertionFailedError  	93	11	replace
39	[BUG]  [BUGGY]  [FE]  UnrecognizedOptionException  [FE]          UnrecognizedOptionException      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  String  arg  =  arguments[i]+ "-   "  +  stopAtNonOption;  [BUGGY]        if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	add	String  arg  =  arguments[i]+ "-   "  +  stopAtNonOption;	  String    arg    =    arguments[i]+   "-   "    +    opt;    	compilable	  [FE]  UnrecognizedOptionException  	55	13	replace
40	[BUG]  [BUGGY]  String  arg  =  arguments[i]+ "-   "  +  stopAtNonOption;  [FE]  UnrecognizedOptionException  [FE]          UnrecognizedOptionException      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  String  arg  =  arguments[i]+ "-   "  +  stopAtNonOption;  [BUGGY]        if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String  arg  =  arguments[i]+ "-   "  +  stopAtNonOption;	  String    arg    =    arguments[i]+   "-   "    +    opt;    	compilable	  [FE]  UnrecognizedOptionException  	55	13	replace
41	[BUG]  [BUGGY]  String[]  arguments[]  =  arguments[i].toArray(new  String[arguments[i]  +  1]);  [CE]  variable  arguments  is  already  defined  in  method  flatten(Options,String[],boolean)  [FE]                    ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  String[]  arguments[]  =  arguments[i].toArray(new  String[arguments[i]  +  1]);  [BUGGY]      String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String[]  arguments[]  =  arguments[i].toArray(new  String[arguments[i]  +  1]);	  String[]    arguments[]    =    arguments[i].toArray(new    String[arguments[i]);    	non-compiled	[CE]  variable  arguments  is  already  defined  in  method  flatten(Options,String[],boolean)	116	None	replace
42	[BUG]  [BUGGY]  String[]  arguments[]  =  arguments[i].toArray(new  String[arguments[i]),  opt);  [CE]  ']'  expected  [FE]                      ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  String[]  arguments[]  =  arguments[i].toArray(new  String[arguments[i]),  opt);  [BUGGY]      String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String[]  arguments[]  =  arguments[i].toArray(new  String[arguments[i]),  opt);	  String[]    arguments[]    =    arguments[i].toArray(new    String[arguments[i]);    	non-compiled	[CE]  ']'  expected	116	None	replace
43	[BUG]  [BUGGY]  String[]  arguments[]  =  arguments[i].toArray(new  String[arguments[i],  opt);  [CE]  ']'  expected  [FE]                        ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  String[]  arguments[]  =  arguments[i].toArray(new  String[arguments[i],  opt);  [BUGGY]      String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String[]  arguments[]  =  arguments[i].toArray(new  String[arguments[i],  opt);	  String[]    arguments[]    =    arguments[i].toArray(new    String[arguments[i]);    	non-compiled	[CE]  ']'  expected	116	None	replace
44	[BUG]  [BUGGY]  String[]  arguments[]  =  options.toArray(new  String[arguments[i]),  stopAtNonOption);  [CE]  ']'  expected  [FE]                    ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  String[]  arguments[]  =  options.toArray(new  String[arguments[i]),  stopAtNonOption);  [BUGGY]      String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String[]  arguments[]  =  options.toArray(new  String[arguments[i]),  stopAtNonOption);	  String[]    arguments[]    =    opt.toArray(new    String[arguments[i]),    stopAtNonOption);    	non-compiled	[CE]  ']'  expected	96	None	replace
45	[BUG]  [BUGGY]  String[]  arguments[]  =  option.toArray(new  String[arguments[i]),  stopAtNonOption,  options);  [CE]  ']'  expected  [FE]                      ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  String[]  arguments[]  =  option.toArray(new  String[arguments[i]),  stopAtNonOption,  options);  [BUGGY]      String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String[]  arguments[]  =  option.toArray(new  String[arguments[i]),  stopAtNonOption,  options);	  String[]    arguments[]    =    opt.toArray(new    String[arguments[i]),    stopAtNonOption);    	non-compiled	[CE]  ']'  expected	96	None	replace
46	[BUG]  [BUGGY]  String[]  arguments[]  =  option.toArray(new  String[arguments[i]),  stopAtNonOption,  tokens);  [CE]  ']'  expected  [FE]                        ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  String[]  arguments[]  =  option.toArray(new  String[arguments[i]),  stopAtNonOption,  tokens);  [BUGGY]      String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String[]  arguments[]  =  option.toArray(new  String[arguments[i]),  stopAtNonOption,  tokens);	  String[]    arguments[]    =    opt.toArray(new    String[arguments[i]),    stopAtNonOption);    	non-compiled	[CE]  ']'  expected	96	None	replace
47	[BUG]  [BUGGY]  String  arg  =  arguments[i].trim().toLowerCase();  String  arg  =  arguments[i].trim().toLowerCase();  [CE]  variable  arg  is  already  defined  in  method  flatten(Options,String[],boolean)  [FE]    ComparisonFailure    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  String  arg  =  arguments[i].trim().toLowerCase();  String  arg  =  arguments[i].trim().toLowerCase();  [BUGGY]        if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String    arg    =    arguments[i].trim().toLowerCase();    String  arg  =  arguments[i].trim().toLowerCase();	  	non-compiled	[CE]  variable  arg  is  already  defined  in  method  flatten(Options,String[],boolean)	21	None	add
48	[BUG]  [BUGGY]  String  arg  =  arguments[i].trim().toLowerCase();  String  arg  =  arguments[i].trim().toUpperCase();  [CE]  variable  arg  is  already  defined  in  method  flatten(Options,String[],boolean)  [FE]      ComparisonFailure    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  String  arg  =  arguments[i].trim().toLowerCase();  String  arg  =  arguments[i].trim().toUpperCase();  [BUGGY]        if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String    arg    =    arguments[i].trim().toLowerCase();    String  arg  =  arguments[i].trim().toUpperCase();	  	non-compiled	[CE]  variable  arg  is  already  defined  in  method  flatten(Options,String[],boolean)	21	None	add
49	[BUG]  [BUGGY]  String  arg  =  arguments[i].trim().toLowerCase();  String  arg  =  arguments[i].itrim().toLowerCase();  [CE]  variable  arg  is  already  defined  in  method  flatten(Options,String[],boolean)  [FE]        ComparisonFailure    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  String  arg  =  arguments[i].trim().toLowerCase();  String  arg  =  arguments[i].itrim().toLowerCase();  [BUGGY]        if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String    arg    =    arguments[i].trim().toLowerCase();    String  arg  =  arguments[i].itrim().toLowerCase();	  	non-compiled	[CE]  variable  arg  is  already  defined  in  method  flatten(Options,String[],boolean)	21	None	add
50	[BUG]  [BUGGY]  String  arg  =  arguments[i].trim().toLowerCase();  String  arg  =  arguments[i].trim().toLowerCase(;  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  String  arg  =  arguments[i].trim().toLowerCase();  String  arg  =  arguments[i].trim().toLowerCase(;  [BUGGY]        if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String    arg    =    arguments[i].trim().toLowerCase();    String  arg  =  arguments[i].trim().toLowerCase(;	  	non-compiled	[CE]  illegal  start  of  expression	21	None	add
51	[BUG]  [BUGGY]  String[]  arguments[]  =  options.toArray(new  String[args.length]);  [CE]  variable  arguments  is  already  defined  in  method  flatten(Options,String[],boolean)  [FE]                    ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  String[]  arguments[]  =  options.toArray(new  String[args.length]);  [BUGGY]      String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String[]  arguments[]  =  options.toArray(new  String[args.length]);	  String[]    arguments[]    =    options.toArray(new    String[i]);    	non-compiled	[CE]  variable  arguments  is  already  defined  in  method  flatten(Options,String[],boolean)	2	None	replace
52	[BUG]  [BUGGY]  [FE]  UnrecognizedOptionException  [FE]    UnrecognizedOptionException    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]          tokens.add(     "-     ");    tokens.add(   ",-     ");  tokens.add( "-   ");  tokens.add(   ",-   ");  [BUGGY]      String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	add	                tokens.add(       "-       ");        tokens.add(   ",-       ");    tokens.add( "-   ");  tokens.add(   ",-   ");	  	compilable	  [FE]  UnrecognizedOptionException  	44	13	add
53	[BUG]  [BUGGY]          tokens.add(     "-     ");    tokens.add(   ",-     ");  tokens.add( "-   ");  tokens.add(   ",-   ");  [FE]  UnrecognizedOptionException  [FE]    UnrecognizedOptionException    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]          tokens.add(     "-     ");    tokens.add(   ",-     ");  tokens.add( "-   ");  tokens.add(   ",-   ");  [BUGGY]      String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	                tokens.add(       "-       ");        tokens.add(   ",-       ");    tokens.add( "-   ");  tokens.add(   ",-   ");	  	compilable	  [FE]  UnrecognizedOptionException  	44	13	add
54	[BUG]  [BUGGY]  [FE]  UnrecognizedOptionException  [FE]    UnrecognizedOptionException    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]          tokens.add(     "-     ");    tokens.add(   ".-     ");  tokens.add( "-   ");  tokens.add( ".-   ");  [BUGGY]      String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	add	                tokens.add(       "-       ");        tokens.add(   ".-       ");    tokens.add( "-   ");  tokens.add( ".-   ");	  	compilable	  [FE]  UnrecognizedOptionException  	46	13	add
55	[BUG]  [BUGGY]          tokens.add(     "-     ");    tokens.add(   ".-     ");  tokens.add( "-   ");  tokens.add( ".-   ");  [FE]  UnrecognizedOptionException  [FE]    UnrecognizedOptionException    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]          tokens.add(     "-     ");    tokens.add(   ".-     ");  tokens.add( "-   ");  tokens.add( ".-   ");  [BUGGY]      String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	                tokens.add(       "-       ");        tokens.add(   ".-       ");    tokens.add( "-   ");  tokens.add( ".-   ");	  	compilable	  [FE]  UnrecognizedOptionException  	46	13	add
56	[BUG]  [BUGGY]  String  arg  =(arguments[i]  ==  null)?  arguments[i]  :   ",null   ";  String  arg  =(arguments[i]  ==  null)?  arguments[i]  :   ",null ";  [CE]  variable  arg  is  already  defined  in  method  flatten(Options,String[],boolean)  [FE]    AssertionFailedError    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  String  arg  =(arguments[i]  ==  null)?  arguments[i]  :   ",null   ";  String  arg  =(arguments[i]  ==  null)?  arguments[i]  :   ",null ";  [BUGGY]        if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String    arg    =(arguments[i]    ==    null)?    arguments[i]    :   ",null   ";    String  arg  =(arguments[i]  ==  null)?  arguments[i]  :   ",null ";	  	non-compiled	[CE]  variable  arg  is  already  defined  in  method  flatten(Options,String[],boolean)	103	None	add
57	[BUG]  [BUGGY]  String  arg  =(arguments[i]  ==  null)?  arguments[i]  :   ",null   ";  String  arg  =(arguments[i]!=  null)?  arguments[i]  :   ",null ";  [CE]  variable  arg  is  already  defined  in  method  flatten(Options,String[],boolean)  [FE]      AssertionFailedError    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  String  arg  =(arguments[i]  ==  null)?  arguments[i]  :   ",null   ";  String  arg  =(arguments[i]!=  null)?  arguments[i]  :   ",null ";  [BUGGY]        if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String    arg    =(arguments[i]    ==    null)?    arguments[i]    :   ",null   ";    String  arg  =(arguments[i]!=  null)?  arguments[i]  :   ",null ";	  	non-compiled	[CE]  variable  arg  is  already  defined  in  method  flatten(Options,String[],boolean)	103	None	add
58	[BUG]  [BUGGY]  String  arg  =(arguments[i]  ==  null)?  arguments[i]  :   ",null   ";  String  arg  =(arguments[i]  ==  null)?  arguments[i]  :   ",null ",null ";  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  String  arg  =(arguments[i]  ==  null)?  arguments[i]  :   ",null   ";  String  arg  =(arguments[i]  ==  null)?  arguments[i]  :   ",null ",null ";  [BUGGY]        if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String    arg    =(arguments[i]    ==    null)?    arguments[i]    :   ",null   ";    String  arg  =(arguments[i]  ==  null)?  arguments[i]  :   ",null ",null ";	  	non-compiled	[CE]  <identifier>  expected	103	None	add
59	[BUG]  [BUGGY]  String  arg  =  options[i].trim().toLowerCase();  [CE]  array  required,  but  Options  found  [FE]                ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  String  arg  =  options[i].trim().toLowerCase();  [BUGGY]        if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String  arg  =  options[i].trim().toLowerCase();	  String    arg    =    options[i].trim();    	non-compiled	[CE]  array  required,  but  Options  found	52	None	replace
60	[BUG]  [BUGGY]  String  arg  =  options[i].trim(arguments[i]);  [CE]  array  required,  but  Options  found  [FE]                  ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  String  arg  =  options[i].trim(arguments[i]);  [BUGGY]        if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String  arg  =  options[i].trim(arguments[i]);	  String    arg    =    options[i].trim();    	non-compiled	[CE]  array  required,  but  Options  found	52	None	replace
61	[BUG]  [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(args.size()  -  1);  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(args.size()  -  1);  [BUGGY]      String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	TokenBuffer  tokens  =  new  TokenBuffer(args.size()  -  1);	  TokenBuffer    tokens    =    new    TokenBuffer(args.size());    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
62	[BUG]  [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(arguments[i.size()  ]);  [CE]  cannot  find  symbol  [FE]                        ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(arguments[i.size()  ]);  [BUGGY]      String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	TokenBuffer  tokens  =  new  TokenBuffer(arguments[i.size()  ]);	  TokenBuffer    tokens    =    new    TokenBuffer(args.size());    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
63	[BUG]  [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(arguments.size()  -  1);  [CE]  cannot  find  symbol  [FE]                          ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(arguments.size()  -  1);  [BUGGY]      String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	TokenBuffer  tokens  =  new  TokenBuffer(arguments.size()  -  1);	  TokenBuffer    tokens    =    new    TokenBuffer(args.size());    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
64	[BUG]  [BUGGY]  String[]  arguments  =  options.get(i).toPlainString();  [CE]  variable  arguments  is  already  defined  in  method  flatten(Options,String[],boolean)  [FE]              ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  String[]  arguments  =  options.get(i).toPlainString();  [BUGGY]      String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String[]  arguments  =  options.get(i).toPlainString();	  String[]    arguments    =    options.get(i).toString();    	non-compiled	[CE]  variable  arguments  is  already  defined  in  method  flatten(Options,String[],boolean)	90	None	replace
65	[BUG]  [BUGGY]  String[]  arguments  =  option.get(i).toString();  [CE]  variable  arguments  is  already  defined  in  method  flatten(Options,String[],boolean)  [FE]                ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  String[]  arguments  =  option.get(i).toString();  [BUGGY]      String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String[]  arguments  =  option.get(i).toString();	  String[]    arguments    =    options.get(i).toString();    	non-compiled	[CE]  variable  arguments  is  already  defined  in  method  flatten(Options,String[],boolean)	90	None	replace
66	[BUG]  [BUGGY]  String[]  arguments  =  options.get(i).toString(),  opt);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  String[]  arguments  =  options.get(i).toString(),  opt);  [BUGGY]      String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String[]  arguments  =  options.get(i).toString(),  opt);	  String[]    arguments    =    options.get(i).toString();    	non-compiled	[CE]  ';'  expected	90	None	replace
67	[BUG]  [BUGGY]  String[]  arguments  =(String[])options.toArray(new  String[arguments[1]);  [CE]  ']'  expected  [FE]                      ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  String[]  arguments  =(String[])options.toArray(new  String[arguments[1]);  [BUGGY]      String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String[]  arguments  =(String[])options.toArray(new  String[arguments[1]);	  String[]    arguments    =(String[])options.toArray(new    String[arguments[0]);    	non-compiled	[CE]  ']'  expected	9	None	replace
68	[BUG]  [BUGGY]  tokens.add( "- ",  i);  [CE]  no  suitable  method  found  for  add(String,int)  [FE]    UnrecognizedOptionException    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  tokens.add( "- ",  i);  [BUGGY]      String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	tokens.add( "- ",  i);	          tokens.add(       "-       ");    tokens.add(   "-       ");    	non-compiled	[CE]  no  suitable  method  found  for  add(String,int)	43	None	replace
69	[BUG]  [BUGGY]  tokens.add(arguments[i].trim());  [CE]  cannot  find  symbol  arg  [FE]            ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  tokens.add(arguments[i].trim());  [BUGGY]        if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	tokens.add(arguments[i].trim());	  String    arg    =    arguments[i].trim();    String    arg    =    arguments[i].trim();    }    else    if(   "--   ".equals(arg))    {    eatTheRest    =    true;    tokens.add(   "-       ");    }    	non-compiled	[CE]  cannot  find  symbol  arg	69	None	replace
70	[BUG]  [BUGGY]  String[]  arguments[]  =(String[])options.toArray(new  String[args[0]);  [CE]  ']'  expected  [FE]                  ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  String[]  arguments[]  =(String[])options.toArray(new  String[args[0]);  [BUGGY]      String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String[]  arguments[]  =(String[])options.toArray(new  String[args[0]);	  String[]    arguments[]    =(String[])options.toArray(new    String[args[i]);    	non-compiled	[CE]  ']'  expected	102	None	replace
71	[BUG]  [BUGGY]  String[]  arguments[]  =(String[])options.toArray(new  String[arguments[i],  opt,  stopAtNonOption);  [CE]  ']'  expected  [FE]                ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  String[]  arguments[]  =(String[])options.toArray(new  String[arguments[i],  opt,  stopAtNonOption);  [BUGGY]      String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String[]  arguments[]  =(String[])options.toArray(new  String[arguments[i],  opt,  stopAtNonOption);	  String[]    arguments[]    =(String[])options.toArray(new    String[arguments[i],    opt);    	non-compiled	[CE]  ']'  expected	76	None	replace
72	[BUG]  [BUGGY]  String[]  arguments[]  =(String[])options.toArray(new  String[arguments[i],  opt,  eatTheRest);  [CE]  ']'  expected  [FE]                  ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  String[]  arguments[]  =(String[])options.toArray(new  String[arguments[i],  opt,  eatTheRest);  [BUGGY]      String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String[]  arguments[]  =(String[])options.toArray(new  String[arguments[i],  opt,  eatTheRest);	  String[]    arguments[]    =(String[])options.toArray(new    String[arguments[i],    opt);    	non-compiled	[CE]  ']'  expected	76	None	replace
73	[BUG]  [BUGGY]  String[]  arguments[]  =(String[])options.toArray(new  String[arguments[0],  opt);  [CE]  ']'  expected  [FE]                    ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  String[]  arguments[]  =(String[])options.toArray(new  String[arguments[0],  opt);  [BUGGY]      String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String[]  arguments[]  =(String[])options.toArray(new  String[arguments[0],  opt);	  String[]    arguments[]    =(String[])options.toArray(new    String[arguments[i],    opt);    	non-compiled	[CE]  ']'  expected	76	None	replace
74	[BUG]  [BUGGY]  String[]  arguments[]  =(String[])options.toArray(new  String[arguments[i],  opt,  null);  [CE]  ']'  expected  [FE]                      ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  String[]  arguments[]  =(String[])options.toArray(new  String[arguments[i],  opt,  null);  [BUGGY]      String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String[]  arguments[]  =(String[])options.toArray(new  String[arguments[i],  opt,  null);	  String[]    arguments[]    =(String[])options.toArray(new    String[arguments[i],    opt);    	non-compiled	[CE]  ']'  expected	76	None	replace
75	[BUG]  [BUGGY]  String  arg  =(arguments[i]  ==  null)?  options[i]  :  arguments[i];  [CE]  array  required,  but  Options  found  [FE]                ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  String  arg  =(arguments[i]  ==  null)?  options[i]  :  arguments[i];  [BUGGY]        if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String  arg  =(arguments[i]  ==  null)?  options[i]  :  arguments[i];	  String    arg    =(options[i]    ==    null)?    options[i]    :    arguments[i];    	non-compiled	[CE]  array  required,  but  Options  found	108	None	replace
76	[BUG]  [BUGGY]  String  arg  =(options[i]  ==  null)?  arguments[i]  :  options[i];  [CE]  array  required,  but  Options  found  [FE]                  ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  String  arg  =(options[i]  ==  null)?  arguments[i]  :  options[i];  [BUGGY]        if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String  arg  =(options[i]  ==  null)?  arguments[i]  :  options[i];	  String    arg    =(options[i]    ==    null)?    options[i]    :    arguments[i];    	non-compiled	[CE]  array  required,  but  Options  found	108	None	replace
77	[BUG]  [BUGGY]  String  arg  =(arguments[i]  ==  null)?  options[i]  :  options[i];  [CE]  array  required,  but  Options  found  [FE]                    ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  String  arg  =(arguments[i]  ==  null)?  options[i]  :  options[i];  [BUGGY]        if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String  arg  =(arguments[i]  ==  null)?  options[i]  :  options[i];	  String    arg    =(options[i]    ==    null)?    options[i]    :    arguments[i];    	non-compiled	[CE]  array  required,  but  Options  found	108	None	replace
78	[BUG]  [BUGGY]  String[]  arguments  =  options.get(i).toArray(new  String[arguments[i]  +  2]);  [CE]  variable  arguments  is  already  defined  in  method  flatten(Options,String[],boolean)  [FE]                    ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  String[]  arguments  =  options.get(i).toArray(new  String[arguments[i]  +  2]);  [BUGGY]      String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String[]  arguments  =  options.get(i).toArray(new  String[arguments[i]  +  2]);	  String[]    arguments    =    options.get(i).toArray(new    String[arguments[i]    +    1]);    	non-compiled	[CE]  variable  arguments  is  already  defined  in  method  flatten(Options,String[],boolean)	6	None	replace
79	[BUG]  [BUGGY]  String[]  arguments  =  options.get(i).toArray(new  String[arguments[i]  +  0]);  [CE]  variable  arguments  is  already  defined  in  method  flatten(Options,String[],boolean)  [FE]                      ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  String[]  arguments  =  options.get(i).toArray(new  String[arguments[i]  +  0]);  [BUGGY]      String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String[]  arguments  =  options.get(i).toArray(new  String[arguments[i]  +  0]);	  String[]    arguments    =    options.get(i).toArray(new    String[arguments[i]    +    1]);    	non-compiled	[CE]  variable  arguments  is  already  defined  in  method  flatten(Options,String[],boolean)	6	None	replace
80	[BUG]  [BUGGY]  tokens.add( "-- "  +  i);  [CE]  cannot  find  symbol  arg  [FE]        AssertionFailedError      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  tokens.add( "-- "  +  i);  [BUGGY]      String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	tokens.add( "-- "  +  i);	  tokens.add(   "--   ");    	non-compiled	[CE]  cannot  find  symbol  arg	86	None	replace
81	[BUG]  [BUGGY]  tokens.add( "-- ",  eatTheRest);  [CE]  no  suitable  method  found  for  add(String,boolean)  [FE]          AssertionFailedError      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  tokens.add( "-- ",  eatTheRest);  [BUGGY]      String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	tokens.add( "-- ",  eatTheRest);	  tokens.add(   "--   ");    	non-compiled	[CE]  no  suitable  method  found  for  add(String,boolean)	86	None	replace
82	[BUG]  [BUGGY]  String  arg  =  arguments[i]  +   ":   ";  String  arg  =  arguments[i]  +   ":   ";  [CE]  variable  arg  is  already  defined  in  method  flatten(Options,String[],boolean)  [FE]    UnrecognizedOptionException    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  String  arg  =  arguments[i]  +   ":   ";  String  arg  =  arguments[i]  +   ":   ";  [BUGGY]        if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String    arg    =    arguments[i]    +   ":   ";    String  arg  =  arguments[i]  +   ":   ";	  	non-compiled	[CE]  variable  arg  is  already  defined  in  method  flatten(Options,String[],boolean)	105	None	add
83	[BUG]  [BUGGY]  String  arg  =  arguments[i]  +   ":   ";  String  arg  =  arguments[i]  +   ": ".;  [CE]  <identifier>  expected  [FE]      UnrecognizedOptionException    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  String  arg  =  arguments[i]  +   ":   ";  String  arg  =  arguments[i]  +   ": ".;  [BUGGY]        if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String    arg    =    arguments[i]    +   ":   ";    String  arg  =  arguments[i]  +   ": ".;	  	non-compiled	[CE]  <identifier>  expected	105	None	add
84	[BUG]  [BUGGY]  String  arg  =  arguments[i]  +   ":   ";  String  arg  =  arguments[i]  +   ": ",;  [CE]  <identifier>  expected  [FE]        UnrecognizedOptionException    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  String  arg  =  arguments[i]  +   ":   ";  String  arg  =  arguments[i]  +   ": ",;  [BUGGY]        if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String    arg    =    arguments[i]    +   ":   ";    String  arg  =  arguments[i]  +   ": ",;	  	non-compiled	[CE]  <identifier>  expected	105	None	add
85	[BUG]  [BUGGY]  String[]  arguments[]  =  options.toArray(new  String[arguments[i],  opt);  [CE]  ']'  expected  [FE]                    ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  String[]  arguments[]  =  options.toArray(new  String[arguments[i],  opt);  [BUGGY]      String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String[]  arguments[]  =  options.toArray(new  String[arguments[i],  opt);	  String[]    arguments[]    =    options.toArray(new    String[arguments[i]);    	non-compiled	[CE]  ']'  expected	27	None	replace
86	[BUG]  [BUGGY]  String[]  arguments[]  =  options.toArray(new  String[arguments[i]  +  1]);  [CE]  variable  arguments  is  already  defined  in  method  flatten(Options,String[],boolean)  [FE]                      ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  String[]  arguments[]  =  options.toArray(new  String[arguments[i]  +  1]);  [BUGGY]      String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String[]  arguments[]  =  options.toArray(new  String[arguments[i]  +  1]);	  String[]    arguments[]    =    options.toArray(new    String[arguments[i]);    	non-compiled	[CE]  variable  arguments  is  already  defined  in  method  flatten(Options,String[],boolean)	27	None	replace
87	[BUG]  [BUGGY]  String[]  arguments[]  =  options.toArray(new  String[arguments[i]));  [CE]  ']'  expected  [FE]                        ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  String[]  arguments[]  =  options.toArray(new  String[arguments[i]));  [BUGGY]      String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String[]  arguments[]  =  options.toArray(new  String[arguments[i]));	  String[]    arguments[]    =    options.toArray(new    String[arguments[i]);    	non-compiled	[CE]  ']'  expected	27	None	replace
88	[BUG]  [BUGGY]  String  arg  =(arguments[i]  ==  null)?     "null   "  :  arguments[i].trim();  String  arg  =(arguments[i]  ==  null)?   "null   "  :  arguments[i].trim();  [CE]  variable  arg  is  already  defined  in  method  flatten(Options,String[],boolean)  [FE]    ComparisonFailure    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  String  arg  =(arguments[i]  ==  null)?     "null   "  :  arguments[i].trim();  String  arg  =(arguments[i]  ==  null)?   "null   "  :  arguments[i].trim();  [BUGGY]        if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String    arg    =(arguments[i]    ==    null)?       "null   "    :    arguments[i].trim();    String  arg  =(arguments[i]  ==  null)?   "null   "  :  arguments[i].trim();	  	non-compiled	[CE]  variable  arg  is  already  defined  in  method  flatten(Options,String[],boolean)	40	None	add
89	[BUG]  [BUGGY]  String  arg  =(arguments[i]  ==  null)?     "null   "  :  arguments[i].trim();  String  arg  =(arguments[i]!=  null)?   "null   "  :  arguments[i].trim();  [CE]  variable  arg  is  already  defined  in  method  flatten(Options,String[],boolean)  [FE]      ComparisonFailure    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  String  arg  =(arguments[i]  ==  null)?     "null   "  :  arguments[i].trim();  String  arg  =(arguments[i]!=  null)?   "null   "  :  arguments[i].trim();  [BUGGY]        if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String    arg    =(arguments[i]    ==    null)?       "null   "    :    arguments[i].trim();    String  arg  =(arguments[i]!=  null)?   "null   "  :  arguments[i].trim();	  	non-compiled	[CE]  variable  arg  is  already  defined  in  method  flatten(Options,String[],boolean)	40	None	add
90	[BUG]  [BUGGY]  String  arg  =(arguments[i]  ==  null)?     "null   "  :  arguments[i].trim();  String  arg  =(arguments[i]  ==  null)?   "null ",  :  arguments[i].trim();  [CE]  :  expected  [FE]        ComparisonFailure    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  String  arg  =(arguments[i]  ==  null)?     "null   "  :  arguments[i].trim();  String  arg  =(arguments[i]  ==  null)?   "null ",  :  arguments[i].trim();  [BUGGY]        if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String    arg    =(arguments[i]    ==    null)?       "null   "    :    arguments[i].trim();    String  arg  =(arguments[i]  ==  null)?   "null ",  :  arguments[i].trim();	  	non-compiled	[CE]  :  expected	40	None	add
91	[BUG]  [BUGGY]  String[]  arguments  =  options.toArray(new  String[arguments[i]  +  1]);  [CE]  variable  arguments  is  already  defined  in  method  flatten(Options,String[],boolean)  [FE]                  ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  String[]  arguments  =  options.toArray(new  String[arguments[i]  +  1]);  [BUGGY]      String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String[]  arguments  =  options.toArray(new  String[arguments[i]  +  1]);	  String[]    arguments    =    options.toArray(new    String[arguments[i]);    	non-compiled	[CE]  variable  arguments  is  already  defined  in  method  flatten(Options,String[],boolean)	7	None	replace
92	[BUG]  [BUGGY]  String[]  arguments  =  options.toArray(new  String[arguments[i],  opt);  [CE]  ']'  expected  [FE]                    ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  String[]  arguments  =  options.toArray(new  String[arguments[i],  opt);  [BUGGY]      String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String[]  arguments  =  options.toArray(new  String[arguments[i],  opt);	  String[]    arguments    =    options.toArray(new    String[arguments[i]);    	non-compiled	[CE]  ']'  expected	7	None	replace
93	[BUG]  [BUGGY]  String[]  arguments  =  options.toArray(new  String[arguments[i]));  [CE]  ']'  expected  [FE]                      ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  String[]  arguments  =  options.toArray(new  String[arguments[i]));  [BUGGY]      String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String[]  arguments  =  options.toArray(new  String[arguments[i]));	  String[]    arguments    =    options.toArray(new    String[arguments[i]);    	non-compiled	[CE]  ']'  expected	7	None	replace
94	[BUG]  [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(arguments[i.length]);  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(arguments[i.length]);  [BUGGY]      String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	TokenBuffer  tokens  =  new  TokenBuffer(arguments[i.length]);	  TokenBuffer    tokens    =    new    TokenBuffer(arguments.length);    	non-compiled	[CE]  cannot  find  symbol	30	None	replace
95	[BUG]  [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(i,  arguments.length);  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(i,  arguments.length);  [BUGGY]      String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	TokenBuffer  tokens  =  new  TokenBuffer(i,  arguments.length);	  TokenBuffer    tokens    =    new    TokenBuffer(arguments.length);    	non-compiled	[CE]  cannot  find  symbol	30	None	replace
96	[BUG]  [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(arguments.length,  i);  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(arguments.length,  i);  [BUGGY]      String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	TokenBuffer  tokens  =  new  TokenBuffer(arguments.length,  i);	  TokenBuffer    tokens    =    new    TokenBuffer(arguments.length);    	non-compiled	[CE]  cannot  find  symbol	30	None	replace
97	[BUG]  [BUGGY]  String  arg  =(arguments[i].trim()  ==  null)?  arguments[i].trim()  :   "null   ";  String  arg  =(arguments[i].trim()  ==  null)?  arguments[i].trim()  :   "null ";  [CE]  variable  arg  is  already  defined  in  method  flatten(Options,String[],boolean)  [FE]    AssertionFailedError    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  String  arg  =(arguments[i].trim()  ==  null)?  arguments[i].trim()  :   "null   ";  String  arg  =(arguments[i].trim()  ==  null)?  arguments[i].trim()  :   "null ";  [BUGGY]        if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String    arg    =(arguments[i].trim()    ==    null)?    arguments[i].trim()    :   "null   ";    String  arg  =(arguments[i].trim()  ==  null)?  arguments[i].trim()  :   "null ";	  	non-compiled	[CE]  variable  arg  is  already  defined  in  method  flatten(Options,String[],boolean)	124	None	add
98	[BUG]  [BUGGY]  String  arg  =(arguments[i].trim()  ==  null)?  arguments[i].trim()  :   "null   ";  String  arg  =(arguments[i].trim()!=  null)?  arguments[i].trim()  :   "null ";  [CE]  variable  arg  is  already  defined  in  method  flatten(Options,String[],boolean)  [FE]      AssertionFailedError    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  String  arg  =(arguments[i].trim()  ==  null)?  arguments[i].trim()  :   "null   ";  String  arg  =(arguments[i].trim()!=  null)?  arguments[i].trim()  :   "null ";  [BUGGY]        if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String    arg    =(arguments[i].trim()    ==    null)?    arguments[i].trim()    :   "null   ";    String  arg  =(arguments[i].trim()!=  null)?  arguments[i].trim()  :   "null ";	  	non-compiled	[CE]  variable  arg  is  already  defined  in  method  flatten(Options,String[],boolean)	124	None	add
99	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  String  arg  =(arguments[i]  ==  null)?   "null "  :  arguments[i].trim().toLowerCase();  [BUGGY]        if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	add	String  arg  =(arguments[i]  ==  null)?   "null "  :  arguments[i].trim().toLowerCase();	  String    arg    =(arguments[i]    ==    null)?       "null   "    :    arguments[i].trim();    	compilable	  [FE]  ComparisonFailure  	41	3	replace
100	[BUG]  [BUGGY]  String  arg  =(arguments[i]  ==  null)?   "null "  :  arguments[i].trim().toLowerCase();  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  String  arg  =(arguments[i]  ==  null)?   "null "  :  arguments[i].trim().toLowerCase();  [BUGGY]        if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String  arg  =(arguments[i]  ==  null)?   "null "  :  arguments[i].trim().toLowerCase();	  String    arg    =(arguments[i]    ==    null)?       "null   "    :    arguments[i].trim();    	compilable	  [FE]  ComparisonFailure  	41	3	replace
101	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      ComparisonFailure    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  String  arg  =(arguments[i]!=  null)?   "null "  :  arguments[i].trim();  [BUGGY]        if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	add	String  arg  =(arguments[i]!=  null)?   "null "  :  arguments[i].trim();	  String    arg    =(arguments[i]    ==    null)?       "null   "    :    arguments[i].trim();    	compilable	  [FE]  AssertionFailedError  	41	14	replace
102	[BUG]  [BUGGY]  String  arg  =(arguments[i]!=  null)?   "null "  :  arguments[i].trim();  [FE]  AssertionFailedError  [FE]      ComparisonFailure    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  String  arg  =(arguments[i]!=  null)?   "null "  :  arguments[i].trim();  [BUGGY]        if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String  arg  =(arguments[i]!=  null)?   "null "  :  arguments[i].trim();	  String    arg    =(arguments[i]    ==    null)?       "null   "    :    arguments[i].trim();    	compilable	  [FE]  AssertionFailedError  	41	14	replace
103	[BUG]  [BUGGY]  String  arg  =(arguments[i]  ==  null)?  arguments[i]  :   "null   ";  String  arg  =(arguments[i]  ==  null)?  arguments[i]  :   "null ";  [CE]  variable  arg  is  already  defined  in  method  flatten(Options,String[],boolean)  [FE]    AssertionFailedError    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  String  arg  =(arguments[i]  ==  null)?  arguments[i]  :   "null   ";  String  arg  =(arguments[i]  ==  null)?  arguments[i]  :   "null ";  [BUGGY]        if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String    arg    =(arguments[i]    ==    null)?    arguments[i]    :   "null   ";    String  arg  =(arguments[i]  ==  null)?  arguments[i]  :   "null ";	  	non-compiled	[CE]  variable  arg  is  already  defined  in  method  flatten(Options,String[],boolean)	62	None	add
104	[BUG]  [BUGGY]  String  arg  =(arguments[i]  ==  null)?  arguments[i]  :   "null   ";  String  arg  =(arguments[i]!=  null)?  arguments[i]  :   "null ";  [CE]  variable  arg  is  already  defined  in  method  flatten(Options,String[],boolean)  [FE]      AssertionFailedError    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  String  arg  =(arguments[i]  ==  null)?  arguments[i]  :   "null   ";  String  arg  =(arguments[i]!=  null)?  arguments[i]  :   "null ";  [BUGGY]        if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String    arg    =(arguments[i]    ==    null)?    arguments[i]    :   "null   ";    String  arg  =(arguments[i]!=  null)?  arguments[i]  :   "null ";	  	non-compiled	[CE]  variable  arg  is  already  defined  in  method  flatten(Options,String[],boolean)	62	None	add
105	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]          ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  String  arg  =(arguments[i]!=  null)?  null  :  arguments[i];  [BUGGY]        if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	add	String  arg  =(arguments[i]!=  null)?  null  :  arguments[i];	  String    arg    =(arguments[i]    ==    null)?       "null       "    :    arguments[i];    String    arg    =(arguments[i]!=    null)?       "null       "    :    arguments[i];    	compilable	  [FE]  NullPointerException  	15	14	replace
106	[BUG]  [BUGGY]  String  arg  =(arguments[i]!=  null)?  null  :  arguments[i];  [FE]  NullPointerException  [FE]          ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  String  arg  =(arguments[i]!=  null)?  null  :  arguments[i];  [BUGGY]        if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String  arg  =(arguments[i]!=  null)?  null  :  arguments[i];	  String    arg    =(arguments[i]    ==    null)?       "null       "    :    arguments[i];    String    arg    =(arguments[i]!=    null)?       "null       "    :    arguments[i];    	compilable	  [FE]  NullPointerException  	15	14	replace
107	[BUG]  [BUGGY]  String  arg  =  arguments[i].split( "- ");  [CE]  incompatible  types  [FE]        ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  String  arg  =  arguments[i].split( "- ");  [BUGGY]        if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String  arg  =  arguments[i].split( "- ");	  String    arg    =    arguments[i].trim();    String    arg    =    arguments[i].split(   "-   ");    	non-compiled	[CE]  incompatible  types	113	None	replace
108	[BUG]  [BUGGY]  String  arg  =  options[i].split( "- ");  [CE]  array  required,  but  Options  found  [FE]          ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  String  arg  =  options[i].split( "- ");  [BUGGY]        if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String  arg  =  options[i].split( "- ");	  String    arg    =    arguments[i].trim();    String    arg    =    arguments[i].split(   "-   ");    	non-compiled	[CE]  array  required,  but  Options  found	113	None	replace
109	[BUG]  [BUGGY]  String  arg  =  arguments[i].split( "- ",  0);  [CE]  incompatible  types  [FE]            ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  String  arg  =  arguments[i].split( "- ",  0);  [BUGGY]        if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String  arg  =  arguments[i].split( "- ",  0);	  String    arg    =    arguments[i].trim();    String    arg    =    arguments[i].split(   "-   ");    	non-compiled	[CE]  incompatible  types	113	None	replace
110	[BUG]  [BUGGY]  String[]  arguments  =(String[])options.toArray(new  String[arguments[i],  opt,  stopAtNonOption);  [CE]  ']'  expected  [FE]                    ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  String[]  arguments  =(String[])options.toArray(new  String[arguments[i],  opt,  stopAtNonOption);  [BUGGY]      String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String[]  arguments  =(String[])options.toArray(new  String[arguments[i],  opt,  stopAtNonOption);	  String[]    arguments    =(String[])options.toArray(new    String[arguments[i],    opt);    	non-compiled	[CE]  ']'  expected	8	None	replace
111	[BUG]  [BUGGY]  String[]  arguments  =(String[])options.toArray(new  String[arguments[i],  opt,  eatTheRest);  [CE]  ']'  expected  [FE]                      ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  String[]  arguments  =(String[])options.toArray(new  String[arguments[i],  opt,  eatTheRest);  [BUGGY]      String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String[]  arguments  =(String[])options.toArray(new  String[arguments[i],  opt,  eatTheRest);	  String[]    arguments    =(String[])options.toArray(new    String[arguments[i],    opt);    	non-compiled	[CE]  ']'  expected	8	None	replace
112	[BUG]  [BUGGY]  String[]  arguments  =(String[])options.toArray(new  String[arguments[i],  eatTheRest);  [CE]  ']'  expected  [FE]                        ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  String[]  arguments  =(String[])options.toArray(new  String[arguments[i],  eatTheRest);  [BUGGY]      String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String[]  arguments  =(String[])options.toArray(new  String[arguments[i],  eatTheRest);	  String[]    arguments    =(String[])options.toArray(new    String[arguments[i],    opt);    	non-compiled	[CE]  ']'  expected	8	None	replace
113	[BUG]  [BUGGY]  String[]  arguments  =(String[])options.toArray(new  String[arguments[i],  opt,  0);  [CE]  ']'  expected  [FE]                          ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  String[]  arguments  =(String[])options.toArray(new  String[arguments[i],  opt,  0);  [BUGGY]      String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String[]  arguments  =(String[])options.toArray(new  String[arguments[i],  opt,  0);	  String[]    arguments    =(String[])options.toArray(new    String[arguments[i],    opt);    	non-compiled	[CE]  ']'  expected	8	None	replace
114	[BUG]  [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(tokens,  i,  arguments.length);  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(tokens,  i,  arguments.length);  [BUGGY]      String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	TokenBuffer  tokens  =  new  TokenBuffer(tokens,  i,  arguments.length);	  TokenBuffer    tokens    =    new    TokenBuffer(tokens.length,    arguments.length);    	non-compiled	[CE]  cannot  find  symbol	32	None	replace
115	[BUG]  [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(arguments.length,  tokens.length);  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(arguments.length,  tokens.length);  [BUGGY]      String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	TokenBuffer  tokens  =  new  TokenBuffer(arguments.length,  tokens.length);	  TokenBuffer    tokens    =    new    TokenBuffer(tokens.length,    arguments.length);    	non-compiled	[CE]  cannot  find  symbol	32	None	replace
116	[BUG]  [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(tokens.length,  arguments[i]);  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(tokens.length,  arguments[i]);  [BUGGY]      String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	TokenBuffer  tokens  =  new  TokenBuffer(tokens.length,  arguments[i]);	  TokenBuffer    tokens    =    new    TokenBuffer(tokens.length,    arguments.length);    	non-compiled	[CE]  cannot  find  symbol	32	None	replace
117	[BUG]  [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(tokens.length,  arguments[i].length);  [CE]  cannot  find  symbol  [FE]                        ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(tokens.length,  arguments[i].length);  [BUGGY]      String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	TokenBuffer  tokens  =  new  TokenBuffer(tokens.length,  arguments[i].length);	  TokenBuffer    tokens    =    new    TokenBuffer(tokens.length,    arguments.length);    	non-compiled	[CE]  cannot  find  symbol	32	None	replace
118	[BUG]  [BUGGY]  tokens.add( "- "  +  i  +  1);  [CE]  cannot  find  symbol  arg  [FE]        AssertionFailedError      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  tokens.add( "- "  +  i  +  1);  [BUGGY]      String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	tokens.add( "- "  +  i  +  1);	  tokens.add(   "-   "    +    i);    	non-compiled	[CE]  cannot  find  symbol  arg	56	None	replace
119	[BUG]  [BUGGY]  tokens.add( "- "  +  opt);  [CE]  cannot  find  symbol  opt  [FE]          AssertionFailedError      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  tokens.add( "- "  +  opt);  [BUGGY]      String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	tokens.add( "- "  +  opt);	  tokens.add(   "-   "    +    i);    	non-compiled	[CE]  cannot  find  symbol  opt	56	None	replace
120	[BUG]  [BUGGY]  String[]  arguments  =(String[])options.toArray(new  String[args[0]);  [CE]  ']'  expected  [FE]              ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  String[]  arguments  =(String[])options.toArray(new  String[args[0]);  [BUGGY]      String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String[]  arguments  =(String[])options.toArray(new  String[args[0]);	  String[]    arguments    =(String[])options.toArray(new    String[args[i]);    	non-compiled	[CE]  ']'  expected	101	None	replace
121	[BUG]  [BUGGY]  String[]  arguments[]  =  options.toArray(new  String[arguments[i.size()  ]);  [CE]  ']'  expected  [FE]                  ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  String[]  arguments[]  =  options.toArray(new  String[arguments[i.size()  ]);  [BUGGY]      String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String[]  arguments[]  =  options.toArray(new  String[arguments[i.size()  ]);	  String[]    arguments[]    =(String[])options.toArray(new    String[arguments[i.size()    ]);    	non-compiled	[CE]  ']'  expected	60	None	replace
122	[BUG]  [BUGGY]  String[]  arguments[]  =(String[])options.toArray(new  String[arguments[i.size()  +  1]);  [CE]  ']'  expected  [FE]                    ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  String[]  arguments[]  =(String[])options.toArray(new  String[arguments[i.size()  +  1]);  [BUGGY]      String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String[]  arguments[]  =(String[])options.toArray(new  String[arguments[i.size()  +  1]);	  String[]    arguments[]    =(String[])options.toArray(new    String[arguments[i.size()    ]);    	non-compiled	[CE]  ']'  expected	60	None	replace
123	[BUG]  [BUGGY]  String[]  arguments[]  =(String[])options.toArray(new  String[arguments[0.size()  ]);  [CE]  ']'  expected  [FE]                      ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  String[]  arguments[]  =(String[])options.toArray(new  String[arguments[0.size()  ]);  [BUGGY]      String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String[]  arguments[]  =(String[])options.toArray(new  String[arguments[0.size()  ]);	  String[]    arguments[]    =(String[])options.toArray(new    String[arguments[i.size()    ]);    	non-compiled	[CE]  ']'  expected	60	None	replace
124	[BUG]  [BUGGY]  String[]  arguments  =  options.get(i).toArray(new  String[arguments[1]);  [CE]  ']'  expected  [FE]                ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  String[]  arguments  =  options.get(i).toArray(new  String[arguments[1]);  [BUGGY]      String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String[]  arguments  =  options.get(i).toArray(new  String[arguments[1]);	  String[]    arguments    =    options.get(i).toArray(new    String[arguments[0]);    	non-compiled	[CE]  ']'  expected	4	None	replace
125	[BUG]  [BUGGY]  String[]  arguments  =  options.get(i).toArray(new  String[arguments[2]);  [CE]  ']'  expected  [FE]                  ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  String[]  arguments  =  options.get(i).toArray(new  String[arguments[2]);  [BUGGY]      String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String[]  arguments  =  options.get(i).toArray(new  String[arguments[2]);	  String[]    arguments    =    options.get(i).toArray(new    String[arguments[0]);    	non-compiled	[CE]  ']'  expected	4	None	replace
126	[BUG]  [BUGGY]  [FE]  org.apache.commons.cli.UnrecognizedOptionException:  Unrecognized  option:  --enable-a  [FE]          UnrecognizedOptionException      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  String  arg  =  arguments[i]  + ",- ";  [BUGGY]        if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	add	String  arg  =  arguments[i]  + ",- ";	  String    arg    =    arguments[i]    +       "-       ";    String    arg    =    arguments[i]    +   ",-       ";    	compilable	  [FE]  org.apache.commons.cli.UnrecognizedOptionException:  Unrecognized  option:  --enable-a  	65	13	replace
127	[BUG]  [BUGGY]  String  arg  =  arguments[i]  + ",- ";  [FE]  org.apache.commons.cli.UnrecognizedOptionException:  Unrecognized  option:  --enable-a  [FE]          UnrecognizedOptionException      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  String  arg  =  arguments[i]  + ",- ";  [BUGGY]        if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String  arg  =  arguments[i]  + ",- ";	  String    arg    =    arguments[i]    +       "-       ";    String    arg    =    arguments[i]    +   ",-       ";    	compilable	  [FE]  org.apache.commons.cli.UnrecognizedOptionException:  Unrecognized  option:  --enable-a  	65	13	replace
128	[BUG]  [BUGGY]  [FE]  org.apache.commons.cli.UnrecognizedOptionException:  Unrecognized  option:  --enable-a.  [FE]            UnrecognizedOptionException      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  String  arg  =  arguments[i]  + ".,- ";  [BUGGY]        if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	add	String  arg  =  arguments[i]  + ".,- ";	  String    arg    =    arguments[i]    +       "-       ";    String    arg    =    arguments[i]    +   ",-       ";    	compilable	  [FE]  org.apache.commons.cli.UnrecognizedOptionException:  Unrecognized  option:  --enable-a.  	65	13	replace
129	[BUG]  [BUGGY]  String  arg  =  arguments[i]  + ".,- ";  [FE]  org.apache.commons.cli.UnrecognizedOptionException:  Unrecognized  option:  --enable-a.  [FE]            UnrecognizedOptionException      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  String  arg  =  arguments[i]  + ".,- ";  [BUGGY]        if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String  arg  =  arguments[i]  + ".,- ";	  String    arg    =    arguments[i]    +       "-       ";    String    arg    =    arguments[i]    +   ",-       ";    	compilable	  [FE]  org.apache.commons.cli.UnrecognizedOptionException:  Unrecognized  option:  --enable-a.  	65	13	replace
130	[BUG]  [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(options.size()  -  1);  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(options.size()  -  1);  [BUGGY]      String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	TokenBuffer  tokens  =  new  TokenBuffer(options.size()  -  1);	  TokenBuffer    tokens    =    new    TokenBuffer(options.size());    	non-compiled	[CE]  cannot  find  symbol	98	None	replace
131	[BUG]  [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(options,  options.size());  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(options,  options.size());  [BUGGY]      String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	TokenBuffer  tokens  =  new  TokenBuffer(options,  options.size());	  TokenBuffer    tokens    =    new    TokenBuffer(options.size());    	non-compiled	[CE]  cannot  find  symbol	98	None	replace
132	[BUG]  [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(options.size()  +  1);  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(options.size()  +  1);  [BUGGY]      String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	TokenBuffer  tokens  =  new  TokenBuffer(options.size()  +  1);	  TokenBuffer    tokens    =    new    TokenBuffer(options.size());    	non-compiled	[CE]  cannot  find  symbol	98	None	replace
133	[BUG]  [BUGGY]  String[]  arguments  =  options.toArray(new  String[arguments.size()  -  1]);  [CE]  variable  arguments  is  already  defined  in  method  flatten(Options,String[],boolean)  [FE]                ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  String[]  arguments  =  options.toArray(new  String[arguments.size()  -  1]);  [BUGGY]      String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String[]  arguments  =  options.toArray(new  String[arguments.size()  -  1]);	  String[]    arguments    =    options.toArray(new    String[arguments.size()    ]);    	non-compiled	[CE]  variable  arguments  is  already  defined  in  method  flatten(Options,String[],boolean)	50	None	replace
134	[BUG]  [BUGGY]  String[]  arguments  =  options.toArray(new  String[arguments.size()  ]  +  1);  [CE]  variable  arguments  is  already  defined  in  method  flatten(Options,String[],boolean)  [FE]                  ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  String[]  arguments  =  options.toArray(new  String[arguments.size()  ]  +  1);  [BUGGY]      String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String[]  arguments  =  options.toArray(new  String[arguments.size()  ]  +  1);	  String[]    arguments    =    options.toArray(new    String[arguments.size()    ]);    	non-compiled	[CE]  variable  arguments  is  already  defined  in  method  flatten(Options,String[],boolean)	50	None	replace
135	[BUG]  [BUGGY]  String[]  arguments  =  options.toArray(new  String[arguments.size()  ]));  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  String[]  arguments  =  options.toArray(new  String[arguments.size()  ]));  [BUGGY]      String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String[]  arguments  =  options.toArray(new  String[arguments.size()  ]));	  String[]    arguments    =    options.toArray(new    String[arguments.size()    ]);    	non-compiled	[CE]  ';'  expected	50	None	replace
136	[BUG]  [BUGGY]  String[]  arguments[]  =  options.toArray(new  String[0],  opt);  [CE]  variable  arguments  is  already  defined  in  method  flatten(Options,String[],boolean)  [FE]                      ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  String[]  arguments[]  =  options.toArray(new  String[0],  opt);  [BUGGY]      String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String[]  arguments[]  =  options.toArray(new  String[0],  opt);	  String[]    arguments[]    =    options.toArray(new    String[0]);    	non-compiled	[CE]  variable  arguments  is  already  defined  in  method  flatten(Options,String[],boolean)	3	None	replace
137	[BUG]  [BUGGY]  String[]  arguments  =  options.get(i)+  2;  [CE]  variable  arguments  is  already  defined  in  method  flatten(Options,String[],boolean)  [FE]                ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  String[]  arguments  =  options.get(i)+  2;  [BUGGY]      String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String[]  arguments  =  options.get(i)+  2;	  String[]    arguments    =    options.get(i)+    1;    	non-compiled	[CE]  variable  arguments  is  already  defined  in  method  flatten(Options,String[],boolean)	73	None	replace
138	[BUG]  [BUGGY]  String[]  arguments  =  options.get(i)/  1;  [CE]  variable  arguments  is  already  defined  in  method  flatten(Options,String[],boolean)  [FE]                  ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  String[]  arguments  =  options.get(i)/  1;  [BUGGY]      String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String[]  arguments  =  options.get(i)/  1;	  String[]    arguments    =    options.get(i)+    1;    	non-compiled	[CE]  variable  arguments  is  already  defined  in  method  flatten(Options,String[],boolean)	73	None	replace
139	[BUG]  [BUGGY]  String[]  arguments  =  options.get(i)+  0;  [CE]  variable  arguments  is  already  defined  in  method  flatten(Options,String[],boolean)  [FE]                    ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  String[]  arguments  =  options.get(i)+  0;  [BUGGY]      String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String[]  arguments  =  options.get(i)+  0;	  String[]    arguments    =    options.get(i)+    1;    	non-compiled	[CE]  variable  arguments  is  already  defined  in  method  flatten(Options,String[],boolean)	73	None	replace
140	[BUG]  [BUGGY]  String[]  arguments  =  options.get(i,  eatTheRest);  [CE]  variable  arguments  is  already  defined  in  method  flatten(Options,String[],boolean)  [FE]            ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  String[]  arguments  =  options.get(i,  eatTheRest);  [BUGGY]      String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String[]  arguments  =  options.get(i,  eatTheRest);	  String[]    arguments    =    options.get(i,    stopAtNonOption);    	non-compiled	[CE]  variable  arguments  is  already  defined  in  method  flatten(Options,String[],boolean)	89	None	replace
141	[BUG]  [BUGGY]  String[]  arguments  =  options.get(i,  stopAtNonOption,  tokens);  [CE]  variable  arguments  is  already  defined  in  method  flatten(Options,String[],boolean)  [FE]              ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  String[]  arguments  =  options.get(i,  stopAtNonOption,  tokens);  [BUGGY]      String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String[]  arguments  =  options.get(i,  stopAtNonOption,  tokens);	  String[]    arguments    =    options.get(i,    stopAtNonOption);    	non-compiled	[CE]  variable  arguments  is  already  defined  in  method  flatten(Options,String[],boolean)	89	None	replace
142	[BUG]  [BUGGY]  String[]  arguments  =  options.get(i,  stopAtNonOption,  arguments[i]);  [CE]  variable  arguments  is  already  defined  in  method  flatten(Options,String[],boolean)  [FE]                ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  String[]  arguments  =  options.get(i,  stopAtNonOption,  arguments[i]);  [BUGGY]      String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String[]  arguments  =  options.get(i,  stopAtNonOption,  arguments[i]);	  String[]    arguments    =    options.get(i,    stopAtNonOption);    	non-compiled	[CE]  variable  arguments  is  already  defined  in  method  flatten(Options,String[],boolean)	89	None	replace
143	[BUG]  [BUGGY]  String  arg  =  arguments[i].toLowerCase(Locale.ENGLISH);  [CE]  cannot  find  symbol  Locale  [FE]    ComparisonFailure    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  String  arg  =  arguments[i].toLowerCase(Locale.ENGLISH);  [BUGGY]        if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String  arg  =  arguments[i].toLowerCase(Locale.ENGLISH);	  String    arg    =    arguments[i].toLowerCase();    	non-compiled	[CE]  cannot  find  symbol  Locale	121	None	replace
144	[BUG]  [BUGGY]  String  arg  =  arguments[i].toLowerCase(Locale.getDefault());  [CE]  cannot  find  symbol  Locale  [FE]      ComparisonFailure    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  String  arg  =  arguments[i].toLowerCase(Locale.getDefault());  [BUGGY]        if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String  arg  =  arguments[i].toLowerCase(Locale.getDefault());	  String    arg    =    arguments[i].toLowerCase();    	non-compiled	[CE]  cannot  find  symbol  Locale	121	None	replace
145	[BUG]  [BUGGY]  [FE]  UnrecognizedOptionException  [FE]        ComparisonFailure    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  String  arg  =  arguments[i].toUpperCase();  [BUGGY]        if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	add	String  arg  =  arguments[i].toUpperCase();	  String    arg    =    arguments[i].toLowerCase();    	compilable	  [FE]  UnrecognizedOptionException  	121	13	replace
146	[BUG]  [BUGGY]  String  arg  =  arguments[i].toUpperCase();  [FE]  UnrecognizedOptionException  [FE]        ComparisonFailure    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  String  arg  =  arguments[i].toUpperCase();  [BUGGY]        if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String  arg  =  arguments[i].toUpperCase();	  String    arg    =    arguments[i].toLowerCase();    	compilable	  [FE]  UnrecognizedOptionException  	121	13	replace
147	[BUG]  [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(arguments[i].length,  arguments[i].length);  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(arguments[i].length,  arguments[i].length);  [BUGGY]      String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	TokenBuffer  tokens  =  new  TokenBuffer(arguments[i].length,  arguments[i].length);	  TokenBuffer    tokens    =    new    TokenBuffer(arguments[i].length);    	non-compiled	[CE]  cannot  find  symbol	118	None	replace
148	[BUG]  [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(arguments[i],  arguments[i].length);  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(arguments[i],  arguments[i].length);  [BUGGY]      String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	TokenBuffer  tokens  =  new  TokenBuffer(arguments[i],  arguments[i].length);	  TokenBuffer    tokens    =    new    TokenBuffer(arguments[i].length);    	non-compiled	[CE]  cannot  find  symbol	118	None	replace
149	[BUG]  [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(arguments[i].length  -  1);  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(arguments[i].length  -  1);  [BUGGY]      String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	TokenBuffer  tokens  =  new  TokenBuffer(arguments[i].length  -  1);	  TokenBuffer    tokens    =    new    TokenBuffer(arguments[i].length);    	non-compiled	[CE]  cannot  find  symbol	118	None	replace
150	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]        ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  String  arg  =  arguments[i].substring(0,  i).toString();  [BUGGY]        if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	add	String  arg  =  arguments[i].substring(0,  i).toString();	  String    arg    =    arguments[i].toString();    String    arg    =    arguments[i].toString());    	compilable	  [FE]  StringIndexOutOfBoundsException  	110	14	replace
151	[BUG]  [BUGGY]  String  arg  =  arguments[i].substring(0,  i).toString();  [FE]  StringIndexOutOfBoundsException  [FE]        ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  String  arg  =  arguments[i].substring(0,  i).toString();  [BUGGY]        if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String  arg  =  arguments[i].substring(0,  i).toString();	  String    arg    =    arguments[i].toString();    String    arg    =    arguments[i].toString());    	compilable	  [FE]  StringIndexOutOfBoundsException  	110	14	replace
152	[BUG]  [BUGGY]  String  arg  =  arguments[i].substring(0,  i).toString());  [CE]  ';'  expected  [FE]          ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  String  arg  =  arguments[i].substring(0,  i).toString());  [BUGGY]        if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String  arg  =  arguments[i].substring(0,  i).toString());	  String    arg    =    arguments[i].toString();    String    arg    =    arguments[i].toString());    	non-compiled	[CE]  ';'  expected	110	None	replace
153	[BUG]  [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(tokens[i],  i);  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(tokens[i],  i);  [BUGGY]      String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	TokenBuffer  tokens  =  new  TokenBuffer(tokens[i],  i);	  TokenBuffer    tokens    =    new    TokenBuffer(tokens.length,    i);    	non-compiled	[CE]  cannot  find  symbol	92	None	replace
154	[BUG]  [BUGGY]  [FE]  UnrecognizedOptionException  [FE]    ComparisonFailure    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  String  arg  =(arguments[i]  ==  null)?   "null "  :  arguments[i].toUpperCase();  [BUGGY]        if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	add	String  arg  =(arguments[i]  ==  null)?   "null "  :  arguments[i].toUpperCase();	  String    arg    =(arguments[i]    ==    null)?       "null   "    :    arguments[i].toLowerCase();    	compilable	  [FE]  UnrecognizedOptionException  	123	13	replace
155	[BUG]  [BUGGY]  String  arg  =(arguments[i]  ==  null)?   "null "  :  arguments[i].toUpperCase();  [FE]  UnrecognizedOptionException  [FE]    ComparisonFailure    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  String  arg  =(arguments[i]  ==  null)?   "null "  :  arguments[i].toUpperCase();  [BUGGY]        if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String  arg  =(arguments[i]  ==  null)?   "null "  :  arguments[i].toUpperCase();	  String    arg    =(arguments[i]    ==    null)?       "null   "    :    arguments[i].toLowerCase();    	compilable	  [FE]  UnrecognizedOptionException  	123	13	replace
156	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      ComparisonFailure    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  String  arg  =(arguments[i]!=  null)?   "null "  :  arguments[i].toLowerCase();  [BUGGY]        if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	add	String  arg  =(arguments[i]!=  null)?   "null "  :  arguments[i].toLowerCase();	  String    arg    =(arguments[i]    ==    null)?       "null   "    :    arguments[i].toLowerCase();    	compilable	  [FE]  AssertionFailedError  	123	14	replace
157	[BUG]  [BUGGY]  String  arg  =(arguments[i]!=  null)?   "null "  :  arguments[i].toLowerCase();  [FE]  AssertionFailedError  [FE]      ComparisonFailure    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  String  arg  =(arguments[i]!=  null)?   "null "  :  arguments[i].toLowerCase();  [BUGGY]        if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String  arg  =(arguments[i]!=  null)?   "null "  :  arguments[i].toLowerCase();	  String    arg    =(arguments[i]    ==    null)?       "null   "    :    arguments[i].toLowerCase();    	compilable	  [FE]  AssertionFailedError  	123	14	replace
158	[BUG]  [BUGGY]  String  arg  =  options[i].trim().trim();  [CE]  array  required,  but  Options  found  [FE]        ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  String  arg  =  options[i].trim().trim();  [BUGGY]        if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String  arg  =  options[i].trim().trim();	  String    arg    =    arguments[i].trim();    String    arg    =    arguments[i].trim().trim();    	non-compiled	[CE]  array  required,  but  Options  found	82	None	replace
159	[BUG]  [BUGGY]  [FE]  UnrecognizedOptionException  [FE]    UnrecognizedOptionException    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  String  arg  =  arguments[i].toString()  + "   ";  [BUGGY]        if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	add	String  arg  =  arguments[i].toString()  + "   ";	  String    arg    =    arguments[i].toString()    +   "n   ";    	compilable	  [FE]  UnrecognizedOptionException  	20	13	replace
160	[BUG]  [BUGGY]  String  arg  =  arguments[i].toString()  + "   ";  [FE]  UnrecognizedOptionException  [FE]    UnrecognizedOptionException    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  String  arg  =  arguments[i].toString()  + "   ";  [BUGGY]        if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String  arg  =  arguments[i].toString()  + "   ";	  String    arg    =    arguments[i].toString()    +   "n   ";    	compilable	  [FE]  UnrecognizedOptionException  	20	13	replace
161	[BUG]  [BUGGY]  [FE]  UnrecognizedOptionException  [FE]      UnrecognizedOptionException    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  String  arg  =  arguments[i].toString()  + ": ";  [BUGGY]        if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	add	String  arg  =  arguments[i].toString()  + ": ";	  String    arg    =    arguments[i].toString()    +   "n   ";    	compilable	  [FE]  UnrecognizedOptionException  	20	13	replace
162	[BUG]  [BUGGY]  String  arg  =  arguments[i].toString()  + ": ";  [FE]  UnrecognizedOptionException  [FE]      UnrecognizedOptionException    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  String  arg  =  arguments[i].toString()  + ": ";  [BUGGY]        if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String  arg  =  arguments[i].toString()  + ": ";	  String    arg    =    arguments[i].toString()    +   "n   ";    	compilable	  [FE]  UnrecognizedOptionException  	20	13	replace
163	[BUG]  [BUGGY]  [FE]  UnrecognizedOptionException  [FE]        UnrecognizedOptionException    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  String  arg  =  arguments[i].toString()  + "- ";  [BUGGY]        if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	add	String  arg  =  arguments[i].toString()  + "- ";	  String    arg    =    arguments[i].toString()    +   "n   ";    	compilable	  [FE]  UnrecognizedOptionException  	20	13	replace
164	[BUG]  [BUGGY]  String  arg  =  arguments[i].toString()  + "- ";  [FE]  UnrecognizedOptionException  [FE]        UnrecognizedOptionException    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  String  arg  =  arguments[i].toString()  + "- ";  [BUGGY]        if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String  arg  =  arguments[i].toString()  + "- ";	  String    arg    =    arguments[i].toString()    +   "n   ";    	compilable	  [FE]  UnrecognizedOptionException  	20	13	replace
165	[BUG]  [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(arguments.size(),  arguments[i]);  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(arguments.size(),  arguments[i]);  [BUGGY]      String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	TokenBuffer  tokens  =  new  TokenBuffer(arguments.size(),  arguments[i]);	  TokenBuffer    tokens    =    new    TokenBuffer(arguments.size());    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
166	[BUG]  [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(arguments.size()  +  1);  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(arguments.size()  +  1);  [BUGGY]      String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	TokenBuffer  tokens  =  new  TokenBuffer(arguments.size()  +  1);	  TokenBuffer    tokens    =    new    TokenBuffer(arguments.size());    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
167	[BUG]  [BUGGY]  String[]  arguments  =  options.get(i).toArray(new  String[arguments[0],  opt);  [CE]  ']'  expected  [FE]                  ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  String[]  arguments  =  options.get(i).toArray(new  String[arguments[0],  opt);  [BUGGY]      String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String[]  arguments  =  options.get(i).toArray(new  String[arguments[0],  opt);	  String[]    arguments    =    options.get(i).toArray(new    String[arguments[i],    opt);    	non-compiled	[CE]  ']'  expected	5	None	replace
168	[BUG]  [BUGGY]  String[]  arguments  =  options.get(i).toArray(new  String[arguments[i],  opt,  stopAtNonOption);  [CE]  ']'  expected  [FE]                    ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  String[]  arguments  =  options.get(i).toArray(new  String[arguments[i],  opt,  stopAtNonOption);  [BUGGY]      String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String[]  arguments  =  options.get(i).toArray(new  String[arguments[i],  opt,  stopAtNonOption);	  String[]    arguments    =    options.get(i).toArray(new    String[arguments[i],    opt);    	non-compiled	[CE]  ']'  expected	5	None	replace
169	[BUG]  [BUGGY]  String[]  arguments  =  options.get(i).toArray(new  String[arguments[i],  stopAtNonOption);  [CE]  ']'  expected  [FE]                      ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  String[]  arguments  =  options.get(i).toArray(new  String[arguments[i],  stopAtNonOption);  [BUGGY]      String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String[]  arguments  =  options.get(i).toArray(new  String[arguments[i],  stopAtNonOption);	  String[]    arguments    =    options.get(i).toArray(new    String[arguments[i],    opt);    	non-compiled	[CE]  ']'  expected	5	None	replace
170	[BUG]  [BUGGY]  String[]  arguments  =  options.get(i).toArray(new  String[arguments[i],  opt,  eatTheRest);  [CE]  ']'  expected  [FE]                        ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  String[]  arguments  =  options.get(i).toArray(new  String[arguments[i],  opt,  eatTheRest);  [BUGGY]      String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String[]  arguments  =  options.get(i).toArray(new  String[arguments[i],  opt,  eatTheRest);	  String[]    arguments    =    options.get(i).toArray(new    String[arguments[i],    opt);    	non-compiled	[CE]  ']'  expected	5	None	replace
171	[BUG]  [BUGGY]  String[]  arguments[]  =(String[])options.toArray(new  String[arguments.size()  +  1]);  [CE]  variable  arguments  is  already  defined  in  method  flatten(Options,String[],boolean)  [FE]                ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  String[]  arguments[]  =(String[])options.toArray(new  String[arguments.size()  +  1]);  [BUGGY]      String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String[]  arguments[]  =(String[])options.toArray(new  String[arguments.size()  +  1]);	  String[]    arguments[]    =(String[])options.toArray(new    String[arguments.size()    ]);    	non-compiled	[CE]  variable  arguments  is  already  defined  in  method  flatten(Options,String[],boolean)	59	None	replace
172	[BUG]  [BUGGY]  String[]  arguments[]  =(String[])options.toArray(new  String[arguments.size()  -  1]);  [CE]  variable  arguments  is  already  defined  in  method  flatten(Options,String[],boolean)  [FE]                  ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  String[]  arguments[]  =(String[])options.toArray(new  String[arguments.size()  -  1]);  [BUGGY]      String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String[]  arguments[]  =(String[])options.toArray(new  String[arguments.size()  -  1]);	  String[]    arguments[]    =(String[])options.toArray(new    String[arguments.size()    ]);    	non-compiled	[CE]  variable  arguments  is  already  defined  in  method  flatten(Options,String[],boolean)	59	None	replace
173	[BUG]  [BUGGY]  String[]  arguments[]  =  option.toArray(new  String[arguments[i]));  [CE]  ']'  expected  [FE]                      ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  String[]  arguments[]  =  option.toArray(new  String[arguments[i]));  [BUGGY]      String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String[]  arguments[]  =  option.toArray(new  String[arguments[i]));	  String[]    arguments[]    =    option.toArray(new    String[arguments[i]);    	non-compiled	[CE]  ']'  expected	28	None	replace
174	[BUG]  [BUGGY]  tokens.add( "n ");  [CE]  cannot  find  symbol  arg  [FE]    UnrecognizedOptionException    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  tokens.add( "n ");  [BUGGY]      String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	tokens.add( "n ");	          tokens.add(       "-       ");    tokens.add(   ".-       ");    	non-compiled	[CE]  cannot  find  symbol  arg	47	None	replace
175	[BUG]  [BUGGY]  String  arg  =(arguments[i]!=  null)?  arguments[i]  : "null ",  null;  [CE]  <identifier>  expected  [FE]        ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  String  arg  =(arguments[i]!=  null)?  arguments[i]  : "null ",  null;  [BUGGY]        if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String  arg  =(arguments[i]!=  null)?  arguments[i]  : "null ",  null;	  String    arg    =(arguments[i]!=    null)?    arguments[i]    :       "null       ";    String    arg    =(arguments[i]!=    null)?    arguments[i]    :       "null   ",    null;    	non-compiled	[CE]  <identifier>  expected	95	None	replace
176	[BUG]  [BUGGY]  String  arg  =(arguments[i]  ==  null)?  arguments[i]  : "null ",  null;  [CE]  <identifier>  expected  [FE]          ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  String  arg  =(arguments[i]  ==  null)?  arguments[i]  : "null ",  null;  [BUGGY]        if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String  arg  =(arguments[i]  ==  null)?  arguments[i]  : "null ",  null;	  String    arg    =(arguments[i]!=    null)?    arguments[i]    :       "null       ";    String    arg    =(arguments[i]!=    null)?    arguments[i]    :       "null   ",    null;    	non-compiled	[CE]  <identifier>  expected	95	None	replace
177	[BUG]  [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(tokens[i].length,  arguments[i].length);  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(tokens[i].length,  arguments[i].length);  [BUGGY]      String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	TokenBuffer  tokens  =  new  TokenBuffer(tokens[i].length,  arguments[i].length);	  TokenBuffer    tokens    =    new    TokenBuffer(tokens[i].length);    	non-compiled	[CE]  cannot  find  symbol	91	None	replace
178	[BUG]  [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(tokens[i],  arguments[i].length);  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(tokens[i],  arguments[i].length);  [BUGGY]      String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	TokenBuffer  tokens  =  new  TokenBuffer(tokens[i],  arguments[i].length);	  TokenBuffer    tokens    =    new    TokenBuffer(tokens[i].length);    	non-compiled	[CE]  cannot  find  symbol	91	None	replace
179	[BUG]  [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(tokens,  i  +  1);  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(tokens,  i  +  1);  [BUGGY]      String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	TokenBuffer  tokens  =  new  TokenBuffer(tokens,  i  +  1);	  TokenBuffer    tokens    =    new    TokenBuffer(tokens,    i);    	non-compiled	[CE]  cannot  find  symbol	31	None	replace
180	[BUG]  [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(i,  tokens);  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(i,  tokens);  [BUGGY]      String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	TokenBuffer  tokens  =  new  TokenBuffer(i,  tokens);	  TokenBuffer    tokens    =    new    TokenBuffer(tokens,    i);    	non-compiled	[CE]  cannot  find  symbol	31	None	replace
181	[BUG]  [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(tokens[i],  arguments[i]);  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(tokens[i],  arguments[i]);  [BUGGY]      String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	TokenBuffer  tokens  =  new  TokenBuffer(tokens[i],  arguments[i]);	  TokenBuffer    tokens    =    new    TokenBuffer(tokens,    i);    	non-compiled	[CE]  cannot  find  symbol	31	None	replace
182	[BUG]  [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(tokens,  opt,  i);  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(tokens,  opt,  i);  [BUGGY]      String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	TokenBuffer  tokens  =  new  TokenBuffer(tokens,  opt,  i);	  TokenBuffer    tokens    =    new    TokenBuffer(tokens,    i);    	non-compiled	[CE]  cannot  find  symbol	31	None	replace
183	[BUG]  [BUGGY]  String  arg  =  arguments[i].toLowerCase();  String  arg  =  arguments[i].toLowerCase();  [CE]  variable  arg  is  already  defined  in  method  flatten(Options,String[],boolean)  [FE]    ComparisonFailure    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  String  arg  =  arguments[i].toLowerCase();  String  arg  =  arguments[i].toLowerCase();  [BUGGY]        if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String    arg    =    arguments[i].toLowerCase();    String  arg  =  arguments[i].toLowerCase();	  	non-compiled	[CE]  variable  arg  is  already  defined  in  method  flatten(Options,String[],boolean)	120	None	add
184	[BUG]  [BUGGY]  String  arg  =  arguments[i].toLowerCase();  String  arg  =  arguments[i].toUpperCase();  [CE]  variable  arg  is  already  defined  in  method  flatten(Options,String[],boolean)  [FE]      ComparisonFailure    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  String  arg  =  arguments[i].toLowerCase();  String  arg  =  arguments[i].toUpperCase();  [BUGGY]        if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String    arg    =    arguments[i].toLowerCase();    String  arg  =  arguments[i].toUpperCase();	  	non-compiled	[CE]  variable  arg  is  already  defined  in  method  flatten(Options,String[],boolean)	120	None	add
185	[BUG]  [BUGGY]  String  arg  =  arguments[i].toLowerCase();  String  arg  =  arguments[i].toLowerCase(;  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  String  arg  =  arguments[i].toLowerCase();  String  arg  =  arguments[i].toLowerCase(;  [BUGGY]        if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String    arg    =    arguments[i].toLowerCase();    String  arg  =  arguments[i].toLowerCase(;	  	non-compiled	[CE]  illegal  start  of  expression	120	None	add
186	[BUG]  [BUGGY]  String  arg  =  arguments[i].toLowerCase();  String  arg  =  arguments[i].toULowerCase();  [CE]  variable  arg  is  already  defined  in  method  flatten(Options,String[],boolean)  [FE]          ComparisonFailure    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  String  arg  =  arguments[i].toLowerCase();  String  arg  =  arguments[i].toULowerCase();  [BUGGY]        if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String    arg    =    arguments[i].toLowerCase();    String  arg  =  arguments[i].toULowerCase();	  	non-compiled	[CE]  variable  arg  is  already  defined  in  method  flatten(Options,String[],boolean)	120	None	add
187	[BUG]  [BUGGY]  String  arg  =(arguments[i]  ==  null)?     "null   "  :  arguments[i].toLowerCase();  String  arg  =(arguments[i]  ==  null)?   "null   "  :  arguments[i].toLowerCase();  [CE]  variable  arg  is  already  defined  in  method  flatten(Options,String[],boolean)  [FE]    ComparisonFailure    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  String  arg  =(arguments[i]  ==  null)?     "null   "  :  arguments[i].toLowerCase();  String  arg  =(arguments[i]  ==  null)?   "null   "  :  arguments[i].toLowerCase();  [BUGGY]        if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String    arg    =(arguments[i]    ==    null)?       "null   "    :    arguments[i].toLowerCase();    String  arg  =(arguments[i]  ==  null)?   "null   "  :  arguments[i].toLowerCase();	  	non-compiled	[CE]  variable  arg  is  already  defined  in  method  flatten(Options,String[],boolean)	122	None	add
188	[BUG]  [BUGGY]  String  arg  =(arguments[i]  ==  null)?     "null   "  :  arguments[i].toLowerCase();  String  arg  =(arguments[i]!=  null)?   "null   "  :  arguments[i].toLowerCase();  [CE]  variable  arg  is  already  defined  in  method  flatten(Options,String[],boolean)  [FE]      ComparisonFailure    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  String  arg  =(arguments[i]  ==  null)?     "null   "  :  arguments[i].toLowerCase();  String  arg  =(arguments[i]!=  null)?   "null   "  :  arguments[i].toLowerCase();  [BUGGY]        if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String    arg    =(arguments[i]    ==    null)?       "null   "    :    arguments[i].toLowerCase();    String  arg  =(arguments[i]!=  null)?   "null   "  :  arguments[i].toLowerCase();	  	non-compiled	[CE]  variable  arg  is  already  defined  in  method  flatten(Options,String[],boolean)	122	None	add
189	[BUG]  [BUGGY]  String  arg  =(arguments[i]  ==  null)?     "null   "  :  arguments[i].toLowerCase();  String  arg  =(arguments[i]  ==  null)?   "null ",  :  arguments[i].toLowerCase();  [CE]  :  expected  [FE]        ComparisonFailure    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  String  arg  =(arguments[i]  ==  null)?     "null   "  :  arguments[i].toLowerCase();  String  arg  =(arguments[i]  ==  null)?   "null ",  :  arguments[i].toLowerCase();  [BUGGY]        if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String    arg    =(arguments[i]    ==    null)?       "null   "    :    arguments[i].toLowerCase();    String  arg  =(arguments[i]  ==  null)?   "null ",  :  arguments[i].toLowerCase();	  	non-compiled	[CE]  :  expected	122	None	add
190	[BUG]  [BUGGY]  String  arg  =  arguments[i].trim()  +  1;  String  arg  =  arguments[i].trim()  +  1;  [CE]  variable  arg  is  already  defined  in  method  flatten(Options,String[],boolean)  [FE]    UnrecognizedOptionException    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  String  arg  =  arguments[i].trim()  +  1;  String  arg  =  arguments[i].trim()  +  1;  [BUGGY]        if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String    arg    =    arguments[i].trim()    +    1;    String  arg  =  arguments[i].trim()  +  1;	  	non-compiled	[CE]  variable  arg  is  already  defined  in  method  flatten(Options,String[],boolean)	25	None	add
191	[BUG]  [BUGGY]  String  arg  =  arguments[i].trim()  +  1;  String  arg  =  arguments[i].trim()  +  2;  [CE]  variable  arg  is  already  defined  in  method  flatten(Options,String[],boolean)  [FE]      UnrecognizedOptionException    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  String  arg  =  arguments[i].trim()  +  1;  String  arg  =  arguments[i].trim()  +  2;  [BUGGY]        if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String    arg    =    arguments[i].trim()    +    1;    String  arg  =  arguments[i].trim()  +  2;	  	non-compiled	[CE]  variable  arg  is  already  defined  in  method  flatten(Options,String[],boolean)	25	None	add
192	[BUG]  [BUGGY]  String  arg  =  arguments[i].trim()  +  1;  String  arg  =  arguments[i].trim()  +  3;  [CE]  variable  arg  is  already  defined  in  method  flatten(Options,String[],boolean)  [FE]        UnrecognizedOptionException    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  String  arg  =  arguments[i].trim()  +  1;  String  arg  =  arguments[i].trim()  +  3;  [BUGGY]        if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String    arg    =    arguments[i].trim()    +    1;    String  arg  =  arguments[i].trim()  +  3;	  	non-compiled	[CE]  variable  arg  is  already  defined  in  method  flatten(Options,String[],boolean)	25	None	add
193	[BUG]  [BUGGY]  String  arg  =  arguments[i].trim()  +  1;  arg  =  arguments[i].trim()  +  1;  [CE]  variable  arg  is  already  defined  in  method  flatten(Options,String[],boolean)  [FE]          UnrecognizedOptionException    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  String  arg  =  arguments[i].trim()  +  1;  arg  =  arguments[i].trim()  +  1;  [BUGGY]        if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String    arg    =    arguments[i].trim()    +    1;    arg  =  arguments[i].trim()  +  1;	  	non-compiled	[CE]  variable  arg  is  already  defined  in  method  flatten(Options,String[],boolean)	25	None	add
194	[BUG]  [BUGGY]  String  arg  =  arguments[i].trim().toLowerCase(Locale.getDefault());  [CE]  cannot  find  symbol  Locale  [FE]    ComparisonFailure    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  String  arg  =  arguments[i].trim().toLowerCase(Locale.getDefault());  [BUGGY]        if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String  arg  =  arguments[i].trim().toLowerCase(Locale.getDefault());	  String    arg    =    arguments[i].trim().toLowerCase();    	non-compiled	[CE]  cannot  find  symbol  Locale	22	None	replace
195	[BUG]  [BUGGY]  String  arg  =  arguments[i].trim().toLowerCase(Locale.US);  [CE]  cannot  find  symbol  Locale  [FE]      ComparisonFailure    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  String  arg  =  arguments[i].trim().toLowerCase(Locale.US);  [BUGGY]        if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String  arg  =  arguments[i].trim().toLowerCase(Locale.US);	  String    arg    =    arguments[i].trim().toLowerCase();    	non-compiled	[CE]  cannot  find  symbol  Locale	22	None	replace
196	[BUG]  [BUGGY]  String  arg  =  arguments[i].trim().toLowerCase(Long.valueOf(i));  [CE]  no  suitable  method  found  for  toLowerCase(Long)  [FE]        ComparisonFailure    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  String  arg  =  arguments[i].trim().toLowerCase(Long.valueOf(i));  [BUGGY]        if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String  arg  =  arguments[i].trim().toLowerCase(Long.valueOf(i));	  String    arg    =    arguments[i].trim().toLowerCase();    	non-compiled	[CE]  no  suitable  method  found  for  toLowerCase(Long)	22	None	replace
197	[BUG]  [BUGGY]  tokens.add( ",- ");  [CE]  cannot  find  symbol  arg  [FE]    UnrecognizedOptionException    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  tokens.add( ",- ");  [BUGGY]      String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	tokens.add( ",- ");	          tokens.add(       "-       ");    tokens.add(   ",-       ");    	non-compiled	[CE]  cannot  find  symbol  arg	45	None	replace
198	[BUG]  [BUGGY]  tokens.add( ", ");  [CE]  cannot  find  symbol  arg  [FE]      UnrecognizedOptionException    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  tokens.add( ", ");  [BUGGY]      String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	tokens.add( ", ");	          tokens.add(       "-       ");    tokens.add(   ",-       ");    	non-compiled	[CE]  cannot  find  symbol  arg	45	None	replace
199	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    ComparisonFailure    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  String  arg  =(arguments[i]!=  null)?   "null "  :  arguments[i].toString();  [BUGGY]        if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	add	String  arg  =(arguments[i]!=  null)?   "null "  :  arguments[i].toString();	  String    arg    =(arguments[i]    ==    null)?       "null   "    :    arguments[i].toString();    	compilable	  [FE]  AssertionFailedError  	39	14	replace
200	[BUG]  [BUGGY]  String  arg  =(arguments[i]!=  null)?   "null "  :  arguments[i].toString();  [FE]  AssertionFailedError  [FE]    ComparisonFailure    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  String  arg  =(arguments[i]!=  null)?   "null "  :  arguments[i].toString();  [BUGGY]        if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String  arg  =(arguments[i]!=  null)?   "null "  :  arguments[i].toString();	  String    arg    =(arguments[i]    ==    null)?       "null   "    :    arguments[i].toString();    	compilable	  [FE]  AssertionFailedError  	39	14	replace
201	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  String  arg  =(arguments[i]  ==  null)?  null  :  arguments[i].toString();  [BUGGY]        if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	add	String  arg  =(arguments[i]  ==  null)?  null  :  arguments[i].toString();	  String    arg    =(arguments[i]    ==    null)?       "null   "    :    arguments[i].toString();    	compilable	  [FE]  ComparisonFailure  	39	3	replace
202	[BUG]  [BUGGY]  String  arg  =(arguments[i]  ==  null)?  null  :  arguments[i].toString();  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  String  arg  =(arguments[i]  ==  null)?  null  :  arguments[i].toString();  [BUGGY]        if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String  arg  =(arguments[i]  ==  null)?  null  :  arguments[i].toString();	  String    arg    =(arguments[i]    ==    null)?       "null   "    :    arguments[i].toString();    	compilable	  [FE]  ComparisonFailure  	39	3	replace
203	[BUG]  [BUGGY]  tokens.add( "- "  +  arguments[i]);  [CE]  cannot  find  symbol  arg  [FE]        AssertionFailedError      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  tokens.add( "- "  +  arguments[i]);  [BUGGY]      String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	tokens.add( "- "  +  arguments[i]);	  tokens.add(   "-   ".equals(arguments[i]));    	non-compiled	[CE]  cannot  find  symbol  arg	109	None	replace
204	[BUG]  [BUGGY]  String[]  arguments  =  options.toArray(new  String[args.length]);  [CE]  variable  arguments  is  already  defined  in  method  flatten(Options,String[],boolean)  [FE]              ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  String[]  arguments  =  options.toArray(new  String[args.length]);  [BUGGY]      String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String[]  arguments  =  options.toArray(new  String[args.length]);	  String[]    arguments    =    options.toArray(new    String[0]);    	non-compiled	[CE]  variable  arguments  is  already  defined  in  method  flatten(Options,String[],boolean)	85	None	replace
205	[BUG]  [BUGGY]  String[]  arguments  =  options.toArray(arguments[i]);  [CE]  variable  arguments  is  already  defined  in  method  flatten(Options,String[],boolean)  [FE]                ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  String[]  arguments  =  options.toArray(arguments[i]);  [BUGGY]      String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String[]  arguments  =  options.toArray(arguments[i]);	  String[]    arguments    =    options.toArray(new    String[i]);    	non-compiled	[CE]  variable  arguments  is  already  defined  in  method  flatten(Options,String[],boolean)	58	None	replace
206	[BUG]  [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(tokens[i],  tokens.length);  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(tokens[i],  tokens.length);  [BUGGY]      String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	TokenBuffer  tokens  =  new  TokenBuffer(tokens[i],  tokens.length);	  TokenBuffer    tokens    =    new    TokenBuffer(i,    tokens.length);    	non-compiled	[CE]  cannot  find  symbol	33	None	replace
207	[BUG]  [BUGGY]  String  arg  =  arguments[i]  +   ".-   ";  String  arg  =  arguments[i]  +   ".-   ";  [CE]  variable  arg  is  already  defined  in  method  flatten(Options,String[],boolean)  [FE]    UnrecognizedOptionException    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  String  arg  =  arguments[i]  +   ".-   ";  String  arg  =  arguments[i]  +   ".-   ";  [BUGGY]        if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String    arg    =    arguments[i]    +   ".-   ";    String  arg  =  arguments[i]  +   ".-   ";	  	non-compiled	[CE]  variable  arg  is  already  defined  in  method  flatten(Options,String[],boolean)	53	None	add
208	[BUG]  [BUGGY]  String  arg  =  arguments[i]  +   ".-   ";  String  arg  =  arguments[i]  +   ".- ".-   ";  [CE]  <identifier>  expected  [FE]      UnrecognizedOptionException    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  String  arg  =  arguments[i]  +   ".-   ";  String  arg  =  arguments[i]  +   ".- ".-   ";  [BUGGY]        if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String    arg    =    arguments[i]    +   ".-   ";    String  arg  =  arguments[i]  +   ".- ".-   ";	  	non-compiled	[CE]  <identifier>  expected	53	None	add
209	[BUG]  [BUGGY]  String  arg  =  arguments[i].toString()  +   "n   ";  String  arg  =  arguments[i].toString()  +   "n   ";  [CE]  variable  arg  is  already  defined  in  method  flatten(Options,String[],boolean)  [FE]    UnrecognizedOptionException    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  String  arg  =  arguments[i].toString()  +   "n   ";  String  arg  =  arguments[i].toString()  +   "n   ";  [BUGGY]        if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String    arg    =    arguments[i].toString()    +   "n   ";    String  arg  =  arguments[i].toString()  +   "n   ";	  	non-compiled	[CE]  variable  arg  is  already  defined  in  method  flatten(Options,String[],boolean)	19	None	add
210	[BUG]  [BUGGY]  String  arg  =  arguments[i].toString()  +   "n   ";  String  arg  =  arguments[i].toString()  +   "n';  [CE]  unclosed  string  literal  [FE]      UnrecognizedOptionException    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  String  arg  =  arguments[i].toString()  +   "n   ";  String  arg  =  arguments[i].toString()  +   "n';  [BUGGY]        if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String    arg    =    arguments[i].toString()    +   "n   ";    String  arg  =  arguments[i].toString()  +   "n';	  	non-compiled	[CE]  unclosed  string  literal	19	None	add
211	[BUG]  [BUGGY]  String  arg  =  arguments[i].toString()  +   "n   ";  String  arg  =  arguments[i].toString()  +   "n ".;  [CE]  <identifier>  expected  [FE]        UnrecognizedOptionException    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  String  arg  =  arguments[i].toString()  +   "n   ";  String  arg  =  arguments[i].toString()  +   "n ".;  [BUGGY]        if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String    arg    =    arguments[i].toString()    +   "n   ";    String  arg  =  arguments[i].toString()  +   "n ".;	  	non-compiled	[CE]  <identifier>  expected	19	None	add
212	[BUG]  [BUGGY]  String[]  arguments  =  options.get(i,  opt,  stopAtNonOption);  [CE]  variable  arguments  is  already  defined  in  method  flatten(Options,String[],boolean)  [FE]              ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  String[]  arguments  =  options.get(i,  opt,  stopAtNonOption);  [BUGGY]      String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String[]  arguments  =  options.get(i,  opt,  stopAtNonOption);	  String[]    arguments    =    options.get(i,    opt);    	non-compiled	[CE]  variable  arguments  is  already  defined  in  method  flatten(Options,String[],boolean)	72	None	replace
213	[BUG]  [BUGGY]  String[]  arguments  =  options.get(i,  option,  stopAtNonOption);  [CE]  variable  arguments  is  already  defined  in  method  flatten(Options,String[],boolean)  [FE]                ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  String[]  arguments  =  options.get(i,  option,  stopAtNonOption);  [BUGGY]      String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String[]  arguments  =  options.get(i,  option,  stopAtNonOption);	  String[]    arguments    =    options.get(i,    opt);    	non-compiled	[CE]  variable  arguments  is  already  defined  in  method  flatten(Options,String[],boolean)	72	None	replace
214	[BUG]  [BUGGY]  String[]  arguments  =  options.get(i,  opt,  eatTheRest);  [CE]  variable  arguments  is  already  defined  in  method  flatten(Options,String[],boolean)  [FE]                  ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  String[]  arguments  =  options.get(i,  opt,  eatTheRest);  [BUGGY]      String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String[]  arguments  =  options.get(i,  opt,  eatTheRest);	  String[]    arguments    =    options.get(i,    opt);    	non-compiled	[CE]  variable  arguments  is  already  defined  in  method  flatten(Options,String[],boolean)	72	None	replace
215	[BUG]  [BUGGY]  String[]  arguments[]  =(String[])options.toArray(new  String[arguments[1]);  [CE]  ']'  expected  [FE]              ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  String[]  arguments[]  =(String[])options.toArray(new  String[arguments[1]);  [BUGGY]      String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String[]  arguments[]  =(String[])options.toArray(new  String[arguments[1]);	  String[]    arguments[]    =(String[])options.toArray(new    String[arguments[0]);    	non-compiled	[CE]  ']'  expected	75	None	replace
216	[BUG]  [BUGGY]  String  arg  =(arguments[i]!=  null)?  options[i]  :  arguments[i];  [CE]  array  required,  but  Options  found  [FE]              ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  String  arg  =(arguments[i]!=  null)?  options[i]  :  arguments[i];  [BUGGY]        if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String  arg  =(arguments[i]!=  null)?  options[i]  :  arguments[i];	  String    arg    =(options[i]!=    null)?    options[i]    :    arguments[i];    	non-compiled	[CE]  array  required,  but  Options  found	107	None	replace
217	[BUG]  [BUGGY]  String  arg  =(arguments[i]!=  null)?  options[i]  :  options[i];  [CE]  array  required,  but  Options  found  [FE]                ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  String  arg  =(arguments[i]!=  null)?  options[i]  :  options[i];  [BUGGY]        if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String  arg  =(arguments[i]!=  null)?  options[i]  :  options[i];	  String    arg    =(options[i]!=    null)?    options[i]    :    arguments[i];    	non-compiled	[CE]  array  required,  but  Options  found	107	None	replace
218	[BUG]  [BUGGY]  String  arg  =  arguments[i].split( "n ");  [CE]  incompatible  types  [FE]            ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  String  arg  =  arguments[i].split( "n ");  [BUGGY]        if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String  arg  =  arguments[i].split( "n ");	  String    arg    =    arguments[i].trim();    String    arg    =    arguments[i].split(   "n   ");    	non-compiled	[CE]  incompatible  types	84	None	replace
219	[BUG]  [BUGGY]  String  arg  =  arguments[i].split( "null ");  [CE]  incompatible  types  [FE]              ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  String  arg  =  arguments[i].split( "null ");  [BUGGY]        if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String  arg  =  arguments[i].split( "null ");	  String    arg    =    arguments[i].trim();    String    arg    =    arguments[i].split(   "n   ");    	non-compiled	[CE]  incompatible  types	84	None	replace
220	[BUG]  [BUGGY]  String  arg  =  arguments[i].split( ": ");  [CE]  incompatible  types  [FE]                ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  String  arg  =  arguments[i].split( ": ");  [BUGGY]        if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String  arg  =  arguments[i].split( ": ");	  String    arg    =    arguments[i].trim();    String    arg    =    arguments[i].split(   "n   ");    	non-compiled	[CE]  incompatible  types	84	None	replace
221	[BUG]  [BUGGY]  [FE]  UnrecognizedOptionException  [FE]            UnrecognizedOptionException      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  String  arg  =  arguments[i]  + ". ";  [BUGGY]        if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	add	String  arg  =  arguments[i]  + ". ";	  String    arg    =    arguments[i]    +       "-       ";    String    arg    =    arguments[i]    +   ".-       ";    	compilable	  [FE]  UnrecognizedOptionException  	66	13	replace
222	[BUG]  [BUGGY]  String  arg  =  arguments[i]  + ". ";  [FE]  UnrecognizedOptionException  [FE]            UnrecognizedOptionException      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  String  arg  =  arguments[i]  + ". ";  [BUGGY]        if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String  arg  =  arguments[i]  + ". ";	  String    arg    =    arguments[i]    +       "-       ";    String    arg    =    arguments[i]    +   ".-       ";    	compilable	  [FE]  UnrecognizedOptionException  	66	13	replace
223	[BUG]  [BUGGY]  String  arg  =  options[i].toString().trim();  [CE]  array  required,  but  Options  found  [FE]              ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  String  arg  =  options[i].toString().trim();  [BUGGY]        if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String  arg  =  options[i].toString().trim();	  String    arg    =    options[i].toString();    	non-compiled	[CE]  array  required,  but  Options  found	51	None	replace
224	[BUG]  [BUGGY]  String  arg  =  options[i].toString()  + "- ";  [CE]  array  required,  but  Options  found  [FE]                ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  String  arg  =  options[i].toString()  + "- ";  [BUGGY]        if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String  arg  =  options[i].toString()  + "- ";	  String    arg    =    options[i].toString();    	non-compiled	[CE]  array  required,  but  Options  found	51	None	replace
225	[BUG]  [BUGGY]  String  arg  =  arguments[i].trim().trim();  String  arg  =  arguments[i].trim().trim();  [CE]  variable  arg  is  already  defined  in  method  flatten(Options,String[],boolean)  [FE]    ComparisonFailure    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  String  arg  =  arguments[i].trim().trim();  String  arg  =  arguments[i].trim().trim();  [BUGGY]        if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String    arg    =    arguments[i].trim().trim();    String  arg  =  arguments[i].trim().trim();	  	non-compiled	[CE]  variable  arg  is  already  defined  in  method  flatten(Options,String[],boolean)	23	None	add
226	[BUG]  [BUGGY]  String  arg  =  arguments[i].trim().trim();  String  arg  =  arguments[i].trim().trim());  [CE]  ';'  expected  [FE]      ComparisonFailure    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  String  arg  =  arguments[i].trim().trim();  String  arg  =  arguments[i].trim().trim());  [BUGGY]        if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String    arg    =    arguments[i].trim().trim();    String  arg  =  arguments[i].trim().trim());	  	non-compiled	[CE]  ';'  expected	23	None	add
227	[BUG]  [BUGGY]  String  arg  =  arguments[i].trim().trim();  String  arg  =  arguments[i].itrim().trim();  [CE]  variable  arg  is  already  defined  in  method  flatten(Options,String[],boolean)  [FE]        ComparisonFailure    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  String  arg  =  arguments[i].trim().trim();  String  arg  =  arguments[i].itrim().trim();  [BUGGY]        if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String    arg    =    arguments[i].trim().trim();    String  arg  =  arguments[i].itrim().trim();	  	non-compiled	[CE]  variable  arg  is  already  defined  in  method  flatten(Options,String[],boolean)	23	None	add
228	[BUG]  [BUGGY]  String  arg  =  arguments[i].trim().trim();  String  arg  =  argument[i].trim().trim();  [CE]  variable  arg  is  already  defined  in  method  flatten(Options,String[],boolean)  [FE]          ComparisonFailure    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  String  arg  =  arguments[i].trim().trim();  String  arg  =  argument[i].trim().trim();  [BUGGY]        if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String    arg    =    arguments[i].trim().trim();    String  arg  =  argument[i].trim().trim();	  	non-compiled	[CE]  variable  arg  is  already  defined  in  method  flatten(Options,String[],boolean)	23	None	add
229	[BUG]  [BUGGY]  String[]  arguments  =  options.get(i).toArray(new  String[arguments[i]),  stopAtNonOption);  [CE]  ']'  expected  [FE]                ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  String[]  arguments  =  options.get(i).toArray(new  String[arguments[i]),  stopAtNonOption);  [BUGGY]      String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String[]  arguments  =  options.get(i).toArray(new  String[arguments[i]),  stopAtNonOption);	  String[]    arguments    =    options.get(i).toArray(new    String[arguments[i]),    opt);    	non-compiled	[CE]  ']'  expected	112	None	replace
230	[BUG]  [BUGGY]  String[]  arguments  =  options.get(i).toArray(new  String[arguments[i]),  eatTheRest);  [CE]  ']'  expected  [FE]                  ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  String[]  arguments  =  options.get(i).toArray(new  String[arguments[i]),  eatTheRest);  [BUGGY]      String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String[]  arguments  =  options.get(i).toArray(new  String[arguments[i]),  eatTheRest);	  String[]    arguments    =    options.get(i).toArray(new    String[arguments[i]),    opt);    	non-compiled	[CE]  ']'  expected	112	None	replace
231	[BUG]  [BUGGY]  String[]  arguments  =  options.get(i).toArray(new  String[arguments[i]),  opt,  stopAtNonOption);  [CE]  ']'  expected  [FE]                    ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  String[]  arguments  =  options.get(i).toArray(new  String[arguments[i]),  opt,  stopAtNonOption);  [BUGGY]      String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String[]  arguments  =  options.get(i).toArray(new  String[arguments[i]),  opt,  stopAtNonOption);	  String[]    arguments    =    options.get(i).toArray(new    String[arguments[i]),    opt);    	non-compiled	[CE]  ']'  expected	112	None	replace
232	[BUG]  [BUGGY]  String[]  arguments  =  options.get(i).toArray(new  String[arguments[i]),  opt,  eatTheRest);  [CE]  ']'  expected  [FE]                      ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  String[]  arguments  =  options.get(i).toArray(new  String[arguments[i]),  opt,  eatTheRest);  [BUGGY]      String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String[]  arguments  =  options.get(i).toArray(new  String[arguments[i]),  opt,  eatTheRest);	  String[]    arguments    =    options.get(i).toArray(new    String[arguments[i]),    opt);    	non-compiled	[CE]  ']'  expected	112	None	replace
233	[BUG]  [BUGGY]  String[]  arguments[]  =  options.toArray(new  String[arguments.size()  +  1]);  [CE]  variable  arguments  is  already  defined  in  method  flatten(Options,String[],boolean)  [FE]                ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  String[]  arguments[]  =  options.toArray(new  String[arguments.size()  +  1]);  [BUGGY]      String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String[]  arguments[]  =  options.toArray(new  String[arguments.size()  +  1]);	  String[]    arguments[]    =    options.toArray(new    String[arguments.size()    ]);    	non-compiled	[CE]  variable  arguments  is  already  defined  in  method  flatten(Options,String[],boolean)	97	None	replace
234	[BUG]  [BUGGY]  String[]  arguments[]  =  options.toArray(new  String[arguments.size()  -  1]);  [CE]  variable  arguments  is  already  defined  in  method  flatten(Options,String[],boolean)  [FE]                  ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  String[]  arguments[]  =  options.toArray(new  String[arguments.size()  -  1]);  [BUGGY]      String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String[]  arguments[]  =  options.toArray(new  String[arguments.size()  -  1]);	  String[]    arguments[]    =    options.toArray(new    String[arguments.size()    ]);    	non-compiled	[CE]  variable  arguments  is  already  defined  in  method  flatten(Options,String[],boolean)	97	None	replace
235	[BUG]  [BUGGY]  String[]  arguments[]  =  options.toArray(new  String[arguments.size()  ]  +  1);  [CE]  variable  arguments  is  already  defined  in  method  flatten(Options,String[],boolean)  [FE]                    ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  String[]  arguments[]  =  options.toArray(new  String[arguments.size()  ]  +  1);  [BUGGY]      String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String[]  arguments[]  =  options.toArray(new  String[arguments.size()  ]  +  1);	  String[]    arguments[]    =    options.toArray(new    String[arguments.size()    ]);    	non-compiled	[CE]  variable  arguments  is  already  defined  in  method  flatten(Options,String[],boolean)	97	None	replace
236	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  String  arg  =(arguments[i]  ==  null)?  arguments[i]  : ", ";  [BUGGY]        if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	add	String  arg  =(arguments[i]  ==  null)?  arguments[i]  : ", ";	  String    arg    =(arguments[i]    ==    null)?    arguments[i]    :   ",null   ";    	compilable	  [FE]  AssertionFailedError  	104	14	replace
237	[BUG]  [BUGGY]  String  arg  =(arguments[i]  ==  null)?  arguments[i]  : ", ";  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  String  arg  =(arguments[i]  ==  null)?  arguments[i]  : ", ";  [BUGGY]        if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String  arg  =(arguments[i]  ==  null)?  arguments[i]  : ", ";	  String    arg    =(arguments[i]    ==    null)?    arguments[i]    :   ",null   ";    	compilable	  [FE]  AssertionFailedError  	104	14	replace
238	[BUG]  [BUGGY]  [FE]  UnrecognizedOptionException  [FE]    UnrecognizedOptionException    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]          tokens.add(     "-     ");    tokens.add(   "-     ");  tokens.add( "-   ");  tokens.add( "-   ");  [BUGGY]      String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	add	                tokens.add(       "-       ");        tokens.add(   "-       ");    tokens.add( "-   ");  tokens.add( "-   ");	  	compilable	  [FE]  UnrecognizedOptionException  	42	13	add
239	[BUG]  [BUGGY]          tokens.add(     "-     ");    tokens.add(   "-     ");  tokens.add( "-   ");  tokens.add( "-   ");  [FE]  UnrecognizedOptionException  [FE]    UnrecognizedOptionException    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]          tokens.add(     "-     ");    tokens.add(   "-     ");  tokens.add( "-   ");  tokens.add( "-   ");  [BUGGY]      String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	                tokens.add(       "-       ");        tokens.add(   "-       ");    tokens.add( "-   ");  tokens.add( "-   ");	  	compilable	  [FE]  UnrecognizedOptionException  	42	13	add
240	[BUG]  [BUGGY]  [FE]  UnrecognizedOptionException  [FE]      UnrecognizedOptionException    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]          tokens.add(     "-     ");    tokens.add(   "-     ");  tokens.add( ",-   ");  tokens.add( "-   ");  [BUGGY]      String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	add	                tokens.add(       "-       ");        tokens.add(   "-       ");    tokens.add( ",-   ");  tokens.add( "-   ");	  	compilable	  [FE]  UnrecognizedOptionException  	42	13	add
241	[BUG]  [BUGGY]          tokens.add(     "-     ");    tokens.add(   "-     ");  tokens.add( ",-   ");  tokens.add( "-   ");  [FE]  UnrecognizedOptionException  [FE]      UnrecognizedOptionException    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]          tokens.add(     "-     ");    tokens.add(   "-     ");  tokens.add( ",-   ");  tokens.add( "-   ");  [BUGGY]      String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	                tokens.add(       "-       ");        tokens.add(   "-       ");    tokens.add( ",-   ");  tokens.add( "-   ");	  	compilable	  [FE]  UnrecognizedOptionException  	42	13	add
242	[BUG]  [BUGGY]  [FE]  UnrecognizedOptionException  [FE]        UnrecognizedOptionException    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]          tokens.add(     "-     ");    tokens.add(   "-     ");  tokens.add( ".-   ");  tokens.add( "-   ");  [BUGGY]      String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	add	                tokens.add(       "-       ");        tokens.add(   "-       ");    tokens.add( ".-   ");  tokens.add( "-   ");	  	compilable	  [FE]  UnrecognizedOptionException  	42	13	add
243	[BUG]  [BUGGY]          tokens.add(     "-     ");    tokens.add(   "-     ");  tokens.add( ".-   ");  tokens.add( "-   ");  [FE]  UnrecognizedOptionException  [FE]        UnrecognizedOptionException    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]          tokens.add(     "-     ");    tokens.add(   "-     ");  tokens.add( ".-   ");  tokens.add( "-   ");  [BUGGY]      String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	                tokens.add(       "-       ");        tokens.add(   "-       ");    tokens.add( ".-   ");  tokens.add( "-   ");	  	compilable	  [FE]  UnrecognizedOptionException  	42	13	add
244	[BUG]  [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(arguments[i]);  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(arguments[i]);  [BUGGY]      String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	TokenBuffer  tokens  =  new  TokenBuffer(arguments[i]);	  TokenBuffer    tokens    =    new    TokenBuffer(tokens[i]);    	non-compiled	[CE]  cannot  find  symbol	119	None	replace
245	[BUG]  [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(tokens[i],  opt);  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(tokens[i],  opt);  [BUGGY]      String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	TokenBuffer  tokens  =  new  TokenBuffer(tokens[i],  opt);	  TokenBuffer    tokens    =    new    TokenBuffer(tokens[i]);    	non-compiled	[CE]  cannot  find  symbol	119	None	replace
246	[BUG]  [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(args[i]);  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(args[i]);  [BUGGY]      String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	TokenBuffer  tokens  =  new  TokenBuffer(args[i]);	  TokenBuffer    tokens    =    new    TokenBuffer(tokens[i]);    	non-compiled	[CE]  cannot  find  symbol	119	None	replace
247	[BUG]  [BUGGY]  String  arg  =(arguments[i]  ==  null)?     "null   "  :  arguments[i].toString();  String  arg  =(arguments[i]  ==  null)?   "null   "  :  arguments[i].toString();  [CE]  variable  arg  is  already  defined  in  method  flatten(Options,String[],boolean)  [FE]    ComparisonFailure    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  String  arg  =(arguments[i]  ==  null)?     "null   "  :  arguments[i].toString();  String  arg  =(arguments[i]  ==  null)?   "null   "  :  arguments[i].toString();  [BUGGY]        if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String    arg    =(arguments[i]    ==    null)?       "null   "    :    arguments[i].toString();    String  arg  =(arguments[i]  ==  null)?   "null   "  :  arguments[i].toString();	  	non-compiled	[CE]  variable  arg  is  already  defined  in  method  flatten(Options,String[],boolean)	38	None	add
248	[BUG]  [BUGGY]  String  arg  =(arguments[i]  ==  null)?     "null   "  :  arguments[i].toString();  String  arg  =(arguments[i]!=  null)?   "null   "  :  arguments[i].toString();  [CE]  variable  arg  is  already  defined  in  method  flatten(Options,String[],boolean)  [FE]      ComparisonFailure    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  String  arg  =(arguments[i]  ==  null)?     "null   "  :  arguments[i].toString();  String  arg  =(arguments[i]!=  null)?   "null   "  :  arguments[i].toString();  [BUGGY]        if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String    arg    =(arguments[i]    ==    null)?       "null   "    :    arguments[i].toString();    String  arg  =(arguments[i]!=  null)?   "null   "  :  arguments[i].toString();	  	non-compiled	[CE]  variable  arg  is  already  defined  in  method  flatten(Options,String[],boolean)	38	None	add
249	[BUG]  [BUGGY]  String  arg  =(arguments[i]  ==  null)?     "null   "  :  arguments[i].toString();  String  arg  =(arguments[i]  ==  null)?   "null ",  :  arguments[i].toString();  [CE]  :  expected  [FE]        ComparisonFailure    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  String  arg  =(arguments[i]  ==  null)?     "null   "  :  arguments[i].toString();  String  arg  =(arguments[i]  ==  null)?   "null ",  :  arguments[i].toString();  [BUGGY]        if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String    arg    =(arguments[i]    ==    null)?       "null   "    :    arguments[i].toString();    String  arg  =(arguments[i]  ==  null)?   "null ",  :  arguments[i].toString();	  	non-compiled	[CE]  :  expected	38	None	add
250	[BUG]  [BUGGY]  String  arg  =  arguments[i].trim().toLowerCase(Locale.ENGLISH,  true);  [CE]  cannot  find  symbol  Locale  [FE]        ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  String  arg  =  arguments[i].trim().toLowerCase(Locale.ENGLISH,  true);  [BUGGY]        if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String  arg  =  arguments[i].trim().toLowerCase(Locale.ENGLISH,  true);	  String    arg    =    arguments[i].trim().toLowerCase(Locale.ENGLISH);    	non-compiled	[CE]  cannot  find  symbol  Locale	87	None	replace
251	[BUG]  [BUGGY]  String  arg  =  options[i].trim().toLowerCase(Locale.ENGLISH);  [CE]  cannot  find  symbol  Locale  [FE]          ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  String  arg  =  options[i].trim().toLowerCase(Locale.ENGLISH);  [BUGGY]        if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String  arg  =  options[i].trim().toLowerCase(Locale.ENGLISH);	  String    arg    =    arguments[i].trim().toLowerCase(Locale.ENGLISH);    	non-compiled	[CE]  cannot  find  symbol  Locale	87	None	replace
252	[BUG]  [BUGGY]  String  arg  =  arguments[i].trim().toLowerCase(Locale.ENGLISH,  false);  [CE]  cannot  find  symbol  Locale  [FE]            ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  String  arg  =  arguments[i].trim().toLowerCase(Locale.ENGLISH,  false);  [BUGGY]        if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String  arg  =  arguments[i].trim().toLowerCase(Locale.ENGLISH,  false);	  String    arg    =    arguments[i].trim().toLowerCase(Locale.ENGLISH);    	non-compiled	[CE]  cannot  find  symbol  Locale	87	None	replace
253	[BUG]  [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(arguments.length,  arguments.length);  [CE]  cannot  find  symbol  [FE]                        ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(arguments.length,  arguments.length);  [BUGGY]      String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	TokenBuffer  tokens  =  new  TokenBuffer(arguments.length,  arguments.length);	  TokenBuffer    tokens    =    new    TokenBuffer(arguments.length.size());    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
254	[BUG]  [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(arguments.length,  options.size());  [CE]  cannot  find  symbol  [FE]                          ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(arguments.length,  options.size());  [BUGGY]      String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	TokenBuffer  tokens  =  new  TokenBuffer(arguments.length,  options.size());	  TokenBuffer    tokens    =    new    TokenBuffer(arguments.length.size());    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
255	[BUG]  [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(arguments[i.length()  ]);  [CE]  cannot  find  symbol  [FE]                            ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(arguments[i.length()  ]);  [BUGGY]      String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	TokenBuffer  tokens  =  new  TokenBuffer(arguments[i.length()  ]);	  TokenBuffer    tokens    =    new    TokenBuffer(arguments.length.size());    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
256	[BUG]  [BUGGY]  String[]  arguments[]  =  options.toArray(new  String[arguments[i  +  1]);  [CE]  ']'  expected  [FE]              ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  String[]  arguments[]  =  options.toArray(new  String[arguments[i  +  1]);  [BUGGY]      String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String[]  arguments[]  =  options.toArray(new  String[arguments[i  +  1]);	  String[]    arguments[]    =(String[])options.toArray(new    String[arguments[i    +    1]);    	non-compiled	[CE]  ']'  expected	117	None	replace
257	[BUG]  [BUGGY]  String[]  arguments[]  =(String[])options.toArray(new  String[arguments[i  +  2]);  [CE]  ']'  expected  [FE]                ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  String[]  arguments[]  =(String[])options.toArray(new  String[arguments[i  +  2]);  [BUGGY]      String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String[]  arguments[]  =(String[])options.toArray(new  String[arguments[i  +  2]);	  String[]    arguments[]    =(String[])options.toArray(new    String[arguments[i    +    1]);    	non-compiled	[CE]  ']'  expected	117	None	replace
258	[BUG]  [BUGGY]  String  arg  =  arguments[i].toString().trim();  String  arg  =  arguments[i].toString().trim();  [CE]  variable  arg  is  already  defined  in  method  flatten(Options,String[],boolean)  [FE]    ComparisonFailure    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  String  arg  =  arguments[i].toString().trim();  String  arg  =  arguments[i].toString().trim();  [BUGGY]        if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String    arg    =    arguments[i].toString().trim();    String  arg  =  arguments[i].toString().trim();	  	non-compiled	[CE]  variable  arg  is  already  defined  in  method  flatten(Options,String[],boolean)	17	None	add
259	[BUG]  [BUGGY]  String  arg  =  arguments[i].toString().trim();  String  arg  =  arguments[i].toString().trim());  [CE]  ';'  expected  [FE]      ComparisonFailure    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  String  arg  =  arguments[i].toString().trim();  String  arg  =  arguments[i].toString().trim());  [BUGGY]        if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String    arg    =    arguments[i].toString().trim();    String  arg  =  arguments[i].toString().trim());	  	non-compiled	[CE]  ';'  expected	17	None	add
260	[BUG]  [BUGGY]  String  arg  =  arguments[i].toString().trim();  String  arg  =  arguments[0].toString().trim();  [CE]  variable  arg  is  already  defined  in  method  flatten(Options,String[],boolean)  [FE]        ComparisonFailure    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  String  arg  =  arguments[i].toString().trim();  String  arg  =  arguments[0].toString().trim();  [BUGGY]        if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String    arg    =    arguments[i].toString().trim();    String  arg  =  arguments[0].toString().trim();	  	non-compiled	[CE]  variable  arg  is  already  defined  in  method  flatten(Options,String[],boolean)	17	None	add
261	[BUG]  [BUGGY]  String  arg  =  arguments[i].toString().trim();  String  arg  =  argument[i].toString().trim();  [CE]  variable  arg  is  already  defined  in  method  flatten(Options,String[],boolean)  [FE]          ComparisonFailure    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  String  arg  =  arguments[i].toString().trim();  String  arg  =  argument[i].toString().trim();  [BUGGY]        if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String    arg    =    arguments[i].toString().trim();    String  arg  =  argument[i].toString().trim();	  	non-compiled	[CE]  variable  arg  is  already  defined  in  method  flatten(Options,String[],boolean)	17	None	add
262	[BUG]  [BUGGY]  String[]  arguments  =(String[])options.toArray(new  String[arguments[i  +  2]);  [CE]  ']'  expected  [FE]                  ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  String[]  arguments  =(String[])options.toArray(new  String[arguments[i  +  2]);  [BUGGY]      String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String[]  arguments  =(String[])options.toArray(new  String[arguments[i  +  2]);	  String[]    arguments    =(String[])options.toArray(new    String[arguments[i    +    1]);    	non-compiled	[CE]  ']'  expected	126	None	replace
263	[BUG]  [BUGGY]  String[]  arguments  =(String[])options.toArray(new  String[arguments[i  -  1]);  [CE]  ']'  expected  [FE]                    ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  String[]  arguments  =(String[])options.toArray(new  String[arguments[i  -  1]);  [BUGGY]      String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String[]  arguments  =(String[])options.toArray(new  String[arguments[i  -  1]);	  String[]    arguments    =(String[])options.toArray(new    String[arguments[i    +    1]);    	non-compiled	[CE]  ']'  expected	126	None	replace
264	[BUG]  [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(options.size()  +  i);  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(options.size()  +  i);  [BUGGY]      String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	TokenBuffer  tokens  =  new  TokenBuffer(options.size()  +  i);	  TokenBuffer    tokens    =    new    TokenBuffer(options.size());    	non-compiled	[CE]  cannot  find  symbol	98	None	replace
265	[BUG]  [BUGGY]  String  arg  =(arguments[i]  ==  null)?  arguments[i]  : ", ",null ";  [CE]  <identifier>  expected  [FE]    AssertionFailedError    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  String  arg  =(arguments[i]  ==  null)?  arguments[i]  : ", ",null ";  [BUGGY]        if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String  arg  =(arguments[i]  ==  null)?  arguments[i]  : ", ",null ";	  String    arg    =(arguments[i]    ==    null)?    arguments[i]    :   ",null   ";    	non-compiled	[CE]  <identifier>  expected	104	None	replace
266	[BUG]  [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(arguments[i.length);  [CE]  ']'  expected  [FE]              ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(arguments[i.length);  [BUGGY]      String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	TokenBuffer  tokens  =  new  TokenBuffer(arguments[i.length);	  TokenBuffer    tokens    =    new    TokenBuffer(arguments.length);    	non-compiled	[CE]  ']'  expected	30	None	replace
267	[BUG]  [BUGGY]  String  arg  =  arguments[i].trim().trim();  String  arg  =  arguments[0].trim().trim();  [CE]  variable  arg  is  already  defined  in  method  flatten(Options,String[],boolean)  [FE]    ComparisonFailure    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  String  arg  =  arguments[i].trim().trim();  String  arg  =  arguments[0].trim().trim();  [BUGGY]        if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String    arg    =    arguments[i].trim().trim();    String  arg  =  arguments[0].trim().trim();	  	non-compiled	[CE]  variable  arg  is  already  defined  in  method  flatten(Options,String[],boolean)	23	None	add
268	[BUG]  [BUGGY]  String[]  arguments  =  options.get(i).toArray(new  String[arguments[i],  eatTheRest);  [CE]  ']'  expected  [FE]                  ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  String[]  arguments  =  options.get(i).toArray(new  String[arguments[i],  eatTheRest);  [BUGGY]      String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String[]  arguments  =  options.get(i).toArray(new  String[arguments[i],  eatTheRest);	  String[]    arguments    =    options.get(i).toArray(new    String[arguments[i],    opt);    	non-compiled	[CE]  ']'  expected	5	None	replace
269	[BUG]  [BUGGY]  String  arg  =(arguments[i]  ==  null)?   "null "  :  arguments[i].toLowerCase(opt);  [CE]  cannot  find  symbol  opt  [FE]    ComparisonFailure    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  String  arg  =(arguments[i]  ==  null)?   "null "  :  arguments[i].toLowerCase(opt);  [BUGGY]        if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String  arg  =(arguments[i]  ==  null)?   "null "  :  arguments[i].toLowerCase(opt);	  String    arg    =(arguments[i]    ==    null)?       "null   "    :    arguments[i].toLowerCase();    	non-compiled	[CE]  cannot  find  symbol  opt	123	None	replace
270	[BUG]  [BUGGY]  String  arg  =(arguments[i]  ==  null)?   "null "  :  arguments[i].toLowerCase(option);  [CE]  cannot  find  symbol  option  [FE]      ComparisonFailure    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  String  arg  =(arguments[i]  ==  null)?   "null "  :  arguments[i].toLowerCase(option);  [BUGGY]        if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String  arg  =(arguments[i]  ==  null)?   "null "  :  arguments[i].toLowerCase(option);	  String    arg    =(arguments[i]    ==    null)?       "null   "    :    arguments[i].toLowerCase();    	non-compiled	[CE]  cannot  find  symbol  option	123	None	replace
271	[BUG]  [BUGGY]  String[]  arguments  =  options.get(i,  option);  [CE]  variable  arguments  is  already  defined  in  method  flatten(Options,String[],boolean)  [FE]              ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  String[]  arguments  =  options.get(i,  option);  [BUGGY]      String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String[]  arguments  =  options.get(i,  option);	  String[]    arguments    =    options.get(i,    opt);    	non-compiled	[CE]  variable  arguments  is  already  defined  in  method  flatten(Options,String[],boolean)	72	None	replace
272	[BUG]  [BUGGY]  String[]  arguments  =  options.toArray(arguments[0]);  [CE]  variable  arguments  is  already  defined  in  method  flatten(Options,String[],boolean)  [FE]              ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  String[]  arguments  =  options.toArray(arguments[0]);  [BUGGY]      String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String[]  arguments  =  options.toArray(arguments[0]);	  String[]    arguments    =    options.toArray(new    String[0]);    	non-compiled	[CE]  variable  arguments  is  already  defined  in  method  flatten(Options,String[],boolean)	85	None	replace
273	[BUG]  [BUGGY]  String  arg  =  arguments[i].trim()  +  1;  String  arg  =  options[i].trim()  +  1;  [CE]  variable  arg  is  already  defined  in  method  flatten(Options,String[],boolean)  [FE]    UnrecognizedOptionException    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  String  arg  =  arguments[i].trim()  +  1;  String  arg  =  options[i].trim()  +  1;  [BUGGY]        if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String    arg    =    arguments[i].trim()    +    1;    String  arg  =  options[i].trim()  +  1;	  	non-compiled	[CE]  variable  arg  is  already  defined  in  method  flatten(Options,String[],boolean)	25	None	add
274	[BUG]  [BUGGY]  String  arg  =  arguments[i].trim()  +  1;  String  arg  =  arguments[i].itrim()  +  1;  [CE]  variable  arg  is  already  defined  in  method  flatten(Options,String[],boolean)  [FE]      UnrecognizedOptionException    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  String  arg  =  arguments[i].trim()  +  1;  String  arg  =  arguments[i].itrim()  +  1;  [BUGGY]        if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String    arg    =    arguments[i].trim()    +    1;    String  arg  =  arguments[i].itrim()  +  1;	  	non-compiled	[CE]  variable  arg  is  already  defined  in  method  flatten(Options,String[],boolean)	25	None	add
275	[BUG]  [BUGGY]  String  arg  =  options[i].toLowerCase();  [CE]  array  required,  but  Options  found  [FE]    ComparisonFailure    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  String  arg  =  options[i].toLowerCase();  [BUGGY]        if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String  arg  =  options[i].toLowerCase();	  String    arg    =    arguments[i].toLowerCase();    	non-compiled	[CE]  array  required,  but  Options  found	121	None	replace
276	[BUG]  [BUGGY]  [FE]  UnrecognizedOptionException  [FE]    UnrecognizedOptionException    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]          tokens.add(     "-     ");    tokens.add(   "-     ");  tokens.add( "-   ");  [BUGGY]      String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	add	                tokens.add(       "-       ");        tokens.add(   "-       ");    tokens.add( "-   ");	  	compilable	  [FE]  UnrecognizedOptionException  	42	13	add
277	[BUG]  [BUGGY]          tokens.add(     "-     ");    tokens.add(   "-     ");  tokens.add( "-   ");  [FE]  UnrecognizedOptionException  [FE]    UnrecognizedOptionException    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]          tokens.add(     "-     ");    tokens.add(   "-     ");  tokens.add( "-   ");  [BUGGY]      String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	                tokens.add(       "-       ");        tokens.add(   "-       ");    tokens.add( "-   ");	  	compilable	  [FE]  UnrecognizedOptionException  	42	13	add
278	[BUG]  [BUGGY]  String  arg  =(arguments[i].trim()  ==  null)?  arguments[i].trim()  :   "null   ";  String  arg  =(arguments[i].trim()  ==  null)?  arguments[i].trim()  :   "null ",  true;  [CE]  <identifier>  expected  [FE]    AssertionFailedError    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  String  arg  =(arguments[i].trim()  ==  null)?  arguments[i].trim()  :   "null   ";  String  arg  =(arguments[i].trim()  ==  null)?  arguments[i].trim()  :   "null ",  true;  [BUGGY]        if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String    arg    =(arguments[i].trim()    ==    null)?    arguments[i].trim()    :   "null   ";    String  arg  =(arguments[i].trim()  ==  null)?  arguments[i].trim()  :   "null ",  true;	  	non-compiled	[CE]  <identifier>  expected	124	None	add
279	[BUG]  [BUGGY]  String[]  arguments[]  =  options.toArray(arguments[0]);  [CE]  variable  arguments  is  already  defined  in  method  flatten(Options,String[],boolean)  [FE]                      ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  String[]  arguments[]  =  options.toArray(arguments[0]);  [BUGGY]      String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String[]  arguments[]  =  options.toArray(arguments[0]);	  String[]    arguments[]    =    options.toArray(new    String[0]);    	non-compiled	[CE]  variable  arguments  is  already  defined  in  method  flatten(Options,String[],boolean)	3	None	replace
280	[BUG]  [BUGGY]  String[]  arguments[]  =  options.toArray(new  String[arguments.size()  +  i]);  [CE]  variable  arguments  is  already  defined  in  method  flatten(Options,String[],boolean)  [FE]                ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  String[]  arguments[]  =  options.toArray(new  String[arguments.size()  +  i]);  [BUGGY]      String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String[]  arguments[]  =  options.toArray(new  String[arguments.size()  +  i]);	  String[]    arguments[]    =    options.toArray(new    String[arguments.size()    ]);    	non-compiled	[CE]  variable  arguments  is  already  defined  in  method  flatten(Options,String[],boolean)	97	None	replace
281	[BUG]  [BUGGY]  String[]  arguments[]  =  options.toArray(new  String[args.size()  ]);  [CE]  variable  arguments  is  already  defined  in  method  flatten(Options,String[],boolean)  [FE]                  ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  String[]  arguments[]  =  options.toArray(new  String[args.size()  ]);  [BUGGY]      String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String[]  arguments[]  =  options.toArray(new  String[args.size()  ]);	  String[]    arguments[]    =    options.toArray(new    String[arguments.size()    ]);    	non-compiled	[CE]  variable  arguments  is  already  defined  in  method  flatten(Options,String[],boolean)	97	None	replace
282	[BUG]  [BUGGY]  String  arg  =  options[i].split( "no-arguments ");  [CE]  array  required,  but  Options  found  [FE]            ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  String  arg  =  options[i].split( "no-arguments ");  [BUGGY]        if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String  arg  =  options[i].split( "no-arguments ");	  String    arg    =    arguments[i].trim();    String    arg    =    arguments[i].split(   "n   ");    	non-compiled	[CE]  array  required,  but  Options  found	84	None	replace
283	[BUG]  [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(tokens,  arguments.length);  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(tokens,  arguments.length);  [BUGGY]      String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	TokenBuffer  tokens  =  new  TokenBuffer(tokens,  arguments.length);	  TokenBuffer    tokens    =    new    TokenBuffer(tokens.length,    arguments.length);    	non-compiled	[CE]  cannot  find  symbol	32	None	replace
284	[BUG]  [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(i,  options.length);  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(i,  options.length);  [BUGGY]      String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	TokenBuffer  tokens  =  new  TokenBuffer(i,  options.length);	  TokenBuffer    tokens    =    new    TokenBuffer(i,    tokens.length);    	non-compiled	[CE]  cannot  find  symbol	33	None	replace
285	[BUG]  [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(arguments.length,  i.size());  [CE]  cannot  find  symbol  [FE]                        ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(arguments.length,  i.size());  [BUGGY]      String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	TokenBuffer  tokens  =  new  TokenBuffer(arguments.length,  i.size());	  TokenBuffer    tokens    =    new    TokenBuffer(arguments.length.size());    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
286	[BUG]  [BUGGY]  String[]  arguments  =  options.toArray(new  String[arguments.size()  0]);  [CE]  ']'  expected  [FE]                ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  String[]  arguments  =  options.toArray(new  String[arguments.size()  0]);  [BUGGY]      String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String[]  arguments  =  options.toArray(new  String[arguments.size()  0]);	  String[]    arguments    =    options.toArray(new    String[arguments.size()    ]);    	non-compiled	[CE]  ']'  expected	50	None	replace
287	[BUG]  [BUGGY]  String[]  arguments  =  options.toArray(new  String[arguments.size()  ])+  1;  [CE]  variable  arguments  is  already  defined  in  method  flatten(Options,String[],boolean)  [FE]                  ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  String[]  arguments  =  options.toArray(new  String[arguments.size()  ])+  1;  [BUGGY]      String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String[]  arguments  =  options.toArray(new  String[arguments.size()  ])+  1;	  String[]    arguments    =    options.toArray(new    String[arguments.size()    ]);    	non-compiled	[CE]  variable  arguments  is  already  defined  in  method  flatten(Options,String[],boolean)	50	None	replace
288	[BUG]  [BUGGY]  String  arg  =  arguments[i].trim().toLowerCase();  String  arg  =  options[i].trim().toLowerCase();  [CE]  variable  arg  is  already  defined  in  method  flatten(Options,String[],boolean)  [FE]    ComparisonFailure    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  String  arg  =  arguments[i].trim().toLowerCase();  String  arg  =  options[i].trim().toLowerCase();  [BUGGY]        if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String    arg    =    arguments[i].trim().toLowerCase();    String  arg  =  options[i].trim().toLowerCase();	  	non-compiled	[CE]  variable  arg  is  already  defined  in  method  flatten(Options,String[],boolean)	21	None	add
289	[BUG]  [BUGGY]  String  arg  =  options[i].toString(arguments[i]);  [CE]  array  required,  but  Options  found  [FE]              ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  String  arg  =  options[i].toString(arguments[i]);  [BUGGY]        if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String  arg  =  options[i].toString(arguments[i]);	  String    arg    =    options[i].toString();    	non-compiled	[CE]  array  required,  but  Options  found	51	None	replace
290	[BUG]  [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(arguments[i].length,  options);  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(arguments[i].length,  options);  [BUGGY]      String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	TokenBuffer  tokens  =  new  TokenBuffer(arguments[i].length,  options);	  TokenBuffer    tokens    =    new    TokenBuffer(arguments[i].length);    	non-compiled	[CE]  cannot  find  symbol	118	None	replace
291	[BUG]  [BUGGY]  String[]  arguments  =  options.get(i).toArray(new  String[arguments[0]  +  i]);  [CE]  variable  arguments  is  already  defined  in  method  flatten(Options,String[],boolean)  [FE]                ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  String[]  arguments  =  options.get(i).toArray(new  String[arguments[0]  +  i]);  [BUGGY]      String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String[]  arguments  =  options.get(i).toArray(new  String[arguments[0]  +  i]);	  String[]    arguments    =    options.get(i).toArray(new    String[arguments[0]);    	non-compiled	[CE]  variable  arguments  is  already  defined  in  method  flatten(Options,String[],boolean)	4	None	replace
292	[BUG]  [BUGGY]  String[]  arguments  =(String[])options.toArray(new  String[arguments[i],  stopAtNonOption);  [CE]  ']'  expected  [FE]                    ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  String[]  arguments  =(String[])options.toArray(new  String[arguments[i],  stopAtNonOption);  [BUGGY]      String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String[]  arguments  =(String[])options.toArray(new  String[arguments[i],  stopAtNonOption);	  String[]    arguments    =(String[])options.toArray(new    String[arguments[i],    opt);    	non-compiled	[CE]  ']'  expected	8	None	replace
293	[BUG]  [BUGGY]  String[]  arguments  =(String[])options.toArray(new  String[arguments[i],  option);  [CE]  ']'  expected  [FE]                      ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  String[]  arguments  =(String[])options.toArray(new  String[arguments[i],  option);  [BUGGY]      String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String[]  arguments  =(String[])options.toArray(new  String[arguments[i],  option);	  String[]    arguments    =(String[])options.toArray(new    String[arguments[i],    opt);    	non-compiled	[CE]  ']'  expected	8	None	replace
294	[BUG]  [BUGGY]  String[]  arguments  =(String[])options.toArray(new  String[arguments[i],  options);  [CE]  ']'  expected  [FE]                        ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  String[]  arguments  =(String[])options.toArray(new  String[arguments[i],  options);  [BUGGY]      String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String[]  arguments  =(String[])options.toArray(new  String[arguments[i],  options);	  String[]    arguments    =(String[])options.toArray(new    String[arguments[i],    opt);    	non-compiled	[CE]  ']'  expected	8	None	replace
295	[BUG]  [BUGGY]  String[]  arguments  =  options.toArray(new  String[arguments[i  +  1]);  [CE]  ']'  expected  [FE]                  ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  String[]  arguments  =  options.toArray(new  String[arguments[i  +  1]);  [BUGGY]      String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String[]  arguments  =  options.toArray(new  String[arguments[i  +  1]);	  String[]    arguments    =(String[])options.toArray(new    String[arguments[i    +    1]);    	non-compiled	[CE]  ']'  expected	126	None	replace
296	[BUG]  [BUGGY]  String  arg  =  arguments[i]  + ".- ",  opt;  [CE]  variable  opt  is  already  defined  in  method  flatten(Options,String[],boolean)  [FE]    UnrecognizedOptionException    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  String  arg  =  arguments[i]  + ".- ",  opt;  [BUGGY]        if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String  arg  =  arguments[i]  + ".- ",  opt;	  String    arg    =    arguments[i]    +   ".-   ";    	non-compiled	[CE]  variable  opt  is  already  defined  in  method  flatten(Options,String[],boolean)	54	None	replace
297	[BUG]  [BUGGY]  String  arg  =  arguments[i].trim().toLowerCase( "- ");  [CE]  no  suitable  method  found  for  toLowerCase(String)  [FE]    ComparisonFailure    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  String  arg  =  arguments[i].trim().toLowerCase( "- ");  [BUGGY]        if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String  arg  =  arguments[i].trim().toLowerCase( "- ");	  String    arg    =    arguments[i].trim().toLowerCase();    	non-compiled	[CE]  no  suitable  method  found  for  toLowerCase(String)	22	None	replace
298	[BUG]  [BUGGY]  String  arg  =  arguments[i].trim().toLowerCase(opt);  [CE]  cannot  find  symbol  opt  [FE]      ComparisonFailure    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  String  arg  =  arguments[i].trim().toLowerCase(opt);  [BUGGY]        if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String  arg  =  arguments[i].trim().toLowerCase(opt);	  String    arg    =    arguments[i].trim().toLowerCase();    	non-compiled	[CE]  cannot  find  symbol  opt	22	None	replace
299	[BUG]  [BUGGY]  String  arg  =  options[i]  + ": ";  [CE]  array  required,  but  Options  found  [FE]    UnrecognizedOptionException    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  String  arg  =  options[i]  + ": ";  [BUGGY]        if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String  arg  =  options[i]  + ": ";	  String    arg    =    arguments[i]    +   ":   ";    	non-compiled	[CE]  array  required,  but  Options  found	106	None	replace
300	[BUG]  [BUGGY]  String  arg  =(arguments[i]  ==  null)?  arguments[i]  : "null ",  opt);  [CE]  [FE]    AssertionFailedError    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  String  arg  =(arguments[i]  ==  null)?  arguments[i]  : "null ",  opt);  [BUGGY]        if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String  arg  =(arguments[i]  ==  null)?  arguments[i]  : "null ",  opt);	  String    arg    =(arguments[i]    ==    null)?    arguments[i]    :   "null   ";    	non-compiled	[CE]  	63	None	replace
301	[BUG]  [BUGGY]  String  arg  =(options[i]  ==  null)?  options[i]  :  options[i];  [CE]  array  required,  but  Options  found  [FE]              ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  String  arg  =(options[i]  ==  null)?  options[i]  :  options[i];  [BUGGY]        if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String  arg  =(options[i]  ==  null)?  options[i]  :  options[i];	  String    arg    =(options[i]!=    null)?    options[i]    :    arguments[i];    	non-compiled	[CE]  array  required,  but  Options  found	107	None	replace
302	[BUG]  [BUGGY]  String  arg  =  arguments[i].split( "- ").split( "- ");  [CE]  cannot  find  symbol  [FE]        ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  String  arg  =  arguments[i].split( "- ").split( "- ");  [BUGGY]        if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String  arg  =  arguments[i].split( "- ").split( "- ");	  String    arg    =    arguments[i].trim();    String    arg    =    arguments[i].split(   "-   ");    	non-compiled	[CE]  cannot  find  symbol	113	None	replace
303	[BUG]  [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(args[i.size()  ]);  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(args[i.size()  ]);  [BUGGY]      String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	TokenBuffer  tokens  =  new  TokenBuffer(args[i.size()  ]);	  TokenBuffer    tokens    =    new    TokenBuffer(args.size());    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
304	[BUG]  [BUGGY]  String  arg  =  arguments[i].toLowerCase();  String  arg  =  arguments[i].toLowerCase().toLowerCase();  [CE]  variable  arg  is  already  defined  in  method  flatten(Options,String[],boolean)  [FE]    ComparisonFailure    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  String  arg  =  arguments[i].toLowerCase();  String  arg  =  arguments[i].toLowerCase().toLowerCase();  [BUGGY]        if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String    arg    =    arguments[i].toLowerCase();    String  arg  =  arguments[i].toLowerCase().toLowerCase();	  	non-compiled	[CE]  variable  arg  is  already  defined  in  method  flatten(Options,String[],boolean)	120	None	add
305	[BUG]  [BUGGY]  String  arg  =  arguments[i].toLowerCase();  String  arg  =  arguments[i].toLowerCase();  tokens.add( "- ");  [CE]  variable  arg  is  already  defined  in  method  flatten(Options,String[],boolean)  [FE]      ComparisonFailure    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  String  arg  =  arguments[i].toLowerCase();  String  arg  =  arguments[i].toLowerCase();  tokens.add( "- ");  [BUGGY]        if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String    arg    =    arguments[i].toLowerCase();    String  arg  =  arguments[i].toLowerCase();  tokens.add( "- ");	  	non-compiled	[CE]  variable  arg  is  already  defined  in  method  flatten(Options,String[],boolean)	120	None	add
306	[BUG]  [BUGGY]  String  arg  =(arguments[i]  ==  null)?  arguments[i]   "null ",  arguments[i];  [CE]  :  expected  [FE]        AssertionFailedError      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  String  arg  =(arguments[i]  ==  null)?  arguments[i]   "null ",  arguments[i];  [BUGGY]        if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String  arg  =(arguments[i]  ==  null)?  arguments[i]   "null ",  arguments[i];	  String    arg    =(arguments[i]    ==    null)?    arguments[i]       "null   "    :    arguments[i];    	non-compiled	[CE]  :  expected	74	None	replace
307	[BUG]  [BUGGY]  String  arg  =(arguments[i]  ==  null)?     "null   "  :  arguments[i].toString();  String  arg  =(arguments[i]  ==  null)?   "null ".  :  arguments[i].toString();  [CE]  <identifier>  expected  [FE]    ComparisonFailure    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  String  arg  =(arguments[i]  ==  null)?     "null   "  :  arguments[i].toString();  String  arg  =(arguments[i]  ==  null)?   "null ".  :  arguments[i].toString();  [BUGGY]        if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String    arg    =(arguments[i]    ==    null)?       "null   "    :    arguments[i].toString();    String  arg  =(arguments[i]  ==  null)?   "null ".  :  arguments[i].toString();	  	non-compiled	[CE]  <identifier>  expected	38	None	add
308	[BUG]  [BUGGY]  String[]  arguments[]  =  options.toArray(new  String[arguments[i])+  1;  [CE]  ']'  expected  [FE]                    ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  String[]  arguments[]  =  options.toArray(new  String[arguments[i])+  1;  [BUGGY]      String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String[]  arguments[]  =  options.toArray(new  String[arguments[i])+  1;	  String[]    arguments[]    =    options.toArray(new    String[arguments[i]);    	non-compiled	[CE]  ']'  expected	27	None	replace
309	[BUG]  [BUGGY]  String  arg  =(arguments[i]  ==  null)?  arguments[i]  : "null ",  argument[i];  [CE]  [FE]          ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  String  arg  =(arguments[i]  ==  null)?  arguments[i]  : "null ",  argument[i];  [BUGGY]        if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String  arg  =(arguments[i]  ==  null)?  arguments[i]  : "null ",  argument[i];	  String    arg    =(arguments[i]!=    null)?    arguments[i]    :       "null       ";    String    arg    =(arguments[i]    ==    null)?    arguments[i]    :       "null   ";    	non-compiled	[CE]  	81	None	replace
310	[BUG]  [BUGGY]  String  arg  =(arguments[i]  ==  null)?  arguments[i]  : "null ",;  [CE]  <identifier>  expected  [FE]        ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  String  arg  =(arguments[i]  ==  null)?  arguments[i]  : "null ",;  [BUGGY]        if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String  arg  =(arguments[i]  ==  null)?  arguments[i]  : "null ",;	  String    arg    =(arguments[i]!=    null)?    arguments[i]    :       "null       ";    String    arg    =(arguments[i]!=    null)?    arguments[i]    :       "null   ",;    	non-compiled	[CE]  <identifier>  expected	100	None	replace
311	[BUG]  [BUGGY]  String[]  arguments  =  options.get(i  +  1,  stopAtNonOption);  [CE]  variable  arguments  is  already  defined  in  method  flatten(Options,String[],boolean)  [FE]            ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  String[]  arguments  =  options.get(i  +  1,  stopAtNonOption);  [BUGGY]      String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String[]  arguments  =  options.get(i  +  1,  stopAtNonOption);	  String[]    arguments    =    options.get(i    +    1);    	non-compiled	[CE]  variable  arguments  is  already  defined  in  method  flatten(Options,String[],boolean)	71	None	replace
312	[BUG]  [BUGGY]  String[]  arguments  =  options.get(i  +  1  -  i);  [CE]  variable  arguments  is  already  defined  in  method  flatten(Options,String[],boolean)  [FE]              ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  String[]  arguments  =  options.get(i  +  1  -  i);  [BUGGY]      String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String[]  arguments  =  options.get(i  +  1  -  i);	  String[]    arguments    =    options.get(i    +    1);    	non-compiled	[CE]  variable  arguments  is  already  defined  in  method  flatten(Options,String[],boolean)	71	None	replace
313	[BUG]  [BUGGY]  String  arg  =(options[i]  ==  null)?  options[i]  :  options[i].toString();  [CE]  array  required,  but  Options  found  [FE]                ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  String  arg  =(options[i]  ==  null)?  options[i]  :  options[i].toString();  [BUGGY]        if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String  arg  =(options[i]  ==  null)?  options[i]  :  options[i].toString();	  String    arg    =(options[i]    ==    null)?    options[i]    :    arguments[i];    	non-compiled	[CE]  array  required,  but  Options  found	108	None	replace
314	[BUG]  [BUGGY]  String  arg  =(arguments[i]  ==  null)?     "null   "  :  arguments[i].toLowerCase();  String  arg  =(arguments[i]  ==  null)?   "null   "  :  arguments[i].toUpperCase();  [CE]  variable  arg  is  already  defined  in  method  flatten(Options,String[],boolean)  [FE]    ComparisonFailure    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  String  arg  =(arguments[i]  ==  null)?     "null   "  :  arguments[i].toLowerCase();  String  arg  =(arguments[i]  ==  null)?   "null   "  :  arguments[i].toUpperCase();  [BUGGY]        if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String    arg    =(arguments[i]    ==    null)?       "null   "    :    arguments[i].toLowerCase();    String  arg  =(arguments[i]  ==  null)?   "null   "  :  arguments[i].toUpperCase();	  	non-compiled	[CE]  variable  arg  is  already  defined  in  method  flatten(Options,String[],boolean)	122	None	add
315	[BUG]  [BUGGY]  String  arg  =  arguments[i].toString().trim();  String  arg  =  options[i].toString().trim();  [CE]  variable  arg  is  already  defined  in  method  flatten(Options,String[],boolean)  [FE]    ComparisonFailure    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  String  arg  =  arguments[i].toString().trim();  String  arg  =  options[i].toString().trim();  [BUGGY]        if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String    arg    =    arguments[i].toString().trim();    String  arg  =  options[i].toString().trim();	  	non-compiled	[CE]  variable  arg  is  already  defined  in  method  flatten(Options,String[],boolean)	17	None	add
316	[BUG]  [BUGGY]  String[]  arguments[]  =  options.toArray(new  String[i],  opt);  [CE]  variable  arguments  is  already  defined  in  method  flatten(Options,String[],boolean)  [FE]                    ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  String[]  arguments[]  =  options.toArray(new  String[i],  opt);  [BUGGY]      String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String[]  arguments[]  =  options.toArray(new  String[i],  opt);	  String[]    arguments[]    =    options.toArray(new    String[i]);    	non-compiled	[CE]  variable  arguments  is  already  defined  in  method  flatten(Options,String[],boolean)	2	None	replace
317	[BUG]  [BUGGY]  String[]  arguments  =  options.get(i).toArray(new  String[arguments[i]));  [CE]  ']'  expected  [FE]                ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  String[]  arguments  =  options.get(i).toArray(new  String[arguments[i]));  [BUGGY]      String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String[]  arguments  =  options.get(i).toArray(new  String[arguments[i]));	  String[]    arguments    =    options.get(i).toArray(new    String[arguments[i]),    opt);    	non-compiled	[CE]  ']'  expected	112	None	replace
318	[BUG]  [BUGGY]  String[]  arguments  =  options.get(i).toArray(new  String[arguments[i],  stopAtNonOption));  [CE]  ']'  expected  [FE]                  ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  String[]  arguments  =  options.get(i).toArray(new  String[arguments[i],  stopAtNonOption));  [BUGGY]      String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String[]  arguments  =  options.get(i).toArray(new  String[arguments[i],  stopAtNonOption));	  String[]    arguments    =    options.get(i).toArray(new    String[arguments[i]),    opt);    	non-compiled	[CE]  ']'  expected	112	None	replace
319	[BUG]  [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(tokens,  i  +  1,  arguments.length);  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(tokens,  i  +  1,  arguments.length);  [BUGGY]      String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	TokenBuffer  tokens  =  new  TokenBuffer(tokens,  i  +  1,  arguments.length);	  TokenBuffer    tokens    =    new    TokenBuffer(tokens,    i);    	non-compiled	[CE]  cannot  find  symbol	31	None	replace
320	[BUG]  [BUGGY]  String  arg  =(arguments[i]  ==  null)?   "null "  :  arguments[i].getText();  [CE]  cannot  find  symbol  [FE]    ComparisonFailure    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  String  arg  =(arguments[i]  ==  null)?   "null "  :  arguments[i].getText();  [BUGGY]        if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String  arg  =(arguments[i]  ==  null)?   "null "  :  arguments[i].getText();	  String    arg    =(arguments[i]    ==    null)?       "null   "    :    arguments[i].toString();    	non-compiled	[CE]  cannot  find  symbol	39	None	replace
321	[BUG]  [BUGGY]  tokens.add( "-- ",  i);  [CE]  no  suitable  method  found  for  add(String,int)  [FE]        AssertionFailedError      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  tokens.add( "-- ",  i);  [BUGGY]      String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	tokens.add( "-- ",  i);	  tokens.add(   "--   ");    	non-compiled	[CE]  no  suitable  method  found  for  add(String,int)	86	None	replace
322	[BUG]  [BUGGY]  String  arg  =  options.get(i).trim().toLowerCase(Locale.ENGLISH);  [CE]  cannot  find  symbol  Locale  [FE]        ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  String  arg  =  options.get(i).trim().toLowerCase(Locale.ENGLISH);  [BUGGY]        if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String  arg  =  options.get(i).trim().toLowerCase(Locale.ENGLISH);	  String    arg    =    arguments[i].trim().toLowerCase(Locale.ENGLISH);    	non-compiled	[CE]  cannot  find  symbol  Locale	87	None	replace
323	[BUG]  [BUGGY]  String  arg  =(arguments[i]  ==  null)?  arguments[i]  :   "null   ";  String  arg  =(arguments[i]  ==  null)?  arguments[i]  :   "null ",  null;  [CE]  <identifier>  expected  [FE]    AssertionFailedError    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  String  arg  =(arguments[i]  ==  null)?  arguments[i]  :   "null   ";  String  arg  =(arguments[i]  ==  null)?  arguments[i]  :   "null ",  null;  [BUGGY]        if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String    arg    =(arguments[i]    ==    null)?    arguments[i]    :   "null   ";    String  arg  =(arguments[i]  ==  null)?  arguments[i]  :   "null ",  null;	  	non-compiled	[CE]  <identifier>  expected	62	None	add
324	[BUG]  [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(arguments.size(),  i);  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(arguments.size(),  i);  [BUGGY]      String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	TokenBuffer  tokens  =  new  TokenBuffer(arguments.size(),  i);	  TokenBuffer    tokens    =    new    TokenBuffer(arguments.size());    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
325	[BUG]  [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(arguments.size()  +  i);  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(arguments.size()  +  i);  [BUGGY]      String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	TokenBuffer  tokens  =  new  TokenBuffer(arguments.size()  +  i);	  TokenBuffer    tokens    =    new    TokenBuffer(arguments.size());    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
326	[BUG]  [BUGGY]  tokens.add( "- ").equals(arguments[i]));  [CE]  [FE]        AssertionFailedError      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  tokens.add( "- ").equals(arguments[i]));  [BUGGY]      String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	tokens.add( "- ").equals(arguments[i]));	  tokens.add(   "-   ".equals(arguments[i]));    	non-compiled	[CE]  	109	None	replace
327	[BUG]  [BUGGY]  String  arg  =  arguments[i].iterator().next();  [CE]  cannot  find  symbol  [FE]          ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  String  arg  =  arguments[i].iterator().next();  [BUGGY]        if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String  arg  =  arguments[i].iterator().next();	  String    arg    =    arguments[i].trim();    String    arg    =    arguments[i].itrim();    	non-compiled	[CE]  cannot  find  symbol	114	None	replace
328	[BUG]  [BUGGY]  String  arg  =  options[i].itrim();  [CE]  array  required,  but  Options  found  [FE]            ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  String  arg  =  options[i].itrim();  [BUGGY]        if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String  arg  =  options[i].itrim();	  String    arg    =    arguments[i].trim();    String    arg    =    arguments[i].itrim();    	non-compiled	[CE]  array  required,  but  Options  found	114	None	replace
329	[BUG]  [BUGGY]  String[]  arguments  =  options.get(i).split( "n ");  [CE]  variable  arguments  is  already  defined  in  method  flatten(Options,String[],boolean)  [FE]              ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  String[]  arguments  =  options.get(i).split( "n ");  [BUGGY]      String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String[]  arguments  =  options.get(i).split( "n ");	  String[]    arguments    =    options.get(i).toString();    	non-compiled	[CE]  variable  arguments  is  already  defined  in  method  flatten(Options,String[],boolean)	90	None	replace
330	[BUG]  [BUGGY]  String[]  arguments  =  options.get(i).toString()  + "n ";  [CE]  variable  arguments  is  already  defined  in  method  flatten(Options,String[],boolean)  [FE]                ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  String[]  arguments  =  options.get(i).toString()  + "n ";  [BUGGY]      String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String[]  arguments  =  options.get(i).toString()  + "n ";	  String[]    arguments    =    options.get(i).toString();    	non-compiled	[CE]  variable  arguments  is  already  defined  in  method  flatten(Options,String[],boolean)	90	None	replace
331	[BUG]  [BUGGY]  String  arg  =  arguments[i].toString()  +   "n   ";  String  arg  =  arguments[i].toString()  +   "n ",;  [CE]  <identifier>  expected  [FE]    UnrecognizedOptionException    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  String  arg  =  arguments[i].toString()  +   "n   ";  String  arg  =  arguments[i].toString()  +   "n ",;  [BUGGY]        if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String    arg    =    arguments[i].toString()    +   "n   ";    String  arg  =  arguments[i].toString()  +   "n ",;	  	non-compiled	[CE]  <identifier>  expected	19	None	add
332	[BUG]  [BUGGY]  String[]  arguments  =  options.toArray(new  String[arguments[i])+  1;  [CE]  ']'  expected  [FE]                  ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  String[]  arguments  =  options.toArray(new  String[arguments[i])+  1;  [BUGGY]      String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String[]  arguments  =  options.toArray(new  String[arguments[i])+  1;	  String[]    arguments    =    options.toArray(new    String[arguments[i]);    	non-compiled	[CE]  ']'  expected	7	None	replace
333	[BUG]  [BUGGY]  String[]  arguments  =  options.toArray(new  String[arguments[i]  +  i]);  [CE]  variable  arguments  is  already  defined  in  method  flatten(Options,String[],boolean)  [FE]                    ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  String[]  arguments  =  options.toArray(new  String[arguments[i]  +  i]);  [BUGGY]      String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String[]  arguments  =  options.toArray(new  String[arguments[i]  +  i]);	  String[]    arguments    =    options.toArray(new    String[arguments[i]);    	non-compiled	[CE]  variable  arguments  is  already  defined  in  method  flatten(Options,String[],boolean)	7	None	replace
334	[BUG]  [BUGGY]  String[]  arguments[]  =(String[])options.toArray(new  String[arguments[i],  stopAtNonOption);  [CE]  ']'  expected  [FE]                ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  String[]  arguments[]  =(String[])options.toArray(new  String[arguments[i],  stopAtNonOption);  [BUGGY]      String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String[]  arguments[]  =(String[])options.toArray(new  String[arguments[i],  stopAtNonOption);	  String[]    arguments[]    =(String[])options.toArray(new    String[arguments[i],    opt);    	non-compiled	[CE]  ']'  expected	76	None	replace
335	[BUG]  [BUGGY]  String[]  arguments[]  =(String[])options.toArray(new  String[arguments[i],  option);  [CE]  ']'  expected  [FE]                  ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  String[]  arguments[]  =(String[])options.toArray(new  String[arguments[i],  option);  [BUGGY]      String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String[]  arguments[]  =(String[])options.toArray(new  String[arguments[i],  option);	  String[]    arguments[]    =(String[])options.toArray(new    String[arguments[i],    opt);    	non-compiled	[CE]  ']'  expected	76	None	replace
336	[BUG]  [BUGGY]  String[]  arguments[]  =  option.toArray(new  String[arguments[i],  stopAtNonOption);  [CE]  ']'  expected  [FE]                      ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  String[]  arguments[]  =  option.toArray(new  String[arguments[i],  stopAtNonOption);  [BUGGY]      String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String[]  arguments[]  =  option.toArray(new  String[arguments[i],  stopAtNonOption);	  String[]    arguments[]    =    option.toArray(new    String[arguments[i]);    	non-compiled	[CE]  ']'  expected	28	None	replace
337	[BUG]  [BUGGY]  String[]  arguments[]  =  option.toArray(new  String[arguments[i]),  stopAtNonOption);  [CE]  ']'  expected  [FE]                        ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  String[]  arguments[]  =  option.toArray(new  String[arguments[i]),  stopAtNonOption);  [BUGGY]      String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String[]  arguments[]  =  option.toArray(new  String[arguments[i]),  stopAtNonOption);	  String[]    arguments[]    =    option.toArray(new    String[arguments[i]);    	non-compiled	[CE]  ']'  expected	28	None	replace
338	[BUG]  [BUGGY]  String[]  arguments  =  options.toArray(new  String[arguments[i.size()  ]);  [CE]  ']'  expected  [FE]              ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  String[]  arguments  =  options.toArray(new  String[arguments[i.size()  ]);  [BUGGY]      String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String[]  arguments  =  options.toArray(new  String[arguments[i.size()  ]);	  String[]    arguments    =(String[])options.toArray(new    String[arguments[i.size()    ]);    	non-compiled	[CE]  ']'  expected	49	None	replace
339	[BUG]  [BUGGY]  String[]  arguments  =(String[])options.toArray(new  String[arguments[i.get(i)]);  [CE]  ']'  expected  [FE]                ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  String[]  arguments  =(String[])options.toArray(new  String[arguments[i.get(i)]);  [BUGGY]      String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String[]  arguments  =(String[])options.toArray(new  String[arguments[i.get(i)]);	  String[]    arguments    =(String[])options.toArray(new    String[arguments[i.size()    ]);    	non-compiled	[CE]  ']'  expected	49	None	replace
340	[BUG]  [BUGGY]  String[]  arguments[]  =(String[])options.toArray(new  String[arguments[i.get(i)]);  [CE]  ']'  expected  [FE]                  ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  String[]  arguments[]  =(String[])options.toArray(new  String[arguments[i.get(i)]);  [BUGGY]      String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String[]  arguments[]  =(String[])options.toArray(new  String[arguments[i.get(i)]);	  String[]    arguments[]    =(String[])options.toArray(new    String[arguments[i.size()    ]);    	non-compiled	[CE]  ']'  expected	60	None	replace
341	[BUG]  [BUGGY]  String  arg  =  arguments[i].toString()  +   "n   ";  String  arg  =  arguments[i].toString()  + ".n   ";  [CE]  variable  arg  is  already  defined  in  method  flatten(Options,String[],boolean)  [FE]    UnrecognizedOptionException    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  String  arg  =  arguments[i].toString()  +   "n   ";  String  arg  =  arguments[i].toString()  + ".n   ";  [BUGGY]        if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String    arg    =    arguments[i].toString()    +   "n   ";    String  arg  =  arguments[i].toString()  + ".n   ";	  	non-compiled	[CE]  variable  arg  is  already  defined  in  method  flatten(Options,String[],boolean)	19	None	add
342	[BUG]  [BUGGY]  String  arg  =(arguments[i].trim()  ==  null)?  arguments[i].trim()  : "null ",  opt);  [CE]  [FE]    AssertionFailedError    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  String  arg  =(arguments[i].trim()  ==  null)?  arguments[i].trim()  : "null ",  opt);  [BUGGY]        if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String  arg  =(arguments[i].trim()  ==  null)?  arguments[i].trim()  : "null ",  opt);	  String    arg    =(arguments[i].trim()    ==    null)?    arguments[i].trim()    :   "null   ";    	non-compiled	[CE]  	125	None	replace
343	[BUG]  [BUGGY]  String[]  arguments[]  =(String[])options.toArray(new  String[args.size()  1]);  [CE]  ']'  expected  [FE]                    ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  String[]  arguments[]  =(String[])options.toArray(new  String[args.size()  1]);  [BUGGY]      String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String[]  arguments[]  =(String[])options.toArray(new  String[args.size()  1]);	  String[]    arguments[]    =(String[])options.toArray(new    String[args.size()    +    1]);    	non-compiled	[CE]  ']'  expected	61	None	replace
344	[BUG]  [BUGGY]  String  arg  =  arguments[i].toString().trim( "eatTheRest ");  [CE]  method  trim  in  class  String  cannot  be  applied  to  given  types;  [FE]    ComparisonFailure    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  String  arg  =  arguments[i].toString().trim( "eatTheRest ");  [BUGGY]        if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String  arg  =  arguments[i].toString().trim( "eatTheRest ");	  String    arg    =    arguments[i].toString().trim();    	non-compiled	[CE]  method  trim  in  class  String  cannot  be  applied  to  given  types;	18	None	replace
345	[BUG]  [BUGGY]  String  arg  =(arguments[i]  ==  null)?     "null   "  :  arguments[i].toString();  String  arg  =(arguments[i]  ==  null)?   "null ")  :  arguments[i].toString();  [CE]  :  expected  [FE]    ComparisonFailure    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  String  arg  =(arguments[i]  ==  null)?     "null   "  :  arguments[i].toString();  String  arg  =(arguments[i]  ==  null)?   "null ")  :  arguments[i].toString();  [BUGGY]        if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String    arg    =(arguments[i]    ==    null)?       "null   "    :    arguments[i].toString();    String  arg  =(arguments[i]  ==  null)?   "null ")  :  arguments[i].toString();	  	non-compiled	[CE]  :  expected	38	None	add
346	[BUG]  [BUGGY]  tokens.add( "- ".equals(arguments[i].toString()));  [CE]  cannot  find  symbol  arg  [FE]              ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  tokens.add( "- ".equals(arguments[i].toString()));  [BUGGY]        if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	tokens.add( "- ".equals(arguments[i].toString()));	  String    arg    =    arguments[i].toString();    String    arg    =    arguments[i].toString();    }    else    if(   "--   ".equals(arg))    {    eatTheRest    =    true;    tokens.add(   "-       ");    }    	non-compiled	[CE]  cannot  find  symbol  arg	37	None	replace
347	[BUG]  [BUGGY]  String[]  arguments[]  =  arguments[i].toArray(new  String[arguments[i  +  1]);  [CE]  ']'  expected  [FE]                    ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  String[]  arguments[]  =  arguments[i].toArray(new  String[arguments[i  +  1]);  [BUGGY]      String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String[]  arguments[]  =  arguments[i].toArray(new  String[arguments[i  +  1]);	  String[]    arguments[]    =    arguments[i].toArray(new    String[arguments[i]);    	non-compiled	[CE]  ']'  expected	116	None	replace
348	[BUG]  [BUGGY]  String  arg  =  arguments[i].split( "   ");  [CE]  incompatible  types  [FE]            ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  String  arg  =  arguments[i].split( "   ");  [BUGGY]        if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String  arg  =  arguments[i].split( "   ");	  String    arg    =    arguments[i].trim();    String    arg    =    arguments[i].split(   "n   ");    	non-compiled	[CE]  incompatible  types	84	None	replace
349	[BUG]  [BUGGY]  String  arg  =(arguments[i]  ==  null)?  arguments[i]  : "null ",  arguments[i]);  [CE]  [FE]          ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  String  arg  =(arguments[i]  ==  null)?  arguments[i]  : "null ",  arguments[i]);  [BUGGY]        if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String  arg  =(arguments[i]  ==  null)?  arguments[i]  : "null ",  arguments[i]);	  String    arg    =(arguments[i]!=    null)?    arguments[i]    :       "null       ";    String    arg    =(arguments[i]    ==    null)?    arguments[i]    :       "null   ";    	non-compiled	[CE]  	81	None	replace
350	[BUG]  [BUGGY]  String  arg  =  arguments[i].toLowerCase(opt);  [CE]  cannot  find  symbol  opt  [FE]    ComparisonFailure    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  String  arg  =  arguments[i].toLowerCase(opt);  [BUGGY]        if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String  arg  =  arguments[i].toLowerCase(opt);	  String    arg    =    arguments[i].toLowerCase();    	non-compiled	[CE]  cannot  find  symbol  opt	121	None	replace
351	[BUG]  [BUGGY]  String  arg  =  arguments[i]  +   ".-   ";  String  arg  =  arguments[i]  +... ".-   ";  [CE]  illegal  start  of  expression  [FE]    UnrecognizedOptionException    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  String  arg  =  arguments[i]  +   ".-   ";  String  arg  =  arguments[i]  +... ".-   ";  [BUGGY]        if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String    arg    =    arguments[i]    +   ".-   ";    String  arg  =  arguments[i]  +... ".-   ";	  	non-compiled	[CE]  illegal  start  of  expression	53	None	add
352	[BUG]  [BUGGY]  String  arg  =  arguments[i]  +   ".-   ";  String  arg  =  arguments[i]  +   ".- ".;  [CE]  <identifier>  expected  [FE]      UnrecognizedOptionException    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  String  arg  =  arguments[i]  +   ".-   ";  String  arg  =  arguments[i]  +   ".- ".;  [BUGGY]        if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String    arg    =    arguments[i]    +   ".-   ";    String  arg  =  arguments[i]  +   ".- ".;	  	non-compiled	[CE]  <identifier>  expected	53	None	add
353	[BUG]  [BUGGY]  String  arg  =(arguments[i]  ==  null)?   "null "  :  arguments[i].getName();  [CE]  cannot  find  symbol  [FE]    ComparisonFailure    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  String  arg  =(arguments[i]  ==  null)?   "null "  :  arguments[i].getName();  [BUGGY]        if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String  arg  =(arguments[i]  ==  null)?   "null "  :  arguments[i].getName();	  String    arg    =(arguments[i]    ==    null)?       "null   "    :    arguments[i].toString();    	non-compiled	[CE]  cannot  find  symbol	39	None	replace
354	[BUG]  [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(tokens[i],  arguments.length);  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(tokens[i],  arguments.length);  [BUGGY]      String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	TokenBuffer  tokens  =  new  TokenBuffer(tokens[i],  arguments.length);	  TokenBuffer    tokens    =    new    TokenBuffer(i,    tokens.length);    	non-compiled	[CE]  cannot  find  symbol	33	None	replace
355	[BUG]  [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(i,  arguments[i].length);  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(i,  arguments[i].length);  [BUGGY]      String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	TokenBuffer  tokens  =  new  TokenBuffer(i,  arguments[i].length);	  TokenBuffer    tokens    =    new    TokenBuffer(i,    tokens.length);    	non-compiled	[CE]  cannot  find  symbol	33	None	replace
356	[BUG]  [BUGGY]  String  arg  =  options[i].trim().replace(arguments[i]);  [CE]  array  required,  but  Options  found  [FE]                ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  String  arg  =  options[i].trim().replace(arguments[i]);  [BUGGY]        if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String  arg  =  options[i].trim().replace(arguments[i]);	  String    arg    =    options[i].trim();    	non-compiled	[CE]  array  required,  but  Options  found	52	None	replace
357	[BUG]  [BUGGY]  [FE]  org.apache.commons.cli.UnrecognizedOptionException:  Unrecognized  option:  --enable-a  [FE]    UnrecognizedOptionException    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  String  arg  =  arguments[i].toString()  + ", ";  [BUGGY]        if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	add	String  arg  =  arguments[i].toString()  + ", ";	  String    arg    =    arguments[i].toString()    +   "n   ";    	compilable	  [FE]  org.apache.commons.cli.UnrecognizedOptionException:  Unrecognized  option:  --enable-a  	20	13	replace
358	[BUG]  [BUGGY]  String  arg  =  arguments[i].toString()  + ", ";  [FE]  org.apache.commons.cli.UnrecognizedOptionException:  Unrecognized  option:  --enable-a  [FE]    UnrecognizedOptionException    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  String  arg  =  arguments[i].toString()  + ", ";  [BUGGY]        if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String  arg  =  arguments[i].toString()  + ", ";	  String    arg    =    arguments[i].toString()    +   "n   ";    	compilable	  [FE]  org.apache.commons.cli.UnrecognizedOptionException:  Unrecognized  option:  --enable-a  	20	13	replace
359	[BUG]  [BUGGY]  String[]  arguments  =(String[])options.toArray(new  String[args[i],  opt);  [CE]  ']'  expected  [FE]              ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  String[]  arguments  =(String[])options.toArray(new  String[args[i],  opt);  [BUGGY]      String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String[]  arguments  =(String[])options.toArray(new  String[args[i],  opt);	  String[]    arguments    =(String[])options.toArray(new    String[args[i]);    	non-compiled	[CE]  ']'  expected	101	None	replace
360	[BUG]  [BUGGY]  String  arg  =  arguments[i]  +   ":   ";  String  arg  =  arguments[i]  + ",:   ";  [CE]  variable  arg  is  already  defined  in  method  flatten(Options,String[],boolean)  [FE]    UnrecognizedOptionException    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  String  arg  =  arguments[i]  +   ":   ";  String  arg  =  arguments[i]  + ",:   ";  [BUGGY]        if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String    arg    =    arguments[i]    +   ":   ";    String  arg  =  arguments[i]  + ",:   ";	  	non-compiled	[CE]  variable  arg  is  already  defined  in  method  flatten(Options,String[],boolean)	105	None	add
361	[BUG]  [BUGGY]  String  arg  =  arguments[i].toLowerCase();  String  arg  =  arguments[i].toUwerCase();  [CE]  variable  arg  is  already  defined  in  method  flatten(Options,String[],boolean)  [FE]    ComparisonFailure    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  String  arg  =  arguments[i].toLowerCase();  String  arg  =  arguments[i].toUwerCase();  [BUGGY]        if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String    arg    =    arguments[i].toLowerCase();    String  arg  =  arguments[i].toUwerCase();	  	non-compiled	[CE]  variable  arg  is  already  defined  in  method  flatten(Options,String[],boolean)	120	None	add
362	[BUG]  [BUGGY]  String  arg  =  arguments[i].toLowerCase();  String  arg  =  arguments[i].toLowerCase(());  [CE]  illegal  start  of  expression  [FE]      ComparisonFailure    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  String  arg  =  arguments[i].toLowerCase();  String  arg  =  arguments[i].toLowerCase(());  [BUGGY]        if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String    arg    =    arguments[i].toLowerCase();    String  arg  =  arguments[i].toLowerCase(());	  	non-compiled	[CE]  illegal  start  of  expression	120	None	add
363	[BUG]  [BUGGY]  if(arguments[i].equals(arg))  {  String  arg  =  arguments[i].toString();  }  [CE]  cannot  find  symbol  arg  [FE]          ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  if(arguments[i].equals(arg))  {  String  arg  =  arguments[i].toString();  }  [BUGGY]        if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	if(arguments[i].equals(arg))  {  String  arg  =  arguments[i].toString();  }	  String    arg    =    arguments[i].toString();    String    arg    =    arguments[i].toString();    }    else    if(   "--   ".equals(arg))    {    eatTheRest    =    true;    tokens.add(   "--   ");    }    	non-compiled	[CE]  cannot  find  symbol  arg	35	None	replace
364	[BUG]  [BUGGY]  if(arguments[i].equals(arg))  {  String  arg  =  arguments[i].toString();  }  else  {  tokens.add( "-- ");  }  [CE]  cannot  find  symbol  arg  [FE]            ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  if(arguments[i].equals(arg))  {  String  arg  =  arguments[i].toString();  }  else  {  tokens.add( "-- ");  }  [BUGGY]        if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	if(arguments[i].equals(arg))  {  String  arg  =  arguments[i].toString();  }  else  {  tokens.add( "-- ");  }	  String    arg    =    arguments[i].toString();    String    arg    =    arguments[i].toString();    }    else    if(   "--   ".equals(arg))    {    eatTheRest    =    true;    tokens.add(   "--   ");    }    	non-compiled	[CE]  cannot  find  symbol  arg	35	None	replace
365	[BUG]  [BUGGY]  String[]  arguments  =  options.get(i).toArray(new  String[arguments[i]  +  11]);  [CE]  variable  arguments  is  already  defined  in  method  flatten(Options,String[],boolean)  [FE]                    ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  String[]  arguments  =  options.get(i).toArray(new  String[arguments[i]  +  11]);  [BUGGY]      String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String[]  arguments  =  options.get(i).toArray(new  String[arguments[i]  +  11]);	  String[]    arguments    =    options.get(i).toArray(new    String[arguments[i]    +    1]);    	non-compiled	[CE]  variable  arguments  is  already  defined  in  method  flatten(Options,String[],boolean)	6	None	replace
366	[BUG]  [BUGGY]  char  arg  =  arguments[i].toString();  [CE]  incompatible  types  [FE]        ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  char  arg  =  arguments[i].toString();  [BUGGY]        if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	char  arg  =  arguments[i].toString();	  String    arg    =    arguments[i].toString();    String    arg    =    arguments[i].toString();    	non-compiled	[CE]  incompatible  types	34	None	replace
367	[BUG]  [BUGGY]  String  arg  =(arguments[i]  ==  null)?   "null ",  arguments[i]  :  arguments[i];  [CE]  :  expected  [FE]            ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  String  arg  =(arguments[i]  ==  null)?   "null ",  arguments[i]  :  arguments[i];  [BUGGY]        if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String  arg  =(arguments[i]  ==  null)?   "null ",  arguments[i]  :  arguments[i];	  String    arg    =(arguments[i]    ==    null)?       "null       "    :    arguments[i];    String    arg    =(arguments[i]    ==    null)?       "null   ",    :    arguments[i];    	non-compiled	[CE]  :  expected	16	None	replace
368	[BUG]  [BUGGY]  String  arg  =  arguments[i].trim().toLowerCase();  String  arg  =  argument[i].trim().toLowerCase();  [CE]  variable  arg  is  already  defined  in  method  flatten(Options,String[],boolean)  [FE]    ComparisonFailure    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  String  arg  =  arguments[i].trim().toLowerCase();  String  arg  =  argument[i].trim().toLowerCase();  [BUGGY]        if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String    arg    =    arguments[i].trim().toLowerCase();    String  arg  =  argument[i].trim().toLowerCase();	  	non-compiled	[CE]  variable  arg  is  already  defined  in  method  flatten(Options,String[],boolean)	21	None	add
369	[BUG]  [BUGGY]  String[]  arguments  =(String[])options.toArray(new  String[arguments[i  *  1]);  [CE]  ']'  expected  [FE]                  ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  String[]  arguments  =(String[])options.toArray(new  String[arguments[i  *  1]);  [BUGGY]      String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String[]  arguments  =(String[])options.toArray(new  String[arguments[i  *  1]);	  String[]    arguments    =(String[])options.toArray(new    String[arguments[i    +    1]);    	non-compiled	[CE]  ']'  expected	126	None	replace
370	[BUG]  [BUGGY]  tokens.add( "- ".equals(arguments[i].trim()));  [CE]  cannot  find  symbol  arg  [FE]              ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  tokens.add( "- ".equals(arguments[i].trim()));  [BUGGY]        if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	tokens.add( "- ".equals(arguments[i].trim()));	  String    arg    =    arguments[i].trim();    String    arg    =    arguments[i].trim();    }    else    if(   "--   ".equals(arg))    {    tokens.add(   "--   ");    }    	non-compiled	[CE]  cannot  find  symbol  arg	70	None	replace
371	[BUG]  [BUGGY]  String[]  arguments[]  =  options.toArray(new  String[arguments[i]),  opt);  [CE]  ']'  expected  [FE]                    ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  String[]  arguments[]  =  options.toArray(new  String[arguments[i]),  opt);  [BUGGY]      String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String[]  arguments[]  =  options.toArray(new  String[arguments[i]),  opt);	  String[]    arguments[]    =    options.toArray(new    String[arguments[i]);    	non-compiled	[CE]  ']'  expected	27	None	replace
372	[BUG]  [BUGGY]  String[]  arguments[]  =(String[])options.toArray(new  String[arguments[args.size()  ]);  [CE]  ']'  expected  [FE]                  ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  String[]  arguments[]  =(String[])options.toArray(new  String[arguments[args.size()  ]);  [BUGGY]      String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String[]  arguments[]  =(String[])options.toArray(new  String[arguments[args.size()  ]);	  String[]    arguments[]    =(String[])options.toArray(new    String[arguments[i.size()    ]);    	non-compiled	[CE]  ']'  expected	60	None	replace
373	[BUG]  [BUGGY]  String[]  arguments[]  =  options.toArray(new  String[arguments.size()  ],  opt);  [CE]  variable  arguments  is  already  defined  in  method  flatten(Options,String[],boolean)  [FE]                ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  String[]  arguments[]  =  options.toArray(new  String[arguments.size()  ],  opt);  [BUGGY]      String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String[]  arguments[]  =  options.toArray(new  String[arguments.size()  ],  opt);	  String[]    arguments[]    =    options.toArray(new    String[arguments.size()    ]);    	non-compiled	[CE]  variable  arguments  is  already  defined  in  method  flatten(Options,String[],boolean)	97	None	replace
374	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  String  arg  =  arguments[i].trim().toLowerCase();  tokens.add( "- ");  [BUGGY]        if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	add	String  arg  =  arguments[i].trim().toLowerCase();  tokens.add( "- ");	  String    arg    =    arguments[i].trim();    String    arg    =    arguments[i].trim();    tokens.add(   "-   ");    	compilable	  [FE]  AssertionFailedError  	83	11	replace
375	[BUG]  [BUGGY]  String  arg  =  arguments[i].trim().toLowerCase();  tokens.add( "- ");  [FE]  AssertionFailedError  [FE]          ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  String  arg  =  arguments[i].trim().toLowerCase();  tokens.add( "- ");  [BUGGY]        if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String  arg  =  arguments[i].trim().toLowerCase();  tokens.add( "- ");	  String    arg    =    arguments[i].trim();    String    arg    =    arguments[i].trim();    tokens.add(   "-   ");    	compilable	  [FE]  AssertionFailedError  	83	11	replace
376	[BUG]  [BUGGY]  String  arg  =  options[i]  +  arguments[i].toLowerCase();  [CE]  array  required,  but  Options  found  [FE]              ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  String  arg  =  options[i]  +  arguments[i].toLowerCase();  [BUGGY]        if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String  arg  =  options[i]  +  arguments[i].toLowerCase();	  String    arg    =    options[i]    +    arguments[i];    	non-compiled	[CE]  array  required,  but  Options  found	88	None	replace
377	[BUG]  [BUGGY]  String[]  arguments  =  options.get(i,  argument);  [CE]  variable  arguments  is  already  defined  in  method  flatten(Options,String[],boolean)  [FE]              ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  String[]  arguments  =  options.get(i,  argument);  [BUGGY]      String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String[]  arguments  =  options.get(i,  argument);	  String[]    arguments    =    options.get(i,    opt);    	non-compiled	[CE]  variable  arguments  is  already  defined  in  method  flatten(Options,String[],boolean)	72	None	replace
378	[BUG]  [BUGGY]  String  arg  =(arguments[i]  ==  null)?  arguments[i]  :   "null   ";  String  arg  =(arguments[i]  ==  null)?  arguments[i]  :   "null ",  null);  [CE]  <identifier>  expected  [FE]    AssertionFailedError    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  String  arg  =(arguments[i]  ==  null)?  arguments[i]  :   "null   ";  String  arg  =(arguments[i]  ==  null)?  arguments[i]  :   "null ",  null);  [BUGGY]        if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String    arg    =(arguments[i]    ==    null)?    arguments[i]    :   "null   ";    String  arg  =(arguments[i]  ==  null)?  arguments[i]  :   "null ",  null);	  	non-compiled	[CE]  <identifier>  expected	62	None	add
379	[BUG]  [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(arguments.length,  arguments.size());  [CE]  cannot  find  symbol  [FE]                        ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(arguments.length,  arguments.size());  [BUGGY]      String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	TokenBuffer  tokens  =  new  TokenBuffer(arguments.length,  arguments.size());	  TokenBuffer    tokens    =    new    TokenBuffer(arguments.length.size());    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
380	[BUG]  [BUGGY]  String  arg  =(options[i]  ==  null)?  options[i]  :  arguments[i].toString();  [CE]  array  required,  but  Options  found  [FE]                ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  String  arg  =(options[i]  ==  null)?  options[i]  :  arguments[i].toString();  [BUGGY]        if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String  arg  =(options[i]  ==  null)?  options[i]  :  arguments[i].toString();	  String    arg    =(options[i]    ==    null)?    options[i]    :    arguments[i];    	non-compiled	[CE]  array  required,  but  Options  found	108	None	replace
381	[BUG]  [BUGGY]  String  arg  =(options[i]  ==  null)?  options[i]  :  arguments[i].toLowerCase();  [CE]  array  required,  but  Options  found  [FE]                  ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  String  arg  =(options[i]  ==  null)?  options[i]  :  arguments[i].toLowerCase();  [BUGGY]        if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String  arg  =(options[i]  ==  null)?  options[i]  :  arguments[i].toLowerCase();	  String    arg    =(options[i]    ==    null)?    options[i]    :    arguments[i];    	non-compiled	[CE]  array  required,  but  Options  found	108	None	replace
382	[BUG]  [BUGGY]  tokens.add( "- ".equals(arguments[i]),  eatTheRest);  [CE]  no  suitable  method  found  for  add(boolean,boolean)  [FE]        AssertionFailedError      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  tokens.add( "- ".equals(arguments[i]),  eatTheRest);  [BUGGY]      String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	tokens.add( "- ".equals(arguments[i]),  eatTheRest);	  tokens.add(   "-   ".equals(arguments[i]));    	non-compiled	[CE]  no  suitable  method  found  for  add(boolean,boolean)	109	None	replace
383	[BUG]  [BUGGY]  [FE]  UnrecognizedOptionException  [FE]    UnrecognizedOptionException    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  String  arg  =  arguments[i]  + ".: ";  [BUGGY]        if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	add	String  arg  =  arguments[i]  + ".: ";	  String    arg    =    arguments[i]    +   ":   ";    	compilable	  [FE]  UnrecognizedOptionException  	106	13	replace
384	[BUG]  [BUGGY]  String  arg  =  arguments[i]  + ".: ";  [FE]  UnrecognizedOptionException  [FE]    UnrecognizedOptionException    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  String  arg  =  arguments[i]  + ".: ";  [BUGGY]        if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String  arg  =  arguments[i]  + ".: ";	  String    arg    =    arguments[i]    +   ":   ";    	compilable	  [FE]  UnrecognizedOptionException  	106	13	replace
385	[BUG]  [BUGGY]  String[]  arguments  =  options.get(i).trim();  [CE]  variable  arguments  is  already  defined  in  method  flatten(Options,String[],boolean)  [FE]              ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  String[]  arguments  =  options.get(i).trim();  [BUGGY]      String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String[]  arguments  =  options.get(i).trim();	  String[]    arguments    =    options.get(i).toString();    	non-compiled	[CE]  variable  arguments  is  already  defined  in  method  flatten(Options,String[],boolean)	90	None	replace
386	[BUG]  [BUGGY]  String[]  arguments  =  options.toArray(new  String[arguments[i]),  opt);  [CE]  ']'  expected  [FE]                  ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  String[]  arguments  =  options.toArray(new  String[arguments[i]),  opt);  [BUGGY]      String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String[]  arguments  =  options.toArray(new  String[arguments[i]),  opt);	  String[]    arguments    =    options.toArray(new    String[arguments[i]);    	non-compiled	[CE]  ']'  expected	7	None	replace
387	[BUG]  [BUGGY]  String  arg  =  arguments[i].trim().toLowerCase(option);  [CE]  cannot  find  symbol  option  [FE]    ComparisonFailure    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  String  arg  =  arguments[i].trim().toLowerCase(option);  [BUGGY]        if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String  arg  =  arguments[i].trim().toLowerCase(option);	  String    arg    =    arguments[i].trim().toLowerCase();    	non-compiled	[CE]  cannot  find  symbol  option	22	None	replace
388	[BUG]  [BUGGY]  String  arg  =  arguments[i].trim().toLowerCase(false);  [CE]  no  suitable  method  found  for  toLowerCase(boolean)  [FE]      ComparisonFailure    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  String  arg  =  arguments[i].trim().toLowerCase(false);  [BUGGY]        if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String  arg  =  arguments[i].trim().toLowerCase(false);	  String    arg    =    arguments[i].trim().toLowerCase();    	non-compiled	[CE]  no  suitable  method  found  for  toLowerCase(boolean)	22	None	replace
389	[BUG]  [BUGGY]  String  arg  =  arguments[i].trim().toLowerCase(len);  [CE]  cannot  find  symbol  len  [FE]        ComparisonFailure    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  String  arg  =  arguments[i].trim().toLowerCase(len);  [BUGGY]        if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String  arg  =  arguments[i].trim().toLowerCase(len);	  String    arg    =    arguments[i].trim().toLowerCase();    	non-compiled	[CE]  cannot  find  symbol  len	22	None	replace
390	[BUG]  [BUGGY]  String  arg  =(arguments[i]!=  null)?   "null ",  arguments[i]  :  arguments[i];  [CE]  :  expected  [FE]            AssertionFailedError      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  String  arg  =(arguments[i]!=  null)?   "null ",  arguments[i]  :  arguments[i];  [BUGGY]        if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String  arg  =(arguments[i]!=  null)?   "null ",  arguments[i]  :  arguments[i];	  String    arg    =(arguments[i]!=    null)?       "null       "    :    arguments[i];    String    arg    =(arguments[i]!=    null)?       "null   ",    :    arguments[i];    	non-compiled	[CE]  :  expected	79	None	replace
391	[BUG]  [BUGGY]  String  arg  =  arguments[i].trim().toLowerCase(Locale.ENGLISH,  opt);  [CE]  cannot  find  symbol  Locale  [FE]        ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  String  arg  =  arguments[i].trim().toLowerCase(Locale.ENGLISH,  opt);  [BUGGY]        if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String  arg  =  arguments[i].trim().toLowerCase(Locale.ENGLISH,  opt);	  String    arg    =    arguments[i].trim().toLowerCase(Locale.ENGLISH);    	non-compiled	[CE]  cannot  find  symbol  Locale	87	None	replace
392	[BUG]  [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(arguments[i.size());  [CE]  ']'  expected  [FE]                      ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(arguments[i.size());  [BUGGY]      String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	TokenBuffer  tokens  =  new  TokenBuffer(arguments[i.size());	  TokenBuffer    tokens    =    new    TokenBuffer(args.size());    	non-compiled	[CE]  ']'  expected	12	None	replace
393	[BUG]  [BUGGY]  String[]  arguments  =  options.toArray(new  String[i  +  1]);  [CE]  variable  arguments  is  already  defined  in  method  flatten(Options,String[],boolean)  [FE]                ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  String[]  arguments  =  options.toArray(new  String[i  +  1]);  [BUGGY]      String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String[]  arguments  =  options.toArray(new  String[i  +  1]);	  String[]    arguments    =    options.toArray(new    String[i]);    	non-compiled	[CE]  variable  arguments  is  already  defined  in  method  flatten(Options,String[],boolean)	58	None	replace
394	[BUG]  [BUGGY]  String[]  arguments  =(String[])options.toArray(new  String[arguments.size()  +  i]);  [CE]  variable  arguments  is  already  defined  in  method  flatten(Options,String[],boolean)  [FE]            ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  String[]  arguments  =(String[])options.toArray(new  String[arguments.size()  +  i]);  [BUGGY]      String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String[]  arguments  =(String[])options.toArray(new  String[arguments.size()  +  i]);	  String[]    arguments    =(String[])options.toArray(new    String[arguments.size()    ]);    	non-compiled	[CE]  variable  arguments  is  already  defined  in  method  flatten(Options,String[],boolean)	48	None	replace
395	[BUG]  [BUGGY]  String[]  arguments[]  =(String[])options.toArray(new  String[i],  opt);  [CE]  variable  arguments  is  already  defined  in  method  flatten(Options,String[],boolean)  [FE]                  ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  String[]  arguments[]  =(String[])options.toArray(new  String[i],  opt);  [BUGGY]      String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String[]  arguments[]  =(String[])options.toArray(new  String[i],  opt);	  String[]    arguments[]    =(String[])options.toArray(new    String[i]);    	non-compiled	[CE]  variable  arguments  is  already  defined  in  method  flatten(Options,String[],boolean)	1	None	replace
396	[BUG]  [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(arguments[i],  i);  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(arguments[i],  i);  [BUGGY]      String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	TokenBuffer  tokens  =  new  TokenBuffer(arguments[i],  i);	  TokenBuffer    tokens    =    new    TokenBuffer(tokens.length,    i);    	non-compiled	[CE]  cannot  find  symbol	92	None	replace
397	[BUG]  [BUGGY]  String  arg  =(arguments[i]  ==  null)?     "null   "  :  arguments[i].trim();  String  arg  =(arguments[i]  ==  null)?   "null ")  :  arguments[i].trim();  [CE]  :  expected  [FE]    ComparisonFailure    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  String  arg  =(arguments[i]  ==  null)?     "null   "  :  arguments[i].trim();  String  arg  =(arguments[i]  ==  null)?   "null ")  :  arguments[i].trim();  [BUGGY]        if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String    arg    =(arguments[i]    ==    null)?       "null   "    :    arguments[i].trim();    String  arg  =(arguments[i]  ==  null)?   "null ")  :  arguments[i].trim();	  	non-compiled	[CE]  :  expected	40	None	add
398	[BUG]  [BUGGY]  String  arg  =(arguments[i].trim()  ==  null)?  arguments[i].trim()  :   "null   ";  String  arg  =(arguments[i].trim()  ==  null)?  arguments[i].trim()  :   "null ",  option);  [CE]  [FE]    AssertionFailedError    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  String  arg  =(arguments[i].trim()  ==  null)?  arguments[i].trim()  :   "null   ";  String  arg  =(arguments[i].trim()  ==  null)?  arguments[i].trim()  :   "null ",  option);  [BUGGY]        if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String    arg    =(arguments[i].trim()    ==    null)?    arguments[i].trim()    :   "null   ";    String  arg  =(arguments[i].trim()  ==  null)?  arguments[i].trim()  :   "null ",  option);	  	non-compiled	[CE]  	124	None	add
399	[BUG]  [BUGGY]  String  arg  =(arguments[i]  ==  null)?  arguments[i]  : ",null ",  opt);  [CE]  [FE]    AssertionFailedError    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  String  arg  =(arguments[i]  ==  null)?  arguments[i]  : ",null ",  opt);  [BUGGY]        if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String  arg  =(arguments[i]  ==  null)?  arguments[i]  : ",null ",  opt);	  String    arg    =(arguments[i]    ==    null)?    arguments[i]    :   ",null   ";    	non-compiled	[CE]  	104	None	replace
400	[BUG]  [BUGGY]  if(arguments[i].isEmpty())  {  String  arg  =  arguments[i].toString();  }  [CE]  cannot  find  symbol  arg  [FE]            ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  if(arguments[i].isEmpty())  {  String  arg  =  arguments[i].toString();  }  [BUGGY]        if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	if(arguments[i].isEmpty())  {  String  arg  =  arguments[i].toString();  }	  String    arg    =    arguments[i].toString();    String    arg    =    arguments[i].toString();    }    else    if(   "--   ".equals(arg))    {    tokens.add(   "--   ");    }    	non-compiled	[CE]  cannot  find  symbol  arg	36	None	replace
401	[BUG]  [BUGGY]  String  arg  =  arguments[i].trim().split( "- ");  [CE]  incompatible  types  [FE]        ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  String  arg  =  arguments[i].trim().split( "- ");  [BUGGY]        if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String  arg  =  arguments[i].trim().split( "- ");	  String    arg    =    arguments[i].trim();    String    arg    =    arguments[i].split(   "-   ");    	non-compiled	[CE]  incompatible  types	113	None	replace
402	[BUG]  [BUGGY]  String  arg  =  arguments[i].split( "- ".charAt(i));  [CE]  no  suitable  method  found  for  split(char)  [FE]          ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  String  arg  =  arguments[i].split( "- ".charAt(i));  [BUGGY]        if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String  arg  =  arguments[i].split( "- ".charAt(i));	  String    arg    =    arguments[i].trim();    String    arg    =    arguments[i].split(   "-   ");    	non-compiled	[CE]  no  suitable  method  found  for  split(char)	113	None	replace
403	[BUG]  [BUGGY]  String[]  arguments  =  options.toArray(new  String[arguments.size()  ]),  opt);  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  String[]  arguments  =  options.toArray(new  String[arguments.size()  ]),  opt);  [BUGGY]      String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String[]  arguments  =  options.toArray(new  String[arguments.size()  ]),  opt);	  String[]    arguments    =    options.toArray(new    String[arguments.size()    ]);    	non-compiled	[CE]  ';'  expected	50	None	replace
404	[BUG]  [BUGGY]  String[]  arguments  =  options.toArray(new  String[arguments.size()  +  i]);  [CE]  variable  arguments  is  already  defined  in  method  flatten(Options,String[],boolean)  [FE]                  ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  String[]  arguments  =  options.toArray(new  String[arguments.size()  +  i]);  [BUGGY]      String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String[]  arguments  =  options.toArray(new  String[arguments.size()  +  i]);	  String[]    arguments    =    options.toArray(new    String[arguments.size()    ]);    	non-compiled	[CE]  variable  arguments  is  already  defined  in  method  flatten(Options,String[],boolean)	50	None	replace
405	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]    ComparisonFailure    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  String  arg  =  arguments[i].trim().substring(0,  i).trim();  [BUGGY]        if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	add	String  arg  =  arguments[i].trim().substring(0,  i).trim();	  String    arg    =    arguments[i].trim().trim();    	compilable	  [FE]  StringIndexOutOfBoundsException  	24	14	replace
406	[BUG]  [BUGGY]  String  arg  =  arguments[i].trim().substring(0,  i).trim();  [FE]  StringIndexOutOfBoundsException  [FE]    ComparisonFailure    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  String  arg  =  arguments[i].trim().substring(0,  i).trim();  [BUGGY]        if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String  arg  =  arguments[i].trim().substring(0,  i).trim();	  String    arg    =    arguments[i].trim().trim();    	compilable	  [FE]  StringIndexOutOfBoundsException  	24	14	replace
407	[BUG]  [BUGGY]  String  arg  =  arguments[i].trim().trim();  String  arg  =  arguments[i].trim().trim()  [CE]  ';'  expected  [FE]    ComparisonFailure    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  String  arg  =  arguments[i].trim().trim();  String  arg  =  arguments[i].trim().trim()  [BUGGY]        if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String    arg    =    arguments[i].trim().trim();    String  arg  =  arguments[i].trim().trim()	  	non-compiled	[CE]  ';'  expected	23	None	add
408	[BUG]  [BUGGY]  [FE]  UnrecognizedOptionException  [FE]    UnrecognizedOptionException    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]          tokens.add(     "-     ");    tokens.add(   ".-     ");  tokens.add( "-   ");  [BUGGY]      String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	add	                tokens.add(       "-       ");        tokens.add(   ".-       ");    tokens.add( "-   ");	  	compilable	  [FE]  UnrecognizedOptionException  	46	13	add
409	[BUG]  [BUGGY]          tokens.add(     "-     ");    tokens.add(   ".-     ");  tokens.add( "-   ");  [FE]  UnrecognizedOptionException  [FE]    UnrecognizedOptionException    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]          tokens.add(     "-     ");    tokens.add(   ".-     ");  tokens.add( "-   ");  [BUGGY]      String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	                tokens.add(       "-       ");        tokens.add(   ".-       ");    tokens.add( "-   ");	  	compilable	  [FE]  UnrecognizedOptionException  	46	13	add
410	[BUG]  [BUGGY]  String[]  arguments[]  =(String[])options.toArray(new  String[arguments[i  +  11]);  [CE]  ']'  expected  [FE]              ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  String[]  arguments[]  =(String[])options.toArray(new  String[arguments[i  +  11]);  [BUGGY]      String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String[]  arguments[]  =(String[])options.toArray(new  String[arguments[i  +  11]);	  String[]    arguments[]    =(String[])options.toArray(new    String[arguments[i    +    1]);    	non-compiled	[CE]  ']'  expected	117	None	replace
411	[BUG]  [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(arrays.size()  -  1);  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(arrays.size()  -  1);  [BUGGY]      String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	TokenBuffer  tokens  =  new  TokenBuffer(arrays.size()  -  1);	  TokenBuffer    tokens    =    new    TokenBuffer(tokens.size()    -    1);    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
412	[BUG]  [BUGGY]  String[]  arguments  =  options.get(i)-  1;  [CE]  variable  arguments  is  already  defined  in  method  flatten(Options,String[],boolean)  [FE]                ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  String[]  arguments  =  options.get(i)-  1;  [BUGGY]      String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String[]  arguments  =  options.get(i)-  1;	  String[]    arguments    =    options.get(i)+    1;    	non-compiled	[CE]  variable  arguments  is  already  defined  in  method  flatten(Options,String[],boolean)	73	None	replace
413	[BUG]  [BUGGY]  String[]  arguments  =  options.toArray(new  String[args[i]);  [CE]  ']'  expected  [FE]              ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  String[]  arguments  =  options.toArray(new  String[args[i]);  [BUGGY]      String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	String[]  arguments  =  options.toArray(new  String[args[i]);	  String[]    arguments    =    options.toArray(new    String[0]);    	non-compiled	[CE]  ']'  expected	85	None	replace
414	[BUG]  [BUGGY]  tokens.add( "-- ".equals(arguments[i]));  [CE]  cannot  find  symbol  arg  [FE]        AssertionFailedError      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  tokens.add( "-- ".equals(arguments[i]));  [BUGGY]      String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	tokens.add( "-- ".equals(arguments[i]));	  tokens.add(   "--   ");    	non-compiled	[CE]  cannot  find  symbol  arg	86	None	replace
415	[BUG]  [BUGGY]  tokens.add(i);  [CE]  cannot  find  symbol  arg  [FE]          AssertionFailedError      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {      [BUGGY]  tokens.add(i);  [BUGGY]      String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	60	60	3	replace	tokens.add(i);	  tokens.add(   "--   ");    	non-compiled	[CE]  cannot  find  symbol  arg	86	None	replace
