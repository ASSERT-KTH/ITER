bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  else  if(!stopAtNonOption.equals(arg)&&!stopAtNonOption)  {  [CE]  boolean  cannot  be  dereferenced  [FE]    AssertionFailedError    [CONTEXT]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }      [BUGGY]  else  if(!stopAtNonOption.equals(arg)&&!stopAtNonOption)  {  [BUGGY]      {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  String  opt  =  Util.stripLeadingHyphens(arg);  if  (options.hasOption(opt))  {  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	67	68	3	replace	else  if(!stopAtNonOption.equals(arg)&&!stopAtNonOption)  {	  else    if(!   "-   ".equals(arg)&&!stopAtNonOption)    {    	non-compiled	[CE]  boolean  cannot  be  dereferenced	5	None	replace
2	[BUG]  [BUGGY]  fortunately,  stopAtNonOption)  {  for(int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if(!eatTheRest)  {  tokens.add( "  [CE]  not  a  statement  [FE]                      ComparisonFailure      [CONTEXT]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }      [BUGGY]  fortunately,  stopAtNonOption)  {  for(int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if(!eatTheRest)  {  tokens.add( "  [BUGGY]      else  if  (     "-     ".equals(arg))    {  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  String  opt  =  Util.stripLeadingHyphens(arg);  if  (options.hasOption(opt))  {  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	67	68	3	replace	fortunately,  stopAtNonOption)  {  for(int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if(!eatTheRest)  {  tokens.add( "	  fortunately,    stopAtNonOption)    {    for(int    i    =    0;    i    <    arguments.length;    i++)    {    String    arg    =    arguments[i];    if(!eatTheRest)    {    tokens.add(   "-    	non-compiled	[CE]  not  a  statement	102	None	replace
3	[BUG]  [BUGGY]  else  if('-'.equals(arg)&&!stopAtNonOption)  {  [CE]  char  cannot  be  dereferenced  [FE]        ComparisonFailure      [CONTEXT]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }      [BUGGY]  else  if('-'.equals(arg)&&!stopAtNonOption)  {  [BUGGY]      {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  String  opt  =  Util.stripLeadingHyphens(arg);  if  (options.hasOption(opt))  {  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	67	68	3	replace	else  if('-'.equals(arg)&&!stopAtNonOption)  {	  else    if(       "-       ".equals(arg)&&!stopAtNonOption)    {    else    if('-       ".equals(arg)&&!stopAtNonOption)    {    	non-compiled	[CE]  char  cannot  be  dereferenced	87	None	replace
4	[BUG]  [BUGGY]  tokens.add( "--  stopAtNonOption ");  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }      [BUGGY]  tokens.add( "--  stopAtNonOption ");  [BUGGY]      else  if  (     "-     ".equals(arg))    {  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  String  opt  =  Util.stripLeadingHyphens(arg);  if  (options.hasOption(opt))  {  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	67	68	3	replace	tokens.add( "--  stopAtNonOption ");	  tokens.add(   "--    eatTheRest   ");    	non-compiled	[CE]  	66	None	replace
5	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }      [BUGGY]  else  if(! "- ".equals(arg)||!stopAtNonOption)  {  [BUGGY]      {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  String  opt  =  Util.stripLeadingHyphens(arg);  if  (options.hasOption(opt))  {  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	67	68	3	add	else  if(! "- ".equals(arg)||!stopAtNonOption)  {	  else    if(       "-       ".equals(arg)||!stopAtNonOption)    {    else    if(!   "-       ".equals(arg)||!stopAtNonOption)    {    	compilable	  [FE]  AssertionFailedError  	11	14	replace
6	[BUG]  [BUGGY]  else  if(! "- ".equals(arg)||!stopAtNonOption)  {  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }      [BUGGY]  else  if(! "- ".equals(arg)||!stopAtNonOption)  {  [BUGGY]      {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  String  opt  =  Util.stripLeadingHyphens(arg);  if  (options.hasOption(opt))  {  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	67	68	3	replace	else  if(! "- ".equals(arg)||!stopAtNonOption)  {	  else    if(       "-       ".equals(arg)||!stopAtNonOption)    {    else    if(!   "-       ".equals(arg)||!stopAtNonOption)    {    	compilable	  [FE]  AssertionFailedError  	11	14	replace
7	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]        StringIndexOutOfBoundsException      [CONTEXT]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }      [BUGGY]  else  if(arg.startsWith( "-   "))  {  [BUGGY]      {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  String  opt  =  Util.stripLeadingHyphens(arg);  if  (options.hasOption(opt))  {  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	67	68	3	add	else  if(arg.startsWith( "-   "))  {	  else    if(       "--       ".equals(arg))    {    else    if(   "--       ".equals(arg))    {    	compilable	  [FE]  StringIndexOutOfBoundsException  	52	4	replace
8	[BUG]  [BUGGY]  else  if(arg.startsWith( "-   "))  {  [FE]  StringIndexOutOfBoundsException  [FE]        StringIndexOutOfBoundsException      [CONTEXT]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }      [BUGGY]  else  if(arg.startsWith( "-   "))  {  [BUGGY]      {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  String  opt  =  Util.stripLeadingHyphens(arg);  if  (options.hasOption(opt))  {  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	67	68	3	replace	else  if(arg.startsWith( "-   "))  {	  else    if(       "--       ".equals(arg))    {    else    if(   "--       ".equals(arg))    {    	compilable	  [FE]  StringIndexOutOfBoundsException  	52	4	replace
9	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }      [BUGGY]  else  if( "--   ".equals(arg)&&  stopAtNonOption)  {  [BUGGY]      {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  String  opt  =  Util.stripLeadingHyphens(arg);  if  (options.hasOption(opt))  {  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	67	68	3	add	else  if( "--   ".equals(arg)&&  stopAtNonOption)  {	  else    if(   "--       ".equals(arg)&&!eatTheRest)    {    	compilable	  [FE]  StringIndexOutOfBoundsException  	100	4	replace
10	[BUG]  [BUGGY]  else  if( "--   ".equals(arg)&&  stopAtNonOption)  {  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }      [BUGGY]  else  if( "--   ".equals(arg)&&  stopAtNonOption)  {  [BUGGY]      {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  String  opt  =  Util.stripLeadingHyphens(arg);  if  (options.hasOption(opt))  {  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	67	68	3	replace	else  if( "--   ".equals(arg)&&  stopAtNonOption)  {	  else    if(   "--       ".equals(arg)&&!eatTheRest)    {    	compilable	  [FE]  StringIndexOutOfBoundsException  	100	4	replace
11	[BUG]  [BUGGY]  ||  stopAtNonOption)  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }      [BUGGY]  ||  stopAtNonOption)  {  [BUGGY]      else  if  (     "-     ".equals(arg))    {  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  String  opt  =  Util.stripLeadingHyphens(arg);  if  (options.hasOption(opt))  {  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	67	68	3	replace	||  stopAtNonOption)  {	  if(stopAtNonOption)    {    for(int    i    =    0;    i    <    arguments.length;    i++)    {    String    arg    =    arguments[i];    if(!       "-       ".equals(arg))    {    tokens.add(    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
12	[BUG]  [BUGGY]  ||  stopAtNonOption)  {  for(int  i  =  0;  i  <  arguments.length;  i++)  {  tokens.add(  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }      [BUGGY]  ||  stopAtNonOption)  {  for(int  i  =  0;  i  <  arguments.length;  i++)  {  tokens.add(  [BUGGY]      else  if  (     "-     ".equals(arg))    {  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  String  opt  =  Util.stripLeadingHyphens(arg);  if  (options.hasOption(opt))  {  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	67	68	3	replace	||  stopAtNonOption)  {  for(int  i  =  0;  i  <  arguments.length;  i++)  {  tokens.add(	  if(stopAtNonOption)    {    for(int    i    =    0;    i    <    arguments.length;    i++)    {    String    arg    =    arguments[i];    if(!       "-       ".equals(arg))    {    tokens.add(    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
13	[BUG]  [BUGGY]  ||  stopAtNonOption)  {  tokens.add(  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }      [BUGGY]  ||  stopAtNonOption)  {  tokens.add(  [BUGGY]      else  if  (     "-     ".equals(arg))    {  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  String  opt  =  Util.stripLeadingHyphens(arg);  if  (options.hasOption(opt))  {  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	67	68	3	replace	||  stopAtNonOption)  {  tokens.add(	  if(stopAtNonOption)    {    for(int    i    =    0;    i    <    arguments.length;    i++)    {    String    arg    =    arguments[i];    if(!       "-       ".equals(arg))    {    tokens.add(    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
14	[BUG]  [BUGGY]  ||  stopAtNonOption)  {  for(int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if(!   "- ".equals(arg))  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }      [BUGGY]  ||  stopAtNonOption)  {  for(int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if(!   "- ".equals(arg))  {  [BUGGY]      else  if  (     "-     ".equals(arg))    {  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  String  opt  =  Util.stripLeadingHyphens(arg);  if  (options.hasOption(opt))  {  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	67	68	3	replace	||  stopAtNonOption)  {  for(int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if(!   "- ".equals(arg))  {	  if(stopAtNonOption)    {    for(int    i    =    0;    i    <    arguments.length;    i++)    {    String    arg    =    arguments[i];    if(!       "-       ".equals(arg))    {    tokens.add(    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
15	[BUG]  [BUGGY]  while(stopAtNonOption  &&  options.hasOption(arg))  {  tokens.add( "-   ");  }  [CE]  [FE]        AssertionFailedError      [CONTEXT]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }      [BUGGY]  while(stopAtNonOption  &&  options.hasOption(arg))  {  tokens.add( "-   ");  }  [BUGGY]      else  if  (     "-     ".equals(arg))    {  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  String  opt  =  Util.stripLeadingHyphens(arg);  if  (options.hasOption(opt))  {  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	67	68	3	replace	while(stopAtNonOption  &&  options.hasOption(arg))  {  tokens.add( "-   ");  }	  While(stopAtNonOption)    {    tokens.add(   "-   ");    }    	non-compiled	[CE]  	37	None	replace
16	[BUG]  [BUGGY]  while(stopAtNonOption  &&  arguments[i]!=  null)  {  tokens.add( "- ");  }  [CE]  [FE]          AssertionFailedError      [CONTEXT]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }      [BUGGY]  while(stopAtNonOption  &&  arguments[i]!=  null)  {  tokens.add( "- ");  }  [BUGGY]      else  if  (     "-     ".equals(arg))    {  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  String  opt  =  Util.stripLeadingHyphens(arg);  if  (options.hasOption(opt))  {  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	67	68	3	replace	while(stopAtNonOption  &&  arguments[i]!=  null)  {  tokens.add( "- ");  }	  While(stopAtNonOption)    {    tokens.add(   "-   ");    }    	non-compiled	[CE]  	37	None	replace
17	[BUG]  [BUGGY]  else  if(   "--     ".equals(arg)||  stopAtNonOption)  {  else  if( "--   ".equals(arg)||  stopAtNonOption)  {  [CE]  [FE]    AssertionFailedError    [CONTEXT]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }      [BUGGY]  else  if(   "--     ".equals(arg)||  stopAtNonOption)  {  else  if( "--   ".equals(arg)||  stopAtNonOption)  {  [BUGGY]      {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  String  opt  =  Util.stripLeadingHyphens(arg);  if  (options.hasOption(opt))  {  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	67	68	3	replace	else    if(   "--       ".equals(arg)||    stopAtNonOption)    {    else  if( "--   ".equals(arg)||  stopAtNonOption)  {	  	non-compiled	[CE]  	77	None	add
18	[BUG]  [BUGGY]  else  if(   "--     ".equals(arg)||  stopAtNonOption)  {  else  if( ".--   ".equals(arg)||  stopAtNonOption)  {  [CE]  [FE]      AssertionFailedError    [CONTEXT]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }      [BUGGY]  else  if(   "--     ".equals(arg)||  stopAtNonOption)  {  else  if( ".--   ".equals(arg)||  stopAtNonOption)  {  [BUGGY]      {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  String  opt  =  Util.stripLeadingHyphens(arg);  if  (options.hasOption(opt))  {  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	67	68	3	replace	else    if(   "--       ".equals(arg)||    stopAtNonOption)    {    else  if( ".--   ".equals(arg)||  stopAtNonOption)  {	  	non-compiled	[CE]  	77	None	add
19	[BUG]  [BUGGY]  else  if(   "--     ".equals(arg)||  stopAtNonOption)  {  else  if(! "--   ".equals(arg)||  stopAtNonOption)  {  [CE]  [FE]        AssertionFailedError    [CONTEXT]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }      [BUGGY]  else  if(   "--     ".equals(arg)||  stopAtNonOption)  {  else  if(! "--   ".equals(arg)||  stopAtNonOption)  {  [BUGGY]      {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  String  opt  =  Util.stripLeadingHyphens(arg);  if  (options.hasOption(opt))  {  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	67	68	3	replace	else    if(   "--       ".equals(arg)||    stopAtNonOption)    {    else  if(! "--   ".equals(arg)||  stopAtNonOption)  {	  	non-compiled	[CE]  	77	None	add
20	[BUG]  [BUGGY]  else  if(   "--     ".equals(arg)||  stopAtNonOption)  {  else  if('--   ".equals(arg)||  stopAtNonOption)  {  [CE]  [FE]          AssertionFailedError    [CONTEXT]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }      [BUGGY]  else  if(   "--     ".equals(arg)||  stopAtNonOption)  {  else  if('--   ".equals(arg)||  stopAtNonOption)  {  [BUGGY]      {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  String  opt  =  Util.stripLeadingHyphens(arg);  if  (options.hasOption(opt))  {  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	67	68	3	replace	else    if(   "--       ".equals(arg)||    stopAtNonOption)    {    else  if('--   ".equals(arg)||  stopAtNonOption)  {	  	non-compiled	[CE]  	77	None	add
21	[BUG]  [BUGGY]  ||  stopAtNonOption)  {  for(int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if(!   "-   ".equals(arg))  {  eatTheRest  =  true;  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }      [BUGGY]  ||  stopAtNonOption)  {  for(int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if(!   "-   ".equals(arg))  {  eatTheRest  =  true;  [BUGGY]      else  if  (     "-     ".equals(arg))    {  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  String  opt  =  Util.stripLeadingHyphens(arg);  if  (options.hasOption(opt))  {  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	67	68	3	replace	||  stopAtNonOption)  {  for(int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if(!   "-   ".equals(arg))  {  eatTheRest  =  true;	  if(stopAtNonOption)    {    for(int    i    =    0;    i    <    arguments.length;    i++)    {    String    arg    =    arguments[i];    if(!       "-       ".equals(arg))    {    eatTheRest    =    true;    tokens.add    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
22	[BUG]  [BUGGY]  ||  stopAtNonOption)  {  for(int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if(!   "-   ".equals(arg))  {  eatTheR  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }      [BUGGY]  ||  stopAtNonOption)  {  for(int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if(!   "-   ".equals(arg))  {  eatTheR  [BUGGY]      else  if  (     "-     ".equals(arg))    {  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  String  opt  =  Util.stripLeadingHyphens(arg);  if  (options.hasOption(opt))  {  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	67	68	3	replace	||  stopAtNonOption)  {  for(int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if(!   "-   ".equals(arg))  {  eatTheR	  if(stopAtNonOption)    {    for(int    i    =    0;    i    <    arguments.length;    i++)    {    String    arg    =    arguments[i];    if(!       "-       ".equals(arg))    {    eatTheRest    =    true;    tokens.add    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
23	[BUG]  [BUGGY]  else  if(   "stopAtNonOption     ".equals(arg))  {  else  if( "stopAtNonOption   ".equals(arg))  {  [CE]  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }      [BUGGY]  else  if(   "stopAtNonOption     ".equals(arg))  {  else  if( "stopAtNonOption   ".equals(arg))  {  [BUGGY]      {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  String  opt  =  Util.stripLeadingHyphens(arg);  if  (options.hasOption(opt))  {  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	67	68	3	replace	else    if(   "stopAtNonOption       ".equals(arg))    {    else  if( "stopAtNonOption   ".equals(arg))  {	  	non-compiled	[CE]  	17	None	add
24	[BUG]  [BUGGY]  else  if(   "stopAtNonOption     ".equals(arg))  {  else  if(! "stopAtNonOption   ".equals(arg))  {  [CE]  [FE]      StringIndexOutOfBoundsException    [CONTEXT]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }      [BUGGY]  else  if(   "stopAtNonOption     ".equals(arg))  {  else  if(! "stopAtNonOption   ".equals(arg))  {  [BUGGY]      {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  String  opt  =  Util.stripLeadingHyphens(arg);  if  (options.hasOption(opt))  {  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	67	68	3	replace	else    if(   "stopAtNonOption       ".equals(arg))    {    else  if(! "stopAtNonOption   ".equals(arg))  {	  	non-compiled	[CE]  	17	None	add
25	[BUG]  [BUGGY]  else  if(   "stopAtNonOption     ".equals(arg))  {  else  if( ".stopAtNonOption   ".equals(arg))  {  [CE]  [FE]        StringIndexOutOfBoundsException    [CONTEXT]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }      [BUGGY]  else  if(   "stopAtNonOption     ".equals(arg))  {  else  if( ".stopAtNonOption   ".equals(arg))  {  [BUGGY]      {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  String  opt  =  Util.stripLeadingHyphens(arg);  if  (options.hasOption(opt))  {  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	67	68	3	replace	else    if(   "stopAtNonOption       ".equals(arg))    {    else  if( ".stopAtNonOption   ".equals(arg))  {	  	non-compiled	[CE]  	17	None	add
26	[BUG]  [BUGGY]  else  if(   "stopAtNonOption     ".equals(arg))  {  tokens.add( "stopAtNonOption   ".equals(arg));  [CE]  [FE]          StringIndexOutOfBoundsException    [CONTEXT]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }      [BUGGY]  else  if(   "stopAtNonOption     ".equals(arg))  {  tokens.add( "stopAtNonOption   ".equals(arg));  [BUGGY]      {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  String  opt  =  Util.stripLeadingHyphens(arg);  if  (options.hasOption(opt))  {  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	67	68	3	replace	else    if(   "stopAtNonOption       ".equals(arg))    {    tokens.add( "stopAtNonOption   ".equals(arg));	  	non-compiled	[CE]  	17	None	add
27	[BUG]  [BUGGY]  Option  option  =  options.getOption(opt);  [CE]  [FE]              ComparisonFailure      [CONTEXT]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }      [BUGGY]  Option  option  =  options.getOption(opt);  [BUGGY]      else  if  (     "-     ".equals(arg))    {  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  String  opt  =  Util.stripLeadingHyphens(arg);  if  (options.hasOption(opt))  {  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	67	68	3	replace	Option  option  =  options.getOption(opt);	  if(!eatTheRest)    {    for(int    i    =    0;    i    <    arguments.length;    i++)    {    String    arg    =    arguments[i];    if(!       "-       ".equals(arg))    {    tokens.add(   "-       ");    }    	non-compiled	[CE]  	96	None	replace
28	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]    AssertionFailedError    [CONTEXT]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }      [BUGGY]  else  if( ".-   ".equals(arg)&&  stopAtNonOption)  {  [BUGGY]      {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  String  opt  =  Util.stripLeadingHyphens(arg);  if  (options.hasOption(opt))  {  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	67	68	3	add	else  if( ".-   ".equals(arg)&&  stopAtNonOption)  {	  else    if(   ".-   ".equals(arg)||    stopAtNonOption)    {    	compilable	  [FE]  StringIndexOutOfBoundsException  	24	4	replace
29	[BUG]  [BUGGY]  else  if( ".-   ".equals(arg)&&  stopAtNonOption)  {  [FE]  StringIndexOutOfBoundsException  [FE]    AssertionFailedError    [CONTEXT]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }      [BUGGY]  else  if( ".-   ".equals(arg)&&  stopAtNonOption)  {  [BUGGY]      {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  String  opt  =  Util.stripLeadingHyphens(arg);  if  (options.hasOption(opt))  {  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	67	68	3	replace	else  if( ".-   ".equals(arg)&&  stopAtNonOption)  {	  else    if(   ".-   ".equals(arg)||    stopAtNonOption)    {    	compilable	  [FE]  StringIndexOutOfBoundsException  	24	4	replace
30	[BUG]  [BUGGY]  Option  options  =  options.getOption(arg);  [CE]  [FE]        AssertionFailedError      [CONTEXT]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }      [BUGGY]  Option  options  =  options.getOption(arg);  [BUGGY]      else  if  (     "-     ".equals(arg))    {  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  String  opt  =  Util.stripLeadingHyphens(arg);  if  (options.hasOption(opt))  {  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	67	68	3	replace	Option  options  =  options.getOption(arg);	  Option    options    =    options.getOption(opt);    	non-compiled	[CE]  	72	None	replace
31	[BUG]  [BUGGY]  options  =  options.getOption(arg);  [CE]  [FE]          AssertionFailedError      [CONTEXT]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }      [BUGGY]  options  =  options.getOption(arg);  [BUGGY]      else  if  (     "-     ".equals(arg))    {  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  String  opt  =  Util.stripLeadingHyphens(arg);  if  (options.hasOption(opt))  {  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	67	68	3	replace	options  =  options.getOption(arg);	  Option    options    =    options.getOption(opt);    	non-compiled	[CE]  	72	None	replace
32	[BUG]  [BUGGY]  Options  options  =  options.getOption(arg);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }      [BUGGY]  Options  options  =  options.getOption(arg);  [BUGGY]      else  if  (     "-     ".equals(arg))    {  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  String  opt  =  Util.stripLeadingHyphens(arg);  if  (options.hasOption(opt))  {  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	67	68	3	replace	Options  options  =  options.getOption(arg);	  Option    options    =    options.getOption(opt);    	non-compiled	[CE]  	72	None	replace
33	[BUG]  [BUGGY]  Option  options  =  options.getOption(option);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }      [BUGGY]  Option  options  =  options.getOption(option);  [BUGGY]      else  if  (     "-     ".equals(arg))    {  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  String  opt  =  Util.stripLeadingHyphens(arg);  if  (options.hasOption(opt))  {  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	67	68	3	replace	Option  options  =  options.getOption(option);	  Option    options    =    options.getOption(opt);    	non-compiled	[CE]  	72	None	replace
34	[BUG]  [BUGGY]  if(stopAtNonOption)  {  for(int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if(arg.startsWith( "-   "))  {  tokens.add( "-  }  [CE]  unclosed  string  literal  [FE]                    ComparisonFailure      [CONTEXT]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }      [BUGGY]  if(stopAtNonOption)  {  for(int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if(arg.startsWith( "-   "))  {  tokens.add( "-  }  [BUGGY]      else  if  (     "-     ".equals(arg))    {  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  String  opt  =  Util.stripLeadingHyphens(arg);  if  (options.hasOption(opt))  {  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	67	68	3	replace	if(stopAtNonOption)  {  for(int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if(arg.startsWith( "-   "))  {  tokens.add( "-  }	  if(stopAtNonOption)    {    for(int    i    =    0;    i    <    arguments.length;    i++)    {    String    arg    =    arguments[i];    if(arg.startsWith(   "-       "))    {    tokens.add(   "-    	non-compiled	[CE]  unclosed  string  literal	47	None	replace
35	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]    AssertionFailedError    [CONTEXT]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }      [BUGGY]  else  if( "-   ".equals(arg)&&  stopAtNonOption)  {  [BUGGY]      {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  String  opt  =  Util.stripLeadingHyphens(arg);  if  (options.hasOption(opt))  {  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	67	68	3	add	else  if( "-   ".equals(arg)&&  stopAtNonOption)  {	  else    if(   "-       ".equals(arg)||    stopAtNonOption)    {    	compilable	  [FE]  StringIndexOutOfBoundsException  	20	4	replace
36	[BUG]  [BUGGY]  else  if( "-   ".equals(arg)&&  stopAtNonOption)  {  [FE]  StringIndexOutOfBoundsException  [FE]    AssertionFailedError    [CONTEXT]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }      [BUGGY]  else  if( "-   ".equals(arg)&&  stopAtNonOption)  {  [BUGGY]      {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  String  opt  =  Util.stripLeadingHyphens(arg);  if  (options.hasOption(opt))  {  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	67	68	3	replace	else  if( "-   ".equals(arg)&&  stopAtNonOption)  {	  else    if(   "-       ".equals(arg)||    stopAtNonOption)    {    	compilable	  [FE]  StringIndexOutOfBoundsException  	20	4	replace
37	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }      [BUGGY]  else  if(! "- ".equals(arg)||  stopAtNonOption)  {  [BUGGY]      {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  String  opt  =  Util.stripLeadingHyphens(arg);  if  (options.hasOption(opt))  {  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	67	68	3	add	else  if(! "- ".equals(arg)||  stopAtNonOption)  {	  else    if(   "-       ".equals(arg)||    stopAtNonOption)    {    	compilable	  [FE]  AssertionFailedError  	20	14	replace
38	[BUG]  [BUGGY]  else  if(! "- ".equals(arg)||  stopAtNonOption)  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }      [BUGGY]  else  if(! "- ".equals(arg)||  stopAtNonOption)  {  [BUGGY]      {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  String  opt  =  Util.stripLeadingHyphens(arg);  if  (options.hasOption(opt))  {  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	67	68	3	replace	else  if(! "- ".equals(arg)||  stopAtNonOption)  {	  else    if(   "-       ".equals(arg)||    stopAtNonOption)    {    	compilable	  [FE]  AssertionFailedError  	20	14	replace
39	[BUG]  [BUGGY]  ||  stopAtNonOption)  {  for(int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if(arg.startsWith( "-   "))  {  tokens.add(  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }      [BUGGY]  ||  stopAtNonOption)  {  for(int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if(arg.startsWith( "-   "))  {  tokens.add(  [BUGGY]      else  if  (     "-     ".equals(arg))    {  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  String  opt  =  Util.stripLeadingHyphens(arg);  if  (options.hasOption(opt))  {  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	67	68	3	replace	||  stopAtNonOption)  {  for(int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if(arg.startsWith( "-   "))  {  tokens.add(	  if(stopAtNonOption)    {    for(int    i    =    0;    i    <    arguments.length;    i++)    {    String    arg    =    arguments[i];    if(arg.startsWith(   "-       "))    {    tokens.add(   "-       ");    }    }    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
40	[BUG]  [BUGGY]  ||  stopAtNonOption)  {  for(int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if(arg.startsWith( "-   "))  {  tokens  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }      [BUGGY]  ||  stopAtNonOption)  {  for(int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if(arg.startsWith( "-   "))  {  tokens  [BUGGY]      else  if  (     "-     ".equals(arg))    {  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  String  opt  =  Util.stripLeadingHyphens(arg);  if  (options.hasOption(opt))  {  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	67	68	3	replace	||  stopAtNonOption)  {  for(int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if(arg.startsWith( "-   "))  {  tokens	  if(stopAtNonOption)    {    for(int    i    =    0;    i    <    arguments.length;    i++)    {    String    arg    =    arguments[i];    if(arg.startsWith(   "-       "))    {    tokens.add(   "-       ");    }    }    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
41	[BUG]  [BUGGY]  ||  stopAtNonOption)  {  for(int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if(arg.startsWith( "-   "))  {  tokens.  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }      [BUGGY]  ||  stopAtNonOption)  {  for(int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if(arg.startsWith( "-   "))  {  tokens.  [BUGGY]      else  if  (     "-     ".equals(arg))    {  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  String  opt  =  Util.stripLeadingHyphens(arg);  if  (options.hasOption(opt))  {  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	67	68	3	replace	||  stopAtNonOption)  {  for(int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if(arg.startsWith( "-   "))  {  tokens.	  if(stopAtNonOption)    {    for(int    i    =    0;    i    <    arguments.length;    i++)    {    String    arg    =    arguments[i];    if(arg.startsWith(   "-       "))    {    tokens.add(   "-       ");    }    }    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
42	[BUG]  [BUGGY]  ||  stopAtNonOption)  {  for(int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if(arg.startsWith( "-   "))  {  tokens.add  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }      [BUGGY]  ||  stopAtNonOption)  {  for(int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if(arg.startsWith( "-   "))  {  tokens.add  [BUGGY]      else  if  (     "-     ".equals(arg))    {  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  String  opt  =  Util.stripLeadingHyphens(arg);  if  (options.hasOption(opt))  {  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	67	68	3	replace	||  stopAtNonOption)  {  for(int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if(arg.startsWith( "-   "))  {  tokens.add	  if(stopAtNonOption)    {    for(int    i    =    0;    i    <    arguments.length;    i++)    {    String    arg    =    arguments[i];    if(arg.startsWith(   "-       "))    {    tokens.add(   "-       ");    }    }    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
43	[BUG]  [BUGGY]  else  if( "- ".equals(arg)&&!   "stopAtNonOption)  {  [CE]  unclosed  string  literal  [FE]        ComparisonFailure      [CONTEXT]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }      [BUGGY]  else  if( "- ".equals(arg)&&!   "stopAtNonOption)  {  [BUGGY]      {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  String  opt  =  Util.stripLeadingHyphens(arg);  if  (options.hasOption(opt))  {  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	67	68	3	replace	else  if( "- ".equals(arg)&&!   "stopAtNonOption)  {	  else    if(       "-       ".equals(arg)&&!stopAtNonOption)    {    else    if(   "-       ".equals(arg)&&!   "stopAtNonOption)    {    	non-compiled	[CE]  unclosed  string  literal	70	None	replace
44	[BUG]  [BUGGY]  while(!stopAtNonOption  &&  arguments.length  >  0)  {  for(int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if('-'.equals(arg))  {  tokens.add(  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }      [BUGGY]  while(!stopAtNonOption  &&  arguments.length  >  0)  {  for(int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if('-'.equals(arg))  {  tokens.add(  [BUGGY]      else  if  (     "-     ".equals(arg))    {  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  String  opt  =  Util.stripLeadingHyphens(arg);  if  (options.hasOption(opt))  {  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	67	68	3	replace	while(!stopAtNonOption  &&  arguments.length  >  0)  {  for(int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if('-'.equals(arg))  {  tokens.add(	  while(!stopAtNonOption)    {    for(int    i    =    0;    i    <    arguments.length;    i++)    {    String    arg    =    arguments[i];    if('-'.equals(arg))    {    tokens.add(   "-       ");    }    	non-compiled	[CE]  	95	None	replace
45	[BUG]  [BUGGY]  while(!stopAtNonOption  &&  options.hasOption(opt))  {  for(int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if('-'.equals(arg))  {  tokens.add(  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }      [BUGGY]  while(!stopAtNonOption  &&  options.hasOption(opt))  {  for(int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if('-'.equals(arg))  {  tokens.add(  [BUGGY]      else  if  (     "-     ".equals(arg))    {  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  String  opt  =  Util.stripLeadingHyphens(arg);  if  (options.hasOption(opt))  {  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	67	68	3	replace	while(!stopAtNonOption  &&  options.hasOption(opt))  {  for(int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if('-'.equals(arg))  {  tokens.add(	  while(!stopAtNonOption)    {    for(int    i    =    0;    i    <    arguments.length;    i++)    {    String    arg    =    arguments[i];    if('-'.equals(arg))    {    tokens.add(   "-       ");    }    	non-compiled	[CE]  	95	None	replace
46	[BUG]  [BUGGY]  while(!stopAtNonOption  &&  options.hasOption(opt))  {  for(int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if('-'.equals(arg))  {  tokens.  [CE]  reached  end  of  file  while  parsing  [FE]                          ComparisonFailure      [CONTEXT]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }      [BUGGY]  while(!stopAtNonOption  &&  options.hasOption(opt))  {  for(int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if('-'.equals(arg))  {  tokens.  [BUGGY]      else  if  (     "-     ".equals(arg))    {  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  String  opt  =  Util.stripLeadingHyphens(arg);  if  (options.hasOption(opt))  {  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	67	68	3	replace	while(!stopAtNonOption  &&  options.hasOption(opt))  {  for(int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if('-'.equals(arg))  {  tokens.	  while(!stopAtNonOption)    {    for(int    i    =    0;    i    <    arguments.length;    i++)    {    String    arg    =    arguments[i];    if('-'.equals(arg))    {    tokens.add(   "-       ");    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	95	None	replace
47	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }      [BUGGY]  else  if(! "-- ".equals(arg)||  stopAtNonOption)  {  [BUGGY]      {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  String  opt  =  Util.stripLeadingHyphens(arg);  if  (options.hasOption(opt))  {  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	67	68	3	add	else  if(! "-- ".equals(arg)||  stopAtNonOption)  {	  else    if(   "--       ".equals(arg)||    stopAtNonOption)    {    	compilable	  [FE]  AssertionFailedError  	78	14	replace
48	[BUG]  [BUGGY]  else  if(! "-- ".equals(arg)||  stopAtNonOption)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }      [BUGGY]  else  if(! "-- ".equals(arg)||  stopAtNonOption)  {  [BUGGY]      {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  String  opt  =  Util.stripLeadingHyphens(arg);  if  (options.hasOption(opt))  {  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	67	68	3	replace	else  if(! "-- ".equals(arg)||  stopAtNonOption)  {	  else    if(   "--       ".equals(arg)||    stopAtNonOption)    {    	compilable	  [FE]  AssertionFailedError  	78	14	replace
49	[BUG]  [BUGGY]  ters.add(arguments[i]);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }      [BUGGY]  ters.add(arguments[i]);  [BUGGY]      else  if  (     "-     ".equals(arg))    {  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  String  opt  =  Util.stripLeadingHyphens(arg);  if  (options.hasOption(opt))  {  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	67	68	3	replace	ters.add(arguments[i]);	  if(stopAtNonOption)    {    for(int    i    =    0;    i    <    arguments.length;    i++)    {    String    arg    =    arguments[i];    if(arg.startsWith(   ".-   "))    {    tokens.add(   "-       ");    }    	non-compiled	[CE]  	48	None	replace
50	[BUG]  [BUGGY]  else  if('-'.equals(arg)||!stopAtNonOption)  {  [CE]  char  cannot  be  dereferenced  [FE]        AssertionFailedError      [CONTEXT]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }      [BUGGY]  else  if('-'.equals(arg)||!stopAtNonOption)  {  [BUGGY]      {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  String  opt  =  Util.stripLeadingHyphens(arg);  if  (options.hasOption(opt))  {  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	67	68	3	replace	else  if('-'.equals(arg)||!stopAtNonOption)  {	  else    if(       "-       ".equals(arg)||!stopAtNonOption)    {    else    if('-       ".equals(arg)||!stopAtNonOption)    {    	non-compiled	[CE]  char  cannot  be  dereferenced	68	None	replace
51	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }      [BUGGY]          if(stopAtNonOption)    {    tokens.add(     "-     ");    }    if(stopAtNonOption)  {  tokens.add(   "-     ");  }  if(stopAtNonOption)  {  tokens.add( "-   ");  }  if(stopAtNonOption)  {  tokens.add( "-   ");  }  [BUGGY]      else  if  (     "-     ".equals(arg))    {  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  String  opt  =  Util.stripLeadingHyphens(arg);  if  (options.hasOption(opt))  {  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	67	68	3	add	                if(stopAtNonOption)        {        tokens.add(       "-       ");        }        if(stopAtNonOption)    {    tokens.add(   "-       ");    }    if(stopAtNonOption)  {  tokens.add( "-   ");  }  if(stopAtNonOption)  {  tokens.add( "-   ");  }	  	compilable	  [FE]  AssertionFailedError  	40	6	add
52	[BUG]  [BUGGY]          if(stopAtNonOption)    {    tokens.add(     "-     ");    }    if(stopAtNonOption)  {  tokens.add(   "-     ");  }  if(stopAtNonOption)  {  tokens.add( "-   ");  }  if(stopAtNonOption)  {  tokens.add( "-   ");  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }      [BUGGY]          if(stopAtNonOption)    {    tokens.add(     "-     ");    }    if(stopAtNonOption)  {  tokens.add(   "-     ");  }  if(stopAtNonOption)  {  tokens.add( "-   ");  }  if(stopAtNonOption)  {  tokens.add( "-   ");  }  [BUGGY]      else  if  (     "-     ".equals(arg))    {  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  String  opt  =  Util.stripLeadingHyphens(arg);  if  (options.hasOption(opt))  {  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	67	68	3	replace	                if(stopAtNonOption)        {        tokens.add(       "-       ");        }        if(stopAtNonOption)    {    tokens.add(   "-       ");    }    if(stopAtNonOption)  {  tokens.add( "-   ");  }  if(stopAtNonOption)  {  tokens.add( "-   ");  }	  	compilable	  [FE]  AssertionFailedError  	40	6	add
53	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }      [BUGGY]          if(stopAtNonOption)    {    tokens.add(     "-     ");    }    if(stopAtNonOption)  {  tokens.add(   "-     ");  }  if(stopAtNonOption)  {  tokens.add( "-   ");  }  else  if(stopAtNonOption)  {  tokens.add( "-   ");  }  [BUGGY]      else  if  (     "-     ".equals(arg))    {  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  String  opt  =  Util.stripLeadingHyphens(arg);  if  (options.hasOption(opt))  {  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	67	68	3	add	                if(stopAtNonOption)        {        tokens.add(       "-       ");        }        if(stopAtNonOption)    {    tokens.add(   "-       ");    }    if(stopAtNonOption)  {  tokens.add( "-   ");  }  else  if(stopAtNonOption)  {  tokens.add( "-   ");  }	  	compilable	  [FE]  AssertionFailedError  	40	6	add
54	[BUG]  [BUGGY]          if(stopAtNonOption)    {    tokens.add(     "-     ");    }    if(stopAtNonOption)  {  tokens.add(   "-     ");  }  if(stopAtNonOption)  {  tokens.add( "-   ");  }  else  if(stopAtNonOption)  {  tokens.add( "-   ");  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }      [BUGGY]          if(stopAtNonOption)    {    tokens.add(     "-     ");    }    if(stopAtNonOption)  {  tokens.add(   "-     ");  }  if(stopAtNonOption)  {  tokens.add( "-   ");  }  else  if(stopAtNonOption)  {  tokens.add( "-   ");  }  [BUGGY]      else  if  (     "-     ".equals(arg))    {  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  String  opt  =  Util.stripLeadingHyphens(arg);  if  (options.hasOption(opt))  {  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	67	68	3	replace	                if(stopAtNonOption)        {        tokens.add(       "-       ");        }        if(stopAtNonOption)    {    tokens.add(   "-       ");    }    if(stopAtNonOption)  {  tokens.add( "-   ");  }  else  if(stopAtNonOption)  {  tokens.add( "-   ");  }	  	compilable	  [FE]  AssertionFailedError  	40	6	add
55	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }      [BUGGY]          if(stopAtNonOption)    {    tokens.add(     "-     ");    }    if(stopAtNonOption)  {  tokens.add(   "-     ");  }  if(stopAtNonOption)  {  tokens.add( "-   ");  }  [BUGGY]      else  if  (     "-     ".equals(arg))    {  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  String  opt  =  Util.stripLeadingHyphens(arg);  if  (options.hasOption(opt))  {  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	67	68	3	add	                if(stopAtNonOption)        {        tokens.add(       "-       ");        }        if(stopAtNonOption)    {    tokens.add(   "-       ");    }    if(stopAtNonOption)  {  tokens.add( "-   ");  }	  	compilable	  [FE]  AssertionFailedError  	40	6	add
56	[BUG]  [BUGGY]          if(stopAtNonOption)    {    tokens.add(     "-     ");    }    if(stopAtNonOption)  {  tokens.add(   "-     ");  }  if(stopAtNonOption)  {  tokens.add( "-   ");  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }      [BUGGY]          if(stopAtNonOption)    {    tokens.add(     "-     ");    }    if(stopAtNonOption)  {  tokens.add(   "-     ");  }  if(stopAtNonOption)  {  tokens.add( "-   ");  }  [BUGGY]      else  if  (     "-     ".equals(arg))    {  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  String  opt  =  Util.stripLeadingHyphens(arg);  if  (options.hasOption(opt))  {  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	67	68	3	replace	                if(stopAtNonOption)        {        tokens.add(       "-       ");        }        if(stopAtNonOption)    {    tokens.add(   "-       ");    }    if(stopAtNonOption)  {  tokens.add( "-   ");  }	  	compilable	  [FE]  AssertionFailedError  	40	6	add
57	[BUG]  [BUGGY]  tokens.add( "-   "  +  arg);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }      [BUGGY]  tokens.add( "-   "  +  arg);  [BUGGY]      else  if  (     "-     ".equals(arg))    {  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  String  opt  =  Util.stripLeadingHyphens(arg);  if  (options.hasOption(opt))  {  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	67	68	3	replace	tokens.add( "-   "  +  arg);	  tokens.add(   "--   "    +    arg);    	non-compiled	[CE]  	34	None	replace
58	[BUG]  [BUGGY]  tokens.add( "-- "  +  i);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }      [BUGGY]  tokens.add( "-- "  +  i);  [BUGGY]      else  if  (     "-     ".equals(arg))    {  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  String  opt  =  Util.stripLeadingHyphens(arg);  if  (options.hasOption(opt))  {  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	67	68	3	replace	tokens.add( "-- "  +  i);	  tokens.add(   "--   "    +    arg);    	non-compiled	[CE]  	34	None	replace
59	[BUG]  [BUGGY]  else  if(   "-     ".equals(arg)||!eatTheRest)  {  else  if(   "-   ".equals(arg)||!eatTheRest)  {  [CE]  [FE]    AssertionFailedError    [CONTEXT]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }      [BUGGY]  else  if(   "-     ".equals(arg)||!eatTheRest)  {  else  if(   "-   ".equals(arg)||!eatTheRest)  {  [BUGGY]      {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  String  opt  =  Util.stripLeadingHyphens(arg);  if  (options.hasOption(opt))  {  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	67	68	3	replace	else    if(   "-       ".equals(arg)||!eatTheRest)    {    else  if(   "-   ".equals(arg)||!eatTheRest)  {	  	non-compiled	[CE]  	2	None	add
60	[BUG]  [BUGGY]  else  if(   "-     ".equals(arg)||!eatTheRest)  {  else  if( ".-   ".equals(arg)||!eatTheRest)  {  [CE]  [FE]      AssertionFailedError    [CONTEXT]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }      [BUGGY]  else  if(   "-     ".equals(arg)||!eatTheRest)  {  else  if( ".-   ".equals(arg)||!eatTheRest)  {  [BUGGY]      {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  String  opt  =  Util.stripLeadingHyphens(arg);  if  (options.hasOption(opt))  {  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	67	68	3	replace	else    if(   "-       ".equals(arg)||!eatTheRest)    {    else  if( ".-   ".equals(arg)||!eatTheRest)  {	  	non-compiled	[CE]  	2	None	add
61	[BUG]  [BUGGY]  else  if(   "-     ".equals(arg)||!eatTheRest)  {  else  if(   "-   ".equals(arg)||!stopAtNonOption)  {  [CE]  [FE]        AssertionFailedError    [CONTEXT]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }      [BUGGY]  else  if(   "-     ".equals(arg)||!eatTheRest)  {  else  if(   "-   ".equals(arg)||!stopAtNonOption)  {  [BUGGY]      {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  String  opt  =  Util.stripLeadingHyphens(arg);  if  (options.hasOption(opt))  {  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	67	68	3	replace	else    if(   "-       ".equals(arg)||!eatTheRest)    {    else  if(   "-   ".equals(arg)||!stopAtNonOption)  {	  	non-compiled	[CE]  	2	None	add
62	[BUG]  [BUGGY]  else  if(   "-     ".equals(arg)||!eatTheRest)  {  else  if(! "-   ".equals(arg)||!eatTheRest)  {  [CE]  [FE]          AssertionFailedError    [CONTEXT]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }      [BUGGY]  else  if(   "-     ".equals(arg)||!eatTheRest)  {  else  if(! "-   ".equals(arg)||!eatTheRest)  {  [BUGGY]      {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  String  opt  =  Util.stripLeadingHyphens(arg);  if  (options.hasOption(opt))  {  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	67	68	3	replace	else    if(   "-       ".equals(arg)||!eatTheRest)    {    else  if(! "-   ".equals(arg)||!eatTheRest)  {	  	non-compiled	[CE]  	2	None	add
63	[BUG]  [BUGGY]  else  if(   "--     ".equals(arg)||!eatTheRest)  {  else  if(   "--   ".equals(arg)||!eatTheRest)  {  [CE]  [FE]    AssertionFailedError    [CONTEXT]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }      [BUGGY]  else  if(   "--     ".equals(arg)||!eatTheRest)  {  else  if(   "--   ".equals(arg)||!eatTheRest)  {  [BUGGY]      {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  String  opt  =  Util.stripLeadingHyphens(arg);  if  (options.hasOption(opt))  {  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	67	68	3	replace	else    if(   "--       ".equals(arg)||!eatTheRest)    {    else  if(   "--   ".equals(arg)||!eatTheRest)  {	  	non-compiled	[CE]  	97	None	add
64	[BUG]  [BUGGY]  else  if(   "--     ".equals(arg)||!eatTheRest)  {  else  if( ".--   ".equals(arg)||!eatTheRest)  {  [CE]  [FE]      AssertionFailedError    [CONTEXT]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }      [BUGGY]  else  if(   "--     ".equals(arg)||!eatTheRest)  {  else  if( ".--   ".equals(arg)||!eatTheRest)  {  [BUGGY]      {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  String  opt  =  Util.stripLeadingHyphens(arg);  if  (options.hasOption(opt))  {  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	67	68	3	replace	else    if(   "--       ".equals(arg)||!eatTheRest)    {    else  if( ".--   ".equals(arg)||!eatTheRest)  {	  	non-compiled	[CE]  	97	None	add
65	[BUG]  [BUGGY]  else  if(   "--     ".equals(arg)||!eatTheRest)  {  else  if(   "--   ".equals(arg)||!stopAtNonOption)  {  [CE]  [FE]        AssertionFailedError    [CONTEXT]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }      [BUGGY]  else  if(   "--     ".equals(arg)||!eatTheRest)  {  else  if(   "--   ".equals(arg)||!stopAtNonOption)  {  [BUGGY]      {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  String  opt  =  Util.stripLeadingHyphens(arg);  if  (options.hasOption(opt))  {  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	67	68	3	replace	else    if(   "--       ".equals(arg)||!eatTheRest)    {    else  if(   "--   ".equals(arg)||!stopAtNonOption)  {	  	non-compiled	[CE]  	97	None	add
66	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }      [BUGGY]  else  if( "stopAtNonOption ".equals(arg)||  stopAtNonOption)  {  [BUGGY]      {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  String  opt  =  Util.stripLeadingHyphens(arg);  if  (options.hasOption(opt))  {  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	67	68	3	add	else  if( "stopAtNonOption ".equals(arg)||  stopAtNonOption)  {	  else    if(   "stopAtNonOption       ".equals(arg))    {    	compilable	  [FE]  AssertionFailedError  	18	7	replace
67	[BUG]  [BUGGY]  else  if( "stopAtNonOption ".equals(arg)||  stopAtNonOption)  {  [FE]  AssertionFailedError  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }      [BUGGY]  else  if( "stopAtNonOption ".equals(arg)||  stopAtNonOption)  {  [BUGGY]      {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  String  opt  =  Util.stripLeadingHyphens(arg);  if  (options.hasOption(opt))  {  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	67	68	3	replace	else  if( "stopAtNonOption ".equals(arg)||  stopAtNonOption)  {	  else    if(   "stopAtNonOption       ".equals(arg))    {    	compilable	  [FE]  AssertionFailedError  	18	7	replace
68	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      StringIndexOutOfBoundsException    [CONTEXT]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }      [BUGGY]  else  if(! "stopAtNonOption ".equals(arg))  {  [BUGGY]      {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  String  opt  =  Util.stripLeadingHyphens(arg);  if  (options.hasOption(opt))  {  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	67	68	3	add	else  if(! "stopAtNonOption ".equals(arg))  {	  else    if(   "stopAtNonOption       ".equals(arg))    {    	compilable	  [FE]  AssertionFailedError  	18	14	replace
69	[BUG]  [BUGGY]  else  if(! "stopAtNonOption ".equals(arg))  {  [FE]  AssertionFailedError  [FE]      StringIndexOutOfBoundsException    [CONTEXT]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }      [BUGGY]  else  if(! "stopAtNonOption ".equals(arg))  {  [BUGGY]      {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  String  opt  =  Util.stripLeadingHyphens(arg);  if  (options.hasOption(opt))  {  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	67	68	3	replace	else  if(! "stopAtNonOption ".equals(arg))  {	  else    if(   "stopAtNonOption       ".equals(arg))    {    	compilable	  [FE]  AssertionFailedError  	18	14	replace
70	[BUG]  [BUGGY]  else  if(   "-eatTheRest   ".equals(arg))  {  else  if(   "-eatTheRest   ".equals(arg))  {  [CE]  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }      [BUGGY]  else  if(   "-eatTheRest   ".equals(arg))  {  else  if(   "-eatTheRest   ".equals(arg))  {  [BUGGY]      {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  String  opt  =  Util.stripLeadingHyphens(arg);  if  (options.hasOption(opt))  {  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	67	68	3	replace	else    if(   "-eatTheRest   ".equals(arg))    {    else  if(   "-eatTheRest   ".equals(arg))  {	  	non-compiled	[CE]  	81	None	add
71	[BUG]  [BUGGY]  else  if(   "-eatTheRest   ".equals(arg))  {  else  if(   "-eattheRest   ".equals(arg))  {  [CE]  [FE]      StringIndexOutOfBoundsException    [CONTEXT]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }      [BUGGY]  else  if(   "-eatTheRest   ".equals(arg))  {  else  if(   "-eattheRest   ".equals(arg))  {  [BUGGY]      {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  String  opt  =  Util.stripLeadingHyphens(arg);  if  (options.hasOption(opt))  {  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	67	68	3	replace	else    if(   "-eatTheRest   ".equals(arg))    {    else  if(   "-eattheRest   ".equals(arg))  {	  	non-compiled	[CE]  	81	None	add
72	[BUG]  [BUGGY]  while(stopAtNonOption  &&  options.hasOption(opt))  {  for(int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if(!   "-   ".equals(arg))  {  tokens.  [CE]  reached  end  of  file  while  parsing  [FE]                  ComparisonFailure      [CONTEXT]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }      [BUGGY]  while(stopAtNonOption  &&  options.hasOption(opt))  {  for(int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if(!   "-   ".equals(arg))  {  tokens.  [BUGGY]      else  if  (     "-     ".equals(arg))    {  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  String  opt  =  Util.stripLeadingHyphens(arg);  if  (options.hasOption(opt))  {  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	67	68	3	replace	while(stopAtNonOption  &&  options.hasOption(opt))  {  for(int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if(!   "-   ".equals(arg))  {  tokens.	  while(stopAtNonOption)    {    for(int    i    =    0;    i    <    arguments.length;    i++)    {    String    arg    =    arguments[i];    if(!       "-       ".equals(arg))    {    tokens.add(   "-       ");    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	73	None	replace
73	[BUG]  [BUGGY]  while(stopAtNonOption  &&  options.hasOption(opt))  {  for(int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if(!   "-   ".equals(arg))  {  tokens.add(  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }      [BUGGY]  while(stopAtNonOption  &&  options.hasOption(opt))  {  for(int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if(!   "-   ".equals(arg))  {  tokens.add(  [BUGGY]      else  if  (     "-     ".equals(arg))    {  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  String  opt  =  Util.stripLeadingHyphens(arg);  if  (options.hasOption(opt))  {  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	67	68	3	replace	while(stopAtNonOption  &&  options.hasOption(opt))  {  for(int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if(!   "-   ".equals(arg))  {  tokens.add(	  while(stopAtNonOption)    {    for(int    i    =    0;    i    <    arguments.length;    i++)    {    String    arg    =    arguments[i];    if(!       "-       ".equals(arg))    {    tokens.add(   "-       ");    }    	non-compiled	[CE]  	73	None	replace
74	[BUG]  [BUGGY]  While(stopAtNonOption)  {  for(int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if(!   "-   ".equals(arg))  {  tokens.add( "-   ");  }  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }      [BUGGY]  While(stopAtNonOption)  {  for(int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if(!   "-   ".equals(arg))  {  tokens.add( "-   ");  }  [BUGGY]      else  if  (     "-     ".equals(arg))    {  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  String  opt  =  Util.stripLeadingHyphens(arg);  if  (options.hasOption(opt))  {  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	67	68	3	replace	While(stopAtNonOption)  {  for(int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if(!   "-   ".equals(arg))  {  tokens.add( "-   ");  }	  while(stopAtNonOption)    {    for(int    i    =    0;    i    <    arguments.length;    i++)    {    String    arg    =    arguments[i];    if(!       "-       ".equals(arg))    {    tokens.add(   "-       ");    }    	non-compiled	[CE]  	73	None	replace
75	[BUG]  [BUGGY]  }  else  if(arg.startsWith( "- "))  {  tokens.add( "- ");  }  [CE]  [FE]                ComparisonFailure      [CONTEXT]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }      [BUGGY]  }  else  if(arg.startsWith( "- "))  {  tokens.add( "- ");  }  [BUGGY]      else  if  (     "-     ".equals(arg))    {  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  String  opt  =  Util.stripLeadingHyphens(arg);  if  (options.hasOption(opt))  {  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	67	68	3	replace	}  else  if(arg.startsWith( "- "))  {  tokens.add( "- ");  }	  }    else    {    tokens.add(   "-   ");    }    	non-compiled	[CE]  	92	None	replace
76	[BUG]  [BUGGY]  }  else  if(!stopAtNonOption)  {  tokens.add( "- ");  }  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }      [BUGGY]  }  else  if(!stopAtNonOption)  {  tokens.add( "- ");  }  [BUGGY]      else  if  (     "-     ".equals(arg))    {  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  String  opt  =  Util.stripLeadingHyphens(arg);  if  (options.hasOption(opt))  {  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	67	68	3	replace	}  else  if(!stopAtNonOption)  {  tokens.add( "- ");  }	  }    else    {    tokens.add(   "-   ");    }    	non-compiled	[CE]  	92	None	replace
77	[BUG]  [BUGGY]  else  if(!stopAtNonOption  &&   "eatTheRest   ".equals(arg))  {  else  if(!stopAtNonOption  &&   "eatTheRest   ".equals(arg))  {  [CE]  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }      [BUGGY]  else  if(!stopAtNonOption  &&   "eatTheRest   ".equals(arg))  {  else  if(!stopAtNonOption  &&   "eatTheRest   ".equals(arg))  {  [BUGGY]      {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  String  opt  =  Util.stripLeadingHyphens(arg);  if  (options.hasOption(opt))  {  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	67	68	3	replace	else    if(!stopAtNonOption    &&   "eatTheRest   ".equals(arg))    {    else  if(!stopAtNonOption  &&   "eatTheRest   ".equals(arg))  {	  	non-compiled	[CE]  	79	None	add
78	[BUG]  [BUGGY]  else  if(!stopAtNonOption  &&   "eatTheRest   ".equals(arg))  {  else  if(!stopAtNonOption  &&   "eattheRest   ".equals(arg))  {  [CE]  [FE]      StringIndexOutOfBoundsException    [CONTEXT]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }      [BUGGY]  else  if(!stopAtNonOption  &&   "eatTheRest   ".equals(arg))  {  else  if(!stopAtNonOption  &&   "eattheRest   ".equals(arg))  {  [BUGGY]      {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  String  opt  =  Util.stripLeadingHyphens(arg);  if  (options.hasOption(opt))  {  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	67	68	3	replace	else    if(!stopAtNonOption    &&   "eatTheRest   ".equals(arg))    {    else  if(!stopAtNonOption  &&   "eattheRest   ".equals(arg))  {	  	non-compiled	[CE]  	79	None	add
79	[BUG]  [BUGGY]  else  if(   ".-   ".equals(arg)&&!stopAtNonOption)  {  else  if(   ".-   ".equals(arg)&&!stopAtNonOption)  {  [CE]  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }      [BUGGY]  else  if(   ".-   ".equals(arg)&&!stopAtNonOption)  {  else  if(   ".-   ".equals(arg)&&!stopAtNonOption)  {  [BUGGY]      {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  String  opt  =  Util.stripLeadingHyphens(arg);  if  (options.hasOption(opt))  {  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	67	68	3	replace	else    if(   ".-   ".equals(arg)&&!stopAtNonOption)    {    else  if(   ".-   ".equals(arg)&&!stopAtNonOption)  {	  	non-compiled	[CE]  	89	None	add
80	[BUG]  [BUGGY]  else  if(   ".-   ".equals(arg)&&!stopAtNonOption)  {  else  if(! ".-   ".equals(arg)&&!stopAtNonOption)  {  [CE]  [FE]      StringIndexOutOfBoundsException    [CONTEXT]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }      [BUGGY]  else  if(   ".-   ".equals(arg)&&!stopAtNonOption)  {  else  if(! ".-   ".equals(arg)&&!stopAtNonOption)  {  [BUGGY]      {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  String  opt  =  Util.stripLeadingHyphens(arg);  if  (options.hasOption(opt))  {  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	67	68	3	replace	else    if(   ".-   ".equals(arg)&&!stopAtNonOption)    {    else  if(! ".-   ".equals(arg)&&!stopAtNonOption)  {	  	non-compiled	[CE]  	89	None	add
81	[BUG]  [BUGGY]  else  if(   ".-   ".equals(arg)&&!stopAtNonOption)  {  else  if(. ".-   ".equals(arg)&&!stopAtNonOption)  {  [CE]  [FE]        StringIndexOutOfBoundsException    [CONTEXT]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }      [BUGGY]  else  if(   ".-   ".equals(arg)&&!stopAtNonOption)  {  else  if(. ".-   ".equals(arg)&&!stopAtNonOption)  {  [BUGGY]      {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  String  opt  =  Util.stripLeadingHyphens(arg);  if  (options.hasOption(opt))  {  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	67	68	3	replace	else    if(   ".-   ".equals(arg)&&!stopAtNonOption)    {    else  if(. ".-   ".equals(arg)&&!stopAtNonOption)  {	  	non-compiled	[CE]  	89	None	add
82	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }      [BUGGY]  else  if( ".- ".equals(arg)||!stopAtNonOption)  {  [BUGGY]      {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  String  opt  =  Util.stripLeadingHyphens(arg);  if  (options.hasOption(opt))  {  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	67	68	3	add	else  if( ".- ".equals(arg)||!stopAtNonOption)  {	  else    if(       "-       ".equals(arg)||!stopAtNonOption)    {    else    if(   ".-       ".equals(arg)||!stopAtNonOption)    {    	compilable	  [FE]  AssertionFailedError  	10	13	replace
83	[BUG]  [BUGGY]  else  if( ".- ".equals(arg)||!stopAtNonOption)  {  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }      [BUGGY]  else  if( ".- ".equals(arg)||!stopAtNonOption)  {  [BUGGY]      {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  String  opt  =  Util.stripLeadingHyphens(arg);  if  (options.hasOption(opt))  {  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	67	68	3	replace	else  if( ".- ".equals(arg)||!stopAtNonOption)  {	  else    if(       "-       ".equals(arg)||!stopAtNonOption)    {    else    if(   ".-       ".equals(arg)||!stopAtNonOption)    {    	compilable	  [FE]  AssertionFailedError  	10	13	replace
84	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            ComparisonFailure      [CONTEXT]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }      [BUGGY]  else  if(! ".- ".equals(arg)||  stopAtNonOption)  {  [BUGGY]      {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  String  opt  =  Util.stripLeadingHyphens(arg);  if  (options.hasOption(opt))  {  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	67	68	3	add	else  if(! ".- ".equals(arg)||  stopAtNonOption)  {	  else    if(       "-       ".equals(arg)||    eatTheRest)    {    else    if(   ".-       ".equals(arg)||    eatTheRest)    {    	compilable	  [FE]  AssertionFailedError  	56	14	replace
85	[BUG]  [BUGGY]  else  if(! ".- ".equals(arg)||  stopAtNonOption)  {  [FE]  AssertionFailedError  [FE]            ComparisonFailure      [CONTEXT]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }      [BUGGY]  else  if(! ".- ".equals(arg)||  stopAtNonOption)  {  [BUGGY]      {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  String  opt  =  Util.stripLeadingHyphens(arg);  if  (options.hasOption(opt))  {  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	67	68	3	replace	else  if(! ".- ".equals(arg)||  stopAtNonOption)  {	  else    if(       "-       ".equals(arg)||    eatTheRest)    {    else    if(   ".-       ".equals(arg)||    eatTheRest)    {    	compilable	  [FE]  AssertionFailedError  	56	14	replace
86	[BUG]  [BUGGY]  ||  stopAtNonOption)  {  for(int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if('-'.equals(arg))  {  tokens.add( "-   ");  }  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }      [BUGGY]  ||  stopAtNonOption)  {  for(int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if('-'.equals(arg))  {  tokens.add( "-   ");  }  [BUGGY]      else  if  (     "-     ".equals(arg))    {  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  String  opt  =  Util.stripLeadingHyphens(arg);  if  (options.hasOption(opt))  {  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	67	68	3	replace	||  stopAtNonOption)  {  for(int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if('-'.equals(arg))  {  tokens.add( "-   ");  }	  if(stopAtNonOption)    {    for(int    i    =    0;    i    <    arguments.length;    i++)    {    String    arg    =    arguments[i];    if('-'.equals(arg))    {    tokens.add(   "-       ");    }    }    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
87	[BUG]  [BUGGY]  ||  stopAtNonOption)  {  for(int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if('-'.equals(arg))  {  tokens.add(  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }      [BUGGY]  ||  stopAtNonOption)  {  for(int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if('-'.equals(arg))  {  tokens.add(  [BUGGY]      else  if  (     "-     ".equals(arg))    {  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  String  opt  =  Util.stripLeadingHyphens(arg);  if  (options.hasOption(opt))  {  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	67	68	3	replace	||  stopAtNonOption)  {  for(int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if('-'.equals(arg))  {  tokens.add(	  if(stopAtNonOption)    {    for(int    i    =    0;    i    <    arguments.length;    i++)    {    String    arg    =    arguments[i];    if('-'.equals(arg))    {    tokens.add(   "-       ");    }    }    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
88	[BUG]  [BUGGY]  ||  stopAtNonOption)  {  for(int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if('-'.equals(arg))  {  tokens.add( "-  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }      [BUGGY]  ||  stopAtNonOption)  {  for(int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if('-'.equals(arg))  {  tokens.add( "-  [BUGGY]      else  if  (     "-     ".equals(arg))    {  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  String  opt  =  Util.stripLeadingHyphens(arg);  if  (options.hasOption(opt))  {  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	67	68	3	replace	||  stopAtNonOption)  {  for(int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if('-'.equals(arg))  {  tokens.add( "-	  if(stopAtNonOption)    {    for(int    i    =    0;    i    <    arguments.length;    i++)    {    String    arg    =    arguments[i];    if('-'.equals(arg))    {    tokens.add(   "-       ");    }    }    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
89	[BUG]  [BUGGY]  else  if(   "--     ".equals(arg)||  eatTheRest)  {  else  if(   "--   ".equals(arg)||  eatTheRest)  {  [CE]  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }      [BUGGY]  else  if(   "--     ".equals(arg)||  eatTheRest)  {  else  if(   "--   ".equals(arg)||  eatTheRest)  {  [BUGGY]      {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  String  opt  =  Util.stripLeadingHyphens(arg);  if  (options.hasOption(opt))  {  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	67	68	3	replace	else    if(   "--       ".equals(arg)||    eatTheRest)    {    else  if(   "--   ".equals(arg)||  eatTheRest)  {	  	non-compiled	[CE]  	75	None	add
90	[BUG]  [BUGGY]  else  if(   "--     ".equals(arg)||  eatTheRest)  {  else  if( ".--   ".equals(arg)||  eatTheRest)  {  [CE]  [FE]      StringIndexOutOfBoundsException    [CONTEXT]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }      [BUGGY]  else  if(   "--     ".equals(arg)||  eatTheRest)  {  else  if( ".--   ".equals(arg)||  eatTheRest)  {  [BUGGY]      {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  String  opt  =  Util.stripLeadingHyphens(arg);  if  (options.hasOption(opt))  {  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	67	68	3	replace	else    if(   "--       ".equals(arg)||    eatTheRest)    {    else  if( ".--   ".equals(arg)||  eatTheRest)  {	  	non-compiled	[CE]  	75	None	add
91	[BUG]  [BUGGY]  else  if(   "--     ".equals(arg)||  eatTheRest)  {  else  if(   "--   ".equals(arg)||  stopAtNonOption)  {  [CE]  [FE]        StringIndexOutOfBoundsException    [CONTEXT]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }      [BUGGY]  else  if(   "--     ".equals(arg)||  eatTheRest)  {  else  if(   "--   ".equals(arg)||  stopAtNonOption)  {  [BUGGY]      {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  String  opt  =  Util.stripLeadingHyphens(arg);  if  (options.hasOption(opt))  {  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	67	68	3	replace	else    if(   "--       ".equals(arg)||    eatTheRest)    {    else  if(   "--   ".equals(arg)||  stopAtNonOption)  {	  	non-compiled	[CE]  	75	None	add
92	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        StringIndexOutOfBoundsException      [CONTEXT]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }      [BUGGY]  else  if(!   "-- ".equals(arg))  {  [BUGGY]      {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  String  opt  =  Util.stripLeadingHyphens(arg);  if  (options.hasOption(opt))  {  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	67	68	3	add	else  if(!   "-- ".equals(arg))  {	  else    if(       "--       ".equals(arg))    {    else    if(!   "--       ".equals(arg))    {    	compilable	  [FE]  AssertionFailedError  	104	14	replace
93	[BUG]  [BUGGY]  else  if(!   "-- ".equals(arg))  {  [FE]  AssertionFailedError  [FE]        StringIndexOutOfBoundsException      [CONTEXT]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }      [BUGGY]  else  if(!   "-- ".equals(arg))  {  [BUGGY]      {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  String  opt  =  Util.stripLeadingHyphens(arg);  if  (options.hasOption(opt))  {  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	67	68	3	replace	else  if(!   "-- ".equals(arg))  {	  else    if(       "--       ".equals(arg))    {    else    if(!   "--       ".equals(arg))    {    	compilable	  [FE]  AssertionFailedError  	104	14	replace
94	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          StringIndexOutOfBoundsException      [CONTEXT]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }      [BUGGY]  else  if(! "- ".equals(arg))  {  [BUGGY]      {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  String  opt  =  Util.stripLeadingHyphens(arg);  if  (options.hasOption(opt))  {  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	67	68	3	add	else  if(! "- ".equals(arg))  {	  else    if(       "--       ".equals(arg))    {    else    if(!   "--       ".equals(arg))    {    	compilable	  [FE]  AssertionFailedError  	104	14	replace
95	[BUG]  [BUGGY]  else  if(! "- ".equals(arg))  {  [FE]  AssertionFailedError  [FE]          StringIndexOutOfBoundsException      [CONTEXT]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }      [BUGGY]  else  if(! "- ".equals(arg))  {  [BUGGY]      {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  String  opt  =  Util.stripLeadingHyphens(arg);  if  (options.hasOption(opt))  {  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	67	68	3	replace	else  if(! "- ".equals(arg))  {	  else    if(       "--       ".equals(arg))    {    else    if(!   "--       ".equals(arg))    {    	compilable	  [FE]  AssertionFailedError  	104	14	replace
96	[BUG]  [BUGGY]  else  if(   "--     ".equals(arg)&&!stopAtNonOption)  {  else  if( "--   ".equals(arg)&&!stopAtNonOption)  {  [CE]  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }      [BUGGY]  else  if(   "--     ".equals(arg)&&!stopAtNonOption)  {  else  if( "--   ".equals(arg)&&!stopAtNonOption)  {  [BUGGY]      {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  String  opt  =  Util.stripLeadingHyphens(arg);  if  (options.hasOption(opt))  {  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	67	68	3	replace	else    if(   "--       ".equals(arg)&&!stopAtNonOption)    {    else  if( "--   ".equals(arg)&&!stopAtNonOption)  {	  	non-compiled	[CE]  	27	None	add
97	[BUG]  [BUGGY]  else  if(   "--     ".equals(arg)&&!stopAtNonOption)  {  else  if( ".--   ".equals(arg)&&!stopAtNonOption)  {  [CE]  [FE]      StringIndexOutOfBoundsException    [CONTEXT]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }      [BUGGY]  else  if(   "--     ".equals(arg)&&!stopAtNonOption)  {  else  if( ".--   ".equals(arg)&&!stopAtNonOption)  {  [BUGGY]      {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  String  opt  =  Util.stripLeadingHyphens(arg);  if  (options.hasOption(opt))  {  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	67	68	3	replace	else    if(   "--       ".equals(arg)&&!stopAtNonOption)    {    else  if( ".--   ".equals(arg)&&!stopAtNonOption)  {	  	non-compiled	[CE]  	27	None	add
98	[BUG]  [BUGGY]  else  if(   "--     ".equals(arg)&&!stopAtNonOption)  {  else  if(! "--   ".equals(arg)&&!stopAtNonOption)  {  [CE]  [FE]        StringIndexOutOfBoundsException    [CONTEXT]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }      [BUGGY]  else  if(   "--     ".equals(arg)&&!stopAtNonOption)  {  else  if(! "--   ".equals(arg)&&!stopAtNonOption)  {  [BUGGY]      {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  String  opt  =  Util.stripLeadingHyphens(arg);  if  (options.hasOption(opt))  {  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	67	68	3	replace	else    if(   "--       ".equals(arg)&&!stopAtNonOption)    {    else  if(! "--   ".equals(arg)&&!stopAtNonOption)  {	  	non-compiled	[CE]  	27	None	add
99	[BUG]  [BUGGY]  else  if(   "--     ".equals(arg)&&!stopAtNonOption)  {  else  if( "--   ".equals(arg)&&  stopAtNonOption)  {  [CE]  [FE]          StringIndexOutOfBoundsException    [CONTEXT]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }      [BUGGY]  else  if(   "--     ".equals(arg)&&!stopAtNonOption)  {  else  if( "--   ".equals(arg)&&  stopAtNonOption)  {  [BUGGY]      {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  String  opt  =  Util.stripLeadingHyphens(arg);  if  (options.hasOption(opt))  {  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	67	68	3	replace	else    if(   "--       ".equals(arg)&&!stopAtNonOption)    {    else  if( "--   ".equals(arg)&&  stopAtNonOption)  {	  	non-compiled	[CE]  	27	None	add
100	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              ComparisonFailure      [CONTEXT]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }      [BUGGY]  else  if(! "- ".equals(arg)&&  stopAtNonOption)  {  [BUGGY]      {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  String  opt  =  Util.stripLeadingHyphens(arg);  if  (options.hasOption(opt))  {  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	67	68	3	add	else  if(! "- ".equals(arg)&&  stopAtNonOption)  {	  else    if(       "-       ".equals(arg)&&!stopAtNonOption)    {    else    if(   "-       ".equals(arg)&&    stopAtNonOption)    {    	compilable	  [FE]  AssertionFailedError  	60	7	replace
101	[BUG]  [BUGGY]  else  if(! "- ".equals(arg)&&  stopAtNonOption)  {  [FE]  AssertionFailedError  [FE]              ComparisonFailure      [CONTEXT]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }      [BUGGY]  else  if(! "- ".equals(arg)&&  stopAtNonOption)  {  [BUGGY]      {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  String  opt  =  Util.stripLeadingHyphens(arg);  if  (options.hasOption(opt))  {  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	67	68	3	replace	else  if(! "- ".equals(arg)&&  stopAtNonOption)  {	  else    if(       "-       ".equals(arg)&&!stopAtNonOption)    {    else    if(   "-       ".equals(arg)&&    stopAtNonOption)    {    	compilable	  [FE]  AssertionFailedError  	60	7	replace
102	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }      [BUGGY]          if(stopAtNonOption)    {    tokens.add(     "-     ");    }    if(stopAtNonOption)  {  tokens.add(   ".-     ");  }  if(stopAtNonOption)  {  tokens.add( "-   ");  }  if(stopAtNonOption)  {  tokens.add( "-   ");  }  [BUGGY]      else  if  (     "-     ".equals(arg))    {  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  String  opt  =  Util.stripLeadingHyphens(arg);  if  (options.hasOption(opt))  {  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	67	68	3	add	                if(stopAtNonOption)        {        tokens.add(       "-       ");        }        if(stopAtNonOption)    {    tokens.add(   ".-       ");    }    if(stopAtNonOption)  {  tokens.add( "-   ");  }  if(stopAtNonOption)  {  tokens.add( "-   ");  }	  	compilable	  [FE]  AssertionFailedError  	42	6	add
103	[BUG]  [BUGGY]          if(stopAtNonOption)    {    tokens.add(     "-     ");    }    if(stopAtNonOption)  {  tokens.add(   ".-     ");  }  if(stopAtNonOption)  {  tokens.add( "-   ");  }  if(stopAtNonOption)  {  tokens.add( "-   ");  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }      [BUGGY]          if(stopAtNonOption)    {    tokens.add(     "-     ");    }    if(stopAtNonOption)  {  tokens.add(   ".-     ");  }  if(stopAtNonOption)  {  tokens.add( "-   ");  }  if(stopAtNonOption)  {  tokens.add( "-   ");  }  [BUGGY]      else  if  (     "-     ".equals(arg))    {  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  String  opt  =  Util.stripLeadingHyphens(arg);  if  (options.hasOption(opt))  {  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	67	68	3	replace	                if(stopAtNonOption)        {        tokens.add(       "-       ");        }        if(stopAtNonOption)    {    tokens.add(   ".-       ");    }    if(stopAtNonOption)  {  tokens.add( "-   ");  }  if(stopAtNonOption)  {  tokens.add( "-   ");  }	  	compilable	  [FE]  AssertionFailedError  	42	6	add
104	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }      [BUGGY]          if(stopAtNonOption)    {    tokens.add(     "-     ");    }    if(stopAtNonOption)  {  tokens.add(   ".-     ");  }  if(stopAtNonOption)  {  tokens.add( "-   ");  }  else  if(stopAtNonOption)  {  tokens.add( "-   ");  }  [BUGGY]      else  if  (     "-     ".equals(arg))    {  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  String  opt  =  Util.stripLeadingHyphens(arg);  if  (options.hasOption(opt))  {  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	67	68	3	add	                if(stopAtNonOption)        {        tokens.add(       "-       ");        }        if(stopAtNonOption)    {    tokens.add(   ".-       ");    }    if(stopAtNonOption)  {  tokens.add( "-   ");  }  else  if(stopAtNonOption)  {  tokens.add( "-   ");  }	  	compilable	  [FE]  AssertionFailedError  	42	6	add
105	[BUG]  [BUGGY]          if(stopAtNonOption)    {    tokens.add(     "-     ");    }    if(stopAtNonOption)  {  tokens.add(   ".-     ");  }  if(stopAtNonOption)  {  tokens.add( "-   ");  }  else  if(stopAtNonOption)  {  tokens.add( "-   ");  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }      [BUGGY]          if(stopAtNonOption)    {    tokens.add(     "-     ");    }    if(stopAtNonOption)  {  tokens.add(   ".-     ");  }  if(stopAtNonOption)  {  tokens.add( "-   ");  }  else  if(stopAtNonOption)  {  tokens.add( "-   ");  }  [BUGGY]      else  if  (     "-     ".equals(arg))    {  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  String  opt  =  Util.stripLeadingHyphens(arg);  if  (options.hasOption(opt))  {  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	67	68	3	replace	                if(stopAtNonOption)        {        tokens.add(       "-       ");        }        if(stopAtNonOption)    {    tokens.add(   ".-       ");    }    if(stopAtNonOption)  {  tokens.add( "-   ");  }  else  if(stopAtNonOption)  {  tokens.add( "-   ");  }	  	compilable	  [FE]  AssertionFailedError  	42	6	add
106	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }      [BUGGY]          if(stopAtNonOption)    {    tokens.add(     "-     ");    }    if(stopAtNonOption)  {  tokens.add(   ".-     ");  }  if(stopAtNonOption)  {  tokens.add( "-   ");  }  [BUGGY]      else  if  (     "-     ".equals(arg))    {  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  String  opt  =  Util.stripLeadingHyphens(arg);  if  (options.hasOption(opt))  {  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	67	68	3	add	                if(stopAtNonOption)        {        tokens.add(       "-       ");        }        if(stopAtNonOption)    {    tokens.add(   ".-       ");    }    if(stopAtNonOption)  {  tokens.add( "-   ");  }	  	compilable	  [FE]  AssertionFailedError  	42	6	add
107	[BUG]  [BUGGY]          if(stopAtNonOption)    {    tokens.add(     "-     ");    }    if(stopAtNonOption)  {  tokens.add(   ".-     ");  }  if(stopAtNonOption)  {  tokens.add( "-   ");  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }      [BUGGY]          if(stopAtNonOption)    {    tokens.add(     "-     ");    }    if(stopAtNonOption)  {  tokens.add(   ".-     ");  }  if(stopAtNonOption)  {  tokens.add( "-   ");  }  [BUGGY]      else  if  (     "-     ".equals(arg))    {  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  String  opt  =  Util.stripLeadingHyphens(arg);  if  (options.hasOption(opt))  {  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	67	68	3	replace	                if(stopAtNonOption)        {        tokens.add(       "-       ");        }        if(stopAtNonOption)    {    tokens.add(   ".-       ");    }    if(stopAtNonOption)  {  tokens.add( "-   ");  }	  	compilable	  [FE]  AssertionFailedError  	42	6	add
108	[BUG]  [BUGGY]  else  if(   "-     ".equals(arg)||  stopAtNonOption)  {  else  if(   "-   ".equals(arg)||  stopAtNonOption)  {  [CE]  [FE]    AssertionFailedError    [CONTEXT]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }      [BUGGY]  else  if(   "-     ".equals(arg)||  stopAtNonOption)  {  else  if(   "-   ".equals(arg)||  stopAtNonOption)  {  [BUGGY]      {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  String  opt  =  Util.stripLeadingHyphens(arg);  if  (options.hasOption(opt))  {  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	67	68	3	replace	else    if(   "-       ".equals(arg)||    stopAtNonOption)    {    else  if(   "-   ".equals(arg)||  stopAtNonOption)  {	  	non-compiled	[CE]  	19	None	add
109	[BUG]  [BUGGY]  else  if(   "-     ".equals(arg)||  stopAtNonOption)  {  else  if( ".-   ".equals(arg)||  stopAtNonOption)  {  [CE]  [FE]      AssertionFailedError    [CONTEXT]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }      [BUGGY]  else  if(   "-     ".equals(arg)||  stopAtNonOption)  {  else  if( ".-   ".equals(arg)||  stopAtNonOption)  {  [BUGGY]      {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  String  opt  =  Util.stripLeadingHyphens(arg);  if  (options.hasOption(opt))  {  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	67	68	3	replace	else    if(   "-       ".equals(arg)||    stopAtNonOption)    {    else  if( ".-   ".equals(arg)||  stopAtNonOption)  {	  	non-compiled	[CE]  	19	None	add
110	[BUG]  [BUGGY]  else  if(   "-     ".equals(arg)||  stopAtNonOption)  {  else  if(! "-   ".equals(arg)||  stopAtNonOption)  {  [CE]  [FE]        AssertionFailedError    [CONTEXT]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }      [BUGGY]  else  if(   "-     ".equals(arg)||  stopAtNonOption)  {  else  if(! "-   ".equals(arg)||  stopAtNonOption)  {  [BUGGY]      {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  String  opt  =  Util.stripLeadingHyphens(arg);  if  (options.hasOption(opt))  {  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	67	68	3	replace	else    if(   "-       ".equals(arg)||    stopAtNonOption)    {    else  if(! "-   ".equals(arg)||  stopAtNonOption)  {	  	non-compiled	[CE]  	19	None	add
111	[BUG]  [BUGGY]  else  if(   "-     ".equals(arg)||  stopAtNonOption)  {  else  if('-   ".equals(arg)||  stopAtNonOption)  {  [CE]  [FE]          AssertionFailedError    [CONTEXT]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }      [BUGGY]  else  if(   "-     ".equals(arg)||  stopAtNonOption)  {  else  if('-   ".equals(arg)||  stopAtNonOption)  {  [BUGGY]      {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  String  opt  =  Util.stripLeadingHyphens(arg);  if  (options.hasOption(opt))  {  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	67	68	3	replace	else    if(   "-       ".equals(arg)||    stopAtNonOption)    {    else  if('-   ".equals(arg)||  stopAtNonOption)  {	  	non-compiled	[CE]  	19	None	add
112	[BUG]  [BUGGY]  if(!stopAtNonOption)  {  tokens.add( "- ");  }  [CE]  [FE]              ComparisonFailure      [CONTEXT]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }      [BUGGY]  if(!stopAtNonOption)  {  tokens.add( "- ");  }  [BUGGY]      else  if  (     "-     ".equals(arg))    {  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  String  opt  =  Util.stripLeadingHyphens(arg);  if  (options.hasOption(opt))  {  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	67	68	3	replace	if(!stopAtNonOption)  {  tokens.add( "- ");  }	  [Delete]    	non-compiled	[CE]  	91	None	replace
113	[BUG]  [BUGGY]  else  if(arg.startsWith( "-   ")||  '-'.equals(arg))  {  [CE]  char  cannot  be  dereferenced  [FE]                ComparisonFailure      [CONTEXT]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }      [BUGGY]  else  if(arg.startsWith( "-   ")||  '-'.equals(arg))  {  [BUGGY]      {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  String  opt  =  Util.stripLeadingHyphens(arg);  if  (options.hasOption(opt))  {  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	67	68	3	replace	else  if(arg.startsWith( "-   ")||  '-'.equals(arg))  {	  else    if(arg.equals(   "-   ")||    '-'.equals(arg))    {    	non-compiled	[CE]  char  cannot  be  dereferenced	14	None	replace
114	[BUG]  [BUGGY]  else  if(arg.equals( "-   ")&&  '-'.equals(arg))  {  [CE]  char  cannot  be  dereferenced  [FE]                  ComparisonFailure      [CONTEXT]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }      [BUGGY]  else  if(arg.equals( "-   ")&&  '-'.equals(arg))  {  [BUGGY]      {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  String  opt  =  Util.stripLeadingHyphens(arg);  if  (options.hasOption(opt))  {  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	67	68	3	replace	else  if(arg.equals( "-   ")&&  '-'.equals(arg))  {	  else    if(arg.equals(   "-   ")||    '-'.equals(arg))    {    	non-compiled	[CE]  char  cannot  be  dereferenced	14	None	replace
115	[BUG]  [BUGGY]  else  if(   "-     ".equals(arg)&&  eatTheRest)  {  else  if( "-   ".equals(arg)&&  eatTheRest)  {  [CE]  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }      [BUGGY]  else  if(   "-     ".equals(arg)&&  eatTheRest)  {  else  if( "-   ".equals(arg)&&  eatTheRest)  {  [BUGGY]      {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  String  opt  =  Util.stripLeadingHyphens(arg);  if  (options.hasOption(opt))  {  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	67	68	3	replace	else    if(   "-       ".equals(arg)&&    eatTheRest)    {    else  if( "-   ".equals(arg)&&  eatTheRest)  {	  	non-compiled	[CE]  	21	None	add
116	[BUG]  [BUGGY]  else  if(   "-     ".equals(arg)&&  eatTheRest)  {  else  if( ".-   ".equals(arg)&&  eatTheRest)  {  [CE]  [FE]      StringIndexOutOfBoundsException    [CONTEXT]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }      [BUGGY]  else  if(   "-     ".equals(arg)&&  eatTheRest)  {  else  if( ".-   ".equals(arg)&&  eatTheRest)  {  [BUGGY]      {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  String  opt  =  Util.stripLeadingHyphens(arg);  if  (options.hasOption(opt))  {  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	67	68	3	replace	else    if(   "-       ".equals(arg)&&    eatTheRest)    {    else  if( ".-   ".equals(arg)&&  eatTheRest)  {	  	non-compiled	[CE]  	21	None	add
117	[BUG]  [BUGGY]  else  if(   "-     ".equals(arg)&&  eatTheRest)  {  else  if( "-   ".equals(arg)&&  stopAtNonOption)  {  [CE]  [FE]        StringIndexOutOfBoundsException    [CONTEXT]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }      [BUGGY]  else  if(   "-     ".equals(arg)&&  eatTheRest)  {  else  if( "-   ".equals(arg)&&  stopAtNonOption)  {  [BUGGY]      {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  String  opt  =  Util.stripLeadingHyphens(arg);  if  (options.hasOption(opt))  {  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	67	68	3	replace	else    if(   "-       ".equals(arg)&&    eatTheRest)    {    else  if( "-   ".equals(arg)&&  stopAtNonOption)  {	  	non-compiled	[CE]  	21	None	add
118	[BUG]  [BUGGY]  else  if(   "-     ".equals(arg)&&  eatTheRest)  {  else  if(! "-   ".equals(arg)&&  eatTheRest)  {  [CE]  [FE]          StringIndexOutOfBoundsException    [CONTEXT]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }      [BUGGY]  else  if(   "-     ".equals(arg)&&  eatTheRest)  {  else  if(! "-   ".equals(arg)&&  eatTheRest)  {  [BUGGY]      {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  String  opt  =  Util.stripLeadingHyphens(arg);  if  (options.hasOption(opt))  {  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	67	68	3	replace	else    if(   "-       ".equals(arg)&&    eatTheRest)    {    else  if(! "-   ".equals(arg)&&  eatTheRest)  {	  	non-compiled	[CE]  	21	None	add
119	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }      [BUGGY]  else  if( "-eatTheRest   ".equals(arg)&&!stopAtNonOption)  {  [BUGGY]      {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  String  opt  =  Util.stripLeadingHyphens(arg);  if  (options.hasOption(opt))  {  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	67	68	3	add	else  if( "-eatTheRest   ".equals(arg)&&!stopAtNonOption)  {	  else    if(   "-eatTheRest   ".equals(arg))    {    	compilable	  [FE]  StringIndexOutOfBoundsException  	82	4	replace
120	[BUG]  [BUGGY]  else  if( "-eatTheRest   ".equals(arg)&&!stopAtNonOption)  {  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }      [BUGGY]  else  if( "-eatTheRest   ".equals(arg)&&!stopAtNonOption)  {  [BUGGY]      {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  String  opt  =  Util.stripLeadingHyphens(arg);  if  (options.hasOption(opt))  {  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	67	68	3	replace	else  if( "-eatTheRest   ".equals(arg)&&!stopAtNonOption)  {	  else    if(   "-eatTheRest   ".equals(arg))    {    	compilable	  [FE]  StringIndexOutOfBoundsException  	82	4	replace
121	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      StringIndexOutOfBoundsException    [CONTEXT]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }      [BUGGY]  else  if( "-eatTheRest   ".equals(arg)||!stopAtNonOption)  {  [BUGGY]      {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  String  opt  =  Util.stripLeadingHyphens(arg);  if  (options.hasOption(opt))  {  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	67	68	3	add	else  if( "-eatTheRest   ".equals(arg)||!stopAtNonOption)  {	  else    if(   "-eatTheRest   ".equals(arg))    {    	compilable	  [FE]  AssertionFailedError  	82	13	replace
122	[BUG]  [BUGGY]  else  if( "-eatTheRest   ".equals(arg)||!stopAtNonOption)  {  [FE]  AssertionFailedError  [FE]      StringIndexOutOfBoundsException    [CONTEXT]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }      [BUGGY]  else  if( "-eatTheRest   ".equals(arg)||!stopAtNonOption)  {  [BUGGY]      {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  String  opt  =  Util.stripLeadingHyphens(arg);  if  (options.hasOption(opt))  {  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	67	68	3	replace	else  if( "-eatTheRest   ".equals(arg)||!stopAtNonOption)  {	  else    if(   "-eatTheRest   ".equals(arg))    {    	compilable	  [FE]  AssertionFailedError  	82	13	replace
123	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]          StringIndexOutOfBoundsException      [CONTEXT]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }      [BUGGY]  else  if( ".- ".equals(arg))  {  [BUGGY]      {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  String  opt  =  Util.stripLeadingHyphens(arg);  if  (options.hasOption(opt))  {  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	67	68	3	add	else  if( ".- ".equals(arg))  {	  else    if(       "--       ".equals(arg))    {    else    if(   ".--       ".equals(arg))    {    	compilable	  [FE]  StringIndexOutOfBoundsException  	53	4	replace
124	[BUG]  [BUGGY]  else  if( ".- ".equals(arg))  {  [FE]  StringIndexOutOfBoundsException  [FE]          StringIndexOutOfBoundsException      [CONTEXT]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }      [BUGGY]  else  if( ".- ".equals(arg))  {  [BUGGY]      {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  String  opt  =  Util.stripLeadingHyphens(arg);  if  (options.hasOption(opt))  {  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	67	68	3	replace	else  if( ".- ".equals(arg))  {	  else    if(       "--       ".equals(arg))    {    else    if(   ".--       ".equals(arg))    {    	compilable	  [FE]  StringIndexOutOfBoundsException  	53	4	replace
125	[BUG]  [BUGGY]  else  if(   "--     ".equals(arg)&&!eatTheRest)  {  else  if(   "--   ".equals(arg)&&!eatTheRest)  {  [CE]  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }      [BUGGY]  else  if(   "--     ".equals(arg)&&!eatTheRest)  {  else  if(   "--   ".equals(arg)&&!eatTheRest)  {  [BUGGY]      {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  String  opt  =  Util.stripLeadingHyphens(arg);  if  (options.hasOption(opt))  {  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	67	68	3	replace	else    if(   "--       ".equals(arg)&&!eatTheRest)    {    else  if(   "--   ".equals(arg)&&!eatTheRest)  {	  	non-compiled	[CE]  	99	None	add
126	[BUG]  [BUGGY]  else  if(   "--     ".equals(arg)&&!eatTheRest)  {  else  if( ".--   ".equals(arg)&&!eatTheRest)  {  [CE]  [FE]      StringIndexOutOfBoundsException    [CONTEXT]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }      [BUGGY]  else  if(   "--     ".equals(arg)&&!eatTheRest)  {  else  if( ".--   ".equals(arg)&&!eatTheRest)  {  [BUGGY]      {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  String  opt  =  Util.stripLeadingHyphens(arg);  if  (options.hasOption(opt))  {  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	67	68	3	replace	else    if(   "--       ".equals(arg)&&!eatTheRest)    {    else  if( ".--   ".equals(arg)&&!eatTheRest)  {	  	non-compiled	[CE]  	99	None	add
127	[BUG]  [BUGGY]  else  if(   "--     ".equals(arg)&&!eatTheRest)  {  else  if(   "--   ".equals(arg)&&!stopAtNonOption)  {  [CE]  [FE]        StringIndexOutOfBoundsException    [CONTEXT]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }      [BUGGY]  else  if(   "--     ".equals(arg)&&!eatTheRest)  {  else  if(   "--   ".equals(arg)&&!stopAtNonOption)  {  [BUGGY]      {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  String  opt  =  Util.stripLeadingHyphens(arg);  if  (options.hasOption(opt))  {  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	67	68	3	replace	else    if(   "--       ".equals(arg)&&!eatTheRest)    {    else  if(   "--   ".equals(arg)&&!stopAtNonOption)  {	  	non-compiled	[CE]  	99	None	add
128	[BUG]  [BUGGY]  else  if(   "--     ".equals(arg)&&!eatTheRest)  {  else  if(! "--   ".equals(arg)&&!eatTheRest)  {  [CE]  [FE]          StringIndexOutOfBoundsException    [CONTEXT]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }      [BUGGY]  else  if(   "--     ".equals(arg)&&!eatTheRest)  {  else  if(! "--   ".equals(arg)&&!eatTheRest)  {  [BUGGY]      {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  String  opt  =  Util.stripLeadingHyphens(arg);  if  (options.hasOption(opt))  {  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	67	68	3	replace	else    if(   "--       ".equals(arg)&&!eatTheRest)    {    else  if(! "--   ".equals(arg)&&!eatTheRest)  {	  	non-compiled	[CE]  	99	None	add
129	[BUG]  [BUGGY]  else  if(   ".-   ".equals(arg)||  stopAtNonOption)  {  else  if(   ".-   ".equals(arg)||  stopAtNonOption)  {  [CE]  [FE]    AssertionFailedError    [CONTEXT]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }      [BUGGY]  else  if(   ".-   ".equals(arg)||  stopAtNonOption)  {  else  if(   ".-   ".equals(arg)||  stopAtNonOption)  {  [BUGGY]      {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  String  opt  =  Util.stripLeadingHyphens(arg);  if  (options.hasOption(opt))  {  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	67	68	3	replace	else    if(   ".-   ".equals(arg)||    stopAtNonOption)    {    else  if(   ".-   ".equals(arg)||  stopAtNonOption)  {	  	non-compiled	[CE]  	23	None	add
130	[BUG]  [BUGGY]  else  if(   ".-   ".equals(arg)||  stopAtNonOption)  {  else  if(. ".-   ".equals(arg)||  stopAtNonOption)  {  [CE]  [FE]      AssertionFailedError    [CONTEXT]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }      [BUGGY]  else  if(   ".-   ".equals(arg)||  stopAtNonOption)  {  else  if(. ".-   ".equals(arg)||  stopAtNonOption)  {  [BUGGY]      {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  String  opt  =  Util.stripLeadingHyphens(arg);  if  (options.hasOption(opt))  {  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	67	68	3	replace	else    if(   ".-   ".equals(arg)||    stopAtNonOption)    {    else  if(. ".-   ".equals(arg)||  stopAtNonOption)  {	  	non-compiled	[CE]  	23	None	add
131	[BUG]  [BUGGY]  else  if(   ".-   ".equals(arg)||  stopAtNonOption)  {  else  if(! ".-   ".equals(arg)||  stopAtNonOption)  {  [CE]  [FE]        AssertionFailedError    [CONTEXT]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }      [BUGGY]  else  if(   ".-   ".equals(arg)||  stopAtNonOption)  {  else  if(! ".-   ".equals(arg)||  stopAtNonOption)  {  [BUGGY]      {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  String  opt  =  Util.stripLeadingHyphens(arg);  if  (options.hasOption(opt))  {  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	67	68	3	replace	else    if(   ".-   ".equals(arg)||    stopAtNonOption)    {    else  if(! ".-   ".equals(arg)||  stopAtNonOption)  {	  	non-compiled	[CE]  	23	None	add
132	[BUG]  [BUGGY]  if(stopAtNonOption)  {  for(int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if('-'.equals(arg))  {  tokens.add( "-  }  [CE]  unclosed  string  literal  [FE]                      ComparisonFailure      [CONTEXT]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }      [BUGGY]  if(stopAtNonOption)  {  for(int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if('-'.equals(arg))  {  tokens.add( "-  }  [BUGGY]      else  if  (     "-     ".equals(arg))    {  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  String  opt  =  Util.stripLeadingHyphens(arg);  if  (options.hasOption(opt))  {  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	67	68	3	replace	if(stopAtNonOption)  {  for(int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if('-'.equals(arg))  {  tokens.add( "-  }	  if(stopAtNonOption)    {    for(int    i    =    0;    i    <    arguments.length;    i++)    {    String    arg    =    arguments[i];    if('-'.equals(arg))    {    tokens.add(   "-    	non-compiled	[CE]  unclosed  string  literal	45	None	replace
133	[BUG]  [BUGGY]  if(stopAtNonOption)  {  for(int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if('-'.equals(arg))  {  eatTheRest  =  true;  tokens.add(  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }      [BUGGY]  if(stopAtNonOption)  {  for(int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if('-'.equals(arg))  {  eatTheRest  =  true;  tokens.add(  [BUGGY]      else  if  (     "-     ".equals(arg))    {  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  String  opt  =  Util.stripLeadingHyphens(arg);  if  (options.hasOption(opt))  {  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	67	68	3	replace	if(stopAtNonOption)  {  for(int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if('-'.equals(arg))  {  eatTheRest  =  true;  tokens.add(	  if(stopAtNonOption)    {    for(int    i    =    0;    i    <    arguments.length;    i++)    {    String    arg    =    arguments[i];    if('-'.equals(arg))    {    tokens.add(   "-    	non-compiled	[CE]  	45	None	replace
134	[BUG]  [BUGGY]  if(stopAtNonOption)  {  for(int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if('-'.equals(arg))  {  eatTheRest  =  true;  tokens.add  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }      [BUGGY]  if(stopAtNonOption)  {  for(int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if('-'.equals(arg))  {  eatTheRest  =  true;  tokens.add  [BUGGY]      else  if  (     "-     ".equals(arg))    {  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  String  opt  =  Util.stripLeadingHyphens(arg);  if  (options.hasOption(opt))  {  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	67	68	3	replace	if(stopAtNonOption)  {  for(int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if('-'.equals(arg))  {  eatTheRest  =  true;  tokens.add	  if(stopAtNonOption)    {    for(int    i    =    0;    i    <    arguments.length;    i++)    {    String    arg    =    arguments[i];    if('-'.equals(arg))    {    tokens.add(   "-    	non-compiled	[CE]  	45	None	replace
135	[BUG]  [BUGGY]  fortunately,  stopAtNonOption)  {  for(int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if(!eatTheRest)  {  tokens.add  [CE]  not  a  statement  [FE]                        ComparisonFailure      [CONTEXT]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }      [BUGGY]  fortunately,  stopAtNonOption)  {  for(int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if(!eatTheRest)  {  tokens.add  [BUGGY]      else  if  (     "-     ".equals(arg))    {  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  String  opt  =  Util.stripLeadingHyphens(arg);  if  (options.hasOption(opt))  {  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	67	68	3	replace	fortunately,  stopAtNonOption)  {  for(int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if(!eatTheRest)  {  tokens.add	  fortunately,    stopAtNonOption)    {    for(int    i    =    0;    i    <    arguments.length;    i++)    {    String    arg    =    arguments[i];    if(!eatTheRest)    {    tokens.add(    	non-compiled	[CE]  not  a  statement	103	None	replace
136	[BUG]  [BUGGY]  fortunately,  stopAtNonOption)  {  for(int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if(!eatTheRest)  {  tokens  [CE]  not  a  statement  [FE]                          ComparisonFailure      [CONTEXT]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }      [BUGGY]  fortunately,  stopAtNonOption)  {  for(int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if(!eatTheRest)  {  tokens  [BUGGY]      else  if  (     "-     ".equals(arg))    {  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  String  opt  =  Util.stripLeadingHyphens(arg);  if  (options.hasOption(opt))  {  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	67	68	3	replace	fortunately,  stopAtNonOption)  {  for(int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if(!eatTheRest)  {  tokens	  fortunately,    stopAtNonOption)    {    for(int    i    =    0;    i    <    arguments.length;    i++)    {    String    arg    =    arguments[i];    if(!eatTheRest)    {    tokens.add(    	non-compiled	[CE]  not  a  statement	103	None	replace
137	[BUG]  [BUGGY]  fortunately,  stopAtNonOption)  {  for(int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if(!eatTheRest)  {  tokens.  [CE]  not  a  statement  [FE]                            ComparisonFailure      [CONTEXT]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }      [BUGGY]  fortunately,  stopAtNonOption)  {  for(int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if(!eatTheRest)  {  tokens.  [BUGGY]      else  if  (     "-     ".equals(arg))    {  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  String  opt  =  Util.stripLeadingHyphens(arg);  if  (options.hasOption(opt))  {  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	67	68	3	replace	fortunately,  stopAtNonOption)  {  for(int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if(!eatTheRest)  {  tokens.	  fortunately,    stopAtNonOption)    {    for(int    i    =    0;    i    <    arguments.length;    i++)    {    String    arg    =    arguments[i];    if(!eatTheRest)    {    tokens.add(    	non-compiled	[CE]  not  a  statement	103	None	replace
138	[BUG]  [BUGGY]  tors.add( "-- ");  [CE]  [FE]        AssertionFailedError      [CONTEXT]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }      [BUGGY]  tors.add( "-- ");  [BUGGY]      else  if  (     "-     ".equals(arg))    {  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  String  opt  =  Util.stripLeadingHyphens(arg);  if  (options.hasOption(opt))  {  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	67	68	3	replace	tors.add( "-- ");	  tors.add(   "-   ");    	non-compiled	[CE]  	85	None	replace
139	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }      [BUGGY]  else  if(stopAtNonOption  &&  options.hasOption(arg))  {  [BUGGY]      {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  String  opt  =  Util.stripLeadingHyphens(arg);  if  (options.hasOption(opt))  {  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	67	68	3	add	else  if(stopAtNonOption  &&  options.hasOption(arg))  {	  else    if(!stopAtNonOption)    {    	compilable	  [FE]  AssertionFailedError  	32	7	replace
140	[BUG]  [BUGGY]  else  if(stopAtNonOption  &&  options.hasOption(arg))  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }      [BUGGY]  else  if(stopAtNonOption  &&  options.hasOption(arg))  {  [BUGGY]      {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  String  opt  =  Util.stripLeadingHyphens(arg);  if  (options.hasOption(opt))  {  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	67	68	3	replace	else  if(stopAtNonOption  &&  options.hasOption(arg))  {	  else    if(!stopAtNonOption)    {    	compilable	  [FE]  AssertionFailedError  	32	7	replace
141	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }      [BUGGY]  else  if(!stopAtNonOption  &&  options.hasOption(arg))  {  [BUGGY]      {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  String  opt  =  Util.stripLeadingHyphens(arg);  if  (options.hasOption(opt))  {  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	67	68	3	add	else  if(!stopAtNonOption  &&  options.hasOption(arg))  {	  else    if(!stopAtNonOption)    {    	compilable	  [FE]  AssertionFailedError  	32	11	replace
142	[BUG]  [BUGGY]  else  if(!stopAtNonOption  &&  options.hasOption(arg))  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }      [BUGGY]  else  if(!stopAtNonOption  &&  options.hasOption(arg))  {  [BUGGY]      {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  String  opt  =  Util.stripLeadingHyphens(arg);  if  (options.hasOption(opt))  {  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	67	68	3	replace	else  if(!stopAtNonOption  &&  options.hasOption(arg))  {	  else    if(!stopAtNonOption)    {    	compilable	  [FE]  AssertionFailedError  	32	11	replace
143	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        AssertionFailedError    [CONTEXT]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }      [BUGGY]  else  if(!stopAtNonOption  &&  arguments[i].equals( "- "))  {  [BUGGY]      {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  String  opt  =  Util.stripLeadingHyphens(arg);  if  (options.hasOption(opt))  {  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	67	68	3	add	else  if(!stopAtNonOption  &&  arguments[i].equals( "- "))  {	  else    if(!stopAtNonOption)    {    	compilable	  [FE]  ComparisonFailure  	32	3	replace
144	[BUG]  [BUGGY]  else  if(!stopAtNonOption  &&  arguments[i].equals( "- "))  {  [FE]  ComparisonFailure  [FE]        AssertionFailedError    [CONTEXT]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }      [BUGGY]  else  if(!stopAtNonOption  &&  arguments[i].equals( "- "))  {  [BUGGY]      {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  String  opt  =  Util.stripLeadingHyphens(arg);  if  (options.hasOption(opt))  {  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	67	68	3	replace	else  if(!stopAtNonOption  &&  arguments[i].equals( "- "))  {	  else    if(!stopAtNonOption)    {    	compilable	  [FE]  ComparisonFailure  	32	3	replace
145	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]          AssertionFailedError    [CONTEXT]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }      [BUGGY]  else  if(stopAtNonOption  &&  arguments[i].equals( "- "))  {  [BUGGY]      {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  String  opt  =  Util.stripLeadingHyphens(arg);  if  (options.hasOption(opt))  {  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	67	68	3	add	else  if(stopAtNonOption  &&  arguments[i].equals( "- "))  {	  else    if(!stopAtNonOption)    {    	compilable	  [FE]  StringIndexOutOfBoundsException  	32	4	replace
146	[BUG]  [BUGGY]  else  if(stopAtNonOption  &&  arguments[i].equals( "- "))  {  [FE]  StringIndexOutOfBoundsException  [FE]          AssertionFailedError    [CONTEXT]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }      [BUGGY]  else  if(stopAtNonOption  &&  arguments[i].equals( "- "))  {  [BUGGY]      {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  String  opt  =  Util.stripLeadingHyphens(arg);  if  (options.hasOption(opt))  {  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	67	68	3	replace	else  if(stopAtNonOption  &&  arguments[i].equals( "- "))  {	  else    if(!stopAtNonOption)    {    	compilable	  [FE]  StringIndexOutOfBoundsException  	32	4	replace
147	[BUG]  [BUGGY]  ||  stopAtNonOption)  {  for(int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if( "-   ".equals(arg))  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }      [BUGGY]  ||  stopAtNonOption)  {  for(int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if( "-   ".equals(arg))  {  [BUGGY]      else  if  (     "-     ".equals(arg))    {  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  String  opt  =  Util.stripLeadingHyphens(arg);  if  (options.hasOption(opt))  {  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	67	68	3	replace	||  stopAtNonOption)  {  for(int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if( "-   ".equals(arg))  {	  if(stopAtNonOption)    {    for(int    i    =    0;    i    <    arguments.length;    i++)    {    String    arg    =    arguments[i];    if(   "-       ".equals(arg))    {    tokens.add(    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
148	[BUG]  [BUGGY]  else  if(!   "-   ".equals(arg)&&!stopAtNonOption)  {  else  if(!   "-   ".equals(arg)&&!stopAtNonOption)  {  [CE]  [FE]    AssertionFailedError    [CONTEXT]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }      [BUGGY]  else  if(!   "-   ".equals(arg)&&!stopAtNonOption)  {  else  if(!   "-   ".equals(arg)&&!stopAtNonOption)  {  [BUGGY]      {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  String  opt  =  Util.stripLeadingHyphens(arg);  if  (options.hasOption(opt))  {  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	67	68	3	replace	else    if(!   "-   ".equals(arg)&&!stopAtNonOption)    {    else  if(!   "-   ".equals(arg)&&!stopAtNonOption)  {	  	non-compiled	[CE]  	4	None	add
149	[BUG]  [BUGGY]  else  if(!   "-   ".equals(arg)&&!stopAtNonOption)  {  else  if(!! "-   ".equals(arg)&&!stopAtNonOption)  {  [CE]  [FE]      AssertionFailedError    [CONTEXT]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }      [BUGGY]  else  if(!   "-   ".equals(arg)&&!stopAtNonOption)  {  else  if(!! "-   ".equals(arg)&&!stopAtNonOption)  {  [BUGGY]      {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  String  opt  =  Util.stripLeadingHyphens(arg);  if  (options.hasOption(opt))  {  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	67	68	3	replace	else    if(!   "-   ".equals(arg)&&!stopAtNonOption)    {    else  if(!! "-   ".equals(arg)&&!stopAtNonOption)  {	  	non-compiled	[CE]  	4	None	add
150	[BUG]  [BUGGY]  ||  stopAtNonOption)  {  for(int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if( "-   ".equals(arg))  {  tokens.add(  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }      [BUGGY]  ||  stopAtNonOption)  {  for(int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if( "-   ".equals(arg))  {  tokens.add(  [BUGGY]      else  if  (     "-     ".equals(arg))    {  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  String  opt  =  Util.stripLeadingHyphens(arg);  if  (options.hasOption(opt))  {  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	67	68	3	replace	||  stopAtNonOption)  {  for(int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if( "-   ".equals(arg))  {  tokens.add(	  if(stopAtNonOption)    {    for(int    i    =    0;    i    <    arguments.length;    i++)    {    String    arg    =    arguments[i];    if(   "-       ".equals(arg))    {    tokens.add(   "-       ");    }    }    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
151	[BUG]  [BUGGY]  ||  stopAtNonOption)  {  for(int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if( "-   ".equals(arg))  {  tokens.add  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }      [BUGGY]  ||  stopAtNonOption)  {  for(int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if( "-   ".equals(arg))  {  tokens.add  [BUGGY]      else  if  (     "-     ".equals(arg))    {  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  String  opt  =  Util.stripLeadingHyphens(arg);  if  (options.hasOption(opt))  {  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	67	68	3	replace	||  stopAtNonOption)  {  for(int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if( "-   ".equals(arg))  {  tokens.add	  if(stopAtNonOption)    {    for(int    i    =    0;    i    <    arguments.length;    i++)    {    String    arg    =    arguments[i];    if(   "-       ".equals(arg))    {    tokens.add(   "-       ");    }    }    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
152	[BUG]  [BUGGY]  ||  stopAtNonOption)  {  for(int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if( "-   ".equals(arg))  {  tokens.  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }      [BUGGY]  ||  stopAtNonOption)  {  for(int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if( "-   ".equals(arg))  {  tokens.  [BUGGY]      else  if  (     "-     ".equals(arg))    {  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  String  opt  =  Util.stripLeadingHyphens(arg);  if  (options.hasOption(opt))  {  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	67	68	3	replace	||  stopAtNonOption)  {  for(int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if( "-   ".equals(arg))  {  tokens.	  if(stopAtNonOption)    {    for(int    i    =    0;    i    <    arguments.length;    i++)    {    String    arg    =    arguments[i];    if(   "-       ".equals(arg))    {    tokens.add(   "-       ");    }    }    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
153	[BUG]  [BUGGY]  ||  stopAtNonOption)  {  for(int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if('-'.equals(arg))  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }      [BUGGY]  ||  stopAtNonOption)  {  for(int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if('-'.equals(arg))  {  [BUGGY]      else  if  (     "-     ".equals(arg))    {  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  String  opt  =  Util.stripLeadingHyphens(arg);  if  (options.hasOption(opt))  {  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	67	68	3	replace	||  stopAtNonOption)  {  for(int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if('-'.equals(arg))  {	  if(stopAtNonOption)    {    for(int    i    =    0;    i    <    arguments.length;    i++)    {    String    arg    =    arguments[i];    if('-'.equals(arg))    {    tokens.add(    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
154	[BUG]  [BUGGY]  else  if(!stopAtNonOption)  {  else  if(!stopAtNonOption)  {  [CE]  [FE]    AssertionFailedError    [CONTEXT]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }      [BUGGY]  else  if(!stopAtNonOption)  {  else  if(!stopAtNonOption)  {  [BUGGY]      {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  String  opt  =  Util.stripLeadingHyphens(arg);  if  (options.hasOption(opt))  {  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	67	68	3	replace	else    if(!stopAtNonOption)    {    else  if(!stopAtNonOption)  {	  	non-compiled	[CE]  	31	None	add
155	[BUG]  [BUGGY]  else  if(!stopAtNonOption)  {  tokens.add( "- ");  [CE]  [FE]      AssertionFailedError    [CONTEXT]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }      [BUGGY]  else  if(!stopAtNonOption)  {  tokens.add( "- ");  [BUGGY]      {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  String  opt  =  Util.stripLeadingHyphens(arg);  if  (options.hasOption(opt))  {  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	67	68	3	replace	else    if(!stopAtNonOption)    {    tokens.add( "- ");	  	non-compiled	[CE]  	31	None	add
156	[BUG]  [BUGGY]  else  if(!stopAtNonOption)  {  if(stopAtNonOption)  {  tokens.add( "- ");  }  else  if(!stopAtNonOption)  {  [CE]  [FE]        AssertionFailedError    [CONTEXT]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }      [BUGGY]  else  if(!stopAtNonOption)  {  if(stopAtNonOption)  {  tokens.add( "- ");  }  else  if(!stopAtNonOption)  {  [BUGGY]      {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  String  opt  =  Util.stripLeadingHyphens(arg);  if  (options.hasOption(opt))  {  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	67	68	3	replace	else    if(!stopAtNonOption)    {    if(stopAtNonOption)  {  tokens.add( "- ");  }  else  if(!stopAtNonOption)  {	  	non-compiled	[CE]  	31	None	add
157	[BUG]  [BUGGY]  else  if(!stopAtNonOption)  {  if(stopAtNonOption)  {  tokens.add( "- ");  }  [CE]  reached  end  of  file  while  parsing  [FE]          AssertionFailedError    [CONTEXT]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }      [BUGGY]  else  if(!stopAtNonOption)  {  if(stopAtNonOption)  {  tokens.add( "- ");  }  [BUGGY]      {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  String  opt  =  Util.stripLeadingHyphens(arg);  if  (options.hasOption(opt))  {  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	67	68	3	replace	else    if(!stopAtNonOption)    {    if(stopAtNonOption)  {  tokens.add( "- ");  }	  	non-compiled	[CE]  reached  end  of  file  while  parsing	31	None	add
158	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }      [BUGGY]  else  if(stopAtNonOption  &&   "- ".equals(arg))  {  [BUGGY]      {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  String  opt  =  Util.stripLeadingHyphens(arg);  if  (options.hasOption(opt))  {  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	67	68	3	add	else  if(stopAtNonOption  &&   "- ".equals(arg))  {	  else    if(!stopAtNonOption    &&   "eatTheRest   ".equals(arg))    {    	compilable	  [FE]  StringIndexOutOfBoundsException  	80	4	replace
159	[BUG]  [BUGGY]  else  if(stopAtNonOption  &&   "- ".equals(arg))  {  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }      [BUGGY]  else  if(stopAtNonOption  &&   "- ".equals(arg))  {  [BUGGY]      {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  String  opt  =  Util.stripLeadingHyphens(arg);  if  (options.hasOption(opt))  {  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	67	68	3	replace	else  if(stopAtNonOption  &&   "- ".equals(arg))  {	  else    if(!stopAtNonOption    &&   "eatTheRest   ".equals(arg))    {    	compilable	  [FE]  StringIndexOutOfBoundsException  	80	4	replace
160	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      StringIndexOutOfBoundsException    [CONTEXT]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }      [BUGGY]  else  if(!stopAtNonOption  &&   "- ".equals(arg))  {  [BUGGY]      {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  String  opt  =  Util.stripLeadingHyphens(arg);  if  (options.hasOption(opt))  {  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	67	68	3	add	else  if(!stopAtNonOption  &&   "- ".equals(arg))  {	  else    if(!stopAtNonOption    &&   "eatTheRest   ".equals(arg))    {    	compilable	  [FE]  ComparisonFailure  	80	3	replace
161	[BUG]  [BUGGY]  else  if(!stopAtNonOption  &&   "- ".equals(arg))  {  [FE]  ComparisonFailure  [FE]      StringIndexOutOfBoundsException    [CONTEXT]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }      [BUGGY]  else  if(!stopAtNonOption  &&   "- ".equals(arg))  {  [BUGGY]      {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  String  opt  =  Util.stripLeadingHyphens(arg);  if  (options.hasOption(opt))  {  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	67	68	3	replace	else  if(!stopAtNonOption  &&   "- ".equals(arg))  {	  else    if(!stopAtNonOption    &&   "eatTheRest   ".equals(arg))    {    	compilable	  [FE]  ComparisonFailure  	80	3	replace
162	[BUG]  [BUGGY]  tokens.add(arg  +  2);  [CE]  [FE]            ComparisonFailure      [CONTEXT]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }      [BUGGY]  tokens.add(arg  +  2);  [BUGGY]      else  if  (     "-     ".equals(arg))    {  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  String  opt  =  Util.stripLeadingHyphens(arg);  if  (options.hasOption(opt))  {  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	67	68	3	replace	tokens.add(arg  +  2);	  tokens.add(arg    +    1);    	non-compiled	[CE]  	1	None	replace
163	[BUG]  [BUGGY]  tokens.add(arg  +  3);  [CE]  [FE]              ComparisonFailure      [CONTEXT]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }      [BUGGY]  tokens.add(arg  +  3);  [BUGGY]      else  if  (     "-     ".equals(arg))    {  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  String  opt  =  Util.stripLeadingHyphens(arg);  if  (options.hasOption(opt))  {  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	67	68	3	replace	tokens.add(arg  +  3);	  tokens.add(arg    +    1);    	non-compiled	[CE]  	1	None	replace
164	[BUG]  [BUGGY]  ||  stopAtNonOption)  {  for(int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if(!eatTheRest)  {  tokens.add(  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }      [BUGGY]  ||  stopAtNonOption)  {  for(int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if(!eatTheRest)  {  tokens.add(  [BUGGY]      else  if  (     "-     ".equals(arg))    {  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  String  opt  =  Util.stripLeadingHyphens(arg);  if  (options.hasOption(opt))  {  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	67	68	3	replace	||  stopAtNonOption)  {  for(int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if(!eatTheRest)  {  tokens.add(	  ||    stopAtNonOption)    {    for(int    i    =    0;    i    <    arguments.length;    i++)    {    String    arg    =    arguments[i];    if(!eatTheRest)    {    tokens.add(   "-       ");    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
165	[BUG]  [BUGGY]  ||  stopAtNonOption)  {  for(int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if(!eatTheRest)  {  tokens.add( "-  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }      [BUGGY]  ||  stopAtNonOption)  {  for(int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if(!eatTheRest)  {  tokens.add( "-  [BUGGY]      else  if  (     "-     ".equals(arg))    {  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  String  opt  =  Util.stripLeadingHyphens(arg);  if  (options.hasOption(opt))  {  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	67	68	3	replace	||  stopAtNonOption)  {  for(int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if(!eatTheRest)  {  tokens.add( "-	  ||    stopAtNonOption)    {    for(int    i    =    0;    i    <    arguments.length;    i++)    {    String    arg    =    arguments[i];    if(!eatTheRest)    {    tokens.add(   "-       ");    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
166	[BUG]  [BUGGY]  ||  stopAtNonOption)  {  for(int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if(!eatTheRest)  {  tokens.add( "  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }      [BUGGY]  ||  stopAtNonOption)  {  for(int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if(!eatTheRest)  {  tokens.add( "  [BUGGY]      else  if  (     "-     ".equals(arg))    {  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  String  opt  =  Util.stripLeadingHyphens(arg);  if  (options.hasOption(opt))  {  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	67	68	3	replace	||  stopAtNonOption)  {  for(int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if(!eatTheRest)  {  tokens.add( "	  ||    stopAtNonOption)    {    for(int    i    =    0;    i    <    arguments.length;    i++)    {    String    arg    =    arguments[i];    if(!eatTheRest)    {    tokens.add(   "-       ");    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
167	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }      [BUGGY]  else  if(! ".- ".equals(arg)&&!stopAtNonOption)  {  [BUGGY]      {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  String  opt  =  Util.stripLeadingHyphens(arg);  if  (options.hasOption(opt))  {  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	67	68	3	add	else  if(! ".- ".equals(arg)&&!stopAtNonOption)  {	  else    if(   ".-   ".equals(arg)&&!stopAtNonOption)    {    	compilable	  [FE]  AssertionFailedError  	90	13	replace
168	[BUG]  [BUGGY]  else  if(! ".- ".equals(arg)&&!stopAtNonOption)  {  [FE]  AssertionFailedError  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }      [BUGGY]  else  if(! ".- ".equals(arg)&&!stopAtNonOption)  {  [BUGGY]      {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  String  opt  =  Util.stripLeadingHyphens(arg);  if  (options.hasOption(opt))  {  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	67	68	3	replace	else  if(! ".- ".equals(arg)&&!stopAtNonOption)  {	  else    if(   ".-   ".equals(arg)&&!stopAtNonOption)    {    	compilable	  [FE]  AssertionFailedError  	90	13	replace
169	[BUG]  [BUGGY]  if(stopAtNonOption)  {  for(int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if(!eatTheRest)  {  tokens.add( "-  }  [CE]  unclosed  string  literal  [FE]                      ComparisonFailure      [CONTEXT]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }      [BUGGY]  if(stopAtNonOption)  {  for(int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if(!eatTheRest)  {  tokens.add( "-  }  [BUGGY]      else  if  (     "-     ".equals(arg))    {  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  String  opt  =  Util.stripLeadingHyphens(arg);  if  (options.hasOption(opt))  {  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	67	68	3	replace	if(stopAtNonOption)  {  for(int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if(!eatTheRest)  {  tokens.add( "-  }	  if(stopAtNonOption)    {    for(int    i    =    0;    i    <    arguments.length;    i++)    {    String    arg    =    arguments[i];    if(!eatTheRest)    {    tokens.add(   "-    	non-compiled	[CE]  unclosed  string  literal	13	None	replace
170	[BUG]  [BUGGY]  if(stopAtNonOption)  {  for(int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if(!eatTheRest)  {  tokens.add( "  [CE]  unclosed  string  literal  [FE]                        ComparisonFailure      [CONTEXT]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }      [BUGGY]  if(stopAtNonOption)  {  for(int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if(!eatTheRest)  {  tokens.add( "  [BUGGY]      else  if  (     "-     ".equals(arg))    {  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  String  opt  =  Util.stripLeadingHyphens(arg);  if  (options.hasOption(opt))  {  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	67	68	3	replace	if(stopAtNonOption)  {  for(int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if(!eatTheRest)  {  tokens.add( "	  if(stopAtNonOption)    {    for(int    i    =    0;    i    <    arguments.length;    i++)    {    String    arg    =    arguments[i];    if(!eatTheRest)    {    tokens.add(   "-    	non-compiled	[CE]  unclosed  string  literal	13	None	replace
171	[BUG]  [BUGGY]  While(stopAtNonOption)  {  for(int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if( ".-   ".equals(arg))  {  tokens.add(  [CE]  [FE]                ComparisonFailure      [CONTEXT]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }      [BUGGY]  While(stopAtNonOption)  {  for(int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if( ".-   ".equals(arg))  {  tokens.add(  [BUGGY]      else  if  (     "-     ".equals(arg))    {  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  String  opt  =  Util.stripLeadingHyphens(arg);  if  (options.hasOption(opt))  {  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	67	68	3	replace	While(stopAtNonOption)  {  for(int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if( ".-   ".equals(arg))  {  tokens.add(	  if(stopAtNonOption)    {    for(int    i    =    0;    i    <    arguments.length;    i++)    {    String    arg    =    arguments[i];    if(   ".-       ".equals(arg))    {    tokens.add(   "-       ");    }    	non-compiled	[CE]  	61	None	replace
172	[BUG]  [BUGGY]  While(stopAtNonOption)  {  for(int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if( ".-   ".equals(arg))  {  tokens.add( "-   ");  }  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }      [BUGGY]  While(stopAtNonOption)  {  for(int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if( ".-   ".equals(arg))  {  tokens.add( "-   ");  }  [BUGGY]      else  if  (     "-     ".equals(arg))    {  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  String  opt  =  Util.stripLeadingHyphens(arg);  if  (options.hasOption(opt))  {  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	67	68	3	replace	While(stopAtNonOption)  {  for(int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if( ".-   ".equals(arg))  {  tokens.add( "-   ");  }	  if(stopAtNonOption)    {    for(int    i    =    0;    i    <    arguments.length;    i++)    {    String    arg    =    arguments[i];    if(   ".-       ".equals(arg))    {    tokens.add(   "-       ");    }    	non-compiled	[CE]  	61	None	replace
173	[BUG]  [BUGGY]  While(stopAtNonOption)  {  for(int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if( ".-   ".equals(arg))  {  tokens.add( "-  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }      [BUGGY]  While(stopAtNonOption)  {  for(int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if( ".-   ".equals(arg))  {  tokens.add( "-  [BUGGY]      else  if  (     "-     ".equals(arg))    {  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  String  opt  =  Util.stripLeadingHyphens(arg);  if  (options.hasOption(opt))  {  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	67	68	3	replace	While(stopAtNonOption)  {  for(int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if( ".-   ".equals(arg))  {  tokens.add( "-	  if(stopAtNonOption)    {    for(int    i    =    0;    i    <    arguments.length;    i++)    {    String    arg    =    arguments[i];    if(   ".-       ".equals(arg))    {    tokens.add(   "-       ");    }    	non-compiled	[CE]  	61	None	replace
174	[BUG]  [BUGGY]  ||  stopAtNonOption)  {  for(int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if(arg.startsWith( "- "))  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }      [BUGGY]  ||  stopAtNonOption)  {  for(int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if(arg.startsWith( "- "))  {  [BUGGY]      else  if  (     "-     ".equals(arg))    {  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  String  opt  =  Util.stripLeadingHyphens(arg);  if  (options.hasOption(opt))  {  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	67	68	3	replace	||  stopAtNonOption)  {  for(int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if(arg.startsWith( "- "))  {	  if(stopAtNonOption)    {    for(int    i    =    0;    i    <    arguments.length;    i++)    {    String    arg    =    arguments[i];    if(arg.startsWith(   "-       "))    {    tokens.add(    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
175	[BUG]  [BUGGY]  else  if(arg.equals('-')||  '-'.equals(arg))  {  [CE]  char  cannot  be  dereferenced  [FE]                ComparisonFailure      [CONTEXT]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }      [BUGGY]  else  if(arg.equals('-')||  '-'.equals(arg))  {  [BUGGY]      {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  String  opt  =  Util.stripLeadingHyphens(arg);  if  (options.hasOption(opt))  {  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	67	68	3	replace	else  if(arg.equals('-')||  '-'.equals(arg))  {	  else    if('-'.equals(arg)||    '-'.equals(arg))    {    	non-compiled	[CE]  char  cannot  be  dereferenced	67	None	replace
176	[BUG]  [BUGGY]  else  if('-'.equals(arg)&&  '-'.equals(arg))  {  [CE]  char  cannot  be  dereferenced  [FE]                  ComparisonFailure      [CONTEXT]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }      [BUGGY]  else  if('-'.equals(arg)&&  '-'.equals(arg))  {  [BUGGY]      {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  String  opt  =  Util.stripLeadingHyphens(arg);  if  (options.hasOption(opt))  {  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	67	68	3	replace	else  if('-'.equals(arg)&&  '-'.equals(arg))  {	  else    if('-'.equals(arg)||    '-'.equals(arg))    {    	non-compiled	[CE]  char  cannot  be  dereferenced	67	None	replace
177	[BUG]  [BUGGY]  else  if('-'.equals(arg)||  '-'.equals(arg)&&!stopAtNonOption)  {  [CE]  char  cannot  be  dereferenced  [FE]                    ComparisonFailure      [CONTEXT]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }      [BUGGY]  else  if('-'.equals(arg)||  '-'.equals(arg)&&!stopAtNonOption)  {  [BUGGY]      {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  String  opt  =  Util.stripLeadingHyphens(arg);  if  (options.hasOption(opt))  {  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	67	68	3	replace	else  if('-'.equals(arg)||  '-'.equals(arg)&&!stopAtNonOption)  {	  else    if('-'.equals(arg)||    '-'.equals(arg))    {    	non-compiled	[CE]  char  cannot  be  dereferenced	67	None	replace
178	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }      [BUGGY]  else  if( "--   ".equals(arg)&&  eatTheRest)  {  [BUGGY]      {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  String  opt  =  Util.stripLeadingHyphens(arg);  if  (options.hasOption(opt))  {  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	67	68	3	add	else  if( "--   ".equals(arg)&&  eatTheRest)  {	  else    if(   "--       ".equals(arg)||    eatTheRest)    {    	compilable	  [FE]  StringIndexOutOfBoundsException  	76	4	replace
179	[BUG]  [BUGGY]  else  if( "--   ".equals(arg)&&  eatTheRest)  {  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }      [BUGGY]  else  if( "--   ".equals(arg)&&  eatTheRest)  {  [BUGGY]      {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  String  opt  =  Util.stripLeadingHyphens(arg);  if  (options.hasOption(opt))  {  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	67	68	3	replace	else  if( "--   ".equals(arg)&&  eatTheRest)  {	  else    if(   "--       ".equals(arg)||    eatTheRest)    {    	compilable	  [FE]  StringIndexOutOfBoundsException  	76	4	replace
180	[BUG]  [BUGGY]  tokens.add( "--   ",  stopAtNonOption);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }      [BUGGY]  tokens.add( "--   ",  stopAtNonOption);  [BUGGY]      else  if  (     "-     ".equals(arg))    {  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  String  opt  =  Util.stripLeadingHyphens(arg);  if  (options.hasOption(opt))  {  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	67	68	3	replace	tokens.add( "--   ",  stopAtNonOption);	  tokens.add(   "--   ",    eatTheRest);    	non-compiled	[CE]  	33	None	replace
181	[BUG]  [BUGGY]  tokens.add( "--   ",  arg);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }      [BUGGY]  tokens.add( "--   ",  arg);  [BUGGY]      else  if  (     "-     ".equals(arg))    {  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  String  opt  =  Util.stripLeadingHyphens(arg);  if  (options.hasOption(opt))  {  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	67	68	3	replace	tokens.add( "--   ",  arg);	  tokens.add(   "--   ",    eatTheRest);    	non-compiled	[CE]  	33	None	replace
182	[BUG]  [BUGGY]  else  if(   "--     ".equals(arg)||!stopAtNonOption)  {  else  if( "--   ".equals(arg)||!stopAtNonOption)  {  [CE]  [FE]    AssertionFailedError    [CONTEXT]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }      [BUGGY]  else  if(   "--     ".equals(arg)||!stopAtNonOption)  {  else  if( "--   ".equals(arg)||!stopAtNonOption)  {  [BUGGY]      {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  String  opt  =  Util.stripLeadingHyphens(arg);  if  (options.hasOption(opt))  {  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	67	68	3	replace	else    if(   "--       ".equals(arg)||!stopAtNonOption)    {    else  if( "--   ".equals(arg)||!stopAtNonOption)  {	  	non-compiled	[CE]  	29	None	add
183	[BUG]  [BUGGY]  else  if(   "--     ".equals(arg)||!stopAtNonOption)  {  else  if( ".--   ".equals(arg)||!stopAtNonOption)  {  [CE]  [FE]      AssertionFailedError    [CONTEXT]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }      [BUGGY]  else  if(   "--     ".equals(arg)||!stopAtNonOption)  {  else  if( ".--   ".equals(arg)||!stopAtNonOption)  {  [BUGGY]      {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  String  opt  =  Util.stripLeadingHyphens(arg);  if  (options.hasOption(opt))  {  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	67	68	3	replace	else    if(   "--       ".equals(arg)||!stopAtNonOption)    {    else  if( ".--   ".equals(arg)||!stopAtNonOption)  {	  	non-compiled	[CE]  	29	None	add
184	[BUG]  [BUGGY]  else  if(   "--     ".equals(arg)||!stopAtNonOption)  {  else  if(! "--   ".equals(arg)||!stopAtNonOption)  {  [CE]  [FE]        AssertionFailedError    [CONTEXT]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }      [BUGGY]  else  if(   "--     ".equals(arg)||!stopAtNonOption)  {  else  if(! "--   ".equals(arg)||!stopAtNonOption)  {  [BUGGY]      {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  String  opt  =  Util.stripLeadingHyphens(arg);  if  (options.hasOption(opt))  {  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	67	68	3	replace	else    if(   "--       ".equals(arg)||!stopAtNonOption)    {    else  if(! "--   ".equals(arg)||!stopAtNonOption)  {	  	non-compiled	[CE]  	29	None	add
185	[BUG]  [BUGGY]  else  if(   "-     ".equals(arg)||!eatTheRest)  {  else  if('-   ".equals(arg)||!eatTheRest)  {  [CE]  [FE]    AssertionFailedError    [CONTEXT]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }      [BUGGY]  else  if(   "-     ".equals(arg)||!eatTheRest)  {  else  if('-   ".equals(arg)||!eatTheRest)  {  [BUGGY]      {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  String  opt  =  Util.stripLeadingHyphens(arg);  if  (options.hasOption(opt))  {  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	67	68	3	replace	else    if(   "-       ".equals(arg)||!eatTheRest)    {    else  if('-   ".equals(arg)||!eatTheRest)  {	  	non-compiled	[CE]  	2	None	add
186	[BUG]  [BUGGY]  tokens.add(i  +  1);  [CE]  [FE]            ComparisonFailure      [CONTEXT]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }      [BUGGY]  tokens.add(i  +  1);  [BUGGY]      else  if  (     "-     ".equals(arg))    {  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  String  opt  =  Util.stripLeadingHyphens(arg);  if  (options.hasOption(opt))  {  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	67	68	3	replace	tokens.add(i  +  1);	  tokens.add(arg    +    1);    	non-compiled	[CE]  	1	None	replace
187	[BUG]  [BUGGY]  if(stopAtNonOption)  {  for(int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if('-'.equals(arg))  {  tokens.add( "  [CE]  unclosed  string  literal  [FE]                      ComparisonFailure      [CONTEXT]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }      [BUGGY]  if(stopAtNonOption)  {  for(int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if('-'.equals(arg))  {  tokens.add( "  [BUGGY]      else  if  (     "-     ".equals(arg))    {  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  String  opt  =  Util.stripLeadingHyphens(arg);  if  (options.hasOption(opt))  {  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	67	68	3	replace	if(stopAtNonOption)  {  for(int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if('-'.equals(arg))  {  tokens.add( "	  if(stopAtNonOption)    {    for(int    i    =    0;    i    <    arguments.length;    i++)    {    String    arg    =    arguments[i];    if('-'.equals(arg))    {    tokens.add(   "-    	non-compiled	[CE]  unclosed  string  literal	45	None	replace
188	[BUG]  [BUGGY]  tokens.add( "-eatTheRest ");  [CE]  [FE]              ComparisonFailure      [CONTEXT]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }      [BUGGY]  tokens.add( "-eatTheRest ");  [BUGGY]      else  if  (     "-     ".equals(arg))    {  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  String  opt  =  Util.stripLeadingHyphens(arg);  if  (options.hasOption(opt))  {  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	67	68	3	replace	tokens.add( "-eatTheRest ");	  tokens.add(   "-n   ");    	non-compiled	[CE]  	26	None	replace
189	[BUG]  [BUGGY]  else  if(   "stopAtNonOption     ".equals(arg))  {  tokens.add( "stopAtNonOption   ");  [CE]  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }      [BUGGY]  else  if(   "stopAtNonOption     ".equals(arg))  {  tokens.add( "stopAtNonOption   ");  [BUGGY]      {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  String  opt  =  Util.stripLeadingHyphens(arg);  if  (options.hasOption(opt))  {  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	67	68	3	replace	else    if(   "stopAtNonOption       ".equals(arg))    {    tokens.add( "stopAtNonOption   ");	  	non-compiled	[CE]  	17	None	add
190	[BUG]  [BUGGY]  Option  options  =  options.getOptions();  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }      [BUGGY]  Option  options  =  options.getOptions();  [BUGGY]      else  if  (     "-     ".equals(arg))    {  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  String  opt  =  Util.stripLeadingHyphens(arg);  if  (options.hasOption(opt))  {  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	67	68	3	replace	Option  options  =  options.getOptions();	  if(stopAtNonOption)    {    for(int    i    =    0;    i    <    arguments.length;    i++)    {    String    arg    =    arguments[i];    if('-'.equals(arg))    {    tokens.add(   "-       ");    }    	non-compiled	[CE]  	44	None	replace
191	[BUG]  [BUGGY]  else  if(!stopAtNonOption)  {  if(stopAtNonOption)  {  [CE]  [FE]    AssertionFailedError    [CONTEXT]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }      [BUGGY]  else  if(!stopAtNonOption)  {  if(stopAtNonOption)  {  [BUGGY]      {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  String  opt  =  Util.stripLeadingHyphens(arg);  if  (options.hasOption(opt))  {  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	67	68	3	replace	else    if(!stopAtNonOption)    {    if(stopAtNonOption)  {	  	non-compiled	[CE]  	31	None	add
192	[BUG]  [BUGGY]  else  if(!stopAtNonOption)  {  TokenBuffer  tokens  =  new  TokenBuffer(tokens);  [CE]  [FE]      AssertionFailedError    [CONTEXT]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }      [BUGGY]  else  if(!stopAtNonOption)  {  TokenBuffer  tokens  =  new  TokenBuffer(tokens);  [BUGGY]      {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  String  opt  =  Util.stripLeadingHyphens(arg);  if  (options.hasOption(opt))  {  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	67	68	3	replace	else    if(!stopAtNonOption)    {    TokenBuffer  tokens  =  new  TokenBuffer(tokens);	  	non-compiled	[CE]  	31	None	add
193	[BUG]  [BUGGY]  else  if(options.hasOption(stopAtNonOption))  {  [CE]  method  hasOption  in  class  Options  cannot  be  applied  to  given  types;  [FE]        StringIndexOutOfBoundsException      [CONTEXT]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }      [BUGGY]  else  if(options.hasOption(stopAtNonOption))  {  [BUGGY]      {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  String  opt  =  Util.stripLeadingHyphens(arg);  if  (options.hasOption(opt))  {  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	67	68	3	replace	else  if(options.hasOption(stopAtNonOption))  {	  else    if(       "--       ".equals(arg))    {    else    if(   "--       ".equals(arg))    {    	non-compiled	[CE]  method  hasOption  in  class  Options  cannot  be  applied  to  given  types;	52	None	replace
194	[BUG]  [BUGGY]  else  if(stopAtNonOption  &&  options.hasOption(opt))  {  [CE]  cannot  find  symbol  opt  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }      [BUGGY]  else  if(stopAtNonOption  &&  options.hasOption(opt))  {  [BUGGY]      {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  String  opt  =  Util.stripLeadingHyphens(arg);  if  (options.hasOption(opt))  {  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	67	68	3	replace	else  if(stopAtNonOption  &&  options.hasOption(opt))  {	  else    if(!stopAtNonOption    &&   "eatTheRest   ".equals(arg))    {    	non-compiled	[CE]  cannot  find  symbol  opt	80	None	replace
195	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]      StringIndexOutOfBoundsException    [CONTEXT]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }      [BUGGY]  else  if(stopAtNonOption  &&   "-- ".equals(arg))  {  [BUGGY]      {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  String  opt  =  Util.stripLeadingHyphens(arg);  if  (options.hasOption(opt))  {  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	67	68	3	add	else  if(stopAtNonOption  &&   "-- ".equals(arg))  {	  else    if(!stopAtNonOption    &&   "eatTheRest   ".equals(arg))    {    	compilable	  [FE]  StringIndexOutOfBoundsException  	80	4	replace
196	[BUG]  [BUGGY]  else  if(stopAtNonOption  &&   "-- ".equals(arg))  {  [FE]  StringIndexOutOfBoundsException  [FE]      StringIndexOutOfBoundsException    [CONTEXT]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }      [BUGGY]  else  if(stopAtNonOption  &&   "-- ".equals(arg))  {  [BUGGY]      {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  String  opt  =  Util.stripLeadingHyphens(arg);  if  (options.hasOption(opt))  {  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	67	68	3	replace	else  if(stopAtNonOption  &&   "-- ".equals(arg))  {	  else    if(!stopAtNonOption    &&   "eatTheRest   ".equals(arg))    {    	compilable	  [FE]  StringIndexOutOfBoundsException  	80	4	replace
197	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]        StringIndexOutOfBoundsException    [CONTEXT]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }      [BUGGY]  else  if(stopAtNonOption  &&   "-eatTheRest ".equals(arg))  {  [BUGGY]      {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  String  opt  =  Util.stripLeadingHyphens(arg);  if  (options.hasOption(opt))  {  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	67	68	3	add	else  if(stopAtNonOption  &&   "-eatTheRest ".equals(arg))  {	  else    if(!stopAtNonOption    &&   "eatTheRest   ".equals(arg))    {    	compilable	  [FE]  StringIndexOutOfBoundsException  	80	4	replace
198	[BUG]  [BUGGY]  else  if(stopAtNonOption  &&   "-eatTheRest ".equals(arg))  {  [FE]  StringIndexOutOfBoundsException  [FE]        StringIndexOutOfBoundsException    [CONTEXT]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }      [BUGGY]  else  if(stopAtNonOption  &&   "-eatTheRest ".equals(arg))  {  [BUGGY]      {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  String  opt  =  Util.stripLeadingHyphens(arg);  if  (options.hasOption(opt))  {  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	67	68	3	replace	else  if(stopAtNonOption  &&   "-eatTheRest ".equals(arg))  {	  else    if(!stopAtNonOption    &&   "eatTheRest   ".equals(arg))    {    	compilable	  [FE]  StringIndexOutOfBoundsException  	80	4	replace
199	[BUG]  [BUGGY]  else  if( "-   ".equals(arg)||  stopAtNonOption  ||  options.hasOption(opt))  {  [CE]  cannot  find  symbol  opt  [FE]    AssertionFailedError    [CONTEXT]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }      [BUGGY]  else  if( "-   ".equals(arg)||  stopAtNonOption  ||  options.hasOption(opt))  {  [BUGGY]      {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  String  opt  =  Util.stripLeadingHyphens(arg);  if  (options.hasOption(opt))  {  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	67	68	3	replace	else  if( "-   ".equals(arg)||  stopAtNonOption  ||  options.hasOption(opt))  {	  else    if(   "-       ".equals(arg)||    stopAtNonOption)    {    	non-compiled	[CE]  cannot  find  symbol  opt	20	None	replace
200	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }      [BUGGY]  else  if( "-   ".equals(arg)||  stopAtNonOption  ||  eatTheRest)  {  [BUGGY]      {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  String  opt  =  Util.stripLeadingHyphens(arg);  if  (options.hasOption(opt))  {  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	67	68	3	add	else  if( "-   ".equals(arg)||  stopAtNonOption  ||  eatTheRest)  {	  else    if(   "-       ".equals(arg)||    stopAtNonOption)    {    	compilable	  [FE]  AssertionFailedError  	20	7	replace
201	[BUG]  [BUGGY]  else  if( "-   ".equals(arg)||  stopAtNonOption  ||  eatTheRest)  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }      [BUGGY]  else  if( "-   ".equals(arg)||  stopAtNonOption  ||  eatTheRest)  {  [BUGGY]      {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  String  opt  =  Util.stripLeadingHyphens(arg);  if  (options.hasOption(opt))  {  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	67	68	3	replace	else  if( "-   ".equals(arg)||  stopAtNonOption  ||  eatTheRest)  {	  else    if(   "-       ".equals(arg)||    stopAtNonOption)    {    	compilable	  [FE]  AssertionFailedError  	20	7	replace
202	[BUG]  [BUGGY]  else  if(options.hasOption(opt))  {  [CE]  cannot  find  symbol  opt  [FE]            ComparisonFailure      [CONTEXT]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }      [BUGGY]  else  if(options.hasOption(opt))  {  [BUGGY]      {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  String  opt  =  Util.stripLeadingHyphens(arg);  if  (options.hasOption(opt))  {  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	67	68	3	replace	else  if(options.hasOption(opt))  {	  else    if(       "-       ".equals(arg)&&!stopAtNonOption)    {    else    if(!   "-       ".equals(arg)&&!stopAtNonOption)    {    	non-compiled	[CE]  cannot  find  symbol  opt	59	None	replace
203	[BUG]  [BUGGY]  else  if(!   "-   ".equals(arg)&&!stopAtNonOption)  {  else  if(!   "-   ".equals(arg)&&! "stopAtNonOption)  {  [CE]  [FE]    AssertionFailedError    [CONTEXT]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }      [BUGGY]  else  if(!   "-   ".equals(arg)&&!stopAtNonOption)  {  else  if(!   "-   ".equals(arg)&&! "stopAtNonOption)  {  [BUGGY]      {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  String  opt  =  Util.stripLeadingHyphens(arg);  if  (options.hasOption(opt))  {  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	67	68	3	replace	else    if(!   "-   ".equals(arg)&&!stopAtNonOption)    {    else  if(!   "-   ".equals(arg)&&! "stopAtNonOption)  {	  	non-compiled	[CE]  	4	None	add
204	[BUG]  [BUGGY]  else  if(   "--     ".equals(arg)||!stopAtNonOption)  {  else  if('--   ".equals(arg)||!stopAtNonOption)  {  [CE]  [FE]    AssertionFailedError    [CONTEXT]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }      [BUGGY]  else  if(   "--     ".equals(arg)||!stopAtNonOption)  {  else  if('--   ".equals(arg)||!stopAtNonOption)  {  [BUGGY]      {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  String  opt  =  Util.stripLeadingHyphens(arg);  if  (options.hasOption(opt))  {  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	67	68	3	replace	else    if(   "--       ".equals(arg)||!stopAtNonOption)    {    else  if('--   ".equals(arg)||!stopAtNonOption)  {	  	non-compiled	[CE]  	29	None	add
205	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }      [BUGGY]  else  if( "-eatTheRest   ".equals(arg)||  stopAtNonOption)  {  [BUGGY]      {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  String  opt  =  Util.stripLeadingHyphens(arg);  if  (options.hasOption(opt))  {  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	67	68	3	add	else  if( "-eatTheRest   ".equals(arg)||  stopAtNonOption)  {	  else    if(   "-eatTheRest   ".equals(arg))    {    	compilable	  [FE]  AssertionFailedError  	82	7	replace
206	[BUG]  [BUGGY]  else  if( "-eatTheRest   ".equals(arg)||  stopAtNonOption)  {  [FE]  AssertionFailedError  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }      [BUGGY]  else  if( "-eatTheRest   ".equals(arg)||  stopAtNonOption)  {  [BUGGY]      {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  String  opt  =  Util.stripLeadingHyphens(arg);  if  (options.hasOption(opt))  {  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	67	68	3	replace	else  if( "-eatTheRest   ".equals(arg)||  stopAtNonOption)  {	  else    if(   "-eatTheRest   ".equals(arg))    {    	compilable	  [FE]  AssertionFailedError  	82	7	replace
207	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }      [BUGGY]  else  if(! "--   ".equals(arg)&&!stopAtNonOption)  {  [BUGGY]      {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  String  opt  =  Util.stripLeadingHyphens(arg);  if  (options.hasOption(opt))  {  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	67	68	3	add	else  if(! "--   ".equals(arg)&&!stopAtNonOption)  {	  else    if(   "--       ".equals(arg)&&!eatTheRest)    {    	compilable	  [FE]  AssertionFailedError  	100	13	replace
208	[BUG]  [BUGGY]  else  if(! "--   ".equals(arg)&&!stopAtNonOption)  {  [FE]  AssertionFailedError  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }      [BUGGY]  else  if(! "--   ".equals(arg)&&!stopAtNonOption)  {  [BUGGY]      {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  String  opt  =  Util.stripLeadingHyphens(arg);  if  (options.hasOption(opt))  {  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	67	68	3	replace	else  if(! "--   ".equals(arg)&&!stopAtNonOption)  {	  else    if(   "--       ".equals(arg)&&!eatTheRest)    {    	compilable	  [FE]  AssertionFailedError  	100	13	replace
209	[BUG]  [BUGGY]  else  if( "--   ".equals(arg)||  stopAtNonOption  ||  options.hasOption(opt))  {  [CE]  cannot  find  symbol  opt  [FE]    AssertionFailedError    [CONTEXT]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }      [BUGGY]  else  if( "--   ".equals(arg)||  stopAtNonOption  ||  options.hasOption(opt))  {  [BUGGY]      {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  String  opt  =  Util.stripLeadingHyphens(arg);  if  (options.hasOption(opt))  {  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	67	68	3	replace	else  if( "--   ".equals(arg)||  stopAtNonOption  ||  options.hasOption(opt))  {	  else    if(   "--       ".equals(arg)||    stopAtNonOption)    {    	non-compiled	[CE]  cannot  find  symbol  opt	78	None	replace
210	[BUG]  [BUGGY]  Option  options  =  option.getOptions();  [CE]  [FE]              ComparisonFailure      [CONTEXT]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }      [BUGGY]  Option  options  =  option.getOptions();  [BUGGY]      else  if  (     "-     ".equals(arg))    {  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  String  opt  =  Util.stripLeadingHyphens(arg);  if  (options.hasOption(opt))  {  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	67	68	3	replace	Option  options  =  option.getOptions();	  if(!eatTheRest)    {    for(int    i    =    0;    i    <    arguments.length;    i++)    {    String    arg    =    arguments[i];    if(!       "-       ".equals(arg))    {    tokens.add(   "-       ");    }    	non-compiled	[CE]  	96	None	replace
211	[BUG]  [BUGGY]  tokens.add( "--   ".equals(arg));  [CE]  [FE]            ComparisonFailure      [CONTEXT]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }      [BUGGY]  tokens.add( "--   ".equals(arg));  [BUGGY]      else  if  (     "-     ".equals(arg))    {  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  String  opt  =  Util.stripLeadingHyphens(arg);  if  (options.hasOption(opt))  {  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	67	68	3	replace	tokens.add( "--   ".equals(arg));	  tokens.add(   "-   ".equals(arg));    	non-compiled	[CE]  	25	None	replace
212	[BUG]  [BUGGY]  tokens.add( "-- ").equals(arg));  [CE]  [FE]              ComparisonFailure      [CONTEXT]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }      [BUGGY]  tokens.add( "-- ").equals(arg));  [BUGGY]      else  if  (     "-     ".equals(arg))    {  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  String  opt  =  Util.stripLeadingHyphens(arg);  if  (options.hasOption(opt))  {  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	67	68	3	replace	tokens.add( "-- ").equals(arg));	  tokens.add(   "-   ".equals(arg));    	non-compiled	[CE]  	25	None	replace
213	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        ComparisonFailure      [CONTEXT]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }      [BUGGY]  else  if(stopAtNonOption)  {  [BUGGY]      {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  String  opt  =  Util.stripLeadingHyphens(arg);  if  (options.hasOption(opt))  {  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	67	68	3	add	else  if(stopAtNonOption)  {	  else    if(       "-       ".equals(arg)&&!eatTheRest)    {    else    if(!   "-       ".equals(arg)&&!eatTheRest)    {    	compilable	  [FE]  AssertionFailedError  	65	7	replace
214	[BUG]  [BUGGY]  else  if(stopAtNonOption)  {  [FE]  AssertionFailedError  [FE]        ComparisonFailure      [CONTEXT]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }      [BUGGY]  else  if(stopAtNonOption)  {  [BUGGY]      {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  String  opt  =  Util.stripLeadingHyphens(arg);  if  (options.hasOption(opt))  {  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	67	68	3	replace	else  if(stopAtNonOption)  {	  else    if(       "-       ".equals(arg)&&!eatTheRest)    {    else    if(!   "-       ".equals(arg)&&!eatTheRest)    {    	compilable	  [FE]  AssertionFailedError  	65	7	replace
215	[BUG]  [BUGGY]  Option  options  =  options.getOptions(opt);  [CE]  [FE]              ComparisonFailure      [CONTEXT]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }      [BUGGY]  Option  options  =  options.getOptions(opt);  [BUGGY]      else  if  (     "-     ".equals(arg))    {  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  String  opt  =  Util.stripLeadingHyphens(arg);  if  (options.hasOption(opt))  {  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	67	68	3	replace	Option  options  =  options.getOptions(opt);	  if(stopAtNonOption)    {    for(int    i    =    0;    i    <    arguments.length;    i++)    {    String    arg    =    arguments[i];    if(!       "-       ".equals(arg))    {    tokens.add(    	non-compiled	[CE]  	74	None	replace
216	[BUG]  [BUGGY]  tokens.add( "-- "  +  eatTheRest);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }      [BUGGY]  tokens.add( "-- "  +  eatTheRest);  [BUGGY]      else  if  (     "-     ".equals(arg))    {  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  String  opt  =  Util.stripLeadingHyphens(arg);  if  (options.hasOption(opt))  {  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	67	68	3	replace	tokens.add( "-- "  +  eatTheRest);	  tokens.add(   "--   ",    eatTheRest);    	non-compiled	[CE]  	33	None	replace
217	[BUG]  [BUGGY]  fortunately,  stopAtNonOption)  {  for(int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if(!eatTheRest)  {  [CE]  not  a  statement  [FE]                      ComparisonFailure      [CONTEXT]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }      [BUGGY]  fortunately,  stopAtNonOption)  {  for(int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if(!eatTheRest)  {  [BUGGY]      else  if  (     "-     ".equals(arg))    {  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  String  opt  =  Util.stripLeadingHyphens(arg);  if  (options.hasOption(opt))  {  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	67	68	3	replace	fortunately,  stopAtNonOption)  {  for(int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if(!eatTheRest)  {	  fortunately,    stopAtNonOption)    {    for(int    i    =    0;    i    <    arguments.length;    i++)    {    String    arg    =    arguments[i];    if(!eatTheRest)    {    tokens.add(   "-    	non-compiled	[CE]  not  a  statement	102	None	replace
218	[BUG]  [BUGGY]  else  if(   "-     ".equals(arg)&&  eatTheRest)  {  else  if('-   ".equals(arg)&&  eatTheRest)  {  [CE]  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }      [BUGGY]  else  if(   "-     ".equals(arg)&&  eatTheRest)  {  else  if('-   ".equals(arg)&&  eatTheRest)  {  [BUGGY]      {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  String  opt  =  Util.stripLeadingHyphens(arg);  if  (options.hasOption(opt))  {  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	67	68	3	replace	else    if(   "-       ".equals(arg)&&    eatTheRest)    {    else  if('-   ".equals(arg)&&  eatTheRest)  {	  	non-compiled	[CE]  	21	None	add
219	[BUG]  [BUGGY]  else  if(!eatTheRest.equals(arg)&&!stopAtNonOption)  {  [CE]  boolean  cannot  be  dereferenced  [FE]    AssertionFailedError    [CONTEXT]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }      [BUGGY]  else  if(!eatTheRest.equals(arg)&&!stopAtNonOption)  {  [BUGGY]      {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  String  opt  =  Util.stripLeadingHyphens(arg);  if  (options.hasOption(opt))  {  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	67	68	3	replace	else  if(!eatTheRest.equals(arg)&&!stopAtNonOption)  {	  else    if(!   "-   ".equals(arg)&&!stopAtNonOption)    {    	non-compiled	[CE]  boolean  cannot  be  dereferenced	5	None	replace
220	[BUG]  [BUGGY]  else  if(!stopAtNonOption.equals(arg))  {  [CE]  boolean  cannot  be  dereferenced  [FE]      AssertionFailedError    [CONTEXT]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }      [BUGGY]  else  if(!stopAtNonOption.equals(arg))  {  [BUGGY]      {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  String  opt  =  Util.stripLeadingHyphens(arg);  if  (options.hasOption(opt))  {  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	67	68	3	replace	else  if(!stopAtNonOption.equals(arg))  {	  else    if(!   "-   ".equals(arg)&&!stopAtNonOption)    {    	non-compiled	[CE]  boolean  cannot  be  dereferenced	5	None	replace
221	[BUG]  [BUGGY]  }  else  if(options.hasOption(stopAtNonOption))  {  tokens.add( "- ");  }  [CE]  [FE]                ComparisonFailure      [CONTEXT]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }      [BUGGY]  }  else  if(options.hasOption(stopAtNonOption))  {  tokens.add( "- ");  }  [BUGGY]      else  if  (     "-     ".equals(arg))    {  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  String  opt  =  Util.stripLeadingHyphens(arg);  if  (options.hasOption(opt))  {  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	67	68	3	replace	}  else  if(options.hasOption(stopAtNonOption))  {  tokens.add( "- ");  }	  }    else    {    tokens.add(   "-   ");    }    	non-compiled	[CE]  	92	None	replace
222	[BUG]  [BUGGY]  }  else  if(arg.startsWith( "-   "))  {  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }      [BUGGY]  }  else  if(arg.startsWith( "-   "))  {  [BUGGY]      else  if  (     "-     ".equals(arg))    {  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  String  opt  =  Util.stripLeadingHyphens(arg);  if  (options.hasOption(opt))  {  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	67	68	3	replace	}  else  if(arg.startsWith( "-   "))  {	  }    else    {    tokens.add(   "-   ");    }    	non-compiled	[CE]  	92	None	replace
223	[BUG]  [BUGGY]  Option  option  =  options.getOption(option);  [CE]  [FE]    AssertionFailedError    [CONTEXT]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }      [BUGGY]  Option  option  =  options.getOption(option);  [BUGGY]      else  if  (     "-     ".equals(arg))    {  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  String  opt  =  Util.stripLeadingHyphens(arg);  if  (options.hasOption(opt))  {  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	67	68	3	replace	Option  option  =  options.getOption(option);	          if(stopAtNonOption)    {    tokens.add(       "-       ");    }    if(stopAtNonOption)    {    tokens.add(   "-       ");    }    	non-compiled	[CE]  	41	None	replace
224	[BUG]  [BUGGY]  else  if(   "--     ".equals(arg)||!eatTheRest)  {  else  if(! "--   ".equals(arg)||!eatTheRest)  {  [CE]  [FE]    AssertionFailedError    [CONTEXT]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }      [BUGGY]  else  if(   "--     ".equals(arg)||!eatTheRest)  {  else  if(! "--   ".equals(arg)||!eatTheRest)  {  [BUGGY]      {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  String  opt  =  Util.stripLeadingHyphens(arg);  if  (options.hasOption(opt))  {  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	67	68	3	replace	else    if(   "--       ".equals(arg)||!eatTheRest)    {    else  if(! "--   ".equals(arg)||!eatTheRest)  {	  	non-compiled	[CE]  	97	None	add
225	[BUG]  [BUGGY]  else  if(   "--     ".equals(arg)||!eatTheRest)  {  else  if('--   ".equals(arg)||!eatTheRest)  {  [CE]  [FE]      AssertionFailedError    [CONTEXT]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }      [BUGGY]  else  if(   "--     ".equals(arg)||!eatTheRest)  {  else  if('--   ".equals(arg)||!eatTheRest)  {  [BUGGY]      {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  String  opt  =  Util.stripLeadingHyphens(arg);  if  (options.hasOption(opt))  {  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	67	68	3	replace	else    if(   "--       ".equals(arg)||!eatTheRest)    {    else  if('--   ".equals(arg)||!eatTheRest)  {	  	non-compiled	[CE]  	97	None	add
226	[BUG]  [BUGGY]  if(stopAtNonOption)  {  for(int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if(! "-   ".equals(arg))  {  tokens.add( "-   ");  }  }  [CE]  variable  i  is  already  defined  in  method  flatten(Options,String[],boolean)  [FE]                ComparisonFailure      [CONTEXT]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }      [BUGGY]  if(stopAtNonOption)  {  for(int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if(! "-   ".equals(arg))  {  tokens.add( "-   ");  }  }  [BUGGY]      else  if  (     "-     ".equals(arg))    {  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  String  opt  =  Util.stripLeadingHyphens(arg);  if  (options.hasOption(opt))  {  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	67	68	3	replace	if(stopAtNonOption)  {  for(int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if(! "-   ".equals(arg))  {  tokens.add( "-   ");  }  }	  if(stopAtNonOption)    {    for(int    i    =    0;    i    <    arguments.length;    i++)    {    String    arg    =    arguments[i];    if(   "-       ".equals(arg))    {    tokens.add(   "-       ");    }    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  flatten(Options,String[],boolean)	83	None	replace
227	[BUG]  [BUGGY]  else  if(! "stopAtNonOption ".equals(arg)&&  options.hasOption(opt))  {  [CE]  cannot  find  symbol  opt  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }      [BUGGY]  else  if(! "stopAtNonOption ".equals(arg)&&  options.hasOption(opt))  {  [BUGGY]      {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  String  opt  =  Util.stripLeadingHyphens(arg);  if  (options.hasOption(opt))  {  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	67	68	3	replace	else  if(! "stopAtNonOption ".equals(arg)&&  options.hasOption(opt))  {	  else    if(   "stopAtNonOption       ".equals(arg))    {    	non-compiled	[CE]  cannot  find  symbol  opt	18	None	replace
228	[BUG]  [BUGGY]  else  if(   "--     ".equals(arg)&&!stopAtNonOption)  {  else  if( "--   ".equals(arg)&&! "stopAtNonOption)  {  [CE]  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }      [BUGGY]  else  if(   "--     ".equals(arg)&&!stopAtNonOption)  {  else  if( "--   ".equals(arg)&&! "stopAtNonOption)  {  [BUGGY]      {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  String  opt  =  Util.stripLeadingHyphens(arg);  if  (options.hasOption(opt))  {  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	67	68	3	replace	else    if(   "--       ".equals(arg)&&!stopAtNonOption)    {    else  if( "--   ".equals(arg)&&! "stopAtNonOption)  {	  	non-compiled	[CE]  	27	None	add
229	[BUG]  [BUGGY]  while(!stopAtNonOption  &&  options.hasOption(opt))  {  for(int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if('-'.equals(arg))  {  tokens  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }      [BUGGY]  while(!stopAtNonOption  &&  options.hasOption(opt))  {  for(int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if('-'.equals(arg))  {  tokens  [BUGGY]      else  if  (     "-     ".equals(arg))    {  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  String  opt  =  Util.stripLeadingHyphens(arg);  if  (options.hasOption(opt))  {  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	67	68	3	replace	while(!stopAtNonOption  &&  options.hasOption(opt))  {  for(int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if('-'.equals(arg))  {  tokens	  while(!stopAtNonOption)    {    for(int    i    =    0;    i    <    arguments.length;    i++)    {    String    arg    =    arguments[i];    if('-'.equals(arg))    {    tokens.add(   "-       ");    }    	non-compiled	[CE]  	95	None	replace
230	[BUG]  [BUGGY]  while(stopAtNonOption)  {  for(int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if('-'.equals(arg))  {  tokens.add( "-   ");  }  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }      [BUGGY]  while(stopAtNonOption)  {  for(int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if('-'.equals(arg))  {  tokens.add( "-   ");  }  [BUGGY]      else  if  (     "-     ".equals(arg))    {  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  String  opt  =  Util.stripLeadingHyphens(arg);  if  (options.hasOption(opt))  {  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	67	68	3	replace	while(stopAtNonOption)  {  for(int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if('-'.equals(arg))  {  tokens.add( "-   ");  }	  while(!stopAtNonOption)    {    for(int    i    =    0;    i    <    arguments.length;    i++)    {    String    arg    =    arguments[i];    if('-'.equals(arg))    {    tokens.add(   "-       ");    }    	non-compiled	[CE]  	95	None	replace
231	[BUG]  [BUGGY]  while(!stopAtNonOption  &&  options.hasOption(opt))  {  for(int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if('-'.equals(arg))  {  [CE]  reached  end  of  file  while  parsing  [FE]                          ComparisonFailure      [CONTEXT]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }      [BUGGY]  while(!stopAtNonOption  &&  options.hasOption(opt))  {  for(int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if('-'.equals(arg))  {  [BUGGY]      else  if  (     "-     ".equals(arg))    {  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  String  opt  =  Util.stripLeadingHyphens(arg);  if  (options.hasOption(opt))  {  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	67	68	3	replace	while(!stopAtNonOption  &&  options.hasOption(opt))  {  for(int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if('-'.equals(arg))  {	  while(!stopAtNonOption)    {    for(int    i    =    0;    i    <    arguments.length;    i++)    {    String    arg    =    arguments[i];    if('-'.equals(arg))    {    tokens.add(   "-       ");    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	95	None	replace
232	[BUG]  [BUGGY]  else  if('-'.equals(arg)||  '-'.equals(opt))  {  [CE]  char  cannot  be  dereferenced  [FE]                ComparisonFailure      [CONTEXT]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }      [BUGGY]  else  if('-'.equals(arg)||  '-'.equals(opt))  {  [BUGGY]      {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  String  opt  =  Util.stripLeadingHyphens(arg);  if  (options.hasOption(opt))  {  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	67	68	3	replace	else  if('-'.equals(arg)||  '-'.equals(opt))  {	  else    if('-'.equals(arg)||    '-'.equals(arg))    {    	non-compiled	[CE]  char  cannot  be  dereferenced	67	None	replace
233	[BUG]  [BUGGY]  else  if(!stopAtNonOption  &&  options.hasOption(opt))  {  [CE]  cannot  find  symbol  opt  [FE]    AssertionFailedError    [CONTEXT]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }      [BUGGY]  else  if(!stopAtNonOption  &&  options.hasOption(opt))  {  [BUGGY]      {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  String  opt  =  Util.stripLeadingHyphens(arg);  if  (options.hasOption(opt))  {  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	67	68	3	replace	else  if(!stopAtNonOption  &&  options.hasOption(opt))  {	  else    if(!stopAtNonOption)    {    	non-compiled	[CE]  cannot  find  symbol  opt	32	None	replace
234	[BUG]  [BUGGY]  if(stopAtNonOption)  {  for(int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if(!   "-   ".equals(arg))  {  eatTheRest  =  true;  tokens  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }      [BUGGY]  if(stopAtNonOption)  {  for(int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if(!   "-   ".equals(arg))  {  eatTheRest  =  true;  tokens  [BUGGY]      else  if  (     "-     ".equals(arg))    {  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  String  opt  =  Util.stripLeadingHyphens(arg);  if  (options.hasOption(opt))  {  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	67	68	3	replace	if(stopAtNonOption)  {  for(int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if(!   "-   ".equals(arg))  {  eatTheRest  =  true;  tokens	  if(stopAtNonOption)    {    for(int    i    =    0;    i    <    arguments.length;    i++)    {    String    arg    =    arguments[i];    if(!       "-       ".equals(arg))    {    eatTheRest    =    true;    tokens.    	non-compiled	[CE]  	51	None	replace
235	[BUG]  [BUGGY]  if(stopAtNonOption)  {  for(int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if(!eatTheRest)  {  tokens.add(  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }      [BUGGY]  if(stopAtNonOption)  {  for(int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if(!eatTheRest)  {  tokens.add(  [BUGGY]      else  if  (     "-     ".equals(arg))    {  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  String  opt  =  Util.stripLeadingHyphens(arg);  if  (options.hasOption(opt))  {  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	67	68	3	replace	if(stopAtNonOption)  {  for(int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if(!eatTheRest)  {  tokens.add(	  if(stopAtNonOption)    {    for(int    i    =    0;    i    <    arguments.length;    i++)    {    String    arg    =    arguments[i];    if(!eatTheRest)    {    tokens.add(   "-    	non-compiled	[CE]  	13	None	replace
236	[BUG]  [BUGGY]  else  if(!eatTheRest.equals(arg))  {  [CE]  boolean  cannot  be  dereferenced  [FE]        StringIndexOutOfBoundsException      [CONTEXT]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }      [BUGGY]  else  if(!eatTheRest.equals(arg))  {  [BUGGY]      {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  String  opt  =  Util.stripLeadingHyphens(arg);  if  (options.hasOption(opt))  {  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	67	68	3	replace	else  if(!eatTheRest.equals(arg))  {	  else    if(       "--       ".equals(arg))    {    else    if(!   "--       ".equals(arg))    {    	non-compiled	[CE]  boolean  cannot  be  dereferenced	104	None	replace
237	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          StringIndexOutOfBoundsException      [CONTEXT]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }      [BUGGY]  else  if(!eatTheRest)  {  [BUGGY]      {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  String  opt  =  Util.stripLeadingHyphens(arg);  if  (options.hasOption(opt))  {  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	67	68	3	add	else  if(!eatTheRest)  {	  else    if(       "--       ".equals(arg))    {    else    if(!   "--       ".equals(arg))    {    	compilable	  [FE]  AssertionFailedError  	104	14	replace
238	[BUG]  [BUGGY]  else  if(!eatTheRest)  {  [FE]  AssertionFailedError  [FE]          StringIndexOutOfBoundsException      [CONTEXT]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }      [BUGGY]  else  if(!eatTheRest)  {  [BUGGY]      {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  String  opt  =  Util.stripLeadingHyphens(arg);  if  (options.hasOption(opt))  {  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	67	68	3	replace	else  if(!eatTheRest)  {	  else    if(       "--       ".equals(arg))    {    else    if(!   "--       ".equals(arg))    {    	compilable	  [FE]  AssertionFailedError  	104	14	replace
239	[BUG]  [BUGGY]  while(stopAtNonOption  &&  options.hasOption(opt))  {  for(int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if(!   "-   ".equals(arg))  {  tokens  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }      [BUGGY]  while(stopAtNonOption  &&  options.hasOption(opt))  {  for(int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if(!   "-   ".equals(arg))  {  tokens  [BUGGY]      else  if  (     "-     ".equals(arg))    {  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  String  opt  =  Util.stripLeadingHyphens(arg);  if  (options.hasOption(opt))  {  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	67	68	3	replace	while(stopAtNonOption  &&  options.hasOption(opt))  {  for(int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if(!   "-   ".equals(arg))  {  tokens	  while(stopAtNonOption)    {    for(int    i    =    0;    i    <    arguments.length;    i++)    {    String    arg    =    arguments[i];    if(!       "-       ".equals(arg))    {    tokens.add(   "-       ");    }    	non-compiled	[CE]  	73	None	replace
240	[BUG]  [BUGGY]  while(stopAtNonOption)  {  for(int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if(!   "-   ".equals(arg))  {  tokens.add(  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }      [BUGGY]  while(stopAtNonOption)  {  for(int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if(!   "-   ".equals(arg))  {  tokens.add(  [BUGGY]      else  if  (     "-     ".equals(arg))    {  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  String  opt  =  Util.stripLeadingHyphens(arg);  if  (options.hasOption(opt))  {  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	67	68	3	replace	while(stopAtNonOption)  {  for(int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if(!   "-   ".equals(arg))  {  tokens.add(	  while(stopAtNonOption)    {    for(int    i    =    0;    i    <    arguments.length;    i++)    {    String    arg    =    arguments[i];    if(!       "-       ".equals(arg))    {    tokens.add(   "-       ");    }    	non-compiled	[CE]  	73	None	replace
241	[BUG]  [BUGGY]  Option  options  =  options.getOption(opt,  stopAtNonOption);  [CE]  [FE]        AssertionFailedError      [CONTEXT]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }      [BUGGY]  Option  options  =  options.getOption(opt,  stopAtNonOption);  [BUGGY]      else  if  (     "-     ".equals(arg))    {  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  String  opt  =  Util.stripLeadingHyphens(arg);  if  (options.hasOption(opt))  {  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	67	68	3	replace	Option  options  =  options.getOption(opt,  stopAtNonOption);	  Option    options    =    options.getOption(opt);    	non-compiled	[CE]  	72	None	replace
242	[BUG]  [BUGGY]  Option  options  =  options.getOption(options);  [CE]  [FE]          AssertionFailedError      [CONTEXT]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }      [BUGGY]  Option  options  =  options.getOption(options);  [BUGGY]      else  if  (     "-     ".equals(arg))    {  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  String  opt  =  Util.stripLeadingHyphens(arg);  if  (options.hasOption(opt))  {  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	67	68	3	replace	Option  options  =  options.getOption(options);	  Option    options    =    options.getOption(opt);    	non-compiled	[CE]  	72	None	replace
243	[BUG]  [BUGGY]  ||  stopAtNonOption)  {  for(int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if(!eatTheRest)  {  tokens  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }      [BUGGY]  ||  stopAtNonOption)  {  for(int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if(!eatTheRest)  {  tokens  [BUGGY]      else  if  (     "-     ".equals(arg))    {  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  String  opt  =  Util.stripLeadingHyphens(arg);  if  (options.hasOption(opt))  {  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	67	68	3	replace	||  stopAtNonOption)  {  for(int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if(!eatTheRest)  {  tokens	  ||    stopAtNonOption)    {    for(int    i    =    0;    i    <    arguments.length;    i++)    {    String    arg    =    arguments[i];    if(!eatTheRest)    {    tokens.add(   "-       ");    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
244	[BUG]  [BUGGY]  Option  options  =  options.getOption(options.getOption(opt));  [CE]  [FE]              ComparisonFailure      [CONTEXT]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }      [BUGGY]  Option  options  =  options.getOption(options.getOption(opt));  [BUGGY]      else  if  (     "-     ".equals(arg))    {  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  String  opt  =  Util.stripLeadingHyphens(arg);  if  (options.hasOption(opt))  {  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	67	68	3	replace	Option  options  =  options.getOption(options.getOption(opt));	  if(stopAtNonOption)    {    for(int    i    =    0;    i    <    arguments.length;    i++)    {    String    arg    =    arguments[i];    if(!       "-       ".equals(arg))    {    eatTheRest    =    true;    tokens.add(    	non-compiled	[CE]  	49	None	replace
245	[BUG]  [BUGGY]  Option  options  =  options.getOption(options.getOption(options));  [CE]  [FE]                ComparisonFailure      [CONTEXT]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }      [BUGGY]  Option  options  =  options.getOption(options.getOption(options));  [BUGGY]      else  if  (     "-     ".equals(arg))    {  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  String  opt  =  Util.stripLeadingHyphens(arg);  if  (options.hasOption(opt))  {  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	67	68	3	replace	Option  options  =  options.getOption(options.getOption(options));	  if(stopAtNonOption)    {    for(int    i    =    0;    i    <    arguments.length;    i++)    {    String    arg    =    arguments[i];    if(!       "-       ".equals(arg))    {    eatTheRest    =    true;    tokens.add(    	non-compiled	[CE]  	49	None	replace
246	[BUG]  [BUGGY]  while(stopAtNonOption  &&  options.hasOption(opt))  {  tokens.add( "-   ");  }  [CE]  [FE]        AssertionFailedError      [CONTEXT]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }      [BUGGY]  while(stopAtNonOption  &&  options.hasOption(opt))  {  tokens.add( "-   ");  }  [BUGGY]      else  if  (     "-     ".equals(arg))    {  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  String  opt  =  Util.stripLeadingHyphens(arg);  if  (options.hasOption(opt))  {  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	67	68	3	replace	while(stopAtNonOption  &&  options.hasOption(opt))  {  tokens.add( "-   ");  }	  While(stopAtNonOption)    {    tokens.add(   "-   ");    }    	non-compiled	[CE]  	37	None	replace
247	[BUG]  [BUGGY]  While(stopAtNonOption  &&  options.hasOption(opt))  {  tokens.add( "-   ");  }  [CE]  [FE]          AssertionFailedError      [CONTEXT]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }      [BUGGY]  While(stopAtNonOption  &&  options.hasOption(opt))  {  tokens.add( "-   ");  }  [BUGGY]      else  if  (     "-     ".equals(arg))    {  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  String  opt  =  Util.stripLeadingHyphens(arg);  if  (options.hasOption(opt))  {  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	67	68	3	replace	While(stopAtNonOption  &&  options.hasOption(opt))  {  tokens.add( "-   ");  }	  While(stopAtNonOption)    {    tokens.add(   "-   ");    }    	non-compiled	[CE]  	37	None	replace
248	[BUG]  [BUGGY]  if(stopAtNonOption)  {  for(int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if(arg.startsWith( ".- "))  {  tokens.add( "-  }  [CE]  unclosed  string  literal  [FE]                    ComparisonFailure      [CONTEXT]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }      [BUGGY]  if(stopAtNonOption)  {  for(int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if(arg.startsWith( ".- "))  {  tokens.add( "-  }  [BUGGY]      else  if  (     "-     ".equals(arg))    {  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  String  opt  =  Util.stripLeadingHyphens(arg);  if  (options.hasOption(opt))  {  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	67	68	3	replace	if(stopAtNonOption)  {  for(int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if(arg.startsWith( ".- "))  {  tokens.add( "-  }	  if(stopAtNonOption)    {    for(int    i    =    0;    i    <    arguments.length;    i++)    {    String    arg    =    arguments[i];    if(arg.startsWith(   "-       "))    {    tokens.add(   "-    	non-compiled	[CE]  unclosed  string  literal	47	None	replace
249	[BUG]  [BUGGY]  else  if('.'.equals(arg)&&!stopAtNonOption)  {  [CE]  char  cannot  be  dereferenced  [FE]        ComparisonFailure      [CONTEXT]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }      [BUGGY]  else  if('.'.equals(arg)&&!stopAtNonOption)  {  [BUGGY]      {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  String  opt  =  Util.stripLeadingHyphens(arg);  if  (options.hasOption(opt))  {  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	67	68	3	replace	else  if('.'.equals(arg)&&!stopAtNonOption)  {	  else    if(       "-       ".equals(arg)&&!eatTheRest)    {    else    if('-       ".equals(arg)&&!eatTheRest)    {    	non-compiled	[CE]  char  cannot  be  dereferenced	88	None	replace
250	[BUG]  [BUGGY]  else  if(   "-     ".equals(arg)||!eatTheRest)  {  else  if(   "-   ".equals(arg)||!eattheRest)  {  [CE]  [FE]    AssertionFailedError    [CONTEXT]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }      [BUGGY]  else  if(   "-     ".equals(arg)||!eatTheRest)  {  else  if(   "-   ".equals(arg)||!eattheRest)  {  [BUGGY]      {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  String  opt  =  Util.stripLeadingHyphens(arg);  if  (options.hasOption(opt))  {  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	67	68	3	replace	else    if(   "-       ".equals(arg)||!eatTheRest)    {    else  if(   "-   ".equals(arg)||!eattheRest)  {	  	non-compiled	[CE]  	2	None	add
251	[BUG]  [BUGGY]  Joiner.on( "- ").join(arg,  stopAtNonOption))  {  tokens.add(  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }      [BUGGY]  Joiner.on( "- ").join(arg,  stopAtNonOption))  {  tokens.add(  [BUGGY]      else  if  (     "-     ".equals(arg))    {  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  String  opt  =  Util.stripLeadingHyphens(arg);  if  (options.hasOption(opt))  {  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	67	68	3	replace	Joiner.on( "- ").join(arg,  stopAtNonOption))  {  tokens.add(	  if(stopAtNonOption)    {    for(int    i    =    0;    i    <    arguments.length;    i++)    {    String    arg    =    arguments[i];    if('-'.equals(arg))    {    tokens.add(    	non-compiled	[CE]  	71	None	replace
252	[BUG]  [BUGGY]  Joiner.on( "- ").join(arg))  {  tokens.add(  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }      [BUGGY]  Joiner.on( "- ").join(arg))  {  tokens.add(  [BUGGY]      else  if  (     "-     ".equals(arg))    {  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  String  opt  =  Util.stripLeadingHyphens(arg);  if  (options.hasOption(opt))  {  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	67	68	3	replace	Joiner.on( "- ").join(arg))  {  tokens.add(	  if(stopAtNonOption)    {    for(int    i    =    0;    i    <    arguments.length;    i++)    {    String    arg    =    arguments[i];    if('-'.equals(arg))    {    tokens.add(    	non-compiled	[CE]  	71	None	replace
253	[BUG]  [BUGGY]  Joiner.on( "- ").join(arg,  stopAtNonOption))  {  tokens.add(   "- ");  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }      [BUGGY]  Joiner.on( "- ").join(arg,  stopAtNonOption))  {  tokens.add(   "- ");  [BUGGY]      else  if  (     "-     ".equals(arg))    {  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  String  opt  =  Util.stripLeadingHyphens(arg);  if  (options.hasOption(opt))  {  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	67	68	3	replace	Joiner.on( "- ").join(arg,  stopAtNonOption))  {  tokens.add(   "- ");	  if(stopAtNonOption)    {    for(int    i    =    0;    i    <    arguments.length;    i++)    {    String    arg    =    arguments[i];    if('-'.equals(arg))    {    tokens.add(    	non-compiled	[CE]  	71	None	replace
254	[BUG]  [BUGGY]  &&  stopAtNonOption)  {  for(int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if(!eatTheRest)  {  tokens.add( "-   ");  }  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }      [BUGGY]  &&  stopAtNonOption)  {  for(int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if(!eatTheRest)  {  tokens.add( "-   ");  }  [BUGGY]      else  if  (     "-     ".equals(arg))    {  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  String  opt  =  Util.stripLeadingHyphens(arg);  if  (options.hasOption(opt))  {  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	67	68	3	replace	&&  stopAtNonOption)  {  for(int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if(!eatTheRest)  {  tokens.add( "-   ");  }	  ||    stopAtNonOption)    {    for(int    i    =    0;    i    <    arguments.length;    i++)    {    String    arg    =    arguments[i];    if(!eatTheRest)    {    tokens.add(   "-       ");    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
255	[BUG]  [BUGGY]  else  if(   "--     ".equals(arg)||  eatTheRest)  {  else  if(   "--   ".equals(arg)||  eattheRest)  {  [CE]  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }      [BUGGY]  else  if(   "--     ".equals(arg)||  eatTheRest)  {  else  if(   "--   ".equals(arg)||  eattheRest)  {  [BUGGY]      {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  String  opt  =  Util.stripLeadingHyphens(arg);  if  (options.hasOption(opt))  {  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	67	68	3	replace	else    if(   "--       ".equals(arg)||    eatTheRest)    {    else  if(   "--   ".equals(arg)||  eattheRest)  {	  	non-compiled	[CE]  	75	None	add
256	[BUG]  [BUGGY]  Joiner.on( "- ").join(arg,  stopAtNonOption));  [CE]  [FE]                ComparisonFailure      [CONTEXT]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }      [BUGGY]  Joiner.on( "- ").join(arg,  stopAtNonOption));  [BUGGY]      else  if  (     "-     ".equals(arg))    {  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  String  opt  =  Util.stripLeadingHyphens(arg);  if  (options.hasOption(opt))  {  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	67	68	3	replace	Joiner.on( "- ").join(arg,  stopAtNonOption));	  if(stopAtNonOption)    {    for(int    i    =    0;    i    <    arguments.length;    i++)    {    String    arg    =    arguments[i];    if(   "-       ".equals(arg))    {    tokens.add(    	non-compiled	[CE]  	69	None	replace
257	[BUG]  [BUGGY]  if(!stopAtNonOption)  {  for(int  i  =  0;  i  <  arguments.length;  i++)  {  tokens.add(arg);  }  [CE]  variable  i  is  already  defined  in  method  flatten(Options,String[],boolean)  [FE]              ComparisonFailure      [CONTEXT]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }      [BUGGY]  if(!stopAtNonOption)  {  for(int  i  =  0;  i  <  arguments.length;  i++)  {  tokens.add(arg);  }  [BUGGY]      else  if  (     "-     ".equals(arg))    {  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  String  opt  =  Util.stripLeadingHyphens(arg);  if  (options.hasOption(opt))  {  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	67	68	3	replace	if(!stopAtNonOption)  {  for(int  i  =  0;  i  <  arguments.length;  i++)  {  tokens.add(arg);  }	  [Delete]    	non-compiled	[CE]  variable  i  is  already  defined  in  method  flatten(Options,String[],boolean)	91	None	replace
258	[BUG]  [BUGGY]  if(!stopAtNonOption)  {  tokens.add(arg);  }  [CE]  [FE]                ComparisonFailure      [CONTEXT]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }      [BUGGY]  if(!stopAtNonOption)  {  tokens.add(arg);  }  [BUGGY]      else  if  (     "-     ".equals(arg))    {  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  String  opt  =  Util.stripLeadingHyphens(arg);  if  (options.hasOption(opt))  {  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	67	68	3	replace	if(!stopAtNonOption)  {  tokens.add(arg);  }	  [Delete]    	non-compiled	[CE]  	91	None	replace
259	[BUG]  [BUGGY]  if(!stopAtNonOption)  {  for(int  i  =  0;  i  <  arguments.length;  i++)  {  tokens.add(arg[i]);  }  [CE]  variable  i  is  already  defined  in  method  flatten(Options,String[],boolean)  [FE]                  ComparisonFailure      [CONTEXT]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }      [BUGGY]  if(!stopAtNonOption)  {  for(int  i  =  0;  i  <  arguments.length;  i++)  {  tokens.add(arg[i]);  }  [BUGGY]      else  if  (     "-     ".equals(arg))    {  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  String  opt  =  Util.stripLeadingHyphens(arg);  if  (options.hasOption(opt))  {  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	67	68	3	replace	if(!stopAtNonOption)  {  for(int  i  =  0;  i  <  arguments.length;  i++)  {  tokens.add(arg[i]);  }	  [Delete]    	non-compiled	[CE]  variable  i  is  already  defined  in  method  flatten(Options,String[],boolean)	91	None	replace
260	[BUG]  [BUGGY]  ||  stopAtNonOption)  {  tokens.add(arg);  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }      [BUGGY]  ||  stopAtNonOption)  {  tokens.add(arg);  [BUGGY]      else  if  (     "-     ".equals(arg))    {  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  String  opt  =  Util.stripLeadingHyphens(arg);  if  (options.hasOption(opt))  {  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	67	68	3	replace	||  stopAtNonOption)  {  tokens.add(arg);	  if(stopAtNonOption)    {    for(int    i    =    0;    i    <    arguments.length;    i++)    {    String    arg    =    arguments[i];    if(!       "-       ".equals(arg))    {    tokens.add(    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
261	[BUG]  [BUGGY]  tokens.add('  ');  [CE]  [FE]            ComparisonFailure      [CONTEXT]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }      [BUGGY]  tokens.add('  ');  [BUGGY]      else  if  (     "-     ".equals(arg))    {  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  String  opt  =  Util.stripLeadingHyphens(arg);  if  (options.hasOption(opt))  {  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	67	68	3	replace	tokens.add('  ');	  tokens.add(null);    	non-compiled	[CE]  	86	None	replace
262	[BUG]  [BUGGY]  while(!eatTheRest)  {  for(int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if('-'.equals(arg))  {  tokens.add( "-   ");  }  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }      [BUGGY]  while(!eatTheRest)  {  for(int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if('-'.equals(arg))  {  tokens.add( "-   ");  }  [BUGGY]      else  if  (     "-     ".equals(arg))    {  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  String  opt  =  Util.stripLeadingHyphens(arg);  if  (options.hasOption(opt))  {  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	67	68	3	replace	while(!eatTheRest)  {  for(int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if('-'.equals(arg))  {  tokens.add( "-   ");  }	  while(!stopAtNonOption)    {    for(int    i    =    0;    i    <    arguments.length;    i++)    {    String    arg    =    arguments[i];    if('-'.equals(arg))    {    tokens.add(   "-       ");    }    	non-compiled	[CE]  	95	None	replace
263	[BUG]  [BUGGY]  }  else  if('-'.equals(arg)&&!stopAtNonOption)  {  [CE]  'else'  without  'if'  [FE]        ComparisonFailure      [CONTEXT]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }      [BUGGY]  }  else  if('-'.equals(arg)&&!stopAtNonOption)  {  [BUGGY]      {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  String  opt  =  Util.stripLeadingHyphens(arg);  if  (options.hasOption(opt))  {  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	67	68	3	replace	}  else  if('-'.equals(arg)&&!stopAtNonOption)  {	  else    if(       "-       ".equals(arg)&&!stopAtNonOption)    {    else    if('-       ".equals(arg)&&!stopAtNonOption)    {    	non-compiled	[CE]  'else'  without  'if'	87	None	replace
264	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }      [BUGGY]  else  if( "-eattheRest ".equals(arg))  {  [BUGGY]      {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  String  opt  =  Util.stripLeadingHyphens(arg);  if  (options.hasOption(opt))  {  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	67	68	3	add	else  if( "-eattheRest ".equals(arg))  {	  else    if(   "-eatTheRest   ".equals(arg))    {    	compilable	  [FE]  StringIndexOutOfBoundsException  	82	4	replace
265	[BUG]  [BUGGY]  else  if( "-eattheRest ".equals(arg))  {  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }      [BUGGY]  else  if( "-eattheRest ".equals(arg))  {  [BUGGY]      {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  String  opt  =  Util.stripLeadingHyphens(arg);  if  (options.hasOption(opt))  {  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	67	68	3	replace	else  if( "-eattheRest ".equals(arg))  {	  else    if(   "-eatTheRest   ".equals(arg))    {    	compilable	  [FE]  StringIndexOutOfBoundsException  	82	4	replace
266	[BUG]  [BUGGY]  fortunately(stopAtNonOption)  {  for(int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if(arg.startsWith( ".- "))  {  tokens.add( "-   ");  }  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }      [BUGGY]  fortunately(stopAtNonOption)  {  for(int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if(arg.startsWith( ".- "))  {  tokens.add( "-   ");  }  [BUGGY]      else  if  (     "-     ".equals(arg))    {  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  String  opt  =  Util.stripLeadingHyphens(arg);  if  (options.hasOption(opt))  {  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	67	68	3	replace	fortunately(stopAtNonOption)  {  for(int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if(arg.startsWith( ".- "))  {  tokens.add( "-   ");  }	  if(stopAtNonOption)    {    for(int    i    =    0;    i    <    arguments.length;    i++)    {    String    arg    =    arguments[i];    if(arg.startsWith(   ".-   "))    {    tokens.add(   "-       ");    }    	non-compiled	[CE]  	48	None	replace
267	[BUG]  [BUGGY]  else  if('-'.equals(arg)||!eatTheRest)  {  [CE]  char  cannot  be  dereferenced  [FE]        AssertionFailedError      [CONTEXT]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }      [BUGGY]  else  if('-'.equals(arg)||!eatTheRest)  {  [BUGGY]      {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  String  opt  =  Util.stripLeadingHyphens(arg);  if  (options.hasOption(opt))  {  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	67	68	3	replace	else  if('-'.equals(arg)||!eatTheRest)  {	  else    if(       "-       ".equals(arg)||!stopAtNonOption)    {    else    if('-       ".equals(arg)||!stopAtNonOption)    {    	non-compiled	[CE]  char  cannot  be  dereferenced	68	None	replace
268	[BUG]  [BUGGY]  fortunately)  {  for(int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if(!eatTheRest)  {  tokens.add(  [CE]  not  a  statement  [FE]                        ComparisonFailure      [CONTEXT]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }      [BUGGY]  fortunately)  {  for(int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if(!eatTheRest)  {  tokens.add(  [BUGGY]      else  if  (     "-     ".equals(arg))    {  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  String  opt  =  Util.stripLeadingHyphens(arg);  if  (options.hasOption(opt))  {  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	67	68	3	replace	fortunately)  {  for(int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if(!eatTheRest)  {  tokens.add(	  fortunately,    stopAtNonOption)    {    for(int    i    =    0;    i    <    arguments.length;    i++)    {    String    arg    =    arguments[i];    if(!eatTheRest)    {    tokens.add(    	non-compiled	[CE]  not  a  statement	103	None	replace
269	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }      [BUGGY]  else  if( "stopAtNonOption ".equals(arg)&&!eatTheRest)  {  [BUGGY]      {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  String  opt  =  Util.stripLeadingHyphens(arg);  if  (options.hasOption(opt))  {  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	67	68	3	add	else  if( "stopAtNonOption ".equals(arg)&&!eatTheRest)  {	  else    if(   "stopAtNonOption       ".equals(arg))    {    	compilable	  [FE]  StringIndexOutOfBoundsException  	18	4	replace
270	[BUG]  [BUGGY]  else  if( "stopAtNonOption ".equals(arg)&&!eatTheRest)  {  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }      [BUGGY]  else  if( "stopAtNonOption ".equals(arg)&&!eatTheRest)  {  [BUGGY]      {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  String  opt  =  Util.stripLeadingHyphens(arg);  if  (options.hasOption(opt))  {  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	67	68	3	replace	else  if( "stopAtNonOption ".equals(arg)&&!eatTheRest)  {	  else    if(   "stopAtNonOption       ".equals(arg))    {    	compilable	  [FE]  StringIndexOutOfBoundsException  	18	4	replace
271	[BUG]  [BUGGY]  ||  stopAtNonOption)  {  tokens.add( "- ");  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }      [BUGGY]  ||  stopAtNonOption)  {  tokens.add( "- ");  [BUGGY]      else  if  (     "-     ".equals(arg))    {  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  String  opt  =  Util.stripLeadingHyphens(arg);  if  (options.hasOption(opt))  {  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	67	68	3	replace	||  stopAtNonOption)  {  tokens.add( "- ");	  if(stopAtNonOption)    {    for(int    i    =    0;    i    <    arguments.length;    i++)    {    String    arg    =    arguments[i];    if(!       "-       ".equals(arg))    {    eatTheRest    =    true;    tokens.add    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
272	[BUG]  [BUGGY]  Option  option  =  options.getOption(options.getOption(options));  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }      [BUGGY]  Option  option  =  options.getOption(options.getOption(options));  [BUGGY]      else  if  (     "-     ".equals(arg))    {  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  String  opt  =  Util.stripLeadingHyphens(arg);  if  (options.hasOption(opt))  {  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	67	68	3	replace	Option  option  =  options.getOption(options.getOption(options));	  if(stopAtNonOption)    {    for(int    i    =    0;    i    <    arguments.length;    i++)    {    String    arg    =    arguments[i];    if(!       "-       ".equals(arg))    {    eatTheRest    =    true;    tokens.add    	non-compiled	[CE]  	50	None	replace
273	[BUG]  [BUGGY]  tokens.add( "-- ").equals(arg);  [CE]  [FE]            ComparisonFailure      [CONTEXT]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }      [BUGGY]  tokens.add( "-- ").equals(arg);  [BUGGY]      else  if  (     "-     ".equals(arg))    {  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  String  opt  =  Util.stripLeadingHyphens(arg);  if  (options.hasOption(opt))  {  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	67	68	3	replace	tokens.add( "-- ").equals(arg);	  tokens.add(   "-   ".equals(arg));    	non-compiled	[CE]  	25	None	replace
274	[BUG]  [BUGGY]  fortunately(stopAtNonOption)  {  for(int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if(arg.startsWith( "-   "))  {  tokens.add( "-   ");  }  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }      [BUGGY]  fortunately(stopAtNonOption)  {  for(int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if(arg.startsWith( "-   "))  {  tokens.add( "-   ");  }  [BUGGY]      else  if  (     "-     ".equals(arg))    {  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  String  opt  =  Util.stripLeadingHyphens(arg);  if  (options.hasOption(opt))  {  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	67	68	3	replace	fortunately(stopAtNonOption)  {  for(int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if(arg.startsWith( "-   "))  {  tokens.add( "-   ");  }	  if(stopAtNonOption)    {    for(int    i    =    0;    i    <    arguments.length;    i++)    {    String    arg    =    arguments[i];    if(arg.startsWith(   "-       "))    {    tokens.add(   "-       ");    }    	non-compiled	[CE]  	46	None	replace
275	[BUG]  [BUGGY]  fortunately(stopAtNonOption)  {  for(int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if(arg.startsWith( "-   "))  {  tokens.add(  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }      [BUGGY]  fortunately(stopAtNonOption)  {  for(int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if(arg.startsWith( "-   "))  {  tokens.add(  [BUGGY]      else  if  (     "-     ".equals(arg))    {  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  String  opt  =  Util.stripLeadingHyphens(arg);  if  (options.hasOption(opt))  {  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	67	68	3	replace	fortunately(stopAtNonOption)  {  for(int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if(arg.startsWith( "-   "))  {  tokens.add(	  if(stopAtNonOption)    {    for(int    i    =    0;    i    <    arguments.length;    i++)    {    String    arg    =    arguments[i];    if(arg.startsWith(   "-       "))    {    tokens.add(   "-       ");    }    	non-compiled	[CE]  	46	None	replace
276	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }      [BUGGY]  else  if(stopAtNonOption  &&   "eatTheRest ".equals(arg))  {  [BUGGY]      {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  String  opt  =  Util.stripLeadingHyphens(arg);  if  (options.hasOption(opt))  {  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	67	68	3	add	else  if(stopAtNonOption  &&   "eatTheRest ".equals(arg))  {	  else    if(!stopAtNonOption    &&   "eatTheRest   ".equals(arg))    {    	compilable	  [FE]  StringIndexOutOfBoundsException  	80	4	replace
277	[BUG]  [BUGGY]  else  if(stopAtNonOption  &&   "eatTheRest ".equals(arg))  {  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }      [BUGGY]  else  if(stopAtNonOption  &&   "eatTheRest ".equals(arg))  {  [BUGGY]      {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  String  opt  =  Util.stripLeadingHyphens(arg);  if  (options.hasOption(opt))  {  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	67	68	3	replace	else  if(stopAtNonOption  &&   "eatTheRest ".equals(arg))  {	  else    if(!stopAtNonOption    &&   "eatTheRest   ".equals(arg))    {    	compilable	  [FE]  StringIndexOutOfBoundsException  	80	4	replace
278	[BUG]  [BUGGY]  tokens.add( "-  [CE]  unclosed  string  literal  [FE]                      ComparisonFailure      [CONTEXT]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }      [BUGGY]  tokens.add( "-  [BUGGY]      else  if  (     "-     ".equals(arg))    {  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  String  opt  =  Util.stripLeadingHyphens(arg);  if  (options.hasOption(opt))  {  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	67	68	3	replace	tokens.add( "-	  if(stopAtNonOption)    {    for(int    i    =    0;    i    <    arguments.length;    i++)    {    String    arg    =    arguments[i];    if(!eatTheRest)    {    tokens.add(   "-    	non-compiled	[CE]  unclosed  string  literal	13	None	replace
279	[BUG]  [BUGGY]  tokens.add( "-  }  else  if( "-   ".equals(arg))  {  [CE]  unclosed  string  literal  [FE]                        ComparisonFailure      [CONTEXT]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }      [BUGGY]  tokens.add( "-  }  else  if( "-   ".equals(arg))  {  [BUGGY]      else  if  (     "-     ".equals(arg))    {  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  String  opt  =  Util.stripLeadingHyphens(arg);  if  (options.hasOption(opt))  {  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	67	68	3	replace	tokens.add( "-  }  else  if( "-   ".equals(arg))  {	  if(stopAtNonOption)    {    for(int    i    =    0;    i    <    arguments.length;    i++)    {    String    arg    =    arguments[i];    if(!eatTheRest)    {    tokens.add(   "-    	non-compiled	[CE]  unclosed  string  literal	13	None	replace
280	[BUG]  [BUGGY]  Iterator  <  String>  it  =  options.iterator();  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }      [BUGGY]  Iterator  <  String>  it  =  options.iterator();  [BUGGY]      else  if  (     "-     ".equals(arg))    {  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  String  opt  =  Util.stripLeadingHyphens(arg);  if  (options.hasOption(opt))  {  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	67	68	3	replace	Iterator  <  String>  it  =  options.iterator();	  if(stopAtNonOption)    {    for(int    i    =    0;    i    <    arguments.length;    i++)    {    String    arg    =    arguments[i];    if(!eatTheRest)    {    tokens.add(   "-    	non-compiled	[CE]  	13	None	replace
281	[BUG]  [BUGGY]  While(stopAtNonOption)  {  tokens.add(arg);  }  [CE]  [FE]        AssertionFailedError      [CONTEXT]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }      [BUGGY]  While(stopAtNonOption)  {  tokens.add(arg);  }  [BUGGY]      else  if  (     "-     ".equals(arg))    {  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  String  opt  =  Util.stripLeadingHyphens(arg);  if  (options.hasOption(opt))  {  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	67	68	3	replace	While(stopAtNonOption)  {  tokens.add(arg);  }	  While(stopAtNonOption)    {    tokens.add(   "-   ");    }    	non-compiled	[CE]  	37	None	replace
282	[BUG]  [BUGGY]  while(stopAtNonOption)  {  tokens.add(arg);  }  [CE]  [FE]          AssertionFailedError      [CONTEXT]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }      [BUGGY]  while(stopAtNonOption)  {  tokens.add(arg);  }  [BUGGY]      else  if  (     "-     ".equals(arg))    {  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  String  opt  =  Util.stripLeadingHyphens(arg);  if  (options.hasOption(opt))  {  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	67	68	3	replace	while(stopAtNonOption)  {  tokens.add(arg);  }	  While(stopAtNonOption)    {    tokens.add(   "-   ");    }    	non-compiled	[CE]  	37	None	replace
283	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }      [BUGGY]  else  if(stopAtNonOption  ||!eatTheRest)  {  [BUGGY]      {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  String  opt  =  Util.stripLeadingHyphens(arg);  if  (options.hasOption(opt))  {  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	67	68	3	add	else  if(stopAtNonOption  ||!eatTheRest)  {	  else    if(!stopAtNonOption)    {    	compilable	  [FE]  AssertionFailedError  	32	14	replace
284	[BUG]  [BUGGY]  else  if(stopAtNonOption  ||!eatTheRest)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }      [BUGGY]  else  if(stopAtNonOption  ||!eatTheRest)  {  [BUGGY]      {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  String  opt  =  Util.stripLeadingHyphens(arg);  if  (options.hasOption(opt))  {  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	67	68	3	replace	else  if(stopAtNonOption  ||!eatTheRest)  {	  else    if(!stopAtNonOption)    {    	compilable	  [FE]  AssertionFailedError  	32	14	replace
285	[BUG]  [BUGGY]  tors.add(arg);  [CE]  [FE]        AssertionFailedError      [CONTEXT]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }      [BUGGY]  tors.add(arg);  [BUGGY]      else  if  (     "-     ".equals(arg))    {  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  String  opt  =  Util.stripLeadingHyphens(arg);  if  (options.hasOption(opt))  {  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	67	68	3	replace	tors.add(arg);	  tors.add(   "-   ");    	non-compiled	[CE]  	85	None	replace
286	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }      [BUGGY]          if(stopAtNonOption)    {    tokens.add(     "-     ");    }    if(stopAtNonOption)  {  tokens.add(   ".-     ");  }  if(stopAtNonOption)  {  tokens.add(   "-   ");  }  if(stopAtNonOption)  {  tokens.add(   ".-   ");  }  [BUGGY]      else  if  (     "-     ".equals(arg))    {  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  String  opt  =  Util.stripLeadingHyphens(arg);  if  (options.hasOption(opt))  {  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	67	68	3	add	                if(stopAtNonOption)        {        tokens.add(       "-       ");        }        if(stopAtNonOption)    {    tokens.add(   ".-       ");    }    if(stopAtNonOption)  {  tokens.add(   "-   ");  }  if(stopAtNonOption)  {  tokens.add(   ".-   ");  }	  	compilable	  [FE]  AssertionFailedError  	42	6	add
287	[BUG]  [BUGGY]          if(stopAtNonOption)    {    tokens.add(     "-     ");    }    if(stopAtNonOption)  {  tokens.add(   ".-     ");  }  if(stopAtNonOption)  {  tokens.add(   "-   ");  }  if(stopAtNonOption)  {  tokens.add(   ".-   ");  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }      [BUGGY]          if(stopAtNonOption)    {    tokens.add(     "-     ");    }    if(stopAtNonOption)  {  tokens.add(   ".-     ");  }  if(stopAtNonOption)  {  tokens.add(   "-   ");  }  if(stopAtNonOption)  {  tokens.add(   ".-   ");  }  [BUGGY]      else  if  (     "-     ".equals(arg))    {  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  String  opt  =  Util.stripLeadingHyphens(arg);  if  (options.hasOption(opt))  {  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	67	68	3	replace	                if(stopAtNonOption)        {        tokens.add(       "-       ");        }        if(stopAtNonOption)    {    tokens.add(   ".-       ");    }    if(stopAtNonOption)  {  tokens.add(   "-   ");  }  if(stopAtNonOption)  {  tokens.add(   ".-   ");  }	  	compilable	  [FE]  AssertionFailedError  	42	6	add
288	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }      [BUGGY]          if(stopAtNonOption)    {    tokens.add(     "-     ");    }    if(stopAtNonOption)  {  tokens.add(   ".-     ");  }  if(stopAtNonOption)  {  tokens.add( ".-   ");  }  if(stopAtNonOption)  {  tokens.add( "-   ");  }  [BUGGY]      else  if  (     "-     ".equals(arg))    {  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  String  opt  =  Util.stripLeadingHyphens(arg);  if  (options.hasOption(opt))  {  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	67	68	3	add	                if(stopAtNonOption)        {        tokens.add(       "-       ");        }        if(stopAtNonOption)    {    tokens.add(   ".-       ");    }    if(stopAtNonOption)  {  tokens.add( ".-   ");  }  if(stopAtNonOption)  {  tokens.add( "-   ");  }	  	compilable	  [FE]  AssertionFailedError  	42	6	add
289	[BUG]  [BUGGY]          if(stopAtNonOption)    {    tokens.add(     "-     ");    }    if(stopAtNonOption)  {  tokens.add(   ".-     ");  }  if(stopAtNonOption)  {  tokens.add( ".-   ");  }  if(stopAtNonOption)  {  tokens.add( "-   ");  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }      [BUGGY]          if(stopAtNonOption)    {    tokens.add(     "-     ");    }    if(stopAtNonOption)  {  tokens.add(   ".-     ");  }  if(stopAtNonOption)  {  tokens.add( ".-   ");  }  if(stopAtNonOption)  {  tokens.add( "-   ");  }  [BUGGY]      else  if  (     "-     ".equals(arg))    {  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  String  opt  =  Util.stripLeadingHyphens(arg);  if  (options.hasOption(opt))  {  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	67	68	3	replace	                if(stopAtNonOption)        {        tokens.add(       "-       ");        }        if(stopAtNonOption)    {    tokens.add(   ".-       ");    }    if(stopAtNonOption)  {  tokens.add( ".-   ");  }  if(stopAtNonOption)  {  tokens.add( "-   ");  }	  	compilable	  [FE]  AssertionFailedError  	42	6	add
290	[BUG]  [BUGGY]  tokens.add(arg,  stopAtNonOption);  [CE]  [FE]            ComparisonFailure      [CONTEXT]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }      [BUGGY]  tokens.add(arg,  stopAtNonOption);  [BUGGY]      else  if  (     "-     ".equals(arg))    {  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  String  opt  =  Util.stripLeadingHyphens(arg);  if  (options.hasOption(opt))  {  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	67	68	3	replace	tokens.add(arg,  stopAtNonOption);	  tokens.add(arg    +    1);    	non-compiled	[CE]  	1	None	replace
291	[BUG]  [BUGGY]  else  if(!eatTheRest.equals(arg)||  '-'.equals(arg))  {  [CE]  boolean  cannot  be  dereferenced  [FE]                ComparisonFailure      [CONTEXT]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }      [BUGGY]  else  if(!eatTheRest.equals(arg)||  '-'.equals(arg))  {  [BUGGY]      {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  String  opt  =  Util.stripLeadingHyphens(arg);  if  (options.hasOption(opt))  {  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	67	68	3	replace	else  if(!eatTheRest.equals(arg)||  '-'.equals(arg))  {	  else    if('-'.equals(arg)||    '-'.equals(arg))    {    	non-compiled	[CE]  boolean  cannot  be  dereferenced	67	None	replace
292	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]          StringIndexOutOfBoundsException      [CONTEXT]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }      [BUGGY]  else  if( "eattheRest ".equals(arg))  {  [BUGGY]      {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  String  opt  =  Util.stripLeadingHyphens(arg);  if  (options.hasOption(opt))  {  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	67	68	3	add	else  if( "eattheRest ".equals(arg))  {	  else    if(       "eatTheRest       ".equals(arg))    {    else    if(       "eattheRest       ".equals(arg))    {    	compilable	  [FE]  StringIndexOutOfBoundsException  	16	4	replace
293	[BUG]  [BUGGY]  else  if( "eattheRest ".equals(arg))  {  [FE]  StringIndexOutOfBoundsException  [FE]          StringIndexOutOfBoundsException      [CONTEXT]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }      [BUGGY]  else  if( "eattheRest ".equals(arg))  {  [BUGGY]      {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  String  opt  =  Util.stripLeadingHyphens(arg);  if  (options.hasOption(opt))  {  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	67	68	3	replace	else  if( "eattheRest ".equals(arg))  {	  else    if(       "eatTheRest       ".equals(arg))    {    else    if(       "eattheRest       ".equals(arg))    {    	compilable	  [FE]  StringIndexOutOfBoundsException  	16	4	replace
294	[BUG]  [BUGGY]  fortunately,  stopAtNonOption)  {  for(int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if(!   "- ".equals(arg))  {  eatTheRest  =  true;  [CE]  not  a  statement  [FE]              ComparisonFailure      [CONTEXT]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }      [BUGGY]  fortunately,  stopAtNonOption)  {  for(int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if(!   "- ".equals(arg))  {  eatTheRest  =  true;  [BUGGY]      else  if  (     "-     ".equals(arg))    {  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  String  opt  =  Util.stripLeadingHyphens(arg);  if  (options.hasOption(opt))  {  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	67	68	3	replace	fortunately,  stopAtNonOption)  {  for(int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if(!   "- ".equals(arg))  {  eatTheRest  =  true;	  if(stopAtNonOption)    {    for(int    i    =    0;    i    <    arguments.length;    i++)    {    String    arg    =    arguments[i];    if(!       "-       ".equals(arg))    {    eatTheRest    =    true;    tokens.add(    	non-compiled	[CE]  not  a  statement	49	None	replace
295	[BUG]  [BUGGY]  fortunately,  stopAtNonOption)  {  for(int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if(!   "- ".equals(arg))  {  eatTheRest  =  true;  tokens.add  [CE]  not  a  statement  [FE]                ComparisonFailure      [CONTEXT]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }      [BUGGY]  fortunately,  stopAtNonOption)  {  for(int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if(!   "- ".equals(arg))  {  eatTheRest  =  true;  tokens.add  [BUGGY]      else  if  (     "-     ".equals(arg))    {  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  String  opt  =  Util.stripLeadingHyphens(arg);  if  (options.hasOption(opt))  {  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	67	68	3	replace	fortunately,  stopAtNonOption)  {  for(int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if(!   "- ".equals(arg))  {  eatTheRest  =  true;  tokens.add	  if(stopAtNonOption)    {    for(int    i    =    0;    i    <    arguments.length;    i++)    {    String    arg    =    arguments[i];    if(!       "-       ".equals(arg))    {    eatTheRest    =    true;    tokens.add(    	non-compiled	[CE]  not  a  statement	49	None	replace
296	[BUG]  [BUGGY]  if(stopAtNonOption)  {  for(int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if(arg.startsWith( ".- "))  {  tokens.add( "-   ");  }  }  [CE]  variable  i  is  already  defined  in  method  flatten(Options,String[],boolean)  [FE]                  ComparisonFailure      [CONTEXT]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }      [BUGGY]  if(stopAtNonOption)  {  for(int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if(arg.startsWith( ".- "))  {  tokens.add( "-   ");  }  }  [BUGGY]      else  if  (     "-     ".equals(arg))    {  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  String  opt  =  Util.stripLeadingHyphens(arg);  if  (options.hasOption(opt))  {  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	67	68	3	replace	if(stopAtNonOption)  {  for(int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if(arg.startsWith( ".- "))  {  tokens.add( "-   ");  }  }	  if(stopAtNonOption)    {    for(int    i    =    0;    i    <    arguments.length;    i++)    {    String    arg    =    arguments[i];    if(arg.startsWith(   "-       "))    {    tokens.add(   "-       ");    }    }    	non-compiled	[CE]  variable  i  is  already  defined  in  method  flatten(Options,String[],boolean)	93	None	replace
297	[BUG]  [BUGGY]  }  else  if(!stopAtNonOption)  {  tokens.add(arg);  }  [CE]  [FE]                ComparisonFailure      [CONTEXT]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }      [BUGGY]  }  else  if(!stopAtNonOption)  {  tokens.add(arg);  }  [BUGGY]      else  if  (     "-     ".equals(arg))    {  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  String  opt  =  Util.stripLeadingHyphens(arg);  if  (options.hasOption(opt))  {  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	67	68	3	replace	}  else  if(!stopAtNonOption)  {  tokens.add(arg);  }	  }    else    {    tokens.add(   "-   ");    }    	non-compiled	[CE]  	92	None	replace
298	[BUG]  [BUGGY]  else  if(!stopAtNonOption)  {  if(!stopAtNonOption)  {  [CE]  [FE]    AssertionFailedError    [CONTEXT]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }      [BUGGY]  else  if(!stopAtNonOption)  {  if(!stopAtNonOption)  {  [BUGGY]      {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  String  opt  =  Util.stripLeadingHyphens(arg);  if  (options.hasOption(opt))  {  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	67	68	3	replace	else    if(!stopAtNonOption)    {    if(!stopAtNonOption)  {	  	non-compiled	[CE]  	31	None	add
299	[BUG]  [BUGGY]  else  if(!stopAtNonOption)  {  tokens.add(arg);  [CE]  [FE]      AssertionFailedError    [CONTEXT]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }      [BUGGY]  else  if(!stopAtNonOption)  {  tokens.add(arg);  [BUGGY]      {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  String  opt  =  Util.stripLeadingHyphens(arg);  if  (options.hasOption(opt))  {  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	67	68	3	replace	else    if(!stopAtNonOption)    {    tokens.add(arg);	  	non-compiled	[CE]  	31	None	add
300	[BUG]  [BUGGY]  else  if(   "--     ".equals(arg)&&!eatTheRest)  {  else  if('--   ".equals(arg)&&!eatTheRest)  {  [CE]  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }      [BUGGY]  else  if(   "--     ".equals(arg)&&!eatTheRest)  {  else  if('--   ".equals(arg)&&!eatTheRest)  {  [BUGGY]      {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  String  opt  =  Util.stripLeadingHyphens(arg);  if  (options.hasOption(opt))  {  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	67	68	3	replace	else    if(   "--       ".equals(arg)&&!eatTheRest)    {    else  if('--   ".equals(arg)&&!eatTheRest)  {	  	non-compiled	[CE]  	99	None	add
301	[BUG]  [BUGGY]  else  if(   "--     ".equals(arg)&&!stopAtNonOption)  {  else  if('--   ".equals(arg)&&!stopAtNonOption)  {  [CE]  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }      [BUGGY]  else  if(   "--     ".equals(arg)&&!stopAtNonOption)  {  else  if('--   ".equals(arg)&&!stopAtNonOption)  {  [BUGGY]      {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  String  opt  =  Util.stripLeadingHyphens(arg);  if  (options.hasOption(opt))  {  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	67	68	3	replace	else    if(   "--       ".equals(arg)&&!stopAtNonOption)    {    else  if('--   ".equals(arg)&&!stopAtNonOption)  {	  	non-compiled	[CE]  	27	None	add
302	[BUG]  [BUGGY]  fortunately(stopAtNonOption)  {  for(int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if(!   "-   ".equals(arg))  {  tokens.add( "-   ");  }  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }      [BUGGY]  fortunately(stopAtNonOption)  {  for(int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if(!   "-   ".equals(arg))  {  tokens.add( "-   ");  }  [BUGGY]      else  if  (     "-     ".equals(arg))    {  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  String  opt  =  Util.stripLeadingHyphens(arg);  if  (options.hasOption(opt))  {  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	67	68	3	replace	fortunately(stopAtNonOption)  {  for(int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if(!   "-   ".equals(arg))  {  tokens.add( "-   ");  }	  while(stopAtNonOption)    {    for(int    i    =    0;    i    <    arguments.length;    i++)    {    String    arg    =    arguments[i];    if(!       "-       ".equals(arg))    {    tokens.add(   "-       ");    }    	non-compiled	[CE]  	73	None	replace
