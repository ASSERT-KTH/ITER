bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]    {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D    [BUGGY]      if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  [BUGGY]    tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(i    +    1));    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }	  	compilable	  [FE]  ComparisonFailure  	21	4	add
2	[BUG]  [BUGGY]      if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]    {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D    [BUGGY]      if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  [BUGGY]    tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(i    +    1));    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }	  	compilable	  [FE]  ComparisonFailure  	21	4	add
3	[BUG]  [BUGGY]      if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  ||  options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  [CE]  illegal  start  of  expression  [FE]      ComparisonFailure    [CONTEXT]    {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D    [BUGGY]      if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  ||  options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  [BUGGY]    tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(i    +    1));    }    ||  options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }	  	non-compiled	[CE]  illegal  start  of  expression	21	None	add
4	[BUG]  [BUGGY]  timeout  [FE]        ComparisonFailure    [CONTEXT]    {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D    [BUGGY]      if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  while(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  [BUGGY]    tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(i    +    1));    }    while(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }	  	compilable	timeout	21	1	add
5	[BUG]  [BUGGY]      if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  while(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  timeout  [FE]        ComparisonFailure    [CONTEXT]    {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D    [BUGGY]      if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  while(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  [BUGGY]    tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(i    +    1));    }    while(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }	  	compilable	timeout	21	1	add
6	[BUG]  [BUGGY]      if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  if(options.hasOption(arg.substring(0,  2)))  <  tokens.add(arg.substring(i  +  1));  }  [CE]  >  expected  [FE]          ComparisonFailure    [CONTEXT]    {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D    [BUGGY]      if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  if(options.hasOption(arg.substring(0,  2)))  <  tokens.add(arg.substring(i  +  1));  }  [BUGGY]    tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(i    +    1));    }    if(options.hasOption(arg.substring(0,  2)))  <  tokens.add(arg.substring(i  +  1));  }	  	non-compiled	[CE]  >  expected	21	None	add
7	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]    {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D    [BUGGY]      tokens.add(arg.substring(1));  tokens.add(arg.substring(1));  [BUGGY]    tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	        tokens.add(arg.substring(1));    tokens.add(arg.substring(1));	  	compilable	  [FE]  ComparisonFailure  	5	4	add
8	[BUG]  [BUGGY]      tokens.add(arg.substring(1));  tokens.add(arg.substring(1));  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]    {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D    [BUGGY]      tokens.add(arg.substring(1));  tokens.add(arg.substring(1));  [BUGGY]    tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	        tokens.add(arg.substring(1));    tokens.add(arg.substring(1));	  	compilable	  [FE]  ComparisonFailure  	5	4	add
9	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]    {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D    [BUGGY]      tokens.add(arg.substring(1));  tokens.add(arg.substring(2));  [BUGGY]    tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	        tokens.add(arg.substring(1));    tokens.add(arg.substring(2));	  	compilable	  [FE]  ComparisonFailure  	5	4	add
10	[BUG]  [BUGGY]      tokens.add(arg.substring(1));  tokens.add(arg.substring(2));  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]    {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D    [BUGGY]      tokens.add(arg.substring(1));  tokens.add(arg.substring(2));  [BUGGY]    tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	        tokens.add(arg.substring(1));    tokens.add(arg.substring(2));	  	compilable	  [FE]  ComparisonFailure  	5	4	add
11	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]    {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D    [BUGGY]      tokens.add(arg.substring(1));  tokens.add(arg.substring(3));  [BUGGY]    tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	        tokens.add(arg.substring(1));    tokens.add(arg.substring(3));	  	compilable	  [FE]  ComparisonFailure  	5	4	add
12	[BUG]  [BUGGY]      tokens.add(arg.substring(1));  tokens.add(arg.substring(3));  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]    {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D    [BUGGY]      tokens.add(arg.substring(1));  tokens.add(arg.substring(3));  [BUGGY]    tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	        tokens.add(arg.substring(1));    tokens.add(arg.substring(3));	  	compilable	  [FE]  ComparisonFailure  	5	4	add
13	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]    {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D    [BUGGY]      tokens.add(arg.substring(1));  tokens.add(arg.substring(4));  [BUGGY]    tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	        tokens.add(arg.substring(1));    tokens.add(arg.substring(4));	  	compilable	  [FE]  ComparisonFailure  	5	4	add
14	[BUG]  [BUGGY]      tokens.add(arg.substring(1));  tokens.add(arg.substring(4));  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]    {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D    [BUGGY]      tokens.add(arg.substring(1));  tokens.add(arg.substring(4));  [BUGGY]    tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	        tokens.add(arg.substring(1));    tokens.add(arg.substring(4));	  	compilable	  [FE]  ComparisonFailure  	5	4	add
15	[BUG]  [BUGGY]      tokens.add(arg.substring(1));  tokens.add(arg.substring(  1);  [CE]  ')'  expected  [FE]            ComparisonFailure    [CONTEXT]    {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D    [BUGGY]      tokens.add(arg.substring(1));  tokens.add(arg.substring(  1);  [BUGGY]    tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	        tokens.add(arg.substring(1));    tokens.add(arg.substring(  1);	  	non-compiled	[CE]  ')'  expected	5	None	add
16	[BUG]  [BUGGY]  tokens.add(arg.substring(i,  0));  [CE]  'else'  without  'if'  [FE]        ComparisonFailure    [CONTEXT]    {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D    [BUGGY]  tokens.add(arg.substring(i,  0));  [BUGGY]    }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	tokens.add(arg.substring(i,  0));	  tokens.add(arg.substring(i,    2));    	non-compiled	[CE]  'else'  without  'if'	15	None	replace
17	[BUG]  [BUGGY]  tokens.add(arg.substring(i,  1));  [CE]  'else'  without  'if'  [FE]          ComparisonFailure    [CONTEXT]    {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D    [BUGGY]  tokens.add(arg.substring(i,  1));  [BUGGY]    }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	tokens.add(arg.substring(i,  1));	  tokens.add(arg.substring(i,    2));    	non-compiled	[CE]  'else'  without  'if'	15	None	replace
18	[BUG]  [BUGGY]  [FE]  UnrecognizedOptionException  [FE]    ComparisonFailure    [CONTEXT]    {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D    [BUGGY]      tokens.add(arg.substring(i));  tokens.add(arg.substring(i));  [BUGGY]    tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	        tokens.add(arg.substring(i));    tokens.add(arg.substring(i));	  	compilable	  [FE]  UnrecognizedOptionException  	9	4	add
19	[BUG]  [BUGGY]      tokens.add(arg.substring(i));  tokens.add(arg.substring(i));  [FE]  UnrecognizedOptionException  [FE]    ComparisonFailure    [CONTEXT]    {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D    [BUGGY]      tokens.add(arg.substring(i));  tokens.add(arg.substring(i));  [BUGGY]    tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	        tokens.add(arg.substring(i));    tokens.add(arg.substring(i));	  	compilable	  [FE]  UnrecognizedOptionException  	9	4	add
20	[BUG]  [BUGGY]  [FE]  UnrecognizedOptionException  [FE]      ComparisonFailure    [CONTEXT]    {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D    [BUGGY]      tokens.add(arg.substring(i));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i));  }  else  {  tokens.add(arg.substring(i));  }  [BUGGY]    tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	        tokens.add(arg.substring(i));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i));  }  else  {  tokens.add(arg.substring(i));  }	  	compilable	  [FE]  UnrecognizedOptionException  	9	4	add
21	[BUG]  [BUGGY]      tokens.add(arg.substring(i));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i));  }  else  {  tokens.add(arg.substring(i));  }  [FE]  UnrecognizedOptionException  [FE]      ComparisonFailure    [CONTEXT]    {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D    [BUGGY]      tokens.add(arg.substring(i));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i));  }  else  {  tokens.add(arg.substring(i));  }  [BUGGY]    tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	        tokens.add(arg.substring(i));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i));  }  else  {  tokens.add(arg.substring(i));  }	  	compilable	  [FE]  UnrecognizedOptionException  	9	4	add
22	[BUG]  [BUGGY]  [FE]  UnrecognizedOptionException  [FE]        ComparisonFailure    [CONTEXT]    {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D    [BUGGY]      tokens.add(arg.substring(i));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i));  }  [BUGGY]    tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	        tokens.add(arg.substring(i));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i));  }	  	compilable	  [FE]  UnrecognizedOptionException  	9	4	add
23	[BUG]  [BUGGY]      tokens.add(arg.substring(i));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i));  }  [FE]  UnrecognizedOptionException  [FE]        ComparisonFailure    [CONTEXT]    {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D    [BUGGY]      tokens.add(arg.substring(i));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i));  }  [BUGGY]    tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	        tokens.add(arg.substring(i));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i));  }	  	compilable	  [FE]  UnrecognizedOptionException  	9	4	add
24	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]    {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D    [BUGGY]      tokens.add(arg.substring(i));  if(options.hasOption(arg.substring(i)))  {  tokens.add(arg.substring(i));  }  [BUGGY]    tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	        tokens.add(arg.substring(i));    if(options.hasOption(arg.substring(i)))  {  tokens.add(arg.substring(i));  }	  	compilable	  [FE]  ComparisonFailure  	9	4	add
25	[BUG]  [BUGGY]      tokens.add(arg.substring(i));  if(options.hasOption(arg.substring(i)))  {  tokens.add(arg.substring(i));  }  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]    {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D    [BUGGY]      tokens.add(arg.substring(i));  if(options.hasOption(arg.substring(i)))  {  tokens.add(arg.substring(i));  }  [BUGGY]    tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	        tokens.add(arg.substring(i));    if(options.hasOption(arg.substring(i)))  {  tokens.add(arg.substring(i));  }	  	compilable	  [FE]  ComparisonFailure  	9	4	add
26	[BUG]  [BUGGY]  [FE]  UnrecognizedOptionException  [FE]            ComparisonFailure    [CONTEXT]    {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D    [BUGGY]      tokens.add(arg.substring(i));  if(options.hasOption(arg.substring(i)))  {  tokens.add(arg.substring(i));  }  else  {  tokens.add(arg.substring(i));  }  [BUGGY]    tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	        tokens.add(arg.substring(i));    if(options.hasOption(arg.substring(i)))  {  tokens.add(arg.substring(i));  }  else  {  tokens.add(arg.substring(i));  }	  	compilable	  [FE]  UnrecognizedOptionException  	9	4	add
27	[BUG]  [BUGGY]      tokens.add(arg.substring(i));  if(options.hasOption(arg.substring(i)))  {  tokens.add(arg.substring(i));  }  else  {  tokens.add(arg.substring(i));  }  [FE]  UnrecognizedOptionException  [FE]            ComparisonFailure    [CONTEXT]    {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D    [BUGGY]      tokens.add(arg.substring(i));  if(options.hasOption(arg.substring(i)))  {  tokens.add(arg.substring(i));  }  else  {  tokens.add(arg.substring(i));  }  [BUGGY]    tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	        tokens.add(arg.substring(i));    if(options.hasOption(arg.substring(i)))  {  tokens.add(arg.substring(i));  }  else  {  tokens.add(arg.substring(i));  }	  	compilable	  [FE]  UnrecognizedOptionException  	9	4	add
28	[BUG]  [BUGGY]  Option  option  =  options.getOption(arg.substring(0,  2));  [CE]  'else'  without  'if'  [FE]    ComparisonFailure    [CONTEXT]    {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D    [BUGGY]  Option  option  =  options.getOption(arg.substring(0,  2));  [BUGGY]    tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	Option  option  =  options.getOption(arg.substring(0,  2));	      if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(1,    2));    }    	non-compiled	[CE]  'else'  without  'if'	20	None	replace
29	[BUG]  [BUGGY]  options.add(arg.substring(0,  2));  [CE]  'else'  without  'if'  [FE]      ComparisonFailure    [CONTEXT]    {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D    [BUGGY]  options.add(arg.substring(0,  2));  [BUGGY]    tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	options.add(arg.substring(0,  2));	      if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(1,    2));    }    	non-compiled	[CE]  'else'  without  'if'	20	None	replace
30	[BUG]  [BUGGY]  [FE]  MissingArgumentException  [FE]    MissingArgumentException    [CONTEXT]    {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D    [BUGGY]      tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(0,  2));  [BUGGY]    tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	        tokens.add(arg.substring(0,    2));    tokens.add(arg.substring(0,  2));	  	compilable	  [FE]  MissingArgumentException  	3	4	add
31	[BUG]  [BUGGY]      tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(0,  2));  [FE]  MissingArgumentException  [FE]    MissingArgumentException    [CONTEXT]    {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D    [BUGGY]      tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(0,  2));  [BUGGY]    tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	        tokens.add(arg.substring(0,    2));    tokens.add(arg.substring(0,  2));	  	compilable	  [FE]  MissingArgumentException  	3	4	add
32	[BUG]  [BUGGY]  [FE]  MissingArgumentException  [FE]      MissingArgumentException    [CONTEXT]    {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D    [BUGGY]      tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(1,  2));  [BUGGY]    tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	        tokens.add(arg.substring(0,    2));    tokens.add(arg.substring(1,  2));	  	compilable	  [FE]  MissingArgumentException  	3	4	add
33	[BUG]  [BUGGY]      tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(1,  2));  [FE]  MissingArgumentException  [FE]      MissingArgumentException    [CONTEXT]    {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D    [BUGGY]      tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(1,  2));  [BUGGY]    tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	        tokens.add(arg.substring(0,    2));    tokens.add(arg.substring(1,  2));	  	compilable	  [FE]  MissingArgumentException  	3	4	add
34	[BUG]  [BUGGY]  [FE]  MissingArgumentException  [FE]        MissingArgumentException    [CONTEXT]    {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D    [BUGGY]      tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(0,  1));  [BUGGY]    tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	        tokens.add(arg.substring(0,    2));    tokens.add(arg.substring(0,  1));	  	compilable	  [FE]  MissingArgumentException  	3	4	add
35	[BUG]  [BUGGY]      tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(0,  1));  [FE]  MissingArgumentException  [FE]        MissingArgumentException    [CONTEXT]    {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D    [BUGGY]      tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(0,  1));  [BUGGY]    tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	        tokens.add(arg.substring(0,    2));    tokens.add(arg.substring(0,  1));	  	compilable	  [FE]  MissingArgumentException  	3	4	add
36	[BUG]  [BUGGY]  [FE]  MissingArgumentException  [FE]          MissingArgumentException    [CONTEXT]    {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D    [BUGGY]      tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(2,  2));  [BUGGY]    tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	        tokens.add(arg.substring(0,    2));    tokens.add(arg.substring(2,  2));	  	compilable	  [FE]  MissingArgumentException  	3	4	add
37	[BUG]  [BUGGY]      tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(2,  2));  [FE]  MissingArgumentException  [FE]          MissingArgumentException    [CONTEXT]    {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D    [BUGGY]      tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(2,  2));  [BUGGY]    tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	        tokens.add(arg.substring(0,    2));    tokens.add(arg.substring(2,  2));	  	compilable	  [FE]  MissingArgumentException  	3	4	add
38	[BUG]  [BUGGY]  [FE]  MissingArgumentException  [FE]            MissingArgumentException    [CONTEXT]    {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D    [BUGGY]      tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(0,  3));  [BUGGY]    tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	        tokens.add(arg.substring(0,    2));    tokens.add(arg.substring(0,  3));	  	compilable	  [FE]  MissingArgumentException  	3	4	add
39	[BUG]  [BUGGY]      tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(0,  3));  [FE]  MissingArgumentException  [FE]            MissingArgumentException    [CONTEXT]    {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D    [BUGGY]      tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(0,  3));  [BUGGY]    tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	        tokens.add(arg.substring(0,    2));    tokens.add(arg.substring(0,  3));	  	compilable	  [FE]  MissingArgumentException  	3	4	add
40	[BUG]  [BUGGY]  tokens.add(arg.substring(2,  2));  [CE]  'else'  without  'if'  [FE]    ComparisonFailure    [CONTEXT]    {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D    [BUGGY]  tokens.add(arg.substring(2,  2));  [BUGGY]    tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	tokens.add(arg.substring(2,  2));	      tokens.add(arg.substring(i));    	non-compiled	[CE]  'else'  without  'if'	10	None	replace
41	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]    {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D    [BUGGY]      if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1,  2));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1,  2));  }  [BUGGY]    tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(1,    2));    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1,  2));  }	  	compilable	  [FE]  ComparisonFailure  	19	4	add
42	[BUG]  [BUGGY]      if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1,  2));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1,  2));  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]    {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D    [BUGGY]      if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1,  2));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1,  2));  }  [BUGGY]    tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(1,    2));    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1,  2));  }	  	compilable	  [FE]  ComparisonFailure  	19	4	add
43	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]    {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D    [BUGGY]      if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1,  2));  }  if(options.hasOption(arg.substring(1,  2)))  {  tokens.add(arg.substring(1,  2));  }  [BUGGY]    tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(1,    2));    }    if(options.hasOption(arg.substring(1,  2)))  {  tokens.add(arg.substring(1,  2));  }	  	compilable	  [FE]  ComparisonFailure  	19	4	add
44	[BUG]  [BUGGY]      if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1,  2));  }  if(options.hasOption(arg.substring(1,  2)))  {  tokens.add(arg.substring(1,  2));  }  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]    {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D    [BUGGY]      if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1,  2));  }  if(options.hasOption(arg.substring(1,  2)))  {  tokens.add(arg.substring(1,  2));  }  [BUGGY]    tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(1,    2));    }    if(options.hasOption(arg.substring(1,  2)))  {  tokens.add(arg.substring(1,  2));  }	  	compilable	  [FE]  ComparisonFailure  	19	4	add
45	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]    {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D    [BUGGY]      if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1,  2));  }  if(options.hasOption(arg.substring(2,  2)))  {  tokens.add(arg.substring(1,  2));  }  [BUGGY]    tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(1,    2));    }    if(options.hasOption(arg.substring(2,  2)))  {  tokens.add(arg.substring(1,  2));  }	  	compilable	  [FE]  ComparisonFailure  	19	4	add
46	[BUG]  [BUGGY]      if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1,  2));  }  if(options.hasOption(arg.substring(2,  2)))  {  tokens.add(arg.substring(1,  2));  }  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]    {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D    [BUGGY]      if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1,  2));  }  if(options.hasOption(arg.substring(2,  2)))  {  tokens.add(arg.substring(1,  2));  }  [BUGGY]    tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(1,    2));    }    if(options.hasOption(arg.substring(2,  2)))  {  tokens.add(arg.substring(1,  2));  }	  	compilable	  [FE]  ComparisonFailure  	19	4	add
47	[BUG]  [BUGGY]      if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1,  2));  }  ||  options.hasOption(arg.substring(1,  2)))  {  tokens.add(arg.substring(1,  2));  }  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]    {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D    [BUGGY]      if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1,  2));  }  ||  options.hasOption(arg.substring(1,  2)))  {  tokens.add(arg.substring(1,  2));  }  [BUGGY]    tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(1,    2));    }    ||  options.hasOption(arg.substring(1,  2)))  {  tokens.add(arg.substring(1,  2));  }	  	non-compiled	[CE]  illegal  start  of  expression	19	None	add
48	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]    {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D    [BUGGY]      tokens.add(arg.substring(2));  tokens.add(arg.substring(2));  [BUGGY]    tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	        tokens.add(arg.substring(2));    tokens.add(arg.substring(2));	  	compilable	  [FE]  ComparisonFailure  	1	3	add
49	[BUG]  [BUGGY]      tokens.add(arg.substring(2));  tokens.add(arg.substring(2));  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]    {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D    [BUGGY]      tokens.add(arg.substring(2));  tokens.add(arg.substring(2));  [BUGGY]    tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	        tokens.add(arg.substring(2));    tokens.add(arg.substring(2));	  	compilable	  [FE]  ComparisonFailure  	1	3	add
50	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]    {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D    [BUGGY]      tokens.add(arg.substring(2));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(2));  }  [BUGGY]    tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	        tokens.add(arg.substring(2));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(2));  }	  	compilable	  [FE]  ComparisonFailure  	1	3	add
51	[BUG]  [BUGGY]      tokens.add(arg.substring(2));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(2));  }  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]    {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D    [BUGGY]      tokens.add(arg.substring(2));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(2));  }  [BUGGY]    tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	        tokens.add(arg.substring(2));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(2));  }	  	compilable	  [FE]  ComparisonFailure  	1	3	add
52	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]    {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D    [BUGGY]      tokens.add(arg.substring(2));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  [BUGGY]    tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	        tokens.add(arg.substring(2));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }	  	compilable	  [FE]  ComparisonFailure  	1	3	add
53	[BUG]  [BUGGY]      tokens.add(arg.substring(2));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]    {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D    [BUGGY]      tokens.add(arg.substring(2));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  [BUGGY]    tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	        tokens.add(arg.substring(2));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }	  	compilable	  [FE]  ComparisonFailure  	1	3	add
54	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]    {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D    [BUGGY]      tokens.add(arg.substring(2));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(2,  2));  }  [BUGGY]    tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	        tokens.add(arg.substring(2));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(2,  2));  }	  	compilable	  [FE]  ComparisonFailure  	1	3	add
55	[BUG]  [BUGGY]      tokens.add(arg.substring(2));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(2,  2));  }  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]    {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D    [BUGGY]      tokens.add(arg.substring(2));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(2,  2));  }  [BUGGY]    tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	        tokens.add(arg.substring(2));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(2,  2));  }	  	compilable	  [FE]  ComparisonFailure  	1	3	add
56	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]            ComparisonFailure    [CONTEXT]    {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D    [BUGGY]      tokens.add(arg.substring(2));  if(options.hasOption(arg.substring(1)))  {  tokens.add(arg.substring(2));  }  [BUGGY]    tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	        tokens.add(arg.substring(2));    if(options.hasOption(arg.substring(1)))  {  tokens.add(arg.substring(2));  }	  	compilable	  [FE]  ComparisonFailure  	1	3	add
57	[BUG]  [BUGGY]      tokens.add(arg.substring(2));  if(options.hasOption(arg.substring(1)))  {  tokens.add(arg.substring(2));  }  [FE]  ComparisonFailure  [FE]            ComparisonFailure    [CONTEXT]    {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D    [BUGGY]      tokens.add(arg.substring(2));  if(options.hasOption(arg.substring(1)))  {  tokens.add(arg.substring(2));  }  [BUGGY]    tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	        tokens.add(arg.substring(2));    if(options.hasOption(arg.substring(1)))  {  tokens.add(arg.substring(2));  }	  	compilable	  [FE]  ComparisonFailure  	1	3	add
58	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]    {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D    [BUGGY]      tokens.add(arg.substring(i  +  2));  tokens.add(arg.substring(i  +  2));  [BUGGY]    tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	        tokens.add(arg.substring(i    +    2));    tokens.add(arg.substring(i  +  2));	  	compilable	  [FE]  ComparisonFailure  	7	3	add
59	[BUG]  [BUGGY]      tokens.add(arg.substring(i  +  2));  tokens.add(arg.substring(i  +  2));  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]    {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D    [BUGGY]      tokens.add(arg.substring(i  +  2));  tokens.add(arg.substring(i  +  2));  [BUGGY]    tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	        tokens.add(arg.substring(i    +    2));    tokens.add(arg.substring(i  +  2));	  	compilable	  [FE]  ComparisonFailure  	7	3	add
60	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]    {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D    [BUGGY]      tokens.add(arg.substring(i  +  2));  if(options.hasOption(arg.substring(i  +  2)))  {  tokens.add(arg.substring(i  +  2));  }  [BUGGY]    tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	        tokens.add(arg.substring(i    +    2));    if(options.hasOption(arg.substring(i  +  2)))  {  tokens.add(arg.substring(i  +  2));  }	  	compilable	  [FE]  ComparisonFailure  	7	3	add
61	[BUG]  [BUGGY]      tokens.add(arg.substring(i  +  2));  if(options.hasOption(arg.substring(i  +  2)))  {  tokens.add(arg.substring(i  +  2));  }  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]    {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D    [BUGGY]      tokens.add(arg.substring(i  +  2));  if(options.hasOption(arg.substring(i  +  2)))  {  tokens.add(arg.substring(i  +  2));  }  [BUGGY]    tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	        tokens.add(arg.substring(i    +    2));    if(options.hasOption(arg.substring(i  +  2)))  {  tokens.add(arg.substring(i  +  2));  }	  	compilable	  [FE]  ComparisonFailure  	7	3	add
62	[BUG]  [BUGGY]      tokens.add(arg.substring(i  +  2));  if(options.hasOption(arg.substring(i  +  2)))  {  tokens.add(arg.substring(i  +  2));  }  else  {  options.put(arg.substring(i  +  1));  }  [CE]  cannot  find  symbol  [FE]        ComparisonFailure    [CONTEXT]    {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D    [BUGGY]      tokens.add(arg.substring(i  +  2));  if(options.hasOption(arg.substring(i  +  2)))  {  tokens.add(arg.substring(i  +  2));  }  else  {  options.put(arg.substring(i  +  1));  }  [BUGGY]    tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	        tokens.add(arg.substring(i    +    2));    if(options.hasOption(arg.substring(i  +  2)))  {  tokens.add(arg.substring(i  +  2));  }  else  {  options.put(arg.substring(i  +  1));  }	  	non-compiled	[CE]  cannot  find  symbol	7	None	add
63	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]    {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D    [BUGGY]      tokens.add(arg.substring(i  +  2));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  2));  }  [BUGGY]    tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	        tokens.add(arg.substring(i    +    2));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  2));  }	  	compilable	  [FE]  ComparisonFailure  	7	3	add
64	[BUG]  [BUGGY]      tokens.add(arg.substring(i  +  2));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  2));  }  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]    {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D    [BUGGY]      tokens.add(arg.substring(i  +  2));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  2));  }  [BUGGY]    tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	        tokens.add(arg.substring(i    +    2));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  2));  }	  	compilable	  [FE]  ComparisonFailure  	7	3	add
65	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]            ComparisonFailure    [CONTEXT]    {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D    [BUGGY]      tokens.add(arg.substring(i  +  2));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  2));  }  else  {  tokens.add(arg.substring(i  +  2));  }  [BUGGY]    tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	        tokens.add(arg.substring(i    +    2));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  2));  }  else  {  tokens.add(arg.substring(i  +  2));  }	  	compilable	  [FE]  ComparisonFailure  	7	3	add
66	[BUG]  [BUGGY]      tokens.add(arg.substring(i  +  2));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  2));  }  else  {  tokens.add(arg.substring(i  +  2));  }  [FE]  ComparisonFailure  [FE]            ComparisonFailure    [CONTEXT]    {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D    [BUGGY]      tokens.add(arg.substring(i  +  2));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  2));  }  else  {  tokens.add(arg.substring(i  +  2));  }  [BUGGY]    tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	        tokens.add(arg.substring(i    +    2));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  2));  }  else  {  tokens.add(arg.substring(i  +  2));  }	  	compilable	  [FE]  ComparisonFailure  	7	3	add
67	[BUG]  [BUGGY]  tokens.add(arg.substring(0,  1));  [CE]  'else'  without  'if'  [FE]    MissingArgumentException    [CONTEXT]    {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D    [BUGGY]  tokens.add(arg.substring(0,  1));  [BUGGY]    tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	tokens.add(arg.substring(0,  1));	      if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    }    	non-compiled	[CE]  'else'  without  'if'	18	None	replace
68	[BUG]  [BUGGY]  tokens.add(arg.substring(0,  3));  [CE]  'else'  without  'if'  [FE]    MissingArgumentException    [CONTEXT]    {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D    [BUGGY]  tokens.add(arg.substring(0,  3));  [BUGGY]    tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	tokens.add(arg.substring(0,  3));	      tokens.add(arg.substring(0,    2));    	non-compiled	[CE]  'else'  without  'if'	4	None	replace
69	[BUG]  [BUGGY]  [FE]  MissingArgumentException  [FE]    MissingArgumentException    [CONTEXT]    {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D    [BUGGY]      if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  [BUGGY]    tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }	  	compilable	  [FE]  MissingArgumentException  	17	4	add
70	[BUG]  [BUGGY]      if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  [FE]  MissingArgumentException  [FE]    MissingArgumentException    [CONTEXT]    {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D    [BUGGY]      if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  [BUGGY]    tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }	  	compilable	  [FE]  MissingArgumentException  	17	4	add
71	[BUG]  [BUGGY]      if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  ||  options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  [CE]  illegal  start  of  expression  [FE]      MissingArgumentException    [CONTEXT]    {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D    [BUGGY]      if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  ||  options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  [BUGGY]    tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    }    ||  options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }	  	non-compiled	[CE]  illegal  start  of  expression	17	None	add
72	[BUG]  [BUGGY]      if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  while(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  [CE]  'else'  without  'if'  [FE]        MissingArgumentException    [CONTEXT]    {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D    [BUGGY]      if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  while(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  [BUGGY]    tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    }    while(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));	  	non-compiled	[CE]  'else'  without  'if'	17	None	add
73	[BUG]  [BUGGY]  timeout  [FE]          MissingArgumentException    [CONTEXT]    {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D    [BUGGY]      if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  while(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  [BUGGY]    tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    }    while(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }	  	compilable	timeout	17	1	add
74	[BUG]  [BUGGY]      if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  while(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  timeout  [FE]          MissingArgumentException    [CONTEXT]    {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D    [BUGGY]      if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  while(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  [BUGGY]    tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    }    while(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }	  	compilable	timeout	17	1	add
75	[BUG]  [BUGGY]  [FE]  MissingArgumentException  [FE]            MissingArgumentException    [CONTEXT]    {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D    [BUGGY]      if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  if(options.hasOption(arg.substring(0,  1)))  {  tokens.add(arg.substring(0,  2));  }  [BUGGY]    tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    }    if(options.hasOption(arg.substring(0,  1)))  {  tokens.add(arg.substring(0,  2));  }	  	compilable	  [FE]  MissingArgumentException  	17	4	add
76	[BUG]  [BUGGY]      if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  if(options.hasOption(arg.substring(0,  1)))  {  tokens.add(arg.substring(0,  2));  }  [FE]  MissingArgumentException  [FE]            MissingArgumentException    [CONTEXT]    {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D    [BUGGY]      if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  if(options.hasOption(arg.substring(0,  1)))  {  tokens.add(arg.substring(0,  2));  }  [BUGGY]    tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    }    if(options.hasOption(arg.substring(0,  1)))  {  tokens.add(arg.substring(0,  2));  }	  	compilable	  [FE]  MissingArgumentException  	17	4	add
77	[BUG]  [BUGGY]  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1));  }  [CE]  'else'  without  'if'  [FE]    ComparisonFailure    [CONTEXT]    {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D    [BUGGY]  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1));  }  [BUGGY]    tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1));  }	      tokens.add(arg.substring(1));    	non-compiled	[CE]  'else'  without  'if'	6	None	replace
78	[BUG]  [BUGGY]  else  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1));  }  [CE]  'else'  without  'if'  [FE]      ComparisonFailure    [CONTEXT]    {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D    [BUGGY]  else  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1));  }  [BUGGY]    tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	else  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1));  }	      tokens.add(arg.substring(1));    	non-compiled	[CE]  'else'  without  'if'	6	None	replace
79	[BUG]  [BUGGY]  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1));  }  else  {  tokens.add(arg.substring(2));  }  [CE]  'else'  without  'if'  [FE]        ComparisonFailure    [CONTEXT]    {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D    [BUGGY]  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1));  }  else  {  tokens.add(arg.substring(2));  }  [BUGGY]    tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1));  }  else  {  tokens.add(arg.substring(2));  }	      tokens.add(arg.substring(1));    	non-compiled	[CE]  'else'  without  'if'	6	None	replace
80	[BUG]  [BUGGY]  tokens.add(arg.substring(0,  1));  //  property=value  }  [CE]  'else'  without  'if'  [FE]        ComparisonFailure    [CONTEXT]    {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D    [BUGGY]  tokens.add(arg.substring(0,  1));  //  property=value  }  [BUGGY]    }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	tokens.add(arg.substring(0,  1));  //  property=value  }	  tokens.add(arg.substring(0,    2));    //    property=value    }    	non-compiled	[CE]  'else'  without  'if'	11	None	replace
81	[BUG]  [BUGGY]  tokens.add(arg.substring(1,  1));  [CE]  'else'  without  'if'  [FE]        ComparisonFailure    [CONTEXT]    {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D    [BUGGY]  tokens.add(arg.substring(1,  1));  [BUGGY]    }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	tokens.add(arg.substring(1,  1));	  tokens.add(arg.substring(1,    2));    	non-compiled	[CE]  'else'  without  'if'	16	None	replace
82	[BUG]  [BUGGY]  tokens.add(arg.substring(i,  0));  //  property=value  }  [CE]  'else'  without  'if'  [FE]          ComparisonFailure    [CONTEXT]    {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D    [BUGGY]  tokens.add(arg.substring(i,  0));  //  property=value  }  [BUGGY]    }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	tokens.add(arg.substring(i,  0));  //  property=value  }	  tokens.add(arg.substring(i,    2));    //    property=value    }    	non-compiled	[CE]  'else'  without  'if'	12	None	replace
83	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]    {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D    [BUGGY]      tokens.add(arg.substring(i  +  1));  tokens.add(arg.substring(i  +  1));  [BUGGY]    tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	        tokens.add(arg.substring(i    +    1));    tokens.add(arg.substring(i  +  1));	  	compilable	  [FE]  ComparisonFailure  	13	4	add
84	[BUG]  [BUGGY]      tokens.add(arg.substring(i  +  1));  tokens.add(arg.substring(i  +  1));  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]    {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D    [BUGGY]      tokens.add(arg.substring(i  +  1));  tokens.add(arg.substring(i  +  1));  [BUGGY]    tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	        tokens.add(arg.substring(i    +    1));    tokens.add(arg.substring(i  +  1));	  	compilable	  [FE]  ComparisonFailure  	13	4	add
85	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]    {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D    [BUGGY]      tokens.add(arg.substring(i  +  1));  tokens.add(arg.substring(i  +  1));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  [BUGGY]    tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	        tokens.add(arg.substring(i    +    1));    tokens.add(arg.substring(i  +  1));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }	  	compilable	  [FE]  ComparisonFailure  	13	4	add
86	[BUG]  [BUGGY]      tokens.add(arg.substring(i  +  1));  tokens.add(arg.substring(i  +  1));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]    {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D    [BUGGY]      tokens.add(arg.substring(i  +  1));  tokens.add(arg.substring(i  +  1));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  [BUGGY]    tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	        tokens.add(arg.substring(i    +    1));    tokens.add(arg.substring(i  +  1));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }	  	compilable	  [FE]  ComparisonFailure  	13	4	add
87	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]    {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D    [BUGGY]      tokens.add(arg.substring(i  +  1));  if(options.hasOption(arg.substring(i  +  1)))  {  tokens.add(arg.substring(i  +  1));  }  [BUGGY]    tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	        tokens.add(arg.substring(i    +    1));    if(options.hasOption(arg.substring(i  +  1)))  {  tokens.add(arg.substring(i  +  1));  }	  	compilable	  [FE]  ComparisonFailure  	13	4	add
88	[BUG]  [BUGGY]      tokens.add(arg.substring(i  +  1));  if(options.hasOption(arg.substring(i  +  1)))  {  tokens.add(arg.substring(i  +  1));  }  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]    {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D    [BUGGY]      tokens.add(arg.substring(i  +  1));  if(options.hasOption(arg.substring(i  +  1)))  {  tokens.add(arg.substring(i  +  1));  }  [BUGGY]    tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	        tokens.add(arg.substring(i    +    1));    if(options.hasOption(arg.substring(i  +  1)))  {  tokens.add(arg.substring(i  +  1));  }	  	compilable	  [FE]  ComparisonFailure  	13	4	add
89	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]    {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D    [BUGGY]      tokens.add(arg.substring(i  +  1));  if(options.hasOption(arg.substring(i  +  1)))  {  tokens.add(arg.substring(i  +  1));  }  else  {  tokens.add(arg.substring(i  +  1));  }  [BUGGY]    tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	        tokens.add(arg.substring(i    +    1));    if(options.hasOption(arg.substring(i  +  1)))  {  tokens.add(arg.substring(i  +  1));  }  else  {  tokens.add(arg.substring(i  +  1));  }	  	compilable	  [FE]  ComparisonFailure  	13	4	add
90	[BUG]  [BUGGY]      tokens.add(arg.substring(i  +  1));  if(options.hasOption(arg.substring(i  +  1)))  {  tokens.add(arg.substring(i  +  1));  }  else  {  tokens.add(arg.substring(i  +  1));  }  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]    {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D    [BUGGY]      tokens.add(arg.substring(i  +  1));  if(options.hasOption(arg.substring(i  +  1)))  {  tokens.add(arg.substring(i  +  1));  }  else  {  tokens.add(arg.substring(i  +  1));  }  [BUGGY]    tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	        tokens.add(arg.substring(i    +    1));    if(options.hasOption(arg.substring(i  +  1)))  {  tokens.add(arg.substring(i  +  1));  }  else  {  tokens.add(arg.substring(i  +  1));  }	  	compilable	  [FE]  ComparisonFailure  	13	4	add
91	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]            ComparisonFailure    [CONTEXT]    {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D    [BUGGY]      tokens.add(arg.substring(i  +  1));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  [BUGGY]    tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	        tokens.add(arg.substring(i    +    1));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }	  	compilable	  [FE]  ComparisonFailure  	13	4	add
92	[BUG]  [BUGGY]      tokens.add(arg.substring(i  +  1));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  [FE]  ComparisonFailure  [FE]            ComparisonFailure    [CONTEXT]    {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D    [BUGGY]      tokens.add(arg.substring(i  +  1));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  [BUGGY]    tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	        tokens.add(arg.substring(i    +    1));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }	  	compilable	  [FE]  ComparisonFailure  	13	4	add
93	[BUG]  [BUGGY]      if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  while(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  [CE]  'else'  without  'if'  [FE]    ComparisonFailure    [CONTEXT]    {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D    [BUGGY]      if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  while(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  [BUGGY]    tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(i    +    1));    }    while(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));	  	non-compiled	[CE]  'else'  without  'if'	21	None	add
94	[BUG]  [BUGGY]      if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1);  }  [CE]  ')'  expected  [FE]      ComparisonFailure    [CONTEXT]    {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D    [BUGGY]      if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1);  }  [BUGGY]    tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(i    +    1));    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1);  }	  	non-compiled	[CE]  ')'  expected	21	None	add
95	[BUG]  [BUGGY]  Option  options  =  options.getOption(arg.substring(0,  2));  [CE]  'else'  without  'if'  [FE]    ComparisonFailure    [CONTEXT]    {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D    [BUGGY]  Option  options  =  options.getOption(arg.substring(0,  2));  [BUGGY]    tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	Option  options  =  options.getOption(arg.substring(0,  2));	      if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(i    +    1));    }    	non-compiled	[CE]  'else'  without  'if'	22	None	replace
96	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]    {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D    [BUGGY]      tokens.add(arg.substring(i  +  2));  tokens.add(arg.substring(i  +  2));  if(options.hasOption(arg))  {  tokens.add(arg.substring(i  +  2));  }  [BUGGY]    tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	        tokens.add(arg.substring(i    +    2));    tokens.add(arg.substring(i  +  2));  if(options.hasOption(arg))  {  tokens.add(arg.substring(i  +  2));  }	  	compilable	  [FE]  ComparisonFailure  	7	3	add
97	[BUG]  [BUGGY]      tokens.add(arg.substring(i  +  2));  tokens.add(arg.substring(i  +  2));  if(options.hasOption(arg))  {  tokens.add(arg.substring(i  +  2));  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]    {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D    [BUGGY]      tokens.add(arg.substring(i  +  2));  tokens.add(arg.substring(i  +  2));  if(options.hasOption(arg))  {  tokens.add(arg.substring(i  +  2));  }  [BUGGY]    tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	        tokens.add(arg.substring(i    +    2));    tokens.add(arg.substring(i  +  2));  if(options.hasOption(arg))  {  tokens.add(arg.substring(i  +  2));  }	  	compilable	  [FE]  ComparisonFailure  	7	3	add
98	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]    {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D    [BUGGY]      tokens.add(arg.substring(i  +  2));  tokens.add(arg.substring(i  +  2));  if(options.hasOption(arg))  {  tokens.add(arg.substring(i  +  1));  }  [BUGGY]    tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	        tokens.add(arg.substring(i    +    2));    tokens.add(arg.substring(i  +  2));  if(options.hasOption(arg))  {  tokens.add(arg.substring(i  +  1));  }	  	compilable	  [FE]  ComparisonFailure  	7	3	add
99	[BUG]  [BUGGY]      tokens.add(arg.substring(i  +  2));  tokens.add(arg.substring(i  +  2));  if(options.hasOption(arg))  {  tokens.add(arg.substring(i  +  1));  }  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]    {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D    [BUGGY]      tokens.add(arg.substring(i  +  2));  tokens.add(arg.substring(i  +  2));  if(options.hasOption(arg))  {  tokens.add(arg.substring(i  +  1));  }  [BUGGY]    tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	        tokens.add(arg.substring(i    +    2));    tokens.add(arg.substring(i  +  2));  if(options.hasOption(arg))  {  tokens.add(arg.substring(i  +  1));  }	  	compilable	  [FE]  ComparisonFailure  	7	3	add
100	[BUG]  [BUGGY]      tokens.add(arg.substring(i  +  2));  tokens.add(arg.substring(i  +  2));  if(options.hasOption(arg.substring(0,  2))  {  tokens.add(arg.substring(i  +  2));  }  [CE]  ')'  expected  [FE]        ComparisonFailure    [CONTEXT]    {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D    [BUGGY]      tokens.add(arg.substring(i  +  2));  tokens.add(arg.substring(i  +  2));  if(options.hasOption(arg.substring(0,  2))  {  tokens.add(arg.substring(i  +  2));  }  [BUGGY]    tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	        tokens.add(arg.substring(i    +    2));    tokens.add(arg.substring(i  +  2));  if(options.hasOption(arg.substring(0,  2))  {  tokens.add(arg.substring(i  +  2));  }	  	non-compiled	[CE]  ')'  expected	7	None	add
101	[BUG]  [BUGGY]      tokens.add(arg.substring(i  +  2));  tokens.add(arg.substring(i  +  2));  if(options.hasOption(arg.substring(0,  2))  {  tokens.add(arg.substring(i  +  1));  }  [CE]  ')'  expected  [FE]          ComparisonFailure    [CONTEXT]    {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D    [BUGGY]      tokens.add(arg.substring(i  +  2));  tokens.add(arg.substring(i  +  2));  if(options.hasOption(arg.substring(0,  2))  {  tokens.add(arg.substring(i  +  1));  }  [BUGGY]    tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	        tokens.add(arg.substring(i    +    2));    tokens.add(arg.substring(i  +  2));  if(options.hasOption(arg.substring(0,  2))  {  tokens.add(arg.substring(i  +  1));  }	  	non-compiled	[CE]  ')'  expected	7	None	add
102	[BUG]  [BUGGY]  [FE]  MissingArgumentException  [FE]    MissingArgumentException    [CONTEXT]    {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D    [BUGGY]      if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  else  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  [BUGGY]    tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    }    else  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }	  	compilable	  [FE]  MissingArgumentException  	17	4	add
103	[BUG]  [BUGGY]      if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  else  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  [FE]  MissingArgumentException  [FE]    MissingArgumentException    [CONTEXT]    {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D    [BUGGY]      if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  else  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  [BUGGY]    tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    }    else  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }	  	compilable	  [FE]  MissingArgumentException  	17	4	add
104	[BUG]  [BUGGY]  [FE]  MissingArgumentException  [FE]      MissingArgumentException    [CONTEXT]    {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D    [BUGGY]      if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  if(options.hasOption(arg.substring(2)))  {  tokens.add(arg.substring(0,  2));  }  [BUGGY]    tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    }    if(options.hasOption(arg.substring(2)))  {  tokens.add(arg.substring(0,  2));  }	  	compilable	  [FE]  MissingArgumentException  	17	4	add
105	[BUG]  [BUGGY]      if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  if(options.hasOption(arg.substring(2)))  {  tokens.add(arg.substring(0,  2));  }  [FE]  MissingArgumentException  [FE]      MissingArgumentException    [CONTEXT]    {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D    [BUGGY]      if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  if(options.hasOption(arg.substring(2)))  {  tokens.add(arg.substring(0,  2));  }  [BUGGY]    tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    }    if(options.hasOption(arg.substring(2)))  {  tokens.add(arg.substring(0,  2));  }	  	compilable	  [FE]  MissingArgumentException  	17	4	add
106	[BUG]  [BUGGY]  [FE]  MissingArgumentException  [FE]        MissingArgumentException    [CONTEXT]    {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D    [BUGGY]      if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1,  2));  }  [BUGGY]    tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1,  2));  }	  	compilable	  [FE]  MissingArgumentException  	17	4	add
107	[BUG]  [BUGGY]      if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1,  2));  }  [FE]  MissingArgumentException  [FE]        MissingArgumentException    [CONTEXT]    {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D    [BUGGY]      if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1,  2));  }  [BUGGY]    tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1,  2));  }	  	compilable	  [FE]  MissingArgumentException  	17	4	add
108	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]    {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D    [BUGGY]      if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1,  2));  }  else  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1,  2));  }  [BUGGY]    tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(1,    2));    }    else  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1,  2));  }	  	compilable	  [FE]  ComparisonFailure  	19	4	add
109	[BUG]  [BUGGY]      if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1,  2));  }  else  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1,  2));  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]    {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D    [BUGGY]      if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1,  2));  }  else  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1,  2));  }  [BUGGY]    tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(1,    2));    }    else  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1,  2));  }	  	compilable	  [FE]  ComparisonFailure  	19	4	add
110	[BUG]  [BUGGY]      if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1,  2));  }  while(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1,  2));  [CE]  'else'  without  'if'  [FE]      ComparisonFailure    [CONTEXT]    {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D    [BUGGY]      if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1,  2));  }  while(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1,  2));  [BUGGY]    tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(1,    2));    }    while(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1,  2));	  	non-compiled	[CE]  'else'  without  'if'	19	None	add
111	[BUG]  [BUGGY]  timeout  [FE]        ComparisonFailure    [CONTEXT]    {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D    [BUGGY]      if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1,  2));  }  while(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1,  2));  }  [BUGGY]    tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(1,    2));    }    while(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1,  2));  }	  	compilable	timeout	19	1	add
112	[BUG]  [BUGGY]      if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1,  2));  }  while(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1,  2));  }  timeout  [FE]        ComparisonFailure    [CONTEXT]    {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D    [BUGGY]      if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1,  2));  }  while(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1,  2));  }  [BUGGY]    tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(1,    2));    }    while(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1,  2));  }	  	compilable	timeout	19	1	add
113	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]    {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D    [BUGGY]      tokens.add(arg.substring(2));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(arg.substring(2));  }  [BUGGY]    tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	        tokens.add(arg.substring(2));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(arg.substring(2));  }	  	compilable	  [FE]  ComparisonFailure  	1	3	add
114	[BUG]  [BUGGY]      tokens.add(arg.substring(2));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(arg.substring(2));  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]    {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D    [BUGGY]      tokens.add(arg.substring(2));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(arg.substring(2));  }  [BUGGY]    tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	        tokens.add(arg.substring(2));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(arg.substring(2));  }	  	compilable	  [FE]  ComparisonFailure  	1	3	add
115	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]    {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D    [BUGGY]      tokens.add(arg.substring(2));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(arg.substring(1));  }  [BUGGY]    tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	        tokens.add(arg.substring(2));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(arg.substring(1));  }	  	compilable	  [FE]  ComparisonFailure  	1	3	add
116	[BUG]  [BUGGY]      tokens.add(arg.substring(2));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(arg.substring(1));  }  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]    {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D    [BUGGY]      tokens.add(arg.substring(2));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(arg.substring(1));  }  [BUGGY]    tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	        tokens.add(arg.substring(2));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(arg.substring(1));  }	  	compilable	  [FE]  ComparisonFailure  	1	3	add
117	[BUG]  [BUGGY]      tokens.add(arg.substring(i));  if(options.hasOption(arg.substring(0,  2))  {  tokens.add(arg.substring(i));  }  else  {  tokens.add(arg.substring(i));  }  [CE]  ')'  expected  [FE]    ComparisonFailure    [CONTEXT]    {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D    [BUGGY]      tokens.add(arg.substring(i));  if(options.hasOption(arg.substring(0,  2))  {  tokens.add(arg.substring(i));  }  else  {  tokens.add(arg.substring(i));  }  [BUGGY]    tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	        tokens.add(arg.substring(i));    if(options.hasOption(arg.substring(0,  2))  {  tokens.add(arg.substring(i));  }  else  {  tokens.add(arg.substring(i));  }	  	non-compiled	[CE]  ')'  expected	9	None	add
118	[BUG]  [BUGGY]  [FE]  UnrecognizedOptionException  [FE]      ComparisonFailure    [CONTEXT]    {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D    [BUGGY]      tokens.add(arg.substring(i));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i));  }  else  {  tokens.add(opt);  }  [BUGGY]    tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	        tokens.add(arg.substring(i));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i));  }  else  {  tokens.add(opt);  }	  	compilable	  [FE]  UnrecognizedOptionException  	9	4	add
119	[BUG]  [BUGGY]      tokens.add(arg.substring(i));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i));  }  else  {  tokens.add(opt);  }  [FE]  UnrecognizedOptionException  [FE]      ComparisonFailure    [CONTEXT]    {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D    [BUGGY]      tokens.add(arg.substring(i));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i));  }  else  {  tokens.add(opt);  }  [BUGGY]    tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	        tokens.add(arg.substring(i));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i));  }  else  {  tokens.add(opt);  }	  	compilable	  [FE]  UnrecognizedOptionException  	9	4	add
120	[BUG]  [BUGGY]  tokens.add(arg.substring(0,  2));  //  property='else'  without  'if'  [CE]  'else'  without  'if'  [FE]        ComparisonFailure    [CONTEXT]    {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D    [BUGGY]  tokens.add(arg.substring(0,  2));  //  property='else'  without  'if'  [BUGGY]    }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	tokens.add(arg.substring(0,  2));  //  property='else'  without  'if'	  tokens.add(arg.substring(0,    2));    //    property=value    }    	non-compiled	[CE]  'else'  without  'if'	11	None	replace
121	[BUG]  [BUGGY]  tokens.add(arg.substring(0,  2)+  1);  [CE]  'else'  without  'if'  [FE]    MissingArgumentException    [CONTEXT]    {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D    [BUGGY]  tokens.add(arg.substring(0,  2)+  1);  [BUGGY]    tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	tokens.add(arg.substring(0,  2)+  1);	      tokens.add(arg.substring(0,    2));    	non-compiled	[CE]  'else'  without  'if'	4	None	replace
122	[BUG]  [BUGGY]  tokens.add(arg.substring(3));  [CE]  'else'  without  'if'  [FE]    ComparisonFailure    [CONTEXT]    {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D    [BUGGY]  tokens.add(arg.substring(3));  [BUGGY]    tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	tokens.add(arg.substring(3));	      tokens.add(arg.substring(1));    	non-compiled	[CE]  'else'  without  'if'	6	None	replace
123	[BUG]  [BUGGY]  tokens.add(arg.substring(i  +  2,  2));  [CE]  'else'  without  'if'  [FE]    ComparisonFailure    [CONTEXT]    {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D    [BUGGY]  tokens.add(arg.substring(i  +  2,  2));  [BUGGY]    tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	tokens.add(arg.substring(i  +  2,  2));	      tokens.add(arg.substring(i    +    2));    	non-compiled	[CE]  'else'  without  'if'	8	None	replace
124	[BUG]  [BUGGY]  Option  option  =  options.getOption(arg);  [CE]  'else'  without  'if'  [FE]    MissingArgumentException    [CONTEXT]    {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D    [BUGGY]  Option  option  =  options.getOption(arg);  [BUGGY]    tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	Option  option  =  options.getOption(arg);	      if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    }    	non-compiled	[CE]  'else'  without  'if'	18	None	replace
125	[BUG]  [BUGGY]      tokens.add(arg.substring(0,  2));  if(options.hasOption(arg.substring(0,  2))  {  tokens.add(arg.substring(0,  2));  }  [CE]  ')'  expected  [FE]    MissingArgumentException    [CONTEXT]    {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D    [BUGGY]      tokens.add(arg.substring(0,  2));  if(options.hasOption(arg.substring(0,  2))  {  tokens.add(arg.substring(0,  2));  }  [BUGGY]    tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	        tokens.add(arg.substring(0,    2));    if(options.hasOption(arg.substring(0,  2))  {  tokens.add(arg.substring(0,  2));  }	  	non-compiled	[CE]  ')'  expected	3	None	add
126	[BUG]  [BUGGY]      tokens.add(arg.substring(0,  2));  if(options.hasOption(arg.substring(0,  2))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(arg.substring(0,  2));  }  [CE]  ')'  expected  [FE]      MissingArgumentException    [CONTEXT]    {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D    [BUGGY]      tokens.add(arg.substring(0,  2));  if(options.hasOption(arg.substring(0,  2))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(arg.substring(0,  2));  }  [BUGGY]    tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	        tokens.add(arg.substring(0,    2));    if(options.hasOption(arg.substring(0,  2))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(arg.substring(0,  2));  }	  	non-compiled	[CE]  ')'  expected	3	None	add
127	[BUG]  [BUGGY]  [FE]  MissingArgumentException  [FE]        MissingArgumentException    [CONTEXT]    {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D    [BUGGY]      tokens.add(arg.substring(0,  2));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  [BUGGY]    tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	        tokens.add(arg.substring(0,    2));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }	  	compilable	  [FE]  MissingArgumentException  	3	4	add
128	[BUG]  [BUGGY]      tokens.add(arg.substring(0,  2));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  [FE]  MissingArgumentException  [FE]        MissingArgumentException    [CONTEXT]    {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D    [BUGGY]      tokens.add(arg.substring(0,  2));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  [BUGGY]    tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	        tokens.add(arg.substring(0,    2));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }	  	compilable	  [FE]  MissingArgumentException  	3	4	add
129	[BUG]  [BUGGY]      tokens.add(arg.substring(0,  2));  if(options.hasOption(arg.substring(0,  2))  {  tokens.add(arg.substring(0,  2));  }  else  {  options.addOption(arg.substring(0,  2));  }  [CE]  ')'  expected  [FE]          MissingArgumentException    [CONTEXT]    {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D    [BUGGY]      tokens.add(arg.substring(0,  2));  if(options.hasOption(arg.substring(0,  2))  {  tokens.add(arg.substring(0,  2));  }  else  {  options.addOption(arg.substring(0,  2));  }  [BUGGY]    tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	        tokens.add(arg.substring(0,    2));    if(options.hasOption(arg.substring(0,  2))  {  tokens.add(arg.substring(0,  2));  }  else  {  options.addOption(arg.substring(0,  2));  }	  	non-compiled	[CE]  ')'  expected	3	None	add
130	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]    {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D    [BUGGY]      tokens.add(arg.substring(i  +  1));  tokens.add(arg.substring(i  +  1));  if(options.hasOption(arg))  {  tokens.add(arg.substring(i  +  1));  }  [BUGGY]    tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	        tokens.add(arg.substring(i    +    1));    tokens.add(arg.substring(i  +  1));  if(options.hasOption(arg))  {  tokens.add(arg.substring(i  +  1));  }	  	compilable	  [FE]  ComparisonFailure  	13	4	add
131	[BUG]  [BUGGY]      tokens.add(arg.substring(i  +  1));  tokens.add(arg.substring(i  +  1));  if(options.hasOption(arg))  {  tokens.add(arg.substring(i  +  1));  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]    {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D    [BUGGY]      tokens.add(arg.substring(i  +  1));  tokens.add(arg.substring(i  +  1));  if(options.hasOption(arg))  {  tokens.add(arg.substring(i  +  1));  }  [BUGGY]    tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	        tokens.add(arg.substring(i    +    1));    tokens.add(arg.substring(i  +  1));  if(options.hasOption(arg))  {  tokens.add(arg.substring(i  +  1));  }	  	compilable	  [FE]  ComparisonFailure  	13	4	add
132	[BUG]  [BUGGY]      tokens.add(arg.substring(i  +  1));  tokens.add(arg.substring(i  +  1));  if(options.hasOption(arg.substring(0,  2))  {  tokens.add(arg.substring(i  +  1));  }  [CE]  ')'  expected  [FE]      ComparisonFailure    [CONTEXT]    {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D    [BUGGY]      tokens.add(arg.substring(i  +  1));  tokens.add(arg.substring(i  +  1));  if(options.hasOption(arg.substring(0,  2))  {  tokens.add(arg.substring(i  +  1));  }  [BUGGY]    tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	        tokens.add(arg.substring(i    +    1));    tokens.add(arg.substring(i  +  1));  if(options.hasOption(arg.substring(0,  2))  {  tokens.add(arg.substring(i  +  1));  }	  	non-compiled	[CE]  ')'  expected	13	None	add
133	[BUG]  [BUGGY]      tokens.add(arg.substring(i  +  1));  tokens.add(arg.substring(i  +  1));  if(options.hasOption(arg))  {  tokens.add(arg.substring(i  +  1);  }  [CE]  ')'  expected  [FE]        ComparisonFailure    [CONTEXT]    {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D    [BUGGY]      tokens.add(arg.substring(i  +  1));  tokens.add(arg.substring(i  +  1));  if(options.hasOption(arg))  {  tokens.add(arg.substring(i  +  1);  }  [BUGGY]    tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	        tokens.add(arg.substring(i    +    1));    tokens.add(arg.substring(i  +  1));  if(options.hasOption(arg))  {  tokens.add(arg.substring(i  +  1);  }	  	non-compiled	[CE]  ')'  expected	13	None	add
134	[BUG]  [BUGGY]      tokens.add(arg.substring(i));  TokenBuffer  tokens  =  new  TokenBuffer(arg.substring(i));  [CE]  cannot  find  symbol  [FE]    ComparisonFailure    [CONTEXT]    {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D    [BUGGY]      tokens.add(arg.substring(i));  TokenBuffer  tokens  =  new  TokenBuffer(arg.substring(i));  [BUGGY]    tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	        tokens.add(arg.substring(i));    TokenBuffer  tokens  =  new  TokenBuffer(arg.substring(i));	  	non-compiled	[CE]  cannot  find  symbol	9	None	add
135	[BUG]  [BUGGY]      tokens.add(arg.substring(i));  TokenBuffer  tokens  =  new  TokenBuffer(options.getOption(arg.substring(i)).toString());  [CE]  cannot  find  symbol  [FE]      ComparisonFailure    [CONTEXT]    {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D    [BUGGY]      tokens.add(arg.substring(i));  TokenBuffer  tokens  =  new  TokenBuffer(options.getOption(arg.substring(i)).toString());  [BUGGY]    tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	        tokens.add(arg.substring(i));    TokenBuffer  tokens  =  new  TokenBuffer(options.getOption(arg.substring(i)).toString());	  	non-compiled	[CE]  cannot  find  symbol	9	None	add
136	[BUG]  [BUGGY]      tokens.add(arg.substring(i));  TokenBuffer  tokens  =  new  TokenBuffer(arg.substring(i).toLowerCase());  [CE]  cannot  find  symbol  [FE]        ComparisonFailure    [CONTEXT]    {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D    [BUGGY]      tokens.add(arg.substring(i));  TokenBuffer  tokens  =  new  TokenBuffer(arg.substring(i).toLowerCase());  [BUGGY]    tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	        tokens.add(arg.substring(i));    TokenBuffer  tokens  =  new  TokenBuffer(arg.substring(i).toLowerCase());	  	non-compiled	[CE]  cannot  find  symbol	9	None	add
137	[BUG]  [BUGGY]      tokens.add(arg.substring(i));  TokenBuffer  tokens  =  new  TokenBuffer(arg.substring(i).toString());  [CE]  cannot  find  symbol  [FE]          ComparisonFailure    [CONTEXT]    {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D    [BUGGY]      tokens.add(arg.substring(i));  TokenBuffer  tokens  =  new  TokenBuffer(arg.substring(i).toString());  [BUGGY]    tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	        tokens.add(arg.substring(i));    TokenBuffer  tokens  =  new  TokenBuffer(arg.substring(i).toString());	  	non-compiled	[CE]  cannot  find  symbol	9	None	add
138	[BUG]  [BUGGY]  tokens.add(arg.substring(1,  i));  [CE]  'else'  without  'if'  [FE]        ComparisonFailure    [CONTEXT]    {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D    [BUGGY]  tokens.add(arg.substring(1,  i));  [BUGGY]    }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	tokens.add(arg.substring(1,  i));	  tokens.add(arg.substring(1,    2));    	non-compiled	[CE]  'else'  without  'if'	16	None	replace
139	[BUG]  [BUGGY]  tokens.add(arg.substring(0,  2).toString());  [CE]  'else'  without  'if'  [FE]    MissingArgumentException    [CONTEXT]    {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D    [BUGGY]  tokens.add(arg.substring(0,  2).toString());  [BUGGY]    tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	tokens.add(arg.substring(0,  2).toString());	      if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    }    	non-compiled	[CE]  'else'  without  'if'	18	None	replace
140	[BUG]  [BUGGY]  tokens.add(arg.substring(0,  i));  [CE]  'else'  without  'if'  [FE]        ComparisonFailure    [CONTEXT]    {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D    [BUGGY]  tokens.add(arg.substring(0,  i));  [BUGGY]    }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	tokens.add(arg.substring(0,  i));	  tokens.add(arg.substring(0,    2));    //    property=value    }    	non-compiled	[CE]  'else'  without  'if'	11	None	replace
141	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]    {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D    [BUGGY]      if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  else  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  [BUGGY]    tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(i    +    1));    }    else  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }	  	compilable	  [FE]  ComparisonFailure  	21	4	add
142	[BUG]  [BUGGY]      if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  else  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]    {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D    [BUGGY]      if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  else  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  [BUGGY]    tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(i    +    1));    }    else  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }	  	compilable	  [FE]  ComparisonFailure  	21	4	add
143	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]    {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D    [BUGGY]      if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  if(options.hasOption(arg.substring(0,  1)))  {  tokens.add(arg.substring(i  +  1));  }  [BUGGY]    tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(i    +    1));    }    if(options.hasOption(arg.substring(0,  1)))  {  tokens.add(arg.substring(i  +  1));  }	  	compilable	  [FE]  ComparisonFailure  	21	4	add
144	[BUG]  [BUGGY]      if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  if(options.hasOption(arg.substring(0,  1)))  {  tokens.add(arg.substring(i  +  1));  }  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]    {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D    [BUGGY]      if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  if(options.hasOption(arg.substring(0,  1)))  {  tokens.add(arg.substring(i  +  1));  }  [BUGGY]    tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(i    +    1));    }    if(options.hasOption(arg.substring(0,  1)))  {  tokens.add(arg.substring(i  +  1));  }	  	compilable	  [FE]  ComparisonFailure  	21	4	add
145	[BUG]  [BUGGY]  [FE]  MissingArgumentException  [FE]    MissingArgumentException    [CONTEXT]    {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D    [BUGGY]      tokens.add(arg.substring(0,  2));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	        tokens.add(arg.substring(0,    2));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	compilable	  [FE]  MissingArgumentException  	3	4	add
146	[BUG]  [BUGGY]      tokens.add(arg.substring(0,  2));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  MissingArgumentException  [FE]    MissingArgumentException    [CONTEXT]    {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D    [BUGGY]      tokens.add(arg.substring(0,  2));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	        tokens.add(arg.substring(0,    2));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	compilable	  [FE]  MissingArgumentException  	3	4	add
147	[BUG]  [BUGGY]  [FE]  MissingArgumentException  [FE]      MissingArgumentException    [CONTEXT]    {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D    [BUGGY]      tokens.add(arg.substring(0,  2));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(opt);  }  [BUGGY]    tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	        tokens.add(arg.substring(0,    2));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(opt);  }	  	compilable	  [FE]  MissingArgumentException  	3	4	add
148	[BUG]  [BUGGY]      tokens.add(arg.substring(0,  2));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(opt);  }  [FE]  MissingArgumentException  [FE]      MissingArgumentException    [CONTEXT]    {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D    [BUGGY]      tokens.add(arg.substring(0,  2));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(opt);  }  [BUGGY]    tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	        tokens.add(arg.substring(0,    2));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(opt);  }	  	compilable	  [FE]  MissingArgumentException  	3	4	add
149	[BUG]  [BUGGY]      tokens.add(arg.substring(i  +  2));  TokenBuffer  tokens  =  new  TokenBuffer(arg.substring(i  +  2));  [CE]  cannot  find  symbol  [FE]    ComparisonFailure    [CONTEXT]    {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D    [BUGGY]      tokens.add(arg.substring(i  +  2));  TokenBuffer  tokens  =  new  TokenBuffer(arg.substring(i  +  2));  [BUGGY]    tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	        tokens.add(arg.substring(i    +    2));    TokenBuffer  tokens  =  new  TokenBuffer(arg.substring(i  +  2));	  	non-compiled	[CE]  cannot  find  symbol	7	None	add
150	[BUG]  [BUGGY]  tokens.add(arg.substring(i  +  1,  2));  [CE]  'else'  without  'if'  [FE]    ComparisonFailure    [CONTEXT]    {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D    [BUGGY]  tokens.add(arg.substring(i  +  1,  2));  [BUGGY]    tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	tokens.add(arg.substring(i  +  1,  2));	      tokens.add(arg.substring(i    +    1));    	non-compiled	[CE]  'else'  without  'if'	14	None	replace
151	[BUG]  [BUGGY]  while(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  [CE]  'else'  without  'if'  [FE]    ComparisonFailure    [CONTEXT]    {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D    [BUGGY]  while(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  [BUGGY]    tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	while(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));	      if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(i    +    1));    }    	non-compiled	[CE]  'else'  without  'if'	22	None	replace
152	[BUG]  [BUGGY]  while(options.hasOption(arg.substring(0,  2))  <  =  0)  {  tokens.add(arg.substring(i  +  1));  [CE]  illegal  start  of  expression  [FE]      ComparisonFailure    [CONTEXT]    {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D    [BUGGY]  while(options.hasOption(arg.substring(0,  2))  <  =  0)  {  tokens.add(arg.substring(i  +  1));  [BUGGY]    tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	while(options.hasOption(arg.substring(0,  2))  <  =  0)  {  tokens.add(arg.substring(i  +  1));	      if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(i    +    1));    }    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
153	[BUG]  [BUGGY]  while(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  [CE]  'else'  without  'if'  [FE]        ComparisonFailure    [CONTEXT]    {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D    [BUGGY]  while(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  [BUGGY]    tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	while(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }	      if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(i    +    1));    }    	non-compiled	[CE]  'else'  without  'if'	22	None	replace
154	[BUG]  [BUGGY]      if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1,  2));  }  if(options.hasOption(arg.substring(0,  2)))  <  tokens.add(arg.substring(1,  2));  }  [CE]  >  expected  [FE]    ComparisonFailure    [CONTEXT]    {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D    [BUGGY]      if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1,  2));  }  if(options.hasOption(arg.substring(0,  2)))  <  tokens.add(arg.substring(1,  2));  }  [BUGGY]    tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(1,    2));    }    if(options.hasOption(arg.substring(0,  2)))  <  tokens.add(arg.substring(1,  2));  }	  	non-compiled	[CE]  >  expected	19	None	add
155	[BUG]  [BUGGY]      if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  if(options.hasOption(arg.substring(0,  2)))  <  tokens.add(arg.substring(0,  2));  }  [CE]  >  expected  [FE]    MissingArgumentException    [CONTEXT]    {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D    [BUGGY]      if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  if(options.hasOption(arg.substring(0,  2)))  <  tokens.add(arg.substring(0,  2));  }  [BUGGY]    tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    }    if(options.hasOption(arg.substring(0,  2)))  <  tokens.add(arg.substring(0,  2));  }	  	non-compiled	[CE]  >  expected	17	None	add
156	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]    {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D    [BUGGY]      tokens.add(arg.substring(2));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(2  +  1));  }  [BUGGY]    tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	        tokens.add(arg.substring(2));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(2  +  1));  }	  	compilable	  [FE]  ComparisonFailure  	1	3	add
157	[BUG]  [BUGGY]      tokens.add(arg.substring(2));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(2  +  1));  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]    {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D    [BUGGY]      tokens.add(arg.substring(2));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(2  +  1));  }  [BUGGY]    tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	        tokens.add(arg.substring(2));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(2  +  1));  }	  	compilable	  [FE]  ComparisonFailure  	1	3	add
158	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]    {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D    [BUGGY]      tokens.add(arg.substring(2));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1,  2));  }  [BUGGY]    tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	        tokens.add(arg.substring(2));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1,  2));  }	  	compilable	  [FE]  ComparisonFailure  	1	3	add
159	[BUG]  [BUGGY]      tokens.add(arg.substring(2));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1,  2));  }  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]    {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D    [BUGGY]      tokens.add(arg.substring(2));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1,  2));  }  [BUGGY]    tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	        tokens.add(arg.substring(2));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1,  2));  }	  	compilable	  [FE]  ComparisonFailure  	1	3	add
160	[BUG]  [BUGGY]      tokens.add(arg.substring(i  +  1));  TokenBuffer  tokens  =  new  TokenBuffer(arg.substring(i  +  1));  tokens.add(arg.substring(i  +  1));  [CE]  cannot  find  symbol  [FE]    ComparisonFailure    [CONTEXT]    {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D    [BUGGY]      tokens.add(arg.substring(i  +  1));  TokenBuffer  tokens  =  new  TokenBuffer(arg.substring(i  +  1));  tokens.add(arg.substring(i  +  1));  [BUGGY]    tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	        tokens.add(arg.substring(i    +    1));    TokenBuffer  tokens  =  new  TokenBuffer(arg.substring(i  +  1));  tokens.add(arg.substring(i  +  1));	  	non-compiled	[CE]  cannot  find  symbol	13	None	add
161	[BUG]  [BUGGY]      tokens.add(arg.substring(i  +  1));  TokenBuffer  tokens  =  new  TokenBuffer(arg.substring(i  +  1));  [CE]  cannot  find  symbol  [FE]      ComparisonFailure    [CONTEXT]    {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D    [BUGGY]      tokens.add(arg.substring(i  +  1));  TokenBuffer  tokens  =  new  TokenBuffer(arg.substring(i  +  1));  [BUGGY]    tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	        tokens.add(arg.substring(i    +    1));    TokenBuffer  tokens  =  new  TokenBuffer(arg.substring(i  +  1));	  	non-compiled	[CE]  cannot  find  symbol	13	None	add
