bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  MissingArgumentException  [FE]    MissingArgumentException    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(0,    2));    tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(0,  2));  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	                tokens.add(arg.substring(0,        2));        tokens.add(arg.substring(0,    2));    tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(0,  2));	  	compilable	  [FE]  MissingArgumentException  	30	4	add
2	[BUG]  [BUGGY]          tokens.add(arg.substring(0,    2));    tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(0,  2));  [FE]  MissingArgumentException  [FE]    MissingArgumentException    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(0,    2));    tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(0,  2));  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                tokens.add(arg.substring(0,        2));        tokens.add(arg.substring(0,    2));    tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(0,  2));	  	compilable	  [FE]  MissingArgumentException  	30	4	add
3	[BUG]  [BUGGY]  [FE]  MissingArgumentException  [FE]      MissingArgumentException    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(0,    2));    tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(2));  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	                tokens.add(arg.substring(0,        2));        tokens.add(arg.substring(0,    2));    tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(2));	  	compilable	  [FE]  MissingArgumentException  	30	4	add
4	[BUG]  [BUGGY]          tokens.add(arg.substring(0,    2));    tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(2));  [FE]  MissingArgumentException  [FE]      MissingArgumentException    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(0,    2));    tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(2));  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                tokens.add(arg.substring(0,        2));        tokens.add(arg.substring(0,    2));    tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(2));	  	compilable	  [FE]  MissingArgumentException  	30	4	add
5	[BUG]  [BUGGY]  [FE]  MissingArgumentException  [FE]        MissingArgumentException    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(0,    2));    tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(0,  2));  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	                tokens.add(arg.substring(0,        2));        tokens.add(arg.substring(0,    2));    tokens.add(arg.substring(0,  2));	  	compilable	  [FE]  MissingArgumentException  	30	4	add
6	[BUG]  [BUGGY]          tokens.add(arg.substring(0,    2));    tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(0,  2));  [FE]  MissingArgumentException  [FE]        MissingArgumentException    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(0,    2));    tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(0,  2));  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                tokens.add(arg.substring(0,        2));        tokens.add(arg.substring(0,    2));    tokens.add(arg.substring(0,  2));	  	compilable	  [FE]  MissingArgumentException  	30	4	add
7	[BUG]  [BUGGY]  [FE]  MissingArgumentException  [FE]          MissingArgumentException    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(0,    2));    tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(2,  2));  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	                tokens.add(arg.substring(0,        2));        tokens.add(arg.substring(0,    2));    tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(2,  2));	  	compilable	  [FE]  MissingArgumentException  	30	4	add
8	[BUG]  [BUGGY]          tokens.add(arg.substring(0,    2));    tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(2,  2));  [FE]  MissingArgumentException  [FE]          MissingArgumentException    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(0,    2));    tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(2,  2));  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                tokens.add(arg.substring(0,        2));        tokens.add(arg.substring(0,    2));    tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(2,  2));	  	compilable	  [FE]  MissingArgumentException  	30	4	add
9	[BUG]  [BUGGY]  [FE]  MissingArgumentException  [FE]            MissingArgumentException    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(0,    2));    tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(1,  2));  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	                tokens.add(arg.substring(0,        2));        tokens.add(arg.substring(0,    2));    tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(1,  2));	  	compilable	  [FE]  MissingArgumentException  	30	4	add
10	[BUG]  [BUGGY]          tokens.add(arg.substring(0,    2));    tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(1,  2));  [FE]  MissingArgumentException  [FE]            MissingArgumentException    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(0,    2));    tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(1,  2));  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                tokens.add(arg.substring(0,        2));        tokens.add(arg.substring(0,    2));    tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(1,  2));	  	compilable	  [FE]  MissingArgumentException  	30	4	add
11	[BUG]  [BUGGY]  else  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  [CE]  'else'  without  'if'  [FE]    MissingArgumentException    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]  else  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	else  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }	          tokens.add(arg.substring(0,    2));    if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    }    	non-compiled	[CE]  'else'  without  'if'	128	None	replace
12	[BUG]  [BUGGY]  if(options.hasOption(arg.substring(0,  1)))  {  tokens.add(arg.substring(0,  2));  }  [CE]  'else'  without  'if'  [FE]      MissingArgumentException    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]  if(options.hasOption(arg.substring(0,  1)))  {  tokens.add(arg.substring(0,  2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	if(options.hasOption(arg.substring(0,  1)))  {  tokens.add(arg.substring(0,  2));  }	          tokens.add(arg.substring(0,    2));    if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    }    	non-compiled	[CE]  'else'  without  'if'	128	None	replace
13	[BUG]  [BUGGY]  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  2));  }  [CE]  'else'  without  'if'  [FE]    ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  2));  }	          tokens.add(arg.substring(i    +    2));    if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(i    +    2));    }    else    {    tokens.add(arg.substring(i    +    2));    }    	non-compiled	[CE]  'else'  without  'if'	66	None	replace
14	[BUG]  [BUGGY]  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  1));  }  [CE]  'else'  without  'if'  [FE]        MissingArgumentException      [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  1));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  1));  }	  tokens.add(arg.substring(0,    1));    	non-compiled	[CE]  'else'  without  'if'	67	None	replace
15	[BUG]  [BUGGY]  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  1));  }  else  {  tokens.add(arg.substring(0,  2));  }  [CE]  'else'  without  'if'  [FE]          MissingArgumentException      [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  1));  }  else  {  tokens.add(arg.substring(0,  2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  1));  }  else  {  tokens.add(arg.substring(0,  2));  }	  tokens.add(arg.substring(0,    1));    	non-compiled	[CE]  'else'  without  'if'	67	None	replace
16	[BUG]  [BUGGY]  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  1));  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  'else'  without  'if'  [FE]            MissingArgumentException      [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  1));  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  1));  }  else  {  throw  new  IllegalArgumentException( " ");  }	  tokens.add(arg.substring(0,    1));    	non-compiled	[CE]  'else'  without  'if'	67	None	replace
17	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(i    +    1));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  tokens.add(arg.substring(i  +  1));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	                tokens.add(arg.substring(i        +        1));        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(i    +    1));    }    tokens.add(arg.substring(i  +  1));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }	  	compilable	  [FE]  ComparisonFailure  	91	4	add
18	[BUG]  [BUGGY]          tokens.add(arg.substring(i    +    1));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  tokens.add(arg.substring(i  +  1));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(i    +    1));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  tokens.add(arg.substring(i  +  1));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                tokens.add(arg.substring(i        +        1));        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(i    +    1));    }    tokens.add(arg.substring(i  +  1));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }	  	compilable	  [FE]  ComparisonFailure  	91	4	add
19	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(i    +    1));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  tokens.add(arg.substring(i  +  1));  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	                tokens.add(arg.substring(i        +        1));        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(i    +    1));    }    tokens.add(arg.substring(i  +  1));	  	compilable	  [FE]  ComparisonFailure  	91	4	add
20	[BUG]  [BUGGY]          tokens.add(arg.substring(i    +    1));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  tokens.add(arg.substring(i  +  1));  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(i    +    1));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  tokens.add(arg.substring(i  +  1));  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                tokens.add(arg.substring(i        +        1));        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(i    +    1));    }    tokens.add(arg.substring(i  +  1));	  	compilable	  [FE]  ComparisonFailure  	91	4	add
21	[BUG]  [BUGGY]          tokens.add(arg.substring(i    +    1));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  tokens.add(arg.substring(i  +  1));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  [CE]  'else'  without  'if'  [FE]        ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(i    +    1));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  tokens.add(arg.substring(i  +  1));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                tokens.add(arg.substring(i        +        1));        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(i    +    1));    }    tokens.add(arg.substring(i  +  1));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));	  	non-compiled	[CE]  'else'  without  'if'	91	None	add
22	[BUG]  [BUGGY]          tokens.add(arg.substring(i    +    1));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  [CE]  'else'  without  'if'  [FE]          ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(i    +    1));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                tokens.add(arg.substring(i        +        1));        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(i    +    1));    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }	  	non-compiled	[CE]  'else'  without  'if'	91	None	add
23	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]            ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(i    +    1));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  tokens.add(arg.substring(i  +  1));  if(options.hasOption(arg.substring(i  +  1)))  {  tokens.add(arg.substring(i  +  1));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	                tokens.add(arg.substring(i        +        1));        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(i    +    1));    }    tokens.add(arg.substring(i  +  1));  if(options.hasOption(arg.substring(i  +  1)))  {  tokens.add(arg.substring(i  +  1));  }	  	compilable	  [FE]  ComparisonFailure  	91	4	add
24	[BUG]  [BUGGY]          tokens.add(arg.substring(i    +    1));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  tokens.add(arg.substring(i  +  1));  if(options.hasOption(arg.substring(i  +  1)))  {  tokens.add(arg.substring(i  +  1));  }  [FE]  ComparisonFailure  [FE]            ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(i    +    1));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  tokens.add(arg.substring(i  +  1));  if(options.hasOption(arg.substring(i  +  1)))  {  tokens.add(arg.substring(i  +  1));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                tokens.add(arg.substring(i        +        1));        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(i    +    1));    }    tokens.add(arg.substring(i  +  1));  if(options.hasOption(arg.substring(i  +  1)))  {  tokens.add(arg.substring(i  +  1));  }	  	compilable	  [FE]  ComparisonFailure  	91	4	add
25	[BUG]  [BUGGY]  parent.addArg(arg.substring(0,  2));  [CE]  'else'  without  'if'  [FE]    MissingArgumentException    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]  parent.addArg(arg.substring(0,  2));  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	parent.addArg(arg.substring(0,  2));	          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    }    if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    }    	non-compiled	[CE]  'else'  without  'if'	70	None	replace
26	[BUG]  [BUGGY]  else  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(0,  3));  }  [CE]  'else'  without  'if'  [FE]    MissingArgumentException    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]  else  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(0,  3));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	else  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(0,  3));  }	          tokens.add(arg.substring(0,    2));    tokens.add(arg.substring(0,    3));    	non-compiled	[CE]  'else'  without  'if'	39	None	replace
27	[BUG]  [BUGGY]  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(arg.substring(0,  3));  }  [CE]  'else'  without  'if'  [FE]      MissingArgumentException    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(arg.substring(0,  3));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(arg.substring(0,  3));  }	          tokens.add(arg.substring(0,    2));    tokens.add(arg.substring(0,    3));    	non-compiled	[CE]  'else'  without  'if'	39	None	replace
28	[BUG]  [BUGGY]  [FE]  MissingArgumentException  [FE]    MissingArgumentException    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(0,    2));    tokens.add(arg.substring(2,  2));  tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(2,  2));  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	                tokens.add(arg.substring(0,        2));        tokens.add(arg.substring(2,    2));    tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(2,  2));	  	compilable	  [FE]  MissingArgumentException  	36	4	add
29	[BUG]  [BUGGY]          tokens.add(arg.substring(0,    2));    tokens.add(arg.substring(2,  2));  tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(2,  2));  [FE]  MissingArgumentException  [FE]    MissingArgumentException    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(0,    2));    tokens.add(arg.substring(2,  2));  tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(2,  2));  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                tokens.add(arg.substring(0,        2));        tokens.add(arg.substring(2,    2));    tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(2,  2));	  	compilable	  [FE]  MissingArgumentException  	36	4	add
30	[BUG]  [BUGGY]  [FE]  MissingArgumentException  [FE]      MissingArgumentException    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(0,    2));    tokens.add(arg.substring(2,  2));  tokens.add(arg.substring(2,  2));  tokens.add(arg.substring(2,  2));  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	                tokens.add(arg.substring(0,        2));        tokens.add(arg.substring(2,    2));    tokens.add(arg.substring(2,  2));  tokens.add(arg.substring(2,  2));	  	compilable	  [FE]  MissingArgumentException  	36	4	add
31	[BUG]  [BUGGY]          tokens.add(arg.substring(0,    2));    tokens.add(arg.substring(2,  2));  tokens.add(arg.substring(2,  2));  tokens.add(arg.substring(2,  2));  [FE]  MissingArgumentException  [FE]      MissingArgumentException    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(0,    2));    tokens.add(arg.substring(2,  2));  tokens.add(arg.substring(2,  2));  tokens.add(arg.substring(2,  2));  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                tokens.add(arg.substring(0,        2));        tokens.add(arg.substring(2,    2));    tokens.add(arg.substring(2,  2));  tokens.add(arg.substring(2,  2));	  	compilable	  [FE]  MissingArgumentException  	36	4	add
32	[BUG]  [BUGGY]  [FE]  MissingArgumentException  [FE]        MissingArgumentException    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(0,    2));    tokens.add(arg.substring(2,  2));  tokens.add(arg.substring(1,  2));  tokens.add(arg.substring(2,  2));  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	                tokens.add(arg.substring(0,        2));        tokens.add(arg.substring(2,    2));    tokens.add(arg.substring(1,  2));  tokens.add(arg.substring(2,  2));	  	compilable	  [FE]  MissingArgumentException  	36	4	add
33	[BUG]  [BUGGY]          tokens.add(arg.substring(0,    2));    tokens.add(arg.substring(2,  2));  tokens.add(arg.substring(1,  2));  tokens.add(arg.substring(2,  2));  [FE]  MissingArgumentException  [FE]        MissingArgumentException    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(0,    2));    tokens.add(arg.substring(2,  2));  tokens.add(arg.substring(1,  2));  tokens.add(arg.substring(2,  2));  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                tokens.add(arg.substring(0,        2));        tokens.add(arg.substring(2,    2));    tokens.add(arg.substring(1,  2));  tokens.add(arg.substring(2,  2));	  	compilable	  [FE]  MissingArgumentException  	36	4	add
34	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]          MissingArgumentException    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(0,    2));    tokens.add(arg.substring(2,  2));  tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(3,  2));  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	                tokens.add(arg.substring(0,        2));        tokens.add(arg.substring(2,    2));    tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(3,  2));	  	compilable	  [FE]  StringIndexOutOfBoundsException  	36	4	add
35	[BUG]  [BUGGY]          tokens.add(arg.substring(0,    2));    tokens.add(arg.substring(2,  2));  tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(3,  2));  [FE]  StringIndexOutOfBoundsException  [FE]          MissingArgumentException    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(0,    2));    tokens.add(arg.substring(2,  2));  tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(3,  2));  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                tokens.add(arg.substring(0,        2));        tokens.add(arg.substring(2,    2));    tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(3,  2));	  	compilable	  [FE]  StringIndexOutOfBoundsException  	36	4	add
36	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]            MissingArgumentException    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(0,    2));    tokens.add(arg.substring(2,  2));  tokens.add(arg.substring(3,  2));  tokens.add(arg.substring(2,  2));  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	                tokens.add(arg.substring(0,        2));        tokens.add(arg.substring(2,    2));    tokens.add(arg.substring(3,  2));  tokens.add(arg.substring(2,  2));	  	compilable	  [FE]  StringIndexOutOfBoundsException  	36	4	add
37	[BUG]  [BUGGY]          tokens.add(arg.substring(0,    2));    tokens.add(arg.substring(2,  2));  tokens.add(arg.substring(3,  2));  tokens.add(arg.substring(2,  2));  [FE]  StringIndexOutOfBoundsException  [FE]            MissingArgumentException    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(0,    2));    tokens.add(arg.substring(2,  2));  tokens.add(arg.substring(3,  2));  tokens.add(arg.substring(2,  2));  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                tokens.add(arg.substring(0,        2));        tokens.add(arg.substring(2,    2));    tokens.add(arg.substring(3,  2));  tokens.add(arg.substring(2,  2));	  	compilable	  [FE]  StringIndexOutOfBoundsException  	36	4	add
38	[BUG]  [BUGGY]  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  2));  }  else  {  options.put(arg.substring(i  +  1));  }  [CE]  'else'  without  'if'  [FE]            ComparisonFailure      [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  2));  }  else  {  options.put(arg.substring(i  +  1));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  2));  }  else  {  options.put(arg.substring(i  +  1));  }	          tokens.add(arg.substring(i    +    2));    if(options.hasOption(arg.substring(i    +    2)))    {    tokens.add(arg.substring(i    +    2));    }    else    {    options.put(arg.substring(i    +    1));    }    	non-compiled	[CE]  'else'  without  'if'	62	None	replace
39	[BUG]  [BUGGY]  if(options.hasOption(arg.substring(i  +  2)))  {  tokens.add(arg.substring(i  +  2));  }  else  {  options.put(arg.substring(i  +  1));  }  [CE]  'else'  without  'if'  [FE]              ComparisonFailure      [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]  if(options.hasOption(arg.substring(i  +  2)))  {  tokens.add(arg.substring(i  +  2));  }  else  {  options.put(arg.substring(i  +  1));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	if(options.hasOption(arg.substring(i  +  2)))  {  tokens.add(arg.substring(i  +  2));  }  else  {  options.put(arg.substring(i  +  1));  }	          tokens.add(arg.substring(i    +    2));    if(options.hasOption(arg.substring(i    +    2)))    {    tokens.add(arg.substring(i    +    2));    }    else    {    options.put(arg.substring(i    +    1));    }    	non-compiled	[CE]  'else'  without  'if'	62	None	replace
40	[BUG]  [BUGGY]  tokens.add(arg.substring(i  +  2));  if(options.hasOption(arg.substring(i  +  2)))  {  tokens.add(arg.substring(i  +  2));  }  else  {  options.put(arg.substring  [CE]  ')'  expected  [FE]                ComparisonFailure      [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]  tokens.add(arg.substring(i  +  2));  if(options.hasOption(arg.substring(i  +  2)))  {  tokens.add(arg.substring(i  +  2));  }  else  {  options.put(arg.substring  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	tokens.add(arg.substring(i  +  2));  if(options.hasOption(arg.substring(i  +  2)))  {  tokens.add(arg.substring(i  +  2));  }  else  {  options.put(arg.substring	          tokens.add(arg.substring(i    +    2));    if(options.hasOption(arg.substring(i    +    2)))    {    tokens.add(arg.substring(i    +    2));    }    else    {    options.put(arg.substring(i    +    1));    }    	non-compiled	[CE]  ')'  expected	62	None	replace
41	[BUG]  [BUGGY]  Option  option  =  options.getOption(arg.substring(0,  1));  [CE]  'else'  without  'if'  [FE]        ComparisonFailure      [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]  Option  option  =  options.getOption(arg.substring(0,  1));  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	Option  option  =  options.getOption(arg.substring(0,  1));	  Option    option    =    options.getOption(arg.substring(0,    2));    	non-compiled	[CE]  'else'  without  'if'	28	None	replace
42	[BUG]  [BUGGY]  Option  option  =  options.getOption(arg.substring(0,  2)+  1);  [CE]  'else'  without  'if'  [FE]          ComparisonFailure      [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]  Option  option  =  options.getOption(arg.substring(0,  2)+  1);  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	Option  option  =  options.getOption(arg.substring(0,  2)+  1);	  Option    option    =    options.getOption(arg.substring(0,    2));    	non-compiled	[CE]  'else'  without  'if'	28	None	replace
43	[BUG]  [BUGGY]  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(opt);  }  [CE]  'else'  without  'if'  [FE]    UnrecognizedOptionException    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(opt);  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(opt);  }	          tokens.add(arg.substring(i));    if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(i));    }    else    {    tokens.add(opt);    }    	non-compiled	[CE]  'else'  without  'if'	119	None	replace
44	[BUG]  [BUGGY]  else  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(opt);  }  [CE]  'else'  without  'if'  [FE]      UnrecognizedOptionException    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]  else  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(opt);  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	else  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(opt);  }	          tokens.add(arg.substring(i));    if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(i));    }    else    {    tokens.add(opt);    }    	non-compiled	[CE]  'else'  without  'if'	119	None	replace
45	[BUG]  [BUGGY]  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  i));  }  [CE]  'else'  without  'if'  [FE]            ComparisonFailure      [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  i));  }  [BUGGY]      }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  i));  }	  tokens.add(arg.substring(0,    i));    	non-compiled	[CE]  'else'  without  'if'	140	None	replace
46	[BUG]  [BUGGY]  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  i));  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  'else'  without  'if'  [FE]              ComparisonFailure      [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  i));  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  i));  }  else  {  throw  new  IllegalArgumentException( " ");  }	  tokens.add(arg.substring(0,    i));    	non-compiled	[CE]  'else'  without  'if'	140	None	replace
47	[BUG]  [BUGGY]  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  i));  }  else  {  options.addOption(arg.substring(0,  2));  }  [CE]  'else'  without  'if'  [FE]                ComparisonFailure      [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  i));  }  else  {  options.addOption(arg.substring(0,  2));  }  [BUGGY]      }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  i));  }  else  {  options.addOption(arg.substring(0,  2));  }	  tokens.add(arg.substring(0,    i));    	non-compiled	[CE]  'else'  without  'if'	140	None	replace
48	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(i    +    1));    tokens.add(arg.substring(i  +  1));  if(options.hasOption(arg))  {  tokens.add(arg.substring(i  +  1));  }  tokens.add(arg.substring(i  +  1));  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	                tokens.add(arg.substring(i        +        1));        tokens.add(arg.substring(i    +    1));    if(options.hasOption(arg))    {    tokens.add(arg.substring(i    +    1));    }    tokens.add(arg.substring(i  +  1));	  	compilable	  [FE]  ComparisonFailure  	130	4	add
49	[BUG]  [BUGGY]          tokens.add(arg.substring(i    +    1));    tokens.add(arg.substring(i  +  1));  if(options.hasOption(arg))  {  tokens.add(arg.substring(i  +  1));  }  tokens.add(arg.substring(i  +  1));  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(i    +    1));    tokens.add(arg.substring(i  +  1));  if(options.hasOption(arg))  {  tokens.add(arg.substring(i  +  1));  }  tokens.add(arg.substring(i  +  1));  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                tokens.add(arg.substring(i        +        1));        tokens.add(arg.substring(i    +    1));    if(options.hasOption(arg))    {    tokens.add(arg.substring(i    +    1));    }    tokens.add(arg.substring(i  +  1));	  	compilable	  [FE]  ComparisonFailure  	130	4	add
50	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(i    +    1));    tokens.add(arg.substring(i  +  1));  if(options.hasOption(arg))  {  tokens.add(arg.substring(i  +  1));  }  tokens.add(arg.substring(i  +  1));  tokens.add(arg.substring(i  +  1));  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	                tokens.add(arg.substring(i        +        1));        tokens.add(arg.substring(i    +    1));    if(options.hasOption(arg))    {    tokens.add(arg.substring(i    +    1));    }    tokens.add(arg.substring(i  +  1));  tokens.add(arg.substring(i  +  1));	  	compilable	  [FE]  ComparisonFailure  	130	4	add
51	[BUG]  [BUGGY]          tokens.add(arg.substring(i    +    1));    tokens.add(arg.substring(i  +  1));  if(options.hasOption(arg))  {  tokens.add(arg.substring(i  +  1));  }  tokens.add(arg.substring(i  +  1));  tokens.add(arg.substring(i  +  1));  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(i    +    1));    tokens.add(arg.substring(i  +  1));  if(options.hasOption(arg))  {  tokens.add(arg.substring(i  +  1));  }  tokens.add(arg.substring(i  +  1));  tokens.add(arg.substring(i  +  1));  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                tokens.add(arg.substring(i        +        1));        tokens.add(arg.substring(i    +    1));    if(options.hasOption(arg))    {    tokens.add(arg.substring(i    +    1));    }    tokens.add(arg.substring(i  +  1));  tokens.add(arg.substring(i  +  1));	  	compilable	  [FE]  ComparisonFailure  	130	4	add
52	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(i    +    1));    tokens.add(arg.substring(i  +  1));  if(options.hasOption(arg))  {  tokens.add(arg.substring(i  +  1));  }  tokens.add(arg.substring(i  +  1));  if(options.hasOption(arg))  {  tokens.add(arg.substring(i  +  1));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	                tokens.add(arg.substring(i        +        1));        tokens.add(arg.substring(i    +    1));    if(options.hasOption(arg))    {    tokens.add(arg.substring(i    +    1));    }    tokens.add(arg.substring(i  +  1));  if(options.hasOption(arg))  {  tokens.add(arg.substring(i  +  1));  }	  	compilable	  [FE]  ComparisonFailure  	130	4	add
53	[BUG]  [BUGGY]          tokens.add(arg.substring(i    +    1));    tokens.add(arg.substring(i  +  1));  if(options.hasOption(arg))  {  tokens.add(arg.substring(i  +  1));  }  tokens.add(arg.substring(i  +  1));  if(options.hasOption(arg))  {  tokens.add(arg.substring(i  +  1));  }  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(i    +    1));    tokens.add(arg.substring(i  +  1));  if(options.hasOption(arg))  {  tokens.add(arg.substring(i  +  1));  }  tokens.add(arg.substring(i  +  1));  if(options.hasOption(arg))  {  tokens.add(arg.substring(i  +  1));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                tokens.add(arg.substring(i        +        1));        tokens.add(arg.substring(i    +    1));    if(options.hasOption(arg))    {    tokens.add(arg.substring(i    +    1));    }    tokens.add(arg.substring(i  +  1));  if(options.hasOption(arg))  {  tokens.add(arg.substring(i  +  1));  }	  	compilable	  [FE]  ComparisonFailure  	130	4	add
54	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(i    +    1));    tokens.add(arg.substring(i  +  1));  if(options.hasOption(arg))  {  tokens.add(arg.substring(i  +  1));  }  if(options.hasOption(arg))  {  tokens.add(arg.substring(i  +  1));  tokens.add(arg.substring(i  +  1));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	                tokens.add(arg.substring(i        +        1));        tokens.add(arg.substring(i    +    1));    if(options.hasOption(arg))    {    tokens.add(arg.substring(i    +    1));    }    if(options.hasOption(arg))  {  tokens.add(arg.substring(i  +  1));  tokens.add(arg.substring(i  +  1));  }	  	compilable	  [FE]  ComparisonFailure  	130	4	add
55	[BUG]  [BUGGY]          tokens.add(arg.substring(i    +    1));    tokens.add(arg.substring(i  +  1));  if(options.hasOption(arg))  {  tokens.add(arg.substring(i  +  1));  }  if(options.hasOption(arg))  {  tokens.add(arg.substring(i  +  1));  tokens.add(arg.substring(i  +  1));  }  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(i    +    1));    tokens.add(arg.substring(i  +  1));  if(options.hasOption(arg))  {  tokens.add(arg.substring(i  +  1));  }  if(options.hasOption(arg))  {  tokens.add(arg.substring(i  +  1));  tokens.add(arg.substring(i  +  1));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                tokens.add(arg.substring(i        +        1));        tokens.add(arg.substring(i    +    1));    if(options.hasOption(arg))    {    tokens.add(arg.substring(i    +    1));    }    if(options.hasOption(arg))  {  tokens.add(arg.substring(i  +  1));  tokens.add(arg.substring(i  +  1));  }	  	compilable	  [FE]  ComparisonFailure  	130	4	add
56	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]            ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(i    +    1));    tokens.add(arg.substring(i  +  1));  if(options.hasOption(arg))  {  tokens.add(arg.substring(i  +  1));  }  tokens.add(arg.substring(i  +  1));  tokens.add(arg.substring(i  +  1));  if(options.hasOption(arg))  {  tokens.add(arg.substring(i  +  1));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	                tokens.add(arg.substring(i        +        1));        tokens.add(arg.substring(i    +    1));    if(options.hasOption(arg))    {    tokens.add(arg.substring(i    +    1));    }    tokens.add(arg.substring(i  +  1));  tokens.add(arg.substring(i  +  1));  if(options.hasOption(arg))  {  tokens.add(arg.substring(i  +  1));  }	  	compilable	  [FE]  ComparisonFailure  	130	4	add
57	[BUG]  [BUGGY]          tokens.add(arg.substring(i    +    1));    tokens.add(arg.substring(i  +  1));  if(options.hasOption(arg))  {  tokens.add(arg.substring(i  +  1));  }  tokens.add(arg.substring(i  +  1));  tokens.add(arg.substring(i  +  1));  if(options.hasOption(arg))  {  tokens.add(arg.substring(i  +  1));  }  [FE]  ComparisonFailure  [FE]            ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(i    +    1));    tokens.add(arg.substring(i  +  1));  if(options.hasOption(arg))  {  tokens.add(arg.substring(i  +  1));  }  tokens.add(arg.substring(i  +  1));  tokens.add(arg.substring(i  +  1));  if(options.hasOption(arg))  {  tokens.add(arg.substring(i  +  1));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                tokens.add(arg.substring(i        +        1));        tokens.add(arg.substring(i    +    1));    if(options.hasOption(arg))    {    tokens.add(arg.substring(i    +    1));    }    tokens.add(arg.substring(i  +  1));  tokens.add(arg.substring(i  +  1));  if(options.hasOption(arg))  {  tokens.add(arg.substring(i  +  1));  }	  	compilable	  [FE]  ComparisonFailure  	130	4	add
58	[BUG]  [BUGGY]  while(options.hasOption(arg.substring(0,  2))  ==  0)  {  tokens.add(arg.substring(i  +  1));  [CE]  'else'  without  'if'  [FE]          ComparisonFailure      [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]  while(options.hasOption(arg.substring(0,  2))  ==  0)  {  tokens.add(arg.substring(i  +  1));  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	while(options.hasOption(arg.substring(0,  2))  ==  0)  {  tokens.add(arg.substring(i  +  1));	  while(options.hasOption(arg.substring(0,    2))    <    =    0)    {    tokens.add(arg.substring(i    +    1));    	non-compiled	[CE]  'else'  without  'if'	152	None	replace
59	[BUG]  [BUGGY]  while(options.hasOption(arg.substring(0,  2))!=  0)  {  tokens.add(arg.substring(i  +  1));  [CE]  'else'  without  'if'  [FE]            ComparisonFailure      [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]  while(options.hasOption(arg.substring(0,  2))!=  0)  {  tokens.add(arg.substring(i  +  1));  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	while(options.hasOption(arg.substring(0,  2))!=  0)  {  tokens.add(arg.substring(i  +  1));	  while(options.hasOption(arg.substring(0,    2))    <    =    0)    {    tokens.add(arg.substring(i    +    1));    	non-compiled	[CE]  'else'  without  'if'	152	None	replace
60	[BUG]  [BUGGY]  while(options.hasOption(arg.substring(0,  2))  >=  0)  {  tokens.add(arg.substring(i  +  1));  [CE]  'else'  without  'if'  [FE]              ComparisonFailure      [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]  while(options.hasOption(arg.substring(0,  2))  >=  0)  {  tokens.add(arg.substring(i  +  1));  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	while(options.hasOption(arg.substring(0,  2))  >=  0)  {  tokens.add(arg.substring(i  +  1));	  while(options.hasOption(arg.substring(0,    2))    <    =    0)    {    tokens.add(arg.substring(i    +    1));    	non-compiled	[CE]  'else'  without  'if'	152	None	replace
61	[BUG]  [BUGGY]  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(arg.substring(0,  1));  }  [CE]  'else'  without  'if'  [FE]    MissingArgumentException    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(arg.substring(0,  1));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(arg.substring(0,  1));  }	          tokens.add(arg.substring(0,    2));    tokens.add(arg.substring(0,    1));    	non-compiled	[CE]  'else'  without  'if'	35	None	replace
62	[BUG]  [BUGGY]  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(arg.substring(0,  2));  }  [CE]  'else'  without  'if'  [FE]      MissingArgumentException    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(arg.substring(0,  2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(arg.substring(0,  2));  }	          tokens.add(arg.substring(0,    2));    tokens.add(arg.substring(0,    1));    	non-compiled	[CE]  'else'  without  'if'	35	None	replace
63	[BUG]  [BUGGY]  tokens.add(arg.substring(i,  2));  TokenBuffer  tokens  =  new  TokenBuffer(arg.substring(i).toLowerCase());  [CE]  'else'  without  'if'  [FE]            ComparisonFailure      [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]  tokens.add(arg.substring(i,  2));  TokenBuffer  tokens  =  new  TokenBuffer(arg.substring(i).toLowerCase());  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	tokens.add(arg.substring(i,  2));  TokenBuffer  tokens  =  new  TokenBuffer(arg.substring(i).toLowerCase());	          tokens.add(arg.substring(i));    TokenBuffer    tokens    =    new    TokenBuffer(arg.substring(i).toLowerCase());    	non-compiled	[CE]  'else'  without  'if'	136	None	replace
64	[BUG]  [BUGGY]  tokens.add(arg.substring(i,  2));  TokenBuffer  tokens  =  new  TokenBuffer(arg.substring(i),  arg.toLowerCase());  [CE]  'else'  without  'if'  [FE]              ComparisonFailure      [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]  tokens.add(arg.substring(i,  2));  TokenBuffer  tokens  =  new  TokenBuffer(arg.substring(i),  arg.toLowerCase());  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	tokens.add(arg.substring(i,  2));  TokenBuffer  tokens  =  new  TokenBuffer(arg.substring(i),  arg.toLowerCase());	          tokens.add(arg.substring(i));    TokenBuffer    tokens    =    new    TokenBuffer(arg.substring(i).toLowerCase());    	non-compiled	[CE]  'else'  without  'if'	136	None	replace
65	[BUG]  [BUGGY]  tokens.add(arg.substring(i  +  1));  TokenBuffer  tokens  =  new  TokenBuffer(arg.substring(i  +  2),  toLowerCase());  [CE]  'else'  without  'if'  [FE]                ComparisonFailure      [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]  tokens.add(arg.substring(i  +  1));  TokenBuffer  tokens  =  new  TokenBuffer(arg.substring(i  +  2),  toLowerCase());  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	tokens.add(arg.substring(i  +  1));  TokenBuffer  tokens  =  new  TokenBuffer(arg.substring(i  +  2),  toLowerCase());	          tokens.add(arg.substring(i));    TokenBuffer    tokens    =    new    TokenBuffer(arg.substring(i).toLowerCase());    	non-compiled	[CE]  'else'  without  'if'	136	None	replace
66	[BUG]  [BUGGY]  [FE]  MissingArgumentException  [FE]    MissingArgumentException    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1,  2));  }  if(options.hasOption(arg.substring(1,  2)))  {  tokens.add(arg.substring(1,  2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	                if(options.hasOption(arg.substring(0,        2)))        {        tokens.add(arg.substring(0,        2));        }        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(1,    2));    }    if(options.hasOption(arg.substring(1,  2)))  {  tokens.add(arg.substring(1,  2));  }	  	compilable	  [FE]  MissingArgumentException  	106	4	add
67	[BUG]  [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1,  2));  }  if(options.hasOption(arg.substring(1,  2)))  {  tokens.add(arg.substring(1,  2));  }  [FE]  MissingArgumentException  [FE]    MissingArgumentException    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1,  2));  }  if(options.hasOption(arg.substring(1,  2)))  {  tokens.add(arg.substring(1,  2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                if(options.hasOption(arg.substring(0,        2)))        {        tokens.add(arg.substring(0,        2));        }        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(1,    2));    }    if(options.hasOption(arg.substring(1,  2)))  {  tokens.add(arg.substring(1,  2));  }	  	compilable	  [FE]  MissingArgumentException  	106	4	add
68	[BUG]  [BUGGY]  [FE]  MissingArgumentException  [FE]      MissingArgumentException    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1,  2));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1,  2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	                if(options.hasOption(arg.substring(0,        2)))        {        tokens.add(arg.substring(0,        2));        }        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(1,    2));    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1,  2));  }	  	compilable	  [FE]  MissingArgumentException  	106	4	add
69	[BUG]  [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1,  2));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1,  2));  }  [FE]  MissingArgumentException  [FE]      MissingArgumentException    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1,  2));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1,  2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                if(options.hasOption(arg.substring(0,        2)))        {        tokens.add(arg.substring(0,        2));        }        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(1,    2));    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1,  2));  }	  	compilable	  [FE]  MissingArgumentException  	106	4	add
70	[BUG]  [BUGGY]  [FE]  MissingArgumentException  [FE]        MissingArgumentException    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1,  2));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1,  2));  }  if(options.hasOption(arg.substring(1,  2)))  {  tokens.add(arg.substring(1,  2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	                if(options.hasOption(arg.substring(0,        2)))        {        tokens.add(arg.substring(0,        2));        }        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(1,    2));    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1,  2));  }  if(options.hasOption(arg.substring(1,  2)))  {  tokens.add(arg.substring(1,  2));  }	  	compilable	  [FE]  MissingArgumentException  	106	4	add
71	[BUG]  [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1,  2));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1,  2));  }  if(options.hasOption(arg.substring(1,  2)))  {  tokens.add(arg.substring(1,  2));  }  [FE]  MissingArgumentException  [FE]        MissingArgumentException    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1,  2));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1,  2));  }  if(options.hasOption(arg.substring(1,  2)))  {  tokens.add(arg.substring(1,  2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                if(options.hasOption(arg.substring(0,        2)))        {        tokens.add(arg.substring(0,        2));        }        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(1,    2));    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1,  2));  }  if(options.hasOption(arg.substring(1,  2)))  {  tokens.add(arg.substring(1,  2));  }	  	compilable	  [FE]  MissingArgumentException  	106	4	add
72	[BUG]  [BUGGY]  [FE]  MissingArgumentException  [FE]          MissingArgumentException    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1,  2));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1,  2));  }  else  if(options.hasOption(arg.substring(1,  2)))  {  tokens.add(arg.substring(1,  2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	                if(options.hasOption(arg.substring(0,        2)))        {        tokens.add(arg.substring(0,        2));        }        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(1,    2));    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1,  2));  }  else  if(options.hasOption(arg.substring(1,  2)))  {  tokens.add(arg.substring(1,  2));  }	  	compilable	  [FE]  MissingArgumentException  	106	4	add
73	[BUG]  [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1,  2));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1,  2));  }  else  if(options.hasOption(arg.substring(1,  2)))  {  tokens.add(arg.substring(1,  2));  }  [FE]  MissingArgumentException  [FE]          MissingArgumentException    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1,  2));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1,  2));  }  else  if(options.hasOption(arg.substring(1,  2)))  {  tokens.add(arg.substring(1,  2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                if(options.hasOption(arg.substring(0,        2)))        {        tokens.add(arg.substring(0,        2));        }        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(1,    2));    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1,  2));  }  else  if(options.hasOption(arg.substring(1,  2)))  {  tokens.add(arg.substring(1,  2));  }	  	compilable	  [FE]  MissingArgumentException  	106	4	add
74	[BUG]  [BUGGY]  [FE]  MissingArgumentException  [FE]            MissingArgumentException    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1,  2));  }  if(options.hasOption(arg.substring(2,  2)))  {  tokens.add(arg.substring(1,  2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	                if(options.hasOption(arg.substring(0,        2)))        {        tokens.add(arg.substring(0,        2));        }        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(1,    2));    }    if(options.hasOption(arg.substring(2,  2)))  {  tokens.add(arg.substring(1,  2));  }	  	compilable	  [FE]  MissingArgumentException  	106	4	add
75	[BUG]  [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1,  2));  }  if(options.hasOption(arg.substring(2,  2)))  {  tokens.add(arg.substring(1,  2));  }  [FE]  MissingArgumentException  [FE]            MissingArgumentException    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1,  2));  }  if(options.hasOption(arg.substring(2,  2)))  {  tokens.add(arg.substring(1,  2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                if(options.hasOption(arg.substring(0,        2)))        {        tokens.add(arg.substring(0,        2));        }        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(1,    2));    }    if(options.hasOption(arg.substring(2,  2)))  {  tokens.add(arg.substring(1,  2));  }	  	compilable	  [FE]  MissingArgumentException  	106	4	add
76	[BUG]  [BUGGY]  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(2));  }  [CE]  'else'  without  'if'  [FE]    ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(2));  }	          tokens.add(arg.substring(2));    if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(2));    }    	non-compiled	[CE]  'else'  without  'if'	51	None	replace
77	[BUG]  [BUGGY]  else  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(2));  }  [CE]  'else'  without  'if'  [FE]      ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]  else  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	else  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(2));  }	          tokens.add(arg.substring(2));    if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(2));    }    	non-compiled	[CE]  'else'  without  'if'	51	None	replace
78	[BUG]  [BUGGY]  [FE]  UnrecognizedOptionException  [FE]    UnrecognizedOptionException    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(i));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i));  }  tokens.add(arg.substring(i));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	                tokens.add(arg.substring(i));        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(i));    }    tokens.add(arg.substring(i));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i));  }	  	compilable	  [FE]  UnrecognizedOptionException  	22	4	add
79	[BUG]  [BUGGY]          tokens.add(arg.substring(i));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i));  }  tokens.add(arg.substring(i));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i));  }  [FE]  UnrecognizedOptionException  [FE]    UnrecognizedOptionException    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(i));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i));  }  tokens.add(arg.substring(i));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                tokens.add(arg.substring(i));        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(i));    }    tokens.add(arg.substring(i));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i));  }	  	compilable	  [FE]  UnrecognizedOptionException  	22	4	add
80	[BUG]  [BUGGY]  [FE]  UnrecognizedOptionException  [FE]      UnrecognizedOptionException    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(i));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i));  }  tokens.add(arg.substring(2));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	                tokens.add(arg.substring(i));        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(i));    }    tokens.add(arg.substring(2));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i));  }	  	compilable	  [FE]  UnrecognizedOptionException  	22	4	add
81	[BUG]  [BUGGY]          tokens.add(arg.substring(i));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i));  }  tokens.add(arg.substring(2));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i));  }  [FE]  UnrecognizedOptionException  [FE]      UnrecognizedOptionException    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(i));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i));  }  tokens.add(arg.substring(2));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                tokens.add(arg.substring(i));        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(i));    }    tokens.add(arg.substring(2));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i));  }	  	compilable	  [FE]  UnrecognizedOptionException  	22	4	add
82	[BUG]  [BUGGY]  [FE]  UnrecognizedOptionException  [FE]        UnrecognizedOptionException    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(i));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i));  }  tokens.add(arg.substring(0,  2));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	                tokens.add(arg.substring(i));        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(i));    }    tokens.add(arg.substring(0,  2));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i));  }	  	compilable	  [FE]  UnrecognizedOptionException  	22	4	add
83	[BUG]  [BUGGY]          tokens.add(arg.substring(i));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i));  }  tokens.add(arg.substring(0,  2));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i));  }  [FE]  UnrecognizedOptionException  [FE]        UnrecognizedOptionException    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(i));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i));  }  tokens.add(arg.substring(0,  2));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                tokens.add(arg.substring(i));        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(i));    }    tokens.add(arg.substring(0,  2));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i));  }	  	compilable	  [FE]  UnrecognizedOptionException  	22	4	add
84	[BUG]  [BUGGY]  [FE]  UnrecognizedOptionException  [FE]          UnrecognizedOptionException    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(i));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i));  }  tokens.add(arg.substring(2));  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	                tokens.add(arg.substring(i));        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(i));    }    tokens.add(arg.substring(2));	  	compilable	  [FE]  UnrecognizedOptionException  	22	4	add
85	[BUG]  [BUGGY]          tokens.add(arg.substring(i));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i));  }  tokens.add(arg.substring(2));  [FE]  UnrecognizedOptionException  [FE]          UnrecognizedOptionException    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(i));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i));  }  tokens.add(arg.substring(2));  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                tokens.add(arg.substring(i));        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(i));    }    tokens.add(arg.substring(2));	  	compilable	  [FE]  UnrecognizedOptionException  	22	4	add
86	[BUG]  [BUGGY]  [FE]  UnrecognizedOptionException  [FE]            UnrecognizedOptionException    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(i));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	                tokens.add(arg.substring(i));        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(i));    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i));  }	  	compilable	  [FE]  UnrecognizedOptionException  	22	4	add
87	[BUG]  [BUGGY]          tokens.add(arg.substring(i));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i));  }  [FE]  UnrecognizedOptionException  [FE]            UnrecognizedOptionException    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(i));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                tokens.add(arg.substring(i));        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(i));    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i));  }	  	compilable	  [FE]  UnrecognizedOptionException  	22	4	add
88	[BUG]  [BUGGY]  tokens.add(arg.substring(0,  2)+  2);  [CE]  'else'  without  'if'  [FE]        MissingArgumentException      [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]  tokens.add(arg.substring(0,  2)+  2);  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	tokens.add(arg.substring(0,  2)+  2);	  tokens.add(arg.substring(0,    2)+    1);    	non-compiled	[CE]  'else'  without  'if'	121	None	replace
89	[BUG]  [BUGGY]  tokens.add(arg.substring(0,  2)+  3);  [CE]  'else'  without  'if'  [FE]          MissingArgumentException      [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]  tokens.add(arg.substring(0,  2)+  3);  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	tokens.add(arg.substring(0,  2)+  3);	  tokens.add(arg.substring(0,    2)+    1);    	non-compiled	[CE]  'else'  without  'if'	121	None	replace
90	[BUG]  [BUGGY]  [FE]  UnrecognizedOptionException  [FE]    UnrecognizedOptionException    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(i));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i));  }  else  {  tokens.add(arg.substring(i));  }  tokens.add(arg.substring(2));  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	                tokens.add(arg.substring(i));        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(i));    }    else    {    tokens.add(arg.substring(i));    }    tokens.add(arg.substring(2));	  	compilable	  [FE]  UnrecognizedOptionException  	20	4	add
91	[BUG]  [BUGGY]          tokens.add(arg.substring(i));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i));  }  else  {  tokens.add(arg.substring(i));  }  tokens.add(arg.substring(2));  [FE]  UnrecognizedOptionException  [FE]    UnrecognizedOptionException    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(i));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i));  }  else  {  tokens.add(arg.substring(i));  }  tokens.add(arg.substring(2));  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                tokens.add(arg.substring(i));        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(i));    }    else    {    tokens.add(arg.substring(i));    }    tokens.add(arg.substring(2));	  	compilable	  [FE]  UnrecognizedOptionException  	20	4	add
92	[BUG]  [BUGGY]  [FE]  UnrecognizedOptionException  [FE]      UnrecognizedOptionException    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(i));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i));  }  else  {  tokens.add(arg.substring(i));  }  tokens.add(arg.substring(2));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	                tokens.add(arg.substring(i));        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(i));    }    else    {    tokens.add(arg.substring(i));    }    tokens.add(arg.substring(2));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }	  	compilable	  [FE]  UnrecognizedOptionException  	20	4	add
93	[BUG]  [BUGGY]          tokens.add(arg.substring(i));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i));  }  else  {  tokens.add(arg.substring(i));  }  tokens.add(arg.substring(2));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  [FE]  UnrecognizedOptionException  [FE]      UnrecognizedOptionException    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(i));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i));  }  else  {  tokens.add(arg.substring(i));  }  tokens.add(arg.substring(2));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                tokens.add(arg.substring(i));        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(i));    }    else    {    tokens.add(arg.substring(i));    }    tokens.add(arg.substring(2));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }	  	compilable	  [FE]  UnrecognizedOptionException  	20	4	add
94	[BUG]  [BUGGY]  [FE]  UnrecognizedOptionException  [FE]        UnrecognizedOptionException    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(i));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i));  }  else  {  tokens.add(arg.substring(i));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	                tokens.add(arg.substring(i));        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(i));    }    else    {    tokens.add(arg.substring(i));    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }	  	compilable	  [FE]  UnrecognizedOptionException  	20	4	add
95	[BUG]  [BUGGY]          tokens.add(arg.substring(i));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i));  }  else  {  tokens.add(arg.substring(i));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  [FE]  UnrecognizedOptionException  [FE]        UnrecognizedOptionException    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(i));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i));  }  else  {  tokens.add(arg.substring(i));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                tokens.add(arg.substring(i));        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(i));    }    else    {    tokens.add(arg.substring(i));    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }	  	compilable	  [FE]  UnrecognizedOptionException  	20	4	add
96	[BUG]  [BUGGY]  [FE]  UnrecognizedOptionException  [FE]          UnrecognizedOptionException    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(i));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i));  }  else  {  tokens.add(arg.substring(i));  }  tokens.add(arg.substring(0,  2));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	                tokens.add(arg.substring(i));        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(i));    }    else    {    tokens.add(arg.substring(i));    }    tokens.add(arg.substring(0,  2));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }	  	compilable	  [FE]  UnrecognizedOptionException  	20	4	add
97	[BUG]  [BUGGY]          tokens.add(arg.substring(i));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i));  }  else  {  tokens.add(arg.substring(i));  }  tokens.add(arg.substring(0,  2));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  [FE]  UnrecognizedOptionException  [FE]          UnrecognizedOptionException    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(i));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i));  }  else  {  tokens.add(arg.substring(i));  }  tokens.add(arg.substring(0,  2));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                tokens.add(arg.substring(i));        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(i));    }    else    {    tokens.add(arg.substring(i));    }    tokens.add(arg.substring(0,  2));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }	  	compilable	  [FE]  UnrecognizedOptionException  	20	4	add
98	[BUG]  [BUGGY]  [FE]  UnrecognizedOptionException  [FE]            UnrecognizedOptionException    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(i));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i));  }  else  {  tokens.add(arg.substring(i));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	                tokens.add(arg.substring(i));        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(i));    }    else    {    tokens.add(arg.substring(i));    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i));  }	  	compilable	  [FE]  UnrecognizedOptionException  	20	4	add
99	[BUG]  [BUGGY]          tokens.add(arg.substring(i));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i));  }  else  {  tokens.add(arg.substring(i));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i));  }  [FE]  UnrecognizedOptionException  [FE]            UnrecognizedOptionException    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(i));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i));  }  else  {  tokens.add(arg.substring(i));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                tokens.add(arg.substring(i));        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(i));    }    else    {    tokens.add(arg.substring(i));    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i));  }	  	compilable	  [FE]  UnrecognizedOptionException  	20	4	add
100	[BUG]  [BUGGY]  else  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(1,  2));  }  [CE]  'else'  without  'if'  [FE]    MissingArgumentException    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]  else  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(1,  2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	else  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(1,  2));  }	          tokens.add(arg.substring(0,    2));    tokens.add(arg.substring(1,    2));    	non-compiled	[CE]  'else'  without  'if'	33	None	replace
101	[BUG]  [BUGGY]  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(arg.substring(1,  2));  }  [CE]  'else'  without  'if'  [FE]      MissingArgumentException    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(arg.substring(1,  2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(arg.substring(1,  2));  }	          tokens.add(arg.substring(0,    2));    tokens.add(arg.substring(1,    2));    	non-compiled	[CE]  'else'  without  'if'	33	None	replace
102	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(i    +    2));    tokens.add(arg.substring(i  +  2));  tokens.add(arg.substring(i  +  2));  tokens.add(arg.substring(i  +  2));  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	                tokens.add(arg.substring(i        +        2));        tokens.add(arg.substring(i    +    2));    tokens.add(arg.substring(i  +  2));  tokens.add(arg.substring(i  +  2));	  	compilable	  [FE]  ComparisonFailure  	58	3	add
103	[BUG]  [BUGGY]          tokens.add(arg.substring(i    +    2));    tokens.add(arg.substring(i  +  2));  tokens.add(arg.substring(i  +  2));  tokens.add(arg.substring(i  +  2));  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(i    +    2));    tokens.add(arg.substring(i  +  2));  tokens.add(arg.substring(i  +  2));  tokens.add(arg.substring(i  +  2));  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                tokens.add(arg.substring(i        +        2));        tokens.add(arg.substring(i    +    2));    tokens.add(arg.substring(i  +  2));  tokens.add(arg.substring(i  +  2));	  	compilable	  [FE]  ComparisonFailure  	58	3	add
104	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(i    +    2));    tokens.add(arg.substring(i  +  2));  tokens.add(arg.substring(i  +  1));  tokens.add(arg.substring(i  +  2));  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	                tokens.add(arg.substring(i        +        2));        tokens.add(arg.substring(i    +    2));    tokens.add(arg.substring(i  +  1));  tokens.add(arg.substring(i  +  2));	  	compilable	  [FE]  ComparisonFailure  	58	3	add
105	[BUG]  [BUGGY]          tokens.add(arg.substring(i    +    2));    tokens.add(arg.substring(i  +  2));  tokens.add(arg.substring(i  +  1));  tokens.add(arg.substring(i  +  2));  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(i    +    2));    tokens.add(arg.substring(i  +  2));  tokens.add(arg.substring(i  +  1));  tokens.add(arg.substring(i  +  2));  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                tokens.add(arg.substring(i        +        2));        tokens.add(arg.substring(i    +    2));    tokens.add(arg.substring(i  +  1));  tokens.add(arg.substring(i  +  2));	  	compilable	  [FE]  ComparisonFailure  	58	3	add
106	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(i    +    2));    tokens.add(arg.substring(i  +  2));  tokens.add(arg.substring(i  +  2));  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	                tokens.add(arg.substring(i        +        2));        tokens.add(arg.substring(i    +    2));    tokens.add(arg.substring(i  +  2));	  	compilable	  [FE]  ComparisonFailure  	58	3	add
107	[BUG]  [BUGGY]          tokens.add(arg.substring(i    +    2));    tokens.add(arg.substring(i  +  2));  tokens.add(arg.substring(i  +  2));  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(i    +    2));    tokens.add(arg.substring(i  +  2));  tokens.add(arg.substring(i  +  2));  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                tokens.add(arg.substring(i        +        2));        tokens.add(arg.substring(i    +    2));    tokens.add(arg.substring(i  +  2));	  	compilable	  [FE]  ComparisonFailure  	58	3	add
108	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(i    +    2));    tokens.add(arg.substring(i  +  2));  tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(i  +  2));  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	                tokens.add(arg.substring(i        +        2));        tokens.add(arg.substring(i    +    2));    tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(i  +  2));	  	compilable	  [FE]  ComparisonFailure  	58	3	add
109	[BUG]  [BUGGY]          tokens.add(arg.substring(i    +    2));    tokens.add(arg.substring(i  +  2));  tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(i  +  2));  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(i    +    2));    tokens.add(arg.substring(i  +  2));  tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(i  +  2));  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                tokens.add(arg.substring(i        +        2));        tokens.add(arg.substring(i    +    2));    tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(i  +  2));	  	compilable	  [FE]  ComparisonFailure  	58	3	add
110	[BUG]  [BUGGY]  while(options.hasOption(arg.substring(0,  2))  &&  options.hasOption(arg.substring(i  +  1))  {  tokens.add(arg.substring(i  +  1));  }  [CE]  ')'  expected  [FE]            ComparisonFailure      [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]  while(options.hasOption(arg.substring(0,  2))  &&  options.hasOption(arg.substring(i  +  1))  {  tokens.add(arg.substring(i  +  1));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	while(options.hasOption(arg.substring(0,  2))  &&  options.hasOption(arg.substring(i  +  1))  {  tokens.add(arg.substring(i  +  1));  }	  while(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(i    +    1));    }    	non-compiled	[CE]  ')'  expected	153	None	replace
111	[BUG]  [BUGGY]  while(options.hasOption(arg.substring(0,  2))  &&!options.contains(arg.substring(i  +  1)))  {  tokens.add(arg.substring(i  +  1));  }  [CE]  'else'  without  'if'  [FE]              ComparisonFailure      [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]  while(options.hasOption(arg.substring(0,  2))  &&!options.contains(arg.substring(i  +  1)))  {  tokens.add(arg.substring(i  +  1));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	while(options.hasOption(arg.substring(0,  2))  &&!options.contains(arg.substring(i  +  1)))  {  tokens.add(arg.substring(i  +  1));  }	  while(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(i    +    1));    }    	non-compiled	[CE]  'else'  without  'if'	153	None	replace
112	[BUG]  [BUGGY]  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i));  }  [CE]  'else'  without  'if'  [FE]    UnrecognizedOptionException    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i));  }	          tokens.add(arg.substring(i));    if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(i));    }    	non-compiled	[CE]  'else'  without  'if'	23	None	replace
113	[BUG]  [BUGGY]  else  if(options.hasOption(arg.substring(0,  2))  ||  options.hasOption(arg.substring(0,  2))  {  tokens.add(arg.substring(0,  2));  }  [CE]  'else'  without  'if'  [FE]      UnrecognizedOptionException    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]  else  if(options.hasOption(arg.substring(0,  2))  ||  options.hasOption(arg.substring(0,  2))  {  tokens.add(arg.substring(0,  2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	else  if(options.hasOption(arg.substring(0,  2))  ||  options.hasOption(arg.substring(0,  2))  {  tokens.add(arg.substring(0,  2));  }	          tokens.add(arg.substring(i));    if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(i));    }    	non-compiled	[CE]  'else'  without  'if'	23	None	replace
114	[BUG]  [BUGGY]  else  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  2));  }  [CE]  'else'  without  'if'  [FE]    ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]  else  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	else  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  2));  }	          tokens.add(arg.substring(i    +    2));    tokens.add(arg.substring(i    +    2));    	non-compiled	[CE]  'else'  without  'if'	59	None	replace
115	[BUG]  [BUGGY]  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  2));  }  else  {  tokens.add(arg.substring(i  +  1));  }  [CE]  'else'  without  'if'  [FE]      ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  2));  }  else  {  tokens.add(arg.substring(i  +  1));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  2));  }  else  {  tokens.add(arg.substring(i  +  1));  }	          tokens.add(arg.substring(i    +    2));    tokens.add(arg.substring(i    +    2));    	non-compiled	[CE]  'else'  without  'if'	59	None	replace
116	[BUG]  [BUGGY]  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1));  tokens.add(arg.substring(2));  }  [CE]  'else'  without  'if'  [FE]    ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1));  tokens.add(arg.substring(2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1));  tokens.add(arg.substring(2));  }	          tokens.add(arg.substring(1));    tokens.add(arg.substring(2));    	non-compiled	[CE]  'else'  without  'if'	10	None	replace
117	[BUG]  [BUGGY]  else  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1));  tokens.add(arg.substring(2));  }  [CE]  'else'  without  'if'  [FE]      ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]  else  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1));  tokens.add(arg.substring(2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	else  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1));  tokens.add(arg.substring(2));  }	          tokens.add(arg.substring(1));    tokens.add(arg.substring(2));    	non-compiled	[CE]  'else'  without  'if'	10	None	replace
118	[BUG]  [BUGGY]  [FE]  MissingArgumentException  [FE]    MissingArgumentException    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(0,    2));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  tokens.add(arg.substring(0,  2));  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	                tokens.add(arg.substring(0,        2));        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    }    tokens.add(arg.substring(0,  2));	  	compilable	  [FE]  MissingArgumentException  	127	4	add
119	[BUG]  [BUGGY]          tokens.add(arg.substring(0,    2));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  tokens.add(arg.substring(0,  2));  [FE]  MissingArgumentException  [FE]    MissingArgumentException    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(0,    2));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  tokens.add(arg.substring(0,  2));  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                tokens.add(arg.substring(0,        2));        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    }    tokens.add(arg.substring(0,  2));	  	compilable	  [FE]  MissingArgumentException  	127	4	add
120	[BUG]  [BUGGY]  [FE]  MissingArgumentException  [FE]      MissingArgumentException    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(0,    2));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  tokens.add(arg.substring(0,  2));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	                tokens.add(arg.substring(0,        2));        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    }    tokens.add(arg.substring(0,  2));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }	  	compilable	  [FE]  MissingArgumentException  	127	4	add
121	[BUG]  [BUGGY]          tokens.add(arg.substring(0,    2));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  tokens.add(arg.substring(0,  2));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  [FE]  MissingArgumentException  [FE]      MissingArgumentException    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(0,    2));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  tokens.add(arg.substring(0,  2));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                tokens.add(arg.substring(0,        2));        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    }    tokens.add(arg.substring(0,  2));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }	  	compilable	  [FE]  MissingArgumentException  	127	4	add
122	[BUG]  [BUGGY]          tokens.add(arg.substring(0,    2));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  tokens.add(arg.substring(0,  2));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  [CE]  'else'  without  'if'  [FE]        MissingArgumentException    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(0,    2));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  tokens.add(arg.substring(0,  2));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                tokens.add(arg.substring(0,        2));        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    }    tokens.add(arg.substring(0,  2));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));	  	non-compiled	[CE]  'else'  without  'if'	127	None	add
123	[BUG]  [BUGGY]          tokens.add(arg.substring(0,    2));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  [CE]  'else'  without  'if'  [FE]          MissingArgumentException    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(0,    2));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                tokens.add(arg.substring(0,        2));        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }	  	non-compiled	[CE]  'else'  without  'if'	127	None	add
124	[BUG]  [BUGGY]          tokens.add(arg.substring(0,    2));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  tokens.add(arg.substring(0,  2));  if(options.hasOption(arg.substring(0,  2))  {  tokens.add(arg.substring(0,  2));  }  [CE]  ')'  expected  [FE]            MissingArgumentException    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(0,    2));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  tokens.add(arg.substring(0,  2));  if(options.hasOption(arg.substring(0,  2))  {  tokens.add(arg.substring(0,  2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                tokens.add(arg.substring(0,        2));        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    }    tokens.add(arg.substring(0,  2));  if(options.hasOption(arg.substring(0,  2))  {  tokens.add(arg.substring(0,  2));  }	  	non-compiled	[CE]  ')'  expected	127	None	add
125	[BUG]  [BUGGY]  Option  options  =  options.getOption(arg.substring(0,  1));  [CE]  'else'  without  'if'  [FE]        ComparisonFailure      [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]  Option  options  =  options.getOption(arg.substring(0,  1));  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	Option  options  =  options.getOption(arg.substring(0,  1));	  Option    options    =    options.getOption(arg.substring(0,    2));    	non-compiled	[CE]  'else'  without  'if'	95	None	replace
126	[BUG]  [BUGGY]  Options  options  =  options.getOption(arg.substring(0,  2));  [CE]  'else'  without  'if'  [FE]          ComparisonFailure      [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]  Options  options  =  options.getOption(arg.substring(0,  2));  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	Options  options  =  options.getOption(arg.substring(0,  2));	  Option    options    =    options.getOption(arg.substring(0,    2));    	non-compiled	[CE]  'else'  without  'if'	95	None	replace
127	[BUG]  [BUGGY]  Option  options  =  options.getOption(arg.substring(0,  2)+  1);  [CE]  'else'  without  'if'  [FE]            ComparisonFailure      [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]  Option  options  =  options.getOption(arg.substring(0,  2)+  1);  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	Option  options  =  options.getOption(arg.substring(0,  2)+  1);	  Option    options    =    options.getOption(arg.substring(0,    2));    	non-compiled	[CE]  'else'  without  'if'	95	None	replace
128	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(2));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1,  2));  }  tokens.add(arg.substring(1,  2));  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	                tokens.add(arg.substring(2));        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(1,    2));    }    tokens.add(arg.substring(1,  2));	  	compilable	  [FE]  ComparisonFailure  	158	3	add
129	[BUG]  [BUGGY]          tokens.add(arg.substring(2));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1,  2));  }  tokens.add(arg.substring(1,  2));  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(2));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1,  2));  }  tokens.add(arg.substring(1,  2));  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                tokens.add(arg.substring(2));        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(1,    2));    }    tokens.add(arg.substring(1,  2));	  	compilable	  [FE]  ComparisonFailure  	158	3	add
130	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(2));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1,  2));  }  tokens.add(arg.substring(2));  if(options.hasOption(arg.substring(1,  2)))  {  tokens.add(arg.substring(1,  2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	                tokens.add(arg.substring(2));        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(1,    2));    }    tokens.add(arg.substring(2));  if(options.hasOption(arg.substring(1,  2)))  {  tokens.add(arg.substring(1,  2));  }	  	compilable	  [FE]  ComparisonFailure  	158	3	add
131	[BUG]  [BUGGY]          tokens.add(arg.substring(2));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1,  2));  }  tokens.add(arg.substring(2));  if(options.hasOption(arg.substring(1,  2)))  {  tokens.add(arg.substring(1,  2));  }  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(2));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1,  2));  }  tokens.add(arg.substring(2));  if(options.hasOption(arg.substring(1,  2)))  {  tokens.add(arg.substring(1,  2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                tokens.add(arg.substring(2));        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(1,    2));    }    tokens.add(arg.substring(2));  if(options.hasOption(arg.substring(1,  2)))  {  tokens.add(arg.substring(1,  2));  }	  	compilable	  [FE]  ComparisonFailure  	158	3	add
132	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(2));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1,  2));  }  tokens.add(arg.substring(1,  2));  if(options.hasOption(arg.substring(1,  2)))  {  tokens.add(arg.substring(1,  2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	                tokens.add(arg.substring(2));        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(1,    2));    }    tokens.add(arg.substring(1,  2));  if(options.hasOption(arg.substring(1,  2)))  {  tokens.add(arg.substring(1,  2));  }	  	compilable	  [FE]  ComparisonFailure  	158	3	add
133	[BUG]  [BUGGY]          tokens.add(arg.substring(2));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1,  2));  }  tokens.add(arg.substring(1,  2));  if(options.hasOption(arg.substring(1,  2)))  {  tokens.add(arg.substring(1,  2));  }  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(2));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1,  2));  }  tokens.add(arg.substring(1,  2));  if(options.hasOption(arg.substring(1,  2)))  {  tokens.add(arg.substring(1,  2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                tokens.add(arg.substring(2));        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(1,    2));    }    tokens.add(arg.substring(1,  2));  if(options.hasOption(arg.substring(1,  2)))  {  tokens.add(arg.substring(1,  2));  }	  	compilable	  [FE]  ComparisonFailure  	158	3	add
134	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(2));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1,  2));  }  if(options.hasOption(arg.substring(1,  2)))  {  tokens.add(arg.substring(1,  2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	                tokens.add(arg.substring(2));        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(1,    2));    }    if(options.hasOption(arg.substring(1,  2)))  {  tokens.add(arg.substring(1,  2));  }	  	compilable	  [FE]  ComparisonFailure  	158	3	add
135	[BUG]  [BUGGY]          tokens.add(arg.substring(2));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1,  2));  }  if(options.hasOption(arg.substring(1,  2)))  {  tokens.add(arg.substring(1,  2));  }  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(2));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1,  2));  }  if(options.hasOption(arg.substring(1,  2)))  {  tokens.add(arg.substring(1,  2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                tokens.add(arg.substring(2));        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(1,    2));    }    if(options.hasOption(arg.substring(1,  2)))  {  tokens.add(arg.substring(1,  2));  }	  	compilable	  [FE]  ComparisonFailure  	158	3	add
136	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]            ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(2));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1,  2));  }  tokens.add(arg.substring(2,  2));  if(options.hasOption(arg.substring(1,  2)))  {  tokens.add(arg.substring(1,  2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	                tokens.add(arg.substring(2));        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(1,    2));    }    tokens.add(arg.substring(2,  2));  if(options.hasOption(arg.substring(1,  2)))  {  tokens.add(arg.substring(1,  2));  }	  	compilable	  [FE]  ComparisonFailure  	158	3	add
137	[BUG]  [BUGGY]          tokens.add(arg.substring(2));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1,  2));  }  tokens.add(arg.substring(2,  2));  if(options.hasOption(arg.substring(1,  2)))  {  tokens.add(arg.substring(1,  2));  }  [FE]  ComparisonFailure  [FE]            ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(2));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1,  2));  }  tokens.add(arg.substring(2,  2));  if(options.hasOption(arg.substring(1,  2)))  {  tokens.add(arg.substring(1,  2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                tokens.add(arg.substring(2));        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(1,    2));    }    tokens.add(arg.substring(2,  2));  if(options.hasOption(arg.substring(1,  2)))  {  tokens.add(arg.substring(1,  2));  }	  	compilable	  [FE]  ComparisonFailure  	158	3	add
138	[BUG]  [BUGGY]  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1));  tokens.add(arg.substring(3));  }  [CE]  'else'  without  'if'  [FE]    ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1));  tokens.add(arg.substring(3));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1));  tokens.add(arg.substring(3));  }	          tokens.add(arg.substring(1));    tokens.add(arg.substring(3));    	non-compiled	[CE]  'else'  without  'if'	12	None	replace
139	[BUG]  [BUGGY]  else  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1));  tokens.add(arg.substring(3));  }  [CE]  'else'  without  'if'  [FE]      ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]  else  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1));  tokens.add(arg.substring(3));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	else  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1));  tokens.add(arg.substring(3));  }	          tokens.add(arg.substring(1));    tokens.add(arg.substring(3));    	non-compiled	[CE]  'else'  without  'if'	12	None	replace
140	[BUG]  [BUGGY]  if(options.hasOption(arg.substring(1,  2)))  {  tokens.add(arg.substring(1));  tokens.add(arg.substring(3));  }  [CE]  'else'  without  'if'  [FE]        ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]  if(options.hasOption(arg.substring(1,  2)))  {  tokens.add(arg.substring(1));  tokens.add(arg.substring(3));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	if(options.hasOption(arg.substring(1,  2)))  {  tokens.add(arg.substring(1));  tokens.add(arg.substring(3));  }	          tokens.add(arg.substring(1));    tokens.add(arg.substring(3));    	non-compiled	[CE]  'else'  without  'if'	12	None	replace
141	[BUG]  [BUGGY]  tokens.add(arg.substring(i,  2));  TokenBuffer  tokens  =  new  TokenBuffer(arg.substring(i));  [CE]  'else'  without  'if'  [FE]        ComparisonFailure      [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]  tokens.add(arg.substring(i,  2));  TokenBuffer  tokens  =  new  TokenBuffer(arg.substring(i));  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	tokens.add(arg.substring(i,  2));  TokenBuffer  tokens  =  new  TokenBuffer(arg.substring(i));	          tokens.add(arg.substring(i));    TokenBuffer    tokens    =    new    TokenBuffer(arg.substring(i));    	non-compiled	[CE]  'else'  without  'if'	134	None	replace
142	[BUG]  [BUGGY]  tokens.add(arg.substring(0,  2));  TokenBuffer  tokens  =  new  TokenBuffer(arg.substring(i));  [CE]  'else'  without  'if'  [FE]          ComparisonFailure      [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]  tokens.add(arg.substring(0,  2));  TokenBuffer  tokens  =  new  TokenBuffer(arg.substring(i));  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	tokens.add(arg.substring(0,  2));  TokenBuffer  tokens  =  new  TokenBuffer(arg.substring(i));	          tokens.add(arg.substring(i));    TokenBuffer    tokens    =    new    TokenBuffer(arg.substring(i));    	non-compiled	[CE]  'else'  without  'if'	134	None	replace
143	[BUG]  [BUGGY]  tokens.add(arg.substring(i,  2));  TokenBuffer  tokens  =  new  TokenBuffer(arg.substring(i,  2));  [CE]  'else'  without  'if'  [FE]            ComparisonFailure      [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]  tokens.add(arg.substring(i,  2));  TokenBuffer  tokens  =  new  TokenBuffer(arg.substring(i,  2));  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	tokens.add(arg.substring(i,  2));  TokenBuffer  tokens  =  new  TokenBuffer(arg.substring(i,  2));	          tokens.add(arg.substring(i));    TokenBuffer    tokens    =    new    TokenBuffer(arg.substring(i));    	non-compiled	[CE]  'else'  without  'if'	134	None	replace
144	[BUG]  [BUGGY]  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(2));  }  else  {  tokens.add(arg.substring(1));  }  [CE]  'else'  without  'if'  [FE]    ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(2));  }  else  {  tokens.add(arg.substring(1));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(2));  }  else  {  tokens.add(arg.substring(1));  }	          tokens.add(arg.substring(2));    tokens.add(arg.substring(2));    	non-compiled	[CE]  'else'  without  'if'	49	None	replace
145	[BUG]  [BUGGY]  tokens.add(arg.substring(0,  i  +  1));  TokenBuffer  tokens  =  new  TokenBuffer(arg.substring(i  +  1));  [CE]  'else'  without  'if'  [FE]          ComparisonFailure      [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]  tokens.add(arg.substring(0,  i  +  1));  TokenBuffer  tokens  =  new  TokenBuffer(arg.substring(i  +  1));  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	tokens.add(arg.substring(0,  i  +  1));  TokenBuffer  tokens  =  new  TokenBuffer(arg.substring(i  +  1));	          tokens.add(arg.substring(i    +    1));    TokenBuffer    tokens    =    new    TokenBuffer(arg.substring(i    +    1));    	non-compiled	[CE]  'else'  without  'if'	161	None	replace
146	[BUG]  [BUGGY]  if(options.hasOption(arg))  {  tokens.add(arg.substring(0,  2));  }  [CE]  'else'  without  'if'  [FE]    ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]  if(options.hasOption(arg))  {  tokens.add(arg.substring(0,  2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	if(options.hasOption(arg))  {  tokens.add(arg.substring(0,  2));  }	          tokens.add(arg.substring(i    +    2));    tokens.add(arg.substring(i    +    2));    if(options.hasOption(arg))    {    tokens.add(arg.substring(i    +    1));    }    	non-compiled	[CE]  'else'  without  'if'	99	None	replace
147	[BUG]  [BUGGY]  else  if(options.hasOption(arg))  {  tokens.add(arg.substring(0,  2));  }  [CE]  'else'  without  'if'  [FE]      ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]  else  if(options.hasOption(arg))  {  tokens.add(arg.substring(0,  2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	else  if(options.hasOption(arg))  {  tokens.add(arg.substring(0,  2));  }	          tokens.add(arg.substring(i    +    2));    tokens.add(arg.substring(i    +    2));    if(options.hasOption(arg))    {    tokens.add(arg.substring(i    +    1));    }    	non-compiled	[CE]  'else'  without  'if'	99	None	replace
148	[BUG]  [BUGGY]  if(options.hasOption(arg))  {  tokens.add(arg.substring(i  +  2));  }  [CE]  'else'  without  'if'  [FE]        ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]  if(options.hasOption(arg))  {  tokens.add(arg.substring(i  +  2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	if(options.hasOption(arg))  {  tokens.add(arg.substring(i  +  2));  }	          tokens.add(arg.substring(i    +    2));    tokens.add(arg.substring(i    +    2));    if(options.hasOption(arg))    {    tokens.add(arg.substring(i    +    1));    }    	non-compiled	[CE]  'else'  without  'if'	99	None	replace
149	[BUG]  [BUGGY]  [FE]  MissingArgumentException  [FE]    MissingArgumentException    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(0,    2));    tokens.add(arg.substring(0,  3));  tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(0,  3));  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	                tokens.add(arg.substring(0,        2));        tokens.add(arg.substring(0,    3));    tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(0,  3));	  	compilable	  [FE]  MissingArgumentException  	38	4	add
150	[BUG]  [BUGGY]          tokens.add(arg.substring(0,    2));    tokens.add(arg.substring(0,  3));  tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(0,  3));  [FE]  MissingArgumentException  [FE]    MissingArgumentException    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(0,    2));    tokens.add(arg.substring(0,  3));  tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(0,  3));  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                tokens.add(arg.substring(0,        2));        tokens.add(arg.substring(0,    3));    tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(0,  3));	  	compilable	  [FE]  MissingArgumentException  	38	4	add
151	[BUG]  [BUGGY]          tokens.add(arg.substring(0,    2));    tokens.add(arg.substring(0,  3));  tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(0,  3);  [CE]  ')'  expected  [FE]      MissingArgumentException    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(0,    2));    tokens.add(arg.substring(0,  3));  tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(0,  3);  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                tokens.add(arg.substring(0,        2));        tokens.add(arg.substring(0,    3));    tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(0,  3);	  	non-compiled	[CE]  ')'  expected	38	None	add
152	[BUG]  [BUGGY]          tokens.add(arg.substring(0,    2));    tokens.add(arg.substring(0,  3));  tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(0,  3,  3));  [CE]  no  suitable  method  found  for  substring(int,int,int)  [FE]        MissingArgumentException    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(0,    2));    tokens.add(arg.substring(0,  3));  tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(0,  3,  3));  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                tokens.add(arg.substring(0,        2));        tokens.add(arg.substring(0,    3));    tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(0,  3,  3));	  	non-compiled	[CE]  no  suitable  method  found  for  substring(int,int,int)	38	None	add
153	[BUG]  [BUGGY]  ters.add(arg.substring(i  +  1));  [CE]  'else'  without  'if'  [FE]          ComparisonFailure      [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]  ters.add(arg.substring(i  +  1));  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	ters.add(arg.substring(i  +  1));	          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(i    +    1));    }    if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(i    +    1);    }    	non-compiled	[CE]  'else'  without  'if'	94	None	replace
154	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(2));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  tokens.add(arg.substring(2));  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	                tokens.add(arg.substring(2));        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    }    tokens.add(arg.substring(2));	  	compilable	  [FE]  ComparisonFailure  	52	3	add
155	[BUG]  [BUGGY]          tokens.add(arg.substring(2));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  tokens.add(arg.substring(2));  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(2));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  tokens.add(arg.substring(2));  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                tokens.add(arg.substring(2));        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    }    tokens.add(arg.substring(2));	  	compilable	  [FE]  ComparisonFailure  	52	3	add
156	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(2));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  tokens.add(arg.substring(2));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	                tokens.add(arg.substring(2));        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    }    tokens.add(arg.substring(2));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }	  	compilable	  [FE]  ComparisonFailure  	52	3	add
157	[BUG]  [BUGGY]          tokens.add(arg.substring(2));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  tokens.add(arg.substring(2));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(2));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  tokens.add(arg.substring(2));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                tokens.add(arg.substring(2));        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    }    tokens.add(arg.substring(2));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }	  	compilable	  [FE]  ComparisonFailure  	52	3	add
158	[BUG]  [BUGGY]          tokens.add(arg.substring(2));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  tokens.add(arg.substring(2));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  [CE]  'else'  without  'if'  [FE]        ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(2));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  tokens.add(arg.substring(2));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                tokens.add(arg.substring(2));        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    }    tokens.add(arg.substring(2));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));	  	non-compiled	[CE]  'else'  without  'if'	52	None	add
159	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(2));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	                tokens.add(arg.substring(2));        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }	  	compilable	  [FE]  ComparisonFailure  	52	3	add
160	[BUG]  [BUGGY]          tokens.add(arg.substring(2));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(2));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                tokens.add(arg.substring(2));        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }	  	compilable	  [FE]  ComparisonFailure  	52	3	add
161	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]            ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(2));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  tokens.add(arg.substring(2));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(2,  2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	                tokens.add(arg.substring(2));        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    }    tokens.add(arg.substring(2));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(2,  2));  }	  	compilable	  [FE]  ComparisonFailure  	52	3	add
162	[BUG]  [BUGGY]          tokens.add(arg.substring(2));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  tokens.add(arg.substring(2));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(2,  2));  }  [FE]  ComparisonFailure  [FE]            ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(2));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  tokens.add(arg.substring(2));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(2,  2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                tokens.add(arg.substring(2));        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    }    tokens.add(arg.substring(2));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(2,  2));  }	  	compilable	  [FE]  ComparisonFailure  	52	3	add
163	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(2));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(2,  2));  }  tokens.add(arg.substring(2));  if(options.hasOption(arg.substring(2,  2)))  {  tokens.add(arg.substring(2,  2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	                tokens.add(arg.substring(2));        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(2,    2));    }    tokens.add(arg.substring(2));  if(options.hasOption(arg.substring(2,  2)))  {  tokens.add(arg.substring(2,  2));  }	  	compilable	  [FE]  ComparisonFailure  	54	3	add
164	[BUG]  [BUGGY]          tokens.add(arg.substring(2));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(2,  2));  }  tokens.add(arg.substring(2));  if(options.hasOption(arg.substring(2,  2)))  {  tokens.add(arg.substring(2,  2));  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(2));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(2,  2));  }  tokens.add(arg.substring(2));  if(options.hasOption(arg.substring(2,  2)))  {  tokens.add(arg.substring(2,  2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                tokens.add(arg.substring(2));        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(2,    2));    }    tokens.add(arg.substring(2));  if(options.hasOption(arg.substring(2,  2)))  {  tokens.add(arg.substring(2,  2));  }	  	compilable	  [FE]  ComparisonFailure  	54	3	add
165	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(2));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(2,  2));  }  tokens.add(arg.substring(2));  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	                tokens.add(arg.substring(2));        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(2,    2));    }    tokens.add(arg.substring(2));	  	compilable	  [FE]  ComparisonFailure  	54	3	add
166	[BUG]  [BUGGY]          tokens.add(arg.substring(2));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(2,  2));  }  tokens.add(arg.substring(2));  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(2));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(2,  2));  }  tokens.add(arg.substring(2));  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                tokens.add(arg.substring(2));        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(2,    2));    }    tokens.add(arg.substring(2));	  	compilable	  [FE]  ComparisonFailure  	54	3	add
167	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(2));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(2,  2));  }  tokens.add(arg.substring(2));  if(options.hasOption(arg.substring(2,  2)))  {  tokens.add(arg.substring(3,  2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	                tokens.add(arg.substring(2));        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(2,    2));    }    tokens.add(arg.substring(2));  if(options.hasOption(arg.substring(2,  2)))  {  tokens.add(arg.substring(3,  2));  }	  	compilable	  [FE]  ComparisonFailure  	54	3	add
168	[BUG]  [BUGGY]          tokens.add(arg.substring(2));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(2,  2));  }  tokens.add(arg.substring(2));  if(options.hasOption(arg.substring(2,  2)))  {  tokens.add(arg.substring(3,  2));  }  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(2));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(2,  2));  }  tokens.add(arg.substring(2));  if(options.hasOption(arg.substring(2,  2)))  {  tokens.add(arg.substring(3,  2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                tokens.add(arg.substring(2));        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(2,    2));    }    tokens.add(arg.substring(2));  if(options.hasOption(arg.substring(2,  2)))  {  tokens.add(arg.substring(3,  2));  }	  	compilable	  [FE]  ComparisonFailure  	54	3	add
169	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(2));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(2,  2));  }  if(options.hasOption(arg.substring(2,  2)))  {  tokens.add(arg.substring(2,  2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	                tokens.add(arg.substring(2));        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(2,    2));    }    if(options.hasOption(arg.substring(2,  2)))  {  tokens.add(arg.substring(2,  2));  }	  	compilable	  [FE]  ComparisonFailure  	54	3	add
170	[BUG]  [BUGGY]          tokens.add(arg.substring(2));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(2,  2));  }  if(options.hasOption(arg.substring(2,  2)))  {  tokens.add(arg.substring(2,  2));  }  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(2));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(2,  2));  }  if(options.hasOption(arg.substring(2,  2)))  {  tokens.add(arg.substring(2,  2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                tokens.add(arg.substring(2));        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(2,    2));    }    if(options.hasOption(arg.substring(2,  2)))  {  tokens.add(arg.substring(2,  2));  }	  	compilable	  [FE]  ComparisonFailure  	54	3	add
171	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]            ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(2));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(2,  2));  }  tokens.add(arg.substring(2,  2));  if(options.hasOption(arg.substring(2,  2)))  {  tokens.add(arg.substring(2,  2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	                tokens.add(arg.substring(2));        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(2,    2));    }    tokens.add(arg.substring(2,  2));  if(options.hasOption(arg.substring(2,  2)))  {  tokens.add(arg.substring(2,  2));  }	  	compilable	  [FE]  ComparisonFailure  	54	3	add
172	[BUG]  [BUGGY]          tokens.add(arg.substring(2));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(2,  2));  }  tokens.add(arg.substring(2,  2));  if(options.hasOption(arg.substring(2,  2)))  {  tokens.add(arg.substring(2,  2));  }  [FE]  ComparisonFailure  [FE]            ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(2));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(2,  2));  }  tokens.add(arg.substring(2,  2));  if(options.hasOption(arg.substring(2,  2)))  {  tokens.add(arg.substring(2,  2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                tokens.add(arg.substring(2));        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(2,    2));    }    tokens.add(arg.substring(2,  2));  if(options.hasOption(arg.substring(2,  2)))  {  tokens.add(arg.substring(2,  2));  }	  	compilable	  [FE]  ComparisonFailure  	54	3	add
173	[BUG]  [BUGGY]  tokens.add(arg.substring(2,  i));  [CE]  'else'  without  'if'  [FE]            ComparisonFailure      [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]  tokens.add(arg.substring(2,  i));  [BUGGY]      }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	tokens.add(arg.substring(2,  i));	  tokens.add(arg.substring(1,    i));    	non-compiled	[CE]  'else'  without  'if'	138	None	replace
174	[BUG]  [BUGGY]  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(arg.substring(1));  }  [CE]  'else'  without  'if'  [FE]    ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(arg.substring(1));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(arg.substring(1));  }	          tokens.add(arg.substring(2));    if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    }    else    {    tokens.add(arg.substring(1));    }    	non-compiled	[CE]  'else'  without  'if'	116	None	replace
175	[BUG]  [BUGGY]  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(arg.substring(2));  }  [CE]  'else'  without  'if'  [FE]      ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(arg.substring(2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(arg.substring(2));  }	          tokens.add(arg.substring(2));    if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    }    else    {    tokens.add(arg.substring(1));    }    	non-compiled	[CE]  'else'  without  'if'	116	None	replace
176	[BUG]  [BUGGY]  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  'else'  without  'if'  [FE]    MissingArgumentException    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  else  {  throw  new  IllegalArgumentException( " ");  }	          tokens.add(arg.substring(0,    2));    if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  'else'  without  'if'	146	None	replace
177	[BUG]  [BUGGY]  while(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1,  2));  [CE]  'else'  without  'if'  [FE]            ComparisonFailure      [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]  while(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1,  2));  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	while(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1,  2));	          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(1,    2));    }    while(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(1,    2));    }    timeout    	non-compiled	[CE]  'else'  without  'if'	112	None	replace
178	[BUG]  [BUGGY]  while(options.hasOption(arg.substring(0,  1)))  {  tokens.add(arg.substring(1,  2));  [CE]  'else'  without  'if'  [FE]              ComparisonFailure      [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]  while(options.hasOption(arg.substring(0,  1)))  {  tokens.add(arg.substring(1,  2));  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	while(options.hasOption(arg.substring(0,  1)))  {  tokens.add(arg.substring(1,  2));	          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(1,    2));    }    while(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(1,    2));    }    timeout    	non-compiled	[CE]  'else'  without  'if'	112	None	replace
179	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(2));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(2  +  1));  }  tokens.add(arg.substring(2));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(2  +  1));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	                tokens.add(arg.substring(2));        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(2    +    1));    }    tokens.add(arg.substring(2));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(2  +  1));  }	  	compilable	  [FE]  ComparisonFailure  	156	3	add
180	[BUG]  [BUGGY]          tokens.add(arg.substring(2));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(2  +  1));  }  tokens.add(arg.substring(2));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(2  +  1));  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(2));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(2  +  1));  }  tokens.add(arg.substring(2));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(2  +  1));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                tokens.add(arg.substring(2));        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(2    +    1));    }    tokens.add(arg.substring(2));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(2  +  1));  }	  	compilable	  [FE]  ComparisonFailure  	156	3	add
181	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(2));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(2  +  1));  }  tokens.add(arg.substring(2));  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	                tokens.add(arg.substring(2));        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(2    +    1));    }    tokens.add(arg.substring(2));	  	compilable	  [FE]  ComparisonFailure  	156	3	add
182	[BUG]  [BUGGY]          tokens.add(arg.substring(2));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(2  +  1));  }  tokens.add(arg.substring(2));  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(2));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(2  +  1));  }  tokens.add(arg.substring(2));  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                tokens.add(arg.substring(2));        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(2    +    1));    }    tokens.add(arg.substring(2));	  	compilable	  [FE]  ComparisonFailure  	156	3	add
183	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(2));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(2  +  1));  }  tokens.add(arg.substring(2));  if(options.hasOption(arg.substring(2,  2)))  {  tokens.add(arg.substring(2  +  1));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	                tokens.add(arg.substring(2));        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(2    +    1));    }    tokens.add(arg.substring(2));  if(options.hasOption(arg.substring(2,  2)))  {  tokens.add(arg.substring(2  +  1));  }	  	compilable	  [FE]  ComparisonFailure  	156	3	add
184	[BUG]  [BUGGY]          tokens.add(arg.substring(2));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(2  +  1));  }  tokens.add(arg.substring(2));  if(options.hasOption(arg.substring(2,  2)))  {  tokens.add(arg.substring(2  +  1));  }  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(2));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(2  +  1));  }  tokens.add(arg.substring(2));  if(options.hasOption(arg.substring(2,  2)))  {  tokens.add(arg.substring(2  +  1));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                tokens.add(arg.substring(2));        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(2    +    1));    }    tokens.add(arg.substring(2));  if(options.hasOption(arg.substring(2,  2)))  {  tokens.add(arg.substring(2  +  1));  }	  	compilable	  [FE]  ComparisonFailure  	156	3	add
185	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(2));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(2  +  1));  }  tokens.add(arg.substring(2));  if(options.hasOption(arg.substring(2  +  1)))  {  tokens.add(arg.substring(2  +  1));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	                tokens.add(arg.substring(2));        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(2    +    1));    }    tokens.add(arg.substring(2));  if(options.hasOption(arg.substring(2  +  1)))  {  tokens.add(arg.substring(2  +  1));  }	  	compilable	  [FE]  ComparisonFailure  	156	3	add
186	[BUG]  [BUGGY]          tokens.add(arg.substring(2));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(2  +  1));  }  tokens.add(arg.substring(2));  if(options.hasOption(arg.substring(2  +  1)))  {  tokens.add(arg.substring(2  +  1));  }  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(2));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(2  +  1));  }  tokens.add(arg.substring(2));  if(options.hasOption(arg.substring(2  +  1)))  {  tokens.add(arg.substring(2  +  1));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                tokens.add(arg.substring(2));        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(2    +    1));    }    tokens.add(arg.substring(2));  if(options.hasOption(arg.substring(2  +  1)))  {  tokens.add(arg.substring(2  +  1));  }	  	compilable	  [FE]  ComparisonFailure  	156	3	add
187	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]            ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(2));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(2  +  1));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(2  +  1));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	                tokens.add(arg.substring(2));        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(2    +    1));    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(2  +  1));  }	  	compilable	  [FE]  ComparisonFailure  	156	3	add
188	[BUG]  [BUGGY]          tokens.add(arg.substring(2));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(2  +  1));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(2  +  1));  }  [FE]  ComparisonFailure  [FE]            ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(2));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(2  +  1));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(2  +  1));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                tokens.add(arg.substring(2));        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(2    +    1));    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(2  +  1));  }	  	compilable	  [FE]  ComparisonFailure  	156	3	add
189	[BUG]  [BUGGY]  [FE]  MissingArgumentException  [FE]    MissingArgumentException    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    }    if(options.hasOption(arg.substring(2)))  {  tokens.add(arg.substring(0,  2));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	                if(options.hasOption(arg.substring(0,        2)))        {        tokens.add(arg.substring(0,        2));        }        if(options.hasOption(arg.substring(2)))    {    tokens.add(arg.substring(0,    2));    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }	  	compilable	  [FE]  MissingArgumentException  	104	4	add
190	[BUG]  [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    }    if(options.hasOption(arg.substring(2)))  {  tokens.add(arg.substring(0,  2));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  [FE]  MissingArgumentException  [FE]    MissingArgumentException    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    }    if(options.hasOption(arg.substring(2)))  {  tokens.add(arg.substring(0,  2));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                if(options.hasOption(arg.substring(0,        2)))        {        tokens.add(arg.substring(0,        2));        }        if(options.hasOption(arg.substring(2)))    {    tokens.add(arg.substring(0,    2));    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }	  	compilable	  [FE]  MissingArgumentException  	104	4	add
191	[BUG]  [BUGGY]  [FE]  MissingArgumentException  [FE]      MissingArgumentException    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    }    if(options.hasOption(arg.substring(2)))  {  tokens.add(arg.substring(0,  2));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	                if(options.hasOption(arg.substring(0,        2)))        {        tokens.add(arg.substring(0,        2));        }        if(options.hasOption(arg.substring(2)))    {    tokens.add(arg.substring(0,    2));    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }	  	compilable	  [FE]  MissingArgumentException  	104	4	add
192	[BUG]  [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    }    if(options.hasOption(arg.substring(2)))  {  tokens.add(arg.substring(0,  2));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  [FE]  MissingArgumentException  [FE]      MissingArgumentException    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    }    if(options.hasOption(arg.substring(2)))  {  tokens.add(arg.substring(0,  2));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                if(options.hasOption(arg.substring(0,        2)))        {        tokens.add(arg.substring(0,        2));        }        if(options.hasOption(arg.substring(2)))    {    tokens.add(arg.substring(0,    2));    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }	  	compilable	  [FE]  MissingArgumentException  	104	4	add
193	[BUG]  [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    }    if(options.hasOption(arg.substring(2)))  {  tokens.add(arg.substring(0,  2));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(  [CE]  ')'  expected  [FE]        MissingArgumentException    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    }    if(options.hasOption(arg.substring(2)))  {  tokens.add(arg.substring(0,  2));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                if(options.hasOption(arg.substring(0,        2)))        {        tokens.add(arg.substring(0,        2));        }        if(options.hasOption(arg.substring(2)))    {    tokens.add(arg.substring(0,    2));    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(	  	non-compiled	[CE]  ')'  expected	104	None	add
194	[BUG]  [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    }    if(options.hasOption(arg.substring(2)))  {  tokens.add(arg.substring(0,  2));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring  [CE]  ')'  expected  [FE]          MissingArgumentException    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    }    if(options.hasOption(arg.substring(2)))  {  tokens.add(arg.substring(0,  2));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                if(options.hasOption(arg.substring(0,        2)))        {        tokens.add(arg.substring(0,        2));        }        if(options.hasOption(arg.substring(2)))    {    tokens.add(arg.substring(0,    2));    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring	  	non-compiled	[CE]  ')'  expected	104	None	add
195	[BUG]  [BUGGY]  [FE]  MissingArgumentException  [FE]            MissingArgumentException    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    }    if(options.hasOption(arg.substring(2)))  {  tokens.add(arg.substring(0,  2));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  if(options.hasOption(arg.substring(2)))  {  tokens.add(arg.substring(0,  2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	                if(options.hasOption(arg.substring(0,        2)))        {        tokens.add(arg.substring(0,        2));        }        if(options.hasOption(arg.substring(2)))    {    tokens.add(arg.substring(0,    2));    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  if(options.hasOption(arg.substring(2)))  {  tokens.add(arg.substring(0,  2));  }	  	compilable	  [FE]  MissingArgumentException  	104	4	add
196	[BUG]  [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    }    if(options.hasOption(arg.substring(2)))  {  tokens.add(arg.substring(0,  2));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  if(options.hasOption(arg.substring(2)))  {  tokens.add(arg.substring(0,  2));  }  [FE]  MissingArgumentException  [FE]            MissingArgumentException    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    }    if(options.hasOption(arg.substring(2)))  {  tokens.add(arg.substring(0,  2));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  if(options.hasOption(arg.substring(2)))  {  tokens.add(arg.substring(0,  2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                if(options.hasOption(arg.substring(0,        2)))        {        tokens.add(arg.substring(0,        2));        }        if(options.hasOption(arg.substring(2)))    {    tokens.add(arg.substring(0,    2));    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  if(options.hasOption(arg.substring(2)))  {  tokens.add(arg.substring(0,  2));  }	  	compilable	  [FE]  MissingArgumentException  	104	4	add
197	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(i    +    2));    tokens.add(arg.substring(i  +  2));  if(options.hasOption(arg))  {  tokens.add(arg.substring(i  +  2));  }  tokens.add(arg.substring(i  +  2));  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	                tokens.add(arg.substring(i        +        2));        tokens.add(arg.substring(i    +    2));    if(options.hasOption(arg))    {    tokens.add(arg.substring(i    +    2));    }    tokens.add(arg.substring(i  +  2));	  	compilable	  [FE]  ComparisonFailure  	96	3	add
198	[BUG]  [BUGGY]          tokens.add(arg.substring(i    +    2));    tokens.add(arg.substring(i  +  2));  if(options.hasOption(arg))  {  tokens.add(arg.substring(i  +  2));  }  tokens.add(arg.substring(i  +  2));  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(i    +    2));    tokens.add(arg.substring(i  +  2));  if(options.hasOption(arg))  {  tokens.add(arg.substring(i  +  2));  }  tokens.add(arg.substring(i  +  2));  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                tokens.add(arg.substring(i        +        2));        tokens.add(arg.substring(i    +    2));    if(options.hasOption(arg))    {    tokens.add(arg.substring(i    +    2));    }    tokens.add(arg.substring(i  +  2));	  	compilable	  [FE]  ComparisonFailure  	96	3	add
199	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(i    +    2));    tokens.add(arg.substring(i  +  2));  if(options.hasOption(arg))  {  tokens.add(arg.substring(i  +  2));  }  tokens.add(arg.substring(i  +  2));  tokens.add(arg.substring(i  +  2));  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	                tokens.add(arg.substring(i        +        2));        tokens.add(arg.substring(i    +    2));    if(options.hasOption(arg))    {    tokens.add(arg.substring(i    +    2));    }    tokens.add(arg.substring(i  +  2));  tokens.add(arg.substring(i  +  2));	  	compilable	  [FE]  ComparisonFailure  	96	3	add
200	[BUG]  [BUGGY]          tokens.add(arg.substring(i    +    2));    tokens.add(arg.substring(i  +  2));  if(options.hasOption(arg))  {  tokens.add(arg.substring(i  +  2));  }  tokens.add(arg.substring(i  +  2));  tokens.add(arg.substring(i  +  2));  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(i    +    2));    tokens.add(arg.substring(i  +  2));  if(options.hasOption(arg))  {  tokens.add(arg.substring(i  +  2));  }  tokens.add(arg.substring(i  +  2));  tokens.add(arg.substring(i  +  2));  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                tokens.add(arg.substring(i        +        2));        tokens.add(arg.substring(i    +    2));    if(options.hasOption(arg))    {    tokens.add(arg.substring(i    +    2));    }    tokens.add(arg.substring(i  +  2));  tokens.add(arg.substring(i  +  2));	  	compilable	  [FE]  ComparisonFailure  	96	3	add
201	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(i    +    2));    tokens.add(arg.substring(i  +  2));  if(options.hasOption(arg))  {  tokens.add(arg.substring(i  +  2));  }  tokens.add(arg.substring(i  +  2));  if(options.hasOption(arg))  {  tokens.add(arg.substring(i  +  2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	                tokens.add(arg.substring(i        +        2));        tokens.add(arg.substring(i    +    2));    if(options.hasOption(arg))    {    tokens.add(arg.substring(i    +    2));    }    tokens.add(arg.substring(i  +  2));  if(options.hasOption(arg))  {  tokens.add(arg.substring(i  +  2));  }	  	compilable	  [FE]  ComparisonFailure  	96	3	add
202	[BUG]  [BUGGY]          tokens.add(arg.substring(i    +    2));    tokens.add(arg.substring(i  +  2));  if(options.hasOption(arg))  {  tokens.add(arg.substring(i  +  2));  }  tokens.add(arg.substring(i  +  2));  if(options.hasOption(arg))  {  tokens.add(arg.substring(i  +  2));  }  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(i    +    2));    tokens.add(arg.substring(i  +  2));  if(options.hasOption(arg))  {  tokens.add(arg.substring(i  +  2));  }  tokens.add(arg.substring(i  +  2));  if(options.hasOption(arg))  {  tokens.add(arg.substring(i  +  2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                tokens.add(arg.substring(i        +        2));        tokens.add(arg.substring(i    +    2));    if(options.hasOption(arg))    {    tokens.add(arg.substring(i    +    2));    }    tokens.add(arg.substring(i  +  2));  if(options.hasOption(arg))  {  tokens.add(arg.substring(i  +  2));  }	  	compilable	  [FE]  ComparisonFailure  	96	3	add
203	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(i    +    2));    tokens.add(arg.substring(i  +  2));  if(options.hasOption(arg))  {  tokens.add(arg.substring(i  +  2));  }  if(options.hasOption(arg))  {  tokens.add(arg.substring(i  +  2));  tokens.add(arg.substring(i  +  2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	                tokens.add(arg.substring(i        +        2));        tokens.add(arg.substring(i    +    2));    if(options.hasOption(arg))    {    tokens.add(arg.substring(i    +    2));    }    if(options.hasOption(arg))  {  tokens.add(arg.substring(i  +  2));  tokens.add(arg.substring(i  +  2));  }	  	compilable	  [FE]  ComparisonFailure  	96	3	add
204	[BUG]  [BUGGY]          tokens.add(arg.substring(i    +    2));    tokens.add(arg.substring(i  +  2));  if(options.hasOption(arg))  {  tokens.add(arg.substring(i  +  2));  }  if(options.hasOption(arg))  {  tokens.add(arg.substring(i  +  2));  tokens.add(arg.substring(i  +  2));  }  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(i    +    2));    tokens.add(arg.substring(i  +  2));  if(options.hasOption(arg))  {  tokens.add(arg.substring(i  +  2));  }  if(options.hasOption(arg))  {  tokens.add(arg.substring(i  +  2));  tokens.add(arg.substring(i  +  2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                tokens.add(arg.substring(i        +        2));        tokens.add(arg.substring(i    +    2));    if(options.hasOption(arg))    {    tokens.add(arg.substring(i    +    2));    }    if(options.hasOption(arg))  {  tokens.add(arg.substring(i  +  2));  tokens.add(arg.substring(i  +  2));  }	  	compilable	  [FE]  ComparisonFailure  	96	3	add
205	[BUG]  [BUGGY]          tokens.add(arg.substring(i    +    2));    tokens.add(arg.substring(i  +  2));  if(options.hasOption(arg))  {  tokens.add(arg.substring(i  +  2));  }  tokens.add(arg.substring(i  +  2));  if(options.hasOption(arg))  {  tokens.add(arg.substring(i  +  2));  [CE]  'else'  without  'if'  [FE]            ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(i    +    2));    tokens.add(arg.substring(i  +  2));  if(options.hasOption(arg))  {  tokens.add(arg.substring(i  +  2));  }  tokens.add(arg.substring(i  +  2));  if(options.hasOption(arg))  {  tokens.add(arg.substring(i  +  2));  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                tokens.add(arg.substring(i        +        2));        tokens.add(arg.substring(i    +    2));    if(options.hasOption(arg))    {    tokens.add(arg.substring(i    +    2));    }    tokens.add(arg.substring(i  +  2));  if(options.hasOption(arg))  {  tokens.add(arg.substring(i  +  2));	  	non-compiled	[CE]  'else'  without  'if'	96	None	add
206	[BUG]  [BUGGY]  timeout  [FE]            ComparisonFailure      [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(1,    2));    }    while(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1,  2));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1,  2));  }  while(options.hasOption(arg.substring(1,  2)))  {  tokens.add(arg.substring(1,  2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	                if(options.hasOption(arg.substring(0,        2)))        {        tokens.add(arg.substring(1,        2));        }        while(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(1,    2));    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1,  2));  }  while(options.hasOption(arg.substring(1,  2)))  {  tokens.add(arg.substring(1,  2));  }	  timeout    	compilable	timeout	111	1	add
207	[BUG]  [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(1,    2));    }    while(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1,  2));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1,  2));  }  while(options.hasOption(arg.substring(1,  2)))  {  tokens.add(arg.substring(1,  2));  }  timeout  [FE]            ComparisonFailure      [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(1,    2));    }    while(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1,  2));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1,  2));  }  while(options.hasOption(arg.substring(1,  2)))  {  tokens.add(arg.substring(1,  2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                if(options.hasOption(arg.substring(0,        2)))        {        tokens.add(arg.substring(1,        2));        }        while(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(1,    2));    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1,  2));  }  while(options.hasOption(arg.substring(1,  2)))  {  tokens.add(arg.substring(1,  2));  }	  timeout    	compilable	timeout	111	1	add
208	[BUG]  [BUGGY]  timeout  [FE]              ComparisonFailure      [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(1,    2));    }    while(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1,  2));  }  if(options.hasOption(arg.substring(1,  2)))  {  tokens.add(arg.substring(1,  2));  }  while(options.hasOption(arg.substring(1,  2)))  {  tokens.add(arg.substring(1,  2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	                if(options.hasOption(arg.substring(0,        2)))        {        tokens.add(arg.substring(1,        2));        }        while(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(1,    2));    }    if(options.hasOption(arg.substring(1,  2)))  {  tokens.add(arg.substring(1,  2));  }  while(options.hasOption(arg.substring(1,  2)))  {  tokens.add(arg.substring(1,  2));  }	  timeout    	compilable	timeout	111	1	add
209	[BUG]  [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(1,    2));    }    while(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1,  2));  }  if(options.hasOption(arg.substring(1,  2)))  {  tokens.add(arg.substring(1,  2));  }  while(options.hasOption(arg.substring(1,  2)))  {  tokens.add(arg.substring(1,  2));  }  timeout  [FE]              ComparisonFailure      [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(1,    2));    }    while(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1,  2));  }  if(options.hasOption(arg.substring(1,  2)))  {  tokens.add(arg.substring(1,  2));  }  while(options.hasOption(arg.substring(1,  2)))  {  tokens.add(arg.substring(1,  2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                if(options.hasOption(arg.substring(0,        2)))        {        tokens.add(arg.substring(1,        2));        }        while(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(1,    2));    }    if(options.hasOption(arg.substring(1,  2)))  {  tokens.add(arg.substring(1,  2));  }  while(options.hasOption(arg.substring(1,  2)))  {  tokens.add(arg.substring(1,  2));  }	  timeout    	compilable	timeout	111	1	add
210	[BUG]  [BUGGY]  timeout  [FE]                ComparisonFailure      [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(1,    2));    }    while(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1,  2));  }  while(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1,  2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	                if(options.hasOption(arg.substring(0,        2)))        {        tokens.add(arg.substring(1,        2));        }        while(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(1,    2));    }    while(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1,  2));  }	  timeout    	compilable	timeout	111	1	add
211	[BUG]  [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(1,    2));    }    while(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1,  2));  }  while(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1,  2));  }  timeout  [FE]                ComparisonFailure      [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(1,    2));    }    while(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1,  2));  }  while(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1,  2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                if(options.hasOption(arg.substring(0,        2)))        {        tokens.add(arg.substring(1,        2));        }        while(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(1,    2));    }    while(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1,  2));  }	  timeout    	compilable	timeout	111	1	add
212	[BUG]  [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(1,    2));    }    while(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1,  2));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1,  2));  }  while(options.hasOption(arg.substring(1,  2)))  {  tokens.add(arg.substring  [CE]  ')'  expected  [FE]                  ComparisonFailure      [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(1,    2));    }    while(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1,  2));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1,  2));  }  while(options.hasOption(arg.substring(1,  2)))  {  tokens.add(arg.substring  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                if(options.hasOption(arg.substring(0,        2)))        {        tokens.add(arg.substring(1,        2));        }        while(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(1,    2));    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1,  2));  }  while(options.hasOption(arg.substring(1,  2)))  {  tokens.add(arg.substring	  timeout    	non-compiled	[CE]  ')'  expected	111	None	add
213	[BUG]  [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(1,    2));    }    while(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1,  2));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1,  2));  }  while(options.hasOption(arg.substring(1,  2)))  {  tokens  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(1,    2));    }    while(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1,  2));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1,  2));  }  while(options.hasOption(arg.substring(1,  2)))  {  tokens  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                if(options.hasOption(arg.substring(0,        2)))        {        tokens.add(arg.substring(1,        2));        }        while(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(1,    2));    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1,  2));  }  while(options.hasOption(arg.substring(1,  2)))  {  tokens	  timeout    	non-compiled	[CE]  ';'  expected	111	None	add
214	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(i    +    1));    tokens.add(arg.substring(i  +  1));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  tokens.add(arg.substring(i  +  1));  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	                tokens.add(arg.substring(i        +        1));        tokens.add(arg.substring(i    +    1));    if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(i    +    1));    }    tokens.add(arg.substring(i  +  1));	  	compilable	  [FE]  ComparisonFailure  	85	4	add
215	[BUG]  [BUGGY]          tokens.add(arg.substring(i    +    1));    tokens.add(arg.substring(i  +  1));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  tokens.add(arg.substring(i  +  1));  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(i    +    1));    tokens.add(arg.substring(i  +  1));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  tokens.add(arg.substring(i  +  1));  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                tokens.add(arg.substring(i        +        1));        tokens.add(arg.substring(i    +    1));    if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(i    +    1));    }    tokens.add(arg.substring(i  +  1));	  	compilable	  [FE]  ComparisonFailure  	85	4	add
216	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(i    +    1));    tokens.add(arg.substring(i  +  1));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  tokens.add(arg.substring(i  +  1));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	                tokens.add(arg.substring(i        +        1));        tokens.add(arg.substring(i    +    1));    if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(i    +    1));    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  tokens.add(arg.substring(i  +  1));  }	  	compilable	  [FE]  ComparisonFailure  	85	4	add
217	[BUG]  [BUGGY]          tokens.add(arg.substring(i    +    1));    tokens.add(arg.substring(i  +  1));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  tokens.add(arg.substring(i  +  1));  }  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(i    +    1));    tokens.add(arg.substring(i  +  1));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  tokens.add(arg.substring(i  +  1));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                tokens.add(arg.substring(i        +        1));        tokens.add(arg.substring(i    +    1));    if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(i    +    1));    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  tokens.add(arg.substring(i  +  1));  }	  	compilable	  [FE]  ComparisonFailure  	85	4	add
218	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(i    +    1));    tokens.add(arg.substring(i  +  1));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  tokens.add(arg.substring(i  +  1));  if(options.hasOption(arg.substring(i  +  1)))  {  tokens.add(arg.substring(i  +  1));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	                tokens.add(arg.substring(i        +        1));        tokens.add(arg.substring(i    +    1));    if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(i    +    1));    }    tokens.add(arg.substring(i  +  1));  if(options.hasOption(arg.substring(i  +  1)))  {  tokens.add(arg.substring(i  +  1));  }	  	compilable	  [FE]  ComparisonFailure  	85	4	add
219	[BUG]  [BUGGY]          tokens.add(arg.substring(i    +    1));    tokens.add(arg.substring(i  +  1));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  tokens.add(arg.substring(i  +  1));  if(options.hasOption(arg.substring(i  +  1)))  {  tokens.add(arg.substring(i  +  1));  }  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(i    +    1));    tokens.add(arg.substring(i  +  1));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  tokens.add(arg.substring(i  +  1));  if(options.hasOption(arg.substring(i  +  1)))  {  tokens.add(arg.substring(i  +  1));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                tokens.add(arg.substring(i        +        1));        tokens.add(arg.substring(i    +    1));    if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(i    +    1));    }    tokens.add(arg.substring(i  +  1));  if(options.hasOption(arg.substring(i  +  1)))  {  tokens.add(arg.substring(i  +  1));  }	  	compilable	  [FE]  ComparisonFailure  	85	4	add
220	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(i    +    1));    tokens.add(arg.substring(i  +  1));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  tokens.add(arg.substring(i  +  1));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	                tokens.add(arg.substring(i        +        1));        tokens.add(arg.substring(i    +    1));    if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(i    +    1));    }    tokens.add(arg.substring(i  +  1));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }	  	compilable	  [FE]  ComparisonFailure  	85	4	add
221	[BUG]  [BUGGY]          tokens.add(arg.substring(i    +    1));    tokens.add(arg.substring(i  +  1));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  tokens.add(arg.substring(i  +  1));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(i    +    1));    tokens.add(arg.substring(i  +  1));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  tokens.add(arg.substring(i  +  1));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                tokens.add(arg.substring(i        +        1));        tokens.add(arg.substring(i    +    1));    if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(i    +    1));    }    tokens.add(arg.substring(i  +  1));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }	  	compilable	  [FE]  ComparisonFailure  	85	4	add
222	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]            ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(i    +    1));    tokens.add(arg.substring(i  +  1));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  tokens.add(arg.substring(i  +  1));  tokens.add(arg.substring(i  +  1));  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	                tokens.add(arg.substring(i        +        1));        tokens.add(arg.substring(i    +    1));    if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(i    +    1));    }    tokens.add(arg.substring(i  +  1));  tokens.add(arg.substring(i  +  1));	  	compilable	  [FE]  ComparisonFailure  	85	4	add
223	[BUG]  [BUGGY]          tokens.add(arg.substring(i    +    1));    tokens.add(arg.substring(i  +  1));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  tokens.add(arg.substring(i  +  1));  tokens.add(arg.substring(i  +  1));  [FE]  ComparisonFailure  [FE]            ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(i    +    1));    tokens.add(arg.substring(i  +  1));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  tokens.add(arg.substring(i  +  1));  tokens.add(arg.substring(i  +  1));  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                tokens.add(arg.substring(i        +        1));        tokens.add(arg.substring(i    +    1));    if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(i    +    1));    }    tokens.add(arg.substring(i  +  1));  tokens.add(arg.substring(i  +  1));	  	compilable	  [FE]  ComparisonFailure  	85	4	add
224	[BUG]  [BUGGY]  [FE]  MissingArgumentException  [FE]    MissingArgumentException    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    }    else  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  else  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	                if(options.hasOption(arg.substring(0,        2)))        {        tokens.add(arg.substring(0,        2));        }        else    if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  else  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }	  	compilable	  [FE]  MissingArgumentException  	102	4	add
225	[BUG]  [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    }    else  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  else  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  [FE]  MissingArgumentException  [FE]    MissingArgumentException    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    }    else  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  else  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                if(options.hasOption(arg.substring(0,        2)))        {        tokens.add(arg.substring(0,        2));        }        else    if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  else  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }	  	compilable	  [FE]  MissingArgumentException  	102	4	add
226	[BUG]  [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    }    else  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  else  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring  [CE]  ')'  expected  [FE]      MissingArgumentException    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    }    else  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  else  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                if(options.hasOption(arg.substring(0,        2)))        {        tokens.add(arg.substring(0,        2));        }        else    if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  else  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring	  	non-compiled	[CE]  ')'  expected	102	None	add
227	[BUG]  [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    }    else  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  else  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(  [CE]  ')'  expected  [FE]        MissingArgumentException    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    }    else  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  else  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                if(options.hasOption(arg.substring(0,        2)))        {        tokens.add(arg.substring(0,        2));        }        else    if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  else  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(	  	non-compiled	[CE]  ')'  expected	102	None	add
228	[BUG]  [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    }    else  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  else  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0  [CE]  ')'  expected  [FE]          MissingArgumentException    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    }    else  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  else  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                if(options.hasOption(arg.substring(0,        2)))        {        tokens.add(arg.substring(0,        2));        }        else    if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  else  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0	  	non-compiled	[CE]  ')'  expected	102	None	add
229	[BUG]  [BUGGY]  [FE]  MissingArgumentException  [FE]            MissingArgumentException    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    }    else  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  else  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	                if(options.hasOption(arg.substring(0,        2)))        {        tokens.add(arg.substring(0,        2));        }        else    if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  else  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(2));  }	  	compilable	  [FE]  MissingArgumentException  	102	4	add
230	[BUG]  [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    }    else  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  else  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(2));  }  [FE]  MissingArgumentException  [FE]            MissingArgumentException    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    }    else  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  else  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                if(options.hasOption(arg.substring(0,        2)))        {        tokens.add(arg.substring(0,        2));        }        else    if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  else  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(2));  }	  	compilable	  [FE]  MissingArgumentException  	102	4	add
231	[BUG]  [BUGGY]  [FE]  MissingArgumentException  [FE]        MissingArgumentException      [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]  }  else  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	}  else  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }	          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    }    if(options.hasOption(arg.substring(0,    2)))    <    tokens.add(arg.substring(0,    2));    }    	compilable	  [FE]  MissingArgumentException  	155	4	replace
232	[BUG]  [BUGGY]  }  else  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  [FE]  MissingArgumentException  [FE]        MissingArgumentException      [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]  }  else  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	}  else  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }	          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    }    if(options.hasOption(arg.substring(0,    2)))    <    tokens.add(arg.substring(0,    2));    }    	compilable	  [FE]  MissingArgumentException  	155	4	replace
233	[BUG]  [BUGGY]  }  else  if(options.hasOption(arg.substring(0,  2))  ||  options.hasOption(arg.substring(0,  2))  {  tokens.add(arg.substring(0,  2));  }  [CE]  ')'  expected  [FE]          MissingArgumentException      [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]  }  else  if(options.hasOption(arg.substring(0,  2))  ||  options.hasOption(arg.substring(0,  2))  {  tokens.add(arg.substring(0,  2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	}  else  if(options.hasOption(arg.substring(0,  2))  ||  options.hasOption(arg.substring(0,  2))  {  tokens.add(arg.substring(0,  2));  }	          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    }    if(options.hasOption(arg.substring(0,    2)))    <    tokens.add(arg.substring(0,    2));    }    	non-compiled	[CE]  ')'  expected	155	None	replace
234	[BUG]  [BUGGY]  }  else  if(options.hasOption(arg.substring(0,  2))  ||  options.hasOption(arg.substring(0,  2))  <  tokens.add(arg.substring(0,  2));  [CE]  ')'  expected  [FE]            MissingArgumentException      [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]  }  else  if(options.hasOption(arg.substring(0,  2))  ||  options.hasOption(arg.substring(0,  2))  <  tokens.add(arg.substring(0,  2));  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	}  else  if(options.hasOption(arg.substring(0,  2))  ||  options.hasOption(arg.substring(0,  2))  <  tokens.add(arg.substring(0,  2));	          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    }    if(options.hasOption(arg.substring(0,    2)))    <    tokens.add(arg.substring(0,    2));    }    	non-compiled	[CE]  ')'  expected	155	None	replace
235	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(1));    tokens.add(arg.substring(2));  tokens.add(arg.substring(1));  tokens.add(arg.substring(2));  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	                tokens.add(arg.substring(1));        tokens.add(arg.substring(2));    tokens.add(arg.substring(1));  tokens.add(arg.substring(2));	  	compilable	  [FE]  ComparisonFailure  	9	4	add
236	[BUG]  [BUGGY]          tokens.add(arg.substring(1));    tokens.add(arg.substring(2));  tokens.add(arg.substring(1));  tokens.add(arg.substring(2));  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(1));    tokens.add(arg.substring(2));  tokens.add(arg.substring(1));  tokens.add(arg.substring(2));  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                tokens.add(arg.substring(1));        tokens.add(arg.substring(2));    tokens.add(arg.substring(1));  tokens.add(arg.substring(2));	  	compilable	  [FE]  ComparisonFailure  	9	4	add
237	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(1));    tokens.add(arg.substring(2));  tokens.add(arg.substring(2));  tokens.add(arg.substring(2));  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	                tokens.add(arg.substring(1));        tokens.add(arg.substring(2));    tokens.add(arg.substring(2));  tokens.add(arg.substring(2));	  	compilable	  [FE]  ComparisonFailure  	9	4	add
238	[BUG]  [BUGGY]          tokens.add(arg.substring(1));    tokens.add(arg.substring(2));  tokens.add(arg.substring(2));  tokens.add(arg.substring(2));  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(1));    tokens.add(arg.substring(2));  tokens.add(arg.substring(2));  tokens.add(arg.substring(2));  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                tokens.add(arg.substring(1));        tokens.add(arg.substring(2));    tokens.add(arg.substring(2));  tokens.add(arg.substring(2));	  	compilable	  [FE]  ComparisonFailure  	9	4	add
239	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(1));    tokens.add(arg.substring(2));  tokens.add(arg.substring(3));  tokens.add(arg.substring(2));  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	                tokens.add(arg.substring(1));        tokens.add(arg.substring(2));    tokens.add(arg.substring(3));  tokens.add(arg.substring(2));	  	compilable	  [FE]  ComparisonFailure  	9	4	add
240	[BUG]  [BUGGY]          tokens.add(arg.substring(1));    tokens.add(arg.substring(2));  tokens.add(arg.substring(3));  tokens.add(arg.substring(2));  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(1));    tokens.add(arg.substring(2));  tokens.add(arg.substring(3));  tokens.add(arg.substring(2));  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                tokens.add(arg.substring(1));        tokens.add(arg.substring(2));    tokens.add(arg.substring(3));  tokens.add(arg.substring(2));	  	compilable	  [FE]  ComparisonFailure  	9	4	add
241	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(1));    tokens.add(arg.substring(2));  tokens.add(arg.substring(1));  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	                tokens.add(arg.substring(1));        tokens.add(arg.substring(2));    tokens.add(arg.substring(1));	  	compilable	  [FE]  ComparisonFailure  	9	4	add
242	[BUG]  [BUGGY]          tokens.add(arg.substring(1));    tokens.add(arg.substring(2));  tokens.add(arg.substring(1));  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(1));    tokens.add(arg.substring(2));  tokens.add(arg.substring(1));  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                tokens.add(arg.substring(1));        tokens.add(arg.substring(2));    tokens.add(arg.substring(1));	  	compilable	  [FE]  ComparisonFailure  	9	4	add
243	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]            ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(1));    tokens.add(arg.substring(2));  tokens.add(arg.substring(1));  tokens.add(arg.substring(3));  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	                tokens.add(arg.substring(1));        tokens.add(arg.substring(2));    tokens.add(arg.substring(1));  tokens.add(arg.substring(3));	  	compilable	  [FE]  ComparisonFailure  	9	4	add
244	[BUG]  [BUGGY]          tokens.add(arg.substring(1));    tokens.add(arg.substring(2));  tokens.add(arg.substring(1));  tokens.add(arg.substring(3));  [FE]  ComparisonFailure  [FE]            ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(1));    tokens.add(arg.substring(2));  tokens.add(arg.substring(1));  tokens.add(arg.substring(3));  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                tokens.add(arg.substring(1));        tokens.add(arg.substring(2));    tokens.add(arg.substring(1));  tokens.add(arg.substring(3));	  	compilable	  [FE]  ComparisonFailure  	9	4	add
245	[BUG]  [BUGGY]  timeout  [FE]            ComparisonFailure      [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(i    +    1));    }    while(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  while(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	                if(options.hasOption(arg.substring(0,        2)))        {        tokens.add(arg.substring(i        +        1));        }        while(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(i    +    1));    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  while(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }	  timeout    	compilable	timeout	4	1	add
246	[BUG]  [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(i    +    1));    }    while(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  while(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  timeout  [FE]            ComparisonFailure      [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(i    +    1));    }    while(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  while(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                if(options.hasOption(arg.substring(0,        2)))        {        tokens.add(arg.substring(i        +        1));        }        while(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(i    +    1));    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  while(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }	  timeout    	compilable	timeout	4	1	add
247	[BUG]  [BUGGY]  timeout  [FE]              ComparisonFailure      [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(i    +    1));    }    while(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  while(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	                if(options.hasOption(arg.substring(0,        2)))        {        tokens.add(arg.substring(i        +        1));        }        while(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(i    +    1));    }    while(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }	  timeout    	compilable	timeout	4	1	add
248	[BUG]  [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(i    +    1));    }    while(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  while(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  timeout  [FE]              ComparisonFailure      [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(i    +    1));    }    while(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  while(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                if(options.hasOption(arg.substring(0,        2)))        {        tokens.add(arg.substring(i        +        1));        }        while(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(i    +    1));    }    while(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }	  timeout    	compilable	timeout	4	1	add
249	[BUG]  [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(i    +    1));    }    while(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  while(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring  [CE]  ')'  expected  [FE]                ComparisonFailure      [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(i    +    1));    }    while(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  while(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                if(options.hasOption(arg.substring(0,        2)))        {        tokens.add(arg.substring(i        +        1));        }        while(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(i    +    1));    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  while(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring	  timeout    	non-compiled	[CE]  ')'  expected	4	None	add
250	[BUG]  [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(i    +    1));    }    while(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  while(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  [CE]  'else'  without  'if'  [FE]                  ComparisonFailure      [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(i    +    1));    }    while(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  while(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                if(options.hasOption(arg.substring(0,        2)))        {        tokens.add(arg.substring(i        +        1));        }        while(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(i    +    1));    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  while(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));	  timeout    	non-compiled	[CE]  'else'  without  'if'	4	None	add
251	[BUG]  [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(i    +    1));    }    while(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  while(options.hasOption(arg.substring(0,  2)))  {  tokens  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(i    +    1));    }    while(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  while(options.hasOption(arg.substring(0,  2)))  {  tokens  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                if(options.hasOption(arg.substring(0,        2)))        {        tokens.add(arg.substring(i        +        1));        }        while(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(i    +    1));    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  while(options.hasOption(arg.substring(0,  2)))  {  tokens	  timeout    	non-compiled	[CE]  ';'  expected	4	None	add
252	[BUG]  [BUGGY]  'else'  without  'if'  [CE]  unclosed  character  literal  [FE]            MissingArgumentException      [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]  'else'  without  'if'  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	'else'  without  'if'	          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    }    while(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    	non-compiled	[CE]  unclosed  character  literal	72	None	replace
253	[BUG]  [BUGGY]  ||  options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  [CE]  illegal  start  of  expression  [FE]              MissingArgumentException      [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]  ||  options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	||  options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));	          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    }    while(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
254	[BUG]  [BUGGY]  ||  options.hasOption(arg.substring(0,  2))  {  tokens.add(arg.substring(0,  2));  [CE]  illegal  start  of  expression  [FE]                MissingArgumentException      [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]  ||  options.hasOption(arg.substring(0,  2))  {  tokens.add(arg.substring(0,  2));  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	||  options.hasOption(arg.substring(0,  2))  {  tokens.add(arg.substring(0,  2));	          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    }    while(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
255	[BUG]  [BUGGY]  else  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  [CE]  'else'  without  'if'  [FE]    UnrecognizedOptionException    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]  else  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	else  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }	          tokens.add(arg.substring(i));    tokens.add(arg.substring(i));    	non-compiled	[CE]  'else'  without  'if'	19	None	replace
256	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(i    +    1));    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	                if(options.hasOption(arg.substring(0,        2)))        {        tokens.add(arg.substring(i        +        1));        }        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(i    +    1));    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }	  	compilable	  [FE]  ComparisonFailure  	1	4	add
257	[BUG]  [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(i    +    1));    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(i    +    1));    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                if(options.hasOption(arg.substring(0,        2)))        {        tokens.add(arg.substring(i        +        1));        }        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(i    +    1));    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }	  	compilable	  [FE]  ComparisonFailure  	1	4	add
258	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(i    +    1));    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	                if(options.hasOption(arg.substring(0,        2)))        {        tokens.add(arg.substring(i        +        1));        }        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(i    +    1));    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }	  	compilable	  [FE]  ComparisonFailure  	1	4	add
259	[BUG]  [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(i    +    1));    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(i    +    1));    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                if(options.hasOption(arg.substring(0,        2)))        {        tokens.add(arg.substring(i        +        1));        }        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(i    +    1));    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }	  	compilable	  [FE]  ComparisonFailure  	1	4	add
260	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(i    +    1));    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  else  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	                if(options.hasOption(arg.substring(0,        2)))        {        tokens.add(arg.substring(i        +        1));        }        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(i    +    1));    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  else  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }	  	compilable	  [FE]  ComparisonFailure  	1	4	add
261	[BUG]  [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(i    +    1));    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  else  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(i    +    1));    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  else  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                if(options.hasOption(arg.substring(0,        2)))        {        tokens.add(arg.substring(i        +        1));        }        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(i    +    1));    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  else  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }	  	compilable	  [FE]  ComparisonFailure  	1	4	add
262	[BUG]  [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(i    +    1));    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  else  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring  [CE]  ')'  expected  [FE]          ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(i    +    1));    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  else  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                if(options.hasOption(arg.substring(0,        2)))        {        tokens.add(arg.substring(i        +        1));        }        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(i    +    1));    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  else  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring	  	non-compiled	[CE]  ')'  expected	1	None	add
263	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(2));    tokens.add(arg.substring(2));  tokens.add(arg.substring(2));  tokens.add(arg.substring(2));  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	                tokens.add(arg.substring(2));        tokens.add(arg.substring(2));    tokens.add(arg.substring(2));  tokens.add(arg.substring(2));	  	compilable	  [FE]  ComparisonFailure  	48	3	add
264	[BUG]  [BUGGY]          tokens.add(arg.substring(2));    tokens.add(arg.substring(2));  tokens.add(arg.substring(2));  tokens.add(arg.substring(2));  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(2));    tokens.add(arg.substring(2));  tokens.add(arg.substring(2));  tokens.add(arg.substring(2));  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                tokens.add(arg.substring(2));        tokens.add(arg.substring(2));    tokens.add(arg.substring(2));  tokens.add(arg.substring(2));	  	compilable	  [FE]  ComparisonFailure  	48	3	add
265	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(2));    tokens.add(arg.substring(2));  tokens.add(arg.substring(2));  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	                tokens.add(arg.substring(2));        tokens.add(arg.substring(2));    tokens.add(arg.substring(2));	  	compilable	  [FE]  ComparisonFailure  	48	3	add
266	[BUG]  [BUGGY]          tokens.add(arg.substring(2));    tokens.add(arg.substring(2));  tokens.add(arg.substring(2));  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(2));    tokens.add(arg.substring(2));  tokens.add(arg.substring(2));  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                tokens.add(arg.substring(2));        tokens.add(arg.substring(2));    tokens.add(arg.substring(2));	  	compilable	  [FE]  ComparisonFailure  	48	3	add
267	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(2));    tokens.add(arg.substring(2));  tokens.add(arg.substring(3));  tokens.add(arg.substring(2));  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	                tokens.add(arg.substring(2));        tokens.add(arg.substring(2));    tokens.add(arg.substring(3));  tokens.add(arg.substring(2));	  	compilable	  [FE]  ComparisonFailure  	48	3	add
268	[BUG]  [BUGGY]          tokens.add(arg.substring(2));    tokens.add(arg.substring(2));  tokens.add(arg.substring(3));  tokens.add(arg.substring(2));  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(2));    tokens.add(arg.substring(2));  tokens.add(arg.substring(3));  tokens.add(arg.substring(2));  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                tokens.add(arg.substring(2));        tokens.add(arg.substring(2));    tokens.add(arg.substring(3));  tokens.add(arg.substring(2));	  	compilable	  [FE]  ComparisonFailure  	48	3	add
269	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(2));    tokens.add(arg.substring(2));  tokens.add(arg.substring(2));  tokens.add(arg.substring(3));  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	                tokens.add(arg.substring(2));        tokens.add(arg.substring(2));    tokens.add(arg.substring(2));  tokens.add(arg.substring(3));	  	compilable	  [FE]  ComparisonFailure  	48	3	add
270	[BUG]  [BUGGY]          tokens.add(arg.substring(2));    tokens.add(arg.substring(2));  tokens.add(arg.substring(2));  tokens.add(arg.substring(3));  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(2));    tokens.add(arg.substring(2));  tokens.add(arg.substring(2));  tokens.add(arg.substring(3));  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                tokens.add(arg.substring(2));        tokens.add(arg.substring(2));    tokens.add(arg.substring(2));  tokens.add(arg.substring(3));	  	compilable	  [FE]  ComparisonFailure  	48	3	add
271	[BUG]  [BUGGY]          tokens.add(arg.substring(2));    tokens.add(arg.substring(2));  tokens.add(arg.substring(2));  tos.add(arg.substring(2));  [CE]  cannot  find  symbol  tos  [FE]            ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(2));    tokens.add(arg.substring(2));  tokens.add(arg.substring(2));  tos.add(arg.substring(2));  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                tokens.add(arg.substring(2));        tokens.add(arg.substring(2));    tokens.add(arg.substring(2));  tos.add(arg.substring(2));	  	non-compiled	[CE]  cannot  find  symbol  tos	48	None	add
272	[BUG]  [BUGGY]  if(options.hasOption(arg))  {  tokens.add(arg.substring(i  +  1));  }  [CE]  'else'  without  'if'  [FE]    ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]  if(options.hasOption(arg))  {  tokens.add(arg.substring(i  +  1));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	if(options.hasOption(arg))  {  tokens.add(arg.substring(i  +  1));  }	          tokens.add(arg.substring(i    +    1));    tokens.add(arg.substring(i    +    1));    if(options.hasOption(arg))    {    tokens.add(arg.substring(i    +    1));    }    	non-compiled	[CE]  'else'  without  'if'	131	None	replace
273	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(i    +    2));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  2));  }  else  {  tokens.add(arg.substring(i  +  2));  }  tokens.add(arg.substring(i  +  2));  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	                tokens.add(arg.substring(i        +        2));        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(i    +    2));    }    else    {    tokens.add(arg.substring(i    +    2));    }    tokens.add(arg.substring(i  +  2));	  	compilable	  [FE]  ComparisonFailure  	65	3	add
274	[BUG]  [BUGGY]          tokens.add(arg.substring(i    +    2));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  2));  }  else  {  tokens.add(arg.substring(i  +  2));  }  tokens.add(arg.substring(i  +  2));  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(i    +    2));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  2));  }  else  {  tokens.add(arg.substring(i  +  2));  }  tokens.add(arg.substring(i  +  2));  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                tokens.add(arg.substring(i        +        2));        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(i    +    2));    }    else    {    tokens.add(arg.substring(i    +    2));    }    tokens.add(arg.substring(i  +  2));	  	compilable	  [FE]  ComparisonFailure  	65	3	add
275	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(i    +    2));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  2));  }  else  {  tokens.add(arg.substring(i  +  2));  }  tokens.add(arg.substring(i  +  2));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	                tokens.add(arg.substring(i        +        2));        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(i    +    2));    }    else    {    tokens.add(arg.substring(i    +    2));    }    tokens.add(arg.substring(i  +  2));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  2));  }	  	compilable	  [FE]  ComparisonFailure  	65	3	add
276	[BUG]  [BUGGY]          tokens.add(arg.substring(i    +    2));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  2));  }  else  {  tokens.add(arg.substring(i  +  2));  }  tokens.add(arg.substring(i  +  2));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  2));  }  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(i    +    2));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  2));  }  else  {  tokens.add(arg.substring(i  +  2));  }  tokens.add(arg.substring(i  +  2));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                tokens.add(arg.substring(i        +        2));        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(i    +    2));    }    else    {    tokens.add(arg.substring(i    +    2));    }    tokens.add(arg.substring(i  +  2));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  2));  }	  	compilable	  [FE]  ComparisonFailure  	65	3	add
277	[BUG]  [BUGGY]          tokens.add(arg.substring(i    +    2));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  2));  }  else  {  tokens.add(arg.substring(i  +  2));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  2));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  2));  }  [CE]  'else'  without  'if'  [FE]        ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(i    +    2));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  2));  }  else  {  tokens.add(arg.substring(i  +  2));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  2));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                tokens.add(arg.substring(i        +        2));        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(i    +    2));    }    else    {    tokens.add(arg.substring(i    +    2));    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  2));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  2));  }	  	non-compiled	[CE]  'else'  without  'if'	65	None	add
278	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(i    +    2));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  2));  }  else  {  tokens.add(arg.substring(i  +  2));  }  tokens.add(arg.substring(i  +  2));  if(options.hasOption(arg.substring(i  +  2)))  {  tokens.add(arg.substring(i  +  2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	                tokens.add(arg.substring(i        +        2));        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(i    +    2));    }    else    {    tokens.add(arg.substring(i    +    2));    }    tokens.add(arg.substring(i  +  2));  if(options.hasOption(arg.substring(i  +  2)))  {  tokens.add(arg.substring(i  +  2));  }	  	compilable	  [FE]  ComparisonFailure  	65	3	add
279	[BUG]  [BUGGY]          tokens.add(arg.substring(i    +    2));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  2));  }  else  {  tokens.add(arg.substring(i  +  2));  }  tokens.add(arg.substring(i  +  2));  if(options.hasOption(arg.substring(i  +  2)))  {  tokens.add(arg.substring(i  +  2));  }  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(i    +    2));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  2));  }  else  {  tokens.add(arg.substring(i  +  2));  }  tokens.add(arg.substring(i  +  2));  if(options.hasOption(arg.substring(i  +  2)))  {  tokens.add(arg.substring(i  +  2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                tokens.add(arg.substring(i        +        2));        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(i    +    2));    }    else    {    tokens.add(arg.substring(i    +    2));    }    tokens.add(arg.substring(i  +  2));  if(options.hasOption(arg.substring(i  +  2)))  {  tokens.add(arg.substring(i  +  2));  }	  	compilable	  [FE]  ComparisonFailure  	65	3	add
280	[BUG]  [BUGGY]          tokens.add(arg.substring(i    +    2));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  2));  }  else  {  tokens.add(arg.substring(i  +  2));  }  tokens.add(arg.substring(i  +  2));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  2));  [CE]  'else'  without  'if'  [FE]            ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(i    +    2));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  2));  }  else  {  tokens.add(arg.substring(i  +  2));  }  tokens.add(arg.substring(i  +  2));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  2));  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                tokens.add(arg.substring(i        +        2));        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(i    +    2));    }    else    {    tokens.add(arg.substring(i    +    2));    }    tokens.add(arg.substring(i  +  2));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  2));	  	non-compiled	[CE]  'else'  without  'if'	65	None	add
281	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(1));    tokens.add(arg.substring(3));  tokens.add(arg.substring(1));  tokens.add(arg.substring(3));  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	                tokens.add(arg.substring(1));        tokens.add(arg.substring(3));    tokens.add(arg.substring(1));  tokens.add(arg.substring(3));	  	compilable	  [FE]  ComparisonFailure  	11	4	add
282	[BUG]  [BUGGY]          tokens.add(arg.substring(1));    tokens.add(arg.substring(3));  tokens.add(arg.substring(1));  tokens.add(arg.substring(3));  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(1));    tokens.add(arg.substring(3));  tokens.add(arg.substring(1));  tokens.add(arg.substring(3));  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                tokens.add(arg.substring(1));        tokens.add(arg.substring(3));    tokens.add(arg.substring(1));  tokens.add(arg.substring(3));	  	compilable	  [FE]  ComparisonFailure  	11	4	add
283	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(1));    tokens.add(arg.substring(3));  tokens.add(arg.substring(2));  tokens.add(arg.substring(3));  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	                tokens.add(arg.substring(1));        tokens.add(arg.substring(3));    tokens.add(arg.substring(2));  tokens.add(arg.substring(3));	  	compilable	  [FE]  ComparisonFailure  	11	4	add
284	[BUG]  [BUGGY]          tokens.add(arg.substring(1));    tokens.add(arg.substring(3));  tokens.add(arg.substring(2));  tokens.add(arg.substring(3));  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(1));    tokens.add(arg.substring(3));  tokens.add(arg.substring(2));  tokens.add(arg.substring(3));  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                tokens.add(arg.substring(1));        tokens.add(arg.substring(3));    tokens.add(arg.substring(2));  tokens.add(arg.substring(3));	  	compilable	  [FE]  ComparisonFailure  	11	4	add
285	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(1));    tokens.add(arg.substring(3));  tokens.add(arg.substring(3));  tokens.add(arg.substring(3));  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	                tokens.add(arg.substring(1));        tokens.add(arg.substring(3));    tokens.add(arg.substring(3));  tokens.add(arg.substring(3));	  	compilable	  [FE]  ComparisonFailure  	11	4	add
286	[BUG]  [BUGGY]          tokens.add(arg.substring(1));    tokens.add(arg.substring(3));  tokens.add(arg.substring(3));  tokens.add(arg.substring(3));  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(1));    tokens.add(arg.substring(3));  tokens.add(arg.substring(3));  tokens.add(arg.substring(3));  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                tokens.add(arg.substring(1));        tokens.add(arg.substring(3));    tokens.add(arg.substring(3));  tokens.add(arg.substring(3));	  	compilable	  [FE]  ComparisonFailure  	11	4	add
287	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(1));    tokens.add(arg.substring(3));  tokens.add(arg.substring(1));  tokens.add(arg.substring(4));  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	                tokens.add(arg.substring(1));        tokens.add(arg.substring(3));    tokens.add(arg.substring(1));  tokens.add(arg.substring(4));	  	compilable	  [FE]  ComparisonFailure  	11	4	add
288	[BUG]  [BUGGY]          tokens.add(arg.substring(1));    tokens.add(arg.substring(3));  tokens.add(arg.substring(1));  tokens.add(arg.substring(4));  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(1));    tokens.add(arg.substring(3));  tokens.add(arg.substring(1));  tokens.add(arg.substring(4));  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                tokens.add(arg.substring(1));        tokens.add(arg.substring(3));    tokens.add(arg.substring(1));  tokens.add(arg.substring(4));	  	compilable	  [FE]  ComparisonFailure  	11	4	add
289	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]            ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(1));    tokens.add(arg.substring(3));  tokens.add(arg.substring(1));  tokens.add(arg.substring(2));  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	                tokens.add(arg.substring(1));        tokens.add(arg.substring(3));    tokens.add(arg.substring(1));  tokens.add(arg.substring(2));	  	compilable	  [FE]  ComparisonFailure  	11	4	add
290	[BUG]  [BUGGY]          tokens.add(arg.substring(1));    tokens.add(arg.substring(3));  tokens.add(arg.substring(1));  tokens.add(arg.substring(2));  [FE]  ComparisonFailure  [FE]            ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(1));    tokens.add(arg.substring(3));  tokens.add(arg.substring(1));  tokens.add(arg.substring(2));  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                tokens.add(arg.substring(1));        tokens.add(arg.substring(3));    tokens.add(arg.substring(1));  tokens.add(arg.substring(2));	  	compilable	  [FE]  ComparisonFailure  	11	4	add
291	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(i    +    1));    if(options.hasOption(arg.substring(i  +  1)))  {  tokens.add(arg.substring(i  +  1));  }  else  {  tokens.add(arg.substring(i  +  1));  }  tokens.add(arg.substring(i  +  1));  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	                tokens.add(arg.substring(i        +        1));        if(options.hasOption(arg.substring(i    +    1)))    {    tokens.add(arg.substring(i    +    1));    }    else    {    tokens.add(arg.substring(i    +    1));    }    tokens.add(arg.substring(i  +  1));	  	compilable	  [FE]  ComparisonFailure  	89	4	add
292	[BUG]  [BUGGY]          tokens.add(arg.substring(i    +    1));    if(options.hasOption(arg.substring(i  +  1)))  {  tokens.add(arg.substring(i  +  1));  }  else  {  tokens.add(arg.substring(i  +  1));  }  tokens.add(arg.substring(i  +  1));  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(i    +    1));    if(options.hasOption(arg.substring(i  +  1)))  {  tokens.add(arg.substring(i  +  1));  }  else  {  tokens.add(arg.substring(i  +  1));  }  tokens.add(arg.substring(i  +  1));  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                tokens.add(arg.substring(i        +        1));        if(options.hasOption(arg.substring(i    +    1)))    {    tokens.add(arg.substring(i    +    1));    }    else    {    tokens.add(arg.substring(i    +    1));    }    tokens.add(arg.substring(i  +  1));	  	compilable	  [FE]  ComparisonFailure  	89	4	add
293	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(i    +    1));    if(options.hasOption(arg.substring(i  +  1)))  {  tokens.add(arg.substring(i  +  1));  }  else  {  tokens.add(arg.substring(i  +  1));  }  tokens.add(arg.substring(i  +  1));  if(options.hasOption(arg.substring(i  +  1)))  {  tokens.add(arg.substring(i  +  1));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	                tokens.add(arg.substring(i        +        1));        if(options.hasOption(arg.substring(i    +    1)))    {    tokens.add(arg.substring(i    +    1));    }    else    {    tokens.add(arg.substring(i    +    1));    }    tokens.add(arg.substring(i  +  1));  if(options.hasOption(arg.substring(i  +  1)))  {  tokens.add(arg.substring(i  +  1));  }	  	compilable	  [FE]  ComparisonFailure  	89	4	add
294	[BUG]  [BUGGY]          tokens.add(arg.substring(i    +    1));    if(options.hasOption(arg.substring(i  +  1)))  {  tokens.add(arg.substring(i  +  1));  }  else  {  tokens.add(arg.substring(i  +  1));  }  tokens.add(arg.substring(i  +  1));  if(options.hasOption(arg.substring(i  +  1)))  {  tokens.add(arg.substring(i  +  1));  }  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(i    +    1));    if(options.hasOption(arg.substring(i  +  1)))  {  tokens.add(arg.substring(i  +  1));  }  else  {  tokens.add(arg.substring(i  +  1));  }  tokens.add(arg.substring(i  +  1));  if(options.hasOption(arg.substring(i  +  1)))  {  tokens.add(arg.substring(i  +  1));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                tokens.add(arg.substring(i        +        1));        if(options.hasOption(arg.substring(i    +    1)))    {    tokens.add(arg.substring(i    +    1));    }    else    {    tokens.add(arg.substring(i    +    1));    }    tokens.add(arg.substring(i  +  1));  if(options.hasOption(arg.substring(i  +  1)))  {  tokens.add(arg.substring(i  +  1));  }	  	compilable	  [FE]  ComparisonFailure  	89	4	add
295	[BUG]  [BUGGY]          tokens.add(arg.substring(i    +    1));    if(options.hasOption(arg.substring(i  +  1)))  {  tokens.add(arg.substring(i  +  1));  }  else  {  tokens.add(arg.substring(i  +  1));  }  if(options.hasOption(arg.substring(i  +  1)))  {  tokens.add(arg.substring(i  +  1));  if(options.hasOption(arg.substring(i  +  1)))  {  tokens.add(arg.substring(i  +  1));  }  [CE]  'else'  without  'if'  [FE]        ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(i    +    1));    if(options.hasOption(arg.substring(i  +  1)))  {  tokens.add(arg.substring(i  +  1));  }  else  {  tokens.add(arg.substring(i  +  1));  }  if(options.hasOption(arg.substring(i  +  1)))  {  tokens.add(arg.substring(i  +  1));  if(options.hasOption(arg.substring(i  +  1)))  {  tokens.add(arg.substring(i  +  1));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                tokens.add(arg.substring(i        +        1));        if(options.hasOption(arg.substring(i    +    1)))    {    tokens.add(arg.substring(i    +    1));    }    else    {    tokens.add(arg.substring(i    +    1));    }    if(options.hasOption(arg.substring(i  +  1)))  {  tokens.add(arg.substring(i  +  1));  if(options.hasOption(arg.substring(i  +  1)))  {  tokens.add(arg.substring(i  +  1));  }	  	non-compiled	[CE]  'else'  without  'if'	89	None	add
296	[BUG]  [BUGGY]          tokens.add(arg.substring(i    +    1));    if(options.hasOption(arg.substring(i  +  1)))  {  tokens.add(arg.substring(i  +  1));  }  else  {  tokens.add(arg.substring(i  +  1));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  if(options.hasOption(arg.substring(i  +  1)))  {  tokens.add(arg.substring(i  +  1));  }  [CE]  'else'  without  'if'  [FE]          ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(i    +    1));    if(options.hasOption(arg.substring(i  +  1)))  {  tokens.add(arg.substring(i  +  1));  }  else  {  tokens.add(arg.substring(i  +  1));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  if(options.hasOption(arg.substring(i  +  1)))  {  tokens.add(arg.substring(i  +  1));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                tokens.add(arg.substring(i        +        1));        if(options.hasOption(arg.substring(i    +    1)))    {    tokens.add(arg.substring(i    +    1));    }    else    {    tokens.add(arg.substring(i    +    1));    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  if(options.hasOption(arg.substring(i  +  1)))  {  tokens.add(arg.substring(i  +  1));  }	  	non-compiled	[CE]  'else'  without  'if'	89	None	add
297	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]            ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(i    +    1));    if(options.hasOption(arg.substring(i  +  1)))  {  tokens.add(arg.substring(i  +  1));  }  else  {  tokens.add(arg.substring(i  +  1));  }  tokens.add(arg.substring(i  +  1));  if(options.hasOption(arg.substring(i  +  1)))  {  tokens.add(arg.substring(i  +  2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	                tokens.add(arg.substring(i        +        1));        if(options.hasOption(arg.substring(i    +    1)))    {    tokens.add(arg.substring(i    +    1));    }    else    {    tokens.add(arg.substring(i    +    1));    }    tokens.add(arg.substring(i  +  1));  if(options.hasOption(arg.substring(i  +  1)))  {  tokens.add(arg.substring(i  +  2));  }	  	compilable	  [FE]  ComparisonFailure  	89	4	add
298	[BUG]  [BUGGY]          tokens.add(arg.substring(i    +    1));    if(options.hasOption(arg.substring(i  +  1)))  {  tokens.add(arg.substring(i  +  1));  }  else  {  tokens.add(arg.substring(i  +  1));  }  tokens.add(arg.substring(i  +  1));  if(options.hasOption(arg.substring(i  +  1)))  {  tokens.add(arg.substring(i  +  2));  }  [FE]  ComparisonFailure  [FE]            ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(i    +    1));    if(options.hasOption(arg.substring(i  +  1)))  {  tokens.add(arg.substring(i  +  1));  }  else  {  tokens.add(arg.substring(i  +  1));  }  tokens.add(arg.substring(i  +  1));  if(options.hasOption(arg.substring(i  +  1)))  {  tokens.add(arg.substring(i  +  2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                tokens.add(arg.substring(i        +        1));        if(options.hasOption(arg.substring(i    +    1)))    {    tokens.add(arg.substring(i    +    1));    }    else    {    tokens.add(arg.substring(i    +    1));    }    tokens.add(arg.substring(i  +  1));  if(options.hasOption(arg.substring(i  +  1)))  {  tokens.add(arg.substring(i  +  2));  }	  	compilable	  [FE]  ComparisonFailure  	89	4	add
299	[BUG]  [BUGGY]  tokens.add(arg.substring(2,  1));  [CE]  'else'  without  'if'  [FE]            ComparisonFailure      [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]  tokens.add(arg.substring(2,  1));  [BUGGY]      }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	tokens.add(arg.substring(2,  1));	  tokens.add(arg.substring(1,    1));    	non-compiled	[CE]  'else'  without  'if'	81	None	replace
300	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(2));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(2));  }  tokens.add(arg.substring(2));  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	                tokens.add(arg.substring(2));        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(2));    }    tokens.add(arg.substring(2));	  	compilable	  [FE]  ComparisonFailure  	50	3	add
301	[BUG]  [BUGGY]          tokens.add(arg.substring(2));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(2));  }  tokens.add(arg.substring(2));  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(2));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(2));  }  tokens.add(arg.substring(2));  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                tokens.add(arg.substring(2));        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(2));    }    tokens.add(arg.substring(2));	  	compilable	  [FE]  ComparisonFailure  	50	3	add
302	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(2));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(2));  }  tokens.add(arg.substring(2));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	                tokens.add(arg.substring(2));        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(2));    }    tokens.add(arg.substring(2));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(2));  }	  	compilable	  [FE]  ComparisonFailure  	50	3	add
303	[BUG]  [BUGGY]          tokens.add(arg.substring(2));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(2));  }  tokens.add(arg.substring(2));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(2));  }  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(2));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(2));  }  tokens.add(arg.substring(2));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                tokens.add(arg.substring(2));        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(2));    }    tokens.add(arg.substring(2));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(2));  }	  	compilable	  [FE]  ComparisonFailure  	50	3	add
304	[BUG]  [BUGGY]          tokens.add(arg.substring(2));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(2));  }  tokens.add(arg.substring(2));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(2));  [CE]  'else'  without  'if'  [FE]        ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(2));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(2));  }  tokens.add(arg.substring(2));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(2));  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                tokens.add(arg.substring(2));        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(2));    }    tokens.add(arg.substring(2));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(2));	  	non-compiled	[CE]  'else'  without  'if'	50	None	add
305	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(2));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(2));  }  tokens.add(arg.substring(2));  if(options.hasOption(arg.substring(2)))  {  tokens.add(arg.substring(2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	                tokens.add(arg.substring(2));        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(2));    }    tokens.add(arg.substring(2));  if(options.hasOption(arg.substring(2)))  {  tokens.add(arg.substring(2));  }	  	compilable	  [FE]  ComparisonFailure  	50	3	add
306	[BUG]  [BUGGY]          tokens.add(arg.substring(2));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(2));  }  tokens.add(arg.substring(2));  if(options.hasOption(arg.substring(2)))  {  tokens.add(arg.substring(2));  }  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(2));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(2));  }  tokens.add(arg.substring(2));  if(options.hasOption(arg.substring(2)))  {  tokens.add(arg.substring(2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                tokens.add(arg.substring(2));        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(2));    }    tokens.add(arg.substring(2));  if(options.hasOption(arg.substring(2)))  {  tokens.add(arg.substring(2));  }	  	compilable	  [FE]  ComparisonFailure  	50	3	add
307	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]            ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(2));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(2));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	                tokens.add(arg.substring(2));        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(2));    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(2));  }	  	compilable	  [FE]  ComparisonFailure  	50	3	add
308	[BUG]  [BUGGY]          tokens.add(arg.substring(2));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(2));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(2));  }  [FE]  ComparisonFailure  [FE]            ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(2));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(2));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                tokens.add(arg.substring(2));        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(2));    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(2));  }	  	compilable	  [FE]  ComparisonFailure  	50	3	add
309	[BUG]  [BUGGY]  [FE]  MissingArgumentException  [FE]    MissingArgumentException    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    }    if(options.hasOption(arg.substring(0,  1)))  {  tokens.add(arg.substring(0,  2));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	                if(options.hasOption(arg.substring(0,        2)))        {        tokens.add(arg.substring(0,        2));        }        if(options.hasOption(arg.substring(0,    1)))    {    tokens.add(arg.substring(0,    2));    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }	  	compilable	  [FE]  MissingArgumentException  	75	4	add
310	[BUG]  [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    }    if(options.hasOption(arg.substring(0,  1)))  {  tokens.add(arg.substring(0,  2));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  [FE]  MissingArgumentException  [FE]    MissingArgumentException    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    }    if(options.hasOption(arg.substring(0,  1)))  {  tokens.add(arg.substring(0,  2));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                if(options.hasOption(arg.substring(0,        2)))        {        tokens.add(arg.substring(0,        2));        }        if(options.hasOption(arg.substring(0,    1)))    {    tokens.add(arg.substring(0,    2));    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }	  	compilable	  [FE]  MissingArgumentException  	75	4	add
311	[BUG]  [BUGGY]  [FE]  MissingArgumentException  [FE]      MissingArgumentException    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    }    if(options.hasOption(arg.substring(0,  1)))  {  tokens.add(arg.substring(0,  2));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	                if(options.hasOption(arg.substring(0,        2)))        {        tokens.add(arg.substring(0,        2));        }        if(options.hasOption(arg.substring(0,    1)))    {    tokens.add(arg.substring(0,    2));    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }	  	compilable	  [FE]  MissingArgumentException  	75	4	add
312	[BUG]  [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    }    if(options.hasOption(arg.substring(0,  1)))  {  tokens.add(arg.substring(0,  2));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  [FE]  MissingArgumentException  [FE]      MissingArgumentException    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    }    if(options.hasOption(arg.substring(0,  1)))  {  tokens.add(arg.substring(0,  2));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                if(options.hasOption(arg.substring(0,        2)))        {        tokens.add(arg.substring(0,        2));        }        if(options.hasOption(arg.substring(0,    1)))    {    tokens.add(arg.substring(0,    2));    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }	  	compilable	  [FE]  MissingArgumentException  	75	4	add
313	[BUG]  [BUGGY]  [FE]  MissingArgumentException  [FE]        MissingArgumentException    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    }    if(options.hasOption(arg.substring(0,  1)))  {  tokens.add(arg.substring(0,  2));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  if(options.hasOption(arg.substring(0,  1)))  {  tokens.add(arg.substring(0,  2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	                if(options.hasOption(arg.substring(0,        2)))        {        tokens.add(arg.substring(0,        2));        }        if(options.hasOption(arg.substring(0,    1)))    {    tokens.add(arg.substring(0,    2));    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  if(options.hasOption(arg.substring(0,  1)))  {  tokens.add(arg.substring(0,  2));  }	  	compilable	  [FE]  MissingArgumentException  	75	4	add
314	[BUG]  [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    }    if(options.hasOption(arg.substring(0,  1)))  {  tokens.add(arg.substring(0,  2));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  if(options.hasOption(arg.substring(0,  1)))  {  tokens.add(arg.substring(0,  2));  }  [FE]  MissingArgumentException  [FE]        MissingArgumentException    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    }    if(options.hasOption(arg.substring(0,  1)))  {  tokens.add(arg.substring(0,  2));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  if(options.hasOption(arg.substring(0,  1)))  {  tokens.add(arg.substring(0,  2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                if(options.hasOption(arg.substring(0,        2)))        {        tokens.add(arg.substring(0,        2));        }        if(options.hasOption(arg.substring(0,    1)))    {    tokens.add(arg.substring(0,    2));    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  if(options.hasOption(arg.substring(0,  1)))  {  tokens.add(arg.substring(0,  2));  }	  	compilable	  [FE]  MissingArgumentException  	75	4	add
315	[BUG]  [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    }    if(options.hasOption(arg.substring(0,  1)))  {  tokens.add(arg.substring(0,  2));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(  [CE]  ')'  expected  [FE]          MissingArgumentException    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    }    if(options.hasOption(arg.substring(0,  1)))  {  tokens.add(arg.substring(0,  2));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                if(options.hasOption(arg.substring(0,        2)))        {        tokens.add(arg.substring(0,        2));        }        if(options.hasOption(arg.substring(0,    1)))    {    tokens.add(arg.substring(0,    2));    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(	  	non-compiled	[CE]  ')'  expected	75	None	add
316	[BUG]  [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    }    if(options.hasOption(arg.substring(0,  1)))  {  tokens.add(arg.substring(0,  2));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring  [CE]  ')'  expected  [FE]            MissingArgumentException    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    }    if(options.hasOption(arg.substring(0,  1)))  {  tokens.add(arg.substring(0,  2));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                if(options.hasOption(arg.substring(0,        2)))        {        tokens.add(arg.substring(0,        2));        }        if(options.hasOption(arg.substring(0,    1)))    {    tokens.add(arg.substring(0,    2));    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring	  	non-compiled	[CE]  ')'  expected	75	None	add
317	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(1,    2));    }    if(options.hasOption(arg.substring(1,  2)))  {  tokens.add(arg.substring(1,  2));  }  if(options.hasOption(arg.substring(1,  2)))  {  tokens.add(arg.substring(1,  2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	                if(options.hasOption(arg.substring(0,        2)))        {        tokens.add(arg.substring(1,        2));        }        if(options.hasOption(arg.substring(1,    2)))    {    tokens.add(arg.substring(1,    2));    }    if(options.hasOption(arg.substring(1,  2)))  {  tokens.add(arg.substring(1,  2));  }	  	compilable	  [FE]  ComparisonFailure  	43	4	add
318	[BUG]  [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(1,    2));    }    if(options.hasOption(arg.substring(1,  2)))  {  tokens.add(arg.substring(1,  2));  }  if(options.hasOption(arg.substring(1,  2)))  {  tokens.add(arg.substring(1,  2));  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(1,    2));    }    if(options.hasOption(arg.substring(1,  2)))  {  tokens.add(arg.substring(1,  2));  }  if(options.hasOption(arg.substring(1,  2)))  {  tokens.add(arg.substring(1,  2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                if(options.hasOption(arg.substring(0,        2)))        {        tokens.add(arg.substring(1,        2));        }        if(options.hasOption(arg.substring(1,    2)))    {    tokens.add(arg.substring(1,    2));    }    if(options.hasOption(arg.substring(1,  2)))  {  tokens.add(arg.substring(1,  2));  }	  	compilable	  [FE]  ComparisonFailure  	43	4	add
319	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(1,    2));    }    if(options.hasOption(arg.substring(1,  2)))  {  tokens.add(arg.substring(1,  2));  }  if(options.hasOption(arg.substring(1,  2)))  {  tokens.add(arg.substring(1,  2));  }  if(options.hasOption(arg.substring(1,  2)))  {  tokens.add(arg.substring(1,  2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	                if(options.hasOption(arg.substring(0,        2)))        {        tokens.add(arg.substring(1,        2));        }        if(options.hasOption(arg.substring(1,    2)))    {    tokens.add(arg.substring(1,    2));    }    if(options.hasOption(arg.substring(1,  2)))  {  tokens.add(arg.substring(1,  2));  }  if(options.hasOption(arg.substring(1,  2)))  {  tokens.add(arg.substring(1,  2));  }	  	compilable	  [FE]  ComparisonFailure  	43	4	add
320	[BUG]  [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(1,    2));    }    if(options.hasOption(arg.substring(1,  2)))  {  tokens.add(arg.substring(1,  2));  }  if(options.hasOption(arg.substring(1,  2)))  {  tokens.add(arg.substring(1,  2));  }  if(options.hasOption(arg.substring(1,  2)))  {  tokens.add(arg.substring(1,  2));  }  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(1,    2));    }    if(options.hasOption(arg.substring(1,  2)))  {  tokens.add(arg.substring(1,  2));  }  if(options.hasOption(arg.substring(1,  2)))  {  tokens.add(arg.substring(1,  2));  }  if(options.hasOption(arg.substring(1,  2)))  {  tokens.add(arg.substring(1,  2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                if(options.hasOption(arg.substring(0,        2)))        {        tokens.add(arg.substring(1,        2));        }        if(options.hasOption(arg.substring(1,    2)))    {    tokens.add(arg.substring(1,    2));    }    if(options.hasOption(arg.substring(1,  2)))  {  tokens.add(arg.substring(1,  2));  }  if(options.hasOption(arg.substring(1,  2)))  {  tokens.add(arg.substring(1,  2));  }	  	compilable	  [FE]  ComparisonFailure  	43	4	add
321	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(1,    2));    }    if(options.hasOption(arg.substring(1,  2)))  {  tokens.add(arg.substring(1,  2));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1,  2));  }  if(options.hasOption(arg.substring(1,  2)))  {  tokens.add(arg.substring(1,  2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	                if(options.hasOption(arg.substring(0,        2)))        {        tokens.add(arg.substring(1,        2));        }        if(options.hasOption(arg.substring(1,    2)))    {    tokens.add(arg.substring(1,    2));    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1,  2));  }  if(options.hasOption(arg.substring(1,  2)))  {  tokens.add(arg.substring(1,  2));  }	  	compilable	  [FE]  ComparisonFailure  	43	4	add
322	[BUG]  [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(1,    2));    }    if(options.hasOption(arg.substring(1,  2)))  {  tokens.add(arg.substring(1,  2));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1,  2));  }  if(options.hasOption(arg.substring(1,  2)))  {  tokens.add(arg.substring(1,  2));  }  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(1,    2));    }    if(options.hasOption(arg.substring(1,  2)))  {  tokens.add(arg.substring(1,  2));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1,  2));  }  if(options.hasOption(arg.substring(1,  2)))  {  tokens.add(arg.substring(1,  2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                if(options.hasOption(arg.substring(0,        2)))        {        tokens.add(arg.substring(1,        2));        }        if(options.hasOption(arg.substring(1,    2)))    {    tokens.add(arg.substring(1,    2));    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1,  2));  }  if(options.hasOption(arg.substring(1,  2)))  {  tokens.add(arg.substring(1,  2));  }	  	compilable	  [FE]  ComparisonFailure  	43	4	add
323	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(1,    2));    }    if(options.hasOption(arg.substring(1,  2)))  {  tokens.add(arg.substring(1,  2));  }  if(options.hasOption(arg.substring(1,  2)))  {  tokens.add(arg.substring(1,  2));  }  else  if(options.hasOption(arg.substring(1,  2)))  {  tokens.add(arg.substring(1,  2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	                if(options.hasOption(arg.substring(0,        2)))        {        tokens.add(arg.substring(1,        2));        }        if(options.hasOption(arg.substring(1,    2)))    {    tokens.add(arg.substring(1,    2));    }    if(options.hasOption(arg.substring(1,  2)))  {  tokens.add(arg.substring(1,  2));  }  else  if(options.hasOption(arg.substring(1,  2)))  {  tokens.add(arg.substring(1,  2));  }	  	compilable	  [FE]  ComparisonFailure  	43	4	add
324	[BUG]  [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(1,    2));    }    if(options.hasOption(arg.substring(1,  2)))  {  tokens.add(arg.substring(1,  2));  }  if(options.hasOption(arg.substring(1,  2)))  {  tokens.add(arg.substring(1,  2));  }  else  if(options.hasOption(arg.substring(1,  2)))  {  tokens.add(arg.substring(1,  2));  }  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(1,    2));    }    if(options.hasOption(arg.substring(1,  2)))  {  tokens.add(arg.substring(1,  2));  }  if(options.hasOption(arg.substring(1,  2)))  {  tokens.add(arg.substring(1,  2));  }  else  if(options.hasOption(arg.substring(1,  2)))  {  tokens.add(arg.substring(1,  2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                if(options.hasOption(arg.substring(0,        2)))        {        tokens.add(arg.substring(1,        2));        }        if(options.hasOption(arg.substring(1,    2)))    {    tokens.add(arg.substring(1,    2));    }    if(options.hasOption(arg.substring(1,  2)))  {  tokens.add(arg.substring(1,  2));  }  else  if(options.hasOption(arg.substring(1,  2)))  {  tokens.add(arg.substring(1,  2));  }	  	compilable	  [FE]  ComparisonFailure  	43	4	add
325	[BUG]  [BUGGY]  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(2  +  1));  }  [CE]  'else'  without  'if'  [FE]    ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(2  +  1));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(2  +  1));  }	          tokens.add(arg.substring(2));    if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(2    +    1));    }    	non-compiled	[CE]  'else'  without  'if'	157	None	replace
326	[BUG]  [BUGGY]  else  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(2  +  1));  }  [CE]  'else'  without  'if'  [FE]      ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]  else  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(2  +  1));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	else  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(2  +  1));  }	          tokens.add(arg.substring(2));    if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(2    +    1));    }    	non-compiled	[CE]  'else'  without  'if'	157	None	replace
327	[BUG]  [BUGGY]  else  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(2,  2));  }  [CE]  'else'  without  'if'  [FE]        ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]  else  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(2,  2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	else  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(2,  2));  }	          tokens.add(arg.substring(2));    if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(2    +    1));    }    	non-compiled	[CE]  'else'  without  'if'	157	None	replace
328	[BUG]  [BUGGY]  else  if(options.hasOption(arg.substring(1,  2)))  {  tokens.add(arg.substring(0,  2));  }  [CE]  'else'  without  'if'  [FE]    ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]  else  if(options.hasOption(arg.substring(1,  2)))  {  tokens.add(arg.substring(0,  2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	else  if(options.hasOption(arg.substring(1,  2)))  {  tokens.add(arg.substring(0,  2));  }	          tokens.add(arg.substring(i));    if(options.hasOption(arg.substring(i)))    {    tokens.add(arg.substring(i));    }    	non-compiled	[CE]  'else'  without  'if'	25	None	replace
329	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(1));    tokens.add(arg.substring(4));  tokens.add(arg.substring(1));  tokens.add(arg.substring(4));  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	                tokens.add(arg.substring(1));        tokens.add(arg.substring(4));    tokens.add(arg.substring(1));  tokens.add(arg.substring(4));	  	compilable	  [FE]  ComparisonFailure  	13	4	add
330	[BUG]  [BUGGY]          tokens.add(arg.substring(1));    tokens.add(arg.substring(4));  tokens.add(arg.substring(1));  tokens.add(arg.substring(4));  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(1));    tokens.add(arg.substring(4));  tokens.add(arg.substring(1));  tokens.add(arg.substring(4));  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                tokens.add(arg.substring(1));        tokens.add(arg.substring(4));    tokens.add(arg.substring(1));  tokens.add(arg.substring(4));	  	compilable	  [FE]  ComparisonFailure  	13	4	add
331	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(1));    tokens.add(arg.substring(4));  tokens.add(arg.substring(2));  tokens.add(arg.substring(4));  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	                tokens.add(arg.substring(1));        tokens.add(arg.substring(4));    tokens.add(arg.substring(2));  tokens.add(arg.substring(4));	  	compilable	  [FE]  ComparisonFailure  	13	4	add
332	[BUG]  [BUGGY]          tokens.add(arg.substring(1));    tokens.add(arg.substring(4));  tokens.add(arg.substring(2));  tokens.add(arg.substring(4));  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(1));    tokens.add(arg.substring(4));  tokens.add(arg.substring(2));  tokens.add(arg.substring(4));  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                tokens.add(arg.substring(1));        tokens.add(arg.substring(4));    tokens.add(arg.substring(2));  tokens.add(arg.substring(4));	  	compilable	  [FE]  ComparisonFailure  	13	4	add
333	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(1));    tokens.add(arg.substring(4));  tokens.add(arg.substring(3));  tokens.add(arg.substring(4));  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	                tokens.add(arg.substring(1));        tokens.add(arg.substring(4));    tokens.add(arg.substring(3));  tokens.add(arg.substring(4));	  	compilable	  [FE]  ComparisonFailure  	13	4	add
334	[BUG]  [BUGGY]          tokens.add(arg.substring(1));    tokens.add(arg.substring(4));  tokens.add(arg.substring(3));  tokens.add(arg.substring(4));  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(1));    tokens.add(arg.substring(4));  tokens.add(arg.substring(3));  tokens.add(arg.substring(4));  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                tokens.add(arg.substring(1));        tokens.add(arg.substring(4));    tokens.add(arg.substring(3));  tokens.add(arg.substring(4));	  	compilable	  [FE]  ComparisonFailure  	13	4	add
335	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(1));    tokens.add(arg.substring(4));  tokens.add(arg.substring(1));  tokens.add(arg.substring(3));  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	                tokens.add(arg.substring(1));        tokens.add(arg.substring(4));    tokens.add(arg.substring(1));  tokens.add(arg.substring(3));	  	compilable	  [FE]  ComparisonFailure  	13	4	add
336	[BUG]  [BUGGY]          tokens.add(arg.substring(1));    tokens.add(arg.substring(4));  tokens.add(arg.substring(1));  tokens.add(arg.substring(3));  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(1));    tokens.add(arg.substring(4));  tokens.add(arg.substring(1));  tokens.add(arg.substring(3));  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                tokens.add(arg.substring(1));        tokens.add(arg.substring(4));    tokens.add(arg.substring(1));  tokens.add(arg.substring(3));	  	compilable	  [FE]  ComparisonFailure  	13	4	add
337	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]            ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(1));    tokens.add(arg.substring(4));  tokens.add(arg.substring(1));  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	                tokens.add(arg.substring(1));        tokens.add(arg.substring(4));    tokens.add(arg.substring(1));	  	compilable	  [FE]  ComparisonFailure  	13	4	add
338	[BUG]  [BUGGY]          tokens.add(arg.substring(1));    tokens.add(arg.substring(4));  tokens.add(arg.substring(1));  [FE]  ComparisonFailure  [FE]            ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(1));    tokens.add(arg.substring(4));  tokens.add(arg.substring(1));  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                tokens.add(arg.substring(1));        tokens.add(arg.substring(4));    tokens.add(arg.substring(1));	  	compilable	  [FE]  ComparisonFailure  	13	4	add
339	[BUG]  [BUGGY]  else  if(options.hasOption(arg.substring(0,  2))  ||  options.hasOption(arg.substring(0,  2))  {  tokens.add(arg.substring(1));  }  [CE]  'else'  without  'if'  [FE]          ComparisonFailure      [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]  else  if(options.hasOption(arg.substring(0,  2))  ||  options.hasOption(arg.substring(0,  2))  {  tokens.add(arg.substring(1));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	else  if(options.hasOption(arg.substring(0,  2))  ||  options.hasOption(arg.substring(0,  2))  {  tokens.add(arg.substring(1));  }	  else    if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(1));    }    	non-compiled	[CE]  'else'  without  'if'	78	None	replace
340	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(1));    tokens.add(arg.substring(1));  tokens.add(arg.substring(1));  tokens.add(arg.substring(1));  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	                tokens.add(arg.substring(1));        tokens.add(arg.substring(1));    tokens.add(arg.substring(1));  tokens.add(arg.substring(1));	  	compilable	  [FE]  ComparisonFailure  	7	4	add
341	[BUG]  [BUGGY]          tokens.add(arg.substring(1));    tokens.add(arg.substring(1));  tokens.add(arg.substring(1));  tokens.add(arg.substring(1));  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(1));    tokens.add(arg.substring(1));  tokens.add(arg.substring(1));  tokens.add(arg.substring(1));  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                tokens.add(arg.substring(1));        tokens.add(arg.substring(1));    tokens.add(arg.substring(1));  tokens.add(arg.substring(1));	  	compilable	  [FE]  ComparisonFailure  	7	4	add
342	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(1));    tokens.add(arg.substring(1));  tokens.add(arg.substring(2));  tokens.add(arg.substring(2));  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	                tokens.add(arg.substring(1));        tokens.add(arg.substring(1));    tokens.add(arg.substring(2));  tokens.add(arg.substring(2));	  	compilable	  [FE]  ComparisonFailure  	7	4	add
343	[BUG]  [BUGGY]          tokens.add(arg.substring(1));    tokens.add(arg.substring(1));  tokens.add(arg.substring(2));  tokens.add(arg.substring(2));  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(1));    tokens.add(arg.substring(1));  tokens.add(arg.substring(2));  tokens.add(arg.substring(2));  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                tokens.add(arg.substring(1));        tokens.add(arg.substring(1));    tokens.add(arg.substring(2));  tokens.add(arg.substring(2));	  	compilable	  [FE]  ComparisonFailure  	7	4	add
344	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(1));    tokens.add(arg.substring(1));  tokens.add(arg.substring(1));  tokens.add(arg.substring(2));  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	                tokens.add(arg.substring(1));        tokens.add(arg.substring(1));    tokens.add(arg.substring(1));  tokens.add(arg.substring(2));	  	compilable	  [FE]  ComparisonFailure  	7	4	add
345	[BUG]  [BUGGY]          tokens.add(arg.substring(1));    tokens.add(arg.substring(1));  tokens.add(arg.substring(1));  tokens.add(arg.substring(2));  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(1));    tokens.add(arg.substring(1));  tokens.add(arg.substring(1));  tokens.add(arg.substring(2));  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                tokens.add(arg.substring(1));        tokens.add(arg.substring(1));    tokens.add(arg.substring(1));  tokens.add(arg.substring(2));	  	compilable	  [FE]  ComparisonFailure  	7	4	add
346	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(1));    tokens.add(arg.substring(1));  tokens.add(arg.substring(2));  tokens.add(arg.substring(1));  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	                tokens.add(arg.substring(1));        tokens.add(arg.substring(1));    tokens.add(arg.substring(2));  tokens.add(arg.substring(1));	  	compilable	  [FE]  ComparisonFailure  	7	4	add
347	[BUG]  [BUGGY]          tokens.add(arg.substring(1));    tokens.add(arg.substring(1));  tokens.add(arg.substring(2));  tokens.add(arg.substring(1));  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(1));    tokens.add(arg.substring(1));  tokens.add(arg.substring(2));  tokens.add(arg.substring(1));  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                tokens.add(arg.substring(1));        tokens.add(arg.substring(1));    tokens.add(arg.substring(2));  tokens.add(arg.substring(1));	  	compilable	  [FE]  ComparisonFailure  	7	4	add
348	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]            ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(1));    tokens.add(arg.substring(1));  tokens.add(arg.substring(1));  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	                tokens.add(arg.substring(1));        tokens.add(arg.substring(1));    tokens.add(arg.substring(1));	  	compilable	  [FE]  ComparisonFailure  	7	4	add
349	[BUG]  [BUGGY]          tokens.add(arg.substring(1));    tokens.add(arg.substring(1));  tokens.add(arg.substring(1));  [FE]  ComparisonFailure  [FE]            ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(1));    tokens.add(arg.substring(1));  tokens.add(arg.substring(1));  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                tokens.add(arg.substring(1));        tokens.add(arg.substring(1));    tokens.add(arg.substring(1));	  	compilable	  [FE]  ComparisonFailure  	7	4	add
350	[BUG]  [BUGGY]  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(arg.substring(2,  2));  }  [CE]  'else'  without  'if'  [FE]    MissingArgumentException    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(arg.substring(2,  2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(arg.substring(2,  2));  }	          tokens.add(arg.substring(0,    2));    tokens.add(arg.substring(2,    2));    	non-compiled	[CE]  'else'  without  'if'	37	None	replace
351	[BUG]  [BUGGY]  else  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(2,  2));  }  [CE]  'else'  without  'if'  [FE]      MissingArgumentException    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]  else  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(2,  2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	else  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(2,  2));  }	          tokens.add(arg.substring(0,    2));    tokens.add(arg.substring(2,    2));    	non-compiled	[CE]  'else'  without  'if'	37	None	replace
352	[BUG]  [BUGGY]  timeout  [FE]              MissingArgumentException      [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    }    while(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  while(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	                if(options.hasOption(arg.substring(0,        2)))        {        tokens.add(arg.substring(0,        2));        }        while(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  while(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }	  timeout    	compilable	timeout	73	1	add
353	[BUG]  [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    }    while(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  while(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  timeout  [FE]              MissingArgumentException      [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    }    while(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  while(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                if(options.hasOption(arg.substring(0,        2)))        {        tokens.add(arg.substring(0,        2));        }        while(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  while(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }	  timeout    	compilable	timeout	73	1	add
354	[BUG]  [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    }    while(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  while(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(  [CE]  ')'  expected  [FE]                MissingArgumentException      [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    }    while(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  while(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                if(options.hasOption(arg.substring(0,        2)))        {        tokens.add(arg.substring(0,        2));        }        while(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  while(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(	  timeout    	non-compiled	[CE]  ')'  expected	73	None	add
355	[BUG]  [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    }    while(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  while(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring  [CE]  ')'  expected  [FE]                  MissingArgumentException      [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    }    while(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  while(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                if(options.hasOption(arg.substring(0,        2)))        {        tokens.add(arg.substring(0,        2));        }        while(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  while(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring	  timeout    	non-compiled	[CE]  ')'  expected	73	None	add
356	[BUG]  [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    }    while(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  while(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0  [CE]  ')'  expected  [FE]                    MissingArgumentException      [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    }    while(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  while(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                if(options.hasOption(arg.substring(0,        2)))        {        tokens.add(arg.substring(0,        2));        }        while(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  while(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0	  timeout    	non-compiled	[CE]  ')'  expected	73	None	add
357	[BUG]  [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    }    while(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  while(options.hasOption(arg.substring(0,  2)))  {  tokens  [CE]  ';'  expected  [FE]                      MissingArgumentException      [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    }    while(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  while(options.hasOption(arg.substring(0,  2)))  {  tokens  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                if(options.hasOption(arg.substring(0,        2)))        {        tokens.add(arg.substring(0,        2));        }        while(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  while(options.hasOption(arg.substring(0,  2)))  {  tokens	  timeout    	non-compiled	[CE]  ';'  expected	73	None	add
358	[BUG]  [BUGGY]  else  if(options.hasOption(arg.substring(0,  2))  ||  options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  [CE]  'else'  without  'if'  [FE]    ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]  else  if(options.hasOption(arg.substring(0,  2))  ||  options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	else  if(options.hasOption(arg.substring(0,  2))  ||  options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }	          tokens.add(arg.substring(i    +    1));    if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(i    +    1));    }    	non-compiled	[CE]  'else'  without  'if'	92	None	replace
359	[BUG]  [BUGGY]          tokens.add(arg.substring(i));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i));  }  else  {  tokens.add(opt);  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i));  }  [CE]  'else'  without  'if'  [FE]    UnrecognizedOptionException    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(i));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i));  }  else  {  tokens.add(opt);  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                tokens.add(arg.substring(i));        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(i));    }    else    {    tokens.add(opt);    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i));  }	  	non-compiled	[CE]  'else'  without  'if'	118	None	add
360	[BUG]  [BUGGY]  [FE]  UnrecognizedOptionException  [FE]      UnrecognizedOptionException    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(i));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i));  }  else  {  tokens.add(opt);  }  tokens.add(arg.substring(i));  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	                tokens.add(arg.substring(i));        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(i));    }    else    {    tokens.add(opt);    }    tokens.add(arg.substring(i));	  	compilable	  [FE]  UnrecognizedOptionException  	118	4	add
361	[BUG]  [BUGGY]          tokens.add(arg.substring(i));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i));  }  else  {  tokens.add(opt);  }  tokens.add(arg.substring(i));  [FE]  UnrecognizedOptionException  [FE]      UnrecognizedOptionException    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(i));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i));  }  else  {  tokens.add(opt);  }  tokens.add(arg.substring(i));  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                tokens.add(arg.substring(i));        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(i));    }    else    {    tokens.add(opt);    }    tokens.add(arg.substring(i));	  	compilable	  [FE]  UnrecognizedOptionException  	118	4	add
362	[BUG]  [BUGGY]  [FE]  UnrecognizedOptionException  [FE]        UnrecognizedOptionException    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(i));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i));  }  else  {  tokens.add(opt);  }  tokens.add(arg.substring(i));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	                tokens.add(arg.substring(i));        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(i));    }    else    {    tokens.add(opt);    }    tokens.add(arg.substring(i));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i));  }	  	compilable	  [FE]  UnrecognizedOptionException  	118	4	add
363	[BUG]  [BUGGY]          tokens.add(arg.substring(i));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i));  }  else  {  tokens.add(opt);  }  tokens.add(arg.substring(i));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i));  }  [FE]  UnrecognizedOptionException  [FE]        UnrecognizedOptionException    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(i));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i));  }  else  {  tokens.add(opt);  }  tokens.add(arg.substring(i));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                tokens.add(arg.substring(i));        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(i));    }    else    {    tokens.add(opt);    }    tokens.add(arg.substring(i));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i));  }	  	compilable	  [FE]  UnrecognizedOptionException  	118	4	add
364	[BUG]  [BUGGY]          tokens.add(arg.substring(i));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i));  }  else  {  tokens.add(opt);  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(2));  }  [CE]  'else'  without  'if'  [FE]          UnrecognizedOptionException    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(i));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i));  }  else  {  tokens.add(opt);  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                tokens.add(arg.substring(i));        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(i));    }    else    {    tokens.add(opt);    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(2));  }	  	non-compiled	[CE]  'else'  without  'if'	118	None	add
365	[BUG]  [BUGGY]          tokens.add(arg.substring(i));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i));  }  else  {  tokens.add(opt);  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  2));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  2));  }  [CE]  'else'  without  'if'  [FE]            UnrecognizedOptionException    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(i));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i));  }  else  {  tokens.add(opt);  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  2));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                tokens.add(arg.substring(i));        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(i));    }    else    {    tokens.add(opt);    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  2));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  2));  }	  	non-compiled	[CE]  'else'  without  'if'	118	None	add
366	[BUG]  [BUGGY]  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(2,  2));  }  [CE]  'else'  without  'if'  [FE]    ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(2,  2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(2,  2));  }	          tokens.add(arg.substring(2));    if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(2,    2));    }    	non-compiled	[CE]  'else'  without  'if'	55	None	replace
367	[BUG]  [BUGGY]  else  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1,  2));  }  [CE]  'else'  without  'if'  [FE]      ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]  else  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1,  2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	else  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1,  2));  }	          tokens.add(arg.substring(2));    if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(2,    2));    }    	non-compiled	[CE]  'else'  without  'if'	55	None	replace
368	[BUG]  [BUGGY]  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1));  tokens.add(arg.substring(1));  }  [CE]  'else'  without  'if'  [FE]                ComparisonFailure      [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1));  tokens.add(arg.substring(1));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1));  tokens.add(arg.substring(1));  }	          tokens.add(arg.substring(1));    tokens.add(arg.substring(    1);    	non-compiled	[CE]  'else'  without  'if'	15	None	replace
369	[BUG]  [BUGGY]  else  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1));  tokens.add(arg.substring(1));  }  [CE]  'else'  without  'if'  [FE]                  ComparisonFailure      [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]  else  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1));  tokens.add(arg.substring(1));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	else  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1));  tokens.add(arg.substring(1));  }	          tokens.add(arg.substring(1));    tokens.add(arg.substring(    1);    	non-compiled	[CE]  'else'  without  'if'	15	None	replace
370	[BUG]  [BUGGY]  if(options.hasOption(arg.substring(1,  2)))  {  tokens.add(arg.substring(1));  tokens.add(arg.substring(1));  }  [CE]  'else'  without  'if'  [FE]                    ComparisonFailure      [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]  if(options.hasOption(arg.substring(1,  2)))  {  tokens.add(arg.substring(1));  tokens.add(arg.substring(1));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	if(options.hasOption(arg.substring(1,  2)))  {  tokens.add(arg.substring(1));  tokens.add(arg.substring(1));  }	          tokens.add(arg.substring(1));    tokens.add(arg.substring(    1);    	non-compiled	[CE]  'else'  without  'if'	15	None	replace
371	[BUG]  [BUGGY]  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  3);  }  [CE]  ')'  expected  [FE]        MissingArgumentException      [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  3);  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  3);  }	  tokens.add(arg.substring(0,    3));    	non-compiled	[CE]  ')'  expected	68	None	replace
372	[BUG]  [BUGGY]  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  3);  }  else  {  options.addOption(arg.substring(0,  2));  }  [CE]  ')'  expected  [FE]          MissingArgumentException      [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  3);  }  else  {  options.addOption(arg.substring(0,  2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  3);  }  else  {  options.addOption(arg.substring(0,  2));  }	  tokens.add(arg.substring(0,    3));    	non-compiled	[CE]  ')'  expected	68	None	replace
373	[BUG]  [BUGGY]  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  3);  }  else  {  tokens.add(arg.substring(0,  2));  }  [CE]  ')'  expected  [FE]            MissingArgumentException      [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  3);  }  else  {  tokens.add(arg.substring(0,  2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  3);  }  else  {  tokens.add(arg.substring(0,  2));  }	  tokens.add(arg.substring(0,    3));    	non-compiled	[CE]  ')'  expected	68	None	replace
374	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(i    +    2));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  2));  }  tokens.add(arg.substring(i  +  2));  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	                tokens.add(arg.substring(i        +        2));        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(i    +    2));    }    tokens.add(arg.substring(i  +  2));	  	compilable	  [FE]  ComparisonFailure  	63	3	add
375	[BUG]  [BUGGY]          tokens.add(arg.substring(i    +    2));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  2));  }  tokens.add(arg.substring(i  +  2));  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(i    +    2));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  2));  }  tokens.add(arg.substring(i  +  2));  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                tokens.add(arg.substring(i        +        2));        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(i    +    2));    }    tokens.add(arg.substring(i  +  2));	  	compilable	  [FE]  ComparisonFailure  	63	3	add
376	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(i    +    2));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  2));  }  tokens.add(arg.substring(i  +  2));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	                tokens.add(arg.substring(i        +        2));        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(i    +    2));    }    tokens.add(arg.substring(i  +  2));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  2));  }	  	compilable	  [FE]  ComparisonFailure  	63	3	add
377	[BUG]  [BUGGY]          tokens.add(arg.substring(i    +    2));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  2));  }  tokens.add(arg.substring(i  +  2));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  2));  }  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(i    +    2));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  2));  }  tokens.add(arg.substring(i  +  2));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                tokens.add(arg.substring(i        +        2));        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(i    +    2));    }    tokens.add(arg.substring(i  +  2));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  2));  }	  	compilable	  [FE]  ComparisonFailure  	63	3	add
378	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(i    +    2));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  2));  }  tokens.add(arg.substring(i  +  2));  if(options.hasOption(arg.substring(i  +  2)))  {  tokens.add(arg.substring(i  +  2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	                tokens.add(arg.substring(i        +        2));        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(i    +    2));    }    tokens.add(arg.substring(i  +  2));  if(options.hasOption(arg.substring(i  +  2)))  {  tokens.add(arg.substring(i  +  2));  }	  	compilable	  [FE]  ComparisonFailure  	63	3	add
379	[BUG]  [BUGGY]          tokens.add(arg.substring(i    +    2));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  2));  }  tokens.add(arg.substring(i  +  2));  if(options.hasOption(arg.substring(i  +  2)))  {  tokens.add(arg.substring(i  +  2));  }  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(i    +    2));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  2));  }  tokens.add(arg.substring(i  +  2));  if(options.hasOption(arg.substring(i  +  2)))  {  tokens.add(arg.substring(i  +  2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                tokens.add(arg.substring(i        +        2));        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(i    +    2));    }    tokens.add(arg.substring(i  +  2));  if(options.hasOption(arg.substring(i  +  2)))  {  tokens.add(arg.substring(i  +  2));  }	  	compilable	  [FE]  ComparisonFailure  	63	3	add
380	[BUG]  [BUGGY]          tokens.add(arg.substring(i    +    2));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  2));  }  tokens.add(arg.substring(i  +  2));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  2));  [CE]  'else'  without  'if'  [FE]          ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(i    +    2));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  2));  }  tokens.add(arg.substring(i  +  2));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  2));  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                tokens.add(arg.substring(i        +        2));        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(i    +    2));    }    tokens.add(arg.substring(i  +  2));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  2));	  	non-compiled	[CE]  'else'  without  'if'	63	None	add
381	[BUG]  [BUGGY]          tokens.add(arg.substring(i    +    2));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  2));  }  tokens.add(arg.substring(i  +  2));  if(options.hasOption(arg.substring(i  +  2)))  {  tokens.add(arg.substring(i  +  2));  [CE]  'else'  without  'if'  [FE]            ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(i    +    2));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  2));  }  tokens.add(arg.substring(i  +  2));  if(options.hasOption(arg.substring(i  +  2)))  {  tokens.add(arg.substring(i  +  2));  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                tokens.add(arg.substring(i        +        2));        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(i    +    2));    }    tokens.add(arg.substring(i  +  2));  if(options.hasOption(arg.substring(i  +  2)))  {  tokens.add(arg.substring(i  +  2));	  	non-compiled	[CE]  'else'  without  'if'	63	None	add
382	[BUG]  [BUGGY]  [FE]  UnrecognizedOptionException  [FE]    UnrecognizedOptionException    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(i));    tokens.add(arg.substring(i));  tokens.add(arg.substring(i));  tokens.add(arg.substring(i));  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	                tokens.add(arg.substring(i));        tokens.add(arg.substring(i));    tokens.add(arg.substring(i));  tokens.add(arg.substring(i));	  	compilable	  [FE]  UnrecognizedOptionException  	18	4	add
383	[BUG]  [BUGGY]          tokens.add(arg.substring(i));    tokens.add(arg.substring(i));  tokens.add(arg.substring(i));  tokens.add(arg.substring(i));  [FE]  UnrecognizedOptionException  [FE]    UnrecognizedOptionException    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(i));    tokens.add(arg.substring(i));  tokens.add(arg.substring(i));  tokens.add(arg.substring(i));  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                tokens.add(arg.substring(i));        tokens.add(arg.substring(i));    tokens.add(arg.substring(i));  tokens.add(arg.substring(i));	  	compilable	  [FE]  UnrecognizedOptionException  	18	4	add
384	[BUG]  [BUGGY]  [FE]  UnrecognizedOptionException  [FE]      UnrecognizedOptionException    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(i));    tokens.add(arg.substring(i));  tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(i));  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	                tokens.add(arg.substring(i));        tokens.add(arg.substring(i));    tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(i));	  	compilable	  [FE]  UnrecognizedOptionException  	18	4	add
385	[BUG]  [BUGGY]          tokens.add(arg.substring(i));    tokens.add(arg.substring(i));  tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(i));  [FE]  UnrecognizedOptionException  [FE]      UnrecognizedOptionException    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(i));    tokens.add(arg.substring(i));  tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(i));  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                tokens.add(arg.substring(i));        tokens.add(arg.substring(i));    tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(i));	  	compilable	  [FE]  UnrecognizedOptionException  	18	4	add
386	[BUG]  [BUGGY]  [FE]  UnrecognizedOptionException  [FE]        UnrecognizedOptionException    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(i));    tokens.add(arg.substring(i));  tokens.add(arg.substring(0,  2));  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	                tokens.add(arg.substring(i));        tokens.add(arg.substring(i));    tokens.add(arg.substring(0,  2));	  	compilable	  [FE]  UnrecognizedOptionException  	18	4	add
387	[BUG]  [BUGGY]          tokens.add(arg.substring(i));    tokens.add(arg.substring(i));  tokens.add(arg.substring(0,  2));  [FE]  UnrecognizedOptionException  [FE]        UnrecognizedOptionException    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(i));    tokens.add(arg.substring(i));  tokens.add(arg.substring(0,  2));  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                tokens.add(arg.substring(i));        tokens.add(arg.substring(i));    tokens.add(arg.substring(0,  2));	  	compilable	  [FE]  UnrecognizedOptionException  	18	4	add
388	[BUG]  [BUGGY]  [FE]  UnrecognizedOptionException  [FE]          UnrecognizedOptionException    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(i));    tokens.add(arg.substring(i));  tokens.add(arg.substring(i));  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	                tokens.add(arg.substring(i));        tokens.add(arg.substring(i));    tokens.add(arg.substring(i));	  	compilable	  [FE]  UnrecognizedOptionException  	18	4	add
389	[BUG]  [BUGGY]          tokens.add(arg.substring(i));    tokens.add(arg.substring(i));  tokens.add(arg.substring(i));  [FE]  UnrecognizedOptionException  [FE]          UnrecognizedOptionException    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(i));    tokens.add(arg.substring(i));  tokens.add(arg.substring(i));  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                tokens.add(arg.substring(i));        tokens.add(arg.substring(i));    tokens.add(arg.substring(i));	  	compilable	  [FE]  UnrecognizedOptionException  	18	4	add
390	[BUG]  [BUGGY]  [FE]  UnrecognizedOptionException  [FE]            UnrecognizedOptionException    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(i));    tokens.add(arg.substring(i));  tokens.add(arg.substring(i  +  1));  tokens.add(arg.substring(i  +  2));  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	                tokens.add(arg.substring(i));        tokens.add(arg.substring(i));    tokens.add(arg.substring(i  +  1));  tokens.add(arg.substring(i  +  2));	  	compilable	  [FE]  UnrecognizedOptionException  	18	4	add
391	[BUG]  [BUGGY]          tokens.add(arg.substring(i));    tokens.add(arg.substring(i));  tokens.add(arg.substring(i  +  1));  tokens.add(arg.substring(i  +  2));  [FE]  UnrecognizedOptionException  [FE]            UnrecognizedOptionException    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(i));    tokens.add(arg.substring(i));  tokens.add(arg.substring(i  +  1));  tokens.add(arg.substring(i  +  2));  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                tokens.add(arg.substring(i));        tokens.add(arg.substring(i));    tokens.add(arg.substring(i  +  1));  tokens.add(arg.substring(i  +  2));	  	compilable	  [FE]  UnrecognizedOptionException  	18	4	add
392	[BUG]  [BUGGY]  tokens.add(arg.substring(0,  2));  TokenBuffer  tokens  =  new  TokenBuffer(options.getOption(arg.substring(i)).toString());  [CE]  'else'  without  'if'  [FE]          ComparisonFailure      [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]  tokens.add(arg.substring(0,  2));  TokenBuffer  tokens  =  new  TokenBuffer(options.getOption(arg.substring(i)).toString());  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	tokens.add(arg.substring(0,  2));  TokenBuffer  tokens  =  new  TokenBuffer(options.getOption(arg.substring(i)).toString());	          tokens.add(arg.substring(i));    TokenBuffer    tokens    =    new    TokenBuffer(options.getOption(arg.substring(i)).toString());    	non-compiled	[CE]  'else'  without  'if'	135	None	replace
393	[BUG]  [BUGGY]  tokens.add(arg.substring(i,  2));  TokenBuffer  tokens  =  new  TokenBuffer(options.getOption(arg.substring(i)).toString());  [CE]  'else'  without  'if'  [FE]            ComparisonFailure      [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]  tokens.add(arg.substring(i,  2));  TokenBuffer  tokens  =  new  TokenBuffer(options.getOption(arg.substring(i)).toString());  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	tokens.add(arg.substring(i,  2));  TokenBuffer  tokens  =  new  TokenBuffer(options.getOption(arg.substring(i)).toString());	          tokens.add(arg.substring(i));    TokenBuffer    tokens    =    new    TokenBuffer(options.getOption(arg.substring(i)).toString());    	non-compiled	[CE]  'else'  without  'if'	135	None	replace
394	[BUG]  [BUGGY]  tokens.add(arg.substring(i  +  1));  TokenBuffer  tokens  =  new  TokenBuffer(options.getOption(arg.substring(i  +  1)).toString());  [CE]  'else'  without  'if'  [FE]              ComparisonFailure      [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]  tokens.add(arg.substring(i  +  1));  TokenBuffer  tokens  =  new  TokenBuffer(options.getOption(arg.substring(i  +  1)).toString());  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	tokens.add(arg.substring(i  +  1));  TokenBuffer  tokens  =  new  TokenBuffer(options.getOption(arg.substring(i  +  1)).toString());	          tokens.add(arg.substring(i));    TokenBuffer    tokens    =    new    TokenBuffer(options.getOption(arg.substring(i)).toString());    	non-compiled	[CE]  'else'  without  'if'	135	None	replace
395	[BUG]  [BUGGY]  tokens.add(arg.substring(i,  2));  TokenBuffer  tokens  =  new  TokenBuffer(options.getOption(arg.substring(i,  2)).toString());  [CE]  'else'  without  'if'  [FE]                ComparisonFailure      [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]  tokens.add(arg.substring(i,  2));  TokenBuffer  tokens  =  new  TokenBuffer(options.getOption(arg.substring(i,  2)).toString());  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	tokens.add(arg.substring(i,  2));  TokenBuffer  tokens  =  new  TokenBuffer(options.getOption(arg.substring(i,  2)).toString());	          tokens.add(arg.substring(i));    TokenBuffer    tokens    =    new    TokenBuffer(options.getOption(arg.substring(i)).toString());    	non-compiled	[CE]  'else'  without  'if'	135	None	replace
396	[BUG]  [BUGGY]  [FE]  MissingArgumentException  [FE]    MissingArgumentException    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(0,    2));    tokens.add(arg.substring(1,  2));  tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(1,  2));  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	                tokens.add(arg.substring(0,        2));        tokens.add(arg.substring(1,    2));    tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(1,  2));	  	compilable	  [FE]  MissingArgumentException  	32	4	add
397	[BUG]  [BUGGY]          tokens.add(arg.substring(0,    2));    tokens.add(arg.substring(1,  2));  tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(1,  2));  [FE]  MissingArgumentException  [FE]    MissingArgumentException    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(0,    2));    tokens.add(arg.substring(1,  2));  tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(1,  2));  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                tokens.add(arg.substring(0,        2));        tokens.add(arg.substring(1,    2));    tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(1,  2));	  	compilable	  [FE]  MissingArgumentException  	32	4	add
398	[BUG]  [BUGGY]  [FE]  MissingArgumentException  [FE]      MissingArgumentException    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(0,    2));    tokens.add(arg.substring(1,  2));  tokens.add(arg.substring(1,  2));  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	                tokens.add(arg.substring(0,        2));        tokens.add(arg.substring(1,    2));    tokens.add(arg.substring(1,  2));	  	compilable	  [FE]  MissingArgumentException  	32	4	add
399	[BUG]  [BUGGY]          tokens.add(arg.substring(0,    2));    tokens.add(arg.substring(1,  2));  tokens.add(arg.substring(1,  2));  [FE]  MissingArgumentException  [FE]      MissingArgumentException    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(0,    2));    tokens.add(arg.substring(1,  2));  tokens.add(arg.substring(1,  2));  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                tokens.add(arg.substring(0,        2));        tokens.add(arg.substring(1,    2));    tokens.add(arg.substring(1,  2));	  	compilable	  [FE]  MissingArgumentException  	32	4	add
400	[BUG]  [BUGGY]  [FE]  MissingArgumentException  [FE]        MissingArgumentException    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(0,    2));    tokens.add(arg.substring(1,  2));  tokens.add(arg.substring(1,  2));  tokens.add(arg.substring(1,  2));  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	                tokens.add(arg.substring(0,        2));        tokens.add(arg.substring(1,    2));    tokens.add(arg.substring(1,  2));  tokens.add(arg.substring(1,  2));	  	compilable	  [FE]  MissingArgumentException  	32	4	add
401	[BUG]  [BUGGY]          tokens.add(arg.substring(0,    2));    tokens.add(arg.substring(1,  2));  tokens.add(arg.substring(1,  2));  tokens.add(arg.substring(1,  2));  [FE]  MissingArgumentException  [FE]        MissingArgumentException    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(0,    2));    tokens.add(arg.substring(1,  2));  tokens.add(arg.substring(1,  2));  tokens.add(arg.substring(1,  2));  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                tokens.add(arg.substring(0,        2));        tokens.add(arg.substring(1,    2));    tokens.add(arg.substring(1,  2));  tokens.add(arg.substring(1,  2));	  	compilable	  [FE]  MissingArgumentException  	32	4	add
402	[BUG]  [BUGGY]  [FE]  MissingArgumentException  [FE]          MissingArgumentException    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(0,    2));    tokens.add(arg.substring(1,  2));  tokens.add(arg.substring(2,  2));  tokens.add(arg.substring(1,  2));  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	                tokens.add(arg.substring(0,        2));        tokens.add(arg.substring(1,    2));    tokens.add(arg.substring(2,  2));  tokens.add(arg.substring(1,  2));	  	compilable	  [FE]  MissingArgumentException  	32	4	add
403	[BUG]  [BUGGY]          tokens.add(arg.substring(0,    2));    tokens.add(arg.substring(1,  2));  tokens.add(arg.substring(2,  2));  tokens.add(arg.substring(1,  2));  [FE]  MissingArgumentException  [FE]          MissingArgumentException    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(0,    2));    tokens.add(arg.substring(1,  2));  tokens.add(arg.substring(2,  2));  tokens.add(arg.substring(1,  2));  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                tokens.add(arg.substring(0,        2));        tokens.add(arg.substring(1,    2));    tokens.add(arg.substring(2,  2));  tokens.add(arg.substring(1,  2));	  	compilable	  [FE]  MissingArgumentException  	32	4	add
404	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]            MissingArgumentException    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(0,    2));    tokens.add(arg.substring(1,  2));  tokens.add(arg.substring(3,  2));  tokens.add(arg.substring(1,  2));  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	                tokens.add(arg.substring(0,        2));        tokens.add(arg.substring(1,    2));    tokens.add(arg.substring(3,  2));  tokens.add(arg.substring(1,  2));	  	compilable	  [FE]  StringIndexOutOfBoundsException  	32	4	add
405	[BUG]  [BUGGY]          tokens.add(arg.substring(0,    2));    tokens.add(arg.substring(1,  2));  tokens.add(arg.substring(3,  2));  tokens.add(arg.substring(1,  2));  [FE]  StringIndexOutOfBoundsException  [FE]            MissingArgumentException    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(0,    2));    tokens.add(arg.substring(1,  2));  tokens.add(arg.substring(3,  2));  tokens.add(arg.substring(1,  2));  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                tokens.add(arg.substring(0,        2));        tokens.add(arg.substring(1,    2));    tokens.add(arg.substring(3,  2));  tokens.add(arg.substring(1,  2));	  	compilable	  [FE]  StringIndexOutOfBoundsException  	32	4	add
406	[BUG]  [BUGGY]  while(options.hasOption(arg.substring(0,  2))&&!options.contains(arg.substring(i  +  1)))  {  tokens.add(arg.substring(i  +  1));  [CE]  'else'  without  'if'  [FE]        ComparisonFailure      [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]  while(options.hasOption(arg.substring(0,  2))&&!options.contains(arg.substring(i  +  1)))  {  tokens.add(arg.substring(i  +  1));  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	while(options.hasOption(arg.substring(0,  2))&&!options.contains(arg.substring(i  +  1)))  {  tokens.add(arg.substring(i  +  1));	  while(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(i    +    1));    	non-compiled	[CE]  'else'  without  'if'	151	None	replace
407	[BUG]  [BUGGY]  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  else  {  tokens.add(arg.substring(i  +  1));  }  [CE]  'else'  without  'if'  [FE]    ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  else  {  tokens.add(arg.substring(i  +  1));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  else  {  tokens.add(arg.substring(i  +  1));  }	          tokens.add(arg.substring(i    +    1));    if(options.hasOption(arg.substring(i    +    1)))    {    tokens.add(arg.substring(i    +    1));    }    else    {    tokens.add(arg.substring(i    +    1));    }    	non-compiled	[CE]  'else'  without  'if'	90	None	replace
408	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(i    +    1));    }    else  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  else  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	                if(options.hasOption(arg.substring(0,        2)))        {        tokens.add(arg.substring(i        +        1));        }        else    if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(i    +    1));    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  else  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }	  	compilable	  [FE]  ComparisonFailure  	141	4	add
409	[BUG]  [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(i    +    1));    }    else  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  else  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(i    +    1));    }    else  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  else  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                if(options.hasOption(arg.substring(0,        2)))        {        tokens.add(arg.substring(i        +        1));        }        else    if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(i    +    1));    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  else  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }	  	compilable	  [FE]  ComparisonFailure  	141	4	add
410	[BUG]  [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(i    +    1));    }    else  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  else  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring  [CE]  ')'  expected  [FE]      ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(i    +    1));    }    else  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  else  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                if(options.hasOption(arg.substring(0,        2)))        {        tokens.add(arg.substring(i        +        1));        }        else    if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(i    +    1));    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  else  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring	  	non-compiled	[CE]  ')'  expected	141	None	add
411	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(i    +    1));    }    else  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  else  if(options.hasOption(arg.substring(2)))  {  tokens.add(arg.substring(i  +  1));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	                if(options.hasOption(arg.substring(0,        2)))        {        tokens.add(arg.substring(i        +        1));        }        else    if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(i    +    1));    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  else  if(options.hasOption(arg.substring(2)))  {  tokens.add(arg.substring(i  +  1));  }	  	compilable	  [FE]  ComparisonFailure  	141	4	add
412	[BUG]  [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(i    +    1));    }    else  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  else  if(options.hasOption(arg.substring(2)))  {  tokens.add(arg.substring(i  +  1));  }  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(i    +    1));    }    else  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  else  if(options.hasOption(arg.substring(2)))  {  tokens.add(arg.substring(i  +  1));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                if(options.hasOption(arg.substring(0,        2)))        {        tokens.add(arg.substring(i        +        1));        }        else    if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(i    +    1));    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  else  if(options.hasOption(arg.substring(2)))  {  tokens.add(arg.substring(i  +  1));  }	  	compilable	  [FE]  ComparisonFailure  	141	4	add
413	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(i    +    1));    }    else  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  else  if(options.hasOption(arg.substring(2,  2)))  {  tokens.add(arg.substring(i  +  1));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	                if(options.hasOption(arg.substring(0,        2)))        {        tokens.add(arg.substring(i        +        1));        }        else    if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(i    +    1));    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  else  if(options.hasOption(arg.substring(2,  2)))  {  tokens.add(arg.substring(i  +  1));  }	  	compilable	  [FE]  ComparisonFailure  	141	4	add
414	[BUG]  [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(i    +    1));    }    else  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  else  if(options.hasOption(arg.substring(2,  2)))  {  tokens.add(arg.substring(i  +  1));  }  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(i    +    1));    }    else  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  else  if(options.hasOption(arg.substring(2,  2)))  {  tokens.add(arg.substring(i  +  1));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                if(options.hasOption(arg.substring(0,        2)))        {        tokens.add(arg.substring(i        +        1));        }        else    if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(i    +    1));    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  else  if(options.hasOption(arg.substring(2,  2)))  {  tokens.add(arg.substring(i  +  1));  }	  	compilable	  [FE]  ComparisonFailure  	141	4	add
415	[BUG]  [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(i    +    1));    }    else  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  else  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(  [CE]  ')'  expected  [FE]            ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(i    +    1));    }    else  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  else  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                if(options.hasOption(arg.substring(0,        2)))        {        tokens.add(arg.substring(i        +        1));        }        else    if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(i    +    1));    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  else  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(	  	non-compiled	[CE]  ')'  expected	141	None	add
416	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(i    +    1));    }    if(options.hasOption(arg.substring(0,  1)))  {  tokens.add(arg.substring(i  +  1));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	                if(options.hasOption(arg.substring(0,        2)))        {        tokens.add(arg.substring(i        +        1));        }        if(options.hasOption(arg.substring(0,    1)))    {    tokens.add(arg.substring(i    +    1));    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }	  	compilable	  [FE]  ComparisonFailure  	143	4	add
417	[BUG]  [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(i    +    1));    }    if(options.hasOption(arg.substring(0,  1)))  {  tokens.add(arg.substring(i  +  1));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(i    +    1));    }    if(options.hasOption(arg.substring(0,  1)))  {  tokens.add(arg.substring(i  +  1));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                if(options.hasOption(arg.substring(0,        2)))        {        tokens.add(arg.substring(i        +        1));        }        if(options.hasOption(arg.substring(0,    1)))    {    tokens.add(arg.substring(i    +    1));    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }	  	compilable	  [FE]  ComparisonFailure  	143	4	add
418	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(i    +    1));    }    if(options.hasOption(arg.substring(0,  1)))  {  tokens.add(arg.substring(i  +  1));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	                if(options.hasOption(arg.substring(0,        2)))        {        tokens.add(arg.substring(i        +        1));        }        if(options.hasOption(arg.substring(0,    1)))    {    tokens.add(arg.substring(i    +    1));    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }	  	compilable	  [FE]  ComparisonFailure  	143	4	add
419	[BUG]  [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(i    +    1));    }    if(options.hasOption(arg.substring(0,  1)))  {  tokens.add(arg.substring(i  +  1));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(i    +    1));    }    if(options.hasOption(arg.substring(0,  1)))  {  tokens.add(arg.substring(i  +  1));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                if(options.hasOption(arg.substring(0,        2)))        {        tokens.add(arg.substring(i        +        1));        }        if(options.hasOption(arg.substring(0,    1)))    {    tokens.add(arg.substring(i    +    1));    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }	  	compilable	  [FE]  ComparisonFailure  	143	4	add
420	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(i    +    1));    }    if(options.hasOption(arg.substring(0,  1)))  {  tokens.add(arg.substring(i  +  1));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  else  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	                if(options.hasOption(arg.substring(0,        2)))        {        tokens.add(arg.substring(i        +        1));        }        if(options.hasOption(arg.substring(0,    1)))    {    tokens.add(arg.substring(i    +    1));    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  else  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }	  	compilable	  [FE]  ComparisonFailure  	143	4	add
421	[BUG]  [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(i    +    1));    }    if(options.hasOption(arg.substring(0,  1)))  {  tokens.add(arg.substring(i  +  1));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  else  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(i    +    1));    }    if(options.hasOption(arg.substring(0,  1)))  {  tokens.add(arg.substring(i  +  1));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  else  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                if(options.hasOption(arg.substring(0,        2)))        {        tokens.add(arg.substring(i        +        1));        }        if(options.hasOption(arg.substring(0,    1)))    {    tokens.add(arg.substring(i    +    1));    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  else  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }	  	compilable	  [FE]  ComparisonFailure  	143	4	add
422	[BUG]  [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(i    +    1));    }    if(options.hasOption(arg.substring(0,  1)))  {  tokens.add(arg.substring(i  +  1));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring  [CE]  ')'  expected  [FE]          ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(i    +    1));    }    if(options.hasOption(arg.substring(0,  1)))  {  tokens.add(arg.substring(i  +  1));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                if(options.hasOption(arg.substring(0,        2)))        {        tokens.add(arg.substring(i        +        1));        }        if(options.hasOption(arg.substring(0,    1)))    {    tokens.add(arg.substring(i    +    1));    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring	  	non-compiled	[CE]  ')'  expected	143	None	add
423	[BUG]  [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(i    +    1));    }    if(options.hasOption(arg.substring(0,  1)))  {  tokens.add(arg.substring(i  +  1));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  else  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring  [CE]  ')'  expected  [FE]            ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(i    +    1));    }    if(options.hasOption(arg.substring(0,  1)))  {  tokens.add(arg.substring(i  +  1));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  else  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                if(options.hasOption(arg.substring(0,        2)))        {        tokens.add(arg.substring(i        +        1));        }        if(options.hasOption(arg.substring(0,    1)))    {    tokens.add(arg.substring(i    +    1));    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  else  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring	  	non-compiled	[CE]  ')'  expected	143	None	add
424	[BUG]  [BUGGY]  ||  options.hasOption(arg.substring(1,  2)))  {  tokens.add(arg.substring(1,  2));  }  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]  ||  options.hasOption(arg.substring(1,  2)))  {  tokens.add(arg.substring(1,  2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	||  options.hasOption(arg.substring(1,  2)))  {  tokens.add(arg.substring(1,  2));  }	          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(1,    2));    }    ||    options.hasOption(arg.substring(1,    2)))    {    tokens.add(arg.substring(1,    2));    }    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
425	[BUG]  [BUGGY]  ||  options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1,  2));  }  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]  ||  options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1,  2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	||  options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1,  2));  }	          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(1,    2));    }    ||    options.hasOption(arg.substring(1,    2)))    {    tokens.add(arg.substring(1,    2));    }    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
426	[BUG]  [BUGGY]  ||  options.hasOption(arg.substring(1,  2)))  {  tokens.add(arg.substring(1,  2));  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]  ||  options.hasOption(arg.substring(1,  2)))  {  tokens.add(arg.substring(1,  2));  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	||  options.hasOption(arg.substring(1,  2)))  {  tokens.add(arg.substring(1,  2));	          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(1,    2));    }    ||    options.hasOption(arg.substring(1,    2)))    {    tokens.add(arg.substring(1,    2));    }    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
427	[BUG]  [BUGGY]  tokens.add(arg.substring(0,  1).toString());  [CE]  'else'  without  'if'  [FE]        MissingArgumentException      [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]  tokens.add(arg.substring(0,  1).toString());  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	tokens.add(arg.substring(0,  1).toString());	  tokens.add(arg.substring(0,    2).toString());    	non-compiled	[CE]  'else'  without  'if'	139	None	replace
428	[BUG]  [BUGGY]  [FE]  UnrecognizedOptionException  [FE]    UnrecognizedOptionException    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(i));    if(options.hasOption(arg.substring(i)))  {  tokens.add(arg.substring(i));  }  else  {  tokens.add(arg.substring(i));  }  tokens.add(arg.substring(2));  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	                tokens.add(arg.substring(i));        if(options.hasOption(arg.substring(i)))    {    tokens.add(arg.substring(i));    }    else    {    tokens.add(arg.substring(i));    }    tokens.add(arg.substring(2));	  	compilable	  [FE]  UnrecognizedOptionException  	26	4	add
429	[BUG]  [BUGGY]          tokens.add(arg.substring(i));    if(options.hasOption(arg.substring(i)))  {  tokens.add(arg.substring(i));  }  else  {  tokens.add(arg.substring(i));  }  tokens.add(arg.substring(2));  [FE]  UnrecognizedOptionException  [FE]    UnrecognizedOptionException    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(i));    if(options.hasOption(arg.substring(i)))  {  tokens.add(arg.substring(i));  }  else  {  tokens.add(arg.substring(i));  }  tokens.add(arg.substring(2));  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                tokens.add(arg.substring(i));        if(options.hasOption(arg.substring(i)))    {    tokens.add(arg.substring(i));    }    else    {    tokens.add(arg.substring(i));    }    tokens.add(arg.substring(2));	  	compilable	  [FE]  UnrecognizedOptionException  	26	4	add
430	[BUG]  [BUGGY]  [FE]  UnrecognizedOptionException  [FE]      UnrecognizedOptionException    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(i));    if(options.hasOption(arg.substring(i)))  {  tokens.add(arg.substring(i));  }  else  {  tokens.add(arg.substring(i));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	                tokens.add(arg.substring(i));        if(options.hasOption(arg.substring(i)))    {    tokens.add(arg.substring(i));    }    else    {    tokens.add(arg.substring(i));    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }	  	compilable	  [FE]  UnrecognizedOptionException  	26	4	add
431	[BUG]  [BUGGY]          tokens.add(arg.substring(i));    if(options.hasOption(arg.substring(i)))  {  tokens.add(arg.substring(i));  }  else  {  tokens.add(arg.substring(i));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  [FE]  UnrecognizedOptionException  [FE]      UnrecognizedOptionException    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(i));    if(options.hasOption(arg.substring(i)))  {  tokens.add(arg.substring(i));  }  else  {  tokens.add(arg.substring(i));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                tokens.add(arg.substring(i));        if(options.hasOption(arg.substring(i)))    {    tokens.add(arg.substring(i));    }    else    {    tokens.add(arg.substring(i));    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }	  	compilable	  [FE]  UnrecognizedOptionException  	26	4	add
432	[BUG]  [BUGGY]  [FE]  UnrecognizedOptionException  [FE]        UnrecognizedOptionException    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(i));    if(options.hasOption(arg.substring(i)))  {  tokens.add(arg.substring(i));  }  else  {  tokens.add(arg.substring(i));  }  tokens.add(arg.substring(2));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	                tokens.add(arg.substring(i));        if(options.hasOption(arg.substring(i)))    {    tokens.add(arg.substring(i));    }    else    {    tokens.add(arg.substring(i));    }    tokens.add(arg.substring(2));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }	  	compilable	  [FE]  UnrecognizedOptionException  	26	4	add
433	[BUG]  [BUGGY]          tokens.add(arg.substring(i));    if(options.hasOption(arg.substring(i)))  {  tokens.add(arg.substring(i));  }  else  {  tokens.add(arg.substring(i));  }  tokens.add(arg.substring(2));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  [FE]  UnrecognizedOptionException  [FE]        UnrecognizedOptionException    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(i));    if(options.hasOption(arg.substring(i)))  {  tokens.add(arg.substring(i));  }  else  {  tokens.add(arg.substring(i));  }  tokens.add(arg.substring(2));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                tokens.add(arg.substring(i));        if(options.hasOption(arg.substring(i)))    {    tokens.add(arg.substring(i));    }    else    {    tokens.add(arg.substring(i));    }    tokens.add(arg.substring(2));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }	  	compilable	  [FE]  UnrecognizedOptionException  	26	4	add
434	[BUG]  [BUGGY]          tokens.add(arg.substring(i));    if(options.hasOption(arg.substring(i)))  {  tokens.add(arg.substring(i));  }  else  {  tokens.add(arg.substring(i));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(2));  }  [CE]  'else'  without  'if'  [FE]          UnrecognizedOptionException    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(i));    if(options.hasOption(arg.substring(i)))  {  tokens.add(arg.substring(i));  }  else  {  tokens.add(arg.substring(i));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                tokens.add(arg.substring(i));        if(options.hasOption(arg.substring(i)))    {    tokens.add(arg.substring(i));    }    else    {    tokens.add(arg.substring(i));    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(2));  }	  	non-compiled	[CE]  'else'  without  'if'	26	None	add
435	[BUG]  [BUGGY]          tokens.add(arg.substring(i));    if(options.hasOption(arg.substring(i)))  {  tokens.add(arg.substring(i));  }  else  {  tokens.add(arg.substring(i));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(  [CE]  ')'  expected  [FE]            UnrecognizedOptionException    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(i));    if(options.hasOption(arg.substring(i)))  {  tokens.add(arg.substring(i));  }  else  {  tokens.add(arg.substring(i));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                tokens.add(arg.substring(i));        if(options.hasOption(arg.substring(i)))    {    tokens.add(arg.substring(i));    }    else    {    tokens.add(arg.substring(i));    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(	  	non-compiled	[CE]  ')'  expected	26	None	add
436	[BUG]  [BUGGY]  [FE]  UnrecognizedOptionException  [FE]    ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(i));    if(options.hasOption(arg.substring(i)))  {  tokens.add(arg.substring(i));  }  tokens.add(arg.substring(i));  if(options.hasOption(arg.substring(i)))  {  tokens.add(arg.substring(i));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	                tokens.add(arg.substring(i));        if(options.hasOption(arg.substring(i)))    {    tokens.add(arg.substring(i));    }    tokens.add(arg.substring(i));  if(options.hasOption(arg.substring(i)))  {  tokens.add(arg.substring(i));  }	  	compilable	  [FE]  UnrecognizedOptionException  	24	4	add
437	[BUG]  [BUGGY]          tokens.add(arg.substring(i));    if(options.hasOption(arg.substring(i)))  {  tokens.add(arg.substring(i));  }  tokens.add(arg.substring(i));  if(options.hasOption(arg.substring(i)))  {  tokens.add(arg.substring(i));  }  [FE]  UnrecognizedOptionException  [FE]    ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(i));    if(options.hasOption(arg.substring(i)))  {  tokens.add(arg.substring(i));  }  tokens.add(arg.substring(i));  if(options.hasOption(arg.substring(i)))  {  tokens.add(arg.substring(i));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                tokens.add(arg.substring(i));        if(options.hasOption(arg.substring(i)))    {    tokens.add(arg.substring(i));    }    tokens.add(arg.substring(i));  if(options.hasOption(arg.substring(i)))  {  tokens.add(arg.substring(i));  }	  	compilable	  [FE]  UnrecognizedOptionException  	24	4	add
438	[BUG]  [BUGGY]  [FE]  UnrecognizedOptionException  [FE]      ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(i));    if(options.hasOption(arg.substring(i)))  {  tokens.add(arg.substring(i));  }  tokens.add(arg.substring(i));  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	                tokens.add(arg.substring(i));        if(options.hasOption(arg.substring(i)))    {    tokens.add(arg.substring(i));    }    tokens.add(arg.substring(i));	  	compilable	  [FE]  UnrecognizedOptionException  	24	4	add
439	[BUG]  [BUGGY]          tokens.add(arg.substring(i));    if(options.hasOption(arg.substring(i)))  {  tokens.add(arg.substring(i));  }  tokens.add(arg.substring(i));  [FE]  UnrecognizedOptionException  [FE]      ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(i));    if(options.hasOption(arg.substring(i)))  {  tokens.add(arg.substring(i));  }  tokens.add(arg.substring(i));  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                tokens.add(arg.substring(i));        if(options.hasOption(arg.substring(i)))    {    tokens.add(arg.substring(i));    }    tokens.add(arg.substring(i));	  	compilable	  [FE]  UnrecognizedOptionException  	24	4	add
440	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(i));    if(options.hasOption(arg.substring(i)))  {  tokens.add(arg.substring(i));  }  tokens.add(arg.substring(0,  2));  if(options.hasOption(arg.substring(i)))  {  tokens.add(arg.substring(i));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	                tokens.add(arg.substring(i));        if(options.hasOption(arg.substring(i)))    {    tokens.add(arg.substring(i));    }    tokens.add(arg.substring(0,  2));  if(options.hasOption(arg.substring(i)))  {  tokens.add(arg.substring(i));  }	  	compilable	  [FE]  ComparisonFailure  	24	4	add
441	[BUG]  [BUGGY]          tokens.add(arg.substring(i));    if(options.hasOption(arg.substring(i)))  {  tokens.add(arg.substring(i));  }  tokens.add(arg.substring(0,  2));  if(options.hasOption(arg.substring(i)))  {  tokens.add(arg.substring(i));  }  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(i));    if(options.hasOption(arg.substring(i)))  {  tokens.add(arg.substring(i));  }  tokens.add(arg.substring(0,  2));  if(options.hasOption(arg.substring(i)))  {  tokens.add(arg.substring(i));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                tokens.add(arg.substring(i));        if(options.hasOption(arg.substring(i)))    {    tokens.add(arg.substring(i));    }    tokens.add(arg.substring(0,  2));  if(options.hasOption(arg.substring(i)))  {  tokens.add(arg.substring(i));  }	  	compilable	  [FE]  ComparisonFailure  	24	4	add
442	[BUG]  [BUGGY]          tokens.add(arg.substring(i));    if(options.hasOption(arg.substring(i)))  {  tokens.add(arg.substring(i));  }  if(options.hasOption(arg.substring(i)))  {  tokens.add(arg.substring(i));  if(options.hasOption(arg.substring(i)))  {  tokens.add(arg.substring(i));  }  [CE]  'else'  without  'if'  [FE]          ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(i));    if(options.hasOption(arg.substring(i)))  {  tokens.add(arg.substring(i));  }  if(options.hasOption(arg.substring(i)))  {  tokens.add(arg.substring(i));  if(options.hasOption(arg.substring(i)))  {  tokens.add(arg.substring(i));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                tokens.add(arg.substring(i));        if(options.hasOption(arg.substring(i)))    {    tokens.add(arg.substring(i));    }    if(options.hasOption(arg.substring(i)))  {  tokens.add(arg.substring(i));  if(options.hasOption(arg.substring(i)))  {  tokens.add(arg.substring(i));  }	  	non-compiled	[CE]  'else'  without  'if'	24	None	add
443	[BUG]  [BUGGY]          tokens.add(arg.substring(i));    if(options.hasOption(arg.substring(i)))  {  tokens.add(arg.substring(i));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i));  if(options.hasOption(arg.substring(i)))  {  tokens.add(arg.substring(i));  }  [CE]  'else'  without  'if'  [FE]            ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(i));    if(options.hasOption(arg.substring(i)))  {  tokens.add(arg.substring(i));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i));  if(options.hasOption(arg.substring(i)))  {  tokens.add(arg.substring(i));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                tokens.add(arg.substring(i));        if(options.hasOption(arg.substring(i)))    {    tokens.add(arg.substring(i));    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i));  if(options.hasOption(arg.substring(i)))  {  tokens.add(arg.substring(i));  }	  	non-compiled	[CE]  'else'  without  'if'	24	None	add
444	[BUG]  [BUGGY]  tokens.add(arg.substring(i  +  1,  1));  [CE]  'else'  without  'if'  [FE]        ComparisonFailure      [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]  tokens.add(arg.substring(i  +  1,  1));  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	tokens.add(arg.substring(i  +  1,  1));	  tokens.add(arg.substring(i    +    1,    2));    	non-compiled	[CE]  'else'  without  'if'	150	None	replace
445	[BUG]  [BUGGY]  [FE]  MissingArgumentException  [FE]    MissingArgumentException    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	                if(options.hasOption(arg.substring(0,        2)))        {        tokens.add(arg.substring(0,        2));        }        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }	  	compilable	  [FE]  MissingArgumentException  	69	4	add
446	[BUG]  [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  [FE]  MissingArgumentException  [FE]    MissingArgumentException    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                if(options.hasOption(arg.substring(0,        2)))        {        tokens.add(arg.substring(0,        2));        }        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }	  	compilable	  [FE]  MissingArgumentException  	69	4	add
447	[BUG]  [BUGGY]  [FE]  MissingArgumentException  [FE]      MissingArgumentException    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	                if(options.hasOption(arg.substring(0,        2)))        {        tokens.add(arg.substring(0,        2));        }        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }	  	compilable	  [FE]  MissingArgumentException  	69	4	add
448	[BUG]  [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  [FE]  MissingArgumentException  [FE]      MissingArgumentException    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                if(options.hasOption(arg.substring(0,        2)))        {        tokens.add(arg.substring(0,        2));        }        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }	  	compilable	  [FE]  MissingArgumentException  	69	4	add
449	[BUG]  [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(  [CE]  ')'  expected  [FE]        MissingArgumentException    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                if(options.hasOption(arg.substring(0,        2)))        {        tokens.add(arg.substring(0,        2));        }        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(	  	non-compiled	[CE]  ')'  expected	69	None	add
450	[BUG]  [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring  [CE]  ')'  expected  [FE]          MissingArgumentException    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                if(options.hasOption(arg.substring(0,        2)))        {        tokens.add(arg.substring(0,        2));        }        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring	  	non-compiled	[CE]  ')'  expected	69	None	add
451	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(i    +    2));    tokens.add(arg.substring(i  +  2));  if(options.hasOption(arg))  {  tokens.add(arg.substring(i  +  1));  }  tokens.add(arg.substring(i  +  2));  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	                tokens.add(arg.substring(i        +        2));        tokens.add(arg.substring(i    +    2));    if(options.hasOption(arg))    {    tokens.add(arg.substring(i    +    1));    }    tokens.add(arg.substring(i  +  2));	  	compilable	  [FE]  ComparisonFailure  	98	3	add
452	[BUG]  [BUGGY]          tokens.add(arg.substring(i    +    2));    tokens.add(arg.substring(i  +  2));  if(options.hasOption(arg))  {  tokens.add(arg.substring(i  +  1));  }  tokens.add(arg.substring(i  +  2));  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(i    +    2));    tokens.add(arg.substring(i  +  2));  if(options.hasOption(arg))  {  tokens.add(arg.substring(i  +  1));  }  tokens.add(arg.substring(i  +  2));  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                tokens.add(arg.substring(i        +        2));        tokens.add(arg.substring(i    +    2));    if(options.hasOption(arg))    {    tokens.add(arg.substring(i    +    1));    }    tokens.add(arg.substring(i  +  2));	  	compilable	  [FE]  ComparisonFailure  	98	3	add
453	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(i    +    2));    tokens.add(arg.substring(i  +  2));  if(options.hasOption(arg))  {  tokens.add(arg.substring(i  +  1));  }  tokens.add(arg.substring(i  +  2));  tokens.add(arg.substring(i  +  2));  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	                tokens.add(arg.substring(i        +        2));        tokens.add(arg.substring(i    +    2));    if(options.hasOption(arg))    {    tokens.add(arg.substring(i    +    1));    }    tokens.add(arg.substring(i  +  2));  tokens.add(arg.substring(i  +  2));	  	compilable	  [FE]  ComparisonFailure  	98	3	add
454	[BUG]  [BUGGY]          tokens.add(arg.substring(i    +    2));    tokens.add(arg.substring(i  +  2));  if(options.hasOption(arg))  {  tokens.add(arg.substring(i  +  1));  }  tokens.add(arg.substring(i  +  2));  tokens.add(arg.substring(i  +  2));  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(i    +    2));    tokens.add(arg.substring(i  +  2));  if(options.hasOption(arg))  {  tokens.add(arg.substring(i  +  1));  }  tokens.add(arg.substring(i  +  2));  tokens.add(arg.substring(i  +  2));  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                tokens.add(arg.substring(i        +        2));        tokens.add(arg.substring(i    +    2));    if(options.hasOption(arg))    {    tokens.add(arg.substring(i    +    1));    }    tokens.add(arg.substring(i  +  2));  tokens.add(arg.substring(i  +  2));	  	compilable	  [FE]  ComparisonFailure  	98	3	add
455	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(i    +    2));    tokens.add(arg.substring(i  +  2));  if(options.hasOption(arg))  {  tokens.add(arg.substring(i  +  1));  }  if(options.hasOption(arg))  {  tokens.add(arg.substring(i  +  2));  tokens.add(arg.substring(i  +  2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	                tokens.add(arg.substring(i        +        2));        tokens.add(arg.substring(i    +    2));    if(options.hasOption(arg))    {    tokens.add(arg.substring(i    +    1));    }    if(options.hasOption(arg))  {  tokens.add(arg.substring(i  +  2));  tokens.add(arg.substring(i  +  2));  }	  	compilable	  [FE]  ComparisonFailure  	98	3	add
456	[BUG]  [BUGGY]          tokens.add(arg.substring(i    +    2));    tokens.add(arg.substring(i  +  2));  if(options.hasOption(arg))  {  tokens.add(arg.substring(i  +  1));  }  if(options.hasOption(arg))  {  tokens.add(arg.substring(i  +  2));  tokens.add(arg.substring(i  +  2));  }  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(i    +    2));    tokens.add(arg.substring(i  +  2));  if(options.hasOption(arg))  {  tokens.add(arg.substring(i  +  1));  }  if(options.hasOption(arg))  {  tokens.add(arg.substring(i  +  2));  tokens.add(arg.substring(i  +  2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                tokens.add(arg.substring(i        +        2));        tokens.add(arg.substring(i    +    2));    if(options.hasOption(arg))    {    tokens.add(arg.substring(i    +    1));    }    if(options.hasOption(arg))  {  tokens.add(arg.substring(i  +  2));  tokens.add(arg.substring(i  +  2));  }	  	compilable	  [FE]  ComparisonFailure  	98	3	add
457	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(i    +    2));    tokens.add(arg.substring(i  +  2));  if(options.hasOption(arg))  {  tokens.add(arg.substring(i  +  1));  }  tokens.add(arg.substring(i  +  2));  if(options.hasOption(arg))  {  tokens.add(arg.substring(i  +  1));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	                tokens.add(arg.substring(i        +        2));        tokens.add(arg.substring(i    +    2));    if(options.hasOption(arg))    {    tokens.add(arg.substring(i    +    1));    }    tokens.add(arg.substring(i  +  2));  if(options.hasOption(arg))  {  tokens.add(arg.substring(i  +  1));  }	  	compilable	  [FE]  ComparisonFailure  	98	3	add
458	[BUG]  [BUGGY]          tokens.add(arg.substring(i    +    2));    tokens.add(arg.substring(i  +  2));  if(options.hasOption(arg))  {  tokens.add(arg.substring(i  +  1));  }  tokens.add(arg.substring(i  +  2));  if(options.hasOption(arg))  {  tokens.add(arg.substring(i  +  1));  }  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(i    +    2));    tokens.add(arg.substring(i  +  2));  if(options.hasOption(arg))  {  tokens.add(arg.substring(i  +  1));  }  tokens.add(arg.substring(i  +  2));  if(options.hasOption(arg))  {  tokens.add(arg.substring(i  +  1));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                tokens.add(arg.substring(i        +        2));        tokens.add(arg.substring(i    +    2));    if(options.hasOption(arg))    {    tokens.add(arg.substring(i    +    1));    }    tokens.add(arg.substring(i  +  2));  if(options.hasOption(arg))  {  tokens.add(arg.substring(i  +  1));  }	  	compilable	  [FE]  ComparisonFailure  	98	3	add
459	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]            ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(i    +    2));    tokens.add(arg.substring(i  +  2));  if(options.hasOption(arg))  {  tokens.add(arg.substring(i  +  1));  }  tokens.add(arg.substring(i  +  2));  if(options.hasOption(arg))  {  tokens.add(arg.substring(i  +  2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	                tokens.add(arg.substring(i        +        2));        tokens.add(arg.substring(i    +    2));    if(options.hasOption(arg))    {    tokens.add(arg.substring(i    +    1));    }    tokens.add(arg.substring(i  +  2));  if(options.hasOption(arg))  {  tokens.add(arg.substring(i  +  2));  }	  	compilable	  [FE]  ComparisonFailure  	98	3	add
460	[BUG]  [BUGGY]          tokens.add(arg.substring(i    +    2));    tokens.add(arg.substring(i  +  2));  if(options.hasOption(arg))  {  tokens.add(arg.substring(i  +  1));  }  tokens.add(arg.substring(i  +  2));  if(options.hasOption(arg))  {  tokens.add(arg.substring(i  +  2));  }  [FE]  ComparisonFailure  [FE]            ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(i    +    2));    tokens.add(arg.substring(i  +  2));  if(options.hasOption(arg))  {  tokens.add(arg.substring(i  +  1));  }  tokens.add(arg.substring(i  +  2));  if(options.hasOption(arg))  {  tokens.add(arg.substring(i  +  2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                tokens.add(arg.substring(i        +        2));        tokens.add(arg.substring(i    +    2));    if(options.hasOption(arg))    {    tokens.add(arg.substring(i    +    1));    }    tokens.add(arg.substring(i  +  2));  if(options.hasOption(arg))  {  tokens.add(arg.substring(i  +  2));  }	  	compilable	  [FE]  ComparisonFailure  	98	3	add
461	[BUG]  [BUGGY]  tokens  =  new  TokenBuffer(arg.substring(i  +  1));  tokens.add(arg.substring(i  +  1));  [CE]  'else'  without  'if'  [FE]        ComparisonFailure      [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]  tokens  =  new  TokenBuffer(arg.substring(i  +  1));  tokens.add(arg.substring(i  +  1));  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	tokens  =  new  TokenBuffer(arg.substring(i  +  1));  tokens.add(arg.substring(i  +  1));	          tokens.add(arg.substring(i    +    1));    TokenBuffer    tokens    =    new    TokenBuffer(arg.substring(i    +    1));    tokens.add(arg.substring(i    +    1));    	non-compiled	[CE]  'else'  without  'if'	160	None	replace
462	[BUG]  [BUGGY]  [FE]  MissingArgumentException  [FE]    MissingArgumentException    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(0,    2));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(opt);  }  tokens.add(arg.substring(0,  2));  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	                tokens.add(arg.substring(0,        2));        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    }    else    {    tokens.add(opt);    }    tokens.add(arg.substring(0,  2));	  	compilable	  [FE]  MissingArgumentException  	147	4	add
463	[BUG]  [BUGGY]          tokens.add(arg.substring(0,    2));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(opt);  }  tokens.add(arg.substring(0,  2));  [FE]  MissingArgumentException  [FE]    MissingArgumentException    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(0,    2));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(opt);  }  tokens.add(arg.substring(0,  2));  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                tokens.add(arg.substring(0,        2));        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    }    else    {    tokens.add(opt);    }    tokens.add(arg.substring(0,  2));	  	compilable	  [FE]  MissingArgumentException  	147	4	add
464	[BUG]  [BUGGY]  [FE]  MissingArgumentException  [FE]      MissingArgumentException    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(0,    2));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(opt);  }  tokens.add(arg.substring(0,  2));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(opt);  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	                tokens.add(arg.substring(0,        2));        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    }    else    {    tokens.add(opt);    }    tokens.add(arg.substring(0,  2));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(opt);  }	  	compilable	  [FE]  MissingArgumentException  	147	4	add
465	[BUG]  [BUGGY]          tokens.add(arg.substring(0,    2));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(opt);  }  tokens.add(arg.substring(0,  2));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(opt);  }  [FE]  MissingArgumentException  [FE]      MissingArgumentException    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(0,    2));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(opt);  }  tokens.add(arg.substring(0,  2));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(opt);  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                tokens.add(arg.substring(0,        2));        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    }    else    {    tokens.add(opt);    }    tokens.add(arg.substring(0,  2));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(opt);  }	  	compilable	  [FE]  MissingArgumentException  	147	4	add
466	[BUG]  [BUGGY]  [FE]  MissingArgumentException  [FE]        MissingArgumentException    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(0,    2));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(opt);  }  tokens.add(arg.substring(0,  2));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	                tokens.add(arg.substring(0,        2));        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    }    else    {    tokens.add(opt);    }    tokens.add(arg.substring(0,  2));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }	  	compilable	  [FE]  MissingArgumentException  	147	4	add
467	[BUG]  [BUGGY]          tokens.add(arg.substring(0,    2));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(opt);  }  tokens.add(arg.substring(0,  2));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  [FE]  MissingArgumentException  [FE]        MissingArgumentException    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(0,    2));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(opt);  }  tokens.add(arg.substring(0,  2));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                tokens.add(arg.substring(0,        2));        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    }    else    {    tokens.add(opt);    }    tokens.add(arg.substring(0,  2));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }	  	compilable	  [FE]  MissingArgumentException  	147	4	add
468	[BUG]  [BUGGY]          tokens.add(arg.substring(0,    2));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(opt);  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  [CE]  'else'  without  'if'  [FE]          MissingArgumentException    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(0,    2));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(opt);  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                tokens.add(arg.substring(0,        2));        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    }    else    {    tokens.add(opt);    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }	  	non-compiled	[CE]  'else'  without  'if'	147	None	add
469	[BUG]  [BUGGY]          tokens.add(arg.substring(0,    2));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(opt);  }  tokens.add(arg.substring(0,  2));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  [CE]  'else'  without  'if'  [FE]            MissingArgumentException    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(0,    2));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(opt);  }  tokens.add(arg.substring(0,  2));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                tokens.add(arg.substring(0,        2));        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    }    else    {    tokens.add(opt);    }    tokens.add(arg.substring(0,  2));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));	  	non-compiled	[CE]  'else'  without  'if'	147	None	add
470	[BUG]  [BUGGY]  ||  options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  [CE]  illegal  start  of  expression  [FE]          MissingArgumentException      [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]  ||  options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	||  options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }	          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    }    ||    options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    }    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
471	[BUG]  [BUGGY]  ||  options.hasOption(arg.substring(0,  2))  {  tokens.add(arg.substring(0,  2));  }  [CE]  illegal  start  of  expression  [FE]            MissingArgumentException      [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]  ||  options.hasOption(arg.substring(0,  2))  {  tokens.add(arg.substring(0,  2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	||  options.hasOption(arg.substring(0,  2))  {  tokens.add(arg.substring(0,  2));  }	          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    }    ||    options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    }    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
472	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(1,    2));    }    else  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1,  2));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1,  2));  }  else  if(options.hasOption(arg.substring(1,  2)))  {  tokens.add(arg.substring(1,  2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	                if(options.hasOption(arg.substring(0,        2)))        {        tokens.add(arg.substring(1,        2));        }        else    if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(1,    2));    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1,  2));  }  else  if(options.hasOption(arg.substring(1,  2)))  {  tokens.add(arg.substring(1,  2));  }	  	compilable	  [FE]  ComparisonFailure  	108	4	add
473	[BUG]  [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(1,    2));    }    else  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1,  2));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1,  2));  }  else  if(options.hasOption(arg.substring(1,  2)))  {  tokens.add(arg.substring(1,  2));  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(1,    2));    }    else  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1,  2));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1,  2));  }  else  if(options.hasOption(arg.substring(1,  2)))  {  tokens.add(arg.substring(1,  2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                if(options.hasOption(arg.substring(0,        2)))        {        tokens.add(arg.substring(1,        2));        }        else    if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(1,    2));    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1,  2));  }  else  if(options.hasOption(arg.substring(1,  2)))  {  tokens.add(arg.substring(1,  2));  }	  	compilable	  [FE]  ComparisonFailure  	108	4	add
474	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(1,    2));    }    else  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1,  2));  }  if(options.hasOption(arg.substring(1,  2)))  {  tokens.add(arg.substring(1,  2));  }  else  if(options.hasOption(arg.substring(1,  2)))  {  tokens.add(arg.substring(1,  2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	                if(options.hasOption(arg.substring(0,        2)))        {        tokens.add(arg.substring(1,        2));        }        else    if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(1,    2));    }    if(options.hasOption(arg.substring(1,  2)))  {  tokens.add(arg.substring(1,  2));  }  else  if(options.hasOption(arg.substring(1,  2)))  {  tokens.add(arg.substring(1,  2));  }	  	compilable	  [FE]  ComparisonFailure  	108	4	add
475	[BUG]  [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(1,    2));    }    else  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1,  2));  }  if(options.hasOption(arg.substring(1,  2)))  {  tokens.add(arg.substring(1,  2));  }  else  if(options.hasOption(arg.substring(1,  2)))  {  tokens.add(arg.substring(1,  2));  }  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(1,    2));    }    else  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1,  2));  }  if(options.hasOption(arg.substring(1,  2)))  {  tokens.add(arg.substring(1,  2));  }  else  if(options.hasOption(arg.substring(1,  2)))  {  tokens.add(arg.substring(1,  2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                if(options.hasOption(arg.substring(0,        2)))        {        tokens.add(arg.substring(1,        2));        }        else    if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(1,    2));    }    if(options.hasOption(arg.substring(1,  2)))  {  tokens.add(arg.substring(1,  2));  }  else  if(options.hasOption(arg.substring(1,  2)))  {  tokens.add(arg.substring(1,  2));  }	  	compilable	  [FE]  ComparisonFailure  	108	4	add
476	[BUG]  [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(1,    2));    }    else  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1,  2));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1,  2));  }  else  if(options.hasOption(arg.substring(1,  2)))  {  tokens.add(arg.substring  [CE]  ')'  expected  [FE]        ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(1,    2));    }    else  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1,  2));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1,  2));  }  else  if(options.hasOption(arg.substring(1,  2)))  {  tokens.add(arg.substring  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                if(options.hasOption(arg.substring(0,        2)))        {        tokens.add(arg.substring(1,        2));        }        else    if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(1,    2));    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1,  2));  }  else  if(options.hasOption(arg.substring(1,  2)))  {  tokens.add(arg.substring	  	non-compiled	[CE]  ')'  expected	108	None	add
477	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(1,    2));    }    else  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1,  2));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1,  2));  }  else  if(options.hasOption(arg.substring(2,  2)))  {  tokens.add(arg.substring(1,  2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	                if(options.hasOption(arg.substring(0,        2)))        {        tokens.add(arg.substring(1,        2));        }        else    if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(1,    2));    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1,  2));  }  else  if(options.hasOption(arg.substring(2,  2)))  {  tokens.add(arg.substring(1,  2));  }	  	compilable	  [FE]  ComparisonFailure  	108	4	add
478	[BUG]  [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(1,    2));    }    else  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1,  2));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1,  2));  }  else  if(options.hasOption(arg.substring(2,  2)))  {  tokens.add(arg.substring(1,  2));  }  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(1,    2));    }    else  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1,  2));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1,  2));  }  else  if(options.hasOption(arg.substring(2,  2)))  {  tokens.add(arg.substring(1,  2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                if(options.hasOption(arg.substring(0,        2)))        {        tokens.add(arg.substring(1,        2));        }        else    if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(1,    2));    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1,  2));  }  else  if(options.hasOption(arg.substring(2,  2)))  {  tokens.add(arg.substring(1,  2));  }	  	compilable	  [FE]  ComparisonFailure  	108	4	add
479	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]            ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(1,    2));    }    else  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1,  2));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1,  2));  }  else  if(options.hasOption(arg.substring(2)))  {  tokens.add(arg.substring(1,  2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	                if(options.hasOption(arg.substring(0,        2)))        {        tokens.add(arg.substring(1,        2));        }        else    if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(1,    2));    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1,  2));  }  else  if(options.hasOption(arg.substring(2)))  {  tokens.add(arg.substring(1,  2));  }	  	compilable	  [FE]  ComparisonFailure  	108	4	add
480	[BUG]  [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(1,    2));    }    else  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1,  2));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1,  2));  }  else  if(options.hasOption(arg.substring(2)))  {  tokens.add(arg.substring(1,  2));  }  [FE]  ComparisonFailure  [FE]            ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(1,    2));    }    else  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1,  2));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1,  2));  }  else  if(options.hasOption(arg.substring(2)))  {  tokens.add(arg.substring(1,  2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                if(options.hasOption(arg.substring(0,        2)))        {        tokens.add(arg.substring(1,        2));        }        else    if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(1,    2));    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1,  2));  }  else  if(options.hasOption(arg.substring(2)))  {  tokens.add(arg.substring(1,  2));  }	  	compilable	  [FE]  ComparisonFailure  	108	4	add
481	[BUG]  [BUGGY]  while(options.hasOption(arg.substring(0,  2))&&!stopAtNonOption)  {  tokens.add(arg.substring(i  +  1));  [CE]  'else'  without  'if'  [FE]            ComparisonFailure      [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]  while(options.hasOption(arg.substring(0,  2))&&!stopAtNonOption)  {  tokens.add(arg.substring(i  +  1));  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	while(options.hasOption(arg.substring(0,  2))&&!stopAtNonOption)  {  tokens.add(arg.substring(i  +  1));	          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(i    +    1));    }    while(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(i    +    1));    }    timeout    	non-compiled	[CE]  'else'  without  'if'	5	None	replace
482	[BUG]  [BUGGY]  while(options.hasOption(arg.substring(0,  1)))  {  tokens.add(arg.substring(i  +  1));  [CE]  'else'  without  'if'  [FE]              ComparisonFailure      [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]  while(options.hasOption(arg.substring(0,  1)))  {  tokens.add(arg.substring(i  +  1));  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	while(options.hasOption(arg.substring(0,  1)))  {  tokens.add(arg.substring(i  +  1));	          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(i    +    1));    }    while(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(i    +    1));    }    timeout    	non-compiled	[CE]  'else'  without  'if'	5	None	replace
483	[BUG]  [BUGGY]  tokens.add(arg.substring(1,  2));  //  property=value  }  [CE]  'else'  without  'if'  [FE]            ComparisonFailure      [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]  tokens.add(arg.substring(1,  2));  //  property=value  }  [BUGGY]      }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	tokens.add(arg.substring(1,  2));  //  property=value  }	  tokens.add(arg.substring(0,    1));    //    property=value    }    	non-compiled	[CE]  'else'  without  'if'	80	None	replace
484	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(2));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(arg.substring(1));  }  tokens.add(arg.substring(2));  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	                tokens.add(arg.substring(2));        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    }    else    {    tokens.add(arg.substring(1));    }    tokens.add(arg.substring(2));	  	compilable	  [FE]  ComparisonFailure  	115	3	add
485	[BUG]  [BUGGY]          tokens.add(arg.substring(2));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(arg.substring(1));  }  tokens.add(arg.substring(2));  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(2));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(arg.substring(1));  }  tokens.add(arg.substring(2));  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                tokens.add(arg.substring(2));        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    }    else    {    tokens.add(arg.substring(1));    }    tokens.add(arg.substring(2));	  	compilable	  [FE]  ComparisonFailure  	115	3	add
486	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(2));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(arg.substring(1));  }  tokens.add(arg.substring(2));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	                tokens.add(arg.substring(2));        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    }    else    {    tokens.add(arg.substring(1));    }    tokens.add(arg.substring(2));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }	  	compilable	  [FE]  ComparisonFailure  	115	3	add
487	[BUG]  [BUGGY]          tokens.add(arg.substring(2));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(arg.substring(1));  }  tokens.add(arg.substring(2));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(2));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(arg.substring(1));  }  tokens.add(arg.substring(2));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                tokens.add(arg.substring(2));        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    }    else    {    tokens.add(arg.substring(1));    }    tokens.add(arg.substring(2));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }	  	compilable	  [FE]  ComparisonFailure  	115	3	add
488	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(2));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(arg.substring(1));  }  tokens.add(arg.substring(2));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1,  2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	                tokens.add(arg.substring(2));        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    }    else    {    tokens.add(arg.substring(1));    }    tokens.add(arg.substring(2));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1,  2));  }	  	compilable	  [FE]  ComparisonFailure  	115	3	add
489	[BUG]  [BUGGY]          tokens.add(arg.substring(2));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(arg.substring(1));  }  tokens.add(arg.substring(2));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1,  2));  }  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(2));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(arg.substring(1));  }  tokens.add(arg.substring(2));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1,  2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                tokens.add(arg.substring(2));        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    }    else    {    tokens.add(arg.substring(1));    }    tokens.add(arg.substring(2));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1,  2));  }	  	compilable	  [FE]  ComparisonFailure  	115	3	add
490	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(2));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(arg.substring(1));  }  tokens.add(arg.substring(2));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(2,  2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	                tokens.add(arg.substring(2));        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    }    else    {    tokens.add(arg.substring(1));    }    tokens.add(arg.substring(2));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(2,  2));  }	  	compilable	  [FE]  ComparisonFailure  	115	3	add
491	[BUG]  [BUGGY]          tokens.add(arg.substring(2));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(arg.substring(1));  }  tokens.add(arg.substring(2));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(2,  2));  }  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(2));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(arg.substring(1));  }  tokens.add(arg.substring(2));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(2,  2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                tokens.add(arg.substring(2));        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    }    else    {    tokens.add(arg.substring(1));    }    tokens.add(arg.substring(2));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(2,  2));  }	  	compilable	  [FE]  ComparisonFailure  	115	3	add
492	[BUG]  [BUGGY]          tokens.add(arg.substring(2));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(arg.substring(1));  }  tokens.add(arg.substring(2));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  [CE]  'else'  without  'if'  [FE]            ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(2));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(arg.substring(1));  }  tokens.add(arg.substring(2));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                tokens.add(arg.substring(2));        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    }    else    {    tokens.add(arg.substring(1));    }    tokens.add(arg.substring(2));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));	  	non-compiled	[CE]  'else'  without  'if'	115	None	add
493	[BUG]  [BUGGY]  if(options.hasOption(arg.substring(0,  2))  ||  options.hasOption(arg.substring(0,  2))  {  tokens.add(arg.substring(i  +  1));  }  [CE]  ')'  expected  [FE]          ComparisonFailure      [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]  if(options.hasOption(arg.substring(0,  2))  ||  options.hasOption(arg.substring(0,  2))  {  tokens.add(arg.substring(i  +  1));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	if(options.hasOption(arg.substring(0,  2))  ||  options.hasOption(arg.substring(0,  2))  {  tokens.add(arg.substring(i  +  1));  }	          tokens.add(arg.substring(i    +    1));    tokens.add(arg.substring(i    +    1));    if(options.hasOption(arg.substring(0,    2))    {    tokens.add(arg.substring(i    +    1));    }    	non-compiled	[CE]  ')'  expected	132	None	replace
494	[BUG]  [BUGGY]  ||  options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure      [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]  ||  options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	||  options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }	          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(i    +    1));    }    ||    options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(i    +    1));    }    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
495	[BUG]  [BUGGY]  ||  options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]  ||  options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	||  options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));	          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(i    +    1));    }    ||    options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(i    +    1));    }    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
496	[BUG]  [BUGGY]  [FE]  MissingArgumentException  [FE]    MissingArgumentException    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(0,    2));    tokens.add(arg.substring(0,  1));  tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(0,  1));  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	                tokens.add(arg.substring(0,        2));        tokens.add(arg.substring(0,    1));    tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(0,  1));	  	compilable	  [FE]  MissingArgumentException  	34	4	add
497	[BUG]  [BUGGY]          tokens.add(arg.substring(0,    2));    tokens.add(arg.substring(0,  1));  tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(0,  1));  [FE]  MissingArgumentException  [FE]    MissingArgumentException    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(0,    2));    tokens.add(arg.substring(0,  1));  tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(0,  1));  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                tokens.add(arg.substring(0,        2));        tokens.add(arg.substring(0,    1));    tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(0,  1));	  	compilable	  [FE]  MissingArgumentException  	34	4	add
498	[BUG]  [BUGGY]  [FE]  MissingArgumentException  [FE]      MissingArgumentException    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(0,    2));    tokens.add(arg.substring(0,  1));  tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(1,  1));  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	                tokens.add(arg.substring(0,        2));        tokens.add(arg.substring(0,    1));    tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(1,  1));	  	compilable	  [FE]  MissingArgumentException  	34	4	add
499	[BUG]  [BUGGY]          tokens.add(arg.substring(0,    2));    tokens.add(arg.substring(0,  1));  tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(1,  1));  [FE]  MissingArgumentException  [FE]      MissingArgumentException    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(0,    2));    tokens.add(arg.substring(0,  1));  tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(1,  1));  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                tokens.add(arg.substring(0,        2));        tokens.add(arg.substring(0,    1));    tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(1,  1));	  	compilable	  [FE]  MissingArgumentException  	34	4	add
500	[BUG]  [BUGGY]  [FE]  MissingArgumentException  [FE]        MissingArgumentException    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(0,    2));    tokens.add(arg.substring(0,  1));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(0,  1));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	                tokens.add(arg.substring(0,        2));        tokens.add(arg.substring(0,    1));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(0,  1));  }	  	compilable	  [FE]  MissingArgumentException  	34	4	add
501	[BUG]  [BUGGY]          tokens.add(arg.substring(0,    2));    tokens.add(arg.substring(0,  1));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(0,  1));  }  [FE]  MissingArgumentException  [FE]        MissingArgumentException    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(0,    2));    tokens.add(arg.substring(0,  1));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(0,  1));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                tokens.add(arg.substring(0,        2));        tokens.add(arg.substring(0,    1));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(0,  1));  }	  	compilable	  [FE]  MissingArgumentException  	34	4	add
502	[BUG]  [BUGGY]  [FE]  MissingArgumentException  [FE]          MissingArgumentException    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(0,    2));    tokens.add(arg.substring(0,  1));  tokens.add(arg.substring(0,  2));  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	                tokens.add(arg.substring(0,        2));        tokens.add(arg.substring(0,    1));    tokens.add(arg.substring(0,  2));	  	compilable	  [FE]  MissingArgumentException  	34	4	add
503	[BUG]  [BUGGY]          tokens.add(arg.substring(0,    2));    tokens.add(arg.substring(0,  1));  tokens.add(arg.substring(0,  2));  [FE]  MissingArgumentException  [FE]          MissingArgumentException    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(0,    2));    tokens.add(arg.substring(0,  1));  tokens.add(arg.substring(0,  2));  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                tokens.add(arg.substring(0,        2));        tokens.add(arg.substring(0,    1));    tokens.add(arg.substring(0,  2));	  	compilable	  [FE]  MissingArgumentException  	34	4	add
504	[BUG]  [BUGGY]  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1));  tokens.add(arg.substring(4));  }  [CE]  'else'  without  'if'  [FE]    ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1));  tokens.add(arg.substring(4));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1));  tokens.add(arg.substring(4));  }	          tokens.add(arg.substring(1));    tokens.add(arg.substring(4));    	non-compiled	[CE]  'else'  without  'if'	14	None	replace
505	[BUG]  [BUGGY]  else  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1));  tokens.add(arg.substring(4));  }  [CE]  'else'  without  'if'  [FE]      ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]  else  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1));  tokens.add(arg.substring(4));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	else  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1));  tokens.add(arg.substring(4));  }	          tokens.add(arg.substring(1));    tokens.add(arg.substring(4));    	non-compiled	[CE]  'else'  without  'if'	14	None	replace
506	[BUG]  [BUGGY]  if(options.hasOption(arg.substring(1,  2)))  {  tokens.add(arg.substring(1));  tokens.add(arg.substring(4));  }  [CE]  'else'  without  'if'  [FE]        ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]  if(options.hasOption(arg.substring(1,  2)))  {  tokens.add(arg.substring(1));  tokens.add(arg.substring(4));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	if(options.hasOption(arg.substring(1,  2)))  {  tokens.add(arg.substring(1));  tokens.add(arg.substring(4));  }	          tokens.add(arg.substring(1));    tokens.add(arg.substring(4));    	non-compiled	[CE]  'else'  without  'if'	14	None	replace
507	[BUG]  [BUGGY]  else  if(options.hasOption(arg.substring(1,  2)))  {  tokens.add(arg.substring(1));  tokens.add(arg.substring(4));  }  [CE]  'else'  without  'if'  [FE]          ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]  else  if(options.hasOption(arg.substring(1,  2)))  {  tokens.add(arg.substring(1));  tokens.add(arg.substring(4));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	else  if(options.hasOption(arg.substring(1,  2)))  {  tokens.add(arg.substring(1));  tokens.add(arg.substring(4));  }	          tokens.add(arg.substring(1));    tokens.add(arg.substring(4));    	non-compiled	[CE]  'else'  without  'if'	14	None	replace
508	[BUG]  [BUGGY]  if(options.hasOption(arg.substring(0,  1)))  {  tokens.add(arg.substring(1));  }  else  {  tokens.add(arg.substring(2));  }  [CE]  'else'  without  'if'  [FE]            ComparisonFailure      [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]  if(options.hasOption(arg.substring(0,  1)))  {  tokens.add(arg.substring(1));  }  else  {  tokens.add(arg.substring(2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	if(options.hasOption(arg.substring(0,  1)))  {  tokens.add(arg.substring(1));  }  else  {  tokens.add(arg.substring(2));  }	  if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(1));    }    else    {    tokens.add(arg.substring(2));    }    	non-compiled	[CE]  'else'  without  'if'	79	None	replace
509	[BUG]  [BUGGY]  parent.add(arg.substring(0,  2));  [CE]  'else'  without  'if'  [FE]        ComparisonFailure      [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]  parent.add(arg.substring(0,  2));  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	parent.add(arg.substring(0,  2));	          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(1,    2));    }    if(options.hasOption(arg.substring(0,    2)))    <    tokens.add(arg.substring(1,    2));    }    	non-compiled	[CE]  'else'  without  'if'	154	None	replace
510	[BUG]  [BUGGY]  else  if(options.hasOption(arg.substring(0,  1)))  {  tokens.add(arg.substring(1,  2));  }  [CE]  'else'  without  'if'  [FE]    ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]  else  if(options.hasOption(arg.substring(0,  1)))  {  tokens.add(arg.substring(1,  2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	else  if(options.hasOption(arg.substring(0,  1)))  {  tokens.add(arg.substring(1,  2));  }	          tokens.add(arg.substring(2));    if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(1,    2));    }    	non-compiled	[CE]  'else'  without  'if'	159	None	replace
511	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(1,    2));    }    if(options.hasOption(arg.substring(2,  2)))  {  tokens.add(arg.substring(1,  2));  }  if(options.hasOption(arg.substring(2,  2)))  {  tokens.add(arg.substring(1,  2));  }  if(options.hasOption(arg.substring(2,  2)))  {  tokens.add(arg.substring(1,  2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	                if(options.hasOption(arg.substring(0,        2)))        {        tokens.add(arg.substring(1,        2));        }        if(options.hasOption(arg.substring(2,    2)))    {    tokens.add(arg.substring(1,    2));    }    if(options.hasOption(arg.substring(2,  2)))  {  tokens.add(arg.substring(1,  2));  }  if(options.hasOption(arg.substring(2,  2)))  {  tokens.add(arg.substring(1,  2));  }	  	compilable	  [FE]  ComparisonFailure  	45	4	add
512	[BUG]  [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(1,    2));    }    if(options.hasOption(arg.substring(2,  2)))  {  tokens.add(arg.substring(1,  2));  }  if(options.hasOption(arg.substring(2,  2)))  {  tokens.add(arg.substring(1,  2));  }  if(options.hasOption(arg.substring(2,  2)))  {  tokens.add(arg.substring(1,  2));  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(1,    2));    }    if(options.hasOption(arg.substring(2,  2)))  {  tokens.add(arg.substring(1,  2));  }  if(options.hasOption(arg.substring(2,  2)))  {  tokens.add(arg.substring(1,  2));  }  if(options.hasOption(arg.substring(2,  2)))  {  tokens.add(arg.substring(1,  2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                if(options.hasOption(arg.substring(0,        2)))        {        tokens.add(arg.substring(1,        2));        }        if(options.hasOption(arg.substring(2,    2)))    {    tokens.add(arg.substring(1,    2));    }    if(options.hasOption(arg.substring(2,  2)))  {  tokens.add(arg.substring(1,  2));  }  if(options.hasOption(arg.substring(2,  2)))  {  tokens.add(arg.substring(1,  2));  }	  	compilable	  [FE]  ComparisonFailure  	45	4	add
513	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(1,    2));    }    if(options.hasOption(arg.substring(2,  2)))  {  tokens.add(arg.substring(1,  2));  }  if(options.hasOption(arg.substring(2,  2)))  {  tokens.add(arg.substring(1,  2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	                if(options.hasOption(arg.substring(0,        2)))        {        tokens.add(arg.substring(1,        2));        }        if(options.hasOption(arg.substring(2,    2)))    {    tokens.add(arg.substring(1,    2));    }    if(options.hasOption(arg.substring(2,  2)))  {  tokens.add(arg.substring(1,  2));  }	  	compilable	  [FE]  ComparisonFailure  	45	4	add
514	[BUG]  [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(1,    2));    }    if(options.hasOption(arg.substring(2,  2)))  {  tokens.add(arg.substring(1,  2));  }  if(options.hasOption(arg.substring(2,  2)))  {  tokens.add(arg.substring(1,  2));  }  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(1,    2));    }    if(options.hasOption(arg.substring(2,  2)))  {  tokens.add(arg.substring(1,  2));  }  if(options.hasOption(arg.substring(2,  2)))  {  tokens.add(arg.substring(1,  2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                if(options.hasOption(arg.substring(0,        2)))        {        tokens.add(arg.substring(1,        2));        }        if(options.hasOption(arg.substring(2,    2)))    {    tokens.add(arg.substring(1,    2));    }    if(options.hasOption(arg.substring(2,  2)))  {  tokens.add(arg.substring(1,  2));  }	  	compilable	  [FE]  ComparisonFailure  	45	4	add
515	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(1,    2));    }    if(options.hasOption(arg.substring(2,  2)))  {  tokens.add(arg.substring(1,  2));  }  if(options.hasOption(arg.substring(1,  2)))  {  tokens.add(arg.substring(1,  2));  }  if(options.hasOption(arg.substring(2,  2)))  {  tokens.add(arg.substring(1,  2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	                if(options.hasOption(arg.substring(0,        2)))        {        tokens.add(arg.substring(1,        2));        }        if(options.hasOption(arg.substring(2,    2)))    {    tokens.add(arg.substring(1,    2));    }    if(options.hasOption(arg.substring(1,  2)))  {  tokens.add(arg.substring(1,  2));  }  if(options.hasOption(arg.substring(2,  2)))  {  tokens.add(arg.substring(1,  2));  }	  	compilable	  [FE]  ComparisonFailure  	45	4	add
516	[BUG]  [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(1,    2));    }    if(options.hasOption(arg.substring(2,  2)))  {  tokens.add(arg.substring(1,  2));  }  if(options.hasOption(arg.substring(1,  2)))  {  tokens.add(arg.substring(1,  2));  }  if(options.hasOption(arg.substring(2,  2)))  {  tokens.add(arg.substring(1,  2));  }  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(1,    2));    }    if(options.hasOption(arg.substring(2,  2)))  {  tokens.add(arg.substring(1,  2));  }  if(options.hasOption(arg.substring(1,  2)))  {  tokens.add(arg.substring(1,  2));  }  if(options.hasOption(arg.substring(2,  2)))  {  tokens.add(arg.substring(1,  2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                if(options.hasOption(arg.substring(0,        2)))        {        tokens.add(arg.substring(1,        2));        }        if(options.hasOption(arg.substring(2,    2)))    {    tokens.add(arg.substring(1,    2));    }    if(options.hasOption(arg.substring(1,  2)))  {  tokens.add(arg.substring(1,  2));  }  if(options.hasOption(arg.substring(2,  2)))  {  tokens.add(arg.substring(1,  2));  }	  	compilable	  [FE]  ComparisonFailure  	45	4	add
517	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]          ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(1,    2));    }    if(options.hasOption(arg.substring(2,  2)))  {  tokens.add(arg.substring(1,  2));  }  if(options.hasOption(arg.substring(2,  2)))  {  tokens.add(arg.substring(1,  2));  }  if(options.hasOption(arg.substring(3,  2)))  {  tokens.add(arg.substring(1,  2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	                if(options.hasOption(arg.substring(0,        2)))        {        tokens.add(arg.substring(1,        2));        }        if(options.hasOption(arg.substring(2,    2)))    {    tokens.add(arg.substring(1,    2));    }    if(options.hasOption(arg.substring(2,  2)))  {  tokens.add(arg.substring(1,  2));  }  if(options.hasOption(arg.substring(3,  2)))  {  tokens.add(arg.substring(1,  2));  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	45	4	add
518	[BUG]  [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(1,    2));    }    if(options.hasOption(arg.substring(2,  2)))  {  tokens.add(arg.substring(1,  2));  }  if(options.hasOption(arg.substring(2,  2)))  {  tokens.add(arg.substring(1,  2));  }  if(options.hasOption(arg.substring(3,  2)))  {  tokens.add(arg.substring(1,  2));  }  [FE]  StringIndexOutOfBoundsException  [FE]          ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(1,    2));    }    if(options.hasOption(arg.substring(2,  2)))  {  tokens.add(arg.substring(1,  2));  }  if(options.hasOption(arg.substring(2,  2)))  {  tokens.add(arg.substring(1,  2));  }  if(options.hasOption(arg.substring(3,  2)))  {  tokens.add(arg.substring(1,  2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                if(options.hasOption(arg.substring(0,        2)))        {        tokens.add(arg.substring(1,        2));        }        if(options.hasOption(arg.substring(2,    2)))    {    tokens.add(arg.substring(1,    2));    }    if(options.hasOption(arg.substring(2,  2)))  {  tokens.add(arg.substring(1,  2));  }  if(options.hasOption(arg.substring(3,  2)))  {  tokens.add(arg.substring(1,  2));  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	45	4	add
519	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]            ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(1,    2));    }    if(options.hasOption(arg.substring(2,  2)))  {  tokens.add(arg.substring(1,  2));  }  if(options.hasOption(arg.substring(3,  2)))  {  tokens.add(arg.substring(1,  2));  }  if(options.hasOption(arg.substring(2,  2)))  {  tokens.add(arg.substring(1,  2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	                if(options.hasOption(arg.substring(0,        2)))        {        tokens.add(arg.substring(1,        2));        }        if(options.hasOption(arg.substring(2,    2)))    {    tokens.add(arg.substring(1,    2));    }    if(options.hasOption(arg.substring(3,  2)))  {  tokens.add(arg.substring(1,  2));  }  if(options.hasOption(arg.substring(2,  2)))  {  tokens.add(arg.substring(1,  2));  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	45	4	add
520	[BUG]  [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(1,    2));    }    if(options.hasOption(arg.substring(2,  2)))  {  tokens.add(arg.substring(1,  2));  }  if(options.hasOption(arg.substring(3,  2)))  {  tokens.add(arg.substring(1,  2));  }  if(options.hasOption(arg.substring(2,  2)))  {  tokens.add(arg.substring(1,  2));  }  [FE]  StringIndexOutOfBoundsException  [FE]            ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(1,    2));    }    if(options.hasOption(arg.substring(2,  2)))  {  tokens.add(arg.substring(1,  2));  }  if(options.hasOption(arg.substring(3,  2)))  {  tokens.add(arg.substring(1,  2));  }  if(options.hasOption(arg.substring(2,  2)))  {  tokens.add(arg.substring(1,  2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                if(options.hasOption(arg.substring(0,        2)))        {        tokens.add(arg.substring(1,        2));        }        if(options.hasOption(arg.substring(2,    2)))    {    tokens.add(arg.substring(1,    2));    }    if(options.hasOption(arg.substring(3,  2)))  {  tokens.add(arg.substring(1,  2));  }  if(options.hasOption(arg.substring(2,  2)))  {  tokens.add(arg.substring(1,  2));  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	45	4	add
521	[BUG]  [BUGGY]  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  else  {  options.addOption(arg.substring(0,  2));  }  [CE]  'else'  without  'if'  [FE]              MissingArgumentException      [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  else  {  options.addOption(arg.substring(0,  2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  else  {  options.addOption(arg.substring(0,  2));  }	          tokens.add(arg.substring(0,    2));    if(options.hasOption(arg.substring(0,    2))    {    tokens.add(arg.substring(0,    2));    }    else    {    options.addOption(arg.substring(0,    2));    }    	non-compiled	[CE]  'else'  without  'if'	129	None	replace
522	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(i    +    1));    tokens.add(arg.substring(i  +  1));  tokens.add(arg.substring(i  +  1));  tokens.add(arg.substring(i  +  1));  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	                tokens.add(arg.substring(i        +        1));        tokens.add(arg.substring(i    +    1));    tokens.add(arg.substring(i  +  1));  tokens.add(arg.substring(i  +  1));	  	compilable	  [FE]  ComparisonFailure  	83	4	add
523	[BUG]  [BUGGY]          tokens.add(arg.substring(i    +    1));    tokens.add(arg.substring(i  +  1));  tokens.add(arg.substring(i  +  1));  tokens.add(arg.substring(i  +  1));  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(i    +    1));    tokens.add(arg.substring(i  +  1));  tokens.add(arg.substring(i  +  1));  tokens.add(arg.substring(i  +  1));  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                tokens.add(arg.substring(i        +        1));        tokens.add(arg.substring(i    +    1));    tokens.add(arg.substring(i  +  1));  tokens.add(arg.substring(i  +  1));	  	compilable	  [FE]  ComparisonFailure  	83	4	add
524	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(i    +    1));    tokens.add(arg.substring(i  +  1));  tokens.add(arg.substring(i  +  2));  tokens.add(arg.substring(i  +  1));  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	                tokens.add(arg.substring(i        +        1));        tokens.add(arg.substring(i    +    1));    tokens.add(arg.substring(i  +  2));  tokens.add(arg.substring(i  +  1));	  	compilable	  [FE]  ComparisonFailure  	83	4	add
525	[BUG]  [BUGGY]          tokens.add(arg.substring(i    +    1));    tokens.add(arg.substring(i  +  1));  tokens.add(arg.substring(i  +  2));  tokens.add(arg.substring(i  +  1));  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(i    +    1));    tokens.add(arg.substring(i  +  1));  tokens.add(arg.substring(i  +  2));  tokens.add(arg.substring(i  +  1));  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                tokens.add(arg.substring(i        +        1));        tokens.add(arg.substring(i    +    1));    tokens.add(arg.substring(i  +  2));  tokens.add(arg.substring(i  +  1));	  	compilable	  [FE]  ComparisonFailure  	83	4	add
526	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(i    +    1));    tokens.add(arg.substring(i  +  1));  tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(i  +  1));  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	                tokens.add(arg.substring(i        +        1));        tokens.add(arg.substring(i    +    1));    tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(i  +  1));	  	compilable	  [FE]  ComparisonFailure  	83	4	add
527	[BUG]  [BUGGY]          tokens.add(arg.substring(i    +    1));    tokens.add(arg.substring(i  +  1));  tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(i  +  1));  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(i    +    1));    tokens.add(arg.substring(i  +  1));  tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(i  +  1));  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                tokens.add(arg.substring(i        +        1));        tokens.add(arg.substring(i    +    1));    tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(i  +  1));	  	compilable	  [FE]  ComparisonFailure  	83	4	add
528	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(i    +    1));    tokens.add(arg.substring(i  +  1));  tokens.add(arg.substring(i  +  1));  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	                tokens.add(arg.substring(i        +        1));        tokens.add(arg.substring(i    +    1));    tokens.add(arg.substring(i  +  1));	  	compilable	  [FE]  ComparisonFailure  	83	4	add
529	[BUG]  [BUGGY]          tokens.add(arg.substring(i    +    1));    tokens.add(arg.substring(i  +  1));  tokens.add(arg.substring(i  +  1));  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(i    +    1));    tokens.add(arg.substring(i  +  1));  tokens.add(arg.substring(i  +  1));  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                tokens.add(arg.substring(i        +        1));        tokens.add(arg.substring(i    +    1));    tokens.add(arg.substring(i  +  1));	  	compilable	  [FE]  ComparisonFailure  	83	4	add
530	[BUG]  [BUGGY]  tokens.add(arg.substring(i,  2));  TokenBuffer  tokens  =  new  TokenBuffer(arg.substring(i).toString());  [CE]  'else'  without  'if'  [FE]              ComparisonFailure      [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]  tokens.add(arg.substring(i,  2));  TokenBuffer  tokens  =  new  TokenBuffer(arg.substring(i).toString());  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	tokens.add(arg.substring(i,  2));  TokenBuffer  tokens  =  new  TokenBuffer(arg.substring(i).toString());	          tokens.add(arg.substring(i));    TokenBuffer    tokens    =    new    TokenBuffer(arg.substring(i).toString());    	non-compiled	[CE]  'else'  without  'if'	137	None	replace
531	[BUG]  [BUGGY]  tokens.add(arg.substring(i,  2));  TokenBuffer  tokens  =  new  TokenBuffer(arg.substring(i),  arg.toString());  [CE]  'else'  without  'if'  [FE]                ComparisonFailure      [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]  tokens.add(arg.substring(i,  2));  TokenBuffer  tokens  =  new  TokenBuffer(arg.substring(i),  arg.toString());  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	tokens.add(arg.substring(i,  2));  TokenBuffer  tokens  =  new  TokenBuffer(arg.substring(i),  arg.toString());	          tokens.add(arg.substring(i));    TokenBuffer    tokens    =    new    TokenBuffer(arg.substring(i).toString());    	non-compiled	[CE]  'else'  without  'if'	137	None	replace
532	[BUG]  [BUGGY]  tokens.add(arg.substring(i  +  1));  TokenBuffer  tokens  =  new  TokenBuffer(arg.substring(i  +  2).toString());  [CE]  'else'  without  'if'  [FE]                  ComparisonFailure      [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]  tokens.add(arg.substring(i  +  1));  TokenBuffer  tokens  =  new  TokenBuffer(arg.substring(i  +  2).toString());  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	tokens.add(arg.substring(i  +  1));  TokenBuffer  tokens  =  new  TokenBuffer(arg.substring(i  +  2).toString());	          tokens.add(arg.substring(i));    TokenBuffer    tokens    =    new    TokenBuffer(arg.substring(i).toString());    	non-compiled	[CE]  'else'  without  'if'	137	None	replace
533	[BUG]  [BUGGY]  tokens.add(arg.substring(i  +  1));  TokenBuffer  tokens  =  new  TokenBuffer(arg.substring(i  +  2),  arg.toString());  [CE]  'else'  without  'if'  [FE]                    ComparisonFailure      [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]  tokens.add(arg.substring(i  +  1));  TokenBuffer  tokens  =  new  TokenBuffer(arg.substring(i  +  2),  arg.toString());  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	tokens.add(arg.substring(i  +  1));  TokenBuffer  tokens  =  new  TokenBuffer(arg.substring(i  +  2),  arg.toString());	          tokens.add(arg.substring(i));    TokenBuffer    tokens    =    new    TokenBuffer(arg.substring(i).toString());    	non-compiled	[CE]  'else'  without  'if'	137	None	replace
534	[BUG]  [BUGGY]  while(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  [CE]  'else'  without  'if'  [FE]              MissingArgumentException      [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]  while(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	while(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));	          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    }    while(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    }    timeout    	non-compiled	[CE]  'else'  without  'if'	74	None	replace
535	[BUG]  [BUGGY]  while(options.hasOption(arg.substring(0,  1)))  {  tokens.add(arg.substring(0,  2));  [CE]  'else'  without  'if'  [FE]                MissingArgumentException      [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]  while(options.hasOption(arg.substring(0,  1)))  {  tokens.add(arg.substring(0,  2));  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	while(options.hasOption(arg.substring(0,  1)))  {  tokens.add(arg.substring(0,  2));	          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    }    while(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    }    timeout    	non-compiled	[CE]  'else'  without  'if'	74	None	replace
536	[BUG]  [BUGGY]  while(options.hasOption(arg.substring(0,  2))  {  tokens.add(arg.substring(0,  2));  [CE]  ')'  expected  [FE]                  MissingArgumentException      [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]  while(options.hasOption(arg.substring(0,  2))  {  tokens.add(arg.substring(0,  2));  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	while(options.hasOption(arg.substring(0,  2))  {  tokens.add(arg.substring(0,  2));	          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    }    while(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    }    timeout    	non-compiled	[CE]  ')'  expected	74	None	replace
537	[BUG]  [BUGGY]  else  if(options.hasOption(arg.substring(0,  1)))  {  tokens.add(arg.substring(0,  2));  }  [CE]  'else'  without  'if'  [FE]    ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]  else  if(options.hasOption(arg.substring(0,  1)))  {  tokens.add(arg.substring(0,  2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	else  if(options.hasOption(arg.substring(0,  1)))  {  tokens.add(arg.substring(0,  2));  }	          tokens.add(arg.substring(2));    if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    }    	non-compiled	[CE]  'else'  without  'if'	53	None	replace
538	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(2));    if(options.hasOption(arg.substring(1)))  {  tokens.add(arg.substring(2));  }  tokens.add(arg.substring(2));  if(options.hasOption(arg.substring(2)))  {  tokens.add(arg.substring(2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	                tokens.add(arg.substring(2));        if(options.hasOption(arg.substring(1)))    {    tokens.add(arg.substring(2));    }    tokens.add(arg.substring(2));  if(options.hasOption(arg.substring(2)))  {  tokens.add(arg.substring(2));  }	  	compilable	  [FE]  ComparisonFailure  	56	3	add
539	[BUG]  [BUGGY]          tokens.add(arg.substring(2));    if(options.hasOption(arg.substring(1)))  {  tokens.add(arg.substring(2));  }  tokens.add(arg.substring(2));  if(options.hasOption(arg.substring(2)))  {  tokens.add(arg.substring(2));  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(2));    if(options.hasOption(arg.substring(1)))  {  tokens.add(arg.substring(2));  }  tokens.add(arg.substring(2));  if(options.hasOption(arg.substring(2)))  {  tokens.add(arg.substring(2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                tokens.add(arg.substring(2));        if(options.hasOption(arg.substring(1)))    {    tokens.add(arg.substring(2));    }    tokens.add(arg.substring(2));  if(options.hasOption(arg.substring(2)))  {  tokens.add(arg.substring(2));  }	  	compilable	  [FE]  ComparisonFailure  	56	3	add
540	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(2));    if(options.hasOption(arg.substring(1)))  {  tokens.add(arg.substring(2));  }  tokens.add(arg.substring(2));  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	                tokens.add(arg.substring(2));        if(options.hasOption(arg.substring(1)))    {    tokens.add(arg.substring(2));    }    tokens.add(arg.substring(2));	  	compilable	  [FE]  ComparisonFailure  	56	3	add
541	[BUG]  [BUGGY]          tokens.add(arg.substring(2));    if(options.hasOption(arg.substring(1)))  {  tokens.add(arg.substring(2));  }  tokens.add(arg.substring(2));  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(2));    if(options.hasOption(arg.substring(1)))  {  tokens.add(arg.substring(2));  }  tokens.add(arg.substring(2));  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                tokens.add(arg.substring(2));        if(options.hasOption(arg.substring(1)))    {    tokens.add(arg.substring(2));    }    tokens.add(arg.substring(2));	  	compilable	  [FE]  ComparisonFailure  	56	3	add
542	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(2));    if(options.hasOption(arg.substring(1)))  {  tokens.add(arg.substring(2));  }  tokens.add(arg.substring(2));  if(options.hasOption(arg.substring(1)))  {  tokens.add(arg.substring(2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	                tokens.add(arg.substring(2));        if(options.hasOption(arg.substring(1)))    {    tokens.add(arg.substring(2));    }    tokens.add(arg.substring(2));  if(options.hasOption(arg.substring(1)))  {  tokens.add(arg.substring(2));  }	  	compilable	  [FE]  ComparisonFailure  	56	3	add
543	[BUG]  [BUGGY]          tokens.add(arg.substring(2));    if(options.hasOption(arg.substring(1)))  {  tokens.add(arg.substring(2));  }  tokens.add(arg.substring(2));  if(options.hasOption(arg.substring(1)))  {  tokens.add(arg.substring(2));  }  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(2));    if(options.hasOption(arg.substring(1)))  {  tokens.add(arg.substring(2));  }  tokens.add(arg.substring(2));  if(options.hasOption(arg.substring(1)))  {  tokens.add(arg.substring(2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                tokens.add(arg.substring(2));        if(options.hasOption(arg.substring(1)))    {    tokens.add(arg.substring(2));    }    tokens.add(arg.substring(2));  if(options.hasOption(arg.substring(1)))  {  tokens.add(arg.substring(2));  }	  	compilable	  [FE]  ComparisonFailure  	56	3	add
544	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(2));    if(options.hasOption(arg.substring(1)))  {  tokens.add(arg.substring(2));  }  tokens.add(arg.substring(1));  if(options.hasOption(arg.substring(2)))  {  tokens.add(arg.substring(2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	                tokens.add(arg.substring(2));        if(options.hasOption(arg.substring(1)))    {    tokens.add(arg.substring(2));    }    tokens.add(arg.substring(1));  if(options.hasOption(arg.substring(2)))  {  tokens.add(arg.substring(2));  }	  	compilable	  [FE]  ComparisonFailure  	56	3	add
545	[BUG]  [BUGGY]          tokens.add(arg.substring(2));    if(options.hasOption(arg.substring(1)))  {  tokens.add(arg.substring(2));  }  tokens.add(arg.substring(1));  if(options.hasOption(arg.substring(2)))  {  tokens.add(arg.substring(2));  }  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(2));    if(options.hasOption(arg.substring(1)))  {  tokens.add(arg.substring(2));  }  tokens.add(arg.substring(1));  if(options.hasOption(arg.substring(2)))  {  tokens.add(arg.substring(2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                tokens.add(arg.substring(2));        if(options.hasOption(arg.substring(1)))    {    tokens.add(arg.substring(2));    }    tokens.add(arg.substring(1));  if(options.hasOption(arg.substring(2)))  {  tokens.add(arg.substring(2));  }	  	compilable	  [FE]  ComparisonFailure  	56	3	add
546	[BUG]  [BUGGY]          tokens.add(arg.substring(2));    if(options.hasOption(arg.substring(1)))  {  tokens.add(arg.substring(2));  }  tokens.add(arg.substring(2));  if(options.hasOption(arg.substring(2)))  {  tokens.add(arg.substring(2));  [CE]  'else'  without  'if'  [FE]            ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(2));    if(options.hasOption(arg.substring(1)))  {  tokens.add(arg.substring(2));  }  tokens.add(arg.substring(2));  if(options.hasOption(arg.substring(2)))  {  tokens.add(arg.substring(2));  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                tokens.add(arg.substring(2));        if(options.hasOption(arg.substring(1)))    {    tokens.add(arg.substring(2));    }    tokens.add(arg.substring(2));  if(options.hasOption(arg.substring(2)))  {  tokens.add(arg.substring(2));	  	non-compiled	[CE]  'else'  without  'if'	56	None	add
547	[BUG]  [BUGGY]  if(options.hasOption(arg.substring(0,  2)))  {  options.add(arg.substring(0,  2));  }  [CE]  'else'  without  'if'  [FE]          ComparisonFailure      [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]  if(options.hasOption(arg.substring(0,  2)))  {  options.add(arg.substring(0,  2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	if(options.hasOption(arg.substring(0,  2)))  {  options.add(arg.substring(0,  2));  }	  options.add(arg.substring(0,    2));    	non-compiled	[CE]  'else'  without  'if'	29	None	replace
548	[BUG]  [BUGGY]  [FE]  MissingArgumentException  [FE]    MissingArgumentException    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(0,    2));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  tokens.add(arg.substring(0,  2));  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	                tokens.add(arg.substring(0,        2));        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    tokens.add(arg.substring(0,  2));	  	compilable	  [FE]  MissingArgumentException  	145	4	add
549	[BUG]  [BUGGY]          tokens.add(arg.substring(0,    2));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  tokens.add(arg.substring(0,  2));  [FE]  MissingArgumentException  [FE]    MissingArgumentException    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(0,    2));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  tokens.add(arg.substring(0,  2));  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                tokens.add(arg.substring(0,        2));        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    tokens.add(arg.substring(0,  2));	  	compilable	  [FE]  MissingArgumentException  	145	4	add
550	[BUG]  [BUGGY]  [FE]  MissingArgumentException  [FE]      MissingArgumentException    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(0,    2));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  tokens.add(arg.substring(0,  2));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	                tokens.add(arg.substring(0,        2));        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    tokens.add(arg.substring(0,  2));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	compilable	  [FE]  MissingArgumentException  	145	4	add
551	[BUG]  [BUGGY]          tokens.add(arg.substring(0,    2));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  tokens.add(arg.substring(0,  2));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  MissingArgumentException  [FE]      MissingArgumentException    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(0,    2));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  tokens.add(arg.substring(0,  2));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                tokens.add(arg.substring(0,        2));        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    tokens.add(arg.substring(0,  2));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	compilable	  [FE]  MissingArgumentException  	145	4	add
552	[BUG]  [BUGGY]  [FE]  MissingArgumentException  [FE]        MissingArgumentException    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(0,    2));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  tokens.add(arg.substring(0,  2));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	                tokens.add(arg.substring(0,        2));        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    tokens.add(arg.substring(0,  2));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }	  	compilable	  [FE]  MissingArgumentException  	145	4	add
553	[BUG]  [BUGGY]          tokens.add(arg.substring(0,    2));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  tokens.add(arg.substring(0,  2));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  [FE]  MissingArgumentException  [FE]        MissingArgumentException    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(0,    2));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  tokens.add(arg.substring(0,  2));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                tokens.add(arg.substring(0,        2));        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    tokens.add(arg.substring(0,  2));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }	  	compilable	  [FE]  MissingArgumentException  	145	4	add
554	[BUG]  [BUGGY]          tokens.add(arg.substring(0,    2));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  tokens.add(arg.substring(0,  2));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  [CE]  'else'  without  'if'  [FE]          MissingArgumentException    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(0,    2));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  tokens.add(arg.substring(0,  2));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                tokens.add(arg.substring(0,        2));        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    tokens.add(arg.substring(0,  2));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));	  	non-compiled	[CE]  'else'  without  'if'	145	None	add
555	[BUG]  [BUGGY]          tokens.add(arg.substring(0,    2));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  [CE]  'else'  without  'if'  [FE]            MissingArgumentException    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(0,    2));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                tokens.add(arg.substring(0,        2));        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }	  	non-compiled	[CE]  'else'  without  'if'	145	None	add
556	[BUG]  [BUGGY]  tokens.add(arg.substring(0,  2));  //  property='else'  with  'if'  [CE]  'else'  without  'if'  [FE]            ComparisonFailure      [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]  tokens.add(arg.substring(0,  2));  //  property='else'  with  'if'  [BUGGY]      }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	tokens.add(arg.substring(0,  2));  //  property='else'  with  'if'	  tokens.add(arg.substring(0,    2));    //    property='else'    without    'if'    	non-compiled	[CE]  'else'  without  'if'	120	None	replace
557	[BUG]  [BUGGY]  tokens.add(arg.substring(0,  2));  //  property=' "'  without  'if'  [CE]  'else'  without  'if'  [FE]              ComparisonFailure      [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]  tokens.add(arg.substring(0,  2));  //  property=' "'  without  'if'  [BUGGY]      }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	tokens.add(arg.substring(0,  2));  //  property=' "'  without  'if'	  tokens.add(arg.substring(0,    2));    //    property='else'    without    'if'    	non-compiled	[CE]  'else'  without  'if'	120	None	replace
558	[BUG]  [BUGGY]  tokens.add(arg.substring(i  +  2));  TokenBuffer  tokens  =  new  TokenBuffer(arg.substring(i  +  1));  [CE]  'else'  without  'if'  [FE]        ComparisonFailure      [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]  tokens.add(arg.substring(i  +  2));  TokenBuffer  tokens  =  new  TokenBuffer(arg.substring(i  +  1));  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	tokens.add(arg.substring(i  +  2));  TokenBuffer  tokens  =  new  TokenBuffer(arg.substring(i  +  1));	          tokens.add(arg.substring(i    +    2));    TokenBuffer    tokens    =    new    TokenBuffer(arg.substring(i    +    2));    	non-compiled	[CE]  'else'  without  'if'	149	None	replace
559	[BUG]  [BUGGY]  tokens.add(arg.substring(i  +  1));  TokenBuffer  tokens  =  new  TokenBuffer(arg.substring(i  +  2));  [CE]  'else'  without  'if'  [FE]          ComparisonFailure      [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]  tokens.add(arg.substring(i  +  1));  TokenBuffer  tokens  =  new  TokenBuffer(arg.substring(i  +  2));  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	tokens.add(arg.substring(i  +  1));  TokenBuffer  tokens  =  new  TokenBuffer(arg.substring(i  +  2));	          tokens.add(arg.substring(i    +    2));    TokenBuffer    tokens    =    new    TokenBuffer(arg.substring(i    +    2));    	non-compiled	[CE]  'else'  without  'if'	149	None	replace
560	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(1,    2));    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1,  2));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1,  2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	                if(options.hasOption(arg.substring(0,        2)))        {        tokens.add(arg.substring(1,        2));        }        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(1,    2));    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1,  2));  }	  	compilable	  [FE]  ComparisonFailure  	41	4	add
561	[BUG]  [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(1,    2));    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1,  2));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1,  2));  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(1,    2));    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1,  2));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1,  2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                if(options.hasOption(arg.substring(0,        2)))        {        tokens.add(arg.substring(1,        2));        }        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(1,    2));    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1,  2));  }	  	compilable	  [FE]  ComparisonFailure  	41	4	add
562	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(1,    2));    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1,  2));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1,  2));  }  if(options.hasOption(arg.substring(1,  2)))  {  tokens.add(arg.substring(1,  2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	                if(options.hasOption(arg.substring(0,        2)))        {        tokens.add(arg.substring(1,        2));        }        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(1,    2));    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1,  2));  }  if(options.hasOption(arg.substring(1,  2)))  {  tokens.add(arg.substring(1,  2));  }	  	compilable	  [FE]  ComparisonFailure  	41	4	add
563	[BUG]  [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(1,    2));    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1,  2));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1,  2));  }  if(options.hasOption(arg.substring(1,  2)))  {  tokens.add(arg.substring(1,  2));  }  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(1,    2));    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1,  2));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1,  2));  }  if(options.hasOption(arg.substring(1,  2)))  {  tokens.add(arg.substring(1,  2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                if(options.hasOption(arg.substring(0,        2)))        {        tokens.add(arg.substring(1,        2));        }        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(1,    2));    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1,  2));  }  if(options.hasOption(arg.substring(1,  2)))  {  tokens.add(arg.substring(1,  2));  }	  	compilable	  [FE]  ComparisonFailure  	41	4	add
564	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(1,    2));    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1,  2));  }  if(options.hasOption(arg.substring(1,  2)))  {  tokens.add(arg.substring(1,  2));  }  if(options.hasOption(arg.substring(1,  2)))  {  tokens.add(arg.substring(1,  2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	                if(options.hasOption(arg.substring(0,        2)))        {        tokens.add(arg.substring(1,        2));        }        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(1,    2));    }    if(options.hasOption(arg.substring(1,  2)))  {  tokens.add(arg.substring(1,  2));  }  if(options.hasOption(arg.substring(1,  2)))  {  tokens.add(arg.substring(1,  2));  }	  	compilable	  [FE]  ComparisonFailure  	41	4	add
565	[BUG]  [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(1,    2));    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1,  2));  }  if(options.hasOption(arg.substring(1,  2)))  {  tokens.add(arg.substring(1,  2));  }  if(options.hasOption(arg.substring(1,  2)))  {  tokens.add(arg.substring(1,  2));  }  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(1,    2));    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1,  2));  }  if(options.hasOption(arg.substring(1,  2)))  {  tokens.add(arg.substring(1,  2));  }  if(options.hasOption(arg.substring(1,  2)))  {  tokens.add(arg.substring(1,  2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                if(options.hasOption(arg.substring(0,        2)))        {        tokens.add(arg.substring(1,        2));        }        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(1,    2));    }    if(options.hasOption(arg.substring(1,  2)))  {  tokens.add(arg.substring(1,  2));  }  if(options.hasOption(arg.substring(1,  2)))  {  tokens.add(arg.substring(1,  2));  }	  	compilable	  [FE]  ComparisonFailure  	41	4	add
566	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(1,    2));    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1,  2));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1,  2));  }  else  if(options.hasOption(arg.substring(1,  2)))  {  tokens.add(arg.substring(1,  2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	                if(options.hasOption(arg.substring(0,        2)))        {        tokens.add(arg.substring(1,        2));        }        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(1,    2));    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1,  2));  }  else  if(options.hasOption(arg.substring(1,  2)))  {  tokens.add(arg.substring(1,  2));  }	  	compilable	  [FE]  ComparisonFailure  	41	4	add
567	[BUG]  [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(1,    2));    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1,  2));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1,  2));  }  else  if(options.hasOption(arg.substring(1,  2)))  {  tokens.add(arg.substring(1,  2));  }  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(1,    2));    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1,  2));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1,  2));  }  else  if(options.hasOption(arg.substring(1,  2)))  {  tokens.add(arg.substring(1,  2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                if(options.hasOption(arg.substring(0,        2)))        {        tokens.add(arg.substring(1,        2));        }        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(1,    2));    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1,  2));  }  else  if(options.hasOption(arg.substring(1,  2)))  {  tokens.add(arg.substring(1,  2));  }	  	compilable	  [FE]  ComparisonFailure  	41	4	add
568	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(i    +    2));    if(options.hasOption(arg.substring(i  +  2)))  {  tokens.add(arg.substring(i  +  2));  }  tokens.add(arg.substring(i  +  2));  if(options.hasOption(arg.substring(i  +  2)))  {  tokens.add(arg.substring(i  +  2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	                tokens.add(arg.substring(i        +        2));        if(options.hasOption(arg.substring(i    +    2)))    {    tokens.add(arg.substring(i    +    2));    }    tokens.add(arg.substring(i  +  2));  if(options.hasOption(arg.substring(i  +  2)))  {  tokens.add(arg.substring(i  +  2));  }	  	compilable	  [FE]  ComparisonFailure  	60	3	add
569	[BUG]  [BUGGY]          tokens.add(arg.substring(i    +    2));    if(options.hasOption(arg.substring(i  +  2)))  {  tokens.add(arg.substring(i  +  2));  }  tokens.add(arg.substring(i  +  2));  if(options.hasOption(arg.substring(i  +  2)))  {  tokens.add(arg.substring(i  +  2));  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(i    +    2));    if(options.hasOption(arg.substring(i  +  2)))  {  tokens.add(arg.substring(i  +  2));  }  tokens.add(arg.substring(i  +  2));  if(options.hasOption(arg.substring(i  +  2)))  {  tokens.add(arg.substring(i  +  2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                tokens.add(arg.substring(i        +        2));        if(options.hasOption(arg.substring(i    +    2)))    {    tokens.add(arg.substring(i    +    2));    }    tokens.add(arg.substring(i  +  2));  if(options.hasOption(arg.substring(i  +  2)))  {  tokens.add(arg.substring(i  +  2));  }	  	compilable	  [FE]  ComparisonFailure  	60	3	add
570	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(i    +    2));    if(options.hasOption(arg.substring(i  +  2)))  {  tokens.add(arg.substring(i  +  2));  }  tokens.add(arg.substring(i  +  2));  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	                tokens.add(arg.substring(i        +        2));        if(options.hasOption(arg.substring(i    +    2)))    {    tokens.add(arg.substring(i    +    2));    }    tokens.add(arg.substring(i  +  2));	  	compilable	  [FE]  ComparisonFailure  	60	3	add
571	[BUG]  [BUGGY]          tokens.add(arg.substring(i    +    2));    if(options.hasOption(arg.substring(i  +  2)))  {  tokens.add(arg.substring(i  +  2));  }  tokens.add(arg.substring(i  +  2));  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(i    +    2));    if(options.hasOption(arg.substring(i  +  2)))  {  tokens.add(arg.substring(i  +  2));  }  tokens.add(arg.substring(i  +  2));  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                tokens.add(arg.substring(i        +        2));        if(options.hasOption(arg.substring(i    +    2)))    {    tokens.add(arg.substring(i    +    2));    }    tokens.add(arg.substring(i  +  2));	  	compilable	  [FE]  ComparisonFailure  	60	3	add
572	[BUG]  [BUGGY]          tokens.add(arg.substring(i    +    2));    if(options.hasOption(arg.substring(i  +  2)))  {  tokens.add(arg.substring(i  +  2));  }  tokens.add(arg.substring(i  +  2));  if(options.hasOption(arg.substring(i  +  2)))  {  tokens.add(arg.substring(i  +  2));  [CE]  'else'  without  'if'  [FE]        ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(i    +    2));    if(options.hasOption(arg.substring(i  +  2)))  {  tokens.add(arg.substring(i  +  2));  }  tokens.add(arg.substring(i  +  2));  if(options.hasOption(arg.substring(i  +  2)))  {  tokens.add(arg.substring(i  +  2));  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                tokens.add(arg.substring(i        +        2));        if(options.hasOption(arg.substring(i    +    2)))    {    tokens.add(arg.substring(i    +    2));    }    tokens.add(arg.substring(i  +  2));  if(options.hasOption(arg.substring(i  +  2)))  {  tokens.add(arg.substring(i  +  2));	  	non-compiled	[CE]  'else'  without  'if'	60	None	add
573	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(i    +    2));    if(options.hasOption(arg.substring(i  +  2)))  {  tokens.add(arg.substring(i  +  2));  }  tokens.add(arg.substring(0,  2));  if(options.hasOption(arg.substring(i  +  2)))  {  tokens.add(arg.substring(i  +  2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	                tokens.add(arg.substring(i        +        2));        if(options.hasOption(arg.substring(i    +    2)))    {    tokens.add(arg.substring(i    +    2));    }    tokens.add(arg.substring(0,  2));  if(options.hasOption(arg.substring(i  +  2)))  {  tokens.add(arg.substring(i  +  2));  }	  	compilable	  [FE]  ComparisonFailure  	60	3	add
574	[BUG]  [BUGGY]          tokens.add(arg.substring(i    +    2));    if(options.hasOption(arg.substring(i  +  2)))  {  tokens.add(arg.substring(i  +  2));  }  tokens.add(arg.substring(0,  2));  if(options.hasOption(arg.substring(i  +  2)))  {  tokens.add(arg.substring(i  +  2));  }  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(i    +    2));    if(options.hasOption(arg.substring(i  +  2)))  {  tokens.add(arg.substring(i  +  2));  }  tokens.add(arg.substring(0,  2));  if(options.hasOption(arg.substring(i  +  2)))  {  tokens.add(arg.substring(i  +  2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                tokens.add(arg.substring(i        +        2));        if(options.hasOption(arg.substring(i    +    2)))    {    tokens.add(arg.substring(i    +    2));    }    tokens.add(arg.substring(0,  2));  if(options.hasOption(arg.substring(i  +  2)))  {  tokens.add(arg.substring(i  +  2));  }	  	compilable	  [FE]  ComparisonFailure  	60	3	add
575	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]            ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(i    +    2));    if(options.hasOption(arg.substring(i  +  2)))  {  tokens.add(arg.substring(i  +  2));  }  tokens.add(arg.substring(i  +  2));  if(options.hasOption(arg.substring(i  +  1)))  {  tokens.add(arg.substring(i  +  2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	                tokens.add(arg.substring(i        +        2));        if(options.hasOption(arg.substring(i    +    2)))    {    tokens.add(arg.substring(i    +    2));    }    tokens.add(arg.substring(i  +  2));  if(options.hasOption(arg.substring(i  +  1)))  {  tokens.add(arg.substring(i  +  2));  }	  	compilable	  [FE]  ComparisonFailure  	60	3	add
576	[BUG]  [BUGGY]          tokens.add(arg.substring(i    +    2));    if(options.hasOption(arg.substring(i  +  2)))  {  tokens.add(arg.substring(i  +  2));  }  tokens.add(arg.substring(i  +  2));  if(options.hasOption(arg.substring(i  +  1)))  {  tokens.add(arg.substring(i  +  2));  }  [FE]  ComparisonFailure  [FE]            ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(i    +    2));    if(options.hasOption(arg.substring(i  +  2)))  {  tokens.add(arg.substring(i  +  2));  }  tokens.add(arg.substring(i  +  2));  if(options.hasOption(arg.substring(i  +  1)))  {  tokens.add(arg.substring(i  +  2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                tokens.add(arg.substring(i        +        2));        if(options.hasOption(arg.substring(i    +    2)))    {    tokens.add(arg.substring(i    +    2));    }    tokens.add(arg.substring(i  +  2));  if(options.hasOption(arg.substring(i  +  1)))  {  tokens.add(arg.substring(i  +  2));  }	  	compilable	  [FE]  ComparisonFailure  	60	3	add
577	[BUG]  [BUGGY]  [FE]  MissingArgumentException  [FE]              ComparisonFailure      [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]  }  else  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	}  else  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }	          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(i    +    1));    }    if(options.hasOption(arg.substring(0,    2)))    <    tokens.add(arg.substring(i    +    1));    }    	compilable	  [FE]  MissingArgumentException  	6	4	replace
578	[BUG]  [BUGGY]  }  else  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  [FE]  MissingArgumentException  [FE]              ComparisonFailure      [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]  }  else  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	}  else  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }	          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(i    +    1));    }    if(options.hasOption(arg.substring(0,    2)))    <    tokens.add(arg.substring(i    +    1));    }    	compilable	  [FE]  MissingArgumentException  	6	4	replace
579	[BUG]  [BUGGY]  [FE]  MissingArgumentException  [FE]                ComparisonFailure      [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]  }  else  if(options.hasOption(arg.substring(0,  1)))  {  tokens.add(arg.substring(i  +  1));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	}  else  if(options.hasOption(arg.substring(0,  1)))  {  tokens.add(arg.substring(i  +  1));  }	          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(i    +    1));    }    if(options.hasOption(arg.substring(0,    2)))    <    tokens.add(arg.substring(i    +    1));    }    	compilable	  [FE]  MissingArgumentException  	6	4	replace
580	[BUG]  [BUGGY]  }  else  if(options.hasOption(arg.substring(0,  1)))  {  tokens.add(arg.substring(i  +  1));  }  [FE]  MissingArgumentException  [FE]                ComparisonFailure      [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]  }  else  if(options.hasOption(arg.substring(0,  1)))  {  tokens.add(arg.substring(i  +  1));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	}  else  if(options.hasOption(arg.substring(0,  1)))  {  tokens.add(arg.substring(i  +  1));  }	          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(i    +    1));    }    if(options.hasOption(arg.substring(0,    2)))    <    tokens.add(arg.substring(i    +    1));    }    	compilable	  [FE]  MissingArgumentException  	6	4	replace
581	[BUG]  [BUGGY]  }  else  if(options.hasOption(arg.substring(0,  2)))  <  tokens.add(arg.substring(i  +  1));  [CE]  >  expected  [FE]                  ComparisonFailure      [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]  }  else  if(options.hasOption(arg.substring(0,  2)))  <  tokens.add(arg.substring(i  +  1));  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	}  else  if(options.hasOption(arg.substring(0,  2)))  <  tokens.add(arg.substring(i  +  1));	          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(i    +    1));    }    if(options.hasOption(arg.substring(0,    2)))    <    tokens.add(arg.substring(i    +    1));    }    	non-compiled	[CE]  >  expected	6	None	replace
582	[BUG]  [BUGGY]  Option  option  =  options.getOption(arg.substring(2));  [CE]  'else'  without  'if'  [FE]        MissingArgumentException      [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]  Option  option  =  options.getOption(arg.substring(2));  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	Option  option  =  options.getOption(arg.substring(2));	  Option    option    =    options.getOption(arg);    	non-compiled	[CE]  'else'  without  'if'	124	None	replace
583	[BUG]  [BUGGY]  Option  option  =  options.getOption(arg.substring(1));  [CE]  'else'  without  'if'  [FE]          MissingArgumentException      [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]  Option  option  =  options.getOption(arg.substring(1));  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	Option  option  =  options.getOption(arg.substring(1));	  Option    option    =    options.getOption(arg);    	non-compiled	[CE]  'else'  without  'if'	124	None	replace
584	[BUG]  [BUGGY]  Option  option  =  options.getOption(arg,  i);  [CE]  'else'  without  'if'  [FE]            MissingArgumentException      [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]  Option  option  =  options.getOption(arg,  i);  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	Option  option  =  options.getOption(arg,  i);	  Option    option    =    options.getOption(arg);    	non-compiled	[CE]  'else'  without  'if'	124	None	replace
585	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(i    +    1));    if(options.hasOption(arg.substring(i  +  1)))  {  tokens.add(arg.substring(i  +  1));  }  tokens.add(arg.substring(i  +  1));  if(options.hasOption(arg.substring(i  +  1)))  {  tokens.add(arg.substring(i  +  1));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	                tokens.add(arg.substring(i        +        1));        if(options.hasOption(arg.substring(i    +    1)))    {    tokens.add(arg.substring(i    +    1));    }    tokens.add(arg.substring(i  +  1));  if(options.hasOption(arg.substring(i  +  1)))  {  tokens.add(arg.substring(i  +  1));  }	  	compilable	  [FE]  ComparisonFailure  	87	4	add
586	[BUG]  [BUGGY]          tokens.add(arg.substring(i    +    1));    if(options.hasOption(arg.substring(i  +  1)))  {  tokens.add(arg.substring(i  +  1));  }  tokens.add(arg.substring(i  +  1));  if(options.hasOption(arg.substring(i  +  1)))  {  tokens.add(arg.substring(i  +  1));  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(i    +    1));    if(options.hasOption(arg.substring(i  +  1)))  {  tokens.add(arg.substring(i  +  1));  }  tokens.add(arg.substring(i  +  1));  if(options.hasOption(arg.substring(i  +  1)))  {  tokens.add(arg.substring(i  +  1));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                tokens.add(arg.substring(i        +        1));        if(options.hasOption(arg.substring(i    +    1)))    {    tokens.add(arg.substring(i    +    1));    }    tokens.add(arg.substring(i  +  1));  if(options.hasOption(arg.substring(i  +  1)))  {  tokens.add(arg.substring(i  +  1));  }	  	compilable	  [FE]  ComparisonFailure  	87	4	add
587	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(i    +    1));    if(options.hasOption(arg.substring(i  +  1)))  {  tokens.add(arg.substring(i  +  1));  }  tokens.add(arg.substring(i  +  1));  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	                tokens.add(arg.substring(i        +        1));        if(options.hasOption(arg.substring(i    +    1)))    {    tokens.add(arg.substring(i    +    1));    }    tokens.add(arg.substring(i  +  1));	  	compilable	  [FE]  ComparisonFailure  	87	4	add
588	[BUG]  [BUGGY]          tokens.add(arg.substring(i    +    1));    if(options.hasOption(arg.substring(i  +  1)))  {  tokens.add(arg.substring(i  +  1));  }  tokens.add(arg.substring(i  +  1));  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(i    +    1));    if(options.hasOption(arg.substring(i  +  1)))  {  tokens.add(arg.substring(i  +  1));  }  tokens.add(arg.substring(i  +  1));  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                tokens.add(arg.substring(i        +        1));        if(options.hasOption(arg.substring(i    +    1)))    {    tokens.add(arg.substring(i    +    1));    }    tokens.add(arg.substring(i  +  1));	  	compilable	  [FE]  ComparisonFailure  	87	4	add
589	[BUG]  [BUGGY]          tokens.add(arg.substring(i    +    1));    if(options.hasOption(arg.substring(i  +  1)))  {  tokens.add(arg.substring(i  +  1));  }  tokens.add(arg.substring(i  +  1));  if(options.hasOption(arg.substring(i  +  1)))  {  tokens.add(arg.substring(i  +  1));  [CE]  'else'  without  'if'  [FE]        ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(i    +    1));    if(options.hasOption(arg.substring(i  +  1)))  {  tokens.add(arg.substring(i  +  1));  }  tokens.add(arg.substring(i  +  1));  if(options.hasOption(arg.substring(i  +  1)))  {  tokens.add(arg.substring(i  +  1));  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                tokens.add(arg.substring(i        +        1));        if(options.hasOption(arg.substring(i    +    1)))    {    tokens.add(arg.substring(i    +    1));    }    tokens.add(arg.substring(i  +  1));  if(options.hasOption(arg.substring(i  +  1)))  {  tokens.add(arg.substring(i  +  1));	  	non-compiled	[CE]  'else'  without  'if'	87	None	add
590	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(i    +    1));    if(options.hasOption(arg.substring(i  +  1)))  {  tokens.add(arg.substring(i  +  1));  }  tokens.add(arg.substring(i  +  1));  if(options.hasOption(arg.substring(i  +  2)))  {  tokens.add(arg.substring(i  +  1));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	                tokens.add(arg.substring(i        +        1));        if(options.hasOption(arg.substring(i    +    1)))    {    tokens.add(arg.substring(i    +    1));    }    tokens.add(arg.substring(i  +  1));  if(options.hasOption(arg.substring(i  +  2)))  {  tokens.add(arg.substring(i  +  1));  }	  	compilable	  [FE]  ComparisonFailure  	87	4	add
591	[BUG]  [BUGGY]          tokens.add(arg.substring(i    +    1));    if(options.hasOption(arg.substring(i  +  1)))  {  tokens.add(arg.substring(i  +  1));  }  tokens.add(arg.substring(i  +  1));  if(options.hasOption(arg.substring(i  +  2)))  {  tokens.add(arg.substring(i  +  1));  }  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(i    +    1));    if(options.hasOption(arg.substring(i  +  1)))  {  tokens.add(arg.substring(i  +  1));  }  tokens.add(arg.substring(i  +  1));  if(options.hasOption(arg.substring(i  +  2)))  {  tokens.add(arg.substring(i  +  1));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                tokens.add(arg.substring(i        +        1));        if(options.hasOption(arg.substring(i    +    1)))    {    tokens.add(arg.substring(i    +    1));    }    tokens.add(arg.substring(i  +  1));  if(options.hasOption(arg.substring(i  +  2)))  {  tokens.add(arg.substring(i  +  1));  }	  	compilable	  [FE]  ComparisonFailure  	87	4	add
592	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]            ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(i    +    1));    if(options.hasOption(arg.substring(i  +  1)))  {  tokens.add(arg.substring(i  +  1));  }  tokens.add(arg.substring(i  +  2));  if(options.hasOption(arg.substring(i  +  1)))  {  tokens.add(arg.substring(i  +  1));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	                tokens.add(arg.substring(i        +        1));        if(options.hasOption(arg.substring(i    +    1)))    {    tokens.add(arg.substring(i    +    1));    }    tokens.add(arg.substring(i  +  2));  if(options.hasOption(arg.substring(i  +  1)))  {  tokens.add(arg.substring(i  +  1));  }	  	compilable	  [FE]  ComparisonFailure  	87	4	add
593	[BUG]  [BUGGY]          tokens.add(arg.substring(i    +    1));    if(options.hasOption(arg.substring(i  +  1)))  {  tokens.add(arg.substring(i  +  1));  }  tokens.add(arg.substring(i  +  2));  if(options.hasOption(arg.substring(i  +  1)))  {  tokens.add(arg.substring(i  +  1));  }  [FE]  ComparisonFailure  [FE]            ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(i    +    1));    if(options.hasOption(arg.substring(i  +  1)))  {  tokens.add(arg.substring(i  +  1));  }  tokens.add(arg.substring(i  +  2));  if(options.hasOption(arg.substring(i  +  1)))  {  tokens.add(arg.substring(i  +  1));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                tokens.add(arg.substring(i        +        1));        if(options.hasOption(arg.substring(i    +    1)))    {    tokens.add(arg.substring(i    +    1));    }    tokens.add(arg.substring(i  +  2));  if(options.hasOption(arg.substring(i  +  1)))  {  tokens.add(arg.substring(i  +  1));  }	  	compilable	  [FE]  ComparisonFailure  	87	4	add
594	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(2));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(arg.substring(2));  }  tokens.add(arg.substring(2));  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	                tokens.add(arg.substring(2));        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    }    else    {    tokens.add(arg.substring(2));    }    tokens.add(arg.substring(2));	  	compilable	  [FE]  ComparisonFailure  	113	3	add
595	[BUG]  [BUGGY]          tokens.add(arg.substring(2));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(arg.substring(2));  }  tokens.add(arg.substring(2));  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(2));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(arg.substring(2));  }  tokens.add(arg.substring(2));  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                tokens.add(arg.substring(2));        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    }    else    {    tokens.add(arg.substring(2));    }    tokens.add(arg.substring(2));	  	compilable	  [FE]  ComparisonFailure  	113	3	add
596	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(2));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(arg.substring(2));  }  tokens.add(arg.substring(2));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	                tokens.add(arg.substring(2));        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    }    else    {    tokens.add(arg.substring(2));    }    tokens.add(arg.substring(2));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }	  	compilable	  [FE]  ComparisonFailure  	113	3	add
597	[BUG]  [BUGGY]          tokens.add(arg.substring(2));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(arg.substring(2));  }  tokens.add(arg.substring(2));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(2));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(arg.substring(2));  }  tokens.add(arg.substring(2));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                tokens.add(arg.substring(2));        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    }    else    {    tokens.add(arg.substring(2));    }    tokens.add(arg.substring(2));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }	  	compilable	  [FE]  ComparisonFailure  	113	3	add
598	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(2));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(arg.substring(2));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	                tokens.add(arg.substring(2));        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    }    else    {    tokens.add(arg.substring(2));    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }	  	compilable	  [FE]  ComparisonFailure  	113	3	add
599	[BUG]  [BUGGY]          tokens.add(arg.substring(2));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(arg.substring(2));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(2));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(arg.substring(2));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                tokens.add(arg.substring(2));        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    }    else    {    tokens.add(arg.substring(2));    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }	  	compilable	  [FE]  ComparisonFailure  	113	3	add
600	[BUG]  [BUGGY]          tokens.add(arg.substring(2));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(arg.substring(2));  }  tokens.add(arg.substring(2));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  [CE]  'else'  without  'if'  [FE]          ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(2));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(arg.substring(2));  }  tokens.add(arg.substring(2));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                tokens.add(arg.substring(2));        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    }    else    {    tokens.add(arg.substring(2));    }    tokens.add(arg.substring(2));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));	  	non-compiled	[CE]  'else'  without  'if'	113	None	add
601	[BUG]  [BUGGY]          tokens.add(arg.substring(2));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(arg.substring(2));  }  tokens.add(arg.substring(2));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  else  {  [CE]  'else'  without  'if'  [FE]            ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(2));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(arg.substring(2));  }  tokens.add(arg.substring(2));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  else  {  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                tokens.add(arg.substring(2));        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    }    else    {    tokens.add(arg.substring(2));    }    tokens.add(arg.substring(2));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  else  {	  	non-compiled	[CE]  'else'  without  'if'	113	None	add
602	[BUG]  [BUGGY]  [FE]  MissingArgumentException  [FE]    MissingArgumentException    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(0,    2));    tokens.add(arg.substring(2,  2));  tokens.add(arg.substring(0,  2));  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	                tokens.add(arg.substring(0,        2));        tokens.add(arg.substring(2,    2));    tokens.add(arg.substring(0,  2));	  	compilable	  [FE]  MissingArgumentException  	36	4	add
603	[BUG]  [BUGGY]          tokens.add(arg.substring(0,    2));    tokens.add(arg.substring(2,  2));  tokens.add(arg.substring(0,  2));  [FE]  MissingArgumentException  [FE]    MissingArgumentException    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(0,    2));    tokens.add(arg.substring(2,  2));  tokens.add(arg.substring(0,  2));  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                tokens.add(arg.substring(0,        2));        tokens.add(arg.substring(2,    2));    tokens.add(arg.substring(0,  2));	  	compilable	  [FE]  MissingArgumentException  	36	4	add
604	[BUG]  [BUGGY]          tokens.add(arg.substring(i    +    2));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  2));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  2));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  2));  }  [CE]  'else'  without  'if'  [FE]    ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(i    +    2));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  2));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  2));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                tokens.add(arg.substring(i        +        2));        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(i    +    2));    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  2));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  2));  }	  	non-compiled	[CE]  'else'  without  'if'	63	None	add
605	[BUG]  [BUGGY]          tokens.add(arg.substring(i    +    2));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  2));  }  tokens.add(arg.substring(i  +  2));  if(options.hasOption(arg.substring(0,  2))  {  tokens.add(arg.substring(i  +  2));  }  [CE]  ')'  expected  [FE]      ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(i    +    2));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  2));  }  tokens.add(arg.substring(i  +  2));  if(options.hasOption(arg.substring(0,  2))  {  tokens.add(arg.substring(i  +  2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                tokens.add(arg.substring(i        +        2));        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(i    +    2));    }    tokens.add(arg.substring(i  +  2));  if(options.hasOption(arg.substring(0,  2))  {  tokens.add(arg.substring(i  +  2));  }	  	non-compiled	[CE]  ')'  expected	63	None	add
606	[BUG]  [BUGGY]  tokens.add(arg.substring(i));  TokenBuffer  tokens  =  new  TokenBuffer(arg.substring(i),  arg.toString());  [CE]  'else'  without  'if'  [FE]              ComparisonFailure      [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]  tokens.add(arg.substring(i));  TokenBuffer  tokens  =  new  TokenBuffer(arg.substring(i),  arg.toString());  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	tokens.add(arg.substring(i));  TokenBuffer  tokens  =  new  TokenBuffer(arg.substring(i),  arg.toString());	          tokens.add(arg.substring(i));    TokenBuffer    tokens    =    new    TokenBuffer(arg.substring(i).toString());    	non-compiled	[CE]  'else'  without  'if'	137	None	replace
607	[BUG]  [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    }    if(options.hasOption(arg.substring(2)))  {  tokens.add(arg.substring(0,  2));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  [CE]  'else'  without  'if'  [FE]    MissingArgumentException    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    }    if(options.hasOption(arg.substring(2)))  {  tokens.add(arg.substring(0,  2));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                if(options.hasOption(arg.substring(0,        2)))        {        tokens.add(arg.substring(0,        2));        }        if(options.hasOption(arg.substring(2)))    {    tokens.add(arg.substring(0,    2));    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));	  	non-compiled	[CE]  'else'  without  'if'	104	None	add
608	[BUG]  [BUGGY]          tokens.add(arg.substring(i    +    2));    if(options.hasOption(arg.substring(i  +  2)))  {  tokens.add(arg.substring(i  +  2));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  2));  if(options.hasOption(arg.substring(i  +  2)))  {  tokens.add(arg.substring(i  +  2));  }  [CE]  'else'  without  'if'  [FE]    ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(i    +    2));    if(options.hasOption(arg.substring(i  +  2)))  {  tokens.add(arg.substring(i  +  2));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  2));  if(options.hasOption(arg.substring(i  +  2)))  {  tokens.add(arg.substring(i  +  2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                tokens.add(arg.substring(i        +        2));        if(options.hasOption(arg.substring(i    +    2)))    {    tokens.add(arg.substring(i    +    2));    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  2));  if(options.hasOption(arg.substring(i  +  2)))  {  tokens.add(arg.substring(i  +  2));  }	  	non-compiled	[CE]  'else'  without  'if'	60	None	add
609	[BUG]  [BUGGY]          tokens.add(arg.substring(i    +    2));    if(options.hasOption(arg.substring(i  +  2)))  {  tokens.add(arg.substring(i  +  2));  }  if(options.hasOption(arg.substring(i  +  2)))  {  tokens.add(arg.substring(i  +  2));  if(options.hasOption(arg.substring(i  +  2)))  {  tokens.add(arg.substring(i  +  2));  }  [CE]  'else'  without  'if'  [FE]      ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(i    +    2));    if(options.hasOption(arg.substring(i  +  2)))  {  tokens.add(arg.substring(i  +  2));  }  if(options.hasOption(arg.substring(i  +  2)))  {  tokens.add(arg.substring(i  +  2));  if(options.hasOption(arg.substring(i  +  2)))  {  tokens.add(arg.substring(i  +  2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                tokens.add(arg.substring(i        +        2));        if(options.hasOption(arg.substring(i    +    2)))    {    tokens.add(arg.substring(i    +    2));    }    if(options.hasOption(arg.substring(i  +  2)))  {  tokens.add(arg.substring(i  +  2));  if(options.hasOption(arg.substring(i  +  2)))  {  tokens.add(arg.substring(i  +  2));  }	  	non-compiled	[CE]  'else'  without  'if'	60	None	add
610	[BUG]  [BUGGY]  tokens.add(arg.substring(0,  2));  //  property='e'  without  'if'  [CE]  'else'  without  'if'  [FE]            ComparisonFailure      [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]  tokens.add(arg.substring(0,  2));  //  property='e'  without  'if'  [BUGGY]      }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	tokens.add(arg.substring(0,  2));  //  property='e'  without  'if'	  tokens.add(arg.substring(0,    2));    //    property='else'    without    'if'    	non-compiled	[CE]  'else'  without  'if'	120	None	replace
611	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(2));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  tokens.add(arg.substring(1));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	                tokens.add(arg.substring(2));        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    }    tokens.add(arg.substring(1));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }	  	compilable	  [FE]  ComparisonFailure  	52	3	add
612	[BUG]  [BUGGY]          tokens.add(arg.substring(2));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  tokens.add(arg.substring(1));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(2));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  tokens.add(arg.substring(1));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                tokens.add(arg.substring(2));        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    }    tokens.add(arg.substring(1));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }	  	compilable	  [FE]  ComparisonFailure  	52	3	add
613	[BUG]  [BUGGY]          tokens.add(arg.substring(i    +    1));    if(options.hasOption(arg.substring(i  +  1)))  {  tokens.add(arg.substring(i  +  1));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  if(options.hasOption(arg.substring(i  +  1)))  {  tokens.add(arg.substring(i  +  1));  }  [CE]  'else'  without  'if'  [FE]    ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(i    +    1));    if(options.hasOption(arg.substring(i  +  1)))  {  tokens.add(arg.substring(i  +  1));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  if(options.hasOption(arg.substring(i  +  1)))  {  tokens.add(arg.substring(i  +  1));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                tokens.add(arg.substring(i        +        1));        if(options.hasOption(arg.substring(i    +    1)))    {    tokens.add(arg.substring(i    +    1));    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  if(options.hasOption(arg.substring(i  +  1)))  {  tokens.add(arg.substring(i  +  1));  }	  	non-compiled	[CE]  'else'  without  'if'	87	None	add
614	[BUG]  [BUGGY]          tokens.add(arg.substring(i    +    1));    if(options.hasOption(arg.substring(i  +  1)))  {  tokens.add(arg.substring(i  +  1));  }  if(options.hasOption(arg.substring(i  +  1)))  {  tokens.add(arg.substring(i  +  1));  if(options.hasOption(arg.substring(i  +  1)))  {  tokens.add(arg.substring(i  +  1));  }  [CE]  'else'  without  'if'  [FE]      ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(i    +    1));    if(options.hasOption(arg.substring(i  +  1)))  {  tokens.add(arg.substring(i  +  1));  }  if(options.hasOption(arg.substring(i  +  1)))  {  tokens.add(arg.substring(i  +  1));  if(options.hasOption(arg.substring(i  +  1)))  {  tokens.add(arg.substring(i  +  1));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                tokens.add(arg.substring(i        +        1));        if(options.hasOption(arg.substring(i    +    1)))    {    tokens.add(arg.substring(i    +    1));    }    if(options.hasOption(arg.substring(i  +  1)))  {  tokens.add(arg.substring(i  +  1));  if(options.hasOption(arg.substring(i  +  1)))  {  tokens.add(arg.substring(i  +  1));  }	  	non-compiled	[CE]  'else'  without  'if'	87	None	add
615	[BUG]  [BUGGY]  if(options.hasOption(arg))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(arg.substring(2));  }  [CE]  'else'  without  'if'  [FE]        ComparisonFailure      [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]  if(options.hasOption(arg))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(arg.substring(2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	if(options.hasOption(arg))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(arg.substring(2));  }	          tokens.add(arg.substring(i));    if(options.hasOption(arg.substring(0,    2))    {    tokens.add(arg.substring(i));    }    else    {    tokens.add(arg.substring(i));    }    	non-compiled	[CE]  'else'  without  'if'	117	None	replace
616	[BUG]  [BUGGY]  if(options.hasOption(arg))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(arg.substring(i  +  1));  }  [CE]  'else'  without  'if'  [FE]          ComparisonFailure      [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]  if(options.hasOption(arg))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(arg.substring(i  +  1));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	if(options.hasOption(arg))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(arg.substring(i  +  1));  }	          tokens.add(arg.substring(i));    if(options.hasOption(arg.substring(0,    2))    {    tokens.add(arg.substring(i));    }    else    {    tokens.add(arg.substring(i));    }    	non-compiled	[CE]  'else'  without  'if'	117	None	replace
617	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(i    +    1));    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	                if(options.hasOption(arg.substring(0,        2)))        {        tokens.add(arg.substring(i        +        1));        }        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(i    +    1));    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }	  	compilable	  [FE]  ComparisonFailure  	1	4	add
618	[BUG]  [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(i    +    1));    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(i    +    1));    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                if(options.hasOption(arg.substring(0,        2)))        {        tokens.add(arg.substring(i        +        1));        }        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(i    +    1));    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }	  	compilable	  [FE]  ComparisonFailure  	1	4	add
619	[BUG]  [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(i    +    1));    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  [CE]  'else'  without  'if'  [FE]      ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(i    +    1));    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                if(options.hasOption(arg.substring(0,        2)))        {        tokens.add(arg.substring(i        +        1));        }        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(i    +    1));    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));	  	non-compiled	[CE]  'else'  without  'if'	1	None	add
620	[BUG]  [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(i    +    1));    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  while(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  [CE]  'else'  without  'if'  [FE]        ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(i    +    1));    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  while(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                if(options.hasOption(arg.substring(0,        2)))        {        tokens.add(arg.substring(i        +        1));        }        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(i    +    1));    }    while(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));	  	non-compiled	[CE]  'else'  without  'if'	1	None	add
621	[BUG]  [BUGGY]  while(options.hasOption(arg.substring(0,  2))  <  0)  {  tokens.add(arg.substring(i  +  1));  [CE]  'else'  without  'if'  [FE]          ComparisonFailure      [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]  while(options.hasOption(arg.substring(0,  2))  <  0)  {  tokens.add(arg.substring(i  +  1));  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	while(options.hasOption(arg.substring(0,  2))  <  0)  {  tokens.add(arg.substring(i  +  1));	  while(options.hasOption(arg.substring(0,    2))    <    =    0)    {    tokens.add(arg.substring(i    +    1));    	non-compiled	[CE]  'else'  without  'if'	152	None	replace
622	[BUG]  [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(i    +    1));    }    if(options.hasOption(arg.substring(0,  1)))  {  tokens.add(arg.substring(i  +  1));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  [CE]  'else'  without  'if'  [FE]    ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(i    +    1));    }    if(options.hasOption(arg.substring(0,  1)))  {  tokens.add(arg.substring(i  +  1));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                if(options.hasOption(arg.substring(0,        2)))        {        tokens.add(arg.substring(i        +        1));        }        if(options.hasOption(arg.substring(0,    1)))    {    tokens.add(arg.substring(i    +    1));    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));	  	non-compiled	[CE]  'else'  without  'if'	143	None	add
623	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(i    +    1));    }    if(options.hasOption(arg.substring(0,  1)))  {  tokens.add(arg.substring(i  +  1));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	                if(options.hasOption(arg.substring(0,        2)))        {        tokens.add(arg.substring(i        +        1));        }        if(options.hasOption(arg.substring(0,    1)))    {    tokens.add(arg.substring(i    +    1));    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }	  	compilable	  [FE]  ComparisonFailure  	143	4	add
624	[BUG]  [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(i    +    1));    }    if(options.hasOption(arg.substring(0,  1)))  {  tokens.add(arg.substring(i  +  1));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(i    +    1));    }    if(options.hasOption(arg.substring(0,  1)))  {  tokens.add(arg.substring(i  +  1));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                if(options.hasOption(arg.substring(0,        2)))        {        tokens.add(arg.substring(i        +        1));        }        if(options.hasOption(arg.substring(0,    1)))    {    tokens.add(arg.substring(i    +    1));    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }	  	compilable	  [FE]  ComparisonFailure  	143	4	add
625	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(i    +    1));    }    if(options.hasOption(arg.substring(0,  1)))  {  tokens.add(arg.substring(i  +  1));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  if(options.hasOption(arg.substring(2)))  {  tokens.add(arg.substring(i  +  1));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	                if(options.hasOption(arg.substring(0,        2)))        {        tokens.add(arg.substring(i        +        1));        }        if(options.hasOption(arg.substring(0,    1)))    {    tokens.add(arg.substring(i    +    1));    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  if(options.hasOption(arg.substring(2)))  {  tokens.add(arg.substring(i  +  1));  }	  	compilable	  [FE]  ComparisonFailure  	143	4	add
626	[BUG]  [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(i    +    1));    }    if(options.hasOption(arg.substring(0,  1)))  {  tokens.add(arg.substring(i  +  1));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  if(options.hasOption(arg.substring(2)))  {  tokens.add(arg.substring(i  +  1));  }  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(i    +    1));    }    if(options.hasOption(arg.substring(0,  1)))  {  tokens.add(arg.substring(i  +  1));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  if(options.hasOption(arg.substring(2)))  {  tokens.add(arg.substring(i  +  1));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                if(options.hasOption(arg.substring(0,        2)))        {        tokens.add(arg.substring(i        +        1));        }        if(options.hasOption(arg.substring(0,    1)))    {    tokens.add(arg.substring(i    +    1));    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  if(options.hasOption(arg.substring(2)))  {  tokens.add(arg.substring(i  +  1));  }	  	compilable	  [FE]  ComparisonFailure  	143	4	add
627	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(2));    tokens.add(arg.substring(2));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(2));  tokens.add(arg.substring(2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	                tokens.add(arg.substring(2));        tokens.add(arg.substring(2));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(2));  tokens.add(arg.substring(2));  }	  	compilable	  [FE]  ComparisonFailure  	48	3	add
628	[BUG]  [BUGGY]          tokens.add(arg.substring(2));    tokens.add(arg.substring(2));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(2));  tokens.add(arg.substring(2));  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(2));    tokens.add(arg.substring(2));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(2));  tokens.add(arg.substring(2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                tokens.add(arg.substring(2));        tokens.add(arg.substring(2));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(2));  tokens.add(arg.substring(2));  }	  	compilable	  [FE]  ComparisonFailure  	48	3	add
629	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(2));    tokens.add(arg.substring(2));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	                tokens.add(arg.substring(2));        tokens.add(arg.substring(2));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(2));  }	  	compilable	  [FE]  ComparisonFailure  	48	3	add
630	[BUG]  [BUGGY]          tokens.add(arg.substring(2));    tokens.add(arg.substring(2));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(2));  }  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(2));    tokens.add(arg.substring(2));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                tokens.add(arg.substring(2));        tokens.add(arg.substring(2));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(2));  }	  	compilable	  [FE]  ComparisonFailure  	48	3	add
631	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(2));    tokens.add(arg.substring(2));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(2,  2));  tokens.add(arg.substring(2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	                tokens.add(arg.substring(2));        tokens.add(arg.substring(2));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(2,  2));  tokens.add(arg.substring(2));  }	  	compilable	  [FE]  ComparisonFailure  	48	3	add
632	[BUG]  [BUGGY]          tokens.add(arg.substring(2));    tokens.add(arg.substring(2));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(2,  2));  tokens.add(arg.substring(2));  }  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(2));    tokens.add(arg.substring(2));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(2,  2));  tokens.add(arg.substring(2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                tokens.add(arg.substring(2));        tokens.add(arg.substring(2));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(2,  2));  tokens.add(arg.substring(2));  }	  	compilable	  [FE]  ComparisonFailure  	48	3	add
633	[BUG]  [BUGGY]          tokens.add(arg.substring(i));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i));  }  else  {  tokens.add(opt);  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i));  }  else  {  [CE]  'else'  without  'if'  [FE]    UnrecognizedOptionException    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(i));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i));  }  else  {  tokens.add(opt);  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i));  }  else  {  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                tokens.add(arg.substring(i));        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(i));    }    else    {    tokens.add(opt);    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i));  }  else  {	  	non-compiled	[CE]  'else'  without  'if'	118	None	add
634	[BUG]  [BUGGY]          tokens.add(arg.substring(i));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i));  }  else  {  tokens.add(opt);  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  2));  }  [CE]  'else'  without  'if'  [FE]      UnrecognizedOptionException    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(i));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i));  }  else  {  tokens.add(opt);  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                tokens.add(arg.substring(i));        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(i));    }    else    {    tokens.add(opt);    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  2));  }	  	non-compiled	[CE]  'else'  without  'if'	118	None	add
635	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(1,    2));    }    if(options.hasOption(arg.substring(2,  2)))  {  tokens.add(arg.substring(1,  2));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1,  2));  }  if(options.hasOption(arg.substring(2,  2)))  {  tokens.add(arg.substring(1,  2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	                if(options.hasOption(arg.substring(0,        2)))        {        tokens.add(arg.substring(1,        2));        }        if(options.hasOption(arg.substring(2,    2)))    {    tokens.add(arg.substring(1,    2));    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1,  2));  }  if(options.hasOption(arg.substring(2,  2)))  {  tokens.add(arg.substring(1,  2));  }	  	compilable	  [FE]  ComparisonFailure  	45	4	add
636	[BUG]  [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(1,    2));    }    if(options.hasOption(arg.substring(2,  2)))  {  tokens.add(arg.substring(1,  2));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1,  2));  }  if(options.hasOption(arg.substring(2,  2)))  {  tokens.add(arg.substring(1,  2));  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(1,    2));    }    if(options.hasOption(arg.substring(2,  2)))  {  tokens.add(arg.substring(1,  2));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1,  2));  }  if(options.hasOption(arg.substring(2,  2)))  {  tokens.add(arg.substring(1,  2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                if(options.hasOption(arg.substring(0,        2)))        {        tokens.add(arg.substring(1,        2));        }        if(options.hasOption(arg.substring(2,    2)))    {    tokens.add(arg.substring(1,    2));    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1,  2));  }  if(options.hasOption(arg.substring(2,  2)))  {  tokens.add(arg.substring(1,  2));  }	  	compilable	  [FE]  ComparisonFailure  	45	4	add
637	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(1,    2));    }    if(options.hasOption(arg.substring(2,  2)))  {  tokens.add(arg.substring(1,  2));  }  if(options.hasOption(arg.substring(2,  2)))  {  tokens.add(arg.substring(1,  2));  }  if(options.hasOption(arg.substring(2,  2)))  {  tokens.add(arg.substring(3,  2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	                if(options.hasOption(arg.substring(0,        2)))        {        tokens.add(arg.substring(1,        2));        }        if(options.hasOption(arg.substring(2,    2)))    {    tokens.add(arg.substring(1,    2));    }    if(options.hasOption(arg.substring(2,  2)))  {  tokens.add(arg.substring(1,  2));  }  if(options.hasOption(arg.substring(2,  2)))  {  tokens.add(arg.substring(3,  2));  }	  	compilable	  [FE]  ComparisonFailure  	45	4	add
638	[BUG]  [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(1,    2));    }    if(options.hasOption(arg.substring(2,  2)))  {  tokens.add(arg.substring(1,  2));  }  if(options.hasOption(arg.substring(2,  2)))  {  tokens.add(arg.substring(1,  2));  }  if(options.hasOption(arg.substring(2,  2)))  {  tokens.add(arg.substring(3,  2));  }  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(1,    2));    }    if(options.hasOption(arg.substring(2,  2)))  {  tokens.add(arg.substring(1,  2));  }  if(options.hasOption(arg.substring(2,  2)))  {  tokens.add(arg.substring(1,  2));  }  if(options.hasOption(arg.substring(2,  2)))  {  tokens.add(arg.substring(3,  2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                if(options.hasOption(arg.substring(0,        2)))        {        tokens.add(arg.substring(1,        2));        }        if(options.hasOption(arg.substring(2,    2)))    {    tokens.add(arg.substring(1,    2));    }    if(options.hasOption(arg.substring(2,  2)))  {  tokens.add(arg.substring(1,  2));  }  if(options.hasOption(arg.substring(2,  2)))  {  tokens.add(arg.substring(3,  2));  }	  	compilable	  [FE]  ComparisonFailure  	45	4	add
639	[BUG]  [BUGGY]          tokens.add(arg.substring(2));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1,  2));  }  tokens.add(arg.substring(1,  2));  if(options.hasOption(arg.substring(1,  2))  {  tokens.add(arg.substring(1,  2));  }  [CE]  ')'  expected  [FE]    ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(2));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1,  2));  }  tokens.add(arg.substring(1,  2));  if(options.hasOption(arg.substring(1,  2))  {  tokens.add(arg.substring(1,  2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                tokens.add(arg.substring(2));        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(1,    2));    }    tokens.add(arg.substring(1,  2));  if(options.hasOption(arg.substring(1,  2))  {  tokens.add(arg.substring(1,  2));  }	  	non-compiled	[CE]  ')'  expected	158	None	add
640	[BUG]  [BUGGY]  if(options.hasOption(arg))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(opt);  }  [CE]  'else'  without  'if'  [FE]    UnrecognizedOptionException    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]  if(options.hasOption(arg))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(opt);  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	if(options.hasOption(arg))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(opt);  }	          tokens.add(arg.substring(i));    if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(i));    }    else    {    tokens.add(opt);    }    	non-compiled	[CE]  'else'  without  'if'	119	None	replace
641	[BUG]  [BUGGY]  while(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1,  1));  [CE]  'else'  without  'if'  [FE]            ComparisonFailure      [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]  while(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1,  1));  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	while(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1,  1));	          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(1,    2));    }    while(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(1,    2));    }    timeout    	non-compiled	[CE]  'else'  without  'if'	112	None	replace
642	[BUG]  [BUGGY]  [FE]  MissingArgumentException  [FE]    MissingArgumentException    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(0,    2));    tokens.add(arg.substring(1,  2));  tokens.add(arg.substring(0,  2));  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	                tokens.add(arg.substring(0,        2));        tokens.add(arg.substring(1,    2));    tokens.add(arg.substring(0,  2));	  	compilable	  [FE]  MissingArgumentException  	32	4	add
643	[BUG]  [BUGGY]          tokens.add(arg.substring(0,    2));    tokens.add(arg.substring(1,  2));  tokens.add(arg.substring(0,  2));  [FE]  MissingArgumentException  [FE]    MissingArgumentException    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(0,    2));    tokens.add(arg.substring(1,  2));  tokens.add(arg.substring(0,  2));  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                tokens.add(arg.substring(0,        2));        tokens.add(arg.substring(1,    2));    tokens.add(arg.substring(0,  2));	  	compilable	  [FE]  MissingArgumentException  	32	4	add
644	[BUG]  [BUGGY]          tokens.add(arg.substring(2));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(2));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(2));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(2));  }  [CE]  'else'  without  'if'  [FE]    ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(2));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(2));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(2));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                tokens.add(arg.substring(2));        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(2));    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(2));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(2));  }	  	non-compiled	[CE]  'else'  without  'if'	50	None	add
645	[BUG]  [BUGGY]          tokens.add(arg.substring(2));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(2));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(2));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(3));  }  [CE]  'else'  without  'if'  [FE]      ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(2));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(2));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(2));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(3));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                tokens.add(arg.substring(2));        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(2));    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(2));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(3));  }	  	non-compiled	[CE]  'else'  without  'if'	50	None	add
646	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(1,    2));    }    if(options.hasOption(arg.substring(1,  2)))  {  tokens.add(arg.substring(1,  2));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1,  2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	                if(options.hasOption(arg.substring(0,        2)))        {        tokens.add(arg.substring(1,        2));        }        if(options.hasOption(arg.substring(1,    2)))    {    tokens.add(arg.substring(1,    2));    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1,  2));  }	  	compilable	  [FE]  ComparisonFailure  	43	4	add
647	[BUG]  [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(1,    2));    }    if(options.hasOption(arg.substring(1,  2)))  {  tokens.add(arg.substring(1,  2));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1,  2));  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(1,    2));    }    if(options.hasOption(arg.substring(1,  2)))  {  tokens.add(arg.substring(1,  2));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1,  2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                if(options.hasOption(arg.substring(0,        2)))        {        tokens.add(arg.substring(1,        2));        }        if(options.hasOption(arg.substring(1,    2)))    {    tokens.add(arg.substring(1,    2));    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1,  2));  }	  	compilable	  [FE]  ComparisonFailure  	43	4	add
648	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(1,    2));    }    if(options.hasOption(arg.substring(1,  2)))  {  tokens.add(arg.substring(1,  2));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1,  2));  }  if(options.hasOption(arg.substring(2,  2)))  {  tokens.add(arg.substring(1,  2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	                if(options.hasOption(arg.substring(0,        2)))        {        tokens.add(arg.substring(1,        2));        }        if(options.hasOption(arg.substring(1,    2)))    {    tokens.add(arg.substring(1,    2));    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1,  2));  }  if(options.hasOption(arg.substring(2,  2)))  {  tokens.add(arg.substring(1,  2));  }	  	compilable	  [FE]  ComparisonFailure  	43	4	add
649	[BUG]  [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(1,    2));    }    if(options.hasOption(arg.substring(1,  2)))  {  tokens.add(arg.substring(1,  2));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1,  2));  }  if(options.hasOption(arg.substring(2,  2)))  {  tokens.add(arg.substring(1,  2));  }  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(1,    2));    }    if(options.hasOption(arg.substring(1,  2)))  {  tokens.add(arg.substring(1,  2));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1,  2));  }  if(options.hasOption(arg.substring(2,  2)))  {  tokens.add(arg.substring(1,  2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                if(options.hasOption(arg.substring(0,        2)))        {        tokens.add(arg.substring(1,        2));        }        if(options.hasOption(arg.substring(1,    2)))    {    tokens.add(arg.substring(1,    2));    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1,  2));  }  if(options.hasOption(arg.substring(2,  2)))  {  tokens.add(arg.substring(1,  2));  }	  	compilable	  [FE]  ComparisonFailure  	43	4	add
650	[BUG]  [BUGGY]          tokens.add(arg.substring(i));    if(options.hasOption(arg.substring(i)))  {  tokens.add(arg.substring(i));  }  else  {  tokens.add(arg.substring(i));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  [CE]  'else'  without  'if'  [FE]    UnrecognizedOptionException    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(i));    if(options.hasOption(arg.substring(i)))  {  tokens.add(arg.substring(i));  }  else  {  tokens.add(arg.substring(i));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                tokens.add(arg.substring(i));        if(options.hasOption(arg.substring(i)))    {    tokens.add(arg.substring(i));    }    else    {    tokens.add(arg.substring(i));    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }	  	non-compiled	[CE]  'else'  without  'if'	26	None	add
651	[BUG]  [BUGGY]  safely(options.hasOption(arg.substring(0,  2)))  <  tokens.add(arg.substring(0,  2));  [CE]  not  a  statement  [FE]        MissingArgumentException      [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]  safely(options.hasOption(arg.substring(0,  2)))  <  tokens.add(arg.substring(0,  2));  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	safely(options.hasOption(arg.substring(0,  2)))  <  tokens.add(arg.substring(0,  2));	          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    }    if(options.hasOption(arg.substring(0,    2)))    <    tokens.add(arg.substring(0,    2));    }    	non-compiled	[CE]  not  a  statement	155	None	replace
652	[BUG]  [BUGGY]  safely(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  [CE]  ';'  expected  [FE]          MissingArgumentException      [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]  safely(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	safely(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }	          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    }    if(options.hasOption(arg.substring(0,    2)))    <    tokens.add(arg.substring(0,    2));    }    	non-compiled	[CE]  ';'  expected	155	None	replace
653	[BUG]  [BUGGY]  safely(options.hasOption(arg.substring(0,  2)));  [CE]  'else'  without  'if'  [FE]            MissingArgumentException      [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]  safely(options.hasOption(arg.substring(0,  2)));  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	safely(options.hasOption(arg.substring(0,  2)));	          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    }    if(options.hasOption(arg.substring(0,    2)))    <    tokens.add(arg.substring(0,    2));    }    	non-compiled	[CE]  'else'  without  'if'	155	None	replace
654	[BUG]  [BUGGY]  options.add(arg.substring(0,  1));  [CE]  'else'  without  'if'  [FE]          ComparisonFailure      [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]  options.add(arg.substring(0,  1));  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	options.add(arg.substring(0,  1));	  options.add(arg.substring(0,    2));    	non-compiled	[CE]  'else'  without  'if'	29	None	replace
655	[BUG]  [BUGGY]  if(options.hasOption(arg.substring(0,  2))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(arg.substring(0,  2));  }  [CE]  ')'  expected  [FE]          MissingArgumentException      [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]  if(options.hasOption(arg.substring(0,  2))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(arg.substring(0,  2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	if(options.hasOption(arg.substring(0,  2))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(arg.substring(0,  2));  }	          tokens.add(arg.substring(0,    2));    if(options.hasOption(arg.substring(0,    2))    {    tokens.add(arg.substring(0,    2));    }    else    {    tokens.add(arg.substring(0,    2));    }    	non-compiled	[CE]  ')'  expected	126	None	replace
656	[BUG]  [BUGGY]  if(options.hasOption(arg.substring(0,  2))  {  tokens.add(arg.substring(0,  2));  }  [CE]  ')'  expected  [FE]            MissingArgumentException      [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]  if(options.hasOption(arg.substring(0,  2))  {  tokens.add(arg.substring(0,  2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	if(options.hasOption(arg.substring(0,  2))  {  tokens.add(arg.substring(0,  2));  }	          tokens.add(arg.substring(0,    2));    if(options.hasOption(arg.substring(0,    2))    {    tokens.add(arg.substring(0,    2));    }    else    {    tokens.add(arg.substring(0,    2));    }    	non-compiled	[CE]  ')'  expected	126	None	replace
657	[BUG]  [BUGGY]  else  if(options.hasOption(arg.substring(0,  2))  {  tokens.add(arg.substring(0,  2));  }  [CE]  'else'  without  'if'  [FE]              MissingArgumentException      [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]  else  if(options.hasOption(arg.substring(0,  2))  {  tokens.add(arg.substring(0,  2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	else  if(options.hasOption(arg.substring(0,  2))  {  tokens.add(arg.substring(0,  2));  }	          tokens.add(arg.substring(0,    2));    if(options.hasOption(arg.substring(0,    2))    {    tokens.add(arg.substring(0,    2));    }    else    {    tokens.add(arg.substring(0,    2));    }    	non-compiled	[CE]  'else'  without  'if'	126	None	replace
658	[BUG]  [BUGGY]  if(options.hasOption(arg))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(arg.substring(0,  2));  }  [CE]  'else'  without  'if'  [FE]                MissingArgumentException      [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]  if(options.hasOption(arg))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(arg.substring(0,  2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	if(options.hasOption(arg))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(arg.substring(0,  2));  }	          tokens.add(arg.substring(0,    2));    if(options.hasOption(arg.substring(0,    2))    {    tokens.add(arg.substring(0,    2));    }    else    {    tokens.add(arg.substring(0,    2));    }    	non-compiled	[CE]  'else'  without  'if'	126	None	replace
659	[BUG]  [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(i    +    1));    }    while(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  while(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  [CE]  'else'  without  'if'  [FE]            ComparisonFailure      [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(i    +    1));    }    while(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  while(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                if(options.hasOption(arg.substring(0,        2)))        {        tokens.add(arg.substring(i        +        1));        }        while(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(i    +    1));    }    while(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));	  timeout    	non-compiled	[CE]  'else'  without  'if'	4	None	add
660	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(2));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(2,  2));  }  tokens.add(arg.substring(2,  2));  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	                tokens.add(arg.substring(2));        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(2,    2));    }    tokens.add(arg.substring(2,  2));	  	compilable	  [FE]  ComparisonFailure  	54	3	add
661	[BUG]  [BUGGY]          tokens.add(arg.substring(2));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(2,  2));  }  tokens.add(arg.substring(2,  2));  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(2));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(2,  2));  }  tokens.add(arg.substring(2,  2));  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                tokens.add(arg.substring(2));        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(2,    2));    }    tokens.add(arg.substring(2,  2));	  	compilable	  [FE]  ComparisonFailure  	54	3	add
662	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(2));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(2,  2));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(2,  2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	                tokens.add(arg.substring(2));        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(2,    2));    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(2,  2));  }	  	compilable	  [FE]  ComparisonFailure  	54	3	add
663	[BUG]  [BUGGY]          tokens.add(arg.substring(2));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(2,  2));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(2,  2));  }  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(2));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(2,  2));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(2,  2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                tokens.add(arg.substring(2));        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(2,    2));    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(2,  2));  }	  	compilable	  [FE]  ComparisonFailure  	54	3	add
664	[BUG]  [BUGGY]          tokens.add(arg.substring(0,    2));    tokens.add(arg.substring(0,  2));  if(options.hasOption(arg.substring(0,  2))  {  tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(0,  2));  }  [CE]  ')'  expected  [FE]    MissingArgumentException    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(0,    2));    tokens.add(arg.substring(0,  2));  if(options.hasOption(arg.substring(0,  2))  {  tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(0,  2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                tokens.add(arg.substring(0,        2));        tokens.add(arg.substring(0,    2));    if(options.hasOption(arg.substring(0,  2))  {  tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(0,  2));  }	  	non-compiled	[CE]  ')'  expected	30	None	add
665	[BUG]  [BUGGY]          tokens.add(arg.substring(0,    2));    tokens.add(arg.substring(0,  2));  if(options.hasOption(arg.substring(0,  2))  {  tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(opt);  }  [CE]  ')'  expected  [FE]      MissingArgumentException    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(0,    2));    tokens.add(arg.substring(0,  2));  if(options.hasOption(arg.substring(0,  2))  {  tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(opt);  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                tokens.add(arg.substring(0,        2));        tokens.add(arg.substring(0,    2));    if(options.hasOption(arg.substring(0,  2))  {  tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(opt);  }	  	non-compiled	[CE]  ')'  expected	30	None	add
666	[BUG]  [BUGGY]          tokens.add(arg.substring(2));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(arg.substring(1));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(2));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  [CE]  'else'  without  'if'  [FE]    ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(2));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(arg.substring(1));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(2));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                tokens.add(arg.substring(2));        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    }    else    {    tokens.add(arg.substring(1));    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(2));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }	  	non-compiled	[CE]  'else'  without  'if'	115	None	add
667	[BUG]  [BUGGY]          tokens.add(arg.substring(2));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(arg.substring(1));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(2));  }  [CE]  'else'  without  'if'  [FE]      ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(2));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(arg.substring(1));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                tokens.add(arg.substring(2));        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    }    else    {    tokens.add(arg.substring(1));    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(2));  }	  	non-compiled	[CE]  'else'  without  'if'	115	None	add
668	[BUG]  [BUGGY]  if(options.hasOption(arg.substring(0,  2))  {  tokens.add(arg.substring(1));  tokens.add(arg.substring(2));  }  [CE]  ')'  expected  [FE]    ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]  if(options.hasOption(arg.substring(0,  2))  {  tokens.add(arg.substring(1));  tokens.add(arg.substring(2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	if(options.hasOption(arg.substring(0,  2))  {  tokens.add(arg.substring(1));  tokens.add(arg.substring(2));  }	          tokens.add(arg.substring(1));    tokens.add(arg.substring(2));    	non-compiled	[CE]  ')'  expected	10	None	replace
669	[BUG]  [BUGGY]  if(options.hasOption(arg.substring(0,  2))  {  tokens.add(arg.substring(i  +  2));  }  [CE]  ')'  expected  [FE]            ComparisonFailure      [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]  if(options.hasOption(arg.substring(0,  2))  {  tokens.add(arg.substring(i  +  2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	if(options.hasOption(arg.substring(0,  2))  {  tokens.add(arg.substring(i  +  2));  }	          tokens.add(arg.substring(i    +    2));    tokens.add(arg.substring(i    +    2));    if(options.hasOption(arg.substring(0,    2))    {    tokens.add(arg.substring(i    +    2));    }    	non-compiled	[CE]  ')'  expected	100	None	replace
670	[BUG]  [BUGGY]  else  if(options.hasOption(arg.substring(0,  2))  {  tokens.add(arg.substring(i  +  2));  }  [CE]  'else'  without  'if'  [FE]              ComparisonFailure      [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]  else  if(options.hasOption(arg.substring(0,  2))  {  tokens.add(arg.substring(i  +  2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	else  if(options.hasOption(arg.substring(0,  2))  {  tokens.add(arg.substring(i  +  2));  }	          tokens.add(arg.substring(i    +    2));    tokens.add(arg.substring(i    +    2));    if(options.hasOption(arg.substring(0,    2))    {    tokens.add(arg.substring(i    +    2));    }    	non-compiled	[CE]  'else'  without  'if'	100	None	replace
671	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(1));    tokens.add(arg.substring(3));  tokens.add(arg.substring(1));  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	                tokens.add(arg.substring(1));        tokens.add(arg.substring(3));    tokens.add(arg.substring(1));	  	compilable	  [FE]  ComparisonFailure  	11	4	add
672	[BUG]  [BUGGY]          tokens.add(arg.substring(1));    tokens.add(arg.substring(3));  tokens.add(arg.substring(1));  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(1));    tokens.add(arg.substring(3));  tokens.add(arg.substring(1));  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                tokens.add(arg.substring(1));        tokens.add(arg.substring(3));    tokens.add(arg.substring(1));	  	compilable	  [FE]  ComparisonFailure  	11	4	add
673	[BUG]  [BUGGY]  if(options.hasOption(arg.substring(0,  2))  {  tokens.add(arg.substring(2));  }  [CE]  ')'  expected  [FE]    ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]  if(options.hasOption(arg.substring(0,  2))  {  tokens.add(arg.substring(2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	if(options.hasOption(arg.substring(0,  2))  {  tokens.add(arg.substring(2));  }	          tokens.add(arg.substring(2));    tokens.add(arg.substring(2));    	non-compiled	[CE]  ')'  expected	49	None	replace
674	[BUG]  [BUGGY]  tokens  =  new  TokenBuffer(arg.substring(i  +  1));  [CE]  'else'  without  'if'  [FE]          ComparisonFailure      [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]  tokens  =  new  TokenBuffer(arg.substring(i  +  1));  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	tokens  =  new  TokenBuffer(arg.substring(i  +  1));	          tokens.add(arg.substring(i    +    1));    TokenBuffer    tokens    =    new    TokenBuffer(arg.substring(i    +    1));    	non-compiled	[CE]  'else'  without  'if'	161	None	replace
675	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(i    +    2));    tokens.add(arg.substring(i  +  2));  if(options.hasOption(arg))  {  tokens.add(arg.substring(i  +  1));  }  if(options.hasOption(arg))  {  tokens.add(arg.substring(i  +  2));  tokens.add(arg.substring(i  +  1));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	                tokens.add(arg.substring(i        +        2));        tokens.add(arg.substring(i    +    2));    if(options.hasOption(arg))    {    tokens.add(arg.substring(i    +    1));    }    if(options.hasOption(arg))  {  tokens.add(arg.substring(i  +  2));  tokens.add(arg.substring(i  +  1));  }	  	compilable	  [FE]  ComparisonFailure  	98	3	add
676	[BUG]  [BUGGY]          tokens.add(arg.substring(i    +    2));    tokens.add(arg.substring(i  +  2));  if(options.hasOption(arg))  {  tokens.add(arg.substring(i  +  1));  }  if(options.hasOption(arg))  {  tokens.add(arg.substring(i  +  2));  tokens.add(arg.substring(i  +  1));  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(i    +    2));    tokens.add(arg.substring(i  +  2));  if(options.hasOption(arg))  {  tokens.add(arg.substring(i  +  1));  }  if(options.hasOption(arg))  {  tokens.add(arg.substring(i  +  2));  tokens.add(arg.substring(i  +  1));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                tokens.add(arg.substring(i        +        2));        tokens.add(arg.substring(i    +    2));    if(options.hasOption(arg))    {    tokens.add(arg.substring(i    +    1));    }    if(options.hasOption(arg))  {  tokens.add(arg.substring(i  +  2));  tokens.add(arg.substring(i  +  1));  }	  	compilable	  [FE]  ComparisonFailure  	98	3	add
677	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(i    +    2));    tokens.add(arg.substring(i  +  2));  if(options.hasOption(arg))  {  tokens.add(arg.substring(i  +  1));  }  tokens.add(arg.substring(0,  2));  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	                tokens.add(arg.substring(i        +        2));        tokens.add(arg.substring(i    +    2));    if(options.hasOption(arg))    {    tokens.add(arg.substring(i    +    1));    }    tokens.add(arg.substring(0,  2));	  	compilable	  [FE]  ComparisonFailure  	98	3	add
678	[BUG]  [BUGGY]          tokens.add(arg.substring(i    +    2));    tokens.add(arg.substring(i  +  2));  if(options.hasOption(arg))  {  tokens.add(arg.substring(i  +  1));  }  tokens.add(arg.substring(0,  2));  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(i    +    2));    tokens.add(arg.substring(i  +  2));  if(options.hasOption(arg))  {  tokens.add(arg.substring(i  +  1));  }  tokens.add(arg.substring(0,  2));  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                tokens.add(arg.substring(i        +        2));        tokens.add(arg.substring(i    +    2));    if(options.hasOption(arg))    {    tokens.add(arg.substring(i    +    1));    }    tokens.add(arg.substring(0,  2));	  	compilable	  [FE]  ComparisonFailure  	98	3	add
679	[BUG]  [BUGGY]  while(options.hasOption(arg.substring(0,  2))  &&  options.hasOption(arg.substring(i  +  1))  {  tokens.add(arg.substring(i  +  1));  [CE]  ')'  expected  [FE]        ComparisonFailure      [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]  while(options.hasOption(arg.substring(0,  2))  &&  options.hasOption(arg.substring(i  +  1))  {  tokens.add(arg.substring(i  +  1));  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	while(options.hasOption(arg.substring(0,  2))  &&  options.hasOption(arg.substring(i  +  1))  {  tokens.add(arg.substring(i  +  1));	  while(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(i    +    1));    	non-compiled	[CE]  ')'  expected	151	None	replace
680	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(2));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(2  +  1));  }  tokens.add(arg.substring(2  +  1));  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	                tokens.add(arg.substring(2));        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(2    +    1));    }    tokens.add(arg.substring(2  +  1));	  	compilable	  [FE]  ComparisonFailure  	156	3	add
681	[BUG]  [BUGGY]          tokens.add(arg.substring(2));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(2  +  1));  }  tokens.add(arg.substring(2  +  1));  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(2));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(2  +  1));  }  tokens.add(arg.substring(2  +  1));  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                tokens.add(arg.substring(2));        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(2    +    1));    }    tokens.add(arg.substring(2  +  1));	  	compilable	  [FE]  ComparisonFailure  	156	3	add
682	[BUG]  [BUGGY]  if(options.hasOption(arg.substring(0,  2))  {  tokens.add(arg.substring(1));  tokens.add(arg.substring(1));  }  [CE]  ')'  expected  [FE]                ComparisonFailure      [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]  if(options.hasOption(arg.substring(0,  2))  {  tokens.add(arg.substring(1));  tokens.add(arg.substring(1));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	if(options.hasOption(arg.substring(0,  2))  {  tokens.add(arg.substring(1));  tokens.add(arg.substring(1));  }	          tokens.add(arg.substring(1));    tokens.add(arg.substring(    1);    	non-compiled	[CE]  ')'  expected	15	None	replace
683	[BUG]  [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    }    if(options.hasOption(arg.substring(0,  1)))  {  tokens.add(arg.substring(0,  2));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  [CE]  'else'  without  'if'  [FE]    MissingArgumentException    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    }    if(options.hasOption(arg.substring(0,  1)))  {  tokens.add(arg.substring(0,  2));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                if(options.hasOption(arg.substring(0,        2)))        {        tokens.add(arg.substring(0,        2));        }        if(options.hasOption(arg.substring(0,    1)))    {    tokens.add(arg.substring(0,    2));    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));	  	non-compiled	[CE]  'else'  without  'if'	75	None	add
684	[BUG]  [BUGGY]  timeout  [FE]            ComparisonFailure      [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(1,    2));    }    while(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1,  2));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1,  2));  }  while(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1,  2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	                if(options.hasOption(arg.substring(0,        2)))        {        tokens.add(arg.substring(1,        2));        }        while(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(1,    2));    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1,  2));  }  while(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1,  2));  }	  timeout    	compilable	timeout	111	1	add
685	[BUG]  [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(1,    2));    }    while(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1,  2));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1,  2));  }  while(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1,  2));  }  timeout  [FE]            ComparisonFailure      [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(1,    2));    }    while(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1,  2));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1,  2));  }  while(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1,  2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                if(options.hasOption(arg.substring(0,        2)))        {        tokens.add(arg.substring(1,        2));        }        while(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(1,    2));    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1,  2));  }  while(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1,  2));  }	  timeout    	compilable	timeout	111	1	add
686	[BUG]  [BUGGY]  timeout  [FE]              ComparisonFailure      [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(1,    2));    }    while(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1,  2));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1,  2));  }  while(options.hasOption(arg.substring(2,  2)))  {  tokens.add(arg.substring(1,  2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	                if(options.hasOption(arg.substring(0,        2)))        {        tokens.add(arg.substring(1,        2));        }        while(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(1,    2));    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1,  2));  }  while(options.hasOption(arg.substring(2,  2)))  {  tokens.add(arg.substring(1,  2));  }	  timeout    	compilable	timeout	111	1	add
687	[BUG]  [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(1,    2));    }    while(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1,  2));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1,  2));  }  while(options.hasOption(arg.substring(2,  2)))  {  tokens.add(arg.substring(1,  2));  }  timeout  [FE]              ComparisonFailure      [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(1,    2));    }    while(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1,  2));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1,  2));  }  while(options.hasOption(arg.substring(2,  2)))  {  tokens.add(arg.substring(1,  2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                if(options.hasOption(arg.substring(0,        2)))        {        tokens.add(arg.substring(1,        2));        }        while(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(1,    2));    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1,  2));  }  while(options.hasOption(arg.substring(2,  2)))  {  tokens.add(arg.substring(1,  2));  }	  timeout    	compilable	timeout	111	1	add
688	[BUG]  [BUGGY]  [FE]  MissingArgumentException  [FE]    MissingArgumentException    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1,  2));  }  if(options.hasOption(arg.substring(1,  2)))  {  tokens.add(arg.substring(2,  2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	                if(options.hasOption(arg.substring(0,        2)))        {        tokens.add(arg.substring(0,        2));        }        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(1,    2));    }    if(options.hasOption(arg.substring(1,  2)))  {  tokens.add(arg.substring(2,  2));  }	  	compilable	  [FE]  MissingArgumentException  	106	4	add
689	[BUG]  [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1,  2));  }  if(options.hasOption(arg.substring(1,  2)))  {  tokens.add(arg.substring(2,  2));  }  [FE]  MissingArgumentException  [FE]    MissingArgumentException    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1,  2));  }  if(options.hasOption(arg.substring(1,  2)))  {  tokens.add(arg.substring(2,  2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                if(options.hasOption(arg.substring(0,        2)))        {        tokens.add(arg.substring(0,        2));        }        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(1,    2));    }    if(options.hasOption(arg.substring(1,  2)))  {  tokens.add(arg.substring(2,  2));  }	  	compilable	  [FE]  MissingArgumentException  	106	4	add
690	[BUG]  [BUGGY]  [FE]  MissingArgumentException  [FE]      MissingArgumentException    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1,  2));  }  tokens.add(arg.substring(1,  2));  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	                if(options.hasOption(arg.substring(0,        2)))        {        tokens.add(arg.substring(0,        2));        }        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(1,    2));    }    tokens.add(arg.substring(1,  2));	  	compilable	  [FE]  MissingArgumentException  	106	4	add
691	[BUG]  [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1,  2));  }  tokens.add(arg.substring(1,  2));  [FE]  MissingArgumentException  [FE]      MissingArgumentException    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1,  2));  }  tokens.add(arg.substring(1,  2));  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                if(options.hasOption(arg.substring(0,        2)))        {        tokens.add(arg.substring(0,        2));        }        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(1,    2));    }    tokens.add(arg.substring(1,  2));	  	compilable	  [FE]  MissingArgumentException  	106	4	add
692	[BUG]  [BUGGY]  [FE]  MissingArgumentException  [FE]    MissingArgumentException    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(0,    2));    tokens.add(arg.substring(0,  3));  tokens.add(arg.substring(0,  2));  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	                tokens.add(arg.substring(0,        2));        tokens.add(arg.substring(0,    3));    tokens.add(arg.substring(0,  2));	  	compilable	  [FE]  MissingArgumentException  	38	4	add
693	[BUG]  [BUGGY]          tokens.add(arg.substring(0,    2));    tokens.add(arg.substring(0,  3));  tokens.add(arg.substring(0,  2));  [FE]  MissingArgumentException  [FE]    MissingArgumentException    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(0,    2));    tokens.add(arg.substring(0,  3));  tokens.add(arg.substring(0,  2));  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                tokens.add(arg.substring(0,        2));        tokens.add(arg.substring(0,    3));    tokens.add(arg.substring(0,  2));	  	compilable	  [FE]  MissingArgumentException  	38	4	add
694	[BUG]  [BUGGY]  if(options.hasOption(arg.substring(0,  2))  {  tokens.add(arg.substring(i  +  1));  }  [CE]  ')'  expected  [FE]              ComparisonFailure      [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]  if(options.hasOption(arg.substring(0,  2))  {  tokens.add(arg.substring(i  +  1));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	if(options.hasOption(arg.substring(0,  2))  {  tokens.add(arg.substring(i  +  1));  }	          tokens.add(arg.substring(i    +    2));    tokens.add(arg.substring(i    +    2));    if(options.hasOption(arg.substring(0,    2))    {    tokens.add(arg.substring(i    +    1));    }    	non-compiled	[CE]  ')'  expected	101	None	replace
695	[BUG]  [BUGGY]  else  if(options.hasOption(arg.substring(0,  2))  {  tokens.add(arg.substring(i  +  1));  }  [CE]  'else'  without  'if'  [FE]                ComparisonFailure      [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]  else  if(options.hasOption(arg.substring(0,  2))  {  tokens.add(arg.substring(i  +  1));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	else  if(options.hasOption(arg.substring(0,  2))  {  tokens.add(arg.substring(i  +  1));  }	          tokens.add(arg.substring(i    +    2));    tokens.add(arg.substring(i    +    2));    if(options.hasOption(arg.substring(0,    2))    {    tokens.add(arg.substring(i    +    1));    }    	non-compiled	[CE]  'else'  without  'if'	101	None	replace
696	[BUG]  [BUGGY]  while(options.hasOption(arg.substring(0,  2))  <  =  0)  {  tokens.add(arg.substring(0,  2));  [CE]  illegal  start  of  expression  [FE]              MissingArgumentException      [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]  while(options.hasOption(arg.substring(0,  2))  <  =  0)  {  tokens.add(arg.substring(0,  2));  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	while(options.hasOption(arg.substring(0,  2))  <  =  0)  {  tokens.add(arg.substring(0,  2));	          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    }    while(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    }    timeout    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
697	[BUG]  [BUGGY]  while(options.hasOption(arg.substring(0,  2))  <  arg.length())  {  tokens.add(arg.substring(0,  2));  [CE]  'else'  without  'if'  [FE]                MissingArgumentException      [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]  while(options.hasOption(arg.substring(0,  2))  <  arg.length())  {  tokens.add(arg.substring(0,  2));  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	while(options.hasOption(arg.substring(0,  2))  <  arg.length())  {  tokens.add(arg.substring(0,  2));	          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    }    while(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    }    timeout    	non-compiled	[CE]  'else'  without  'if'	74	None	replace
698	[BUG]  [BUGGY]  tokens  =  new  TokenBuffer(options.getOption(arg.substring(i)).toString());  [CE]  'else'  without  'if'  [FE]          ComparisonFailure      [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]  tokens  =  new  TokenBuffer(options.getOption(arg.substring(i)).toString());  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	tokens  =  new  TokenBuffer(options.getOption(arg.substring(i)).toString());	          tokens.add(arg.substring(i));    TokenBuffer    tokens    =    new    TokenBuffer(options.getOption(arg.substring(i)).toString());    	non-compiled	[CE]  'else'  without  'if'	135	None	replace
699	[BUG]  [BUGGY]          tokens.add(arg.substring(i));    if(options.hasOption(arg.substring(i)))  {  tokens.add(arg.substring(i));  }  tokens.add(arg.substring(i));  if(options.hasOption(arg.substring(i)))  {  tokens.add(arg.substring(i));  [CE]  'else'  without  'if'  [FE]    ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(i));    if(options.hasOption(arg.substring(i)))  {  tokens.add(arg.substring(i));  }  tokens.add(arg.substring(i));  if(options.hasOption(arg.substring(i)))  {  tokens.add(arg.substring(i));  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                tokens.add(arg.substring(i));        if(options.hasOption(arg.substring(i)))    {    tokens.add(arg.substring(i));    }    tokens.add(arg.substring(i));  if(options.hasOption(arg.substring(i)))  {  tokens.add(arg.substring(i));	  	non-compiled	[CE]  'else'  without  'if'	24	None	add
700	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(i));    if(options.hasOption(arg.substring(i)))  {  tokens.add(arg.substring(i));  }  tokens.add(arg.substring(2));  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	                tokens.add(arg.substring(i));        if(options.hasOption(arg.substring(i)))    {    tokens.add(arg.substring(i));    }    tokens.add(arg.substring(2));	  	compilable	  [FE]  ComparisonFailure  	24	4	add
701	[BUG]  [BUGGY]          tokens.add(arg.substring(i));    if(options.hasOption(arg.substring(i)))  {  tokens.add(arg.substring(i));  }  tokens.add(arg.substring(2));  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(i));    if(options.hasOption(arg.substring(i)))  {  tokens.add(arg.substring(i));  }  tokens.add(arg.substring(2));  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                tokens.add(arg.substring(i));        if(options.hasOption(arg.substring(i)))    {    tokens.add(arg.substring(i));    }    tokens.add(arg.substring(2));	  	compilable	  [FE]  ComparisonFailure  	24	4	add
702	[BUG]  [BUGGY]  tokens.add(arg.substring(i));  TokenBuffer  tokens  =  new  TokenBuffer(arg.substring(i),  arg.toLowerCase());  [CE]  'else'  without  'if'  [FE]            ComparisonFailure      [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]  tokens.add(arg.substring(i));  TokenBuffer  tokens  =  new  TokenBuffer(arg.substring(i),  arg.toLowerCase());  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	tokens.add(arg.substring(i));  TokenBuffer  tokens  =  new  TokenBuffer(arg.substring(i),  arg.toLowerCase());	          tokens.add(arg.substring(i));    TokenBuffer    tokens    =    new    TokenBuffer(arg.substring(i).toLowerCase());    	non-compiled	[CE]  'else'  without  'if'	136	None	replace
703	[BUG]  [BUGGY]  while(options.hasOption(arg.substring(0,  2))&&!stopAtNonOption)  {  tokens.add(arg.substring(i  +  1));  }  [CE]  'else'  without  'if'  [FE]            ComparisonFailure      [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]  while(options.hasOption(arg.substring(0,  2))&&!stopAtNonOption)  {  tokens.add(arg.substring(i  +  1));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	while(options.hasOption(arg.substring(0,  2))&&!stopAtNonOption)  {  tokens.add(arg.substring(i  +  1));  }	  while(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(i    +    1));    }    	non-compiled	[CE]  'else'  without  'if'	153	None	replace
704	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(i    +    1));    if(options.hasOption(arg.substring(i  +  1)))  {  tokens.add(arg.substring(i  +  1));  }  else  {  tokens.add(arg.substring(i  +  1));  }  tokens.add(arg.substring(2));  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	                tokens.add(arg.substring(i        +        1));        if(options.hasOption(arg.substring(i    +    1)))    {    tokens.add(arg.substring(i    +    1));    }    else    {    tokens.add(arg.substring(i    +    1));    }    tokens.add(arg.substring(2));	  	compilable	  [FE]  ComparisonFailure  	89	4	add
705	[BUG]  [BUGGY]          tokens.add(arg.substring(i    +    1));    if(options.hasOption(arg.substring(i  +  1)))  {  tokens.add(arg.substring(i  +  1));  }  else  {  tokens.add(arg.substring(i  +  1));  }  tokens.add(arg.substring(2));  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(i    +    1));    if(options.hasOption(arg.substring(i  +  1)))  {  tokens.add(arg.substring(i  +  1));  }  else  {  tokens.add(arg.substring(i  +  1));  }  tokens.add(arg.substring(2));  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                tokens.add(arg.substring(i        +        1));        if(options.hasOption(arg.substring(i    +    1)))    {    tokens.add(arg.substring(i    +    1));    }    else    {    tokens.add(arg.substring(i    +    1));    }    tokens.add(arg.substring(2));	  	compilable	  [FE]  ComparisonFailure  	89	4	add
706	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(i    +    1));    if(options.hasOption(arg.substring(i  +  1)))  {  tokens.add(arg.substring(i  +  1));  }  else  {  tokens.add(arg.substring(i  +  1));  }  tokens.add(arg.substring(i  +  2));  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	                tokens.add(arg.substring(i        +        1));        if(options.hasOption(arg.substring(i    +    1)))    {    tokens.add(arg.substring(i    +    1));    }    else    {    tokens.add(arg.substring(i    +    1));    }    tokens.add(arg.substring(i  +  2));	  	compilable	  [FE]  ComparisonFailure  	89	4	add
707	[BUG]  [BUGGY]          tokens.add(arg.substring(i    +    1));    if(options.hasOption(arg.substring(i  +  1)))  {  tokens.add(arg.substring(i  +  1));  }  else  {  tokens.add(arg.substring(i  +  1));  }  tokens.add(arg.substring(i  +  2));  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(i    +    1));    if(options.hasOption(arg.substring(i  +  1)))  {  tokens.add(arg.substring(i  +  1));  }  else  {  tokens.add(arg.substring(i  +  1));  }  tokens.add(arg.substring(i  +  2));  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                tokens.add(arg.substring(i        +        1));        if(options.hasOption(arg.substring(i    +    1)))    {    tokens.add(arg.substring(i    +    1));    }    else    {    tokens.add(arg.substring(i    +    1));    }    tokens.add(arg.substring(i  +  2));	  	compilable	  [FE]  ComparisonFailure  	89	4	add
708	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(i    +    1));    if(options.hasOption(arg.substring(i  +  1)))  {  tokens.add(arg.substring(i  +  1));  }  else  {  tokens.add(arg.substring(i  +  1));  }  tokens.add(arg.substring(1));  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	                tokens.add(arg.substring(i        +        1));        if(options.hasOption(arg.substring(i    +    1)))    {    tokens.add(arg.substring(i    +    1));    }    else    {    tokens.add(arg.substring(i    +    1));    }    tokens.add(arg.substring(1));	  	compilable	  [FE]  ComparisonFailure  	89	4	add
709	[BUG]  [BUGGY]          tokens.add(arg.substring(i    +    1));    if(options.hasOption(arg.substring(i  +  1)))  {  tokens.add(arg.substring(i  +  1));  }  else  {  tokens.add(arg.substring(i  +  1));  }  tokens.add(arg.substring(1));  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(i    +    1));    if(options.hasOption(arg.substring(i  +  1)))  {  tokens.add(arg.substring(i  +  1));  }  else  {  tokens.add(arg.substring(i  +  1));  }  tokens.add(arg.substring(1));  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                tokens.add(arg.substring(i        +        1));        if(options.hasOption(arg.substring(i    +    1)))    {    tokens.add(arg.substring(i    +    1));    }    else    {    tokens.add(arg.substring(i    +    1));    }    tokens.add(arg.substring(1));	  	compilable	  [FE]  ComparisonFailure  	89	4	add
710	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(i    +    1));    if(options.hasOption(arg.substring(i  +  1)))  {  tokens.add(arg.substring(i  +  1));  }  else  {  tokens.add(arg.substring(i  +  1));  }  tokens.add(arg.substring(0,  2));  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	                tokens.add(arg.substring(i        +        1));        if(options.hasOption(arg.substring(i    +    1)))    {    tokens.add(arg.substring(i    +    1));    }    else    {    tokens.add(arg.substring(i    +    1));    }    tokens.add(arg.substring(0,  2));	  	compilable	  [FE]  ComparisonFailure  	89	4	add
711	[BUG]  [BUGGY]          tokens.add(arg.substring(i    +    1));    if(options.hasOption(arg.substring(i  +  1)))  {  tokens.add(arg.substring(i  +  1));  }  else  {  tokens.add(arg.substring(i  +  1));  }  tokens.add(arg.substring(0,  2));  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(i    +    1));    if(options.hasOption(arg.substring(i  +  1)))  {  tokens.add(arg.substring(i  +  1));  }  else  {  tokens.add(arg.substring(i  +  1));  }  tokens.add(arg.substring(0,  2));  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                tokens.add(arg.substring(i        +        1));        if(options.hasOption(arg.substring(i    +    1)))    {    tokens.add(arg.substring(i    +    1));    }    else    {    tokens.add(arg.substring(i    +    1));    }    tokens.add(arg.substring(0,  2));	  	compilable	  [FE]  ComparisonFailure  	89	4	add
712	[BUG]  [BUGGY]          tokens.add(arg.substring(i    +    1));    tokens.add(arg.substring(i  +  1));  if(options.hasOption(arg))  {  tokens.add(arg.substring(i  +  1));  }  if(options.hasOption(arg))  {  tokens.add(arg.substring(i  +  1));  tokens.add(arg.substring(i  +  1));  if(options.hasOption(arg))  {  tokens.add(arg.substring(i  +  1));  }  [CE]  'else'  without  'if'  [FE]    ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(i    +    1));    tokens.add(arg.substring(i  +  1));  if(options.hasOption(arg))  {  tokens.add(arg.substring(i  +  1));  }  if(options.hasOption(arg))  {  tokens.add(arg.substring(i  +  1));  tokens.add(arg.substring(i  +  1));  if(options.hasOption(arg))  {  tokens.add(arg.substring(i  +  1));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                tokens.add(arg.substring(i        +        1));        tokens.add(arg.substring(i    +    1));    if(options.hasOption(arg))    {    tokens.add(arg.substring(i    +    1));    }    if(options.hasOption(arg))  {  tokens.add(arg.substring(i  +  1));  tokens.add(arg.substring(i  +  1));  if(options.hasOption(arg))  {  tokens.add(arg.substring(i  +  1));  }	  	non-compiled	[CE]  'else'  without  'if'	130	None	add
713	[BUG]  [BUGGY]          tokens.add(arg.substring(i    +    1));    tokens.add(arg.substring(i  +  1));  if(options.hasOption(arg))  {  tokens.add(arg.substring(i  +  1));  }  if(options.hasOption(arg))  {  tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(i  +  1));  if(options.hasOption(arg))  {  tokens.add(arg.substring(i  +  1));  }  [CE]  'else'  without  'if'  [FE]      ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(i    +    1));    tokens.add(arg.substring(i  +  1));  if(options.hasOption(arg))  {  tokens.add(arg.substring(i  +  1));  }  if(options.hasOption(arg))  {  tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(i  +  1));  if(options.hasOption(arg))  {  tokens.add(arg.substring(i  +  1));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                tokens.add(arg.substring(i        +        1));        tokens.add(arg.substring(i    +    1));    if(options.hasOption(arg))    {    tokens.add(arg.substring(i    +    1));    }    if(options.hasOption(arg))  {  tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(i  +  1));  if(options.hasOption(arg))  {  tokens.add(arg.substring(i  +  1));  }	  	non-compiled	[CE]  'else'  without  'if'	130	None	add
714	[BUG]  [BUGGY]  else  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]    MissingArgumentException    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]  else  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	else  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  else  {  throw  new  IllegalArgumentException( " ");  }	          tokens.add(arg.substring(0,    2));    if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	146	None	replace
715	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(i    +    2));    tokens.add(arg.substring(i  +  2));  if(options.hasOption(arg))  {  tokens.add(arg.substring(i  +  2));  }  if(options.hasOption(arg))  {  tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(i  +  2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	                tokens.add(arg.substring(i        +        2));        tokens.add(arg.substring(i    +    2));    if(options.hasOption(arg))    {    tokens.add(arg.substring(i    +    2));    }    if(options.hasOption(arg))  {  tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(i  +  2));  }	  	compilable	  [FE]  ComparisonFailure  	96	3	add
716	[BUG]  [BUGGY]          tokens.add(arg.substring(i    +    2));    tokens.add(arg.substring(i  +  2));  if(options.hasOption(arg))  {  tokens.add(arg.substring(i  +  2));  }  if(options.hasOption(arg))  {  tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(i  +  2));  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(i    +    2));    tokens.add(arg.substring(i  +  2));  if(options.hasOption(arg))  {  tokens.add(arg.substring(i  +  2));  }  if(options.hasOption(arg))  {  tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(i  +  2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                tokens.add(arg.substring(i        +        2));        tokens.add(arg.substring(i    +    2));    if(options.hasOption(arg))    {    tokens.add(arg.substring(i    +    2));    }    if(options.hasOption(arg))  {  tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(i  +  2));  }	  	compilable	  [FE]  ComparisonFailure  	96	3	add
717	[BUG]  [BUGGY]          tokens.add(arg.substring(0,    2));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(opt);  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  else  {  [CE]  'else'  without  'if'  [FE]    MissingArgumentException    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(0,    2));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(opt);  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  else  {  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                tokens.add(arg.substring(0,        2));        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    }    else    {    tokens.add(opt);    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  else  {	  	non-compiled	[CE]  'else'  without  'if'	147	None	add
718	[BUG]  [BUGGY]          tokens.add(arg.substring(0,    2));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(opt);  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens  [CE]  ';'  expected  [FE]      MissingArgumentException    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(0,    2));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(opt);  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                tokens.add(arg.substring(0,        2));        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    }    else    {    tokens.add(opt);    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens	  	non-compiled	[CE]  ';'  expected	147	None	add
719	[BUG]  [BUGGY]          tokens.add(arg.substring(0,    2));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(opt);  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(opt);  }  [CE]  'else'  without  'if'  [FE]        MissingArgumentException    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(0,    2));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(opt);  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(opt);  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                tokens.add(arg.substring(0,        2));        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    }    else    {    tokens.add(opt);    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(opt);  }	  	non-compiled	[CE]  'else'  without  'if'	147	None	add
720	[BUG]  [BUGGY]  [FE]  MissingArgumentException  [FE]          MissingArgumentException    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(0,    2));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(opt);  }  tokens.add(opt);  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	                tokens.add(arg.substring(0,        2));        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    }    else    {    tokens.add(opt);    }    tokens.add(opt);	  	compilable	  [FE]  MissingArgumentException  	147	4	add
721	[BUG]  [BUGGY]          tokens.add(arg.substring(0,    2));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(opt);  }  tokens.add(opt);  [FE]  MissingArgumentException  [FE]          MissingArgumentException    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(0,    2));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(opt);  }  tokens.add(opt);  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                tokens.add(arg.substring(0,        2));        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    }    else    {    tokens.add(opt);    }    tokens.add(opt);	  	compilable	  [FE]  MissingArgumentException  	147	4	add
722	[BUG]  [BUGGY]  [FE]  MissingArgumentException  [FE]    MissingArgumentException    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(0,    2));    tokens.add(arg.substring(0,  1));  tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(1));  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	                tokens.add(arg.substring(0,        2));        tokens.add(arg.substring(0,    1));    tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(1));	  	compilable	  [FE]  MissingArgumentException  	34	4	add
723	[BUG]  [BUGGY]          tokens.add(arg.substring(0,    2));    tokens.add(arg.substring(0,  1));  tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(1));  [FE]  MissingArgumentException  [FE]    MissingArgumentException    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(0,    2));    tokens.add(arg.substring(0,  1));  tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(1));  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                tokens.add(arg.substring(0,        2));        tokens.add(arg.substring(0,    1));    tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(1));	  	compilable	  [FE]  MissingArgumentException  	34	4	add
724	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(i    +    2));    tokens.add(arg.substring(i  +  2));  tokens.add(arg.substring(i  +  2));  tokens.add(arg.substring(i  +  1));  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	                tokens.add(arg.substring(i        +        2));        tokens.add(arg.substring(i    +    2));    tokens.add(arg.substring(i  +  2));  tokens.add(arg.substring(i  +  1));	  	compilable	  [FE]  ComparisonFailure  	58	3	add
725	[BUG]  [BUGGY]          tokens.add(arg.substring(i    +    2));    tokens.add(arg.substring(i  +  2));  tokens.add(arg.substring(i  +  2));  tokens.add(arg.substring(i  +  1));  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(i    +    2));    tokens.add(arg.substring(i  +  2));  tokens.add(arg.substring(i  +  2));  tokens.add(arg.substring(i  +  1));  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                tokens.add(arg.substring(i        +        2));        tokens.add(arg.substring(i    +    2));    tokens.add(arg.substring(i  +  2));  tokens.add(arg.substring(i  +  1));	  	compilable	  [FE]  ComparisonFailure  	58	3	add
726	[BUG]  [BUGGY]  if(options.hasOption(arg.substring(0,  2))  {  tokens.add(arg.substring(1));  tokens.add(arg.substring(4));  }  [CE]  ')'  expected  [FE]    ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]  if(options.hasOption(arg.substring(0,  2))  {  tokens.add(arg.substring(1));  tokens.add(arg.substring(4));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	if(options.hasOption(arg.substring(0,  2))  {  tokens.add(arg.substring(1));  tokens.add(arg.substring(4));  }	          tokens.add(arg.substring(1));    tokens.add(arg.substring(4));    	non-compiled	[CE]  ')'  expected	14	None	replace
727	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(1,    2));    }    else  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1,  2));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1,  2));  }  else  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1,  2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	                if(options.hasOption(arg.substring(0,        2)))        {        tokens.add(arg.substring(1,        2));        }        else    if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(1,    2));    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1,  2));  }  else  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1,  2));  }	  	compilable	  [FE]  ComparisonFailure  	108	4	add
728	[BUG]  [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(1,    2));    }    else  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1,  2));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1,  2));  }  else  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1,  2));  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(1,    2));    }    else  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1,  2));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1,  2));  }  else  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1,  2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                if(options.hasOption(arg.substring(0,        2)))        {        tokens.add(arg.substring(1,        2));        }        else    if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(1,    2));    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1,  2));  }  else  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1,  2));  }	  	compilable	  [FE]  ComparisonFailure  	108	4	add
729	[BUG]  [BUGGY]  if(options.hasOption(arg.substring(0,  2))  {  tokens.add(arg.substring(1));  tokens.add(arg.substring(3));  }  [CE]  ')'  expected  [FE]    ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]  if(options.hasOption(arg.substring(0,  2))  {  tokens.add(arg.substring(1));  tokens.add(arg.substring(3));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	if(options.hasOption(arg.substring(0,  2))  {  tokens.add(arg.substring(1));  tokens.add(arg.substring(3));  }	          tokens.add(arg.substring(1));    tokens.add(arg.substring(3));    	non-compiled	[CE]  ')'  expected	12	None	replace
730	[BUG]  [BUGGY]  if(options.hasOption(arg.substring(0,  2))  {  tokens.add(arg.substring(i));  }  [CE]  ')'  expected  [FE]    UnrecognizedOptionException    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]  if(options.hasOption(arg.substring(0,  2))  {  tokens.add(arg.substring(i));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	if(options.hasOption(arg.substring(0,  2))  {  tokens.add(arg.substring(i));  }	          tokens.add(arg.substring(i));    tokens.add(arg.substring(i));    	non-compiled	[CE]  ')'  expected	19	None	replace
731	[BUG]  [BUGGY]  if(options.hasOption(arg.substring(0,  2))  {  tokens.add(arg.substring(i  +  1));  }  else  {  tokens.add(arg.substring(i  +  1));  }  [CE]  ')'  expected  [FE]      UnrecognizedOptionException    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]  if(options.hasOption(arg.substring(0,  2))  {  tokens.add(arg.substring(i  +  1));  }  else  {  tokens.add(arg.substring(i  +  1));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	if(options.hasOption(arg.substring(0,  2))  {  tokens.add(arg.substring(i  +  1));  }  else  {  tokens.add(arg.substring(i  +  1));  }	          tokens.add(arg.substring(i));    tokens.add(arg.substring(i));    	non-compiled	[CE]  ')'  expected	19	None	replace
732	[BUG]  [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(i    +    1));    }    else  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  else  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  [CE]  'else'  without  'if'  [FE]    ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(i    +    1));    }    else  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  else  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                if(options.hasOption(arg.substring(0,        2)))        {        tokens.add(arg.substring(i        +        1));        }        else    if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(i    +    1));    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  else  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));	  	non-compiled	[CE]  'else'  without  'if'	141	None	add
733	[BUG]  [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(i    +    1));    }    else  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  else  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1)  [CE]  ')'  expected  [FE]      ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(i    +    1));    }    else  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  else  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1)  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                if(options.hasOption(arg.substring(0,        2)))        {        tokens.add(arg.substring(i        +        1));        }        else    if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(i    +    1));    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  else  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1)	  	non-compiled	[CE]  ')'  expected	141	None	add
734	[BUG]  [BUGGY]  if(options.hasOption(arg.substring(0,  2))  {  tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(0,  3));  }  [CE]  ')'  expected  [FE]    MissingArgumentException    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]  if(options.hasOption(arg.substring(0,  2))  {  tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(0,  3));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	if(options.hasOption(arg.substring(0,  2))  {  tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(0,  3));  }	          tokens.add(arg.substring(0,    2));    tokens.add(arg.substring(0,    3));    	non-compiled	[CE]  ')'  expected	39	None	replace
735	[BUG]  [BUGGY]  if(options.hasOption(arg.substring(0,  2))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(arg.substring(0,  3));  }  [CE]  ')'  expected  [FE]      MissingArgumentException    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]  if(options.hasOption(arg.substring(0,  2))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(arg.substring(0,  3));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	if(options.hasOption(arg.substring(0,  2))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(arg.substring(0,  3));  }	          tokens.add(arg.substring(0,    2));    tokens.add(arg.substring(0,    3));    	non-compiled	[CE]  ')'  expected	39	None	replace
736	[BUG]  [BUGGY]  tokens.add(arg.substring(0,  2));  //  property=(value  }  [CE]  'else'  without  'if'  [FE]            ComparisonFailure      [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]  tokens.add(arg.substring(0,  2));  //  property=(value  }  [BUGGY]      }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	tokens.add(arg.substring(0,  2));  //  property=(value  }	  tokens.add(arg.substring(0,    1));    //    property=value    }    	non-compiled	[CE]  'else'  without  'if'	80	None	replace
737	[BUG]  [BUGGY]  tokens.add(arg.substring(0,  2),  arg.toString());  [CE]  'else'  without  'if'  [FE]        MissingArgumentException      [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]  tokens.add(arg.substring(0,  2),  arg.toString());  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	tokens.add(arg.substring(0,  2),  arg.toString());	  tokens.add(arg.substring(0,    2).toString());    	non-compiled	[CE]  'else'  without  'if'	139	None	replace
738	[BUG]  [BUGGY]  tokens.add(arg.substring(0,  2)).toString());  [CE]  ';'  expected  [FE]          MissingArgumentException      [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]  tokens.add(arg.substring(0,  2)).toString());  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	tokens.add(arg.substring(0,  2)).toString());	  tokens.add(arg.substring(0,    2).toString());    	non-compiled	[CE]  ';'  expected	139	None	replace
739	[BUG]  [BUGGY]  if(options.hasOption(arg.substring(0,  2))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(arg.substring(2,  2));  }  [CE]  ')'  expected  [FE]    MissingArgumentException    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]  if(options.hasOption(arg.substring(0,  2))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(arg.substring(2,  2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	if(options.hasOption(arg.substring(0,  2))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(arg.substring(2,  2));  }	          tokens.add(arg.substring(0,    2));    tokens.add(arg.substring(2,    2));    	non-compiled	[CE]  ')'  expected	37	None	replace
740	[BUG]  [BUGGY]          tokens.add(arg.substring(i    +    1));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  tokens.add(arg.substring(i  +  1));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  if(options.hasOption(arg.substring(0,  2)))  {  tokens  [CE]  ';'  expected  [FE]    ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(i    +    1));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  tokens.add(arg.substring(i  +  1));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  if(options.hasOption(arg.substring(0,  2)))  {  tokens  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                tokens.add(arg.substring(i        +        1));        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(i    +    1));    }    tokens.add(arg.substring(i  +  1));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  if(options.hasOption(arg.substring(0,  2)))  {  tokens	  	non-compiled	[CE]  ';'  expected	91	None	add
741	[BUG]  [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    }    while(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  while(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  [CE]  'else'  without  'if'  [FE]              MissingArgumentException      [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    }    while(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  while(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                if(options.hasOption(arg.substring(0,        2)))        {        tokens.add(arg.substring(0,        2));        }        while(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  while(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));	  timeout    	non-compiled	[CE]  'else'  without  'if'	73	None	add
742	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(1,    2));    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1,  2));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1,  2));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1,  2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	                if(options.hasOption(arg.substring(0,        2)))        {        tokens.add(arg.substring(1,        2));        }        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(1,    2));    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1,  2));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1,  2));  }	  	compilable	  [FE]  ComparisonFailure  	41	4	add
743	[BUG]  [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(1,    2));    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1,  2));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1,  2));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1,  2));  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(1,    2));    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1,  2));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1,  2));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1,  2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                if(options.hasOption(arg.substring(0,        2)))        {        tokens.add(arg.substring(1,        2));        }        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(1,    2));    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1,  2));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1,  2));  }	  	compilable	  [FE]  ComparisonFailure  	41	4	add
744	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(1,    2));    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1,  2));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1,  2));  }  if(options.hasOption(arg.substring(2,  2)))  {  tokens.add(arg.substring(1,  2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	                if(options.hasOption(arg.substring(0,        2)))        {        tokens.add(arg.substring(1,        2));        }        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(1,    2));    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1,  2));  }  if(options.hasOption(arg.substring(2,  2)))  {  tokens.add(arg.substring(1,  2));  }	  	compilable	  [FE]  ComparisonFailure  	41	4	add
745	[BUG]  [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(1,    2));    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1,  2));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1,  2));  }  if(options.hasOption(arg.substring(2,  2)))  {  tokens.add(arg.substring(1,  2));  }  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(1,    2));    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1,  2));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1,  2));  }  if(options.hasOption(arg.substring(2,  2)))  {  tokens.add(arg.substring(1,  2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                if(options.hasOption(arg.substring(0,        2)))        {        tokens.add(arg.substring(1,        2));        }        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(1,    2));    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1,  2));  }  if(options.hasOption(arg.substring(2,  2)))  {  tokens.add(arg.substring(1,  2));  }	  	compilable	  [FE]  ComparisonFailure  	41	4	add
746	[BUG]  [BUGGY]          tokens.add(arg.substring(i    +    2));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  2));  }  else  {  tokens.add(arg.substring(i  +  2));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  2));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  2));  }  else  {  [CE]  'else'  without  'if'  [FE]    ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(i    +    2));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  2));  }  else  {  tokens.add(arg.substring(i  +  2));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  2));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  2));  }  else  {  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                tokens.add(arg.substring(i        +        2));        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(i    +    2));    }    else    {    tokens.add(arg.substring(i    +    2));    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  2));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  2));  }  else  {	  	non-compiled	[CE]  'else'  without  'if'	65	None	add
747	[BUG]  [BUGGY]          tokens.add(arg.substring(2));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(arg.substring(2));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  [CE]  'else'  without  'if'  [FE]    ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(2));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(arg.substring(2));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                tokens.add(arg.substring(2));        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    }    else    {    tokens.add(arg.substring(2));    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }	  	non-compiled	[CE]  'else'  without  'if'	113	None	add
748	[BUG]  [BUGGY]          tokens.add(arg.substring(2));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(arg.substring(2));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  else  {  [CE]  'else'  without  'if'  [FE]      ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(2));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(arg.substring(2));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  else  {  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                tokens.add(arg.substring(2));        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    }    else    {    tokens.add(arg.substring(2));    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  else  {	  	non-compiled	[CE]  'else'  without  'if'	113	None	add
749	[BUG]  [BUGGY]  tokens  =  new  TokenBuffer(arg.substring(i  +  2));  [CE]  'else'  without  'if'  [FE]        ComparisonFailure      [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]  tokens  =  new  TokenBuffer(arg.substring(i  +  2));  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	tokens  =  new  TokenBuffer(arg.substring(i  +  2));	          tokens.add(arg.substring(i    +    2));    TokenBuffer    tokens    =    new    TokenBuffer(arg.substring(i    +    2));    	non-compiled	[CE]  'else'  without  'if'	149	None	replace
750	[BUG]  [BUGGY]  if(options.hasOption(arg.substring(0,  2))  {  tokens.add(arg.substring(0,  2));  }  else  {  options.addOption(arg.substring(0,  2));  }  [CE]  ')'  expected  [FE]              MissingArgumentException      [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]  if(options.hasOption(arg.substring(0,  2))  {  tokens.add(arg.substring(0,  2));  }  else  {  options.addOption(arg.substring(0,  2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	if(options.hasOption(arg.substring(0,  2))  {  tokens.add(arg.substring(0,  2));  }  else  {  options.addOption(arg.substring(0,  2));  }	          tokens.add(arg.substring(0,    2));    if(options.hasOption(arg.substring(0,    2))    {    tokens.add(arg.substring(0,    2));    }    else    {    options.addOption(arg.substring(0,    2));    }    	non-compiled	[CE]  ')'  expected	129	None	replace
751	[BUG]  [BUGGY]  else  if(options.hasOption(arg.substring(0,  2))  {  tokens.add(arg.substring(0,  2));  }  else  {  options.addOption(arg.substring(0,  2));  }  [CE]  'else'  without  'if'  [FE]                MissingArgumentException      [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]  else  if(options.hasOption(arg.substring(0,  2))  {  tokens.add(arg.substring(0,  2));  }  else  {  options.addOption(arg.substring(0,  2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	else  if(options.hasOption(arg.substring(0,  2))  {  tokens.add(arg.substring(0,  2));  }  else  {  options.addOption(arg.substring(0,  2));  }	          tokens.add(arg.substring(0,    2));    if(options.hasOption(arg.substring(0,    2))    {    tokens.add(arg.substring(0,    2));    }    else    {    options.addOption(arg.substring(0,    2));    }    	non-compiled	[CE]  'else'  without  'if'	129	None	replace
752	[BUG]  [BUGGY]  if(options.hasOption(arg))  {  tokens.add(arg.substring(0,  2));  }  else  {  options.addOption(arg.substring(0,  2));  }  [CE]  'else'  without  'if'  [FE]                  MissingArgumentException      [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]  if(options.hasOption(arg))  {  tokens.add(arg.substring(0,  2));  }  else  {  options.addOption(arg.substring(0,  2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	if(options.hasOption(arg))  {  tokens.add(arg.substring(0,  2));  }  else  {  options.addOption(arg.substring(0,  2));  }	          tokens.add(arg.substring(0,    2));    if(options.hasOption(arg.substring(0,    2))    {    tokens.add(arg.substring(0,    2));    }    else    {    options.addOption(arg.substring(0,    2));    }    	non-compiled	[CE]  'else'  without  'if'	129	None	replace
753	[BUG]  [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  [CE]  'else'  without  'if'  [FE]    MissingArgumentException    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                if(options.hasOption(arg.substring(0,        2)))        {        tokens.add(arg.substring(0,        2));        }        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));	  	non-compiled	[CE]  'else'  without  'if'	69	None	add
754	[BUG]  [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    }    else  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  else  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2)  [CE]  ')'  expected  [FE]    MissingArgumentException    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    }    else  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  else  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2)  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                if(options.hasOption(arg.substring(0,        2)))        {        tokens.add(arg.substring(0,        2));        }        else    if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  else  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2)	  	non-compiled	[CE]  ')'  expected	102	None	add
755	[BUG]  [BUGGY]          tokens.add(arg.substring(0,    2));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  'else'  without  'if'  [FE]    MissingArgumentException    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(0,    2));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                tokens.add(arg.substring(0,        2));        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  'else'  without  'if'	145	None	add
756	[BUG]  [BUGGY]  else  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(0,  1));  }  [CE]  'else'  without  'if'  [FE]    MissingArgumentException    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]  else  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(0,  1));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	else  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(0,  1));  }	          tokens.add(arg.substring(0,    2));    tokens.add(arg.substring(0,    1));    	non-compiled	[CE]  'else'  without  'if'	35	None	replace
757	[BUG]  [BUGGY]  safely(options.hasOption(arg.substring(0,  2)))  <  tokens.add(arg.substring(i  +  1));  [CE]  not  a  statement  [FE]              ComparisonFailure      [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]  safely(options.hasOption(arg.substring(0,  2)))  <  tokens.add(arg.substring(i  +  1));  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	safely(options.hasOption(arg.substring(0,  2)))  <  tokens.add(arg.substring(i  +  1));	          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(i    +    1));    }    if(options.hasOption(arg.substring(0,    2)))    <    tokens.add(arg.substring(i    +    1));    }    	non-compiled	[CE]  not  a  statement	6	None	replace
758	[BUG]  [BUGGY]  safely(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]  safely(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	safely(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }	          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(i    +    1));    }    if(options.hasOption(arg.substring(0,    2)))    <    tokens.add(arg.substring(i    +    1));    }    	non-compiled	[CE]  ';'  expected	6	None	replace
759	[BUG]  [BUGGY]  safely(options.hasOption(arg.substring(0,  2)))  <  +  tokens.add(arg.substring(i  +  1));  [CE]  not  a  statement  [FE]                  ComparisonFailure      [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]  safely(options.hasOption(arg.substring(0,  2)))  <  +  tokens.add(arg.substring(i  +  1));  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	safely(options.hasOption(arg.substring(0,  2)))  <  +  tokens.add(arg.substring(i  +  1));	          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(i    +    1));    }    if(options.hasOption(arg.substring(0,    2)))    <    tokens.add(arg.substring(i    +    1));    }    	non-compiled	[CE]  not  a  statement	6	None	replace
760	[BUG]  [BUGGY]  if(options.hasOption(arg.substring(0,  2))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(arg.substring(1,  2));  }  [CE]  ')'  expected  [FE]    MissingArgumentException    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]  if(options.hasOption(arg.substring(0,  2))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(arg.substring(1,  2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	if(options.hasOption(arg.substring(0,  2))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(arg.substring(1,  2));  }	          tokens.add(arg.substring(0,    2));    tokens.add(arg.substring(1,    2));    	non-compiled	[CE]  ')'  expected	33	None	replace
761	[BUG]  [BUGGY]  if(options.hasOption(arg.substring(0,  2))  {  tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(1,  2));  }  [CE]  ')'  expected  [FE]      MissingArgumentException    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]  if(options.hasOption(arg.substring(0,  2))  {  tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(1,  2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	if(options.hasOption(arg.substring(0,  2))  {  tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(1,  2));  }	          tokens.add(arg.substring(0,    2));    tokens.add(arg.substring(1,    2));    	non-compiled	[CE]  ')'  expected	33	None	replace
762	[BUG]  [BUGGY]          tokens.add(arg.substring(i));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i));  }  else  {  tokens.add(arg.substring(i));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i));  }  [CE]  'else'  without  'if'  [FE]    UnrecognizedOptionException    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(i));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i));  }  else  {  tokens.add(arg.substring(i));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                tokens.add(arg.substring(i));        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(i));    }    else    {    tokens.add(arg.substring(i));    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i));  }	  	non-compiled	[CE]  'else'  without  'if'	20	None	add
763	[BUG]  [BUGGY]          tokens.add(arg.substring(i));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i));  }  else  {  tokens.add(arg.substring(i));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  [CE]  'else'  without  'if'  [FE]      UnrecognizedOptionException    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(i));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i));  }  else  {  tokens.add(arg.substring(i));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                tokens.add(arg.substring(i));        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(i));    }    else    {    tokens.add(arg.substring(i));    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }	  	non-compiled	[CE]  'else'  without  'if'	20	None	add
764	[BUG]  [BUGGY]          tokens.add(arg.substring(i));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i));  }  else  {  tokens.add(arg.substring(i));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i));  }  [CE]  'else'  without  'if'  [FE]        UnrecognizedOptionException    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(i));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i));  }  else  {  tokens.add(arg.substring(i));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                tokens.add(arg.substring(i));        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(i));    }    else    {    tokens.add(arg.substring(i));    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i));  }	  	non-compiled	[CE]  'else'  without  'if'	20	None	add
765	[BUG]  [BUGGY]          tokens.add(arg.substring(i));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i));  }  else  {  tokens.add(arg.substring(i));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(2));  }  [CE]  'else'  without  'if'  [FE]          UnrecognizedOptionException    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(i));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i));  }  else  {  tokens.add(arg.substring(i));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                tokens.add(arg.substring(i));        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(i));    }    else    {    tokens.add(arg.substring(i));    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(2));  }	  	non-compiled	[CE]  'else'  without  'if'	20	None	add
766	[BUG]  [BUGGY]          tokens.add(arg.substring(i    +    1));    tokens.add(arg.substring(i  +  1));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  tokens.add(arg.substring(i  +  1));  if(options.hasOption(arg.substring(0,  2)))  {  tokens  [CE]  ';'  expected  [FE]    ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(i    +    1));    tokens.add(arg.substring(i  +  1));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  tokens.add(arg.substring(i  +  1));  if(options.hasOption(arg.substring(0,  2)))  {  tokens  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                tokens.add(arg.substring(i        +        1));        tokens.add(arg.substring(i    +    1));    if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(i    +    1));    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  tokens.add(arg.substring(i  +  1));  if(options.hasOption(arg.substring(0,  2)))  {  tokens	  	non-compiled	[CE]  ';'  expected	85	None	add
767	[BUG]  [BUGGY]          tokens.add(arg.substring(i    +    1));    tokens.add(arg.substring(i  +  1));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  tokens.add(arg.substring(i  +  1));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  [CE]  'else'  without  'if'  [FE]      ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(i    +    1));    tokens.add(arg.substring(i  +  1));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  tokens.add(arg.substring(i  +  1));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                tokens.add(arg.substring(i        +        1));        tokens.add(arg.substring(i    +    1));    if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(i    +    1));    }    tokens.add(arg.substring(i  +  1));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));	  	non-compiled	[CE]  'else'  without  'if'	85	None	add
768	[BUG]  [BUGGY]  while(options.hasOption(arg.substring(i  +  1)))  {  tokens.add(arg.substring(i  +  1));  [CE]  'else'  without  'if'  [FE]            ComparisonFailure      [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]  while(options.hasOption(arg.substring(i  +  1)))  {  tokens.add(arg.substring(i  +  1));  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	while(options.hasOption(arg.substring(i  +  1)))  {  tokens.add(arg.substring(i  +  1));	          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(i    +    1));    }    while(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(i    +    1));    }    timeout    	non-compiled	[CE]  'else'  without  'if'	5	None	replace
769	[BUG]  [BUGGY]  while(options.hasOption(arg.substring(i,  2)))  {  tokens.add(arg.substring(i  +  1));  [CE]  'else'  without  'if'  [FE]              ComparisonFailure      [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]  while(options.hasOption(arg.substring(i,  2)))  {  tokens.add(arg.substring(i  +  1));  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	while(options.hasOption(arg.substring(i,  2)))  {  tokens.add(arg.substring(i  +  1));	          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(i    +    1));    }    while(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(i    +    1));    }    timeout    	non-compiled	[CE]  'else'  without  'if'	5	None	replace
770	[BUG]  [BUGGY]          tokens.add(arg.substring(i));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i));  }  [CE]  'else'  without  'if'  [FE]    UnrecognizedOptionException    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(i));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                tokens.add(arg.substring(i));        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(i));    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i));  }	  	non-compiled	[CE]  'else'  without  'if'	22	None	add
771	[BUG]  [BUGGY]          tokens.add(arg.substring(i));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(2));  }  [CE]  'else'  without  'if'  [FE]      UnrecognizedOptionException    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(i));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                tokens.add(arg.substring(i));        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(i));    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(2));  }	  	non-compiled	[CE]  'else'  without  'if'	22	None	add
772	[BUG]  [BUGGY]  [FE]  UnrecognizedOptionException  [FE]        UnrecognizedOptionException    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(i));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i));  }  tokens.add(arg.substring(i));  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	                tokens.add(arg.substring(i));        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(i));    }    tokens.add(arg.substring(i));	  	compilable	  [FE]  UnrecognizedOptionException  	22	4	add
773	[BUG]  [BUGGY]          tokens.add(arg.substring(i));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i));  }  tokens.add(arg.substring(i));  [FE]  UnrecognizedOptionException  [FE]        UnrecognizedOptionException    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(i));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i));  }  tokens.add(arg.substring(i));  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                tokens.add(arg.substring(i));        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(i));    }    tokens.add(arg.substring(i));	  	compilable	  [FE]  UnrecognizedOptionException  	22	4	add
774	[BUG]  [BUGGY]  [FE]  UnrecognizedOptionException  [FE]    UnrecognizedOptionException    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(i));    tokens.add(arg.substring(i));  tokens.add(arg.substring(i  +  1));  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	                tokens.add(arg.substring(i));        tokens.add(arg.substring(i));    tokens.add(arg.substring(i  +  1));	  	compilable	  [FE]  UnrecognizedOptionException  	18	4	add
775	[BUG]  [BUGGY]          tokens.add(arg.substring(i));    tokens.add(arg.substring(i));  tokens.add(arg.substring(i  +  1));  [FE]  UnrecognizedOptionException  [FE]    UnrecognizedOptionException    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(i));    tokens.add(arg.substring(i));  tokens.add(arg.substring(i  +  1));  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                tokens.add(arg.substring(i));        tokens.add(arg.substring(i));    tokens.add(arg.substring(i  +  1));	  	compilable	  [FE]  UnrecognizedOptionException  	18	4	add
776	[BUG]  [BUGGY]  [FE]  UnrecognizedOptionException  [FE]      UnrecognizedOptionException    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(i));    tokens.add(arg.substring(i));  tokens.add(arg.substring(i  +  2));  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	                tokens.add(arg.substring(i));        tokens.add(arg.substring(i));    tokens.add(arg.substring(i  +  2));	  	compilable	  [FE]  UnrecognizedOptionException  	18	4	add
777	[BUG]  [BUGGY]          tokens.add(arg.substring(i));    tokens.add(arg.substring(i));  tokens.add(arg.substring(i  +  2));  [FE]  UnrecognizedOptionException  [FE]      UnrecognizedOptionException    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(i));    tokens.add(arg.substring(i));  tokens.add(arg.substring(i  +  2));  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                tokens.add(arg.substring(i));        tokens.add(arg.substring(i));    tokens.add(arg.substring(i  +  2));	  	compilable	  [FE]  UnrecognizedOptionException  	18	4	add
778	[BUG]  [BUGGY]  [FE]  UnrecognizedOptionException  [FE]        UnrecognizedOptionException    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(i));    tokens.add(arg.substring(i));  tokens.add(arg.substring(2));  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	                tokens.add(arg.substring(i));        tokens.add(arg.substring(i));    tokens.add(arg.substring(2));	  	compilable	  [FE]  UnrecognizedOptionException  	18	4	add
779	[BUG]  [BUGGY]          tokens.add(arg.substring(i));    tokens.add(arg.substring(i));  tokens.add(arg.substring(2));  [FE]  UnrecognizedOptionException  [FE]        UnrecognizedOptionException    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(i));    tokens.add(arg.substring(i));  tokens.add(arg.substring(2));  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                tokens.add(arg.substring(i));        tokens.add(arg.substring(i));    tokens.add(arg.substring(2));	  	compilable	  [FE]  UnrecognizedOptionException  	18	4	add
780	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(1));    tokens.add(arg.substring(1));  tokens.add(arg.substring(2));  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	                tokens.add(arg.substring(1));        tokens.add(arg.substring(1));    tokens.add(arg.substring(2));	  	compilable	  [FE]  ComparisonFailure  	7	4	add
781	[BUG]  [BUGGY]          tokens.add(arg.substring(1));    tokens.add(arg.substring(1));  tokens.add(arg.substring(2));  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(1));    tokens.add(arg.substring(1));  tokens.add(arg.substring(2));  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                tokens.add(arg.substring(1));        tokens.add(arg.substring(1));    tokens.add(arg.substring(2));	  	compilable	  [FE]  ComparisonFailure  	7	4	add
782	[BUG]  [BUGGY]  tokens  =  new  TokenBuffer(arg.substring(i  +  1),  arg.substring(i  +  1));  tokens.add(arg.substring(i  +  1));  [CE]  'else'  without  'if'  [FE]        ComparisonFailure      [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]  tokens  =  new  TokenBuffer(arg.substring(i  +  1),  arg.substring(i  +  1));  tokens.add(arg.substring(i  +  1));  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	tokens  =  new  TokenBuffer(arg.substring(i  +  1),  arg.substring(i  +  1));  tokens.add(arg.substring(i  +  1));	          tokens.add(arg.substring(i    +    1));    TokenBuffer    tokens    =    new    TokenBuffer(arg.substring(i    +    1));    tokens.add(arg.substring(i    +    1));    	non-compiled	[CE]  'else'  without  'if'	160	None	replace
783	[BUG]  [BUGGY]  tokens  =  new  TokenBuffer(arg.substring(i  +  1,  2));  tokens.add(arg.substring(i  +  1));  [CE]  'else'  without  'if'  [FE]          ComparisonFailure      [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]  tokens  =  new  TokenBuffer(arg.substring(i  +  1,  2));  tokens.add(arg.substring(i  +  1));  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	tokens  =  new  TokenBuffer(arg.substring(i  +  1,  2));  tokens.add(arg.substring(i  +  1));	          tokens.add(arg.substring(i    +    1));    TokenBuffer    tokens    =    new    TokenBuffer(arg.substring(i    +    1));    tokens.add(arg.substring(i    +    1));    	non-compiled	[CE]  'else'  without  'if'	160	None	replace
784	[BUG]  [BUGGY]  else  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1,  2));  }  [CE]  'else'  without  'if'  [FE]              ComparisonFailure      [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]  else  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1,  2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	else  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1,  2));  }	          tokens.add(arg.substring(i    +    2));    tokens.add(arg.substring(i    +    2));    if(options.hasOption(arg.substring(0,    2))    {    tokens.add(arg.substring(i    +    1));    }    	non-compiled	[CE]  'else'  without  'if'	101	None	replace
785	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(2));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  tokens.add(arg.substring(2));  if(options.hasOption(arg.substring(2)))  {  tokens.add(arg.substring(0,  2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	                tokens.add(arg.substring(2));        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    }    tokens.add(arg.substring(2));  if(options.hasOption(arg.substring(2)))  {  tokens.add(arg.substring(0,  2));  }	  	compilable	  [FE]  ComparisonFailure  	52	3	add
786	[BUG]  [BUGGY]          tokens.add(arg.substring(2));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  tokens.add(arg.substring(2));  if(options.hasOption(arg.substring(2)))  {  tokens.add(arg.substring(0,  2));  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(2));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  tokens.add(arg.substring(2));  if(options.hasOption(arg.substring(2)))  {  tokens.add(arg.substring(0,  2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                tokens.add(arg.substring(2));        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    }    tokens.add(arg.substring(2));  if(options.hasOption(arg.substring(2)))  {  tokens.add(arg.substring(0,  2));  }	  	compilable	  [FE]  ComparisonFailure  	52	3	add
787	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(2));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  tokens.add(arg.substring(2));  if(options.hasOption(arg.substring(1)))  {  tokens.add(arg.substring(0,  2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	                tokens.add(arg.substring(2));        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    }    tokens.add(arg.substring(2));  if(options.hasOption(arg.substring(1)))  {  tokens.add(arg.substring(0,  2));  }	  	compilable	  [FE]  ComparisonFailure  	52	3	add
788	[BUG]  [BUGGY]          tokens.add(arg.substring(2));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  tokens.add(arg.substring(2));  if(options.hasOption(arg.substring(1)))  {  tokens.add(arg.substring(0,  2));  }  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(2));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  tokens.add(arg.substring(2));  if(options.hasOption(arg.substring(1)))  {  tokens.add(arg.substring(0,  2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                tokens.add(arg.substring(2));        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    }    tokens.add(arg.substring(2));  if(options.hasOption(arg.substring(1)))  {  tokens.add(arg.substring(0,  2));  }	  	compilable	  [FE]  ComparisonFailure  	52	3	add
789	[BUG]  [BUGGY]  Option  option  =  options.getOption(arg.substring(i  +  1));  [CE]  'else'  without  'if'  [FE]        MissingArgumentException      [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]  Option  option  =  options.getOption(arg.substring(i  +  1));  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	Option  option  =  options.getOption(arg.substring(i  +  1));	  Option    option    =    options.getOption(arg);    	non-compiled	[CE]  'else'  without  'if'	124	None	replace
790	[BUG]  [BUGGY]  Option  option  =  options.getOption(option);  [CE]  'else'  without  'if'  [FE]          MissingArgumentException      [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]  Option  option  =  options.getOption(option);  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	Option  option  =  options.getOption(option);	  Option    option    =    options.getOption(arg);    	non-compiled	[CE]  'else'  without  'if'	124	None	replace
791	[BUG]  [BUGGY]  else  if(options.hasOption(arg.substring(1)))  {  tokens.add(arg.substring(1,  2));  }  [CE]  'else'  without  'if'  [FE]    ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]  else  if(options.hasOption(arg.substring(1)))  {  tokens.add(arg.substring(1,  2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	else  if(options.hasOption(arg.substring(1)))  {  tokens.add(arg.substring(1,  2));  }	          tokens.add(arg.substring(2));    if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(1,    2));    }    	non-compiled	[CE]  'else'  without  'if'	159	None	replace
792	[BUG]  [BUGGY]  [FE]  MissingArgumentException  [FE]        ComparisonFailure      [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]  }  else  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1,  2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	}  else  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1,  2));  }	          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(1,    2));    }    if(options.hasOption(arg.substring(0,    2)))    <    tokens.add(arg.substring(1,    2));    }    	compilable	  [FE]  MissingArgumentException  	154	4	replace
793	[BUG]  [BUGGY]  }  else  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1,  2));  }  [FE]  MissingArgumentException  [FE]        ComparisonFailure      [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]  }  else  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1,  2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	}  else  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1,  2));  }	          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(1,    2));    }    if(options.hasOption(arg.substring(0,    2)))    <    tokens.add(arg.substring(1,    2));    }    	compilable	  [FE]  MissingArgumentException  	154	4	replace
794	[BUG]  [BUGGY]  }  else  if(options.hasOption(arg.substring(0,  2)))  <  tokens.add(arg.substring(1,  2));  [CE]  >  expected  [FE]          ComparisonFailure      [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]  }  else  if(options.hasOption(arg.substring(0,  2)))  <  tokens.add(arg.substring(1,  2));  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	}  else  if(options.hasOption(arg.substring(0,  2)))  <  tokens.add(arg.substring(1,  2));	          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(1,    2));    }    if(options.hasOption(arg.substring(0,    2)))    <    tokens.add(arg.substring(1,    2));    }    	non-compiled	[CE]  >  expected	154	None	replace
795	[BUG]  [BUGGY]  timeout  [FE]            ComparisonFailure      [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(1,    2));    }    while(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1,  2));  }  while(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1,  2));  }  while(options.hasOption(arg.substring(1,  2)))  {  tokens.add(arg.substring(1,  2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	                if(options.hasOption(arg.substring(0,        2)))        {        tokens.add(arg.substring(1,        2));        }        while(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(1,    2));    }    while(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1,  2));  }  while(options.hasOption(arg.substring(1,  2)))  {  tokens.add(arg.substring(1,  2));  }	  timeout    	compilable	timeout	111	1	add
796	[BUG]  [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(1,    2));    }    while(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1,  2));  }  while(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1,  2));  }  while(options.hasOption(arg.substring(1,  2)))  {  tokens.add(arg.substring(1,  2));  }  timeout  [FE]            ComparisonFailure      [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(1,    2));    }    while(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1,  2));  }  while(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1,  2));  }  while(options.hasOption(arg.substring(1,  2)))  {  tokens.add(arg.substring(1,  2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                if(options.hasOption(arg.substring(0,        2)))        {        tokens.add(arg.substring(1,        2));        }        while(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(1,    2));    }    while(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1,  2));  }  while(options.hasOption(arg.substring(1,  2)))  {  tokens.add(arg.substring(1,  2));  }	  timeout    	compilable	timeout	111	1	add
797	[BUG]  [BUGGY]  tokens.add(arg.substring(2,  2));  TokenBuffer  tokens  =  new  TokenBuffer(options.getOption(arg.substring(i)).toString());  [CE]  'else'  without  'if'  [FE]          ComparisonFailure      [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]  tokens.add(arg.substring(2,  2));  TokenBuffer  tokens  =  new  TokenBuffer(options.getOption(arg.substring(i)).toString());  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	tokens.add(arg.substring(2,  2));  TokenBuffer  tokens  =  new  TokenBuffer(options.getOption(arg.substring(i)).toString());	          tokens.add(arg.substring(i));    TokenBuffer    tokens    =    new    TokenBuffer(options.getOption(arg.substring(i)).toString());    	non-compiled	[CE]  'else'  without  'if'	135	None	replace
798	[BUG]  [BUGGY]  [FE]  MissingArgumentException  [FE]    MissingArgumentException    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1,  2));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(2,  2));  }  if(options.hasOption(arg.substring(1,  2)))  {  tokens.add(arg.substring(1,  2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	                if(options.hasOption(arg.substring(0,        2)))        {        tokens.add(arg.substring(0,        2));        }        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(1,    2));    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(2,  2));  }  if(options.hasOption(arg.substring(1,  2)))  {  tokens.add(arg.substring(1,  2));  }	  	compilable	  [FE]  MissingArgumentException  	106	4	add
799	[BUG]  [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1,  2));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(2,  2));  }  if(options.hasOption(arg.substring(1,  2)))  {  tokens.add(arg.substring(1,  2));  }  [FE]  MissingArgumentException  [FE]    MissingArgumentException    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1,  2));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(2,  2));  }  if(options.hasOption(arg.substring(1,  2)))  {  tokens.add(arg.substring(1,  2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                if(options.hasOption(arg.substring(0,        2)))        {        tokens.add(arg.substring(0,        2));        }        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(1,    2));    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(2,  2));  }  if(options.hasOption(arg.substring(1,  2)))  {  tokens.add(arg.substring(1,  2));  }	  	compilable	  [FE]  MissingArgumentException  	106	4	add
800	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(i    +    2));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  2));  }  else  {  tokens.add(arg.substring(i  +  2));  }  tokens.add(arg.substring(i  +  2));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  2));  }  else  {  tokens.add(arg.substring(i  +  2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	                tokens.add(arg.substring(i        +        2));        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(i    +    2));    }    else    {    tokens.add(arg.substring(i    +    2));    }    tokens.add(arg.substring(i  +  2));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  2));  }  else  {  tokens.add(arg.substring(i  +  2));  }	  	compilable	  [FE]  ComparisonFailure  	65	3	add
801	[BUG]  [BUGGY]          tokens.add(arg.substring(i    +    2));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  2));  }  else  {  tokens.add(arg.substring(i  +  2));  }  tokens.add(arg.substring(i  +  2));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  2));  }  else  {  tokens.add(arg.substring(i  +  2));  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(i    +    2));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  2));  }  else  {  tokens.add(arg.substring(i  +  2));  }  tokens.add(arg.substring(i  +  2));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  2));  }  else  {  tokens.add(arg.substring(i  +  2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                tokens.add(arg.substring(i        +        2));        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(i    +    2));    }    else    {    tokens.add(arg.substring(i    +    2));    }    tokens.add(arg.substring(i  +  2));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  2));  }  else  {  tokens.add(arg.substring(i  +  2));  }	  	compilable	  [FE]  ComparisonFailure  	65	3	add
802	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(i    +    2));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  2));  }  else  {  tokens.add(arg.substring(i  +  2));  }  tokens.add(arg.substring(i  +  2));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  2));  }  else  {  tokens.add(arg.substring(2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	                tokens.add(arg.substring(i        +        2));        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(i    +    2));    }    else    {    tokens.add(arg.substring(i    +    2));    }    tokens.add(arg.substring(i  +  2));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  2));  }  else  {  tokens.add(arg.substring(2));  }	  	compilable	  [FE]  ComparisonFailure  	65	3	add
803	[BUG]  [BUGGY]          tokens.add(arg.substring(i    +    2));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  2));  }  else  {  tokens.add(arg.substring(i  +  2));  }  tokens.add(arg.substring(i  +  2));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  2));  }  else  {  tokens.add(arg.substring(2));  }  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(i    +    2));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  2));  }  else  {  tokens.add(arg.substring(i  +  2));  }  tokens.add(arg.substring(i  +  2));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  2));  }  else  {  tokens.add(arg.substring(2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                tokens.add(arg.substring(i        +        2));        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(i    +    2));    }    else    {    tokens.add(arg.substring(i    +    2));    }    tokens.add(arg.substring(i  +  2));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  2));  }  else  {  tokens.add(arg.substring(2));  }	  	compilable	  [FE]  ComparisonFailure  	65	3	add
804	[BUG]  [BUGGY]  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  else  {  throw  new  MissingArgumentException( " ");  }  [CE]  'else'  without  'if'  [FE]    MissingArgumentException    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  else  {  throw  new  MissingArgumentException( " ");  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  else  {  throw  new  MissingArgumentException( " ");  }	          tokens.add(arg.substring(0,    2));    tokens.add(arg.substring(0,    1));    	non-compiled	[CE]  'else'  without  'if'	35	None	replace
805	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(2));    tokens.add(arg.substring(2));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(2));  tokens.add(arg.substring(2));  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	                tokens.add(arg.substring(2));        tokens.add(arg.substring(2));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(2));  tokens.add(arg.substring(2));  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	compilable	  [FE]  ComparisonFailure  	48	3	add
806	[BUG]  [BUGGY]          tokens.add(arg.substring(2));    tokens.add(arg.substring(2));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(2));  tokens.add(arg.substring(2));  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(2));    tokens.add(arg.substring(2));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(2));  tokens.add(arg.substring(2));  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                tokens.add(arg.substring(2));        tokens.add(arg.substring(2));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(2));  tokens.add(arg.substring(2));  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	compilable	  [FE]  ComparisonFailure  	48	3	add
807	[BUG]  [BUGGY]          tokens.add(arg.substring(2));    tokens.add(arg.substring(2));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(2));  tokens.add(arg.substring(2));  }  else  {  for(int  i  =  0;  i  <  options.size();  ++i)  {  tokens  [CE]  ';'  expected  [FE]      ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(2));    tokens.add(arg.substring(2));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(2));  tokens.add(arg.substring(2));  }  else  {  for(int  i  =  0;  i  <  options.size();  ++i)  {  tokens  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                tokens.add(arg.substring(2));        tokens.add(arg.substring(2));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(2));  tokens.add(arg.substring(2));  }  else  {  for(int  i  =  0;  i  <  options.size();  ++i)  {  tokens	  	non-compiled	[CE]  ';'  expected	48	None	add
808	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(i    +    1));    }    if(options.hasOption(arg.substring(0,  1)))  {  tokens.add(arg.substring(i  +  1));  }  else  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	                if(options.hasOption(arg.substring(0,        2)))        {        tokens.add(arg.substring(i        +        1));        }        if(options.hasOption(arg.substring(0,    1)))    {    tokens.add(arg.substring(i    +    1));    }    else  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }	  	compilable	  [FE]  ComparisonFailure  	143	4	add
809	[BUG]  [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(i    +    1));    }    if(options.hasOption(arg.substring(0,  1)))  {  tokens.add(arg.substring(i  +  1));  }  else  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(i    +    1));    }    if(options.hasOption(arg.substring(0,  1)))  {  tokens.add(arg.substring(i  +  1));  }  else  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                if(options.hasOption(arg.substring(0,        2)))        {        tokens.add(arg.substring(i        +        1));        }        if(options.hasOption(arg.substring(0,    1)))    {    tokens.add(arg.substring(i    +    1));    }    else  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }	  	compilable	  [FE]  ComparisonFailure  	143	4	add
810	[BUG]  [BUGGY]  tokens.add(arg.substring(0,  2)).toString();  [CE]  'else'  without  'if'  [FE]        MissingArgumentException      [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]  tokens.add(arg.substring(0,  2)).toString();  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	tokens.add(arg.substring(0,  2)).toString();	  tokens.add(arg.substring(0,    2).toString());    	non-compiled	[CE]  'else'  without  'if'	139	None	replace
811	[BUG]  [BUGGY]  tokens.add(arg.substring(i  +  1,  2  +  1));  [CE]  'else'  without  'if'  [FE]        ComparisonFailure      [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]  tokens.add(arg.substring(i  +  1,  2  +  1));  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	tokens.add(arg.substring(i  +  1,  2  +  1));	  tokens.add(arg.substring(i    +    1,    2));    	non-compiled	[CE]  'else'  without  'if'	150	None	replace
812	[BUG]  [BUGGY]  [FE]  UnrecognizedOptionException  [FE]    UnrecognizedOptionException    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(i));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i));  }  else  {  tokens.add(arg.substring(i));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	                tokens.add(arg.substring(i));        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(i));    }    else    {    tokens.add(arg.substring(i));    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }	  	compilable	  [FE]  UnrecognizedOptionException  	20	4	add
813	[BUG]  [BUGGY]          tokens.add(arg.substring(i));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i));  }  else  {  tokens.add(arg.substring(i));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  [FE]  UnrecognizedOptionException  [FE]    UnrecognizedOptionException    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(i));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i));  }  else  {  tokens.add(arg.substring(i));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                tokens.add(arg.substring(i));        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(i));    }    else    {    tokens.add(arg.substring(i));    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }	  	compilable	  [FE]  UnrecognizedOptionException  	20	4	add
814	[BUG]  [BUGGY]  [FE]  UnrecognizedOptionException  [FE]      UnrecognizedOptionException    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(i));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i));  }  else  {  tokens.add(arg.substring(i));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  else  {  tokens.add(arg.substring(2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	                tokens.add(arg.substring(i));        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(i));    }    else    {    tokens.add(arg.substring(i));    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  else  {  tokens.add(arg.substring(2));  }	  	compilable	  [FE]  UnrecognizedOptionException  	20	4	add
815	[BUG]  [BUGGY]          tokens.add(arg.substring(i));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i));  }  else  {  tokens.add(arg.substring(i));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  else  {  tokens.add(arg.substring(2));  }  [FE]  UnrecognizedOptionException  [FE]      UnrecognizedOptionException    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(i));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i));  }  else  {  tokens.add(arg.substring(i));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  else  {  tokens.add(arg.substring(2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                tokens.add(arg.substring(i));        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(i));    }    else    {    tokens.add(arg.substring(i));    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  else  {  tokens.add(arg.substring(2));  }	  	compilable	  [FE]  UnrecognizedOptionException  	20	4	add
816	[BUG]  [BUGGY]  [FE]  UnrecognizedOptionException  [FE]        UnrecognizedOptionException    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(i));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i));  }  else  {  tokens.add(arg.substring(i));  }  tokens.add(arg.substring(i));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i));  }  else  {  tokens.add(arg.substring(2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	                tokens.add(arg.substring(i));        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(i));    }    else    {    tokens.add(arg.substring(i));    }    tokens.add(arg.substring(i));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i));  }  else  {  tokens.add(arg.substring(2));  }	  	compilable	  [FE]  UnrecognizedOptionException  	20	4	add
817	[BUG]  [BUGGY]          tokens.add(arg.substring(i));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i));  }  else  {  tokens.add(arg.substring(i));  }  tokens.add(arg.substring(i));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i));  }  else  {  tokens.add(arg.substring(2));  }  [FE]  UnrecognizedOptionException  [FE]        UnrecognizedOptionException    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(i));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i));  }  else  {  tokens.add(arg.substring(i));  }  tokens.add(arg.substring(i));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i));  }  else  {  tokens.add(arg.substring(2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                tokens.add(arg.substring(i));        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(i));    }    else    {    tokens.add(arg.substring(i));    }    tokens.add(arg.substring(i));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i));  }  else  {  tokens.add(arg.substring(2));  }	  	compilable	  [FE]  UnrecognizedOptionException  	20	4	add
818	[BUG]  [BUGGY]  [FE]  UnrecognizedOptionException  [FE]          UnrecognizedOptionException    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(i));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i));  }  else  {  tokens.add(arg.substring(i));  }  tokens.add(arg.substring(2));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	                tokens.add(arg.substring(i));        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(i));    }    else    {    tokens.add(arg.substring(i));    }    tokens.add(arg.substring(2));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }	  	compilable	  [FE]  UnrecognizedOptionException  	20	4	add
819	[BUG]  [BUGGY]          tokens.add(arg.substring(i));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i));  }  else  {  tokens.add(arg.substring(i));  }  tokens.add(arg.substring(2));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  [FE]  UnrecognizedOptionException  [FE]          UnrecognizedOptionException    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(i));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i));  }  else  {  tokens.add(arg.substring(i));  }  tokens.add(arg.substring(2));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                tokens.add(arg.substring(i));        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(i));    }    else    {    tokens.add(arg.substring(i));    }    tokens.add(arg.substring(2));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }	  	compilable	  [FE]  UnrecognizedOptionException  	20	4	add
820	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(2));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(2,  2));  }  tokens.add(arg.substring(2));  if(options.hasOption(arg))  {  tokens.add(arg.substring(2,  2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	                tokens.add(arg.substring(2));        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(2,    2));    }    tokens.add(arg.substring(2));  if(options.hasOption(arg))  {  tokens.add(arg.substring(2,  2));  }	  	compilable	  [FE]  ComparisonFailure  	54	3	add
821	[BUG]  [BUGGY]          tokens.add(arg.substring(2));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(2,  2));  }  tokens.add(arg.substring(2));  if(options.hasOption(arg))  {  tokens.add(arg.substring(2,  2));  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(2));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(2,  2));  }  tokens.add(arg.substring(2));  if(options.hasOption(arg))  {  tokens.add(arg.substring(2,  2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                tokens.add(arg.substring(2));        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(2,    2));    }    tokens.add(arg.substring(2));  if(options.hasOption(arg))  {  tokens.add(arg.substring(2,  2));  }	  	compilable	  [FE]  ComparisonFailure  	54	3	add
822	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]      ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(2));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(2,  2));  }  tokens.add(arg.substring(2));  if(options.hasOption(arg.substring(3,  2)))  {  tokens.add(arg.substring(2,  2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	                tokens.add(arg.substring(2));        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(2,    2));    }    tokens.add(arg.substring(2));  if(options.hasOption(arg.substring(3,  2)))  {  tokens.add(arg.substring(2,  2));  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	54	4	add
823	[BUG]  [BUGGY]          tokens.add(arg.substring(2));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(2,  2));  }  tokens.add(arg.substring(2));  if(options.hasOption(arg.substring(3,  2)))  {  tokens.add(arg.substring(2,  2));  }  [FE]  StringIndexOutOfBoundsException  [FE]      ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(2));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(2,  2));  }  tokens.add(arg.substring(2));  if(options.hasOption(arg.substring(3,  2)))  {  tokens.add(arg.substring(2,  2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                tokens.add(arg.substring(2));        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(2,    2));    }    tokens.add(arg.substring(2));  if(options.hasOption(arg.substring(3,  2)))  {  tokens.add(arg.substring(2,  2));  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	54	4	add
824	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(i    +    1));    tokens.add(arg.substring(i  +  1));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	                tokens.add(arg.substring(i        +        1));        tokens.add(arg.substring(i    +    1));    if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(i    +    1));    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }	  	compilable	  [FE]  ComparisonFailure  	85	4	add
825	[BUG]  [BUGGY]          tokens.add(arg.substring(i    +    1));    tokens.add(arg.substring(i  +  1));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(i    +    1));    tokens.add(arg.substring(i  +  1));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                tokens.add(arg.substring(i        +        1));        tokens.add(arg.substring(i    +    1));    if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(i    +    1));    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }	  	compilable	  [FE]  ComparisonFailure  	85	4	add
826	[BUG]  [BUGGY]  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(arg.substring(i  +  2));  }  [CE]  'else'  without  'if'  [FE]    ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(arg.substring(i  +  2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(arg.substring(i  +  2));  }	          tokens.add(arg.substring(i    +    2));    if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(i    +    2));    }    else    {    tokens.add(arg.substring(i    +    2));    }    	non-compiled	[CE]  'else'  without  'if'	66	None	replace
827	[BUG]  [BUGGY]          tokens.add(arg.substring(i    +    1));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  tokens.add(arg.substring(i  +  1));  if(options.hasOption(arg.substring(0,  2))  {  tokens.add(arg.substring(i  +  1));  }  [CE]  ')'  expected  [FE]    ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(i    +    1));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  tokens.add(arg.substring(i  +  1));  if(options.hasOption(arg.substring(0,  2))  {  tokens.add(arg.substring(i  +  1));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                tokens.add(arg.substring(i        +        1));        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(i    +    1));    }    tokens.add(arg.substring(i  +  1));  if(options.hasOption(arg.substring(0,  2))  {  tokens.add(arg.substring(i  +  1));  }	  	non-compiled	[CE]  ')'  expected	91	None	add
828	[BUG]  [BUGGY]  if(options.hasOption(arg))  {  tokens.add(arg.substring(i  +  2));  tokens.add(arg.substring(i  +  2));  }  [CE]  'else'  without  'if'  [FE]    ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]  if(options.hasOption(arg))  {  tokens.add(arg.substring(i  +  2));  tokens.add(arg.substring(i  +  2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	if(options.hasOption(arg))  {  tokens.add(arg.substring(i  +  2));  tokens.add(arg.substring(i  +  2));  }	          tokens.add(arg.substring(i    +    2));    tokens.add(arg.substring(i    +    2));    	non-compiled	[CE]  'else'  without  'if'	59	None	replace
829	[BUG]  [BUGGY]          tokens.add(arg.substring(2));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(2));  }  if(options.hasOption(arg.substring(2)))  {  tokens.add(arg.substring(2));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(2));  }  [CE]  'else'  without  'if'  [FE]    ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(2));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(2));  }  if(options.hasOption(arg.substring(2)))  {  tokens.add(arg.substring(2));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                tokens.add(arg.substring(2));        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(2));    }    if(options.hasOption(arg.substring(2)))  {  tokens.add(arg.substring(2));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(2));  }	  	non-compiled	[CE]  'else'  without  'if'	50	None	add
830	[BUG]  [BUGGY]          tokens.add(arg.substring(1));    tokens.add(arg.substring(3));  tokens.add(arg.substring(1));  tokens.add(arg.substring3);  [CE]  cannot  find  symbol  substring3  [FE]    ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(1));    tokens.add(arg.substring(3));  tokens.add(arg.substring(1));  tokens.add(arg.substring3);  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                tokens.add(arg.substring(1));        tokens.add(arg.substring(3));    tokens.add(arg.substring(1));  tokens.add(arg.substring3);	  	non-compiled	[CE]  cannot  find  symbol  substring3	11	None	add
831	[BUG]  [BUGGY]  timeout  [FE]            ComparisonFailure      [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(i    +    1));    }    while(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  while(options.hasOption(arg.substring(2)))  {  tokens.add(arg.substring(i  +  1));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	                if(options.hasOption(arg.substring(0,        2)))        {        tokens.add(arg.substring(i        +        1));        }        while(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(i    +    1));    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  while(options.hasOption(arg.substring(2)))  {  tokens.add(arg.substring(i  +  1));  }	  timeout    	compilable	timeout	4	1	add
832	[BUG]  [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(i    +    1));    }    while(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  while(options.hasOption(arg.substring(2)))  {  tokens.add(arg.substring(i  +  1));  }  timeout  [FE]            ComparisonFailure      [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(i    +    1));    }    while(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  while(options.hasOption(arg.substring(2)))  {  tokens.add(arg.substring(i  +  1));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                if(options.hasOption(arg.substring(0,        2)))        {        tokens.add(arg.substring(i        +        1));        }        while(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(i    +    1));    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  while(options.hasOption(arg.substring(2)))  {  tokens.add(arg.substring(i  +  1));  }	  timeout    	compilable	timeout	4	1	add
833	[BUG]  [BUGGY]  if(options.hasOption(arg))  {  tokens.add(arg.substring(i  +  1,  2));  }  [CE]  'else'  without  'if'  [FE]            ComparisonFailure      [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]  if(options.hasOption(arg))  {  tokens.add(arg.substring(i  +  1,  2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	if(options.hasOption(arg))  {  tokens.add(arg.substring(i  +  1,  2));  }	          tokens.add(arg.substring(i    +    1));    tokens.add(arg.substring(i    +    1));    if(options.hasOption(arg))    {    tokens.add(arg.substring(i    +    1);    }    	non-compiled	[CE]  'else'  without  'if'	133	None	replace
834	[BUG]  [BUGGY]  [FE]  UnrecognizedOptionException  [FE]    UnrecognizedOptionException    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(i));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i));  }  else  {  tokens.add(opt);  }  tokens.add(arg.substring(i));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i));  }  else  {  tokens.add(opt);  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	                tokens.add(arg.substring(i));        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(i));    }    else    {    tokens.add(opt);    }    tokens.add(arg.substring(i));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i));  }  else  {  tokens.add(opt);  }	  	compilable	  [FE]  UnrecognizedOptionException  	118	4	add
835	[BUG]  [BUGGY]          tokens.add(arg.substring(i));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i));  }  else  {  tokens.add(opt);  }  tokens.add(arg.substring(i));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i));  }  else  {  tokens.add(opt);  }  [FE]  UnrecognizedOptionException  [FE]    UnrecognizedOptionException    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(i));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i));  }  else  {  tokens.add(opt);  }  tokens.add(arg.substring(i));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i));  }  else  {  tokens.add(opt);  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                tokens.add(arg.substring(i));        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(i));    }    else    {    tokens.add(opt);    }    tokens.add(arg.substring(i));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i));  }  else  {  tokens.add(opt);  }	  	compilable	  [FE]  UnrecognizedOptionException  	118	4	add
836	[BUG]  [BUGGY]          tokens.add(arg.substring(i));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i));  }  else  {  tokens.add(opt);  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i));  }  else  {  tokens.add(opt);  }  [CE]  'else'  without  'if'  [FE]      UnrecognizedOptionException    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(i));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i));  }  else  {  tokens.add(opt);  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i));  }  else  {  tokens.add(opt);  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                tokens.add(arg.substring(i));        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(i));    }    else    {    tokens.add(opt);    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i));  }  else  {  tokens.add(opt);  }	  	non-compiled	[CE]  'else'  without  'if'	118	None	add
837	[BUG]  [BUGGY]  [FE]  UnrecognizedOptionException  [FE]        UnrecognizedOptionException    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(i));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i));  }  else  {  tokens.add(opt);  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  else  {  tokens.add(opt);  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	                tokens.add(arg.substring(i));        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(i));    }    else    {    tokens.add(opt);    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  else  {  tokens.add(opt);  }	  	compilable	  [FE]  UnrecognizedOptionException  	118	4	add
838	[BUG]  [BUGGY]          tokens.add(arg.substring(i));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i));  }  else  {  tokens.add(opt);  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  else  {  tokens.add(opt);  }  [FE]  UnrecognizedOptionException  [FE]        UnrecognizedOptionException    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(i));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i));  }  else  {  tokens.add(opt);  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  else  {  tokens.add(opt);  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                tokens.add(arg.substring(i));        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(i));    }    else    {    tokens.add(opt);    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  else  {  tokens.add(opt);  }	  	compilable	  [FE]  UnrecognizedOptionException  	118	4	add
839	[BUG]  [BUGGY]  [FE]  UnrecognizedOptionException  [FE]          UnrecognizedOptionException    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(i));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i));  }  else  {  tokens.add(opt);  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i));  }  else  {  tokens.add(opt);  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	                tokens.add(arg.substring(i));        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(i));    }    else    {    tokens.add(opt);    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i));  }  else  {  tokens.add(opt);  }	  	compilable	  [FE]  UnrecognizedOptionException  	118	4	add
840	[BUG]  [BUGGY]          tokens.add(arg.substring(i));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i));  }  else  {  tokens.add(opt);  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i));  }  else  {  tokens.add(opt);  }  [FE]  UnrecognizedOptionException  [FE]          UnrecognizedOptionException    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(i));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i));  }  else  {  tokens.add(opt);  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i));  }  else  {  tokens.add(opt);  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                tokens.add(arg.substring(i));        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(i));    }    else    {    tokens.add(opt);    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i));  }  else  {  tokens.add(opt);  }	  	compilable	  [FE]  UnrecognizedOptionException  	118	4	add
841	[BUG]  [BUGGY]  [FE]  UnrecognizedOptionException  [FE]    UnrecognizedOptionException    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(i));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i));  }  tokens.add(arg.substring(i  +  1));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	                tokens.add(arg.substring(i));        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(i));    }    tokens.add(arg.substring(i  +  1));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }	  	compilable	  [FE]  UnrecognizedOptionException  	22	4	add
842	[BUG]  [BUGGY]          tokens.add(arg.substring(i));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i));  }  tokens.add(arg.substring(i  +  1));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  [FE]  UnrecognizedOptionException  [FE]    UnrecognizedOptionException    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(i));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i));  }  tokens.add(arg.substring(i  +  1));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                tokens.add(arg.substring(i));        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(i));    }    tokens.add(arg.substring(i  +  1));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }	  	compilable	  [FE]  UnrecognizedOptionException  	22	4	add
843	[BUG]  [BUGGY]  [FE]  UnrecognizedOptionException  [FE]      UnrecognizedOptionException    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(i));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	                tokens.add(arg.substring(i));        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(i));    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }	  	compilable	  [FE]  UnrecognizedOptionException  	22	4	add
844	[BUG]  [BUGGY]          tokens.add(arg.substring(i));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  [FE]  UnrecognizedOptionException  [FE]      UnrecognizedOptionException    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(i));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                tokens.add(arg.substring(i));        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(i));    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }	  	compilable	  [FE]  UnrecognizedOptionException  	22	4	add
845	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(1,    2));    }    else  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1,  2));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1,  2));  }  else  if(options.hasOption(arg.substring(1)))  {  tokens.add(arg.substring(1,  2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	                if(options.hasOption(arg.substring(0,        2)))        {        tokens.add(arg.substring(1,        2));        }        else    if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(1,    2));    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1,  2));  }  else  if(options.hasOption(arg.substring(1)))  {  tokens.add(arg.substring(1,  2));  }	  	compilable	  [FE]  ComparisonFailure  	108	4	add
846	[BUG]  [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(1,    2));    }    else  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1,  2));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1,  2));  }  else  if(options.hasOption(arg.substring(1)))  {  tokens.add(arg.substring(1,  2));  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(1,    2));    }    else  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1,  2));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1,  2));  }  else  if(options.hasOption(arg.substring(1)))  {  tokens.add(arg.substring(1,  2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                if(options.hasOption(arg.substring(0,        2)))        {        tokens.add(arg.substring(1,        2));        }        else    if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(1,    2));    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1,  2));  }  else  if(options.hasOption(arg.substring(1)))  {  tokens.add(arg.substring(1,  2));  }	  	compilable	  [FE]  ComparisonFailure  	108	4	add
847	[BUG]  [BUGGY]  timeout  [FE]              MissingArgumentException      [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    }    while(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  while(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	                if(options.hasOption(arg.substring(0,        2)))        {        tokens.add(arg.substring(0,        2));        }        while(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    }    while(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }	  timeout    	compilable	timeout	73	1	add
848	[BUG]  [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    }    while(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  while(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  timeout  [FE]              MissingArgumentException      [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    }    while(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  while(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                if(options.hasOption(arg.substring(0,        2)))        {        tokens.add(arg.substring(0,        2));        }        while(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    }    while(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }	  timeout    	compilable	timeout	73	1	add
849	[BUG]  [BUGGY]  else  if(options.hasOption(arg.substring(1)))  {  tokens.add(arg.substring(0,  2));  }  [CE]  'else'  without  'if'  [FE]    ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]  else  if(options.hasOption(arg.substring(1)))  {  tokens.add(arg.substring(0,  2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	else  if(options.hasOption(arg.substring(1)))  {  tokens.add(arg.substring(0,  2));  }	          tokens.add(arg.substring(2));    if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    }    	non-compiled	[CE]  'else'  without  'if'	53	None	replace
850	[BUG]  [BUGGY]  [FE]  MissingArgumentException  [FE]    MissingArgumentException    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(0,    2));    tokens.add(arg.substring(0,  2));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(0,  2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	                tokens.add(arg.substring(0,        2));        tokens.add(arg.substring(0,    2));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(0,  2));  }	  	compilable	  [FE]  MissingArgumentException  	30	4	add
851	[BUG]  [BUGGY]          tokens.add(arg.substring(0,    2));    tokens.add(arg.substring(0,  2));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(0,  2));  }  [FE]  MissingArgumentException  [FE]    MissingArgumentException    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(0,    2));    tokens.add(arg.substring(0,  2));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(0,  2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                tokens.add(arg.substring(0,        2));        tokens.add(arg.substring(0,    2));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(0,  2));  }	  	compilable	  [FE]  MissingArgumentException  	30	4	add
852	[BUG]  [BUGGY]  [FE]  MissingArgumentException  [FE]      MissingArgumentException    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(0,    2));    tokens.add(arg.substring(0,  2));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(opt);  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	                tokens.add(arg.substring(0,        2));        tokens.add(arg.substring(0,    2));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(opt);  }	  	compilable	  [FE]  MissingArgumentException  	30	4	add
853	[BUG]  [BUGGY]          tokens.add(arg.substring(0,    2));    tokens.add(arg.substring(0,  2));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(opt);  }  [FE]  MissingArgumentException  [FE]      MissingArgumentException    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(0,    2));    tokens.add(arg.substring(0,  2));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(opt);  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                tokens.add(arg.substring(0,        2));        tokens.add(arg.substring(0,    2));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(opt);  }	  	compilable	  [FE]  MissingArgumentException  	30	4	add
854	[BUG]  [BUGGY]  }  else  if(options.hasOption(arg.substring(0,  2)))  <  tokens.add(arg.substring(0,  2));  [CE]  >  expected  [FE]        MissingArgumentException      [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]  }  else  if(options.hasOption(arg.substring(0,  2)))  <  tokens.add(arg.substring(0,  2));  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	}  else  if(options.hasOption(arg.substring(0,  2)))  <  tokens.add(arg.substring(0,  2));	          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    }    if(options.hasOption(arg.substring(0,    2)))    <    tokens.add(arg.substring(0,    2));    }    	non-compiled	[CE]  >  expected	155	None	replace
855	[BUG]  [BUGGY]  [FE]  MissingArgumentException  [FE]          MissingArgumentException      [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]  }  else  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  1));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	}  else  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  1));  }	          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    }    if(options.hasOption(arg.substring(0,    2)))    <    tokens.add(arg.substring(0,    2));    }    	compilable	  [FE]  MissingArgumentException  	155	4	replace
856	[BUG]  [BUGGY]  }  else  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  1));  }  [FE]  MissingArgumentException  [FE]          MissingArgumentException      [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]  }  else  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  1));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	}  else  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  1));  }	          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    }    if(options.hasOption(arg.substring(0,    2)))    <    tokens.add(arg.substring(0,    2));    }    	compilable	  [FE]  MissingArgumentException  	155	4	replace
857	[BUG]  [BUGGY]  while(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1,  2));  }  [CE]  'else'  without  'if'  [FE]            ComparisonFailure      [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]  while(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1,  2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	while(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1,  2));  }	  while(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(i    +    1));    }    	non-compiled	[CE]  'else'  without  'if'	153	None	replace
858	[BUG]  [BUGGY]  while(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1,  1));  }  [CE]  'else'  without  'if'  [FE]              ComparisonFailure      [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]  while(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1,  1));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	while(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1,  1));  }	  while(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(i    +    1));    }    	non-compiled	[CE]  'else'  without  'if'	153	None	replace
859	[BUG]  [BUGGY]  tokens.add(arg.substring(i  +  1));  TokenBuffer  tokens  =  new  TokenBuffer(arg.substring(i  +  1),  arg.toString());  [CE]  'else'  without  'if'  [FE]              ComparisonFailure      [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]  tokens.add(arg.substring(i  +  1));  TokenBuffer  tokens  =  new  TokenBuffer(arg.substring(i  +  1),  arg.toString());  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	tokens.add(arg.substring(i  +  1));  TokenBuffer  tokens  =  new  TokenBuffer(arg.substring(i  +  1),  arg.toString());	          tokens.add(arg.substring(i));    TokenBuffer    tokens    =    new    TokenBuffer(arg.substring(i).toString());    	non-compiled	[CE]  'else'  without  'if'	137	None	replace
860	[BUG]  [BUGGY]  tokens.add(arg.substring(0,  2));  TokenBuffer  tokens  =  new  TokenBuffer(arg.substring(i).toString());  [CE]  'else'  without  'if'  [FE]                ComparisonFailure      [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]  tokens.add(arg.substring(0,  2));  TokenBuffer  tokens  =  new  TokenBuffer(arg.substring(i).toString());  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	tokens.add(arg.substring(0,  2));  TokenBuffer  tokens  =  new  TokenBuffer(arg.substring(i).toString());	          tokens.add(arg.substring(i));    TokenBuffer    tokens    =    new    TokenBuffer(arg.substring(i).toString());    	non-compiled	[CE]  'else'  without  'if'	137	None	replace
861	[BUG]  [BUGGY]  tokens  =  new  TokenBuffer(arg.substring(i  +  1),  arg.substring(i  +  1));  [CE]  'else'  without  'if'  [FE]        ComparisonFailure      [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]  tokens  =  new  TokenBuffer(arg.substring(i  +  1),  arg.substring(i  +  1));  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	tokens  =  new  TokenBuffer(arg.substring(i  +  1),  arg.substring(i  +  1));	          tokens.add(arg.substring(i    +    1));    TokenBuffer    tokens    =    new    TokenBuffer(arg.substring(i    +    1));    tokens.add(arg.substring(i    +    1));    	non-compiled	[CE]  'else'  without  'if'	160	None	replace
862	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(i    +    1));    if(options.hasOption(arg.substring(i  +  1)))  {  tokens.add(arg.substring(i  +  1));  }  else  {  tokens.add(arg.substring(i  +  1));  }  tokens.add(arg.substring(i  +  1));  if(options.hasOption(arg.substring(i  +  1)))  {  tokens.add(arg.substring(i  +  1));  }  else  {  tokens.add(arg.substring(2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	                tokens.add(arg.substring(i        +        1));        if(options.hasOption(arg.substring(i    +    1)))    {    tokens.add(arg.substring(i    +    1));    }    else    {    tokens.add(arg.substring(i    +    1));    }    tokens.add(arg.substring(i  +  1));  if(options.hasOption(arg.substring(i  +  1)))  {  tokens.add(arg.substring(i  +  1));  }  else  {  tokens.add(arg.substring(2));  }	  	compilable	  [FE]  ComparisonFailure  	89	4	add
863	[BUG]  [BUGGY]          tokens.add(arg.substring(i    +    1));    if(options.hasOption(arg.substring(i  +  1)))  {  tokens.add(arg.substring(i  +  1));  }  else  {  tokens.add(arg.substring(i  +  1));  }  tokens.add(arg.substring(i  +  1));  if(options.hasOption(arg.substring(i  +  1)))  {  tokens.add(arg.substring(i  +  1));  }  else  {  tokens.add(arg.substring(2));  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(i    +    1));    if(options.hasOption(arg.substring(i  +  1)))  {  tokens.add(arg.substring(i  +  1));  }  else  {  tokens.add(arg.substring(i  +  1));  }  tokens.add(arg.substring(i  +  1));  if(options.hasOption(arg.substring(i  +  1)))  {  tokens.add(arg.substring(i  +  1));  }  else  {  tokens.add(arg.substring(2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                tokens.add(arg.substring(i        +        1));        if(options.hasOption(arg.substring(i    +    1)))    {    tokens.add(arg.substring(i    +    1));    }    else    {    tokens.add(arg.substring(i    +    1));    }    tokens.add(arg.substring(i  +  1));  if(options.hasOption(arg.substring(i  +  1)))  {  tokens.add(arg.substring(i  +  1));  }  else  {  tokens.add(arg.substring(2));  }	  	compilable	  [FE]  ComparisonFailure  	89	4	add
864	[BUG]  [BUGGY]  tokens.add(arg.substring(0,  2));  //  property='false'  without  'if'  [CE]  'else'  without  'if'  [FE]            ComparisonFailure      [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]  tokens.add(arg.substring(0,  2));  //  property='false'  without  'if'  [BUGGY]      }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	tokens.add(arg.substring(0,  2));  //  property='false'  without  'if'	  tokens.add(arg.substring(0,    2));    //    property='else'    without    'if'    	non-compiled	[CE]  'else'  without  'if'	120	None	replace
865	[BUG]  [BUGGY]          tokens.add(arg.substring(2));    if(options.hasOption(arg.substring(1)))  {  tokens.add(arg.substring(2));  }  if(options.hasOption(arg.substring(2)))  {  tokens.add(arg.substring(2));  if(options.hasOption(arg.substring(1)))  {  tokens.add(arg.substring(2));  }  [CE]  'else'  without  'if'  [FE]    ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(2));    if(options.hasOption(arg.substring(1)))  {  tokens.add(arg.substring(2));  }  if(options.hasOption(arg.substring(2)))  {  tokens.add(arg.substring(2));  if(options.hasOption(arg.substring(1)))  {  tokens.add(arg.substring(2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                tokens.add(arg.substring(2));        if(options.hasOption(arg.substring(1)))    {    tokens.add(arg.substring(2));    }    if(options.hasOption(arg.substring(2)))  {  tokens.add(arg.substring(2));  if(options.hasOption(arg.substring(1)))  {  tokens.add(arg.substring(2));  }	  	non-compiled	[CE]  'else'  without  'if'	56	None	add
866	[BUG]  [BUGGY]          tokens.add(arg.substring(2));    if(options.hasOption(arg.substring(1)))  {  tokens.add(arg.substring(2));  }  tokens.add(arg.substring(2));  if(options.hasOption(arg.substring(1)))  {  tokens.add(arg.substring(2));  [CE]  'else'  without  'if'  [FE]      ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(2));    if(options.hasOption(arg.substring(1)))  {  tokens.add(arg.substring(2));  }  tokens.add(arg.substring(2));  if(options.hasOption(arg.substring(1)))  {  tokens.add(arg.substring(2));  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                tokens.add(arg.substring(2));        if(options.hasOption(arg.substring(1)))    {    tokens.add(arg.substring(2));    }    tokens.add(arg.substring(2));  if(options.hasOption(arg.substring(1)))  {  tokens.add(arg.substring(2));	  	non-compiled	[CE]  'else'  without  'if'	56	None	add
867	[BUG]  [BUGGY]          tokens.add(arg.substring(2));    if(options.hasOption(arg.substring(1)))  {  tokens.add(arg.substring(2));  }  if(options.hasOption(arg.substring(2)))  {  tokens.add(arg.substring(2));  if(options.hasOption(arg.substring(2)))  {  tokens.add(arg.substring(2));  }  [CE]  'else'  without  'if'  [FE]        ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(2));    if(options.hasOption(arg.substring(1)))  {  tokens.add(arg.substring(2));  }  if(options.hasOption(arg.substring(2)))  {  tokens.add(arg.substring(2));  if(options.hasOption(arg.substring(2)))  {  tokens.add(arg.substring(2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                tokens.add(arg.substring(2));        if(options.hasOption(arg.substring(1)))    {    tokens.add(arg.substring(2));    }    if(options.hasOption(arg.substring(2)))  {  tokens.add(arg.substring(2));  if(options.hasOption(arg.substring(2)))  {  tokens.add(arg.substring(2));  }	  	non-compiled	[CE]  'else'  without  'if'	56	None	add
868	[BUG]  [BUGGY]  [FE]  MissingArgumentException  [FE]    MissingArgumentException    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(0,    2));    tokens.add(arg.substring(2,  2));  tokens.add(arg.substring(2,  2));  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	                tokens.add(arg.substring(0,        2));        tokens.add(arg.substring(2,    2));    tokens.add(arg.substring(2,  2));	  	compilable	  [FE]  MissingArgumentException  	36	4	add
869	[BUG]  [BUGGY]          tokens.add(arg.substring(0,    2));    tokens.add(arg.substring(2,  2));  tokens.add(arg.substring(2,  2));  [FE]  MissingArgumentException  [FE]    MissingArgumentException    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(0,    2));    tokens.add(arg.substring(2,  2));  tokens.add(arg.substring(2,  2));  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                tokens.add(arg.substring(0,        2));        tokens.add(arg.substring(2,    2));    tokens.add(arg.substring(2,  2));	  	compilable	  [FE]  MissingArgumentException  	36	4	add
870	[BUG]  [BUGGY]  tokens.add(arg.substring(i  +  2));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  2));  }  else  {  options.put(arg.substring(i  +  1));  }  [CE]  'else'  without  'if'  [FE]            ComparisonFailure      [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]  tokens.add(arg.substring(i  +  2));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  2));  }  else  {  options.put(arg.substring(i  +  1));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	tokens.add(arg.substring(i  +  2));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  2));  }  else  {  options.put(arg.substring(i  +  1));  }	          tokens.add(arg.substring(i    +    2));    if(options.hasOption(arg.substring(i    +    2)))    {    tokens.add(arg.substring(i    +    2));    }    else    {    options.put(arg.substring(i    +    1));    }    	non-compiled	[CE]  'else'  without  'if'	62	None	replace
871	[BUG]  [BUGGY]  while(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1,  2));  [CE]  'else'  without  'if'  [FE]        ComparisonFailure      [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]  while(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1,  2));  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	while(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1,  2));	          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(i    +    1));    }    while(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(i    +    1));    	non-compiled	[CE]  'else'  without  'if'	93	None	replace
872	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(1,    2));    }    if(options.hasOption(arg.substring(1,  2)))  {  tokens.add(arg.substring(1,  2));  }  if(options.hasOption(arg.substring(2,  2)))  {  tokens.add(arg.substring(1,  2));  }  if(options.hasOption(arg.substring(1,  2)))  {  tokens.add(arg.substring(1,  2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	                if(options.hasOption(arg.substring(0,        2)))        {        tokens.add(arg.substring(1,        2));        }        if(options.hasOption(arg.substring(1,    2)))    {    tokens.add(arg.substring(1,    2));    }    if(options.hasOption(arg.substring(2,  2)))  {  tokens.add(arg.substring(1,  2));  }  if(options.hasOption(arg.substring(1,  2)))  {  tokens.add(arg.substring(1,  2));  }	  	compilable	  [FE]  ComparisonFailure  	43	4	add
873	[BUG]  [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(1,    2));    }    if(options.hasOption(arg.substring(1,  2)))  {  tokens.add(arg.substring(1,  2));  }  if(options.hasOption(arg.substring(2,  2)))  {  tokens.add(arg.substring(1,  2));  }  if(options.hasOption(arg.substring(1,  2)))  {  tokens.add(arg.substring(1,  2));  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(1,    2));    }    if(options.hasOption(arg.substring(1,  2)))  {  tokens.add(arg.substring(1,  2));  }  if(options.hasOption(arg.substring(2,  2)))  {  tokens.add(arg.substring(1,  2));  }  if(options.hasOption(arg.substring(1,  2)))  {  tokens.add(arg.substring(1,  2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                if(options.hasOption(arg.substring(0,        2)))        {        tokens.add(arg.substring(1,        2));        }        if(options.hasOption(arg.substring(1,    2)))    {    tokens.add(arg.substring(1,    2));    }    if(options.hasOption(arg.substring(2,  2)))  {  tokens.add(arg.substring(1,  2));  }  if(options.hasOption(arg.substring(1,  2)))  {  tokens.add(arg.substring(1,  2));  }	  	compilable	  [FE]  ComparisonFailure  	43	4	add
874	[BUG]  [BUGGY]  [FE]  UnrecognizedOptionException  [FE]    UnrecognizedOptionException    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(i));    if(options.hasOption(arg.substring(i)))  {  tokens.add(arg.substring(i));  }  else  {  tokens.add(arg.substring(i));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	                tokens.add(arg.substring(i));        if(options.hasOption(arg.substring(i)))    {    tokens.add(arg.substring(i));    }    else    {    tokens.add(arg.substring(i));    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }	  	compilable	  [FE]  UnrecognizedOptionException  	26	4	add
875	[BUG]  [BUGGY]          tokens.add(arg.substring(i));    if(options.hasOption(arg.substring(i)))  {  tokens.add(arg.substring(i));  }  else  {  tokens.add(arg.substring(i));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  [FE]  UnrecognizedOptionException  [FE]    UnrecognizedOptionException    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(i));    if(options.hasOption(arg.substring(i)))  {  tokens.add(arg.substring(i));  }  else  {  tokens.add(arg.substring(i));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                tokens.add(arg.substring(i));        if(options.hasOption(arg.substring(i)))    {    tokens.add(arg.substring(i));    }    else    {    tokens.add(arg.substring(i));    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }	  	compilable	  [FE]  UnrecognizedOptionException  	26	4	add
876	[BUG]  [BUGGY]  [FE]  UnrecognizedOptionException  [FE]      UnrecognizedOptionException    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(i));    if(options.hasOption(arg.substring(i)))  {  tokens.add(arg.substring(i));  }  else  {  tokens.add(arg.substring(i));  }  tokens.add(arg.substring(i));  if(options.hasOption(arg.substring(i)))  {  tokens.add(arg.substring(i));  }  else  {  tokens.add(arg.substring(2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	                tokens.add(arg.substring(i));        if(options.hasOption(arg.substring(i)))    {    tokens.add(arg.substring(i));    }    else    {    tokens.add(arg.substring(i));    }    tokens.add(arg.substring(i));  if(options.hasOption(arg.substring(i)))  {  tokens.add(arg.substring(i));  }  else  {  tokens.add(arg.substring(2));  }	  	compilable	  [FE]  UnrecognizedOptionException  	26	4	add
877	[BUG]  [BUGGY]          tokens.add(arg.substring(i));    if(options.hasOption(arg.substring(i)))  {  tokens.add(arg.substring(i));  }  else  {  tokens.add(arg.substring(i));  }  tokens.add(arg.substring(i));  if(options.hasOption(arg.substring(i)))  {  tokens.add(arg.substring(i));  }  else  {  tokens.add(arg.substring(2));  }  [FE]  UnrecognizedOptionException  [FE]      UnrecognizedOptionException    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(i));    if(options.hasOption(arg.substring(i)))  {  tokens.add(arg.substring(i));  }  else  {  tokens.add(arg.substring(i));  }  tokens.add(arg.substring(i));  if(options.hasOption(arg.substring(i)))  {  tokens.add(arg.substring(i));  }  else  {  tokens.add(arg.substring(2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                tokens.add(arg.substring(i));        if(options.hasOption(arg.substring(i)))    {    tokens.add(arg.substring(i));    }    else    {    tokens.add(arg.substring(i));    }    tokens.add(arg.substring(i));  if(options.hasOption(arg.substring(i)))  {  tokens.add(arg.substring(i));  }  else  {  tokens.add(arg.substring(2));  }	  	compilable	  [FE]  UnrecognizedOptionException  	26	4	add
878	[BUG]  [BUGGY]  [FE]  MissingArgumentException  [FE]    MissingArgumentException    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    }    else  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  else  if(options.hasOption(arg.substring(2)))  {  tokens.add(arg.substring(0,  2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	                if(options.hasOption(arg.substring(0,        2)))        {        tokens.add(arg.substring(0,        2));        }        else    if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  else  if(options.hasOption(arg.substring(2)))  {  tokens.add(arg.substring(0,  2));  }	  	compilable	  [FE]  MissingArgumentException  	102	4	add
879	[BUG]  [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    }    else  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  else  if(options.hasOption(arg.substring(2)))  {  tokens.add(arg.substring(0,  2));  }  [FE]  MissingArgumentException  [FE]    MissingArgumentException    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    }    else  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  else  if(options.hasOption(arg.substring(2)))  {  tokens.add(arg.substring(0,  2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                if(options.hasOption(arg.substring(0,        2)))        {        tokens.add(arg.substring(0,        2));        }        else    if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  else  if(options.hasOption(arg.substring(2)))  {  tokens.add(arg.substring(0,  2));  }	  	compilable	  [FE]  MissingArgumentException  	102	4	add
880	[BUG]  [BUGGY]  if(options.hasOption(arg.substring(0,  1)))  {  tokens.add(arg.substring(0,  2));  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  'else'  without  'if'  [FE]    MissingArgumentException    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]  if(options.hasOption(arg.substring(0,  1)))  {  tokens.add(arg.substring(0,  2));  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	if(options.hasOption(arg.substring(0,  1)))  {  tokens.add(arg.substring(0,  2));  }  else  {  throw  new  IllegalArgumentException( " ");  }	          tokens.add(arg.substring(0,    2));    if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  'else'  without  'if'	146	None	replace
881	[BUG]  [BUGGY]  [FE]  MissingArgumentException  [FE]    MissingArgumentException    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    }    if(options.hasOption(arg.substring(2)))  {  tokens.add(arg.substring(0,  2));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  if(options.hasOption(arg.substring(3)))  {  tokens.add(arg.substring(0,  2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	                if(options.hasOption(arg.substring(0,        2)))        {        tokens.add(arg.substring(0,        2));        }        if(options.hasOption(arg.substring(2)))    {    tokens.add(arg.substring(0,    2));    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  if(options.hasOption(arg.substring(3)))  {  tokens.add(arg.substring(0,  2));  }	  	compilable	  [FE]  MissingArgumentException  	104	4	add
882	[BUG]  [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    }    if(options.hasOption(arg.substring(2)))  {  tokens.add(arg.substring(0,  2));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  if(options.hasOption(arg.substring(3)))  {  tokens.add(arg.substring(0,  2));  }  [FE]  MissingArgumentException  [FE]    MissingArgumentException    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    }    if(options.hasOption(arg.substring(2)))  {  tokens.add(arg.substring(0,  2));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  if(options.hasOption(arg.substring(3)))  {  tokens.add(arg.substring(0,  2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                if(options.hasOption(arg.substring(0,        2)))        {        tokens.add(arg.substring(0,        2));        }        if(options.hasOption(arg.substring(2)))    {    tokens.add(arg.substring(0,    2));    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  if(options.hasOption(arg.substring(3)))  {  tokens.add(arg.substring(0,  2));  }	  	compilable	  [FE]  MissingArgumentException  	104	4	add
883	[BUG]  [BUGGY]  [FE]  MissingArgumentException  [FE]      MissingArgumentException    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    }    if(options.hasOption(arg.substring(2)))  {  tokens.add(arg.substring(0,  2));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  if(options.hasOption(arg.substring(1)))  {  tokens.add(arg.substring(0,  2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	                if(options.hasOption(arg.substring(0,        2)))        {        tokens.add(arg.substring(0,        2));        }        if(options.hasOption(arg.substring(2)))    {    tokens.add(arg.substring(0,    2));    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  if(options.hasOption(arg.substring(1)))  {  tokens.add(arg.substring(0,  2));  }	  	compilable	  [FE]  MissingArgumentException  	104	4	add
884	[BUG]  [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    }    if(options.hasOption(arg.substring(2)))  {  tokens.add(arg.substring(0,  2));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  if(options.hasOption(arg.substring(1)))  {  tokens.add(arg.substring(0,  2));  }  [FE]  MissingArgumentException  [FE]      MissingArgumentException    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    }    if(options.hasOption(arg.substring(2)))  {  tokens.add(arg.substring(0,  2));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  if(options.hasOption(arg.substring(1)))  {  tokens.add(arg.substring(0,  2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                if(options.hasOption(arg.substring(0,        2)))        {        tokens.add(arg.substring(0,        2));        }        if(options.hasOption(arg.substring(2)))    {    tokens.add(arg.substring(0,    2));    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  if(options.hasOption(arg.substring(1)))  {  tokens.add(arg.substring(0,  2));  }	  	compilable	  [FE]  MissingArgumentException  	104	4	add
885	[BUG]  [BUGGY]  [FE]  MissingArgumentException  [FE]        MissingArgumentException    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    }    if(options.hasOption(arg.substring(2)))  {  tokens.add(arg.substring(0,  2));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  if(options.hasOption(arg.substring(4)))  {  tokens.add(arg.substring(0,  2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	                if(options.hasOption(arg.substring(0,        2)))        {        tokens.add(arg.substring(0,        2));        }        if(options.hasOption(arg.substring(2)))    {    tokens.add(arg.substring(0,    2));    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  if(options.hasOption(arg.substring(4)))  {  tokens.add(arg.substring(0,  2));  }	  	compilable	  [FE]  MissingArgumentException  	104	4	add
886	[BUG]  [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    }    if(options.hasOption(arg.substring(2)))  {  tokens.add(arg.substring(0,  2));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  if(options.hasOption(arg.substring(4)))  {  tokens.add(arg.substring(0,  2));  }  [FE]  MissingArgumentException  [FE]        MissingArgumentException    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    }    if(options.hasOption(arg.substring(2)))  {  tokens.add(arg.substring(0,  2));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  if(options.hasOption(arg.substring(4)))  {  tokens.add(arg.substring(0,  2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                if(options.hasOption(arg.substring(0,        2)))        {        tokens.add(arg.substring(0,        2));        }        if(options.hasOption(arg.substring(2)))    {    tokens.add(arg.substring(0,    2));    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  if(options.hasOption(arg.substring(4)))  {  tokens.add(arg.substring(0,  2));  }	  	compilable	  [FE]  MissingArgumentException  	104	4	add
887	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(i    +    1));    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  else  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	                if(options.hasOption(arg.substring(0,        2)))        {        tokens.add(arg.substring(i        +        1));        }        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(i    +    1));    }    else  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }	  	compilable	  [FE]  ComparisonFailure  	1	4	add
888	[BUG]  [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(i    +    1));    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  else  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(i    +    1));    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  else  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                if(options.hasOption(arg.substring(0,        2)))        {        tokens.add(arg.substring(i        +        1));        }        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(i    +    1));    }    else  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }	  	compilable	  [FE]  ComparisonFailure  	1	4	add
889	[BUG]  [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(i    +    1));    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1);  }  [CE]  ')'  expected  [FE]      ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(i    +    1));    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1);  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                if(options.hasOption(arg.substring(0,        2)))        {        tokens.add(arg.substring(i        +        1));        }        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(i    +    1));    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1);  }	  	non-compiled	[CE]  ')'  expected	1	None	add
890	[BUG]  [BUGGY]          tokens.add(arg.substring(i    +    2));    tokens.add(arg.substring(i  +  2));  tokens.add(arg.substring(i  +  2));  tos.add(arg.substring(i  +  2));  [CE]  cannot  find  symbol  tos  [FE]    ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(i    +    2));    tokens.add(arg.substring(i  +  2));  tokens.add(arg.substring(i  +  2));  tos.add(arg.substring(i  +  2));  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                tokens.add(arg.substring(i        +        2));        tokens.add(arg.substring(i    +    2));    tokens.add(arg.substring(i  +  2));  tos.add(arg.substring(i  +  2));	  	non-compiled	[CE]  cannot  find  symbol  tos	58	None	add
891	[BUG]  [BUGGY]  while(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1);  [CE]  ')'  expected  [FE]          ComparisonFailure      [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]  while(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1);  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	while(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1);	          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(i    +    1));    }    if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(i    +    1);    }    	non-compiled	[CE]  ')'  expected	94	None	replace
892	[BUG]  [BUGGY]  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  3));  }  [CE]  'else'  without  'if'  [FE]    MissingArgumentException    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  3));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  3));  }	          tokens.add(arg.substring(0,    2));    tokens.add(arg.substring(0,    3));    	non-compiled	[CE]  'else'  without  'if'	39	None	replace
893	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(2));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(arg.substring(1));  }  tokens.add(arg.substring(2));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(arg.substring(1));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	                tokens.add(arg.substring(2));        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    }    else    {    tokens.add(arg.substring(1));    }    tokens.add(arg.substring(2));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(arg.substring(1));  }	  	compilable	  [FE]  ComparisonFailure  	115	3	add
894	[BUG]  [BUGGY]          tokens.add(arg.substring(2));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(arg.substring(1));  }  tokens.add(arg.substring(2));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(arg.substring(1));  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(2));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(arg.substring(1));  }  tokens.add(arg.substring(2));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(arg.substring(1));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                tokens.add(arg.substring(2));        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    }    else    {    tokens.add(arg.substring(1));    }    tokens.add(arg.substring(2));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(arg.substring(1));  }	  	compilable	  [FE]  ComparisonFailure  	115	3	add
895	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(2));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(arg.substring(1));  }  tokens.add(arg.substring(2));  if(options.hasOption(arg.substring(2)))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(arg.substring(1));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	                tokens.add(arg.substring(2));        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    }    else    {    tokens.add(arg.substring(1));    }    tokens.add(arg.substring(2));  if(options.hasOption(arg.substring(2)))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(arg.substring(1));  }	  	compilable	  [FE]  ComparisonFailure  	115	3	add
896	[BUG]  [BUGGY]          tokens.add(arg.substring(2));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(arg.substring(1));  }  tokens.add(arg.substring(2));  if(options.hasOption(arg.substring(2)))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(arg.substring(1));  }  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(2));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(arg.substring(1));  }  tokens.add(arg.substring(2));  if(options.hasOption(arg.substring(2)))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(arg.substring(1));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                tokens.add(arg.substring(2));        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    }    else    {    tokens.add(arg.substring(1));    }    tokens.add(arg.substring(2));  if(options.hasOption(arg.substring(2)))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(arg.substring(1));  }	  	compilable	  [FE]  ComparisonFailure  	115	3	add
897	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(2));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(arg.substring(1));  }  tokens.add(arg.substring(2));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(arg.substring(2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	                tokens.add(arg.substring(2));        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    }    else    {    tokens.add(arg.substring(1));    }    tokens.add(arg.substring(2));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(arg.substring(2));  }	  	compilable	  [FE]  ComparisonFailure  	115	3	add
898	[BUG]  [BUGGY]          tokens.add(arg.substring(2));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(arg.substring(1));  }  tokens.add(arg.substring(2));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(arg.substring(2));  }  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(2));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(arg.substring(1));  }  tokens.add(arg.substring(2));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(arg.substring(2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                tokens.add(arg.substring(2));        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    }    else    {    tokens.add(arg.substring(1));    }    tokens.add(arg.substring(2));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(arg.substring(2));  }	  	compilable	  [FE]  ComparisonFailure  	115	3	add
899	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(2));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(arg.substring(1));  }  tokens.add(arg.substring(2));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(arg.substring(3));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	                tokens.add(arg.substring(2));        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    }    else    {    tokens.add(arg.substring(1));    }    tokens.add(arg.substring(2));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(arg.substring(3));  }	  	compilable	  [FE]  ComparisonFailure  	115	3	add
900	[BUG]  [BUGGY]          tokens.add(arg.substring(2));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(arg.substring(1));  }  tokens.add(arg.substring(2));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(arg.substring(3));  }  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(2));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(arg.substring(1));  }  tokens.add(arg.substring(2));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(arg.substring(3));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                tokens.add(arg.substring(2));        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    }    else    {    tokens.add(arg.substring(1));    }    tokens.add(arg.substring(2));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(arg.substring(3));  }	  	compilable	  [FE]  ComparisonFailure  	115	3	add
901	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(i    +    1));    }    else  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	                if(options.hasOption(arg.substring(0,        2)))        {        tokens.add(arg.substring(i        +        1));        }        else    if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(i    +    1));    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }	  	compilable	  [FE]  ComparisonFailure  	141	4	add
902	[BUG]  [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(i    +    1));    }    else  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(i    +    1));    }    else  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                if(options.hasOption(arg.substring(0,        2)))        {        tokens.add(arg.substring(i        +        1));        }        else    if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(i    +    1));    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }	  	compilable	  [FE]  ComparisonFailure  	141	4	add
903	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(i    +    1));    }    else  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  else  if(options.hasOption(arg.substring(i  +  1)))  {  tokens.add(arg.substring(i  +  1));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	                if(options.hasOption(arg.substring(0,        2)))        {        tokens.add(arg.substring(i        +        1));        }        else    if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(i    +    1));    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  else  if(options.hasOption(arg.substring(i  +  1)))  {  tokens.add(arg.substring(i  +  1));  }	  	compilable	  [FE]  ComparisonFailure  	141	4	add
904	[BUG]  [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(i    +    1));    }    else  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  else  if(options.hasOption(arg.substring(i  +  1)))  {  tokens.add(arg.substring(i  +  1));  }  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(i    +    1));    }    else  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  else  if(options.hasOption(arg.substring(i  +  1)))  {  tokens.add(arg.substring(i  +  1));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                if(options.hasOption(arg.substring(0,        2)))        {        tokens.add(arg.substring(i        +        1));        }        else    if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(i    +    1));    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  else  if(options.hasOption(arg.substring(i  +  1)))  {  tokens.add(arg.substring(i  +  1));  }	  	compilable	  [FE]  ComparisonFailure  	141	4	add
905	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(i    +    1));    }    else  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  else  if(options.hasOption(arg.substring(1)))  {  tokens.add(arg.substring(i  +  1));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	                if(options.hasOption(arg.substring(0,        2)))        {        tokens.add(arg.substring(i        +        1));        }        else    if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(i    +    1));    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  else  if(options.hasOption(arg.substring(1)))  {  tokens.add(arg.substring(i  +  1));  }	  	compilable	  [FE]  ComparisonFailure  	141	4	add
906	[BUG]  [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(i    +    1));    }    else  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  else  if(options.hasOption(arg.substring(1)))  {  tokens.add(arg.substring(i  +  1));  }  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(i    +    1));    }    else  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  else  if(options.hasOption(arg.substring(1)))  {  tokens.add(arg.substring(i  +  1));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                if(options.hasOption(arg.substring(0,        2)))        {        tokens.add(arg.substring(i        +        1));        }        else    if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(i    +    1));    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  else  if(options.hasOption(arg.substring(1)))  {  tokens.add(arg.substring(i  +  1));  }	  	compilable	  [FE]  ComparisonFailure  	141	4	add
907	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(2));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(arg.substring(2));  }  tokens.add(arg.substring(2));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(arg.substring(2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	                tokens.add(arg.substring(2));        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    }    else    {    tokens.add(arg.substring(2));    }    tokens.add(arg.substring(2));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(arg.substring(2));  }	  	compilable	  [FE]  ComparisonFailure  	113	3	add
908	[BUG]  [BUGGY]          tokens.add(arg.substring(2));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(arg.substring(2));  }  tokens.add(arg.substring(2));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(arg.substring(2));  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(2));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(arg.substring(2));  }  tokens.add(arg.substring(2));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(arg.substring(2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                tokens.add(arg.substring(2));        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    }    else    {    tokens.add(arg.substring(2));    }    tokens.add(arg.substring(2));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(arg.substring(2));  }	  	compilable	  [FE]  ComparisonFailure  	113	3	add
909	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(2));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(arg.substring(2));  }  tokens.add(arg.substring(2));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(arg.substring(1));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	                tokens.add(arg.substring(2));        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    }    else    {    tokens.add(arg.substring(2));    }    tokens.add(arg.substring(2));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(arg.substring(1));  }	  	compilable	  [FE]  ComparisonFailure  	113	3	add
910	[BUG]  [BUGGY]          tokens.add(arg.substring(2));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(arg.substring(2));  }  tokens.add(arg.substring(2));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(arg.substring(1));  }  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(2));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(arg.substring(2));  }  tokens.add(arg.substring(2));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(arg.substring(1));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                tokens.add(arg.substring(2));        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    }    else    {    tokens.add(arg.substring(2));    }    tokens.add(arg.substring(2));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(arg.substring(1));  }	  	compilable	  [FE]  ComparisonFailure  	113	3	add
911	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(2));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(arg.substring(2));  }  tokens.add(arg.substring(2));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(arg.substring(3));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	                tokens.add(arg.substring(2));        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    }    else    {    tokens.add(arg.substring(2));    }    tokens.add(arg.substring(2));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(arg.substring(3));  }	  	compilable	  [FE]  ComparisonFailure  	113	3	add
912	[BUG]  [BUGGY]          tokens.add(arg.substring(2));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(arg.substring(2));  }  tokens.add(arg.substring(2));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(arg.substring(3));  }  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(2));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(arg.substring(2));  }  tokens.add(arg.substring(2));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(arg.substring(3));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                tokens.add(arg.substring(2));        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    }    else    {    tokens.add(arg.substring(2));    }    tokens.add(arg.substring(2));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(arg.substring(3));  }	  	compilable	  [FE]  ComparisonFailure  	113	3	add
913	[BUG]  [BUGGY]  while(options.hasOption(arg.substring(1,  2)))  {  tokens.add(arg.substring(1,  2));  [CE]  'else'  without  'if'  [FE]            ComparisonFailure      [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]  while(options.hasOption(arg.substring(1,  2)))  {  tokens.add(arg.substring(1,  2));  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	while(options.hasOption(arg.substring(1,  2)))  {  tokens.add(arg.substring(1,  2));	          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(1,    2));    }    while(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(1,    2));    }    timeout    	non-compiled	[CE]  'else'  without  'if'	112	None	replace
914	[BUG]  [BUGGY]  while(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1,  2));  }  [CE]  'else'  without  'if'  [FE]              ComparisonFailure      [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]  while(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1,  2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	while(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1,  2));  }	          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(1,    2));    }    while(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(1,    2));    }    timeout    	non-compiled	[CE]  'else'  without  'if'	112	None	replace
915	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(i    +    1));    tokens.add(arg.substring(i  +  1));  tokens.add(arg.substring(i  +  1,  2));  tokens.add(arg.substring(i  +  1));  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	                tokens.add(arg.substring(i        +        1));        tokens.add(arg.substring(i    +    1));    tokens.add(arg.substring(i  +  1,  2));  tokens.add(arg.substring(i  +  1));	  	compilable	  [FE]  ComparisonFailure  	83	4	add
916	[BUG]  [BUGGY]          tokens.add(arg.substring(i    +    1));    tokens.add(arg.substring(i  +  1));  tokens.add(arg.substring(i  +  1,  2));  tokens.add(arg.substring(i  +  1));  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(i    +    1));    tokens.add(arg.substring(i  +  1));  tokens.add(arg.substring(i  +  1,  2));  tokens.add(arg.substring(i  +  1));  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                tokens.add(arg.substring(i        +        1));        tokens.add(arg.substring(i    +    1));    tokens.add(arg.substring(i  +  1,  2));  tokens.add(arg.substring(i  +  1));	  	compilable	  [FE]  ComparisonFailure  	83	4	add
917	[BUG]  [BUGGY]          tokens.add(arg.substring(i    +    1));    tokens.add(arg.substring(i  +  1));  tokens.add(arg.substring(i  +  1));  tos.add(arg.substring(i  +  1));  [CE]  cannot  find  symbol  tos  [FE]      ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(i    +    1));    tokens.add(arg.substring(i  +  1));  tokens.add(arg.substring(i  +  1));  tos.add(arg.substring(i  +  1));  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                tokens.add(arg.substring(i        +        1));        tokens.add(arg.substring(i    +    1));    tokens.add(arg.substring(i  +  1));  tos.add(arg.substring(i  +  1));	  	non-compiled	[CE]  cannot  find  symbol  tos	83	None	add
918	[BUG]  [BUGGY]  if(options.hasOption(arg.substring(0,  1)))  {  tokens.add(arg.substring(1,  2));  }  [CE]  'else'  without  'if'  [FE]              ComparisonFailure      [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]  if(options.hasOption(arg.substring(0,  1)))  {  tokens.add(arg.substring(1,  2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	if(options.hasOption(arg.substring(0,  1)))  {  tokens.add(arg.substring(1,  2));  }	          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(1,    2));    }    ||    options.hasOption(arg.substring(1,    2)))    {    tokens.add(arg.substring(1,    2));    }    	non-compiled	[CE]  'else'  without  'if'	47	None	replace
919	[BUG]  [BUGGY]  if(options.hasOption(arg.substring(0,  1))  {  tokens.add(arg.substring(1,  2));  }  [CE]  ')'  expected  [FE]                ComparisonFailure      [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]  if(options.hasOption(arg.substring(0,  1))  {  tokens.add(arg.substring(1,  2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	if(options.hasOption(arg.substring(0,  1))  {  tokens.add(arg.substring(1,  2));  }	          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(1,    2));    }    ||    options.hasOption(arg.substring(1,    2)))    {    tokens.add(arg.substring(1,    2));    }    	non-compiled	[CE]  ')'  expected	47	None	replace
920	[BUG]  [BUGGY]  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1,  2));  }  [CE]  'else'  without  'if'  [FE]    ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1,  2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1,  2));  }	          tokens.add(arg.substring(i    +    1));    if(options.hasOption(arg.substring(i    +    1)))    {    tokens.add(arg.substring(i    +    1));    }    else    {    tokens.add(arg.substring(i    +    1));    }    	non-compiled	[CE]  'else'  without  'if'	90	None	replace
921	[BUG]  [BUGGY]  while(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1,  1));  [CE]  'else'  without  'if'  [FE]        ComparisonFailure      [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]  while(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1,  1));  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	while(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1,  1));	  while(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(i    +    1));    	non-compiled	[CE]  'else'  without  'if'	151	None	replace
922	[BUG]  [BUGGY]  tokens.add(arg.substring(i  +  1));  TokenBuffer  tokens  =  new  TokenBuffer(arg.substring(i  +  1),  arg.toLowerCase());  [CE]  'else'  without  'if'  [FE]            ComparisonFailure      [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]  tokens.add(arg.substring(i  +  1));  TokenBuffer  tokens  =  new  TokenBuffer(arg.substring(i  +  1),  arg.toLowerCase());  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	tokens.add(arg.substring(i  +  1));  TokenBuffer  tokens  =  new  TokenBuffer(arg.substring(i  +  1),  arg.toLowerCase());	          tokens.add(arg.substring(i));    TokenBuffer    tokens    =    new    TokenBuffer(arg.substring(i).toLowerCase());    	non-compiled	[CE]  'else'  without  'if'	136	None	replace
923	[BUG]  [BUGGY]          tokens.add(arg.substring(0,    2));    tokens.add(arg.substring(0,  1));  tokens.add(arg.substring(0,  2));  tos.add(arg.substring(0,  1));  [CE]  cannot  find  symbol  tos  [FE]    MissingArgumentException    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(0,    2));    tokens.add(arg.substring(0,  1));  tokens.add(arg.substring(0,  2));  tos.add(arg.substring(0,  1));  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                tokens.add(arg.substring(0,        2));        tokens.add(arg.substring(0,    1));    tokens.add(arg.substring(0,  2));  tos.add(arg.substring(0,  1));	  	non-compiled	[CE]  cannot  find  symbol  tos	34	None	add
924	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(i    +    2));    if(options.hasOption(arg.substring(i  +  2)))  {  tokens.add(arg.substring(i  +  2));  }  tokens.add(arg.substring(i  +  1));  if(options.hasOption(arg.substring(i  +  2)))  {  tokens.add(arg.substring(i  +  2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	                tokens.add(arg.substring(i        +        2));        if(options.hasOption(arg.substring(i    +    2)))    {    tokens.add(arg.substring(i    +    2));    }    tokens.add(arg.substring(i  +  1));  if(options.hasOption(arg.substring(i  +  2)))  {  tokens.add(arg.substring(i  +  2));  }	  	compilable	  [FE]  ComparisonFailure  	60	3	add
925	[BUG]  [BUGGY]          tokens.add(arg.substring(i    +    2));    if(options.hasOption(arg.substring(i  +  2)))  {  tokens.add(arg.substring(i  +  2));  }  tokens.add(arg.substring(i  +  1));  if(options.hasOption(arg.substring(i  +  2)))  {  tokens.add(arg.substring(i  +  2));  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(i    +    2));    if(options.hasOption(arg.substring(i  +  2)))  {  tokens.add(arg.substring(i  +  2));  }  tokens.add(arg.substring(i  +  1));  if(options.hasOption(arg.substring(i  +  2)))  {  tokens.add(arg.substring(i  +  2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                tokens.add(arg.substring(i        +        2));        if(options.hasOption(arg.substring(i    +    2)))    {    tokens.add(arg.substring(i    +    2));    }    tokens.add(arg.substring(i  +  1));  if(options.hasOption(arg.substring(i  +  2)))  {  tokens.add(arg.substring(i  +  2));  }	  	compilable	  [FE]  ComparisonFailure  	60	3	add
926	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(2));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1,  2));  }  tokens.add(arg.substring(2));  if(options.hasOption(arg.substring(2,  2)))  {  tokens.add(arg.substring(1,  2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	add	                tokens.add(arg.substring(2));        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(1,    2));    }    tokens.add(arg.substring(2));  if(options.hasOption(arg.substring(2,  2)))  {  tokens.add(arg.substring(1,  2));  }	  	compilable	  [FE]  ComparisonFailure  	158	3	add
927	[BUG]  [BUGGY]          tokens.add(arg.substring(2));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1,  2));  }  tokens.add(arg.substring(2));  if(options.hasOption(arg.substring(2,  2)))  {  tokens.add(arg.substring(1,  2));  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    tokens.add(arg.substring(0,  2));  //  -D      [BUGGY]          tokens.add(arg.substring(2));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1,  2));  }  tokens.add(arg.substring(2));  if(options.hasOption(arg.substring(2,  2)))  {  tokens.add(arg.substring(1,  2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value      }  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	86	87	3	replace	                tokens.add(arg.substring(2));        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(1,    2));    }    tokens.add(arg.substring(2));  if(options.hasOption(arg.substring(2,  2)))  {  tokens.add(arg.substring(1,  2));  }	  	compilable	  [FE]  ComparisonFailure  	158	3	add
