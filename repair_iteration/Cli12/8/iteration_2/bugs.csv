bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];    [BUGGY]  if(!   "-- ".equals(arg)||  stopAtNonOption)  {  [BUGGY]    {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  tokens.add(   "-   ");  }  else  if  (arg.startsWith(   "-   "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	add	if(!   "-- ".equals(arg)||  stopAtNonOption)  {	  if(!   "--   ".equals(arg)||    eatTheRest)    {    	compilable	  [FE]  AssertionFailedError  	22	14	replace
2	[BUG]  [BUGGY]  if(!   "-- ".equals(arg)||  stopAtNonOption)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];    [BUGGY]  if(!   "-- ".equals(arg)||  stopAtNonOption)  {  [BUGGY]    {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  tokens.add(   "-   ");  }  else  if  (arg.startsWith(   "-   "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	if(!   "-- ".equals(arg)||  stopAtNonOption)  {	  if(!   "--   ".equals(arg)||    eatTheRest)    {    	compilable	  [FE]  AssertionFailedError  	22	14	replace
3	[BUG]  [BUGGY]  if(!opt.equals(arg)||  eatTheRest)  {  [CE]  cannot  find  symbol  opt  [FE]      AssertionFailedError    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];    [BUGGY]  if(!opt.equals(arg)||  eatTheRest)  {  [BUGGY]    {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  tokens.add(   "-   ");  }  else  if  (arg.startsWith(   "-   "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	if(!opt.equals(arg)||  eatTheRest)  {	  if(!   "--   ".equals(arg)||    eatTheRest)    {    	non-compiled	[CE]  cannot  find  symbol  opt	22	None	replace
4	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];    [BUGGY]  if(arg.startsWith( "-- "))  {  [BUGGY]    {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  tokens.add(   "-   ");  }  else  if  (arg.startsWith(   "-   "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	add	if(arg.startsWith( "-- "))  {	  if(arg.startsWith(   "-   "))    {    	compilable	  [FE]  AssertionFailedError  	2	7	replace
5	[BUG]  [BUGGY]  if(arg.startsWith( "-- "))  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];    [BUGGY]  if(arg.startsWith( "-- "))  {  [BUGGY]    {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  tokens.add(   "-   ");  }  else  if  (arg.startsWith(   "-   "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	if(arg.startsWith( "-- "))  {	  if(arg.startsWith(   "-   "))    {    	compilable	  [FE]  AssertionFailedError  	2	7	replace
6	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];    [BUGGY]  if(arg.equals( "- "))  {  [BUGGY]    {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  tokens.add(   "-   ");  }  else  if  (arg.startsWith(   "-   "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	add	if(arg.equals( "- "))  {	  if(arg.startsWith(   "-   "))    {    	compilable	  [FE]  AssertionFailedError  	2	4	replace
7	[BUG]  [BUGGY]  if(arg.equals( "- "))  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];    [BUGGY]  if(arg.equals( "- "))  {  [BUGGY]    {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  tokens.add(   "-   ");  }  else  if  (arg.startsWith(   "-   "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	if(arg.equals( "- "))  {	  if(arg.startsWith(   "-   "))    {    	compilable	  [FE]  AssertionFailedError  	2	4	replace
8	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];    [BUGGY]  if(arg.startsWith( "- ")||  arg.startsWith( "-- "))  {  [BUGGY]    {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  tokens.add(   "-   ");  }  else  if  (arg.startsWith(   "-   "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	add	if(arg.startsWith( "- ")||  arg.startsWith( "-- "))  {	  if(arg.startsWith(   "-   "))    {    	compilable	  [FE]  AssertionFailedError  	2	14	replace
9	[BUG]  [BUGGY]  if(arg.startsWith( "- ")||  arg.startsWith( "-- "))  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];    [BUGGY]  if(arg.startsWith( "- ")||  arg.startsWith( "-- "))  {  [BUGGY]    {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  tokens.add(   "-   ");  }  else  if  (arg.startsWith(   "-   "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	if(arg.startsWith( "- ")||  arg.startsWith( "-- "))  {	  if(arg.startsWith(   "-   "))    {    	compilable	  [FE]  AssertionFailedError  	2	14	replace
10	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];    [BUGGY]  if(! "-- ".equals(arg)||!stopAtNonOption)  {  [BUGGY]    {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  tokens.add(   "-   ");  }  else  if  (arg.startsWith(   "-   "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	add	if(! "-- ".equals(arg)||!stopAtNonOption)  {	  if(   "--   ".equals(arg)||!eatTheRest)    {    	compilable	  [FE]  AssertionFailedError  	18	14	replace
11	[BUG]  [BUGGY]  if(! "-- ".equals(arg)||!stopAtNonOption)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];    [BUGGY]  if(! "-- ".equals(arg)||!stopAtNonOption)  {  [BUGGY]    {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  tokens.add(   "-   ");  }  else  if  (arg.startsWith(   "-   "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	if(! "-- ".equals(arg)||!stopAtNonOption)  {	  if(   "--   ".equals(arg)||!eatTheRest)    {    	compilable	  [FE]  AssertionFailedError  	18	14	replace
12	[BUG]  [BUGGY]  if(!   "--   ".equals(arg)||!eatTheRest)  {  if(!   "--   ".equals(arg)||!eatTheRest)  {  [CE]  reached  end  of  file  while  parsing  [FE]    AssertionFailedError    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];    [BUGGY]  if(!   "--   ".equals(arg)||!eatTheRest)  {  if(!   "--   ".equals(arg)||!eatTheRest)  {  [BUGGY]    {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  tokens.add(   "-   ");  }  else  if  (arg.startsWith(   "-   "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	if(!   "--   ".equals(arg)||!eatTheRest)    {    if(!   "--   ".equals(arg)||!eatTheRest)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	23	None	add
13	[BUG]  [BUGGY]  if(!   "--   ".equals(arg)||!eatTheRest)  {  if(!   "--   ".equals(arg)||!eattheRest)  {  [CE]  reached  end  of  file  while  parsing  [FE]      AssertionFailedError    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];    [BUGGY]  if(!   "--   ".equals(arg)||!eatTheRest)  {  if(!   "--   ".equals(arg)||!eattheRest)  {  [BUGGY]    {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  tokens.add(   "-   ");  }  else  if  (arg.startsWith(   "-   "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	if(!   "--   ".equals(arg)||!eatTheRest)    {    if(!   "--   ".equals(arg)||!eattheRest)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	23	None	add
14	[BUG]  [BUGGY]  if(   "--   ".equals(arg)||  eatTheRest)  {  if(   "--   ".equals(arg)||  eatTheRest)  {  [CE]  reached  end  of  file  while  parsing  [FE]    ComparisonFailure    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];    [BUGGY]  if(   "--   ".equals(arg)||  eatTheRest)  {  if(   "--   ".equals(arg)||  eatTheRest)  {  [BUGGY]    {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  tokens.add(   "-   ");  }  else  if  (arg.startsWith(   "-   "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	if(   "--   ".equals(arg)||    eatTheRest)    {    if(   "--   ".equals(arg)||  eatTheRest)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	19	None	add
15	[BUG]  [BUGGY]  if(   "--   ".equals(arg)||  eatTheRest)  {  if('--   ".equals(arg)||  eatTheRest)  {  [CE]  unclosed  character  literal  [FE]      ComparisonFailure    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];    [BUGGY]  if(   "--   ".equals(arg)||  eatTheRest)  {  if('--   ".equals(arg)||  eatTheRest)  {  [BUGGY]    {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  tokens.add(   "-   ");  }  else  if  (arg.startsWith(   "-   "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	if(   "--   ".equals(arg)||    eatTheRest)    {    if('--   ".equals(arg)||  eatTheRest)  {	  	non-compiled	[CE]  unclosed  character  literal	19	None	add
16	[BUG]  [BUGGY]  if(   "--   ".equals(arg)||  eatTheRest)  {  if( ".--   ".equals(arg)||  eatTheRest)  {  [CE]  reached  end  of  file  while  parsing  [FE]        ComparisonFailure    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];    [BUGGY]  if(   "--   ".equals(arg)||  eatTheRest)  {  if( ".--   ".equals(arg)||  eatTheRest)  {  [BUGGY]    {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  tokens.add(   "-   ");  }  else  if  (arg.startsWith(   "-   "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	if(   "--   ".equals(arg)||    eatTheRest)    {    if( ".--   ".equals(arg)||  eatTheRest)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	19	None	add
17	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];    [BUGGY]  if(arg.startsWith( "-- ")||  arg.startsWith( "--   "))  {  [BUGGY]    {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  tokens.add(   "-   ");  }  else  if  (arg.startsWith(   "-   "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	add	if(arg.startsWith( "-- ")||  arg.startsWith( "--   "))  {	  if(   "--   ".equals(arg)||    arg.startsWith(   "--   "))    {    	compilable	  [FE]  AssertionFailedError  	28	7	replace
18	[BUG]  [BUGGY]  if(arg.startsWith( "-- ")||  arg.startsWith( "--   "))  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];    [BUGGY]  if(arg.startsWith( "-- ")||  arg.startsWith( "--   "))  {  [BUGGY]    {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  tokens.add(   "-   ");  }  else  if  (arg.startsWith(   "-   "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	if(arg.startsWith( "-- ")||  arg.startsWith( "--   "))  {	  if(   "--   ".equals(arg)||    arg.startsWith(   "--   "))    {    	compilable	  [FE]  AssertionFailedError  	28	7	replace
19	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];    [BUGGY]  if(arg.equals( "-- ")||  arg.startsWith( "-- "))  {  [BUGGY]    {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  tokens.add(   "-   ");  }  else  if  (arg.startsWith(   "-   "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	add	if(arg.equals( "-- ")||  arg.startsWith( "-- "))  {	  if(   "--   ".equals(arg)||    arg.startsWith(   "--   "))    {    	compilable	  [FE]  AssertionFailedError  	28	7	replace
20	[BUG]  [BUGGY]  if(arg.equals( "-- ")||  arg.startsWith( "-- "))  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];    [BUGGY]  if(arg.equals( "-- ")||  arg.startsWith( "-- "))  {  [BUGGY]    {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  tokens.add(   "-   ");  }  else  if  (arg.startsWith(   "-   "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	if(arg.equals( "-- ")||  arg.startsWith( "-- "))  {	  if(   "--   ".equals(arg)||    arg.startsWith(   "--   "))    {    	compilable	  [FE]  AssertionFailedError  	28	7	replace
21	[BUG]  [BUGGY]  if(arg.equals(arg)||!stopAtNonOption.startsWith( "--   "))  {  [CE]  boolean  cannot  be  dereferenced  [FE]            ComparisonFailure    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];    [BUGGY]  if(arg.equals(arg)||!stopAtNonOption.startsWith( "--   "))  {  [BUGGY]    {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  tokens.add(   "-   ");  }  else  if  (arg.startsWith(   "-   "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	if(arg.equals(arg)||!stopAtNonOption.startsWith( "--   "))  {	  if(   "--   ".equals(arg)||!opt.startsWith(   "--   "))    {    	non-compiled	[CE]  boolean  cannot  be  dereferenced	5	None	replace
22	[BUG]  [BUGGY]  if( "--   ".equals(arg)||!stopAtNonOption.startsWith( "--   "))  {  [CE]  boolean  cannot  be  dereferenced  [FE]              ComparisonFailure    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];    [BUGGY]  if( "--   ".equals(arg)||!stopAtNonOption.startsWith( "--   "))  {  [BUGGY]    {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  tokens.add(   "-   ");  }  else  if  (arg.startsWith(   "-   "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	if( "--   ".equals(arg)||!stopAtNonOption.startsWith( "--   "))  {	  if(   "--   ".equals(arg)||!opt.startsWith(   "--   "))    {    	non-compiled	[CE]  boolean  cannot  be  dereferenced	5	None	replace
23	[BUG]  [BUGGY]  if( "--   ".equals(arg)||!tokens.startsWith( "--   "))  {  [CE]  cannot  find  symbol  [FE]                ComparisonFailure    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];    [BUGGY]  if( "--   ".equals(arg)||!tokens.startsWith( "--   "))  {  [BUGGY]    {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  tokens.add(   "-   ");  }  else  if  (arg.startsWith(   "-   "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	if( "--   ".equals(arg)||!tokens.startsWith( "--   "))  {	  if(   "--   ".equals(arg)||!opt.startsWith(   "--   "))    {    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
24	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                  ComparisonFailure    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];    [BUGGY]  if( "--   ".equals(arg)||!arg.startsWith( "-- "))  {  [BUGGY]    {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  tokens.add(   "-   ");  }  else  if  (arg.startsWith(   "-   "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	add	if( "--   ".equals(arg)||!arg.startsWith( "-- "))  {	  if(   "--   ".equals(arg)||!opt.startsWith(   "--   "))    {    	compilable	  [FE]  AssertionFailedError  	5	14	replace
25	[BUG]  [BUGGY]  if( "--   ".equals(arg)||!arg.startsWith( "-- "))  {  [FE]  AssertionFailedError  [FE]                  ComparisonFailure    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];    [BUGGY]  if( "--   ".equals(arg)||!arg.startsWith( "-- "))  {  [BUGGY]    {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  tokens.add(   "-   ");  }  else  if  (arg.startsWith(   "-   "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	if( "--   ".equals(arg)||!arg.startsWith( "-- "))  {	  if(   "--   ".equals(arg)||!opt.startsWith(   "--   "))    {    	compilable	  [FE]  AssertionFailedError  	5	14	replace
26	[BUG]  [BUGGY]  tokens  =  new  ArrayList();  [CE]  [FE]              ComparisonFailure    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];    [BUGGY]  tokens  =  new  ArrayList();  [BUGGY]    {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  tokens.add(   "-   ");  }  else  if  (arg.startsWith(   "-   "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	tokens  =  new  ArrayList();	      	non-compiled	[CE]  	6	None	replace
27	[BUG]  [BUGGY]  tokens.remove(arg);  [CE]  [FE]                ComparisonFailure    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];    [BUGGY]  tokens.remove(arg);  [BUGGY]    {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  tokens.add(   "-   ");  }  else  if  (arg.startsWith(   "-   "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	tokens.remove(arg);	      	non-compiled	[CE]  	6	None	replace
28	[BUG]  [BUGGY]  if(arg.startsWith(   "-   "))  {  if(arg.startsWith(   "-   "))  {  [CE]  reached  end  of  file  while  parsing  [FE]    AssertionFailedError    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];    [BUGGY]  if(arg.startsWith(   "-   "))  {  if(arg.startsWith(   "-   "))  {  [BUGGY]    {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  tokens.add(   "-   ");  }  else  if  (arg.startsWith(   "-   "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	if(arg.startsWith(   "-   "))    {    if(arg.startsWith(   "-   "))  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	1	None	add
29	[BUG]  [BUGGY]  if(arg.startsWith(   "-   "))  {  if(arg.startsWith( ".-   "))  {  [CE]  reached  end  of  file  while  parsing  [FE]      AssertionFailedError    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];    [BUGGY]  if(arg.startsWith(   "-   "))  {  if(arg.startsWith( ".-   "))  {  [BUGGY]    {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  tokens.add(   "-   ");  }  else  if  (arg.startsWith(   "-   "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	if(arg.startsWith(   "-   "))    {    if(arg.startsWith( ".-   "))  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	1	None	add
30	[BUG]  [BUGGY]  if(arg.startsWith(   "-   "))  {  if(arg.startsWith('-   "))  {  [CE]  unclosed  character  literal  [FE]        AssertionFailedError    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];    [BUGGY]  if(arg.startsWith(   "-   "))  {  if(arg.startsWith('-   "))  {  [BUGGY]    {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  tokens.add(   "-   ");  }  else  if  (arg.startsWith(   "-   "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	if(arg.startsWith(   "-   "))    {    if(arg.startsWith('-   "))  {	  	non-compiled	[CE]  unclosed  character  literal	1	None	add
31	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    ComparisonFailure    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];    [BUGGY]  if( "--   ".equals(arg)||  stopAtNonOption)  {  [BUGGY]    {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  tokens.add(   "-   ");  }  else  if  (arg.startsWith(   "-   "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	add	if( "--   ".equals(arg)||  stopAtNonOption)  {	  if(   "--   ".equals(arg)||    eatTheRest)    {    	compilable	  [FE]  AssertionFailedError  	20	6	replace
32	[BUG]  [BUGGY]  if( "--   ".equals(arg)||  stopAtNonOption)  {  [FE]  AssertionFailedError  [FE]    ComparisonFailure    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];    [BUGGY]  if( "--   ".equals(arg)||  stopAtNonOption)  {  [BUGGY]    {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  tokens.add(   "-   ");  }  else  if  (arg.startsWith(   "-   "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	if( "--   ".equals(arg)||  stopAtNonOption)  {	  if(   "--   ".equals(arg)||    eatTheRest)    {    	compilable	  [FE]  AssertionFailedError  	20	6	replace
33	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];    [BUGGY]  if( "--   ".equals(arg)&&  eatTheRest)  {  [BUGGY]    {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  tokens.add(   "-   ");  }  else  if  (arg.startsWith(   "-   "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	add	if( "--   ".equals(arg)&&  eatTheRest)  {	  if(   "--   ".equals(arg)||    eatTheRest)    {    	compilable	  [FE]  ComparisonFailure  	20	3	replace
34	[BUG]  [BUGGY]  if( "--   ".equals(arg)&&  eatTheRest)  {  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];    [BUGGY]  if( "--   ".equals(arg)&&  eatTheRest)  {  [BUGGY]    {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  tokens.add(   "-   ");  }  else  if  (arg.startsWith(   "-   "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	if( "--   ".equals(arg)&&  eatTheRest)  {	  if(   "--   ".equals(arg)||    eatTheRest)    {    	compilable	  [FE]  ComparisonFailure  	20	3	replace
35	[BUG]  [BUGGY]  [FE]  UnrecognizedOptionException  [FE]    AssertionFailedError    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];    [BUGGY]      tokens.add(   "-   ");  tokens.add( "-   ");  [BUGGY]    if  (   "--   ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  tokens.add(   "-   ");  }  else  if  (arg.startsWith(   "-   "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	add	        tokens.add(   "-   ");    tokens.add( "-   ");	  	compilable	  [FE]  UnrecognizedOptionException  	7	13	add
36	[BUG]  [BUGGY]      tokens.add(   "-   ");  tokens.add( "-   ");  [FE]  UnrecognizedOptionException  [FE]    AssertionFailedError    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];    [BUGGY]      tokens.add(   "-   ");  tokens.add( "-   ");  [BUGGY]    if  (   "--   ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  tokens.add(   "-   ");  }  else  if  (arg.startsWith(   "-   "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	        tokens.add(   "-   ");    tokens.add( "-   ");	  	compilable	  [FE]  UnrecognizedOptionException  	7	13	add
37	[BUG]  [BUGGY]  [FE]  UnrecognizedOptionException  [FE]      AssertionFailedError    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];    [BUGGY]      tokens.add(   "-   ");  tokens.add( ".-   ");  [BUGGY]    if  (   "--   ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  tokens.add(   "-   ");  }  else  if  (arg.startsWith(   "-   "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	add	        tokens.add(   "-   ");    tokens.add( ".-   ");	  	compilable	  [FE]  UnrecognizedOptionException  	7	13	add
38	[BUG]  [BUGGY]      tokens.add(   "-   ");  tokens.add( ".-   ");  [FE]  UnrecognizedOptionException  [FE]      AssertionFailedError    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];    [BUGGY]      tokens.add(   "-   ");  tokens.add( ".-   ");  [BUGGY]    if  (   "--   ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  tokens.add(   "-   ");  }  else  if  (arg.startsWith(   "-   "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	        tokens.add(   "-   ");    tokens.add( ".-   ");	  	compilable	  [FE]  UnrecognizedOptionException  	7	13	add
39	[BUG]  [BUGGY]  [FE]  UnrecognizedOptionException  [FE]        AssertionFailedError    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];    [BUGGY]      tokens.add(   "-   ");  tokens.add( ",-   ");  [BUGGY]    if  (   "--   ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  tokens.add(   "-   ");  }  else  if  (arg.startsWith(   "-   "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	add	        tokens.add(   "-   ");    tokens.add( ",-   ");	  	compilable	  [FE]  UnrecognizedOptionException  	7	13	add
40	[BUG]  [BUGGY]      tokens.add(   "-   ");  tokens.add( ",-   ");  [FE]  UnrecognizedOptionException  [FE]        AssertionFailedError    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];    [BUGGY]      tokens.add(   "-   ");  tokens.add( ",-   ");  [BUGGY]    if  (   "--   ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  tokens.add(   "-   ");  }  else  if  (arg.startsWith(   "-   "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	        tokens.add(   "-   ");    tokens.add( ",-   ");	  	compilable	  [FE]  UnrecognizedOptionException  	7	13	add
41	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    AssertionFailedError    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];    [BUGGY]  if( "--   ".equals(arg)&&!stopAtNonOption)  {  [BUGGY]    {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  tokens.add(   "-   ");  }  else  if  (arg.startsWith(   "-   "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	add	if( "--   ".equals(arg)&&!stopAtNonOption)  {	  if(   "--   ".equals(arg)||!stopAtNonOption)    {    	compilable	  [FE]  ComparisonFailure  	4	3	replace
42	[BUG]  [BUGGY]  if( "--   ".equals(arg)&&!stopAtNonOption)  {  [FE]  ComparisonFailure  [FE]    AssertionFailedError    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];    [BUGGY]  if( "--   ".equals(arg)&&!stopAtNonOption)  {  [BUGGY]    {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  tokens.add(   "-   ");  }  else  if  (arg.startsWith(   "-   "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	if( "--   ".equals(arg)&&!stopAtNonOption)  {	  if(   "--   ".equals(arg)||!stopAtNonOption)    {    	compilable	  [FE]  ComparisonFailure  	4	3	replace
43	[BUG]  [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(arg.length()  -  1);  [CE]  [FE]            ComparisonFailure    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];    [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(arg.length()  -  1);  [BUGGY]    if  (   "--   ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  tokens.add(   "-   ");  }  else  if  (arg.startsWith(   "-   "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	TokenBuffer  tokens  =  new  TokenBuffer(arg.length()  -  1);	      TokenBuffer    tokens    =    new    TokenBuffer(arg.length());    	non-compiled	[CE]  	16	None	replace
44	[BUG]  [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(arg.length(),  opt.length());  [CE]  [FE]              ComparisonFailure    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];    [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(arg.length(),  opt.length());  [BUGGY]    if  (   "--   ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  tokens.add(   "-   ");  }  else  if  (arg.startsWith(   "-   "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	TokenBuffer  tokens  =  new  TokenBuffer(arg.length(),  opt.length());	      TokenBuffer    tokens    =    new    TokenBuffer(arg.length());    	non-compiled	[CE]  	16	None	replace
45	[BUG]  [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(arg,  tokens.length());  [CE]  [FE]                ComparisonFailure    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];    [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(arg,  tokens.length());  [BUGGY]    if  (   "--   ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  tokens.add(   "-   ");  }  else  if  (arg.startsWith(   "-   "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	TokenBuffer  tokens  =  new  TokenBuffer(arg,  tokens.length());	      TokenBuffer    tokens    =    new    TokenBuffer(arg.length());    	non-compiled	[CE]  	16	None	replace
46	[BUG]  [BUGGY]  String[]  arguments  =  options.toArray(arguments[i]);  [CE]  [FE]            ComparisonFailure    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];    [BUGGY]  String[]  arguments  =  options.toArray(arguments[i]);  [BUGGY]    if  (   "--   ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  tokens.add(   "-   ");  }  else  if  (arg.startsWith(   "-   "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	String[]  arguments  =  options.toArray(arguments[i]);	      String[]    arg    =    options.toArray(arguments[i]);    	non-compiled	[CE]  	11	None	replace
47	[BUG]  [BUGGY]  String[]  arg  =  options.toArray(arguments[i]  +  1);  [CE]  [FE]              ComparisonFailure    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];    [BUGGY]  String[]  arg  =  options.toArray(arguments[i]  +  1);  [BUGGY]    if  (   "--   ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  tokens.add(   "-   ");  }  else  if  (arg.startsWith(   "-   "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	String[]  arg  =  options.toArray(arguments[i]  +  1);	      String[]    arg    =    options.toArray(arguments[i]);    	non-compiled	[CE]  	11	None	replace
48	[BUG]  [BUGGY]  String[]  arg  =  options.toArray(arguments[i])+  1;  [CE]  [FE]                ComparisonFailure    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];    [BUGGY]  String[]  arg  =  options.toArray(arguments[i])+  1;  [BUGGY]    if  (   "--   ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  tokens.add(   "-   ");  }  else  if  (arg.startsWith(   "-   "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	String[]  arg  =  options.toArray(arguments[i])+  1;	      String[]    arg    =    options.toArray(arguments[i]);    	non-compiled	[CE]  	11	None	replace
49	[BUG]  [BUGGY]  if(!opt.equals(arg)||!stopAtNonOption)  {  [CE]  cannot  find  symbol  opt  [FE]    AssertionFailedError    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];    [BUGGY]  if(!opt.equals(arg)||!stopAtNonOption)  {  [BUGGY]    {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  tokens.add(   "-   ");  }  else  if  (arg.startsWith(   "-   "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	if(!opt.equals(arg)||!stopAtNonOption)  {	  if(!   "--   ".equals(arg)||!eatTheRest)    {    	non-compiled	[CE]  cannot  find  symbol  opt	24	None	replace
50	[BUG]  [BUGGY]  if(!   "--   ".equals(arg)||  eatTheRest)  {  if(!   "--   ".equals(arg)||  eatTheRest)  {  [CE]  reached  end  of  file  while  parsing  [FE]    AssertionFailedError    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];    [BUGGY]  if(!   "--   ".equals(arg)||  eatTheRest)  {  if(!   "--   ".equals(arg)||  eatTheRest)  {  [BUGGY]    {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  tokens.add(   "-   ");  }  else  if  (arg.startsWith(   "-   "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	if(!   "--   ".equals(arg)||    eatTheRest)    {    if(!   "--   ".equals(arg)||  eatTheRest)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	21	None	add
51	[BUG]  [BUGGY]  if(!   "--   ".equals(arg)||  eatTheRest)  {  if(!   "--   ".equals(arg)||  eattheRest)  {  [CE]  reached  end  of  file  while  parsing  [FE]      AssertionFailedError    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];    [BUGGY]  if(!   "--   ".equals(arg)||  eatTheRest)  {  if(!   "--   ".equals(arg)||  eattheRest)  {  [BUGGY]    {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  tokens.add(   "-   ");  }  else  if  (arg.startsWith(   "-   "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	if(!   "--   ".equals(arg)||    eatTheRest)    {    if(!   "--   ".equals(arg)||  eattheRest)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	21	None	add
52	[BUG]  [BUGGY]  if(   "--   ".equals(arg)||  arg.startsWith(   "--   "))  {  if(   "--   ".equals(arg)||  arg.startsWith(   "--   "))  {  [CE]  reached  end  of  file  while  parsing  [FE]    AssertionFailedError    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];    [BUGGY]  if(   "--   ".equals(arg)||  arg.startsWith(   "--   "))  {  if(   "--   ".equals(arg)||  arg.startsWith(   "--   "))  {  [BUGGY]    {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  tokens.add(   "-   ");  }  else  if  (arg.startsWith(   "-   "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	if(   "--   ".equals(arg)||    arg.startsWith(   "--   "))    {    if(   "--   ".equals(arg)||  arg.startsWith(   "--   "))  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	27	None	add
53	[BUG]  [BUGGY]  if(   "--   ".equals(arg)||  arg.startsWith(   "--   "))  {  if(   "--   ".equals(arg)||  arg.startsWith( ".--   "))  {  [CE]  reached  end  of  file  while  parsing  [FE]      AssertionFailedError    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];    [BUGGY]  if(   "--   ".equals(arg)||  arg.startsWith(   "--   "))  {  if(   "--   ".equals(arg)||  arg.startsWith( ".--   "))  {  [BUGGY]    {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  tokens.add(   "-   ");  }  else  if  (arg.startsWith(   "-   "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	if(   "--   ".equals(arg)||    arg.startsWith(   "--   "))    {    if(   "--   ".equals(arg)||  arg.startsWith( ".--   "))  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	27	None	add
54	[BUG]  [BUGGY]  tokens.add( "- "  +  arg);  [CE]  [FE]    AssertionFailedError    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];    [BUGGY]  tokens.add( "- "  +  arg);  [BUGGY]    if  (   "--   ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  tokens.add(   "-   ");  }  else  if  (arg.startsWith(   "-   "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	tokens.add( "- "  +  arg);	      tokens.add(   "-   ");    	non-compiled	[CE]  	8	None	replace
55	[BUG]  [BUGGY]  tokens.add( "- ",  arg);  [CE]  [FE]      AssertionFailedError    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];    [BUGGY]  tokens.add( "- ",  arg);  [BUGGY]    if  (   "--   ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  tokens.add(   "-   ");  }  else  if  (arg.startsWith(   "-   "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	tokens.add( "- ",  arg);	      tokens.add(   "-   ");    	non-compiled	[CE]  	8	None	replace
56	[BUG]  [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(tokens.size()  -  1);  [CE]  [FE]          ComparisonFailure    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];    [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(tokens.size()  -  1);  [BUGGY]    if  (   "--   ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  tokens.add(   "-   ");  }  else  if  (arg.startsWith(   "-   "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	TokenBuffer  tokens  =  new  TokenBuffer(tokens.size()  -  1);	      TokenBuffer    tokens    =    new    TokenBuffer(tokens.size());    	non-compiled	[CE]  	15	None	replace
57	[BUG]  [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(tokens.size()  +  1);  [CE]  [FE]            ComparisonFailure    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];    [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(tokens.size()  +  1);  [BUGGY]    if  (   "--   ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  tokens.add(   "-   ");  }  else  if  (arg.startsWith(   "-   "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	TokenBuffer  tokens  =  new  TokenBuffer(tokens.size()  +  1);	      TokenBuffer    tokens    =    new    TokenBuffer(tokens.size());    	non-compiled	[CE]  	15	None	replace
58	[BUG]  [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(tokens.size()  -  2);  [CE]  [FE]              ComparisonFailure    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];    [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(tokens.size()  -  2);  [BUGGY]    if  (   "--   ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  tokens.add(   "-   ");  }  else  if  (arg.startsWith(   "-   "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	TokenBuffer  tokens  =  new  TokenBuffer(tokens.size()  -  2);	      TokenBuffer    tokens    =    new    TokenBuffer(tokens.size());    	non-compiled	[CE]  	15	None	replace
59	[BUG]  [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(tokens,  opt.size());  [CE]  [FE]                ComparisonFailure    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];    [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(tokens,  opt.size());  [BUGGY]    if  (   "--   ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  tokens.add(   "-   ");  }  else  if  (arg.startsWith(   "-   "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	TokenBuffer  tokens  =  new  TokenBuffer(tokens,  opt.size());	      TokenBuffer    tokens    =    new    TokenBuffer(tokens.size());    	non-compiled	[CE]  	15	None	replace
60	[BUG]  [BUGGY]  [FE]  MissingArgumentException  [FE]    MissingArgumentException    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];    [BUGGY]      tokens.add(arg);  tokens.add(arg);  [BUGGY]    if  (   "--   ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  tokens.add(   "-   ");  }  else  if  (arg.startsWith(   "-   "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	add	        tokens.add(arg);    tokens.add(arg);	  	compilable	  [FE]  MissingArgumentException  	9	11	add
61	[BUG]  [BUGGY]      tokens.add(arg);  tokens.add(arg);  [FE]  MissingArgumentException  [FE]    MissingArgumentException    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];    [BUGGY]      tokens.add(arg);  tokens.add(arg);  [BUGGY]    if  (   "--   ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  tokens.add(   "-   ");  }  else  if  (arg.startsWith(   "-   "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	        tokens.add(arg);    tokens.add(arg);	  	compilable	  [FE]  MissingArgumentException  	9	11	add
62	[BUG]  [BUGGY]      tokens.add(arg);  tokens.add(arg);  if(stopAtNonOption)  {  eatTheRest  =  true;  tokens.add( "-   ");  }  else  if(opt.startsWith( "-   "))  {  [CE]  reached  end  of  file  while  parsing  [FE]      MissingArgumentException    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];    [BUGGY]      tokens.add(arg);  tokens.add(arg);  if(stopAtNonOption)  {  eatTheRest  =  true;  tokens.add( "-   ");  }  else  if(opt.startsWith( "-   "))  {  [BUGGY]    if  (   "--   ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  tokens.add(   "-   ");  }  else  if  (arg.startsWith(   "-   "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	        tokens.add(arg);    tokens.add(arg);  if(stopAtNonOption)  {  eatTheRest  =  true;  tokens.add( "-   ");  }  else  if(opt.startsWith( "-   "))  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	9	None	add
63	[BUG]  [BUGGY]  [FE]  MissingArgumentException  [FE]        MissingArgumentException    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];    [BUGGY]      tokens.add(arg);  tokens.add(arg);  if(stopAtNonOption)  {  eatTheRest  =  true;  tokens.add( "- ");  }  [BUGGY]    if  (   "--   ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  tokens.add(   "-   ");  }  else  if  (arg.startsWith(   "-   "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	add	        tokens.add(arg);    tokens.add(arg);  if(stopAtNonOption)  {  eatTheRest  =  true;  tokens.add( "- ");  }	  	compilable	  [FE]  MissingArgumentException  	9	11	add
64	[BUG]  [BUGGY]      tokens.add(arg);  tokens.add(arg);  if(stopAtNonOption)  {  eatTheRest  =  true;  tokens.add( "- ");  }  [FE]  MissingArgumentException  [FE]        MissingArgumentException    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];    [BUGGY]      tokens.add(arg);  tokens.add(arg);  if(stopAtNonOption)  {  eatTheRest  =  true;  tokens.add( "- ");  }  [BUGGY]    if  (   "--   ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  tokens.add(   "-   ");  }  else  if  (arg.startsWith(   "-   "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	        tokens.add(arg);    tokens.add(arg);  if(stopAtNonOption)  {  eatTheRest  =  true;  tokens.add( "- ");  }	  	compilable	  [FE]  MissingArgumentException  	9	11	add
65	[BUG]  [BUGGY]  tokens.add(arg.toLowerCase());  [CE]  [FE]    MissingArgumentException    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];    [BUGGY]  tokens.add(arg.toLowerCase());  [BUGGY]    if  (   "--   ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  tokens.add(   "-   ");  }  else  if  (arg.startsWith(   "-   "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	tokens.add(arg.toLowerCase());	      tokens.add(arg);    	non-compiled	[CE]  	10	None	replace
66	[BUG]  [BUGGY]  tokens.add(arg.toString());  [CE]  [FE]      MissingArgumentException    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];    [BUGGY]  tokens.add(arg.toString());  [BUGGY]    if  (   "--   ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  tokens.add(   "-   ");  }  else  if  (arg.startsWith(   "-   "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	tokens.add(arg.toString());	      tokens.add(arg);    	non-compiled	[CE]  	10	None	replace
67	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];    [BUGGY]  if(stopAtNonOption)  {  [BUGGY]    {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  tokens.add(   "-   ");  }  else  if  (arg.startsWith(   "-   "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	add	if(stopAtNonOption)  {	  if(!eatTheRest)    {    	compilable	  [FE]  AssertionFailedError  	26	6	replace
68	[BUG]  [BUGGY]  if(stopAtNonOption)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];    [BUGGY]  if(stopAtNonOption)  {  [BUGGY]    {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  tokens.add(   "-   ");  }  else  if  (arg.startsWith(   "-   "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	if(stopAtNonOption)  {	  if(!eatTheRest)    {    	compilable	  [FE]  AssertionFailedError  	26	6	replace
69	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];    [BUGGY]  if(!stopAtNonOption)  {  [BUGGY]    {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  tokens.add(   "-   ");  }  else  if  (arg.startsWith(   "-   "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	add	if(!stopAtNonOption)  {	  if(!eatTheRest)    {    	compilable	  [FE]  AssertionFailedError  	26	13	replace
70	[BUG]  [BUGGY]  if(!stopAtNonOption)  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];    [BUGGY]  if(!stopAtNonOption)  {  [BUGGY]    {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  tokens.add(   "-   ");  }  else  if  (arg.startsWith(   "-   "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	if(!stopAtNonOption)  {	  if(!eatTheRest)    {    	compilable	  [FE]  AssertionFailedError  	26	13	replace
71	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];    [BUGGY]  if(stopAtNonOption  ||!arg.startsWith( "- "))  {  [BUGGY]    {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  tokens.add(   "-   ");  }  else  if  (arg.startsWith(   "-   "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	add	if(stopAtNonOption  ||!arg.startsWith( "- "))  {	  if(!eatTheRest)    {    	compilable	  [FE]  AssertionFailedError  	26	9	replace
72	[BUG]  [BUGGY]  if(stopAtNonOption  ||!arg.startsWith( "- "))  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];    [BUGGY]  if(stopAtNonOption  ||!arg.startsWith( "- "))  {  [BUGGY]    {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  tokens.add(   "-   ");  }  else  if  (arg.startsWith(   "-   "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	if(stopAtNonOption  ||!arg.startsWith( "- "))  {	  if(!eatTheRest)    {    	compilable	  [FE]  AssertionFailedError  	26	9	replace
73	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];    [BUGGY]  if(stopAtNonOption  ||!arg.equals( "- "))  {  [BUGGY]    {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  tokens.add(   "-   ");  }  else  if  (arg.startsWith(   "-   "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	add	if(stopAtNonOption  ||!arg.equals( "- "))  {	  if(!eatTheRest)    {    	compilable	  [FE]  AssertionFailedError  	26	14	replace
74	[BUG]  [BUGGY]  if(stopAtNonOption  ||!arg.equals( "- "))  {  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];    [BUGGY]  if(stopAtNonOption  ||!arg.equals( "- "))  {  [BUGGY]    {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  tokens.add(   "-   ");  }  else  if  (arg.startsWith(   "-   "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	if(stopAtNonOption  ||!arg.equals( "- "))  {	  if(!eatTheRest)    {    	compilable	  [FE]  AssertionFailedError  	26	14	replace
75	[BUG]  [BUGGY]  if(   "--   ".equals(arg)||!stopAtNonOption)  {  if(   "--   ".equals(arg)||!stopAtNonOption)  {  [CE]  reached  end  of  file  while  parsing  [FE]    AssertionFailedError    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];    [BUGGY]  if(   "--   ".equals(arg)||!stopAtNonOption)  {  if(   "--   ".equals(arg)||!stopAtNonOption)  {  [BUGGY]    {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  tokens.add(   "-   ");  }  else  if  (arg.startsWith(   "-   "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	if(   "--   ".equals(arg)||!stopAtNonOption)    {    if(   "--   ".equals(arg)||!stopAtNonOption)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	3	None	add
76	[BUG]  [BUGGY]  if(   "--   ".equals(arg)||!stopAtNonOption)  {  if( ".--   ".equals(arg)||!stopAtNonOption)  {  [CE]  reached  end  of  file  while  parsing  [FE]      AssertionFailedError    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];    [BUGGY]  if(   "--   ".equals(arg)||!stopAtNonOption)  {  if( ".--   ".equals(arg)||!stopAtNonOption)  {  [BUGGY]    {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  tokens.add(   "-   ");  }  else  if  (arg.startsWith(   "-   "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	if(   "--   ".equals(arg)||!stopAtNonOption)    {    if( ".--   ".equals(arg)||!stopAtNonOption)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	3	None	add
77	[BUG]  [BUGGY]  if(   "--   ".equals(arg)||!stopAtNonOption)  {  if('--   ".equals(arg)||!stopAtNonOption)  {  [CE]  unclosed  character  literal  [FE]        AssertionFailedError    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];    [BUGGY]  if(   "--   ".equals(arg)||!stopAtNonOption)  {  if('--   ".equals(arg)||!stopAtNonOption)  {  [BUGGY]    {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  tokens.add(   "-   ");  }  else  if  (arg.startsWith(   "-   "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	if(   "--   ".equals(arg)||!stopAtNonOption)    {    if('--   ".equals(arg)||!stopAtNonOption)  {	  	non-compiled	[CE]  unclosed  character  literal	3	None	add
78	[BUG]  [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(arg,  tokens.length()  +  1);  [CE]  [FE]          ComparisonFailure    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];    [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(arg,  tokens.length()  +  1);  [BUGGY]    if  (   "--   ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  tokens.add(   "-   ");  }  else  if  (arg.startsWith(   "-   "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	TokenBuffer  tokens  =  new  TokenBuffer(arg,  tokens.length()  +  1);	      TokenBuffer    tokens    =    new    TokenBuffer(arg.length()    +    1);    	non-compiled	[CE]  	30	None	replace
79	[BUG]  [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(arg.length(),  i  +  1);  [CE]  [FE]            ComparisonFailure    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];    [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(arg.length(),  i  +  1);  [BUGGY]    if  (   "--   ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  tokens.add(   "-   ");  }  else  if  (arg.startsWith(   "-   "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	TokenBuffer  tokens  =  new  TokenBuffer(arg.length(),  i  +  1);	      TokenBuffer    tokens    =    new    TokenBuffer(arg.length()    +    1);    	non-compiled	[CE]  	30	None	replace
80	[BUG]  [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(arg,  opt);  [CE]  [FE]        ComparisonFailure    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];    [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(arg,  opt);  [BUGGY]    if  (   "--   ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  tokens.add(   "-   ");  }  else  if  (arg.startsWith(   "-   "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	TokenBuffer  tokens  =  new  TokenBuffer(arg,  opt);	      TokenBuffer    tokens    =    new    TokenBuffer(arg);    	non-compiled	[CE]  	29	None	replace
81	[BUG]  [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(arg.length);  [CE]  [FE]          ComparisonFailure    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];    [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(arg.length);  [BUGGY]    if  (   "--   ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  tokens.add(   "-   ");  }  else  if  (arg.startsWith(   "-   "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	TokenBuffer  tokens  =  new  TokenBuffer(arg.length);	      TokenBuffer    tokens    =    new    TokenBuffer(arg);    	non-compiled	[CE]  	29	None	replace
82	[BUG]  [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(opt);  [CE]  [FE]            ComparisonFailure    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];    [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(opt);  [BUGGY]    if  (   "--   ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  tokens.add(   "-   ");  }  else  if  (arg.startsWith(   "-   "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	TokenBuffer  tokens  =  new  TokenBuffer(opt);	      TokenBuffer    tokens    =    new    TokenBuffer(arg);    	non-compiled	[CE]  	29	None	replace
83	[BUG]  [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(tokens);  [CE]  [FE]              ComparisonFailure    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];    [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(tokens);  [BUGGY]    if  (   "--   ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  tokens.add(   "-   ");  }  else  if  (arg.startsWith(   "-   "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	TokenBuffer  tokens  =  new  TokenBuffer(tokens);	      TokenBuffer    tokens    =    new    TokenBuffer(arg);    	non-compiled	[CE]  	29	None	replace
84	[BUG]  [BUGGY]  String[]  arg  =  options.get(i);  [CE]  [FE]                ComparisonFailure    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];    [BUGGY]  String[]  arg  =  options.get(i);  [BUGGY]    if  (   "--   ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  tokens.add(   "-   ");  }  else  if  (arg.startsWith(   "-   "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	String[]  arg  =  options.get(i);	      String[]    arg    =    options.getOptions();    	non-compiled	[CE]  	13	None	replace
85	[BUG]  [BUGGY]  String[]  arg  =  options.getOptions(i);  [CE]  [FE]                  ComparisonFailure    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];    [BUGGY]  String[]  arg  =  options.getOptions(i);  [BUGGY]    if  (   "--   ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  tokens.add(   "-   ");  }  else  if  (arg.startsWith(   "-   "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	String[]  arg  =  options.getOptions(i);	      String[]    arg    =    options.getOptions();    	non-compiled	[CE]  	13	None	replace
86	[BUG]  [BUGGY]  String[]  arguments  =  options.getOptions();  [CE]  [FE]                    ComparisonFailure    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];    [BUGGY]  String[]  arguments  =  options.getOptions();  [BUGGY]    if  (   "--   ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  tokens.add(   "-   ");  }  else  if  (arg.startsWith(   "-   "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	String[]  arguments  =  options.getOptions();	      String[]    arg    =    options.getOptions();    	non-compiled	[CE]  	13	None	replace
87	[BUG]  [BUGGY]  String[]  arg  =  options.get(opt,  stopAtNonOption);  [CE]  [FE]              ComparisonFailure    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];    [BUGGY]  String[]  arg  =  options.get(opt,  stopAtNonOption);  [BUGGY]    if  (   "--   ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  tokens.add(   "-   ");  }  else  if  (arg.startsWith(   "-   "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	String[]  arg  =  options.get(opt,  stopAtNonOption);	      String[]    arg    =    options.get(opt);    	non-compiled	[CE]  	12	None	replace
88	[BUG]  [BUGGY]  String[]  options  =  options.get(i);  [CE]  [FE]                ComparisonFailure    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];    [BUGGY]  String[]  options  =  options.get(i);  [BUGGY]    if  (   "--   ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  tokens.add(   "-   ");  }  else  if  (arg.startsWith(   "-   "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	String[]  options  =  options.get(i);	      String[]    arg    =    options.get(opt);    	non-compiled	[CE]  	12	None	replace
89	[BUG]  [BUGGY]  String[]  arg  =  options.get(i,  opt);  [CE]  [FE]                  ComparisonFailure    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];    [BUGGY]  String[]  arg  =  options.get(i,  opt);  [BUGGY]    if  (   "--   ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  tokens.add(   "-   ");  }  else  if  (arg.startsWith(   "-   "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	String[]  arg  =  options.get(i,  opt);	      String[]    arg    =    options.get(opt);    	non-compiled	[CE]  	12	None	replace
90	[BUG]  [BUGGY]  if(   "--   ".equals(arg)||!eatTheRest)  {  if(   "--   ".equals(arg)||!eatTheRest)  {  [CE]  reached  end  of  file  while  parsing  [FE]    AssertionFailedError    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];    [BUGGY]  if(   "--   ".equals(arg)||!eatTheRest)  {  if(   "--   ".equals(arg)||!eatTheRest)  {  [BUGGY]    {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  tokens.add(   "-   ");  }  else  if  (arg.startsWith(   "-   "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	if(   "--   ".equals(arg)||!eatTheRest)    {    if(   "--   ".equals(arg)||!eatTheRest)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	17	None	add
91	[BUG]  [BUGGY]  if(   "--   ".equals(arg)||!eatTheRest)  {  if('--   ".equals(arg)||!eatTheRest)  {  [CE]  unclosed  character  literal  [FE]      AssertionFailedError    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];    [BUGGY]  if(   "--   ".equals(arg)||!eatTheRest)  {  if('--   ".equals(arg)||!eatTheRest)  {  [BUGGY]    {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  tokens.add(   "-   ");  }  else  if  (arg.startsWith(   "-   "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	if(   "--   ".equals(arg)||!eatTheRest)    {    if('--   ".equals(arg)||!eatTheRest)  {	  	non-compiled	[CE]  unclosed  character  literal	17	None	add
92	[BUG]  [BUGGY]  if(   "--   ".equals(arg)||!eatTheRest)  {  if( ".--   ".equals(arg)||!eatTheRest)  {  [CE]  reached  end  of  file  while  parsing  [FE]        AssertionFailedError    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];    [BUGGY]  if(   "--   ".equals(arg)||!eatTheRest)  {  if( ".--   ".equals(arg)||!eatTheRest)  {  [BUGGY]    {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  tokens.add(   "-   ");  }  else  if  (arg.startsWith(   "-   "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	if(   "--   ".equals(arg)||!eatTheRest)    {    if( ".--   ".equals(arg)||!eatTheRest)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	17	None	add
93	[BUG]  [BUGGY]  if(   "--   ".equals(arg)||!eatTheRest)  {  if(   "--   ".equals(arg)||!eattheRest)  {  [CE]  reached  end  of  file  while  parsing  [FE]          AssertionFailedError    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];    [BUGGY]  if(   "--   ".equals(arg)||!eatTheRest)  {  if(   "--   ".equals(arg)||!eattheRest)  {  [BUGGY]    {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  tokens.add(   "-   ");  }  else  if  (arg.startsWith(   "-   "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	if(   "--   ".equals(arg)||!eatTheRest)    {    if(   "--   ".equals(arg)||!eattheRest)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	17	None	add
94	[BUG]  [BUGGY]  String[]  tokens  =  new  String[arg.size()  ];  [CE]  [FE]        ComparisonFailure    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];    [BUGGY]  String[]  tokens  =  new  String[arg.size()  ];  [BUGGY]    if  (   "--   ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  tokens.add(   "-   ");  }  else  if  (arg.startsWith(   "-   "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	String[]  tokens  =  new  String[arg.size()  ];	      String[]    tokens    =    new    String[tokens.size()    ];    	non-compiled	[CE]  	14	None	replace
95	[BUG]  [BUGGY]  String[]  tokens  =  new  String[tokens.size()  +  1];  [CE]  [FE]          ComparisonFailure    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];    [BUGGY]  String[]  tokens  =  new  String[tokens.size()  +  1];  [BUGGY]    if  (   "--   ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  tokens.add(   "-   ");  }  else  if  (arg.startsWith(   "-   "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	String[]  tokens  =  new  String[tokens.size()  +  1];	      String[]    tokens    =    new    String[tokens.size()    ];    	non-compiled	[CE]  	14	None	replace
96	[BUG]  [BUGGY]  String[]  tokens  =  new  String[arguments.size()  ];  [CE]  [FE]            ComparisonFailure    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];    [BUGGY]  String[]  tokens  =  new  String[arguments.size()  ];  [BUGGY]    if  (   "--   ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  tokens.add(   "-   ");  }  else  if  (arg.startsWith(   "-   "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	String[]  tokens  =  new  String[arguments.size()  ];	      String[]    tokens    =    new    String[tokens.size()    ];    	non-compiled	[CE]  	14	None	replace
97	[BUG]  [BUGGY]  if(!eatTheRest)  {  if(!eatTheRest)  {  [CE]  reached  end  of  file  while  parsing  [FE]    AssertionFailedError    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];    [BUGGY]  if(!eatTheRest)  {  if(!eatTheRest)  {  [BUGGY]    {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  tokens.add(   "-   ");  }  else  if  (arg.startsWith(   "-   "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	if(!eatTheRest)    {    if(!eatTheRest)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	25	None	add
98	[BUG]  [BUGGY]  if(!eatTheRest)  {  if(!eattheRest)  {  [CE]  reached  end  of  file  while  parsing  [FE]      AssertionFailedError    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];    [BUGGY]  if(!eatTheRest)  {  if(!eattheRest)  {  [BUGGY]    {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  tokens.add(   "-   ");  }  else  if  (arg.startsWith(   "-   "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	if(!eatTheRest)    {    if(!eattheRest)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	25	None	add
99	[BUG]  [BUGGY]  if(!eatTheRest)  {  If(!eatTheRest)  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];    [BUGGY]  if(!eatTheRest)  {  If(!eatTheRest)  {  [BUGGY]    {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  tokens.add(   "-   ");  }  else  if  (arg.startsWith(   "-   "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	if(!eatTheRest)    {    If(!eatTheRest)  {	  	non-compiled	[CE]  ';'  expected	25	None	add
100	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];    [BUGGY]  if(!stopAtNonOption  &&   "-- ".equals(arg)||  eatTheRest)  {  [BUGGY]    {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  tokens.add(   "-   ");  }  else  if  (arg.startsWith(   "-   "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	add	if(!stopAtNonOption  &&   "-- ".equals(arg)||  eatTheRest)  {	  if(   "--   ".equals(arg)||    eatTheRest)    {    	compilable	  [FE]  ComparisonFailure  	20	3	replace
101	[BUG]  [BUGGY]  if(!stopAtNonOption  &&   "-- ".equals(arg)||  eatTheRest)  {  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];    [BUGGY]  if(!stopAtNonOption  &&   "-- ".equals(arg)||  eatTheRest)  {  [BUGGY]    {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  tokens.add(   "-   ");  }  else  if  (arg.startsWith(   "-   "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	if(!stopAtNonOption  &&   "-- ".equals(arg)||  eatTheRest)  {	  if(   "--   ".equals(arg)||    eatTheRest)    {    	compilable	  [FE]  ComparisonFailure  	20	3	replace
102	[BUG]  [BUGGY]  if( "--   ".equals(arg)||!eatTheRest.startsWith( "--   "))  {  [CE]  boolean  cannot  be  dereferenced  [FE]            ComparisonFailure    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];    [BUGGY]  if( "--   ".equals(arg)||!eatTheRest.startsWith( "--   "))  {  [BUGGY]    {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  tokens.add(   "-   ");  }  else  if  (arg.startsWith(   "-   "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	if( "--   ".equals(arg)||!eatTheRest.startsWith( "--   "))  {	  if(   "--   ".equals(arg)||!opt.startsWith(   "--   "))    {    	non-compiled	[CE]  boolean  cannot  be  dereferenced	5	None	replace
103	[BUG]  [BUGGY]  if(   "--   ".equals(arg)||  eatTheRest)  {  if(   "--   ".equals(arg)||  eattheRest)  {  [CE]  reached  end  of  file  while  parsing  [FE]    ComparisonFailure    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];    [BUGGY]  if(   "--   ".equals(arg)||  eatTheRest)  {  if(   "--   ".equals(arg)||  eattheRest)  {  [BUGGY]    {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  tokens.add(   "-   ");  }  else  if  (arg.startsWith(   "-   "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	if(   "--   ".equals(arg)||    eatTheRest)    {    if(   "--   ".equals(arg)||  eattheRest)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	19	None	add
104	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];    [BUGGY]  if(!stopAtNonOption  &&!arg.equals( "-- "))  {  [BUGGY]    {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  tokens.add(   "-   ");  }  else  if  (arg.startsWith(   "-   "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	add	if(!stopAtNonOption  &&!arg.equals( "-- "))  {	  if(!   "--   ".equals(arg)||    eatTheRest)    {    	compilable	  [FE]  AssertionFailedError  	22	13	replace
105	[BUG]  [BUGGY]  if(!stopAtNonOption  &&!arg.equals( "-- "))  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];    [BUGGY]  if(!stopAtNonOption  &&!arg.equals( "-- "))  {  [BUGGY]    {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  tokens.add(   "-   ");  }  else  if  (arg.startsWith(   "-   "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	if(!stopAtNonOption  &&!arg.equals( "-- "))  {	  if(!   "--   ".equals(arg)||    eatTheRest)    {    	compilable	  [FE]  AssertionFailedError  	22	13	replace
106	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];    [BUGGY]  if(!stopAtNonOption  &&!arg.equals( "-- ")||  eatTheRest)  {  [BUGGY]    {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  tokens.add(   "-   ");  }  else  if  (arg.startsWith(   "-   "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	add	if(!stopAtNonOption  &&!arg.equals( "-- ")||  eatTheRest)  {	  if(!   "--   ".equals(arg)||    eatTheRest)    {    	compilable	  [FE]  AssertionFailedError  	22	13	replace
107	[BUG]  [BUGGY]  if(!stopAtNonOption  &&!arg.equals( "-- ")||  eatTheRest)  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];    [BUGGY]  if(!stopAtNonOption  &&!arg.equals( "-- ")||  eatTheRest)  {  [BUGGY]    {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  tokens.add(   "-   ");  }  else  if  (arg.startsWith(   "-   "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	if(!stopAtNonOption  &&!arg.equals( "-- ")||  eatTheRest)  {	  if(!   "--   ".equals(arg)||    eatTheRest)    {    	compilable	  [FE]  AssertionFailedError  	22	13	replace
108	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];    [BUGGY]  if(!stopAtNonOption  &&!   "--   ".equals(arg)||  eatTheRest)  {  [BUGGY]    {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  tokens.add(   "-   ");  }  else  if  (arg.startsWith(   "-   "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	add	if(!stopAtNonOption  &&!   "--   ".equals(arg)||  eatTheRest)  {	  if(!   "--   ".equals(arg)||    eatTheRest)    {    	compilable	  [FE]  AssertionFailedError  	22	13	replace
109	[BUG]  [BUGGY]  if(!stopAtNonOption  &&!   "--   ".equals(arg)||  eatTheRest)  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];    [BUGGY]  if(!stopAtNonOption  &&!   "--   ".equals(arg)||  eatTheRest)  {  [BUGGY]    {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  tokens.add(   "-   ");  }  else  if  (arg.startsWith(   "-   "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	if(!stopAtNonOption  &&!   "--   ".equals(arg)||  eatTheRest)  {	  if(!   "--   ".equals(arg)||    eatTheRest)    {    	compilable	  [FE]  AssertionFailedError  	22	13	replace
110	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];    [BUGGY]  if(!stopAtNonOption  &&!arg.equals( "- "))  {  [BUGGY]    {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  tokens.add(   "-   ");  }  else  if  (arg.startsWith(   "-   "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	add	if(!stopAtNonOption  &&!arg.equals( "- "))  {	  if(!   "--   ".equals(arg)||    eatTheRest)    {    	compilable	  [FE]  AssertionFailedError  	22	13	replace
111	[BUG]  [BUGGY]  if(!stopAtNonOption  &&!arg.equals( "- "))  {  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];    [BUGGY]  if(!stopAtNonOption  &&!arg.equals( "- "))  {  [BUGGY]    {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  tokens.add(   "-   ");  }  else  if  (arg.startsWith(   "-   "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	if(!stopAtNonOption  &&!arg.equals( "- "))  {	  if(!   "--   ".equals(arg)||    eatTheRest)    {    	compilable	  [FE]  AssertionFailedError  	22	13	replace
112	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];    [BUGGY]  if(arg.startsWith( "- ")||!eatTheRest)  {  [BUGGY]    {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  tokens.add(   "-   ");  }  else  if  (arg.startsWith(   "-   "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	add	if(arg.startsWith( "- ")||!eatTheRest)  {	  if(arg.startsWith(   "-   "))    {    	compilable	  [FE]  AssertionFailedError  	2	14	replace
113	[BUG]  [BUGGY]  if(arg.startsWith( "- ")||!eatTheRest)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];    [BUGGY]  if(arg.startsWith( "- ")||!eatTheRest)  {  [BUGGY]    {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  tokens.add(   "-   ");  }  else  if  (arg.startsWith(   "-   "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	if(arg.startsWith( "- ")||!eatTheRest)  {	  if(arg.startsWith(   "-   "))    {    	compilable	  [FE]  AssertionFailedError  	2	14	replace
114	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];    [BUGGY]  if(!eatTheRest  &&  arg.startsWith( "- "))  {  [BUGGY]    {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  tokens.add(   "-   ");  }  else  if  (arg.startsWith(   "-   "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	add	if(!eatTheRest  &&  arg.startsWith( "- "))  {	  if(arg.startsWith(   "-   "))    {    	compilable	  [FE]  AssertionFailedError  	2	14	replace
115	[BUG]  [BUGGY]  if(!eatTheRest  &&  arg.startsWith( "- "))  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];    [BUGGY]  if(!eatTheRest  &&  arg.startsWith( "- "))  {  [BUGGY]    {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  tokens.add(   "-   ");  }  else  if  (arg.startsWith(   "-   "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	if(!eatTheRest  &&  arg.startsWith( "- "))  {	  if(arg.startsWith(   "-   "))    {    	compilable	  [FE]  AssertionFailedError  	2	14	replace
116	[BUG]  [BUGGY]  tokens.clear();  [CE]  [FE]              ComparisonFailure    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];    [BUGGY]  tokens.clear();  [BUGGY]    {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  tokens.add(   "-   ");  }  else  if  (arg.startsWith(   "-   "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	tokens.clear();	      	non-compiled	[CE]  	6	None	replace
117	[BUG]  [BUGGY]  if(   "--   ".equals(arg)||!eatTheRest)  {  if(! "--   ".equals(arg)||!eatTheRest)  {  [CE]  reached  end  of  file  while  parsing  [FE]    AssertionFailedError    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];    [BUGGY]  if(   "--   ".equals(arg)||!eatTheRest)  {  if(! "--   ".equals(arg)||!eatTheRest)  {  [BUGGY]    {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  tokens.add(   "-   ");  }  else  if  (arg.startsWith(   "-   "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	if(   "--   ".equals(arg)||!eatTheRest)    {    if(! "--   ".equals(arg)||!eatTheRest)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	17	None	add
118	[BUG]  [BUGGY]  String[]  tokens  =  new  String[tokens.size()  -  1];  [CE]  [FE]        ComparisonFailure    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];    [BUGGY]  String[]  tokens  =  new  String[tokens.size()  -  1];  [BUGGY]    if  (   "--   ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  tokens.add(   "-   ");  }  else  if  (arg.startsWith(   "-   "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	String[]  tokens  =  new  String[tokens.size()  -  1];	      String[]    tokens    =    new    String[tokens.size()    ];    	non-compiled	[CE]  	14	None	replace
119	[BUG]  [BUGGY]  if(!   "--   ".equals(arg)||  eatTheRest)  {  If(!   "--   ".equals(arg)||  eatTheRest)  {  [CE]  [FE]    AssertionFailedError    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];    [BUGGY]  if(!   "--   ".equals(arg)||  eatTheRest)  {  If(!   "--   ".equals(arg)||  eatTheRest)  {  [BUGGY]    {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  tokens.add(   "-   ");  }  else  if  (arg.startsWith(   "-   "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	if(!   "--   ".equals(arg)||    eatTheRest)    {    If(!   "--   ".equals(arg)||  eatTheRest)  {	  	non-compiled	[CE]  	21	None	add
120	[BUG]  [BUGGY]  tokens.add(arg  +  1);  [CE]  [FE]    MissingArgumentException    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];    [BUGGY]  tokens.add(arg  +  1);  [BUGGY]    if  (   "--   ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  tokens.add(   "-   ");  }  else  if  (arg.startsWith(   "-   "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	tokens.add(arg  +  1);	      tokens.add(arg);    	non-compiled	[CE]  	10	None	replace
121	[BUG]  [BUGGY]  tokens.add(arg,  eatTheRest);  [CE]  [FE]      MissingArgumentException    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];    [BUGGY]  tokens.add(arg,  eatTheRest);  [BUGGY]    if  (   "--   ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  tokens.add(   "-   ");  }  else  if  (arg.startsWith(   "-   "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	tokens.add(arg,  eatTheRest);	      tokens.add(arg);    	non-compiled	[CE]  	10	None	replace
122	[BUG]  [BUGGY]  tokens.add( "-- ");  [CE]  [FE]    AssertionFailedError    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];    [BUGGY]  tokens.add( "-- ");  [BUGGY]    if  (   "--   ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  tokens.add(   "-   ");  }  else  if  (arg.startsWith(   "-   "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	tokens.add( "-- ");	      tokens.add(   "-   ");    	non-compiled	[CE]  	8	None	replace
123	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];    [BUGGY]  if(stopAtNonOption  ||!arg.equals(stopAtNonOption))  {  [BUGGY]    {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  tokens.add(   "-   ");  }  else  if  (arg.startsWith(   "-   "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	add	if(stopAtNonOption  ||!arg.equals(stopAtNonOption))  {	  if(!eatTheRest)    {    	compilable	  [FE]  AssertionFailedError  	26	14	replace
124	[BUG]  [BUGGY]  if(stopAtNonOption  ||!arg.equals(stopAtNonOption))  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];    [BUGGY]  if(stopAtNonOption  ||!arg.equals(stopAtNonOption))  {  [BUGGY]    {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  tokens.add(   "-   ");  }  else  if  (arg.startsWith(   "-   "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	if(stopAtNonOption  ||!arg.equals(stopAtNonOption))  {	  if(!eatTheRest)    {    	compilable	  [FE]  AssertionFailedError  	26	14	replace
125	[BUG]  [BUGGY]  if(!eatTheRest.equals(arg)||!stopAtNonOption)  {  [CE]  boolean  cannot  be  dereferenced  [FE]    AssertionFailedError    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];    [BUGGY]  if(!eatTheRest.equals(arg)||!stopAtNonOption)  {  [BUGGY]    {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  tokens.add(   "-   ");  }  else  if  (arg.startsWith(   "-   "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	if(!eatTheRest.equals(arg)||!stopAtNonOption)  {	  if(!   "--   ".equals(arg)||!eatTheRest)    {    	non-compiled	[CE]  boolean  cannot  be  dereferenced	24	None	replace
126	[BUG]  [BUGGY]  String[]  options  =  options.getOptions();  [CE]  [FE]                ComparisonFailure    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];    [BUGGY]  String[]  options  =  options.getOptions();  [BUGGY]    if  (   "--   ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  tokens.add(   "-   ");  }  else  if  (arg.startsWith(   "-   "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	String[]  options  =  options.getOptions();	      String[]    arg    =    options.getOptions();    	non-compiled	[CE]  	13	None	replace
127	[BUG]  [BUGGY]      tokens.add(arg);  TokenBuffer  tokens  =  new  TokenBuffer(tokens.size());  [CE]  cannot  find  symbol  [FE]    MissingArgumentException    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];    [BUGGY]      tokens.add(arg);  TokenBuffer  tokens  =  new  TokenBuffer(tokens.size());  [BUGGY]    if  (   "--   ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  tokens.add(   "-   ");  }  else  if  (arg.startsWith(   "-   "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	        tokens.add(arg);    TokenBuffer  tokens  =  new  TokenBuffer(tokens.size());	  	non-compiled	[CE]  cannot  find  symbol	9	None	add
128	[BUG]  [BUGGY]      tokens.add(arg);  TokenBuffer  tokens  =  new  TokenBuffer(arg);  [CE]  cannot  find  symbol  [FE]      MissingArgumentException    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];    [BUGGY]      tokens.add(arg);  TokenBuffer  tokens  =  new  TokenBuffer(arg);  [BUGGY]    if  (   "--   ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  tokens.add(   "-   ");  }  else  if  (arg.startsWith(   "-   "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	        tokens.add(arg);    TokenBuffer  tokens  =  new  TokenBuffer(arg);	  	non-compiled	[CE]  cannot  find  symbol	9	None	add
129	[BUG]  [BUGGY]      tokens.add(arg);  TokenBuffer  tokens  =  new  TokenBuffer(arg.length());  [CE]  cannot  find  symbol  [FE]        MissingArgumentException    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];    [BUGGY]      tokens.add(arg);  TokenBuffer  tokens  =  new  TokenBuffer(arg.length());  [BUGGY]    if  (   "--   ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  tokens.add(   "-   ");  }  else  if  (arg.startsWith(   "-   "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	        tokens.add(arg);    TokenBuffer  tokens  =  new  TokenBuffer(arg.length());	  	non-compiled	[CE]  cannot  find  symbol	9	None	add
130	[BUG]  [BUGGY]      tokens.add(arg);  TokenBuffer  tokens  =  new  TokenBuffer(tokens.length);  [CE]  cannot  find  symbol  [FE]          MissingArgumentException    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];    [BUGGY]      tokens.add(arg);  TokenBuffer  tokens  =  new  TokenBuffer(tokens.length);  [BUGGY]    if  (   "--   ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  tokens.add(   "-   ");  }  else  if  (arg.startsWith(   "-   "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	        tokens.add(arg);    TokenBuffer  tokens  =  new  TokenBuffer(tokens.length);	  	non-compiled	[CE]  cannot  find  symbol	9	None	add
131	[BUG]  [BUGGY]  String[]  arg  =  options.toArray(arguments[i],  stopAtNonOption);  [CE]  [FE]            ComparisonFailure    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];    [BUGGY]  String[]  arg  =  options.toArray(arguments[i],  stopAtNonOption);  [BUGGY]    if  (   "--   ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  tokens.add(   "-   ");  }  else  if  (arg.startsWith(   "-   "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	String[]  arg  =  options.toArray(arguments[i],  stopAtNonOption);	      String[]    arg    =    options.toArray(arguments[i]);    	non-compiled	[CE]  	11	None	replace
132	[BUG]  [BUGGY]  String[]  arg  =  options.toArray(arguments[i]),  stopAtNonOption);  [CE]  [FE]              ComparisonFailure    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];    [BUGGY]  String[]  arg  =  options.toArray(arguments[i]),  stopAtNonOption);  [BUGGY]    if  (   "--   ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  tokens.add(   "-   ");  }  else  if  (arg.startsWith(   "-   "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	String[]  arg  =  options.toArray(arguments[i]),  stopAtNonOption);	      String[]    arg    =    options.toArray(arguments[i]);    	non-compiled	[CE]  	11	None	replace
133	[BUG]  [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(arg,  i);  [CE]  [FE]        ComparisonFailure    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];    [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(arg,  i);  [BUGGY]    if  (   "--   ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  tokens.add(   "-   ");  }  else  if  (arg.startsWith(   "-   "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	TokenBuffer  tokens  =  new  TokenBuffer(arg,  i);	      TokenBuffer    tokens    =    new    TokenBuffer(arg);    	non-compiled	[CE]  	29	None	replace
134	[BUG]  [BUGGY]  [FE]  ArrayStoreException  [FE]    AssertionFailedError    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];    [BUGGY]      tokens.add(   "-   ");  tokens.add('-');  [BUGGY]    if  (   "--   ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  tokens.add(   "-   ");  }  else  if  (arg.startsWith(   "-   "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	add	        tokens.add(   "-   ");    tokens.add('-');	  	compilable	  [FE]  ArrayStoreException  	7	14	add
135	[BUG]  [BUGGY]      tokens.add(   "-   ");  tokens.add('-');  [FE]  ArrayStoreException  [FE]    AssertionFailedError    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];    [BUGGY]      tokens.add(   "-   ");  tokens.add('-');  [BUGGY]    if  (   "--   ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  tokens.add(   "-   ");  }  else  if  (arg.startsWith(   "-   "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	        tokens.add(   "-   ");    tokens.add('-');	  	compilable	  [FE]  ArrayStoreException  	7	14	add
136	[BUG]  [BUGGY]  [FE]  UnrecognizedOptionException  [FE]      AssertionFailedError    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];    [BUGGY]      tokens.add(   "-   ");  tokens.add(  arg);  [BUGGY]    if  (   "--   ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  tokens.add(   "-   ");  }  else  if  (arg.startsWith(   "-   "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	add	        tokens.add(   "-   ");    tokens.add(  arg);	  	compilable	  [FE]  UnrecognizedOptionException  	7	13	add
137	[BUG]  [BUGGY]      tokens.add(   "-   ");  tokens.add(  arg);  [FE]  UnrecognizedOptionException  [FE]      AssertionFailedError    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];    [BUGGY]      tokens.add(   "-   ");  tokens.add(  arg);  [BUGGY]    if  (   "--   ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  tokens.add(   "-   ");  }  else  if  (arg.startsWith(   "-   "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	        tokens.add(   "-   ");    tokens.add(  arg);	  	compilable	  [FE]  UnrecognizedOptionException  	7	13	add
138	[BUG]  [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(arg.length(),  arg.length());  [CE]  [FE]            ComparisonFailure    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];    [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(arg.length(),  arg.length());  [BUGGY]    if  (   "--   ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  tokens.add(   "-   ");  }  else  if  (arg.startsWith(   "-   "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	TokenBuffer  tokens  =  new  TokenBuffer(arg.length(),  arg.length());	      TokenBuffer    tokens    =    new    TokenBuffer(arg.length());    	non-compiled	[CE]  	16	None	replace
139	[BUG]  [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(arg.length(),  opt);  [CE]  [FE]              ComparisonFailure    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];    [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(arg.length(),  opt);  [BUGGY]    if  (   "--   ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  tokens.add(   "-   ");  }  else  if  (arg.startsWith(   "-   "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	TokenBuffer  tokens  =  new  TokenBuffer(arg.length(),  opt);	      TokenBuffer    tokens    =    new    TokenBuffer(arg.length());    	non-compiled	[CE]  	16	None	replace
140	[BUG]  [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(arg,  opt.length());  [CE]  [FE]                ComparisonFailure    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];    [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(arg,  opt.length());  [BUGGY]    if  (   "--   ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  tokens.add(   "-   ");  }  else  if  (arg.startsWith(   "-   "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	TokenBuffer  tokens  =  new  TokenBuffer(arg,  opt.length());	      TokenBuffer    tokens    =    new    TokenBuffer(arg.length());    	non-compiled	[CE]  	16	None	replace
141	[BUG]  [BUGGY]  tokens.add( "- ".equals(arg));  [CE]  [FE]    AssertionFailedError    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];    [BUGGY]  tokens.add( "- ".equals(arg));  [BUGGY]    if  (   "--   ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  tokens.add(   "-   ");  }  else  if  (arg.startsWith(   "-   "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	tokens.add( "- ".equals(arg));	      tokens.add(   "-   ");    	non-compiled	[CE]  	8	None	replace
142	[BUG]  [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(arg.trim());  [CE]  [FE]        ComparisonFailure    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];    [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(arg.trim());  [BUGGY]    if  (   "--   ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  tokens.add(   "-   ");  }  else  if  (arg.startsWith(   "-   "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	TokenBuffer  tokens  =  new  TokenBuffer(arg.trim());	      TokenBuffer    tokens    =    new    TokenBuffer(arg);    	non-compiled	[CE]  	29	None	replace
143	[BUG]  [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(arg,  arg.length());  [CE]  [FE]          ComparisonFailure    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];    [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(arg,  arg.length());  [BUGGY]    if  (   "--   ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  tokens.add(   "-   ");  }  else  if  (arg.startsWith(   "-   "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	TokenBuffer  tokens  =  new  TokenBuffer(arg,  arg.length());	      TokenBuffer    tokens    =    new    TokenBuffer(arg.length()    +    1);    	non-compiled	[CE]  	30	None	replace
144	[BUG]  [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(arg,  options.length());  [CE]  [FE]            ComparisonFailure    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];    [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(arg,  options.length());  [BUGGY]    if  (   "--   ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  tokens.add(   "-   ");  }  else  if  (arg.startsWith(   "-   "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	TokenBuffer  tokens  =  new  TokenBuffer(arg,  options.length());	      TokenBuffer    tokens    =    new    TokenBuffer(arg.length()    +    1);    	non-compiled	[CE]  	30	None	replace
145	[BUG]  [BUGGY]  if(arg.equals( "-- ")||!eatTheRest.startsWith( "--   "))  {  [CE]  boolean  cannot  be  dereferenced  [FE]            ComparisonFailure    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];    [BUGGY]  if(arg.equals( "-- ")||!eatTheRest.startsWith( "--   "))  {  [BUGGY]    {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  tokens.add(   "-   ");  }  else  if  (arg.startsWith(   "-   "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	if(arg.equals( "-- ")||!eatTheRest.startsWith( "--   "))  {	  if(   "--   ".equals(arg)||!opt.startsWith(   "--   "))    {    	non-compiled	[CE]  boolean  cannot  be  dereferenced	5	None	replace
146	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    AssertionFailedError    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];    [BUGGY]  if(arg.equals( "-- "))  {  [BUGGY]    {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  tokens.add(   "-   ");  }  else  if  (arg.startsWith(   "-   "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	add	if(arg.equals( "-- "))  {	  if(   "--   ".equals(arg)||    arg.startsWith(   "--   "))    {    	compilable	  [FE]  ComparisonFailure  	28	3	replace
147	[BUG]  [BUGGY]  if(arg.equals( "-- "))  {  [FE]  ComparisonFailure  [FE]    AssertionFailedError    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];    [BUGGY]  if(arg.equals( "-- "))  {  [BUGGY]    {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  tokens.add(   "-   ");  }  else  if  (arg.startsWith(   "-   "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	if(arg.equals( "-- "))  {	  if(   "--   ".equals(arg)||    arg.startsWith(   "--   "))    {    	compilable	  [FE]  ComparisonFailure  	28	3	replace
148	[BUG]  [BUGGY]  String[]  arg  =  options.toArray(arguments[i],  opt);  [CE]  [FE]            ComparisonFailure    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];    [BUGGY]  String[]  arg  =  options.toArray(arguments[i],  opt);  [BUGGY]    if  (   "--   ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  tokens.add(   "-   ");  }  else  if  (arg.startsWith(   "-   "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	String[]  arg  =  options.toArray(arguments[i],  opt);	      String[]    arg    =    options.toArray(arguments[i]);    	non-compiled	[CE]  	11	None	replace
149	[BUG]  [BUGGY]  String[]  arg  =  options.getOption(i);  [CE]  [FE]                ComparisonFailure    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];    [BUGGY]  String[]  arg  =  options.getOption(i);  [BUGGY]    if  (   "--   ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  tokens.add(   "-   ");  }  else  if  (arg.startsWith(   "-   "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	String[]  arg  =  options.getOption(i);	      String[]    arg    =    options.getOptions();    	non-compiled	[CE]  	13	None	replace
150	[BUG]  [BUGGY]  String[]  arg  =  options.getOptionArgs();  [CE]  [FE]                  ComparisonFailure    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];    [BUGGY]  String[]  arg  =  options.getOptionArgs();  [BUGGY]    if  (   "--   ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  tokens.add(   "-   ");  }  else  if  (arg.startsWith(   "-   "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	String[]  arg  =  options.getOptionArgs();	      String[]    arg    =    options.getOptions();    	non-compiled	[CE]  	13	None	replace
151	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  arguments.length;  i++)  {  tokens.add(arg);  }  [CE]  [FE]              ComparisonFailure    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];    [BUGGY]  for(int  i  =  0;  i  <  arguments.length;  i++)  {  tokens.add(arg);  }  [BUGGY]    {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  tokens.add(   "-   ");  }  else  if  (arg.startsWith(   "-   "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	for(int  i  =  0;  i  <  arguments.length;  i++)  {  tokens.add(arg);  }	      	non-compiled	[CE]  	6	None	replace
152	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if(!eatTheRest)  {  tokens.add(arg);  }  [CE]  [FE]                ComparisonFailure    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];    [BUGGY]  for(int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if(!eatTheRest)  {  tokens.add(arg);  }  [BUGGY]    {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  tokens.add(   "-   ");  }  else  if  (arg.startsWith(   "-   "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	for(int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  if(!eatTheRest)  {  tokens.add(arg);  }	      	non-compiled	[CE]  	6	None	replace
153	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  arguments.length;  i++)  {  tokens.add(arg[i]);  }  [CE]  [FE]                  ComparisonFailure    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];    [BUGGY]  for(int  i  =  0;  i  <  arguments.length;  i++)  {  tokens.add(arg[i]);  }  [BUGGY]    {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  tokens.add(   "-   ");  }  else  if  (arg.startsWith(   "-   "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	for(int  i  =  0;  i  <  arguments.length;  i++)  {  tokens.add(arg[i]);  }	      	non-compiled	[CE]  	6	None	replace
154	[BUG]  [BUGGY]  [FE]  MissingArgumentException  [FE]    MissingArgumentException    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];    [BUGGY]      tokens.add(arg);  tokens.remove(arg);  [BUGGY]    if  (   "--   ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  tokens.add(   "-   ");  }  else  if  (arg.startsWith(   "-   "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	add	        tokens.add(arg);    tokens.remove(arg);	  	compilable	  [FE]  MissingArgumentException  	9	4	add
155	[BUG]  [BUGGY]      tokens.add(arg);  tokens.remove(arg);  [FE]  MissingArgumentException  [FE]    MissingArgumentException    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];    [BUGGY]      tokens.add(arg);  tokens.remove(arg);  [BUGGY]    if  (   "--   ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  tokens.add(   "-   ");  }  else  if  (arg.startsWith(   "-   "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	        tokens.add(arg);    tokens.remove(arg);	  	compilable	  [FE]  MissingArgumentException  	9	4	add
156	[BUG]  [BUGGY]      tokens.add(arg);  Tokens.add(arg);  [CE]  cannot  find  symbol  Tokens  [FE]      MissingArgumentException    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];    [BUGGY]      tokens.add(arg);  Tokens.add(arg);  [BUGGY]    if  (   "--   ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  tokens.add(   "-   ");  }  else  if  (arg.startsWith(   "-   "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	        tokens.add(arg);    Tokens.add(arg);	  	non-compiled	[CE]  cannot  find  symbol  Tokens	9	None	add
157	[BUG]  [BUGGY]  String[]  tokens  =  new  String[tokens.size()  *  2];  [CE]  [FE]        ComparisonFailure    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];    [BUGGY]  String[]  tokens  =  new  String[tokens.size()  *  2];  [BUGGY]    if  (   "--   ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  tokens.add(   "-   ");  }  else  if  (arg.startsWith(   "-   "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	String[]  tokens  =  new  String[tokens.size()  *  2];	      String[]    tokens    =    new    String[tokens.size()    ];    	non-compiled	[CE]  	14	None	replace
158	[BUG]  [BUGGY]  String[]  arg  =  options.get(opt,  null);  [CE]  [FE]              ComparisonFailure    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];    [BUGGY]  String[]  arg  =  options.get(opt,  null);  [BUGGY]    if  (   "--   ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  tokens.add(   "-   ");  }  else  if  (arg.startsWith(   "-   "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	String[]  arg  =  options.get(opt,  null);	      String[]    arg    =    options.get(opt);    	non-compiled	[CE]  	12	None	replace
