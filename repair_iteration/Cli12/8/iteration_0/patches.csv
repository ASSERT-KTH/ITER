bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    ComparisonFailure  [CONTEXT]  {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  [BUGGY]  if(arg.startsWith( "- "))  {  [BUGGY]  {  eatTheRest  =  true;  tokens.add( "-- ");  }  else  if  ( "- ".equals(arg))  {  tokens.add( "- ");  }  else  if  (arg.startsWith( "- "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	add	if(arg.startsWith( "- "))  {	if  ( "-- ".equals(arg))  {  	compilable	  [FE]  AssertionFailedError  	16	14	replace
2	[BUG]  [BUGGY]  if(arg.startsWith( "- "))  {  [FE]  AssertionFailedError  [FE]    ComparisonFailure  [CONTEXT]  {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  [BUGGY]  if(arg.startsWith( "- "))  {  [BUGGY]  {  eatTheRest  =  true;  tokens.add( "-- ");  }  else  if  ( "- ".equals(arg))  {  tokens.add( "- ");  }  else  if  (arg.startsWith( "- "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	if(arg.startsWith( "- "))  {	if  ( "-- ".equals(arg))  {  	compilable	  [FE]  AssertionFailedError  	16	14	replace
3	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      ComparisonFailure  [CONTEXT]  {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  [BUGGY]  if( "-- ".equals(arg)||!stopAtNonOption)  {  [BUGGY]  {  eatTheRest  =  true;  tokens.add( "-- ");  }  else  if  ( "- ".equals(arg))  {  tokens.add( "- ");  }  else  if  (arg.startsWith( "- "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	add	if( "-- ".equals(arg)||!stopAtNonOption)  {	if  ( "-- ".equals(arg))  {  	compilable	  [FE]  AssertionFailedError  	16	13	replace
4	[BUG]  [BUGGY]  if( "-- ".equals(arg)||!stopAtNonOption)  {  [FE]  AssertionFailedError  [FE]      ComparisonFailure  [CONTEXT]  {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  [BUGGY]  if( "-- ".equals(arg)||!stopAtNonOption)  {  [BUGGY]  {  eatTheRest  =  true;  tokens.add( "-- ");  }  else  if  ( "- ".equals(arg))  {  tokens.add( "- ");  }  else  if  (arg.startsWith( "- "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	if( "-- ".equals(arg)||!stopAtNonOption)  {	if  ( "-- ".equals(arg))  {  	compilable	  [FE]  AssertionFailedError  	16	13	replace
5	[BUG]  [BUGGY]  if( "-- ".equals(arg)||!opt.startsWith( "-- "))  {  [CE]  cannot  find  symbol  opt  [FE]        ComparisonFailure  [CONTEXT]  {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  [BUGGY]  if( "-- ".equals(arg)||!opt.startsWith( "-- "))  {  [BUGGY]  {  eatTheRest  =  true;  tokens.add( "-- ");  }  else  if  ( "- ".equals(arg))  {  tokens.add( "- ");  }  else  if  (arg.startsWith( "- "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	if( "-- ".equals(arg)||!opt.startsWith( "-- "))  {	if  ( "-- ".equals(arg))  {  	non-compiled	[CE]  cannot  find  symbol  opt	16	None	replace
6	[BUG]  [BUGGY]    [CE]  [FE]          ComparisonFailure  [CONTEXT]  {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  [BUGGY]    [BUGGY]  {  eatTheRest  =  true;  tokens.add( "-- ");  }  else  if  ( "- ".equals(arg))  {  tokens.add( "- ");  }  else  if  (arg.startsWith( "- "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	  	if  ( "-- ".equals(arg))  {  	non-compiled	[CE]  	16	None	replace
7	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    ComparisonFailure  [CONTEXT]  {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  [BUGGY]    tokens.add( "- ");  [BUGGY]  if  ( "-- ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add( "-- ");  }  else  if  ( "- ".equals(arg))  {  tokens.add( "- ");  }  else  if  (arg.startsWith( "- "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	add	    tokens.add( "- ");		compilable	  [FE]  AssertionFailedError  	17	11	add
8	[BUG]  [BUGGY]    tokens.add( "- ");  [FE]  AssertionFailedError  [FE]    ComparisonFailure  [CONTEXT]  {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  [BUGGY]    tokens.add( "- ");  [BUGGY]  if  ( "-- ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add( "-- ");  }  else  if  ( "- ".equals(arg))  {  tokens.add( "- ");  }  else  if  (arg.startsWith( "- "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	    tokens.add( "- ");		compilable	  [FE]  AssertionFailedError  	17	11	add
9	[BUG]  [BUGGY]  [FE]  MissingArgumentException  [FE]      ComparisonFailure  [CONTEXT]  {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  [BUGGY]    tokens.add(arg);  [BUGGY]  if  ( "-- ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add( "-- ");  }  else  if  ( "- ".equals(arg))  {  tokens.add( "- ");  }  else  if  (arg.startsWith( "- "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	add	    tokens.add(arg);		compilable	  [FE]  MissingArgumentException  	17	11	add
10	[BUG]  [BUGGY]    tokens.add(arg);  [FE]  MissingArgumentException  [FE]      ComparisonFailure  [CONTEXT]  {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  [BUGGY]    tokens.add(arg);  [BUGGY]  if  ( "-- ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add( "-- ");  }  else  if  ( "- ".equals(arg))  {  tokens.add( "- ");  }  else  if  (arg.startsWith( "- "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	    tokens.add(arg);		compilable	  [FE]  MissingArgumentException  	17	11	add
11	[BUG]  [BUGGY]    String[]  arg  =  options.toArray(arguments[i]);  [CE]  variable  arg  is  already  defined  in  method  flatten(Options,String[],boolean)  [FE]        ComparisonFailure  [CONTEXT]  {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  [BUGGY]    String[]  arg  =  options.toArray(arguments[i]);  [BUGGY]  if  ( "-- ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add( "-- ");  }  else  if  ( "- ".equals(arg))  {  tokens.add( "- ");  }  else  if  (arg.startsWith( "- "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	    String[]  arg  =  options.toArray(arguments[i]);		non-compiled	[CE]  variable  arg  is  already  defined  in  method  flatten(Options,String[],boolean)	17	None	add
12	[BUG]  [BUGGY]    String[]  arg  =  options.get(opt);  [CE]  variable  arg  is  already  defined  in  method  flatten(Options,String[],boolean)  [FE]          ComparisonFailure  [CONTEXT]  {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  [BUGGY]    String[]  arg  =  options.get(opt);  [BUGGY]  if  ( "-- ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add( "-- ");  }  else  if  ( "- ".equals(arg))  {  tokens.add( "- ");  }  else  if  (arg.startsWith( "- "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	    String[]  arg  =  options.get(opt);		non-compiled	[CE]  variable  arg  is  already  defined  in  method  flatten(Options,String[],boolean)	17	None	add
13	[BUG]  [BUGGY]    String[]  arg  =  options.getOptions();  [CE]  variable  arg  is  already  defined  in  method  flatten(Options,String[],boolean)  [FE]            ComparisonFailure  [CONTEXT]  {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  [BUGGY]    String[]  arg  =  options.getOptions();  [BUGGY]  if  ( "-- ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add( "-- ");  }  else  if  ( "- ".equals(arg))  {  tokens.add( "- ");  }  else  if  (arg.startsWith( "- "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	    String[]  arg  =  options.getOptions();		non-compiled	[CE]  variable  arg  is  already  defined  in  method  flatten(Options,String[],boolean)	17	None	add
14	[BUG]  [BUGGY]    String[]  tokens  =  new  String[tokens.size()  ];  [CE]  variable  tokens  is  already  defined  in  method  flatten(Options,String[],boolean)  [FE]    ComparisonFailure  [CONTEXT]  {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  [BUGGY]    String[]  tokens  =  new  String[tokens.size()  ];  [BUGGY]  if  ( "-- ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add( "-- ");  }  else  if  ( "- ".equals(arg))  {  tokens.add( "- ");  }  else  if  (arg.startsWith( "- "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	    String[]  tokens  =  new  String[tokens.size()  ];		non-compiled	[CE]  variable  tokens  is  already  defined  in  method  flatten(Options,String[],boolean)	17	None	add
15	[BUG]  [BUGGY]    TokenBuffer  tokens  =  new  TokenBuffer(tokens.size());  [CE]  cannot  find  symbol  [FE]      ComparisonFailure  [CONTEXT]  {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  [BUGGY]    TokenBuffer  tokens  =  new  TokenBuffer(tokens.size());  [BUGGY]  if  ( "-- ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add( "-- ");  }  else  if  ( "- ".equals(arg))  {  tokens.add( "- ");  }  else  if  (arg.startsWith( "- "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	    TokenBuffer  tokens  =  new  TokenBuffer(tokens.size());		non-compiled	[CE]  cannot  find  symbol	17	None	add
16	[BUG]  [BUGGY]    TokenBuffer  tokens  =  new  TokenBuffer(arg.length());  [CE]  cannot  find  symbol  [FE]        ComparisonFailure  [CONTEXT]  {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  [BUGGY]    TokenBuffer  tokens  =  new  TokenBuffer(arg.length());  [BUGGY]  if  ( "-- ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add( "-- ");  }  else  if  ( "- ".equals(arg))  {  tokens.add( "- ");  }  else  if  (arg.startsWith( "- "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	    TokenBuffer  tokens  =  new  TokenBuffer(arg.length());		non-compiled	[CE]  cannot  find  symbol	17	None	add
17	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    ComparisonFailure  [CONTEXT]  {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  [BUGGY]  if( "-- ".equals(arg)||!eatTheRest)  {  [BUGGY]  {  eatTheRest  =  true;  tokens.add( "-- ");  }  else  if  ( "- ".equals(arg))  {  tokens.add( "- ");  }  else  if  (arg.startsWith( "- "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	add	if( "-- ".equals(arg)||!eatTheRest)  {	if  ( "-- ".equals(arg))  {  	compilable	  [FE]  AssertionFailedError  	16	14	replace
18	[BUG]  [BUGGY]  if( "-- ".equals(arg)||!eatTheRest)  {  [FE]  AssertionFailedError  [FE]    ComparisonFailure  [CONTEXT]  {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  [BUGGY]  if( "-- ".equals(arg)||!eatTheRest)  {  [BUGGY]  {  eatTheRest  =  true;  tokens.add( "-- ");  }  else  if  ( "- ".equals(arg))  {  tokens.add( "- ");  }  else  if  (arg.startsWith( "- "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	if( "-- ".equals(arg)||!eatTheRest)  {	if  ( "-- ".equals(arg))  {  	compilable	  [FE]  AssertionFailedError  	16	14	replace
19	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure  [CONTEXT]  {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  [BUGGY]  if( "-- ".equals(arg)||  eatTheRest)  {  [BUGGY]  {  eatTheRest  =  true;  tokens.add( "-- ");  }  else  if  ( "- ".equals(arg))  {  tokens.add( "- ");  }  else  if  (arg.startsWith( "- "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	add	if( "-- ".equals(arg)||  eatTheRest)  {	if  ( "-- ".equals(arg))  {  	compilable	  [FE]  ComparisonFailure  	16	3	replace
20	[BUG]  [BUGGY]  if( "-- ".equals(arg)||  eatTheRest)  {  [FE]  ComparisonFailure  [FE]      ComparisonFailure  [CONTEXT]  {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  [BUGGY]  if( "-- ".equals(arg)||  eatTheRest)  {  [BUGGY]  {  eatTheRest  =  true;  tokens.add( "-- ");  }  else  if  ( "- ".equals(arg))  {  tokens.add( "- ");  }  else  if  (arg.startsWith( "- "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	if( "-- ".equals(arg)||  eatTheRest)  {	if  ( "-- ".equals(arg))  {  	compilable	  [FE]  ComparisonFailure  	16	3	replace
21	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        ComparisonFailure  [CONTEXT]  {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  [BUGGY]  if(! "-- ".equals(arg)||  eatTheRest)  {  [BUGGY]  {  eatTheRest  =  true;  tokens.add( "-- ");  }  else  if  ( "- ".equals(arg))  {  tokens.add( "- ");  }  else  if  (arg.startsWith( "- "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	add	if(! "-- ".equals(arg)||  eatTheRest)  {	if  ( "-- ".equals(arg))  {  	compilable	  [FE]  AssertionFailedError  	16	14	replace
22	[BUG]  [BUGGY]  if(! "-- ".equals(arg)||  eatTheRest)  {  [FE]  AssertionFailedError  [FE]        ComparisonFailure  [CONTEXT]  {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  [BUGGY]  if(! "-- ".equals(arg)||  eatTheRest)  {  [BUGGY]  {  eatTheRest  =  true;  tokens.add( "-- ");  }  else  if  ( "- ".equals(arg))  {  tokens.add( "- ");  }  else  if  (arg.startsWith( "- "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	if(! "-- ".equals(arg)||  eatTheRest)  {	if  ( "-- ".equals(arg))  {  	compilable	  [FE]  AssertionFailedError  	16	14	replace
23	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          ComparisonFailure  [CONTEXT]  {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  [BUGGY]  if(! "-- ".equals(arg)||!eatTheRest)  {  [BUGGY]  {  eatTheRest  =  true;  tokens.add( "-- ");  }  else  if  ( "- ".equals(arg))  {  tokens.add( "- ");  }  else  if  (arg.startsWith( "- "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	add	if(! "-- ".equals(arg)||!eatTheRest)  {	if  ( "-- ".equals(arg))  {  	compilable	  [FE]  AssertionFailedError  	16	14	replace
24	[BUG]  [BUGGY]  if(! "-- ".equals(arg)||!eatTheRest)  {  [FE]  AssertionFailedError  [FE]          ComparisonFailure  [CONTEXT]  {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  [BUGGY]  if(! "-- ".equals(arg)||!eatTheRest)  {  [BUGGY]  {  eatTheRest  =  true;  tokens.add( "-- ");  }  else  if  ( "- ".equals(arg))  {  tokens.add( "- ");  }  else  if  (arg.startsWith( "- "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	if(! "-- ".equals(arg)||!eatTheRest)  {	if  ( "-- ".equals(arg))  {  	compilable	  [FE]  AssertionFailedError  	16	14	replace
25	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    ComparisonFailure  [CONTEXT]  {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  [BUGGY]  if(!eatTheRest)  {  [BUGGY]  {  eatTheRest  =  true;  tokens.add( "-- ");  }  else  if  ( "- ".equals(arg))  {  tokens.add( "- ");  }  else  if  (arg.startsWith( "- "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	add	if(!eatTheRest)  {	if  ( "-- ".equals(arg))  {  	compilable	  [FE]  AssertionFailedError  	16	14	replace
26	[BUG]  [BUGGY]  if(!eatTheRest)  {  [FE]  AssertionFailedError  [FE]    ComparisonFailure  [CONTEXT]  {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  [BUGGY]  if(!eatTheRest)  {  [BUGGY]  {  eatTheRest  =  true;  tokens.add( "-- ");  }  else  if  ( "- ".equals(arg))  {  tokens.add( "- ");  }  else  if  (arg.startsWith( "- "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	if(!eatTheRest)  {	if  ( "-- ".equals(arg))  {  	compilable	  [FE]  AssertionFailedError  	16	14	replace
27	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      ComparisonFailure  [CONTEXT]  {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  [BUGGY]  if( "-- ".equals(arg)||  arg.startsWith( "-- "))  {  [BUGGY]  {  eatTheRest  =  true;  tokens.add( "-- ");  }  else  if  ( "- ".equals(arg))  {  tokens.add( "- ");  }  else  if  (arg.startsWith( "- "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	add	if( "-- ".equals(arg)||  arg.startsWith( "-- "))  {	if  ( "-- ".equals(arg))  {  	compilable	  [FE]  AssertionFailedError  	16	7	replace
28	[BUG]  [BUGGY]  if( "-- ".equals(arg)||  arg.startsWith( "-- "))  {  [FE]  AssertionFailedError  [FE]      ComparisonFailure  [CONTEXT]  {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  [BUGGY]  if( "-- ".equals(arg)||  arg.startsWith( "-- "))  {  [BUGGY]  {  eatTheRest  =  true;  tokens.add( "-- ");  }  else  if  ( "- ".equals(arg))  {  tokens.add( "- ");  }  else  if  (arg.startsWith( "- "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	if( "-- ".equals(arg)||  arg.startsWith( "-- "))  {	if  ( "-- ".equals(arg))  {  	compilable	  [FE]  AssertionFailedError  	16	7	replace
29	[BUG]  [BUGGY]    TokenBuffer  tokens  =  new  TokenBuffer(arg);  [CE]  cannot  find  symbol  [FE]    ComparisonFailure  [CONTEXT]  {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  [BUGGY]    TokenBuffer  tokens  =  new  TokenBuffer(arg);  [BUGGY]  if  ( "-- ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add( "-- ");  }  else  if  ( "- ".equals(arg))  {  tokens.add( "- ");  }  else  if  (arg.startsWith( "- "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	    TokenBuffer  tokens  =  new  TokenBuffer(arg);		non-compiled	[CE]  cannot  find  symbol	17	None	add
30	[BUG]  [BUGGY]    TokenBuffer  tokens  =  new  TokenBuffer(arg.length()  +  1);  [CE]  cannot  find  symbol  [FE]      ComparisonFailure  [CONTEXT]  {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];  [BUGGY]    TokenBuffer  tokens  =  new  TokenBuffer(arg.length()  +  1);  [BUGGY]  if  ( "-- ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add( "-- ");  }  else  if  ( "- ".equals(arg))  {  tokens.add( "- ");  }  else  if  (arg.startsWith( "- "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	    TokenBuffer  tokens  =  new  TokenBuffer(arg.length()  +  1);		non-compiled	[CE]  cannot  find  symbol	17	None	add
