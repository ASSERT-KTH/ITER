bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(arg.length  +  1);  [CE]  [FE]              ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(arg.length  +  1);  [BUGGY]      if  (     "--     ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	TokenBuffer  tokens  =  new  TokenBuffer(arg.length  +  1);	  TokenBuffer    tokens    =    new    TokenBuffer(arg.length);    	non-compiled	[CE]  	81	None	replace
2	[BUG]  [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(arg.length  -  1);  [CE]  [FE]                ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(arg.length  -  1);  [BUGGY]      if  (     "--     ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	TokenBuffer  tokens  =  new  TokenBuffer(arg.length  -  1);	  TokenBuffer    tokens    =    new    TokenBuffer(arg.length);    	non-compiled	[CE]  	81	None	replace
3	[BUG]  [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(tokens.length);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(tokens.length);  [BUGGY]      if  (     "--     ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	TokenBuffer  tokens  =  new  TokenBuffer(tokens.length);	  TokenBuffer    tokens    =    new    TokenBuffer(arg.length);    	non-compiled	[CE]  	81	None	replace
4	[BUG]  [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(tokens.size();  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(tokens.size();  [BUGGY]      if  (     "--     ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	TokenBuffer  tokens  =  new  TokenBuffer(tokens.size();	  TokenBuffer    tokens    =    new    TokenBuffer(tokens.size()    -    2);    	non-compiled	[CE]  	58	None	replace
5	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    AssertionFailedError    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  if( "--   ".equals(arg)&&  stopAtNonOption)  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	add	if( "--   ".equals(arg)&&  stopAtNonOption)  {	  if(   "--       ".equals(arg)||    stopAtNonOption)    {    	compilable	  [FE]  ComparisonFailure  	32	3	replace
6	[BUG]  [BUGGY]  if( "--   ".equals(arg)&&  stopAtNonOption)  {  [FE]  ComparisonFailure  [FE]    AssertionFailedError    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  if( "--   ".equals(arg)&&  stopAtNonOption)  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	if( "--   ".equals(arg)&&  stopAtNonOption)  {	  if(   "--       ".equals(arg)||    stopAtNonOption)    {    	compilable	  [FE]  ComparisonFailure  	32	3	replace
7	[BUG]  [BUGGY]  if(arg.startsWith(   "-   ")||  arg.startsWith(   "--   "))  {  if(arg.startsWith(   "-   ")||  arg.startsWith(   "--   "))  {  [CE]  reached  end  of  file  while  parsing  [FE]    AssertionFailedError    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  if(arg.startsWith(   "-   ")||  arg.startsWith(   "--   "))  {  if(arg.startsWith(   "-   ")||  arg.startsWith(   "--   "))  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	if(arg.startsWith(   "-   ")||    arg.startsWith(   "--   "))    {    if(arg.startsWith(   "-   ")||  arg.startsWith(   "--   "))  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	8	None	add
8	[BUG]  [BUGGY]  if(arg.startsWith(   "-   ")||  arg.startsWith(   "--   "))  {  if(arg.startsWith(   "-   ")||  arg.startsWith( ".--   "))  {  [CE]  reached  end  of  file  while  parsing  [FE]      AssertionFailedError    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  if(arg.startsWith(   "-   ")||  arg.startsWith(   "--   "))  {  if(arg.startsWith(   "-   ")||  arg.startsWith( ".--   "))  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	if(arg.startsWith(   "-   ")||    arg.startsWith(   "--   "))    {    if(arg.startsWith(   "-   ")||  arg.startsWith( ".--   "))  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	8	None	add
9	[BUG]  [BUGGY]  if(stopAtNonOption)  {  if(!stopAtNonOption)  {  [CE]  reached  end  of  file  while  parsing  [FE]          AssertionFailedError      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  if(stopAtNonOption)  {  if(!stopAtNonOption)  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	if(stopAtNonOption)  {  if(!stopAtNonOption)  {	  if(!eatTheRest)    {    if(!eattheRest)    {    	non-compiled	[CE]  reached  end  of  file  while  parsing	98	None	replace
10	[BUG]  [BUGGY]  if(stopAtNonOption)  {  if(!eatTheRest)  {  [CE]  reached  end  of  file  while  parsing  [FE]            AssertionFailedError      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  if(stopAtNonOption)  {  if(!eatTheRest)  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	if(stopAtNonOption)  {  if(!eatTheRest)  {	  if(!eatTheRest)    {    if(!eattheRest)    {    	non-compiled	[CE]  reached  end  of  file  while  parsing	98	None	replace
11	[BUG]  [BUGGY]  String[]  arg  =  options.get(i,  opt,  stopAtNonOption);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  String[]  arg  =  options.get(i,  opt,  stopAtNonOption);  [BUGGY]      if  (     "--     ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	String[]  arg  =  options.get(i,  opt,  stopAtNonOption);	  String[]    arg    =    options.get(i,    opt);    	non-compiled	[CE]  	89	None	replace
12	[BUG]  [BUGGY]  String[]  arg  =  options.get(i,  i);  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  String[]  arg  =  options.get(i,  i);  [BUGGY]      if  (     "--     ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	String[]  arg  =  options.get(i,  i);	  String[]    arg    =    options.get(i,    opt);    	non-compiled	[CE]  	89	None	replace
13	[BUG]  [BUGGY]  String[]  arg  =  options.get(i,  0);  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  String[]  arg  =  options.get(i,  0);  [BUGGY]      if  (     "--     ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	String[]  arg  =  options.get(i,  0);	  String[]    arg    =    options.get(i,    opt);    	non-compiled	[CE]  	89	None	replace
14	[BUG]  [BUGGY]  String[]  arg  =  options.get(i,  argument);  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  String[]  arg  =  options.get(i,  argument);  [BUGGY]      if  (     "--     ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	String[]  arg  =  options.get(i,  argument);	  String[]    arg    =    options.get(i,    opt);    	non-compiled	[CE]  	89	None	replace
15	[BUG]  [BUGGY]  String[]  arg  =  options.toArray(arguments[i]),  opt);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  String[]  arg  =  options.toArray(arguments[i]),  opt);  [BUGGY]      if  (     "--     ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	String[]  arg  =  options.toArray(arguments[i]),  opt);	  String[]    arg    =    options.toArray(arguments[i]),    stopAtNonOption);    	non-compiled	[CE]  	132	None	replace
16	[BUG]  [BUGGY]  String[]  arg  =  options.toArray(arguments[i]),  stopAtNonOption,  tokens);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  String[]  arg  =  options.toArray(arguments[i]),  stopAtNonOption,  tokens);  [BUGGY]      if  (     "--     ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	String[]  arg  =  options.toArray(arguments[i]),  stopAtNonOption,  tokens);	  String[]    arg    =    options.toArray(arguments[i]),    stopAtNonOption);    	non-compiled	[CE]  	132	None	replace
17	[BUG]  [BUGGY]  String[]  arg  =  options.toArray(arguments[i]),  stopAtNonOption,  opt);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  String[]  arg  =  options.toArray(arguments[i]),  stopAtNonOption,  opt);  [BUGGY]      if  (     "--     ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	String[]  arg  =  options.toArray(arguments[i]),  stopAtNonOption,  opt);	  String[]    arg    =    options.toArray(arguments[i]),    stopAtNonOption);    	non-compiled	[CE]  	132	None	replace
18	[BUG]  [BUGGY]  String[]  arg  =  options.toArray(arguments[i])/  stopAtNonOption);  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  String[]  arg  =  options.toArray(arguments[i])/  stopAtNonOption);  [BUGGY]      if  (     "--     ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	String[]  arg  =  options.toArray(arguments[i])/  stopAtNonOption);	  String[]    arg    =    options.toArray(arguments[i]),    stopAtNonOption);    	non-compiled	[CE]  	132	None	replace
19	[BUG]  [BUGGY]  tokens.add( ",- ");  [CE]  [FE]    UnrecognizedOptionException    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  tokens.add( ",- ");  [BUGGY]      if  (     "--     ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	tokens.add( ",- ");	          tokens.add(       "-       ");    tokens.add(   ",-       ");    	non-compiled	[CE]  	40	None	replace
20	[BUG]  [BUGGY]  tokens.add( ", ");  [CE]  [FE]      UnrecognizedOptionException    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  tokens.add( ", ");  [BUGGY]      if  (     "--     ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	tokens.add( ", ");	          tokens.add(       "-       ");    tokens.add(   ",-       ");    	non-compiled	[CE]  	40	None	replace
21	[BUG]  [BUGGY]  if(!stopAtNonOption)  {  if( "--   ".equals(arg)||  eatTheRest)  {  [CE]  reached  end  of  file  while  parsing  [FE]        ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  if(!stopAtNonOption)  {  if( "--   ".equals(arg)||  eatTheRest)  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	if(!stopAtNonOption)  {  if( "--   ".equals(arg)||  eatTheRest)  {	  if(       "--       ".equals(arg)||    eatTheRest)    {    if(       "--       ".equals(arg)||    eattheRest)    {    	non-compiled	[CE]  reached  end  of  file  while  parsing	103	None	replace
22	[BUG]  [BUGGY]  if(!stopAtNonOption)  {  if( "--   ".equals(arg)||  eattheRest)  {  [CE]  reached  end  of  file  while  parsing  [FE]          ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  if(!stopAtNonOption)  {  if( "--   ".equals(arg)||  eattheRest)  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	if(!stopAtNonOption)  {  if( "--   ".equals(arg)||  eattheRest)  {	  if(       "--       ".equals(arg)||    eatTheRest)    {    if(       "--       ".equals(arg)||    eattheRest)    {    	non-compiled	[CE]  reached  end  of  file  while  parsing	103	None	replace
23	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  if(arg.startsWith( "- ")||!stopAtNonOption)  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	add	if(arg.startsWith( "- ")||!stopAtNonOption)  {	  if(arg.startsWith(   "-   ")||!eatTheRest)    {    	compilable	  [FE]  AssertionFailedError  	113	14	replace
24	[BUG]  [BUGGY]  if(arg.startsWith( "- ")||!stopAtNonOption)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  if(arg.startsWith( "- ")||!stopAtNonOption)  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	if(arg.startsWith( "- ")||!stopAtNonOption)  {	  if(arg.startsWith(   "-   ")||!eatTheRest)    {    	compilable	  [FE]  AssertionFailedError  	113	14	replace
25	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  if(arg.startsWith( "- ")&&!eatTheRest)  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	add	if(arg.startsWith( "- ")&&!eatTheRest)  {	  if(arg.startsWith(   "-   ")||!eatTheRest)    {    	compilable	  [FE]  AssertionFailedError  	113	14	replace
26	[BUG]  [BUGGY]  if(arg.startsWith( "- ")&&!eatTheRest)  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  if(arg.startsWith( "- ")&&!eatTheRest)  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	if(arg.startsWith( "- ")&&!eatTheRest)  {	  if(arg.startsWith(   "-   ")||!eatTheRest)    {    	compilable	  [FE]  AssertionFailedError  	113	14	replace
27	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  if(arg.startsWith( "- ")||  eatTheRest)  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	add	if(arg.startsWith( "- ")||  eatTheRest)  {	  if(arg.startsWith(   "-   ")||!eatTheRest)    {    	compilable	  [FE]  AssertionFailedError  	113	14	replace
28	[BUG]  [BUGGY]  if(arg.startsWith( "- ")||  eatTheRest)  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  if(arg.startsWith( "- ")||  eatTheRest)  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	if(arg.startsWith( "- ")||  eatTheRest)  {	  if(arg.startsWith(   "-   ")||!eatTheRest)    {    	compilable	  [FE]  AssertionFailedError  	113	14	replace
29	[BUG]  [BUGGY]  String[]  arg  =  options.toArray(arguments[i],  opt,  stopAtNonOption);  [CE]  [FE]                ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  String[]  arg  =  options.toArray(arguments[i],  opt,  stopAtNonOption);  [BUGGY]      if  (     "--     ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	String[]  arg  =  options.toArray(arguments[i],  opt,  stopAtNonOption);	  String[]    arg    =    options.toArray(arguments[i],    opt);    	non-compiled	[CE]  	148	None	replace
30	[BUG]  [BUGGY]  String[]  arg  =  options.toArray(arguments[i],  null);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  String[]  arg  =  options.toArray(arguments[i],  null);  [BUGGY]      if  (     "--     ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	String[]  arg  =  options.toArray(arguments[i],  null);	  String[]    arg    =    options.toArray(arguments[i],    opt);    	non-compiled	[CE]  	148	None	replace
31	[BUG]  [BUGGY]  String[]  arg  =  options.toArray(arguments[i],  exception);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  String[]  arg  =  options.toArray(arguments[i],  exception);  [BUGGY]      if  (     "--     ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	String[]  arg  =  options.toArray(arguments[i],  exception);	  String[]    arg    =    options.toArray(arguments[i],    opt);    	non-compiled	[CE]  	148	None	replace
32	[BUG]  [BUGGY]  tokens.add('-');  [CE]  [FE]    ArrayStoreException    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  tokens.add('-');  [BUGGY]      if  (     "--     ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	tokens.add('-');	          tokens.add(       "-       ");    tokens.add('-');    	non-compiled	[CE]  	135	None	replace
33	[BUG]  [BUGGY]  if(stopAtNonOption  ||!arg.equals(   "-   "))  {  if(stopAtNonOption  ||!arg.equals(   "-   "))  {  [CE]  reached  end  of  file  while  parsing  [FE]    AssertionFailedError    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  if(stopAtNonOption  ||!arg.equals(   "-   "))  {  if(stopAtNonOption  ||!arg.equals(   "-   "))  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	if(stopAtNonOption    ||!arg.equals(   "-   "))    {    if(stopAtNonOption  ||!arg.equals(   "-   "))  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	73	None	add
34	[BUG]  [BUGGY]  if(stopAtNonOption  ||!arg.equals(   "-   "))  {  if(stopAtNonOption  ||!arg.equals( ".-   "))  {  [CE]  reached  end  of  file  while  parsing  [FE]      AssertionFailedError    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  if(stopAtNonOption  ||!arg.equals(   "-   "))  {  if(stopAtNonOption  ||!arg.equals( ".-   "))  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	if(stopAtNonOption    ||!arg.equals(   "-   "))    {    if(stopAtNonOption  ||!arg.equals( ".-   "))  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	73	None	add
35	[BUG]  [BUGGY]  if(stopAtNonOption  ||!arg.equals(   "-   "))  {  If(stopAtNonOption  ||!arg.equals(   "-   "))  {  [CE]  [FE]        AssertionFailedError    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  if(stopAtNonOption  ||!arg.equals(   "-   "))  {  If(stopAtNonOption  ||!arg.equals(   "-   "))  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	if(stopAtNonOption    ||!arg.equals(   "-   "))    {    If(stopAtNonOption  ||!arg.equals(   "-   "))  {	  	non-compiled	[CE]  	73	None	add
36	[BUG]  [BUGGY]  tokens.add(arg,  stopAtNonOption);  [CE]  [FE]          MissingArgumentException      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  tokens.add(arg,  stopAtNonOption);  [BUGGY]      if  (     "--     ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	tokens.add(arg,  stopAtNonOption);	  tokens.add(arg,    eatTheRest);    	non-compiled	[CE]  	121	None	replace
37	[BUG]  [BUGGY]  tokens.add(arg,  null);  [CE]  [FE]            MissingArgumentException      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  tokens.add(arg,  null);  [BUGGY]      if  (     "--     ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	tokens.add(arg,  null);	  tokens.add(arg,    eatTheRest);    	non-compiled	[CE]  	121	None	replace
38	[BUG]  [BUGGY]  tokens.add(arg,  0);  [CE]  [FE]              MissingArgumentException      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  tokens.add(arg,  0);  [BUGGY]      if  (     "--     ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	tokens.add(arg,  0);	  tokens.add(arg,    eatTheRest);    	non-compiled	[CE]  	121	None	replace
39	[BUG]  [BUGGY]  tokens.add(arg,  opt);  [CE]  [FE]                MissingArgumentException      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  tokens.add(arg,  opt);  [BUGGY]      if  (     "--     ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	tokens.add(arg,  opt);	  tokens.add(arg,    eatTheRest);    	non-compiled	[CE]  	121	None	replace
40	[BUG]  [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(opt.length(),  arg.length());  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(opt.length(),  arg.length());  [BUGGY]      if  (     "--     ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	TokenBuffer  tokens  =  new  TokenBuffer(opt.length(),  arg.length());	  TokenBuffer    tokens    =    new    TokenBuffer(arg.length(),    opt.length());    	non-compiled	[CE]  	44	None	replace
41	[BUG]  [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(arg.length()  +  1,  arg.length());  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(arg.length()  +  1,  arg.length());  [BUGGY]      if  (     "--     ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	TokenBuffer  tokens  =  new  TokenBuffer(arg.length()  +  1,  arg.length());	  TokenBuffer    tokens    =    new    TokenBuffer(arg.length(),    opt.length());    	non-compiled	[CE]  	44	None	replace
42	[BUG]  [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(option.length(),  arg.length());  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(option.length(),  arg.length());  [BUGGY]      if  (     "--     ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	TokenBuffer  tokens  =  new  TokenBuffer(option.length(),  arg.length());	  TokenBuffer    tokens    =    new    TokenBuffer(arg.length(),    opt.length());    	non-compiled	[CE]  	44	None	replace
43	[BUG]  [BUGGY]  if(!stopAtNonOption  &&!arg.equals( "--)||  eatTheRest)  {  [CE]  unclosed  string  literal  [FE]    AssertionFailedError    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  if(!stopAtNonOption  &&!arg.equals( "--)||  eatTheRest)  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	if(!stopAtNonOption  &&!arg.equals( "--)||  eatTheRest)  {	  if(!stopAtNonOption    &&!arg.equals(   "--   ")||    eatTheRest)    {    	non-compiled	[CE]  unclosed  string  literal	107	None	replace
44	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  if(!stopAtNonOption  &&!arg.equals( "- ")||  eatTheRest)  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	add	if(!stopAtNonOption  &&!arg.equals( "- ")||  eatTheRest)  {	  if(!stopAtNonOption    &&!arg.equals(   "--   ")||    eatTheRest)    {    	compilable	  [FE]  AssertionFailedError  	107	13	replace
45	[BUG]  [BUGGY]  if(!stopAtNonOption  &&!arg.equals( "- ")||  eatTheRest)  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  if(!stopAtNonOption  &&!arg.equals( "- ")||  eatTheRest)  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	if(!stopAtNonOption  &&!arg.equals( "- ")||  eatTheRest)  {	  if(!stopAtNonOption    &&!arg.equals(   "--   ")||    eatTheRest)    {    	compilable	  [FE]  AssertionFailedError  	107	13	replace
46	[BUG]  [BUGGY]  if(arg.equals( "-- ")||!stopAtNonOption.startsWith( "--   "))  {  [CE]  boolean  cannot  be  dereferenced  [FE]                  ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  if(arg.equals( "-- ")||!stopAtNonOption.startsWith( "--   "))  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	if(arg.equals( "-- ")||!stopAtNonOption.startsWith( "--   "))  {	  if(   "--       ".equals(arg)||!stopAtNonOption.startsWith(   "--       "))    {    	non-compiled	[CE]  boolean  cannot  be  dereferenced	22	None	replace
47	[BUG]  [BUGGY]  if( "--   ".equals(arg)||!stopAtNonOption.startsWith(arg))  {  [CE]  boolean  cannot  be  dereferenced  [FE]                    ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  if( "--   ".equals(arg)||!stopAtNonOption.startsWith(arg))  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	if( "--   ".equals(arg)||!stopAtNonOption.startsWith(arg))  {	  if(   "--       ".equals(arg)||!stopAtNonOption.startsWith(   "--       "))    {    	non-compiled	[CE]  boolean  cannot  be  dereferenced	22	None	replace
48	[BUG]  [BUGGY]  if(! "-- ".equals(arg)||!stopAtNonOption.startsWith(arg))  {  [CE]  boolean  cannot  be  dereferenced  [FE]                      ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  if(! "-- ".equals(arg)||!stopAtNonOption.startsWith(arg))  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	if(! "-- ".equals(arg)||!stopAtNonOption.startsWith(arg))  {	  if(   "--       ".equals(arg)||!stopAtNonOption.startsWith(   "--       "))    {    	non-compiled	[CE]  boolean  cannot  be  dereferenced	22	None	replace
49	[BUG]  [BUGGY]  if(!stopAtNonOption)  {  if(!   "--   ".equals(arg)||!eatTheRest)  {  [CE]  reached  end  of  file  while  parsing  [FE]          AssertionFailedError      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  if(!stopAtNonOption)  {  if(!   "--   ".equals(arg)||!eatTheRest)  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	if(!stopAtNonOption)  {  if(!   "--   ".equals(arg)||!eatTheRest)  {	  if(!       "--       ".equals(arg)||!eatTheRest)    {    if(!       "--       ".equals(arg)||!eattheRest)    {    	non-compiled	[CE]  reached  end  of  file  while  parsing	13	None	replace
50	[BUG]  [BUGGY]  if(!stopAtNonOption)  {  if(! "--   ".equals(arg)||!eattheRest)  {  [CE]  reached  end  of  file  while  parsing  [FE]            AssertionFailedError      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  if(!stopAtNonOption)  {  if(! "--   ".equals(arg)||!eattheRest)  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	if(!stopAtNonOption)  {  if(! "--   ".equals(arg)||!eattheRest)  {	  if(!       "--       ".equals(arg)||!eatTheRest)    {    if(!       "--       ".equals(arg)||!eattheRest)    {    	non-compiled	[CE]  reached  end  of  file  while  parsing	13	None	replace
51	[BUG]  [BUGGY]  String[]  arg  =  options.getOption(opt);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  String[]  arg  =  options.getOption(opt);  [BUGGY]      if  (     "--     ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	String[]  arg  =  options.getOption(opt);	  String[]    arg    =    options.getOption(i);    	non-compiled	[CE]  	149	None	replace
52	[BUG]  [BUGGY]  String[]  arg  =  options.getOption(i,  opt);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  String[]  arg  =  options.getOption(i,  opt);  [BUGGY]      if  (     "--     ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	String[]  arg  =  options.getOption(i,  opt);	  String[]    arg    =    options.getOption(i);    	non-compiled	[CE]  	149	None	replace
53	[BUG]  [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(arg.trim()  +  1);  [CE]  [FE]            ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(arg.trim()  +  1);  [BUGGY]      if  (     "--     ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	TokenBuffer  tokens  =  new  TokenBuffer(arg.trim()  +  1);	  TokenBuffer    tokens    =    new    TokenBuffer(arg.trim());    	non-compiled	[CE]  	142	None	replace
54	[BUG]  [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(arg.trim(),  0);  [CE]  [FE]              ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(arg.trim(),  0);  [BUGGY]      if  (     "--     ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	TokenBuffer  tokens  =  new  TokenBuffer(arg.trim(),  0);	  TokenBuffer    tokens    =    new    TokenBuffer(arg.trim());    	non-compiled	[CE]  	142	None	replace
55	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    AssertionFailedError    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  if(!stopAtNonOption  &&  arg.startsWith( "-   "))  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	add	if(!stopAtNonOption  &&  arg.startsWith( "-   "))  {	  if(!eatTheRest    &&    arg.startsWith(   "-   "))    {    	compilable	  [FE]  ComparisonFailure  	115	3	replace
56	[BUG]  [BUGGY]  if(!stopAtNonOption  &&  arg.startsWith( "-   "))  {  [FE]  ComparisonFailure  [FE]    AssertionFailedError    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  if(!stopAtNonOption  &&  arg.startsWith( "-   "))  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	if(!stopAtNonOption  &&  arg.startsWith( "-   "))  {	  if(!eatTheRest    &&    arg.startsWith(   "-   "))    {    	compilable	  [FE]  ComparisonFailure  	115	3	replace
57	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      AssertionFailedError    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  if(!stopAtNonOption  &&  arg.startsWith( ".- "))  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	add	if(!stopAtNonOption  &&  arg.startsWith( ".- "))  {	  if(!eatTheRest    &&    arg.startsWith(   "-   "))    {    	compilable	  [FE]  ComparisonFailure  	115	3	replace
58	[BUG]  [BUGGY]  if(!stopAtNonOption  &&  arg.startsWith( ".- "))  {  [FE]  ComparisonFailure  [FE]      AssertionFailedError    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  if(!stopAtNonOption  &&  arg.startsWith( ".- "))  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	if(!stopAtNonOption  &&  arg.startsWith( ".- "))  {	  if(!eatTheRest    &&    arg.startsWith(   "-   "))    {    	compilable	  [FE]  ComparisonFailure  	115	3	replace
59	[BUG]  [BUGGY]  if(stopAtNonOption  &&  options.contains(arg))  {  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  if(stopAtNonOption  &&  options.contains(arg))  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	if(stopAtNonOption  &&  options.contains(arg))  {	  if(stopAtNonOption)    {    	non-compiled	[CE]  cannot  find  symbol	68	None	replace
60	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  if(stopAtNonOption  ||  arg.startsWith( "- "))  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	add	if(stopAtNonOption  ||  arg.startsWith( "- "))  {	  if(stopAtNonOption)    {    	compilable	  [FE]  AssertionFailedError  	68	14	replace
61	[BUG]  [BUGGY]  if(stopAtNonOption  ||  arg.startsWith( "- "))  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  if(stopAtNonOption  ||  arg.startsWith( "- "))  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	if(stopAtNonOption  ||  arg.startsWith( "- "))  {	  if(stopAtNonOption)    {    	compilable	  [FE]  AssertionFailedError  	68	14	replace
62	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    ComparisonFailure    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  if(!stopAtNonOption  &&  arguments[i].equals(arg)||  eatTheRest)  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	add	if(!stopAtNonOption  &&  arguments[i].equals(arg)||  eatTheRest)  {	  if(!stopAtNonOption    &&       "--   ".equals(arg)||    eatTheRest)    {    	compilable	  [FE]  AssertionFailedError  	101	13	replace
63	[BUG]  [BUGGY]  if(!stopAtNonOption  &&  arguments[i].equals(arg)||  eatTheRest)  {  [FE]  AssertionFailedError  [FE]    ComparisonFailure    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  if(!stopAtNonOption  &&  arguments[i].equals(arg)||  eatTheRest)  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	if(!stopAtNonOption  &&  arguments[i].equals(arg)||  eatTheRest)  {	  if(!stopAtNonOption    &&       "--   ".equals(arg)||    eatTheRest)    {    	compilable	  [FE]  AssertionFailedError  	101	13	replace
64	[BUG]  [BUGGY]  if(!stopAtNonOption  &&  options.contains(arg)||  eatTheRest)  {  [CE]  cannot  find  symbol  [FE]      ComparisonFailure    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  if(!stopAtNonOption  &&  options.contains(arg)||  eatTheRest)  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	if(!stopAtNonOption  &&  options.contains(arg)||  eatTheRest)  {	  if(!stopAtNonOption    &&       "--   ".equals(arg)||    eatTheRest)    {    	non-compiled	[CE]  cannot  find  symbol	101	None	replace
65	[BUG]  [BUGGY]  String[]  tokens  =  new  String[tokens.size()  1];  [CE]  [FE]              ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  String[]  tokens  =  new  String[tokens.size()  1];  [BUGGY]      if  (     "--     ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	String[]  tokens  =  new  String[tokens.size()  1];	  String[]    tokens    =    new    String[tokens.size()    +    1];    	non-compiled	[CE]  	95	None	replace
66	[BUG]  [BUGGY]  String[]  options  =  options.toArray(new  String[arg.size()  ]);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  String[]  options  =  options.toArray(new  String[arg.size()  ]);  [BUGGY]      if  (     "--     ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	String[]  options  =  options.toArray(new  String[arg.size()  ]);	  String[]    options    =    options.getOptions();    	non-compiled	[CE]  	126	None	replace
67	[BUG]  [BUGGY]  String[]  options  =  options.toArray(new  String[options.size()  ]);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  String[]  options  =  options.toArray(new  String[options.size()  ]);  [BUGGY]      if  (     "--     ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	String[]  options  =  options.toArray(new  String[options.size()  ]);	  String[]    options    =    options.getOptions();    	non-compiled	[CE]  	126	None	replace
68	[BUG]  [BUGGY]  String[]  options  =  options.getOptions(opt);  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  String[]  options  =  options.getOptions(opt);  [BUGGY]      if  (     "--     ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	String[]  options  =  options.getOptions(opt);	  String[]    options    =    options.getOptions();    	non-compiled	[CE]  	126	None	replace
69	[BUG]  [BUGGY]  if(!stopAtNonOption  &&!arg.equals(   "--   ")||  eatTheRest)  {  if(!stopAtNonOption  &&!arg.equals(   "--   ")||  eatTheRest)  {  [CE]  reached  end  of  file  while  parsing  [FE]    AssertionFailedError    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  if(!stopAtNonOption  &&!arg.equals(   "--   ")||  eatTheRest)  {  if(!stopAtNonOption  &&!arg.equals(   "--   ")||  eatTheRest)  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	if(!stopAtNonOption    &&!arg.equals(   "--   ")||    eatTheRest)    {    if(!stopAtNonOption  &&!arg.equals(   "--   ")||  eatTheRest)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	106	None	add
70	[BUG]  [BUGGY]  if(!stopAtNonOption  &&!arg.equals(   "--   ")||  eatTheRest)  {  if(!stopAtNonOption  &&!arg.equals( ".--   ")||  eatTheRest)  {  [CE]  reached  end  of  file  while  parsing  [FE]      AssertionFailedError    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  if(!stopAtNonOption  &&!arg.equals(   "--   ")||  eatTheRest)  {  if(!stopAtNonOption  &&!arg.equals( ".--   ")||  eatTheRest)  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	if(!stopAtNonOption    &&!arg.equals(   "--   ")||    eatTheRest)    {    if(!stopAtNonOption  &&!arg.equals( ".--   ")||  eatTheRest)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	106	None	add
71	[BUG]  [BUGGY]  if(!stopAtNonOption  &&!arg.equals(   "--   ")||  eatTheRest)  {  if(!stopAtNonOption  &&!arg.equals(   "--   ")||  eattheRest)  {  [CE]  reached  end  of  file  while  parsing  [FE]        AssertionFailedError    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  if(!stopAtNonOption  &&!arg.equals(   "--   ")||  eatTheRest)  {  if(!stopAtNonOption  &&!arg.equals(   "--   ")||  eattheRest)  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	if(!stopAtNonOption    &&!arg.equals(   "--   ")||    eatTheRest)    {    if(!stopAtNonOption  &&!arg.equals(   "--   ")||  eattheRest)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	106	None	add
72	[BUG]  [BUGGY]  [FE]  MissingArgumentException  [FE]    MissingArgumentException    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]          tokens.add(arg);    tokens.add(arg);  if(stopAtNonOption)  {  eatTheRest  =  true;  tokens.add(   "-   ");  }  tokens.add(arg);  [BUGGY]      if  (     "--     ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	add	                tokens.add(arg);        tokens.add(arg);    if(stopAtNonOption)    {    eatTheRest    =    true;    tokens.add(   "-   ");    }    tokens.add(arg);	  	compilable	  [FE]  MissingArgumentException  	63	11	add
73	[BUG]  [BUGGY]          tokens.add(arg);    tokens.add(arg);  if(stopAtNonOption)  {  eatTheRest  =  true;  tokens.add(   "-   ");  }  tokens.add(arg);  [FE]  MissingArgumentException  [FE]    MissingArgumentException    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]          tokens.add(arg);    tokens.add(arg);  if(stopAtNonOption)  {  eatTheRest  =  true;  tokens.add(   "-   ");  }  tokens.add(arg);  [BUGGY]      if  (     "--     ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	                tokens.add(arg);        tokens.add(arg);    if(stopAtNonOption)    {    eatTheRest    =    true;    tokens.add(   "-   ");    }    tokens.add(arg);	  	compilable	  [FE]  MissingArgumentException  	63	11	add
74	[BUG]  [BUGGY]  [FE]  MissingArgumentException  [FE]      MissingArgumentException    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]          tokens.add(arg);    tokens.add(arg);  if(stopAtNonOption)  {  eatTheRest  =  true;  tokens.add(   "-   ");  }  tokens.add(arg);  if(stopAtNonOption)  {  eatTheRest  =  true;  tokens.add( "-   ");  }  [BUGGY]      if  (     "--     ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	add	                tokens.add(arg);        tokens.add(arg);    if(stopAtNonOption)    {    eatTheRest    =    true;    tokens.add(   "-   ");    }    tokens.add(arg);  if(stopAtNonOption)  {  eatTheRest  =  true;  tokens.add( "-   ");  }	  	compilable	  [FE]  MissingArgumentException  	63	11	add
75	[BUG]  [BUGGY]          tokens.add(arg);    tokens.add(arg);  if(stopAtNonOption)  {  eatTheRest  =  true;  tokens.add(   "-   ");  }  tokens.add(arg);  if(stopAtNonOption)  {  eatTheRest  =  true;  tokens.add( "-   ");  }  [FE]  MissingArgumentException  [FE]      MissingArgumentException    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]          tokens.add(arg);    tokens.add(arg);  if(stopAtNonOption)  {  eatTheRest  =  true;  tokens.add(   "-   ");  }  tokens.add(arg);  if(stopAtNonOption)  {  eatTheRest  =  true;  tokens.add( "-   ");  }  [BUGGY]      if  (     "--     ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	                tokens.add(arg);        tokens.add(arg);    if(stopAtNonOption)    {    eatTheRest    =    true;    tokens.add(   "-   ");    }    tokens.add(arg);  if(stopAtNonOption)  {  eatTheRest  =  true;  tokens.add( "-   ");  }	  	compilable	  [FE]  MissingArgumentException  	63	11	add
76	[BUG]  [BUGGY]  [FE]  MissingArgumentException  [FE]        MissingArgumentException    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]          tokens.add(arg);    tokens.add(arg);  if(stopAtNonOption)  {  eatTheRest  =  true;  tokens.add(   "-   ");  }  tokens.add(arg);  if(stopAtNonOption)  {  eatTheRest  =  true;  tokens.add(arg);  }  [BUGGY]      if  (     "--     ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	add	                tokens.add(arg);        tokens.add(arg);    if(stopAtNonOption)    {    eatTheRest    =    true;    tokens.add(   "-   ");    }    tokens.add(arg);  if(stopAtNonOption)  {  eatTheRest  =  true;  tokens.add(arg);  }	  	compilable	  [FE]  MissingArgumentException  	63	11	add
77	[BUG]  [BUGGY]          tokens.add(arg);    tokens.add(arg);  if(stopAtNonOption)  {  eatTheRest  =  true;  tokens.add(   "-   ");  }  tokens.add(arg);  if(stopAtNonOption)  {  eatTheRest  =  true;  tokens.add(arg);  }  [FE]  MissingArgumentException  [FE]        MissingArgumentException    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]          tokens.add(arg);    tokens.add(arg);  if(stopAtNonOption)  {  eatTheRest  =  true;  tokens.add(   "-   ");  }  tokens.add(arg);  if(stopAtNonOption)  {  eatTheRest  =  true;  tokens.add(arg);  }  [BUGGY]      if  (     "--     ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	                tokens.add(arg);        tokens.add(arg);    if(stopAtNonOption)    {    eatTheRest    =    true;    tokens.add(   "-   ");    }    tokens.add(arg);  if(stopAtNonOption)  {  eatTheRest  =  true;  tokens.add(arg);  }	  	compilable	  [FE]  MissingArgumentException  	63	11	add
78	[BUG]  [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(arg,  tokens.length()  -  1);  [CE]  [FE]              ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(arg,  tokens.length()  -  1);  [BUGGY]      if  (     "--     ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	TokenBuffer  tokens  =  new  TokenBuffer(arg,  tokens.length()  -  1);	  TokenBuffer    tokens    =    new    TokenBuffer(arg,    tokens.length()    +    1);    	non-compiled	[CE]  	78	None	replace
79	[BUG]  [BUGGY]  if(!stopAtNonOption)  {  if( "--   ".equals(arg)||!eatTheRest)  {  [CE]  reached  end  of  file  while  parsing  [FE]        AssertionFailedError      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  if(!stopAtNonOption)  {  if( "--   ".equals(arg)||!eatTheRest)  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	if(!stopAtNonOption)  {  if( "--   ".equals(arg)||!eatTheRest)  {	  if(       "--       ".equals(arg)||!eatTheRest)    {    if(       "--       ".equals(arg)||!eatTheRest)    {    	non-compiled	[CE]  reached  end  of  file  while  parsing	90	None	replace
80	[BUG]  [BUGGY]  if(arg.startsWith( "- "))  {  if( "--   ".equals(arg)||!eatTheRest)  {  [CE]  reached  end  of  file  while  parsing  [FE]          AssertionFailedError      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  if(arg.startsWith( "- "))  {  if( "--   ".equals(arg)||!eatTheRest)  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	if(arg.startsWith( "- "))  {  if( "--   ".equals(arg)||!eatTheRest)  {	  if(       "--       ".equals(arg)||!eatTheRest)    {    if(       "--       ".equals(arg)||!eatTheRest)    {    	non-compiled	[CE]  reached  end  of  file  while  parsing	90	None	replace
81	[BUG]  [BUGGY]  if(!stopAtNonOption  &&!     "--     ".equals(arg)||  eatTheRest)  {  if(!stopAtNonOption  &&!   "--   ".equals(arg)||  eatTheRest)  {  [CE]  reached  end  of  file  while  parsing  [FE]    AssertionFailedError    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  if(!stopAtNonOption  &&!     "--     ".equals(arg)||  eatTheRest)  {  if(!stopAtNonOption  &&!   "--   ".equals(arg)||  eatTheRest)  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	if(!stopAtNonOption    &&!       "--       ".equals(arg)||    eatTheRest)    {    if(!stopAtNonOption  &&!   "--   ".equals(arg)||  eatTheRest)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	108	None	add
82	[BUG]  [BUGGY]  if(!stopAtNonOption  &&!     "--     ".equals(arg)||  eatTheRest)  {  if(!stopAtNonOption  &&!! "--   ".equals(arg)||  eatTheRest)  {  [CE]  reached  end  of  file  while  parsing  [FE]      AssertionFailedError    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  if(!stopAtNonOption  &&!     "--     ".equals(arg)||  eatTheRest)  {  if(!stopAtNonOption  &&!! "--   ".equals(arg)||  eatTheRest)  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	if(!stopAtNonOption    &&!       "--       ".equals(arg)||    eatTheRest)    {    if(!stopAtNonOption  &&!! "--   ".equals(arg)||  eatTheRest)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	108	None	add
83	[BUG]  [BUGGY]  if(!stopAtNonOption  &&!     "--     ".equals(arg)||  eatTheRest)  {  If(!stopAtNonOption  &&!   "--   ".equals(arg)||  eatTheRest)  {  [CE]  [FE]        AssertionFailedError    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  if(!stopAtNonOption  &&!     "--     ".equals(arg)||  eatTheRest)  {  If(!stopAtNonOption  &&!   "--   ".equals(arg)||  eatTheRest)  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	if(!stopAtNonOption    &&!       "--       ".equals(arg)||    eatTheRest)    {    If(!stopAtNonOption  &&!   "--   ".equals(arg)||  eatTheRest)  {	  	non-compiled	[CE]  	108	None	add
84	[BUG]  [BUGGY]  [FE]  UnrecognizedOptionException  [FE]    UnrecognizedOptionException    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]          tokens.add(     "-     ");    tokens.add(  arg);  tokens.add(   "-   ");  tokens.add(  arg);  [BUGGY]      if  (     "--     ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	add	                tokens.add(       "-       ");        tokens.add(    arg);    tokens.add(   "-   ");  tokens.add(  arg);	  	compilable	  [FE]  UnrecognizedOptionException  	136	13	add
85	[BUG]  [BUGGY]          tokens.add(     "-     ");    tokens.add(  arg);  tokens.add(   "-   ");  tokens.add(  arg);  [FE]  UnrecognizedOptionException  [FE]    UnrecognizedOptionException    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]          tokens.add(     "-     ");    tokens.add(  arg);  tokens.add(   "-   ");  tokens.add(  arg);  [BUGGY]      if  (     "--     ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	                tokens.add(       "-       ");        tokens.add(    arg);    tokens.add(   "-   ");  tokens.add(  arg);	  	compilable	  [FE]  UnrecognizedOptionException  	136	13	add
86	[BUG]  [BUGGY]  [FE]  UnrecognizedOptionException  [FE]      UnrecognizedOptionException    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]          tokens.add(     "-     ");    tokens.add(  arg);  tokens.add( ".-   ");  tokens.add(  arg);  [BUGGY]      if  (     "--     ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	add	                tokens.add(       "-       ");        tokens.add(    arg);    tokens.add( ".-   ");  tokens.add(  arg);	  	compilable	  [FE]  UnrecognizedOptionException  	136	13	add
87	[BUG]  [BUGGY]          tokens.add(     "-     ");    tokens.add(  arg);  tokens.add( ".-   ");  tokens.add(  arg);  [FE]  UnrecognizedOptionException  [FE]      UnrecognizedOptionException    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]          tokens.add(     "-     ");    tokens.add(  arg);  tokens.add( ".-   ");  tokens.add(  arg);  [BUGGY]      if  (     "--     ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	                tokens.add(       "-       ");        tokens.add(    arg);    tokens.add( ".-   ");  tokens.add(  arg);	  	compilable	  [FE]  UnrecognizedOptionException  	136	13	add
88	[BUG]  [BUGGY]          tokens.add(     "-     ");    tokens.add(  arg);  tokens.add(   "-   ");  tokens.add(  arg;  [CE]  [FE]        UnrecognizedOptionException    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]          tokens.add(     "-     ");    tokens.add(  arg);  tokens.add(   "-   ");  tokens.add(  arg;  [BUGGY]      if  (     "--     ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	                tokens.add(       "-       ");        tokens.add(    arg);    tokens.add(   "-   ");  tokens.add(  arg;	  	non-compiled	[CE]  	136	None	add
89	[BUG]  [BUGGY]  if(!eatTheRest  &&  arg.startsWith(   "-   "))  {  if(!eatTheRest  &&  arg.startsWith( "-   "))  {  [CE]  reached  end  of  file  while  parsing  [FE]    AssertionFailedError    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  if(!eatTheRest  &&  arg.startsWith(   "-   "))  {  if(!eatTheRest  &&  arg.startsWith( "-   "))  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	if(!eatTheRest    &&    arg.startsWith(   "-   "))    {    if(!eatTheRest  &&  arg.startsWith( "-   "))  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	114	None	add
90	[BUG]  [BUGGY]  if(!eatTheRest  &&  arg.startsWith(   "-   "))  {  if(!eatTheRest  &&  arg.startsWith( ".-   "))  {  [CE]  reached  end  of  file  while  parsing  [FE]      AssertionFailedError    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  if(!eatTheRest  &&  arg.startsWith(   "-   "))  {  if(!eatTheRest  &&  arg.startsWith( ".-   "))  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	if(!eatTheRest    &&    arg.startsWith(   "-   "))    {    if(!eatTheRest  &&  arg.startsWith( ".-   "))  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	114	None	add
91	[BUG]  [BUGGY]  if(!eatTheRest  &&  arg.startsWith(   "-   "))  {  if(!eatTheRest  &&  arg.startsWith('-   "))  {  [CE]  unclosed  character  literal  [FE]        AssertionFailedError    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  if(!eatTheRest  &&  arg.startsWith(   "-   "))  {  if(!eatTheRest  &&  arg.startsWith('-   "))  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	if(!eatTheRest    &&    arg.startsWith(   "-   "))    {    if(!eatTheRest  &&  arg.startsWith('-   "))  {	  	non-compiled	[CE]  unclosed  character  literal	114	None	add
92	[BUG]  [BUGGY]  if(!stopAtNonOption)  {  if( "--   ".equals(arg)||!eattheRest)  {  [CE]  reached  end  of  file  while  parsing  [FE]              AssertionFailedError      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  if(!stopAtNonOption)  {  if( "--   ".equals(arg)||!eattheRest)  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	if(!stopAtNonOption)  {  if( "--   ".equals(arg)||!eattheRest)  {	  if(       "--       ".equals(arg)||!eatTheRest)    {    if(       "--       ".equals(arg)||!eattheRest)    {    	non-compiled	[CE]  reached  end  of  file  while  parsing	93	None	replace
93	[BUG]  [BUGGY]  if(arg.startsWith( "- "))  {  if( "--   ".equals(arg)||!eattheRest)  {  [CE]  reached  end  of  file  while  parsing  [FE]                AssertionFailedError      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  if(arg.startsWith( "- "))  {  if( "--   ".equals(arg)||!eattheRest)  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	if(arg.startsWith( "- "))  {  if( "--   ".equals(arg)||!eattheRest)  {	  if(       "--       ".equals(arg)||!eatTheRest)    {    if(       "--       ".equals(arg)||!eattheRest)    {    	non-compiled	[CE]  reached  end  of  file  while  parsing	93	None	replace
94	[BUG]  [BUGGY]  if(!eatTheRest)  {  if(arg.startsWith( "-   "))  {  [CE]  reached  end  of  file  while  parsing  [FE]        AssertionFailedError      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  if(!eatTheRest)  {  if(arg.startsWith( "-   "))  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	if(!eatTheRest)  {  if(arg.startsWith( "-   "))  {	  if(arg.startsWith(       "-       "))    {    if(arg.startsWith(       "-       "))    {    	non-compiled	[CE]  reached  end  of  file  while  parsing	28	None	replace
95	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  if(arg.startsWith( "- ")||  arg.startsWith( "- "))  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	add	if(arg.startsWith( "- ")||  arg.startsWith( "- "))  {	  if(arg.startsWith(       "-       "))    {    if(arg.startsWith(       "-       "))    {    	compilable	  [FE]  AssertionFailedError  	28	14	replace
96	[BUG]  [BUGGY]  if(arg.startsWith( "- ")||  arg.startsWith( "- "))  {  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  if(arg.startsWith( "- ")||  arg.startsWith( "- "))  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	if(arg.startsWith( "- ")||  arg.startsWith( "- "))  {	  if(arg.startsWith(       "-       "))    {    if(arg.startsWith(       "-       "))    {    	compilable	  [FE]  AssertionFailedError  	28	14	replace
97	[BUG]  [BUGGY]  tokens.add(arg.toString()  + ": ");  [CE]  [FE]          MissingArgumentException      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  tokens.add(arg.toString()  + ": ");  [BUGGY]      if  (     "--     ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	tokens.add(arg.toString()  + ": ");	  tokens.add(arg.toString());    	non-compiled	[CE]  	66	None	replace
98	[BUG]  [BUGGY]  tokens.add(arg.toString()  + "  - ");  [CE]  [FE]            MissingArgumentException      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  tokens.add(arg.toString()  + "  - ");  [BUGGY]      if  (     "--     ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	tokens.add(arg.toString()  + "  - ");	  tokens.add(arg.toString());    	non-compiled	[CE]  	66	None	replace
99	[BUG]  [BUGGY]  tokens.add(arg);  if(stopAtNonOption)  {  eatTheRest  =  true;  tokens.add( "-   ");  }  [CE]  [FE]    MissingArgumentException    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  tokens.add(arg);  if(stopAtNonOption)  {  eatTheRest  =  true;  tokens.add( "-   ");  }  [BUGGY]      if  (     "--     ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	tokens.add(arg);  if(stopAtNonOption)  {  eatTheRest  =  true;  tokens.add( "-   ");  }	          tokens.add(arg);    tokens.add(arg);    if(stopAtNonOption)    {    eatTheRest    =    true;    tokens.add(   "-   ");    }    	non-compiled	[CE]  	64	None	replace
100	[BUG]  [BUGGY]  tokens.add(arg);  if(stopAtNonOption)  {  eatTheRest  =  true;  }  [CE]  [FE]      MissingArgumentException    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  tokens.add(arg);  if(stopAtNonOption)  {  eatTheRest  =  true;  }  [BUGGY]      if  (     "--     ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	tokens.add(arg);  if(stopAtNonOption)  {  eatTheRest  =  true;  }	          tokens.add(arg);    tokens.add(arg);    if(stopAtNonOption)    {    eatTheRest    =    true;    tokens.add(   "-   ");    }    	non-compiled	[CE]  	64	None	replace
101	[BUG]  [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(arg,  stopAtNonOption);  [CE]  [FE]                ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(arg,  stopAtNonOption);  [BUGGY]      if  (     "--     ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	TokenBuffer  tokens  =  new  TokenBuffer(arg,  stopAtNonOption);	  TokenBuffer    tokens    =    new    TokenBuffer(opt);    	non-compiled	[CE]  	82	None	replace
102	[BUG]  [BUGGY]  tokens.add(arg,  i  +  1);  [CE]  [FE]        MissingArgumentException      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  tokens.add(arg,  i  +  1);  [BUGGY]      if  (     "--     ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	tokens.add(arg,  i  +  1);	  tokens.add(arg    +    1);    	non-compiled	[CE]  	120	None	replace
103	[BUG]  [BUGGY]  tokens.add(arg  +  1,  i);  [CE]  [FE]          MissingArgumentException      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  tokens.add(arg  +  1,  i);  [BUGGY]      if  (     "--     ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	tokens.add(arg  +  1,  i);	  tokens.add(arg    +    1);    	non-compiled	[CE]  	120	None	replace
104	[BUG]  [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(tokens,  i);  [CE]  [FE]            ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(tokens,  i);  [BUGGY]      if  (     "--     ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	TokenBuffer  tokens  =  new  TokenBuffer(tokens,  i);	  TokenBuffer    tokens    =    new    TokenBuffer(arg,    i);    	non-compiled	[CE]  	133	None	replace
105	[BUG]  [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(arg,  i  +  1);  [CE]  [FE]              ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(arg,  i  +  1);  [BUGGY]      if  (     "--     ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	TokenBuffer  tokens  =  new  TokenBuffer(arg,  i  +  1);	  TokenBuffer    tokens    =    new    TokenBuffer(arg,    i);    	non-compiled	[CE]  	133	None	replace
106	[BUG]  [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(arg,  0);  [CE]  [FE]                ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(arg,  0);  [BUGGY]      if  (     "--     ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	TokenBuffer  tokens  =  new  TokenBuffer(arg,  0);	  TokenBuffer    tokens    =    new    TokenBuffer(arg,    i);    	non-compiled	[CE]  	133	None	replace
107	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    AssertionFailedError    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  if(arg.equals( "-- ")&&  arg.startsWith( "-- "))  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	add	if(arg.equals( "-- ")&&  arg.startsWith( "-- "))  {	  if(arg.equals(   "--   ")||    arg.startsWith(   "--   "))    {    	compilable	  [FE]  ComparisonFailure  	20	3	replace
108	[BUG]  [BUGGY]  if(arg.equals( "-- ")&&  arg.startsWith( "-- "))  {  [FE]  ComparisonFailure  [FE]    AssertionFailedError    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  if(arg.equals( "-- ")&&  arg.startsWith( "-- "))  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	if(arg.equals( "-- ")&&  arg.startsWith( "-- "))  {	  if(arg.equals(   "--   ")||    arg.startsWith(   "--   "))    {    	compilable	  [FE]  ComparisonFailure  	20	3	replace
109	[BUG]  [BUGGY]  if(arg.equals( "-- ")||  arg.startsWith( "--))  {  [CE]  unclosed  string  literal  [FE]      AssertionFailedError    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  if(arg.equals( "-- ")||  arg.startsWith( "--))  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	if(arg.equals( "-- ")||  arg.startsWith( "--))  {	  if(arg.equals(   "--   ")||    arg.startsWith(   "--   "))    {    	non-compiled	[CE]  unclosed  string  literal	20	None	replace
110	[BUG]  [BUGGY]  if(arg.equals( "--)||  arg.startsWith( "-- "))  {  [CE]  unclosed  string  literal  [FE]        AssertionFailedError    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  if(arg.equals( "--)||  arg.startsWith( "-- "))  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	if(arg.equals( "--)||  arg.startsWith( "-- "))  {	  if(arg.equals(   "--   ")||    arg.startsWith(   "--   "))    {    	non-compiled	[CE]  unclosed  string  literal	20	None	replace
111	[BUG]  [BUGGY]  [FE]  UnrecognizedOptionException  [FE]    UnrecognizedOptionException    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]          tokens.add(     "-     ");    tokens.add(   "-     ");  tokens.add( "-   ");  tokens.add( "-   ");  [BUGGY]      if  (     "--     ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	add	                tokens.add(       "-       ");        tokens.add(   "-       ");    tokens.add( "-   ");  tokens.add( "-   ");	  	compilable	  [FE]  UnrecognizedOptionException  	35	13	add
112	[BUG]  [BUGGY]          tokens.add(     "-     ");    tokens.add(   "-     ");  tokens.add( "-   ");  tokens.add( "-   ");  [FE]  UnrecognizedOptionException  [FE]    UnrecognizedOptionException    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]          tokens.add(     "-     ");    tokens.add(   "-     ");  tokens.add( "-   ");  tokens.add( "-   ");  [BUGGY]      if  (     "--     ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	                tokens.add(       "-       ");        tokens.add(   "-       ");    tokens.add( "-   ");  tokens.add( "-   ");	  	compilable	  [FE]  UnrecognizedOptionException  	35	13	add
113	[BUG]  [BUGGY]  [FE]  UnrecognizedOptionException  [FE]      UnrecognizedOptionException    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]          tokens.add(     "-     ");    tokens.add(   "-     ");  tokens.add( ",-   ");  tokens.add( "-   ");  [BUGGY]      if  (     "--     ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	add	                tokens.add(       "-       ");        tokens.add(   "-       ");    tokens.add( ",-   ");  tokens.add( "-   ");	  	compilable	  [FE]  UnrecognizedOptionException  	35	13	add
114	[BUG]  [BUGGY]          tokens.add(     "-     ");    tokens.add(   "-     ");  tokens.add( ",-   ");  tokens.add( "-   ");  [FE]  UnrecognizedOptionException  [FE]      UnrecognizedOptionException    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]          tokens.add(     "-     ");    tokens.add(   "-     ");  tokens.add( ",-   ");  tokens.add( "-   ");  [BUGGY]      if  (     "--     ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	                tokens.add(       "-       ");        tokens.add(   "-       ");    tokens.add( ",-   ");  tokens.add( "-   ");	  	compilable	  [FE]  UnrecognizedOptionException  	35	13	add
115	[BUG]  [BUGGY]  [FE]  ArrayStoreException  [FE]        UnrecognizedOptionException    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]          tokens.add(     "-     ");    tokens.add(   "-     ");  tokens.add('-');  tokens.add( "-   ");  [BUGGY]      if  (     "--     ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	add	                tokens.add(       "-       ");        tokens.add(   "-       ");    tokens.add('-');  tokens.add( "-   ");	  	compilable	  [FE]  ArrayStoreException  	35	14	add
116	[BUG]  [BUGGY]          tokens.add(     "-     ");    tokens.add(   "-     ");  tokens.add('-');  tokens.add( "-   ");  [FE]  ArrayStoreException  [FE]        UnrecognizedOptionException    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]          tokens.add(     "-     ");    tokens.add(   "-     ");  tokens.add('-');  tokens.add( "-   ");  [BUGGY]      if  (     "--     ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	                tokens.add(       "-       ");        tokens.add(   "-       ");    tokens.add('-');  tokens.add( "-   ");	  	compilable	  [FE]  ArrayStoreException  	35	14	add
117	[BUG]  [BUGGY]  tokens  =  new  ArrayList  <  String>();  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  tokens  =  new  ArrayList  <  String>();  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	tokens  =  new  ArrayList  <  String>();	  tokens    =    new    ArrayList();    	non-compiled	[CE]  	26	None	replace
118	[BUG]  [BUGGY]  tokens  =  new  ArrayList(arguments[i]);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  tokens  =  new  ArrayList(arguments[i]);  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	tokens  =  new  ArrayList(arguments[i]);	  tokens    =    new    ArrayList();    	non-compiled	[CE]  	26	None	replace
119	[BUG]  [BUGGY]  tokens  =  new  ArrayList(arg.length);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  tokens  =  new  ArrayList(arg.length);  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	tokens  =  new  ArrayList(arg.length);	  tokens    =    new    ArrayList();    	non-compiled	[CE]  	26	None	replace
120	[BUG]  [BUGGY]  [FE]  MissingArgumentException  [FE]    MissingArgumentException    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]          tokens.add(arg);    tokens.remove(arg);  tokens.add(arg);  tokens.remove(arg);  [BUGGY]      if  (     "--     ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	add	                tokens.add(arg);        tokens.remove(arg);    tokens.add(arg);  tokens.remove(arg);	  	compilable	  [FE]  MissingArgumentException  	154	4	add
121	[BUG]  [BUGGY]          tokens.add(arg);    tokens.remove(arg);  tokens.add(arg);  tokens.remove(arg);  [FE]  MissingArgumentException  [FE]    MissingArgumentException    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]          tokens.add(arg);    tokens.remove(arg);  tokens.add(arg);  tokens.remove(arg);  [BUGGY]      if  (     "--     ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	                tokens.add(arg);        tokens.remove(arg);    tokens.add(arg);  tokens.remove(arg);	  	compilable	  [FE]  MissingArgumentException  	154	4	add
122	[BUG]  [BUGGY]  [FE]  MissingArgumentException  [FE]      MissingArgumentException    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]          tokens.add(arg);    tokens.remove(arg);  tokens.remove(arg);  tokens.remove(arg);  [BUGGY]      if  (     "--     ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	add	                tokens.add(arg);        tokens.remove(arg);    tokens.remove(arg);  tokens.remove(arg);	  	compilable	  [FE]  MissingArgumentException  	154	4	add
123	[BUG]  [BUGGY]          tokens.add(arg);    tokens.remove(arg);  tokens.remove(arg);  tokens.remove(arg);  [FE]  MissingArgumentException  [FE]      MissingArgumentException    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]          tokens.add(arg);    tokens.remove(arg);  tokens.remove(arg);  tokens.remove(arg);  [BUGGY]      if  (     "--     ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	                tokens.add(arg);        tokens.remove(arg);    tokens.remove(arg);  tokens.remove(arg);	  	compilable	  [FE]  MissingArgumentException  	154	4	add
124	[BUG]  [BUGGY]          tokens.add(arg);    tokens.remove(arg);  Tokens.add(arg);  tokens.remove(arg);  [CE]  cannot  find  symbol  Tokens  [FE]        MissingArgumentException    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]          tokens.add(arg);    tokens.remove(arg);  Tokens.add(arg);  tokens.remove(arg);  [BUGGY]      if  (     "--     ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	                tokens.add(arg);        tokens.remove(arg);    Tokens.add(arg);  tokens.remove(arg);	  	non-compiled	[CE]  cannot  find  symbol  Tokens	154	None	add
125	[BUG]  [BUGGY]          tokens.add(arg);    tokens.remove(arg);  tokens.add(arg);  tos.remove(arg);  [CE]  cannot  find  symbol  tos  [FE]          MissingArgumentException    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]          tokens.add(arg);    tokens.remove(arg);  tokens.add(arg);  tos.remove(arg);  [BUGGY]      if  (     "--     ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	                tokens.add(arg);        tokens.remove(arg);    tokens.add(arg);  tos.remove(arg);	  	non-compiled	[CE]  cannot  find  symbol  tos	154	None	add
126	[BUG]  [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(tokens,  opt.length());  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(tokens,  opt.length());  [BUGGY]      if  (     "--     ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	TokenBuffer  tokens  =  new  TokenBuffer(tokens,  opt.length());	  TokenBuffer    tokens    =    new    TokenBuffer(arg,    opt.length());    	non-compiled	[CE]  	140	None	replace
127	[BUG]  [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(tokens,  arg.length());  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(tokens,  arg.length());  [BUGGY]      if  (     "--     ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	TokenBuffer  tokens  =  new  TokenBuffer(tokens,  arg.length());	  TokenBuffer    tokens    =    new    TokenBuffer(arg,    opt.length());    	non-compiled	[CE]  	140	None	replace
128	[BUG]  [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(arg,  arg.length()  -  1);  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(arg,  arg.length()  -  1);  [BUGGY]      if  (     "--     ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	TokenBuffer  tokens  =  new  TokenBuffer(arg,  arg.length()  -  1);	  TokenBuffer    tokens    =    new    TokenBuffer(arg,    opt.length());    	non-compiled	[CE]  	140	None	replace
129	[BUG]  [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(arg,  arg.length()  +  1);  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(arg,  arg.length()  +  1);  [BUGGY]      if  (     "--     ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	TokenBuffer  tokens  =  new  TokenBuffer(arg,  arg.length()  +  1);	  TokenBuffer    tokens    =    new    TokenBuffer(arg,    opt.length());    	non-compiled	[CE]  	140	None	replace
130	[BUG]  [BUGGY]  String[]  arg  =  options.getOptionArg(i);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  String[]  arg  =  options.getOptionArg(i);  [BUGGY]      if  (     "--     ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	String[]  arg  =  options.getOptionArg(i);	  String[]    arg    =    options.getOptionArgs();    	non-compiled	[CE]  	150	None	replace
131	[BUG]  [BUGGY]  String[]  arg  =  options.getOptionArg(opt);  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  String[]  arg  =  options.getOptionArg(opt);  [BUGGY]      if  (     "--     ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	String[]  arg  =  options.getOptionArg(opt);	  String[]    arg    =    options.getOptionArgs();    	non-compiled	[CE]  	150	None	replace
132	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  if(arg.equals( "-- ")&&  stopAtNonOption)  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	add	if(arg.equals( "-- ")&&  stopAtNonOption)  {	  if(   "--       ".equals(arg)&&    eatTheRest)    {    	compilable	  [FE]  ComparisonFailure  	34	3	replace
133	[BUG]  [BUGGY]  if(arg.equals( "-- ")&&  stopAtNonOption)  {  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  if(arg.equals( "-- ")&&  stopAtNonOption)  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	if(arg.equals( "-- ")&&  stopAtNonOption)  {	  if(   "--       ".equals(arg)&&    eatTheRest)    {    	compilable	  [FE]  ComparisonFailure  	34	3	replace
134	[BUG]  [BUGGY]  if(!stopAtNonOption.equals(arg)||  eatTheRest)  {  [CE]  boolean  cannot  be  dereferenced  [FE]          AssertionFailedError      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  if(!stopAtNonOption.equals(arg)||  eatTheRest)  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	if(!stopAtNonOption.equals(arg)||  eatTheRest)  {	  if(!opt.equals(arg)||    eatTheRest)    {    	non-compiled	[CE]  boolean  cannot  be  dereferenced	3	None	replace
135	[BUG]  [BUGGY]  if(!stopAtNonOption.equals(arg)&&  eatTheRest)  {  [CE]  boolean  cannot  be  dereferenced  [FE]            AssertionFailedError      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  if(!stopAtNonOption.equals(arg)&&  eatTheRest)  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	if(!stopAtNonOption.equals(arg)&&  eatTheRest)  {	  if(!opt.equals(arg)||    eatTheRest)    {    	non-compiled	[CE]  boolean  cannot  be  dereferenced	3	None	replace
136	[BUG]  [BUGGY]  if(!stopAtNonOption.equals(arg)||  eattheRest)  {  [CE]  boolean  cannot  be  dereferenced  [FE]              AssertionFailedError      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  if(!stopAtNonOption.equals(arg)||  eattheRest)  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	if(!stopAtNonOption.equals(arg)||  eattheRest)  {	  if(!opt.equals(arg)||    eatTheRest)    {    	non-compiled	[CE]  boolean  cannot  be  dereferenced	3	None	replace
137	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  if(!tokens.equals(arg)||  eatTheRest)  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	add	if(!tokens.equals(arg)||  eatTheRest)  {	  if(!opt.equals(arg)||    eatTheRest)    {    	compilable	  [FE]  AssertionFailedError  	3	14	replace
138	[BUG]  [BUGGY]  if(!tokens.equals(arg)||  eatTheRest)  {  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  if(!tokens.equals(arg)||  eatTheRest)  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	if(!tokens.equals(arg)||  eatTheRest)  {	  if(!opt.equals(arg)||    eatTheRest)    {    	compilable	  [FE]  AssertionFailedError  	3	14	replace
139	[BUG]  [BUGGY]  String[]  arg  =  options.toArray(arguments[i])+  2;  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  String[]  arg  =  options.toArray(arguments[i])+  2;  [BUGGY]      if  (     "--     ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	String[]  arg  =  options.toArray(arguments[i])+  2;	  String[]    arg    =    options.toArray(arguments[i])+    1;    	non-compiled	[CE]  	48	None	replace
140	[BUG]  [BUGGY]  String[]  arg  =  options.toArray(arguments[i])/  1;  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  String[]  arg  =  options.toArray(arguments[i])/  1;  [BUGGY]      if  (     "--     ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	String[]  arg  =  options.toArray(arguments[i])/  1;	  String[]    arg    =    options.toArray(arguments[i])+    1;    	non-compiled	[CE]  	48	None	replace
141	[BUG]  [BUGGY]  String[]  arg  =  options.toArray(arguments[i])+  3;  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  String[]  arg  =  options.toArray(arguments[i])+  3;  [BUGGY]      if  (     "--     ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	String[]  arg  =  options.toArray(arguments[i])+  3;	  String[]    arg    =    options.toArray(arguments[i])+    1;    	non-compiled	[CE]  	48	None	replace
142	[BUG]  [BUGGY]  if(arg.equals(   "--   ")||  arg.startsWith(   "--   "))  {  if(arg.equals(   "--   ")||  arg.startsWith( "--   "))  {  [CE]  reached  end  of  file  while  parsing  [FE]    AssertionFailedError    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  if(arg.equals(   "--   ")||  arg.startsWith(   "--   "))  {  if(arg.equals(   "--   ")||  arg.startsWith( "--   "))  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	if(arg.equals(   "--   ")||    arg.startsWith(   "--   "))    {    if(arg.equals(   "--   ")||  arg.startsWith( "--   "))  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	19	None	add
143	[BUG]  [BUGGY]  if(arg.equals(   "--   ")||  arg.startsWith(   "--   "))  {  if(arg.equals(   "--   ")||  arg.startsWith( ".--   "))  {  [CE]  reached  end  of  file  while  parsing  [FE]      AssertionFailedError    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  if(arg.equals(   "--   ")||  arg.startsWith(   "--   "))  {  if(arg.equals(   "--   ")||  arg.startsWith( ".--   "))  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	if(arg.equals(   "--   ")||    arg.startsWith(   "--   "))    {    if(arg.equals(   "--   ")||  arg.startsWith( ".--   "))  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	19	None	add
144	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  if(arg.equals( "-- ")||!arg.startsWith( "--   "))  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	add	if(arg.equals( "-- ")||!arg.startsWith( "--   "))  {	  if(   "--       ".equals(arg)||!arg.startsWith(   "--   "))    {    	compilable	  [FE]  AssertionFailedError  	25	14	replace
145	[BUG]  [BUGGY]  if(arg.equals( "-- ")||!arg.startsWith( "--   "))  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  if(arg.equals( "-- ")||!arg.startsWith( "--   "))  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	if(arg.equals( "-- ")||!arg.startsWith( "--   "))  {	  if(   "--       ".equals(arg)||!arg.startsWith(   "--   "))    {    	compilable	  [FE]  AssertionFailedError  	25	14	replace
146	[BUG]  [BUGGY]  if(arg.startsWith( "- "))  {  if( ".--   ".equals(arg)||!stopAtNonOption)  {  [CE]  reached  end  of  file  while  parsing  [FE]          AssertionFailedError      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  if(arg.startsWith( "- "))  {  if( ".--   ".equals(arg)||!stopAtNonOption)  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	if(arg.startsWith( "- "))  {  if( ".--   ".equals(arg)||!stopAtNonOption)  {	  if(       "--       ".equals(arg)||!stopAtNonOption)    {    if(   ".--       ".equals(arg)||!stopAtNonOption)    {    	non-compiled	[CE]  reached  end  of  file  while  parsing	76	None	replace
147	[BUG]  [BUGGY]  if(opt.equals(arg)||!stopAtNonOption.startsWith( "--   "))  {  [CE]  cannot  find  symbol  opt  [FE]                ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  if(opt.equals(arg)||!stopAtNonOption.startsWith( "--   "))  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	if(opt.equals(arg)||!stopAtNonOption.startsWith( "--   "))  {	  if(arg.equals(arg)||!stopAtNonOption.startsWith(   "--       "))    {    	non-compiled	[CE]  cannot  find  symbol  opt	21	None	replace
148	[BUG]  [BUGGY]  if(options.equals(arg)||!stopAtNonOption.startsWith( "-- "))  {  [CE]  boolean  cannot  be  dereferenced  [FE]                  ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  if(options.equals(arg)||!stopAtNonOption.startsWith( "-- "))  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	if(options.equals(arg)||!stopAtNonOption.startsWith( "-- "))  {	  if(arg.equals(arg)||!stopAtNonOption.startsWith(   "--       "))    {    	non-compiled	[CE]  boolean  cannot  be  dereferenced	21	None	replace
149	[BUG]  [BUGGY]  if(!stopAtNonOption.equals(arg)||!stopAtNonOption)  {  [CE]  boolean  cannot  be  dereferenced  [FE]    AssertionFailedError    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  if(!stopAtNonOption.equals(arg)||!stopAtNonOption)  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	if(!stopAtNonOption.equals(arg)||!stopAtNonOption)  {	  if(!   "--   ".equals(arg)||!stopAtNonOption)    {    	non-compiled	[CE]  boolean  cannot  be  dereferenced	11	None	replace
150	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  if(!   "--   ".equals(arg)&&!stopAtNonOption)  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	add	if(!   "--   ".equals(arg)&&!stopAtNonOption)  {	  if(!   "--   ".equals(arg)||!stopAtNonOption)    {    	compilable	  [FE]  AssertionFailedError  	11	13	replace
151	[BUG]  [BUGGY]  if(!   "--   ".equals(arg)&&!stopAtNonOption)  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  if(!   "--   ".equals(arg)&&!stopAtNonOption)  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	if(!   "--   ".equals(arg)&&!stopAtNonOption)  {	  if(!   "--   ".equals(arg)||!stopAtNonOption)    {    	compilable	  [FE]  AssertionFailedError  	11	13	replace
152	[BUG]  [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(tokens,  options.size());  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(tokens,  options.size());  [BUGGY]      if  (     "--     ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	TokenBuffer  tokens  =  new  TokenBuffer(tokens,  options.size());	  TokenBuffer    tokens    =    new    TokenBuffer(tokens,    opt.size());    	non-compiled	[CE]  	59	None	replace
153	[BUG]  [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(tokens,  opt.size()  -  1);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(tokens,  opt.size()  -  1);  [BUGGY]      if  (     "--     ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	TokenBuffer  tokens  =  new  TokenBuffer(tokens,  opt.size()  -  1);	  TokenBuffer    tokens    =    new    TokenBuffer(tokens,    opt.size());    	non-compiled	[CE]  	59	None	replace
154	[BUG]  [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(tokens,  opt.size()  +  1);  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(tokens,  opt.size()  +  1);  [BUGGY]      if  (     "--     ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	TokenBuffer  tokens  =  new  TokenBuffer(tokens,  opt.size()  +  1);	  TokenBuffer    tokens    =    new    TokenBuffer(tokens,    opt.size());    	non-compiled	[CE]  	59	None	replace
155	[BUG]  [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(tokens,  arguments.size());  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(tokens,  arguments.size());  [BUGGY]      if  (     "--     ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	TokenBuffer  tokens  =  new  TokenBuffer(tokens,  arguments.size());	  TokenBuffer    tokens    =    new    TokenBuffer(tokens,    opt.size());    	non-compiled	[CE]  	59	None	replace
156	[BUG]  [BUGGY]  if(arg.startsWith(   "--   "))  {  if(arg.startsWith(   "--   "))  {  [CE]  reached  end  of  file  while  parsing  [FE]    AssertionFailedError    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  if(arg.startsWith(   "--   "))  {  if(arg.startsWith(   "--   "))  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	if(arg.startsWith(   "--   "))    {    if(arg.startsWith(   "--   "))  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	4	None	add
157	[BUG]  [BUGGY]  if(arg.startsWith(   "--   "))  {  if(arg.startsWith( ".--   "))  {  [CE]  reached  end  of  file  while  parsing  [FE]      AssertionFailedError    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  if(arg.startsWith(   "--   "))  {  if(arg.startsWith( ".--   "))  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	if(arg.startsWith(   "--   "))    {    if(arg.startsWith( ".--   "))  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	4	None	add
158	[BUG]  [BUGGY]  String[]  arg  =  options.get(i,  null);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  String[]  arg  =  options.get(i,  null);  [BUGGY]      if  (     "--     ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	String[]  arg  =  options.get(i,  null);	  String[]    arg    =    options.get(opt,    null);    	non-compiled	[CE]  	158	None	replace
159	[BUG]  [BUGGY]  String[]  arg  =  options.get(opt,  arguments);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  String[]  arg  =  options.get(opt,  arguments);  [BUGGY]      if  (     "--     ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	String[]  arg  =  options.get(opt,  arguments);	  String[]    arg    =    options.get(opt,    null);    	non-compiled	[CE]  	158	None	replace
160	[BUG]  [BUGGY]  String[]  arg  =  options.get(opt,  tokens);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  String[]  arg  =  options.get(opt,  tokens);  [BUGGY]      if  (     "--     ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	String[]  arg  =  options.get(opt,  tokens);	  String[]    arg    =    options.get(opt,    null);    	non-compiled	[CE]  	158	None	replace
161	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  if(stopAtNonOption  &&!arg.startsWith( "-   "))  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	add	if(stopAtNonOption  &&!arg.startsWith( "-   "))  {	  if(stopAtNonOption    ||!arg.startsWith(   "-   "))    {    	compilable	  [FE]  AssertionFailedError  	72	6	replace
162	[BUG]  [BUGGY]  if(stopAtNonOption  &&!arg.startsWith( "-   "))  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  if(stopAtNonOption  &&!arg.startsWith( "-   "))  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	if(stopAtNonOption  &&!arg.startsWith( "-   "))  {	  if(stopAtNonOption    ||!arg.startsWith(   "-   "))    {    	compilable	  [FE]  AssertionFailedError  	72	6	replace
163	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  if(!stopAtNonOption  &&!arg.startsWith( "-   "))  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	add	if(!stopAtNonOption  &&!arg.startsWith( "-   "))  {	  if(stopAtNonOption    ||!arg.startsWith(   "-   "))    {    	compilable	  [FE]  AssertionFailedError  	72	13	replace
164	[BUG]  [BUGGY]  if(!stopAtNonOption  &&!arg.startsWith( "-   "))  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  if(!stopAtNonOption  &&!arg.startsWith( "-   "))  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	if(!stopAtNonOption  &&!arg.startsWith( "-   "))  {	  if(stopAtNonOption    ||!arg.startsWith(   "-   "))    {    	compilable	  [FE]  AssertionFailedError  	72	13	replace
165	[BUG]  [BUGGY]  if(!     "--   ".equals(arg)||  stopAtNonOption)  {  if(!   "--   ".equals(arg)||  stopAtNonOption)  {  [CE]  reached  end  of  file  while  parsing  [FE]    AssertionFailedError    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  if(!     "--   ".equals(arg)||  stopAtNonOption)  {  if(!   "--   ".equals(arg)||  stopAtNonOption)  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	if(!       "--   ".equals(arg)||    stopAtNonOption)    {    if(!   "--   ".equals(arg)||  stopAtNonOption)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	1	None	add
166	[BUG]  [BUGGY]  if(!     "--   ".equals(arg)||  stopAtNonOption)  {  If(!   "--   ".equals(arg)||  stopAtNonOption)  {  [CE]  [FE]      AssertionFailedError    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  if(!     "--   ".equals(arg)||  stopAtNonOption)  {  If(!   "--   ".equals(arg)||  stopAtNonOption)  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	if(!       "--   ".equals(arg)||    stopAtNonOption)    {    If(!   "--   ".equals(arg)||  stopAtNonOption)  {	  	non-compiled	[CE]  	1	None	add
167	[BUG]  [BUGGY]  if(arg.equals(   "-   "))  {  if(arg.equals(   "-   "))  {  [CE]  reached  end  of  file  while  parsing  [FE]    AssertionFailedError    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  if(arg.equals(   "-   "))  {  if(arg.equals(   "-   "))  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	if(arg.equals(   "-   "))    {    if(arg.equals(   "-   "))  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	6	None	add
168	[BUG]  [BUGGY]  if(arg.equals(   "-   "))  {  if(arg.equals( ".-   "))  {  [CE]  reached  end  of  file  while  parsing  [FE]      AssertionFailedError    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  if(arg.equals(   "-   "))  {  if(arg.equals( ".-   "))  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	if(arg.equals(   "-   "))    {    if(arg.equals( ".-   "))  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	6	None	add
169	[BUG]  [BUGGY]  if(arg.equals(   "-   "))  {  If(arg.equals(   "-   "))  {  [CE]  [FE]        AssertionFailedError    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  if(arg.equals(   "-   "))  {  If(arg.equals(   "-   "))  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	if(arg.equals(   "-   "))    {    If(arg.equals(   "-   "))  {	  	non-compiled	[CE]  	6	None	add
170	[BUG]  [BUGGY]  [FE]  MissingArgumentException  [FE]    MissingArgumentException    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]          tokens.add(arg);    tokens.add(arg);  tokens.add(arg);  tokens.add(arg);  [BUGGY]      if  (     "--     ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	add	                tokens.add(arg);        tokens.add(arg);    tokens.add(arg);  tokens.add(arg);	  	compilable	  [FE]  MissingArgumentException  	60	11	add
171	[BUG]  [BUGGY]          tokens.add(arg);    tokens.add(arg);  tokens.add(arg);  tokens.add(arg);  [FE]  MissingArgumentException  [FE]    MissingArgumentException    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]          tokens.add(arg);    tokens.add(arg);  tokens.add(arg);  tokens.add(arg);  [BUGGY]      if  (     "--     ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	                tokens.add(arg);        tokens.add(arg);    tokens.add(arg);  tokens.add(arg);	  	compilable	  [FE]  MissingArgumentException  	60	11	add
172	[BUG]  [BUGGY]  [FE]  MissingArgumentException  [FE]      MissingArgumentException    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]          tokens.add(arg);    tokens.add(arg);  tokens.remove(arg);  tokens.add(arg);  [BUGGY]      if  (     "--     ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	add	                tokens.add(arg);        tokens.add(arg);    tokens.remove(arg);  tokens.add(arg);	  	compilable	  [FE]  MissingArgumentException  	60	11	add
173	[BUG]  [BUGGY]          tokens.add(arg);    tokens.add(arg);  tokens.remove(arg);  tokens.add(arg);  [FE]  MissingArgumentException  [FE]      MissingArgumentException    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]          tokens.add(arg);    tokens.add(arg);  tokens.remove(arg);  tokens.add(arg);  [BUGGY]      if  (     "--     ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	                tokens.add(arg);        tokens.add(arg);    tokens.remove(arg);  tokens.add(arg);	  	compilable	  [FE]  MissingArgumentException  	60	11	add
174	[BUG]  [BUGGY]          tokens.add(arg);    tokens.add(arg);  Tokens.add(arg);  tokens.add(arg);  [CE]  cannot  find  symbol  Tokens  [FE]        MissingArgumentException    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]          tokens.add(arg);    tokens.add(arg);  Tokens.add(arg);  tokens.add(arg);  [BUGGY]      if  (     "--     ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	                tokens.add(arg);        tokens.add(arg);    Tokens.add(arg);  tokens.add(arg);	  	non-compiled	[CE]  cannot  find  symbol  Tokens	60	None	add
175	[BUG]  [BUGGY]          tokens.add(arg);    tokens.add(arg);  tokens.add(arg);  tos.add(arg);  [CE]  cannot  find  symbol  tos  [FE]          MissingArgumentException    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]          tokens.add(arg);    tokens.add(arg);  tokens.add(arg);  tos.add(arg);  [BUGGY]      if  (     "--     ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	                tokens.add(arg);        tokens.add(arg);    tokens.add(arg);  tos.add(arg);	  	non-compiled	[CE]  cannot  find  symbol  tos	60	None	add
176	[BUG]  [BUGGY]  if(arg.startsWith(   "-   ")||!eatTheRest)  {  if(arg.startsWith(   "-   ")||!eatTheRest)  {  [CE]  reached  end  of  file  while  parsing  [FE]    AssertionFailedError    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  if(arg.startsWith(   "-   ")||!eatTheRest)  {  if(arg.startsWith(   "-   ")||!eatTheRest)  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	if(arg.startsWith(   "-   ")||!eatTheRest)    {    if(arg.startsWith(   "-   ")||!eatTheRest)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	112	None	add
177	[BUG]  [BUGGY]  if(arg.startsWith(   "-   ")||!eatTheRest)  {  if(arg.startsWith(   "-   ")||!eattheRest)  {  [CE]  reached  end  of  file  while  parsing  [FE]      AssertionFailedError    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  if(arg.startsWith(   "-   ")||!eatTheRest)  {  if(arg.startsWith(   "-   ")||!eattheRest)  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	if(arg.startsWith(   "-   ")||!eatTheRest)    {    if(arg.startsWith(   "-   ")||!eattheRest)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	112	None	add
178	[BUG]  [BUGGY]  if(arg.startsWith(   "-   ")||!eatTheRest)  {  If(arg.startsWith(   "-   ")||!eatTheRest)  {  [CE]  [FE]        AssertionFailedError    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  if(arg.startsWith(   "-   ")||!eatTheRest)  {  If(arg.startsWith(   "-   ")||!eatTheRest)  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	if(arg.startsWith(   "-   ")||!eatTheRest)    {    If(arg.startsWith(   "-   ")||!eatTheRest)  {	  	non-compiled	[CE]  	112	None	add
179	[BUG]  [BUGGY]  if(arg.startsWith( "-- "))  {  if( "--   ".equals(arg)||  arg.startsWith( "--   "))  {  [CE]  reached  end  of  file  while  parsing  [FE]        AssertionFailedError      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  if(arg.startsWith( "-- "))  {  if( "--   ".equals(arg)||  arg.startsWith( "--   "))  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	if(arg.startsWith( "-- "))  {  if( "--   ".equals(arg)||  arg.startsWith( "--   "))  {	  if(       "--       ".equals(arg)||    arg.startsWith(       "--       "))    {    if(       "--       ".equals(arg)||    arg.startsWith(       "--       "))    {    	non-compiled	[CE]  reached  end  of  file  while  parsing	52	None	replace
180	[BUG]  [BUGGY]  if(arg.startsWith( "- "))  {  if( "--   ".equals(arg)||  arg.startsWith( "--   "))  {  [CE]  reached  end  of  file  while  parsing  [FE]          AssertionFailedError      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  if(arg.startsWith( "- "))  {  if( "--   ".equals(arg)||  arg.startsWith( "--   "))  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	if(arg.startsWith( "- "))  {  if( "--   ".equals(arg)||  arg.startsWith( "--   "))  {	  if(       "--       ".equals(arg)||    arg.startsWith(       "--       "))    {    if(       "--       ".equals(arg)||    arg.startsWith(       "--       "))    {    	non-compiled	[CE]  reached  end  of  file  while  parsing	52	None	replace
181	[BUG]  [BUGGY]  [FE]  UnrecognizedOptionException  [FE]    UnrecognizedOptionException    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]          tokens.add(     "-     ");    tokens.add(   ",-     ");  tokens.add( "-   ");  tokens.add(   ",-   ");  [BUGGY]      if  (     "--     ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	add	                tokens.add(       "-       ");        tokens.add(   ",-       ");    tokens.add( "-   ");  tokens.add(   ",-   ");	  	compilable	  [FE]  UnrecognizedOptionException  	39	13	add
182	[BUG]  [BUGGY]          tokens.add(     "-     ");    tokens.add(   ",-     ");  tokens.add( "-   ");  tokens.add(   ",-   ");  [FE]  UnrecognizedOptionException  [FE]    UnrecognizedOptionException    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]          tokens.add(     "-     ");    tokens.add(   ",-     ");  tokens.add( "-   ");  tokens.add(   ",-   ");  [BUGGY]      if  (     "--     ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	                tokens.add(       "-       ");        tokens.add(   ",-       ");    tokens.add( "-   ");  tokens.add(   ",-   ");	  	compilable	  [FE]  UnrecognizedOptionException  	39	13	add
183	[BUG]  [BUGGY]  if(!stopAtNonOption)  {  If(!   "--   ".equals(arg)||  eatTheRest)  {  [CE]  [FE]        AssertionFailedError      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  if(!stopAtNonOption)  {  If(!   "--   ".equals(arg)||  eatTheRest)  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	if(!stopAtNonOption)  {  If(!   "--   ".equals(arg)||  eatTheRest)  {	  if(!       "--       ".equals(arg)||    eatTheRest)    {    If(!       "--       ".equals(arg)||    eatTheRest)    {    	non-compiled	[CE]  	119	None	replace
184	[BUG]  [BUGGY]  if(!   "-- ".equals(arg)||  stopAtNonOption)  {  If(! "-- ".equals(arg)||  eatTheRest)  {  [CE]  [FE]          AssertionFailedError      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  if(!   "-- ".equals(arg)||  stopAtNonOption)  {  If(! "-- ".equals(arg)||  eatTheRest)  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	if(!   "-- ".equals(arg)||  stopAtNonOption)  {  If(! "-- ".equals(arg)||  eatTheRest)  {	  if(!       "--       ".equals(arg)||    eatTheRest)    {    If(!       "--       ".equals(arg)||    eatTheRest)    {    	non-compiled	[CE]  	119	None	replace
185	[BUG]  [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(arg.length(),  arg.length()  +  1);  [CE]  [FE]                ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(arg.length(),  arg.length()  +  1);  [BUGGY]      if  (     "--     ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	TokenBuffer  tokens  =  new  TokenBuffer(arg.length(),  arg.length()  +  1);	  TokenBuffer    tokens    =    new    TokenBuffer(arg.length(),    arg.length());    	non-compiled	[CE]  	138	None	replace
186	[BUG]  [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(arg.length(),  arg.length()  -  1);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(arg.length(),  arg.length()  -  1);  [BUGGY]      if  (     "--     ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	TokenBuffer  tokens  =  new  TokenBuffer(arg.length(),  arg.length()  -  1);	  TokenBuffer    tokens    =    new    TokenBuffer(arg.length(),    arg.length());    	non-compiled	[CE]  	138	None	replace
187	[BUG]  [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(arg.length()  -  1,  arg.length());  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(arg.length()  -  1,  arg.length());  [BUGGY]      if  (     "--     ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	TokenBuffer  tokens  =  new  TokenBuffer(arg.length()  -  1,  arg.length());	  TokenBuffer    tokens    =    new    TokenBuffer(arg.length(),    arg.length());    	non-compiled	[CE]  	138	None	replace
188	[BUG]  [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(arg,  options.length()  +  1);  [CE]  [FE]                ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(arg,  options.length()  +  1);  [BUGGY]      if  (     "--     ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	TokenBuffer  tokens  =  new  TokenBuffer(arg,  options.length()  +  1);	  TokenBuffer    tokens    =    new    TokenBuffer(arg,    options.length());    	non-compiled	[CE]  	144	None	replace
189	[BUG]  [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(tokens,  options.length());  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(tokens,  options.length());  [BUGGY]      if  (     "--     ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	TokenBuffer  tokens  =  new  TokenBuffer(tokens,  options.length());	  TokenBuffer    tokens    =    new    TokenBuffer(arg,    options.length());    	non-compiled	[CE]  	144	None	replace
190	[BUG]  [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(opt,  options.length());  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(opt,  options.length());  [BUGGY]      if  (     "--     ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	TokenBuffer  tokens  =  new  TokenBuffer(opt,  options.length());	  TokenBuffer    tokens    =    new    TokenBuffer(arg,    options.length());    	non-compiled	[CE]  	144	None	replace
191	[BUG]  [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(options,  arg.length());  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(options,  arg.length());  [BUGGY]      if  (     "--     ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	TokenBuffer  tokens  =  new  TokenBuffer(options,  arg.length());	  TokenBuffer    tokens    =    new    TokenBuffer(arg,    options.length());    	non-compiled	[CE]  	144	None	replace
192	[BUG]  [BUGGY]  if(!stopAtNonOption  &&!arg.equals(   "-   "))  {  if(!stopAtNonOption  &&!arg.equals(   "-   "))  {  [CE]  reached  end  of  file  while  parsing  [FE]    AssertionFailedError    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  if(!stopAtNonOption  &&!arg.equals(   "-   "))  {  if(!stopAtNonOption  &&!arg.equals(   "-   "))  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	if(!stopAtNonOption    &&!arg.equals(   "-   "))    {    if(!stopAtNonOption  &&!arg.equals(   "-   "))  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	110	None	add
193	[BUG]  [BUGGY]  if(!stopAtNonOption  &&!arg.equals(   "-   "))  {  if(!stopAtNonOption  &&!arg.equals( ".-   "))  {  [CE]  reached  end  of  file  while  parsing  [FE]      AssertionFailedError    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  if(!stopAtNonOption  &&!arg.equals(   "-   "))  {  if(!stopAtNonOption  &&!arg.equals( ".-   "))  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	if(!stopAtNonOption    &&!arg.equals(   "-   "))    {    if(!stopAtNonOption  &&!arg.equals( ".-   "))  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	110	None	add
194	[BUG]  [BUGGY]  if(arg.startsWith( "- "))  {  if('--   ".equals(arg)||!eatTheRest)  {  [CE]  unclosed  character  literal  [FE]          AssertionFailedError      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  if(arg.startsWith( "- "))  {  if('--   ".equals(arg)||!eatTheRest)  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	if(arg.startsWith( "- "))  {  if('--   ".equals(arg)||!eatTheRest)  {	  if(       "--       ".equals(arg)||!eatTheRest)    {    if('--       ".equals(arg)||!eatTheRest)    {    	non-compiled	[CE]  unclosed  character  literal	91	None	replace
195	[BUG]  [BUGGY]  if(!stopAtNonOption)  {  if('--   ".equals(arg)||!eatTheRest)  {  [CE]  unclosed  character  literal  [FE]            AssertionFailedError      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  if(!stopAtNonOption)  {  if('--   ".equals(arg)||!eatTheRest)  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	if(!stopAtNonOption)  {  if('--   ".equals(arg)||!eatTheRest)  {	  if(       "--       ".equals(arg)||!eatTheRest)    {    if('--       ".equals(arg)||!eatTheRest)    {    	non-compiled	[CE]  unclosed  character  literal	91	None	replace
196	[BUG]  [BUGGY]  if(!stopAtNonOption  &&     "--   ".equals(arg)||  eatTheRest)  {  if(!stopAtNonOption  &&   "--   ".equals(arg)||  eatTheRest)  {  [CE]  reached  end  of  file  while  parsing  [FE]    ComparisonFailure    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  if(!stopAtNonOption  &&     "--   ".equals(arg)||  eatTheRest)  {  if(!stopAtNonOption  &&   "--   ".equals(arg)||  eatTheRest)  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	if(!stopAtNonOption    &&       "--   ".equals(arg)||    eatTheRest)    {    if(!stopAtNonOption  &&   "--   ".equals(arg)||  eatTheRest)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	100	None	add
197	[BUG]  [BUGGY]  if(!stopAtNonOption  &&     "--   ".equals(arg)||  eatTheRest)  {  if(!stopAtNonOption  &&   "--   ".equals(arg)||  eattheRest)  {  [CE]  reached  end  of  file  while  parsing  [FE]      ComparisonFailure    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  if(!stopAtNonOption  &&     "--   ".equals(arg)||  eatTheRest)  {  if(!stopAtNonOption  &&   "--   ".equals(arg)||  eattheRest)  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	if(!stopAtNonOption    &&       "--   ".equals(arg)||    eatTheRest)    {    if(!stopAtNonOption  &&   "--   ".equals(arg)||  eattheRest)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	100	None	add
198	[BUG]  [BUGGY]  if(!stopAtNonOption  &&     "--   ".equals(arg)||  eatTheRest)  {  If(!stopAtNonOption  &&   "--   ".equals(arg)||  eatTheRest)  {  [CE]  [FE]        ComparisonFailure    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  if(!stopAtNonOption  &&     "--   ".equals(arg)||  eatTheRest)  {  If(!stopAtNonOption  &&   "--   ".equals(arg)||  eatTheRest)  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	if(!stopAtNonOption    &&       "--   ".equals(arg)||    eatTheRest)    {    If(!stopAtNonOption  &&   "--   ".equals(arg)||  eatTheRest)  {	  	non-compiled	[CE]  	100	None	add
199	[BUG]  [BUGGY]  String[]  options  =  options.get(arg);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  String[]  options  =  options.get(arg);  [BUGGY]      if  (     "--     ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	String[]  options  =  options.get(arg);	  String[]    options    =    options.get(i);    	non-compiled	[CE]  	88	None	replace
200	[BUG]  [BUGGY]  String[]  options  =  options.get(opt);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  String[]  options  =  options.get(opt);  [BUGGY]      if  (     "--     ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	String[]  options  =  options.get(opt);	  String[]    options    =    options.get(i);    	non-compiled	[CE]  	88	None	replace
201	[BUG]  [BUGGY]  String[]  options  =  arguments.get(i);  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  String[]  options  =  arguments.get(i);  [BUGGY]      if  (     "--     ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	String[]  options  =  arguments.get(i);	  String[]    options    =    options.get(i);    	non-compiled	[CE]  	88	None	replace
202	[BUG]  [BUGGY]  String[]  options  =  options.get(0);  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  String[]  options  =  options.get(0);  [BUGGY]      if  (     "--     ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	String[]  options  =  options.get(0);	  String[]    options    =    options.get(i);    	non-compiled	[CE]  	88	None	replace
203	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  if(stopAtNonOption  &&!arg.equals( "- "))  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	add	if(stopAtNonOption  &&!arg.equals( "- "))  {	  if(!stopAtNonOption    &&!arg.equals(   "-   "))    {    	compilable	  [FE]  AssertionFailedError  	111	6	replace
204	[BUG]  [BUGGY]  if(stopAtNonOption  &&!arg.equals( "- "))  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  if(stopAtNonOption  &&!arg.equals( "- "))  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	if(stopAtNonOption  &&!arg.equals( "- "))  {	  if(!stopAtNonOption    &&!arg.equals(   "-   "))    {    	compilable	  [FE]  AssertionFailedError  	111	6	replace
205	[BUG]  [BUGGY]  if(!stopAtNonOption  &&!arg.equals( "-))  {  [CE]  unclosed  string  literal  [FE]      AssertionFailedError    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  if(!stopAtNonOption  &&!arg.equals( "-))  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	if(!stopAtNonOption  &&!arg.equals( "-))  {	  if(!stopAtNonOption    &&!arg.equals(   "-   "))    {    	non-compiled	[CE]  unclosed  string  literal	111	None	replace
206	[BUG]  [BUGGY]  if(arg.startsWith( "-- ")||  arg.startsWith( "--))  {  [CE]  unclosed  string  literal  [FE]    AssertionFailedError    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  if(arg.startsWith( "-- ")||  arg.startsWith( "--))  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	if(arg.startsWith( "-- ")||  arg.startsWith( "--))  {	  if(arg.startsWith(   "--   ")||    arg.startsWith(   "--       "))    {    	non-compiled	[CE]  unclosed  string  literal	18	None	replace
207	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  if(arg.startsWith( "-- ")&&  arg.startsWith( "-- "))  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	add	if(arg.startsWith( "-- ")&&  arg.startsWith( "-- "))  {	  if(arg.startsWith(   "--   ")||    arg.startsWith(   "--       "))    {    	compilable	  [FE]  AssertionFailedError  	18	7	replace
208	[BUG]  [BUGGY]  if(arg.startsWith( "-- ")&&  arg.startsWith( "-- "))  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  if(arg.startsWith( "-- ")&&  arg.startsWith( "-- "))  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	if(arg.startsWith( "-- ")&&  arg.startsWith( "-- "))  {	  if(arg.startsWith(   "--   ")||    arg.startsWith(   "--       "))    {    	compilable	  [FE]  AssertionFailedError  	18	7	replace
209	[BUG]  [BUGGY]  if(arg.equals( "-- ")||!tokens.startsWith( "--   "))  {  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  if(arg.equals( "-- ")||!tokens.startsWith( "--   "))  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	if(arg.equals( "-- ")||!tokens.startsWith( "--   "))  {	  if(   "--       ".equals(arg)||!tokens.startsWith(   "--       "))    {    	non-compiled	[CE]  cannot  find  symbol	23	None	replace
210	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                      ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  if( "--   ".equals(arg)||!tokens.contains(arg))  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	add	if( "--   ".equals(arg)||!tokens.contains(arg))  {	  if(   "--       ".equals(arg)||!tokens.startsWith(   "--       "))    {    	compilable	  [FE]  AssertionFailedError  	23	14	replace
211	[BUG]  [BUGGY]  if( "--   ".equals(arg)||!tokens.contains(arg))  {  [FE]  AssertionFailedError  [FE]                      ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  if( "--   ".equals(arg)||!tokens.contains(arg))  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	if( "--   ".equals(arg)||!tokens.contains(arg))  {	  if(   "--       ".equals(arg)||!tokens.startsWith(   "--       "))    {    	compilable	  [FE]  AssertionFailedError  	23	14	replace
212	[BUG]  [BUGGY]  if(arg.equals( "--)||!tokens.startsWith( "--   "))  {  [CE]  unclosed  string  literal  [FE]                        ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  if(arg.equals( "--)||!tokens.startsWith( "--   "))  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	if(arg.equals( "--)||!tokens.startsWith( "--   "))  {	  if(   "--       ".equals(arg)||!tokens.startsWith(   "--       "))    {    	non-compiled	[CE]  unclosed  string  literal	23	None	replace
213	[BUG]  [BUGGY]  tokens.add( "n ");  [CE]  [FE]    UnrecognizedOptionException    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  tokens.add( "n ");  [BUGGY]      if  (     "--     ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	tokens.add( "n ");	          tokens.add(       "-       ");    tokens.add(   ".-       ");    	non-compiled	[CE]  	38	None	replace
214	[BUG]  [BUGGY]  if(arg.startsWith(   "--   ")||  arg.startsWith(   "--     "))  {  if(arg.startsWith(   "--   ")||  arg.startsWith(   "--   "))  {  [CE]  reached  end  of  file  while  parsing  [FE]    AssertionFailedError    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  if(arg.startsWith(   "--   ")||  arg.startsWith(   "--     "))  {  if(arg.startsWith(   "--   ")||  arg.startsWith(   "--   "))  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	if(arg.startsWith(   "--   ")||    arg.startsWith(   "--       "))    {    if(arg.startsWith(   "--   ")||  arg.startsWith(   "--   "))  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	17	None	add
215	[BUG]  [BUGGY]  if(stopAtNonOption  ||!arg.startsWith(   "-   "))  {  if(stopAtNonOption  ||!arg.startsWith( "-   "))  {  [CE]  reached  end  of  file  while  parsing  [FE]    AssertionFailedError    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  if(stopAtNonOption  ||!arg.startsWith(   "-   "))  {  if(stopAtNonOption  ||!arg.startsWith( "-   "))  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	if(stopAtNonOption    ||!arg.startsWith(   "-   "))    {    if(stopAtNonOption  ||!arg.startsWith( "-   "))  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	71	None	add
216	[BUG]  [BUGGY]  if(stopAtNonOption  ||!arg.startsWith(   "-   "))  {  if(stopAtNonOption  ||!arg.startsWith( ".-   "))  {  [CE]  reached  end  of  file  while  parsing  [FE]      AssertionFailedError    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  if(stopAtNonOption  ||!arg.startsWith(   "-   "))  {  if(stopAtNonOption  ||!arg.startsWith( ".-   "))  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	if(stopAtNonOption    ||!arg.startsWith(   "-   "))    {    if(stopAtNonOption  ||!arg.startsWith( ".-   "))  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	71	None	add
217	[BUG]  [BUGGY]  if(stopAtNonOption  ||!arg.startsWith(   "-   "))  {  if(stopAtNonOption  ||!arg.startsWith('-   "))  {  [CE]  unclosed  character  literal  [FE]        AssertionFailedError    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  if(stopAtNonOption  ||!arg.startsWith(   "-   "))  {  if(stopAtNonOption  ||!arg.startsWith('-   "))  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	if(stopAtNonOption    ||!arg.startsWith(   "-   "))    {    if(stopAtNonOption  ||!arg.startsWith('-   "))  {	  	non-compiled	[CE]  unclosed  character  literal	71	None	add
218	[BUG]  [BUGGY]  if(arg.startsWith( "- "))  {  if( ".--   ".equals(arg)||!eatTheRest)  {  [CE]  reached  end  of  file  while  parsing  [FE]            AssertionFailedError      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  if(arg.startsWith( "- "))  {  if( ".--   ".equals(arg)||!eatTheRest)  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	if(arg.startsWith( "- "))  {  if( ".--   ".equals(arg)||!eatTheRest)  {	  if(       "--       ".equals(arg)||!eatTheRest)    {    if(   ".--       ".equals(arg)||!eatTheRest)    {    	non-compiled	[CE]  reached  end  of  file  while  parsing	92	None	replace
219	[BUG]  [BUGGY]  if(!stopAtNonOption.equals(arg)||!opt.equals(arg))  {  [CE]  boolean  cannot  be  dereferenced  [FE]        AssertionFailedError      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  if(!stopAtNonOption.equals(arg)||!opt.equals(arg))  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	if(!stopAtNonOption.equals(arg)||!opt.equals(arg))  {	  if(!opt.equals(arg)||!stopAtNonOption)    {    	non-compiled	[CE]  boolean  cannot  be  dereferenced	49	None	replace
220	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  if(!tokens.equals(arg)||!stopAtNonOption)  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	add	if(!tokens.equals(arg)||!stopAtNonOption)  {	  if(!opt.equals(arg)||!stopAtNonOption)    {    	compilable	  [FE]  AssertionFailedError  	49	14	replace
221	[BUG]  [BUGGY]  if(!tokens.equals(arg)||!stopAtNonOption)  {  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  if(!tokens.equals(arg)||!stopAtNonOption)  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	if(!tokens.equals(arg)||!stopAtNonOption)  {	  if(!opt.equals(arg)||!stopAtNonOption)    {    	compilable	  [FE]  AssertionFailedError  	49	14	replace
222	[BUG]  [BUGGY]  if(!apply.equals(arg)||!stopAtNonOption)  {  [CE]  cannot  find  symbol  apply  [FE]            AssertionFailedError      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  if(!apply.equals(arg)||!stopAtNonOption)  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	if(!apply.equals(arg)||!stopAtNonOption)  {	  if(!opt.equals(arg)||!stopAtNonOption)    {    	non-compiled	[CE]  cannot  find  symbol  apply	49	None	replace
223	[BUG]  [BUGGY]  if(!stopAtNonOption)  {  if(! "--   ".equals(arg)||  eatTheRest)  {  [CE]  reached  end  of  file  while  parsing  [FE]        AssertionFailedError      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  if(!stopAtNonOption)  {  if(! "--   ".equals(arg)||  eatTheRest)  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	if(!stopAtNonOption)  {  if(! "--   ".equals(arg)||  eatTheRest)  {	  if(!       "--       ".equals(arg)||    eatTheRest)    {    if(!       "--       ".equals(arg)||    eatTheRest)    {    	non-compiled	[CE]  reached  end  of  file  while  parsing	50	None	replace
224	[BUG]  [BUGGY]  if(stopAtNonOption)  {  if(!   "--   ".equals(arg)||  eatTheRest)  {  [CE]  reached  end  of  file  while  parsing  [FE]          AssertionFailedError      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  if(stopAtNonOption)  {  if(!   "--   ".equals(arg)||  eatTheRest)  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	if(stopAtNonOption)  {  if(!   "--   ".equals(arg)||  eatTheRest)  {	  if(!       "--       ".equals(arg)||    eatTheRest)    {    if(!       "--       ".equals(arg)||    eatTheRest)    {    	non-compiled	[CE]  reached  end  of  file  while  parsing	50	None	replace
225	[BUG]  [BUGGY]  if(arg.startsWith( "- "))  {  if( ".--   ".equals(arg)||  eatTheRest)  {  [CE]  reached  end  of  file  while  parsing  [FE]            ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  if(arg.startsWith( "- "))  {  if( ".--   ".equals(arg)||  eatTheRest)  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	if(arg.startsWith( "- "))  {  if( ".--   ".equals(arg)||  eatTheRest)  {	  if(       "--       ".equals(arg)||    eatTheRest)    {    if(   ".--       ".equals(arg)||    eatTheRest)    {    	non-compiled	[CE]  reached  end  of  file  while  parsing	16	None	replace
226	[BUG]  [BUGGY]  tokens.add( "- ",  arg.toString());  [CE]  [FE]          AssertionFailedError      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  tokens.add( "- ",  arg.toString());  [BUGGY]      if  (     "--     ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	tokens.add( "- ",  arg.toString());	  tokens.add(   "-   ",    arg);    	non-compiled	[CE]  	55	None	replace
227	[BUG]  [BUGGY]  if(arg.equals(   "--   "))  {  if(arg.equals(   "--   "))  {  [CE]  reached  end  of  file  while  parsing  [FE]    ComparisonFailure    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  if(arg.equals(   "--   "))  {  if(arg.equals(   "--   "))  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	if(arg.equals(   "--   "))    {    if(arg.equals(   "--   "))  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	146	None	add
228	[BUG]  [BUGGY]  if(arg.equals(   "--   "))  {  if(arg.equals( ".--   "))  {  [CE]  reached  end  of  file  while  parsing  [FE]      ComparisonFailure    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  if(arg.equals(   "--   "))  {  if(arg.equals( ".--   "))  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	if(arg.equals(   "--   "))    {    if(arg.equals( ".--   "))  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	146	None	add
229	[BUG]  [BUGGY]  if(arg.equals(   "--   "))  {  If(arg.equals(   "--   "))  {  [CE]  [FE]        ComparisonFailure    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  if(arg.equals(   "--   "))  {  If(arg.equals(   "--   "))  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	if(arg.equals(   "--   "))    {    If(arg.equals(   "--   "))  {	  	non-compiled	[CE]  	146	None	add
230	[BUG]  [BUGGY]  if(arg.startsWith( "- "))  {  if( "--   ".equals(arg)||!stopAtNonOption)  {  [CE]  reached  end  of  file  while  parsing  [FE]        AssertionFailedError      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  if(arg.startsWith( "- "))  {  if( "--   ".equals(arg)||!stopAtNonOption)  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	if(arg.startsWith( "- "))  {  if( "--   ".equals(arg)||!stopAtNonOption)  {	  if(       "--       ".equals(arg)||!stopAtNonOption)    {    if(       "--       ".equals(arg)||!stopAtNonOption)    {    	non-compiled	[CE]  reached  end  of  file  while  parsing	75	None	replace
231	[BUG]  [BUGGY]  if(!stopAtNonOption)  {  if( "--   ".equals(arg)||!stopAtNonOption)  {  [CE]  reached  end  of  file  while  parsing  [FE]          AssertionFailedError      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  if(!stopAtNonOption)  {  if( "--   ".equals(arg)||!stopAtNonOption)  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	if(!stopAtNonOption)  {  if( "--   ".equals(arg)||!stopAtNonOption)  {	  if(       "--       ".equals(arg)||!stopAtNonOption)    {    if(       "--       ".equals(arg)||!stopAtNonOption)    {    	non-compiled	[CE]  reached  end  of  file  while  parsing	75	None	replace
232	[BUG]  [BUGGY]  String[]  arg  =  options.getOptions(opt);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  String[]  arg  =  options.getOptions(opt);  [BUGGY]      if  (     "--     ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	String[]  arg  =  options.getOptions(opt);	  String[]    arg    =    options.getOptions(i);    	non-compiled	[CE]  	85	None	replace
233	[BUG]  [BUGGY]  String[]  arg  =  options.getOptions(i,  opt);  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  String[]  arg  =  options.getOptions(i,  opt);  [BUGGY]      if  (     "--     ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	String[]  arg  =  options.getOptions(i,  opt);	  String[]    arg    =    options.getOptions(i);    	non-compiled	[CE]  	85	None	replace
234	[BUG]  [BUGGY]  String[]  arg  =  options.getOptions(i  +  1);  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  String[]  arg  =  options.getOptions(i  +  1);  [BUGGY]      if  (     "--     ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	String[]  arg  =  options.getOptions(i  +  1);	  String[]    arg    =    options.getOptions(i);    	non-compiled	[CE]  	85	None	replace
235	[BUG]  [BUGGY]  if(arg.equals( "-- ")||!opt.startsWith( "-- "))  {  [CE]  cannot  find  symbol  opt  [FE]                ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  if(arg.equals( "-- ")||!opt.startsWith( "-- "))  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	if(arg.equals( "-- ")||!opt.startsWith( "-- "))  {	  if(arg.equals(   "--   ")||!eatTheRest.startsWith(   "--       "))    {    	non-compiled	[CE]  cannot  find  symbol  opt	145	None	replace
236	[BUG]  [BUGGY]  if(arg.equals( "-- ")||!appendAtNonOption.startsWith( "-- "))  {  [CE]  cannot  find  symbol  appendAtNonOption  [FE]                  ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  if(arg.equals( "-- ")||!appendAtNonOption.startsWith( "-- "))  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	if(arg.equals( "-- ")||!appendAtNonOption.startsWith( "-- "))  {	  if(arg.equals(   "--   ")||!eatTheRest.startsWith(   "--       "))    {    	non-compiled	[CE]  cannot  find  symbol  appendAtNonOption	145	None	replace
237	[BUG]  [BUGGY]  if(stopAtNonOption)  {  If(!stopAtNonOption)  {  [CE]  [FE]            AssertionFailedError      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  if(stopAtNonOption)  {  If(!stopAtNonOption)  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	if(stopAtNonOption)  {  If(!stopAtNonOption)  {	  if(!eatTheRest)    {    If(!eatTheRest)    {    	non-compiled	[CE]  	99	None	replace
238	[BUG]  [BUGGY]  if(!stopAtNonOption)  {  If(!stopAtNonOption)  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  if(!stopAtNonOption)  {  If(!stopAtNonOption)  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	if(!stopAtNonOption)  {  If(!stopAtNonOption)  {	  if(!eatTheRest)    {    If(!eatTheRest)    {    	non-compiled	[CE]  	99	None	replace
239	[BUG]  [BUGGY]  ||!stopAtNonOption)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  ||!stopAtNonOption)  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	||!stopAtNonOption)  {	  if(!eatTheRest)    {    If(!eatTheRest)    {    	non-compiled	[CE]  illegal  start  of  expression	99	None	replace
240	[BUG]  [BUGGY]  if(!stopAtNonOption  &&  options.contains(arg))  {  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  if(!stopAtNonOption  &&  options.contains(arg))  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	if(!stopAtNonOption  &&  options.contains(arg))  {	  if(!stopAtNonOption)    {    	non-compiled	[CE]  cannot  find  symbol	70	None	replace
241	[BUG]  [BUGGY]  if(!stopAtNonOption  &&!opt.equals(arg))  {  [CE]  cannot  find  symbol  opt  [FE]      AssertionFailedError    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  if(!stopAtNonOption  &&!opt.equals(arg))  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	if(!stopAtNonOption  &&!opt.equals(arg))  {	  if(!stopAtNonOption)    {    	non-compiled	[CE]  cannot  find  symbol  opt	70	None	replace
242	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  if(!stopAtNonOption  &&  arguments[i].equals(arg))  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	add	if(!stopAtNonOption  &&  arguments[i].equals(arg))  {	  if(!stopAtNonOption)    {    	compilable	  [FE]  AssertionFailedError  	70	13	replace
243	[BUG]  [BUGGY]  if(!stopAtNonOption  &&  arguments[i].equals(arg))  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  if(!stopAtNonOption  &&  arguments[i].equals(arg))  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	if(!stopAtNonOption  &&  arguments[i].equals(arg))  {	  if(!stopAtNonOption)    {    	compilable	  [FE]  AssertionFailedError  	70	13	replace
244	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  if(!stopAtNonOption  &&  arguments[i]!=  null)  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	add	if(!stopAtNonOption  &&  arguments[i]!=  null)  {	  if(!stopAtNonOption)    {    	compilable	  [FE]  AssertionFailedError  	70	13	replace
245	[BUG]  [BUGGY]  if(!stopAtNonOption  &&  arguments[i]!=  null)  {  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  if(!stopAtNonOption  &&  arguments[i]!=  null)  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	if(!stopAtNonOption  &&  arguments[i]!=  null)  {	  if(!stopAtNonOption)    {    	compilable	  [FE]  AssertionFailedError  	70	13	replace
246	[BUG]  [BUGGY]  String[]  arg  =  options.toArray(arguments[i]  +  2);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  String[]  arg  =  options.toArray(arguments[i]  +  2);  [BUGGY]      if  (     "--     ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	String[]  arg  =  options.toArray(arguments[i]  +  2);	  String[]    arg    =    options.toArray(arguments[i]    +    1);    	non-compiled	[CE]  	47	None	replace
247	[BUG]  [BUGGY]  String[]  arg  =  options.toArray(arguments[i]  +  1],  opt);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  String[]  arg  =  options.toArray(arguments[i]  +  1],  opt);  [BUGGY]      if  (     "--     ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	String[]  arg  =  options.toArray(arguments[i]  +  1],  opt);	  String[]    arg    =    options.toArray(arguments[i]    +    1);    	non-compiled	[CE]  	47	None	replace
248	[BUG]  [BUGGY]  String[]  tokens  =  new  String[arguments.size()  +  1];  [CE]  [FE]                ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  String[]  tokens  =  new  String[arguments.size()  +  1];  [BUGGY]      if  (     "--     ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	String[]  tokens  =  new  String[arguments.size()  +  1];	  String[]    tokens    =    new    String[arguments.size()    ];    	non-compiled	[CE]  	96	None	replace
249	[BUG]  [BUGGY]  String[]  tokens  =  new  String[arguments.size()  -  1];  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  String[]  tokens  =  new  String[arguments.size()  -  1];  [BUGGY]      if  (     "--     ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	String[]  tokens  =  new  String[arguments.size()  -  1];	  String[]    tokens    =    new    String[arguments.size()    ];    	non-compiled	[CE]  	96	None	replace
250	[BUG]  [BUGGY]  if(!stopAtNonOption.equals(arg)||!eatTheRest)  {  [CE]  boolean  cannot  be  dereferenced  [FE]        AssertionFailedError      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  if(!stopAtNonOption.equals(arg)||!eatTheRest)  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	if(!stopAtNonOption.equals(arg)||!eatTheRest)  {	  if(!eatTheRest.equals(arg)||!stopAtNonOption)    {    	non-compiled	[CE]  boolean  cannot  be  dereferenced	125	None	replace
251	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  if(!options.equals(arg)||!stopAtNonOption)  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	add	if(!options.equals(arg)||!stopAtNonOption)  {	  if(!eatTheRest.equals(arg)||!stopAtNonOption)    {    	compilable	  [FE]  AssertionFailedError  	125	14	replace
252	[BUG]  [BUGGY]  if(!options.equals(arg)||!stopAtNonOption)  {  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  if(!options.equals(arg)||!stopAtNonOption)  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	if(!options.equals(arg)||!stopAtNonOption)  {	  if(!eatTheRest.equals(arg)||!stopAtNonOption)    {    	compilable	  [FE]  AssertionFailedError  	125	14	replace
253	[BUG]  [BUGGY]  if(stopAtNonOption)  {  if(stopAtNonOption)  {  [CE]  reached  end  of  file  while  parsing  [FE]    AssertionFailedError    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  if(stopAtNonOption)  {  if(stopAtNonOption)  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	if(stopAtNonOption)    {    if(stopAtNonOption)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	67	None	add
254	[BUG]  [BUGGY]  if(stopAtNonOption)  {  If(stopAtNonOption)  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  if(stopAtNonOption)  {  If(stopAtNonOption)  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	if(stopAtNonOption)    {    If(stopAtNonOption)  {	  	non-compiled	[CE]  ';'  expected	67	None	add
255	[BUG]  [BUGGY]  if(stopAtNonOption)  {  AssertionFailedError  eatTheRest  =  true;  [CE]  reached  end  of  file  while  parsing  [FE]        AssertionFailedError    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  if(stopAtNonOption)  {  AssertionFailedError  eatTheRest  =  true;  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	if(stopAtNonOption)    {    AssertionFailedError  eatTheRest  =  true;	  	non-compiled	[CE]  reached  end  of  file  while  parsing	67	None	add
256	[BUG]  [BUGGY]  if( "-- ".equals(arg)||!stopAtNonOption)  {  if(! "--   ".equals(arg)||!eatTheRest)  {  [CE]  reached  end  of  file  while  parsing  [FE]        AssertionFailedError      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  if( "-- ".equals(arg)||!stopAtNonOption)  {  if(! "--   ".equals(arg)||!eatTheRest)  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	if( "-- ".equals(arg)||!stopAtNonOption)  {  if(! "--   ".equals(arg)||!eatTheRest)  {	  if(       "--       ".equals(arg)||!eatTheRest)    {    if(!   "--       ".equals(arg)||!eatTheRest)    {    	non-compiled	[CE]  reached  end  of  file  while  parsing	117	None	replace
257	[BUG]  [BUGGY]  tokens.add( "-- ",  arg);  [CE]  [FE]        AssertionFailedError      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  tokens.add( "-- ",  arg);  [BUGGY]      if  (     "--     ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	tokens.add( "-- ",  arg);	  tokens.add(   "--   ");    	non-compiled	[CE]  	122	None	replace
258	[BUG]  [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(tokens.length(),  arg.length());  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(tokens.length(),  arg.length());  [BUGGY]      if  (     "--     ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	TokenBuffer  tokens  =  new  TokenBuffer(tokens.length(),  arg.length());	  TokenBuffer    tokens    =    new    TokenBuffer(arg,    tokens.length());    	non-compiled	[CE]  	45	None	replace
259	[BUG]  [BUGGY]  if(stopAtNonOption  ||!arg.equals(stopAtNonOption))  {  if(stopAtNonOption  ||!arg.equals(stopAtNonOption))  {  [CE]  reached  end  of  file  while  parsing  [FE]    AssertionFailedError    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  if(stopAtNonOption  ||!arg.equals(stopAtNonOption))  {  if(stopAtNonOption  ||!arg.equals(stopAtNonOption))  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	if(stopAtNonOption    ||!arg.equals(stopAtNonOption))    {    if(stopAtNonOption  ||!arg.equals(stopAtNonOption))  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	123	None	add
260	[BUG]  [BUGGY]  if(stopAtNonOption  ||!arg.equals(stopAtNonOption))  {  If(stopAtNonOption  ||!arg.equals(stopAtNonOption))  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  if(stopAtNonOption  ||!arg.equals(stopAtNonOption))  {  If(stopAtNonOption  ||!arg.equals(stopAtNonOption))  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	if(stopAtNonOption    ||!arg.equals(stopAtNonOption))    {    If(stopAtNonOption  ||!arg.equals(stopAtNonOption))  {	  	non-compiled	[CE]  ';'  expected	123	None	add
261	[BUG]  [BUGGY]  if(stopAtNonOption  ||!arg.equals(stopAtNonOption))  {  if(stopAtNonOption  ||! "arg.equals(stopAtNonOption))  {  [CE]  unclosed  string  literal  [FE]        AssertionFailedError    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  if(stopAtNonOption  ||!arg.equals(stopAtNonOption))  {  if(stopAtNonOption  ||! "arg.equals(stopAtNonOption))  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	if(stopAtNonOption    ||!arg.equals(stopAtNonOption))    {    if(stopAtNonOption  ||! "arg.equals(stopAtNonOption))  {	  	non-compiled	[CE]  unclosed  string  literal	123	None	add
262	[BUG]  [BUGGY]  String[]  arg  =  options.get(i  +  1);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  String[]  arg  =  options.get(i  +  1);  [BUGGY]      if  (     "--     ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	String[]  arg  =  options.get(i  +  1);	  String[]    arg    =    options.get(i);    	non-compiled	[CE]  	84	None	replace
263	[BUG]  [BUGGY]  tokens.add(arg);  TokenBuffer  tokens  =  new  TokenBuffer(arg.length(),  tokens.length());  [CE]  [FE]            MissingArgumentException      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  tokens.add(arg);  TokenBuffer  tokens  =  new  TokenBuffer(arg.length(),  tokens.length());  [BUGGY]      if  (     "--     ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	tokens.add(arg);  TokenBuffer  tokens  =  new  TokenBuffer(arg.length(),  tokens.length());	          tokens.add(arg);    TokenBuffer    tokens    =    new    TokenBuffer(arg.length());    	non-compiled	[CE]  	129	None	replace
264	[BUG]  [BUGGY]  tokens.add(arg);  TokenBuffer  tokens  =  new  TokenBuffer(arg.length()  -  1);  [CE]  [FE]              MissingArgumentException      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  tokens.add(arg);  TokenBuffer  tokens  =  new  TokenBuffer(arg.length()  -  1);  [BUGGY]      if  (     "--     ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	tokens.add(arg);  TokenBuffer  tokens  =  new  TokenBuffer(arg.length()  -  1);	          tokens.add(arg);    TokenBuffer    tokens    =    new    TokenBuffer(arg.length());    	non-compiled	[CE]  	129	None	replace
265	[BUG]  [BUGGY]  tokens.add(arg);  TokenBuffer  tokens  =  new  TokenBuffer(arguments.length());  [CE]  [FE]                MissingArgumentException      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  tokens.add(arg);  TokenBuffer  tokens  =  new  TokenBuffer(arguments.length());  [BUGGY]      if  (     "--     ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	tokens.add(arg);  TokenBuffer  tokens  =  new  TokenBuffer(arguments.length());	          tokens.add(arg);    TokenBuffer    tokens    =    new    TokenBuffer(arg.length());    	non-compiled	[CE]  	129	None	replace
266	[BUG]  [BUGGY]  if(!stopAtNonOption)  {  tokens.add(arg);  }  [CE]  [FE]          MissingArgumentException      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  if(!stopAtNonOption)  {  tokens.add(arg);  }  [BUGGY]      if  (     "--     ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	if(!stopAtNonOption)  {  tokens.add(arg);  }	          tokens.add(arg);    tokens.add(arg);    if(stopAtNonOption)    {    eatTheRest    =    true;    tokens.add(   "-       ");    }    else    if(opt.startsWith(   "-       "))    {    	non-compiled	[CE]  	62	None	replace
267	[BUG]  [BUGGY]  if(!stopAtNonOption)  {  tokens.add(arg);  }  else  if(opt.startsWith( "-   "))  {  [CE]  cannot  find  symbol  opt  [FE]            MissingArgumentException      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  if(!stopAtNonOption)  {  tokens.add(arg);  }  else  if(opt.startsWith( "-   "))  {  [BUGGY]      if  (     "--     ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	if(!stopAtNonOption)  {  tokens.add(arg);  }  else  if(opt.startsWith( "-   "))  {	          tokens.add(arg);    tokens.add(arg);    if(stopAtNonOption)    {    eatTheRest    =    true;    tokens.add(   "-       ");    }    else    if(opt.startsWith(   "-       "))    {    	non-compiled	[CE]  cannot  find  symbol  opt	62	None	replace
268	[BUG]  [BUGGY]  if(stopAtNonOption)  {  tokens.add( "-   ");  }  else  if(opt.startsWith( "-   "))  {  [CE]  cannot  find  symbol  opt  [FE]              MissingArgumentException      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  if(stopAtNonOption)  {  tokens.add( "-   ");  }  else  if(opt.startsWith( "-   "))  {  [BUGGY]      if  (     "--     ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	if(stopAtNonOption)  {  tokens.add( "-   ");  }  else  if(opt.startsWith( "-   "))  {	          tokens.add(arg);    tokens.add(arg);    if(stopAtNonOption)    {    eatTheRest    =    true;    tokens.add(   "-       ");    }    else    if(opt.startsWith(   "-       "))    {    	non-compiled	[CE]  cannot  find  symbol  opt	62	None	replace
269	[BUG]  [BUGGY]  String[]  tokens  =  new  String[arg.size()  +  1];  [CE]  [FE]            ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  String[]  tokens  =  new  String[arg.size()  +  1];  [BUGGY]      if  (     "--     ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	String[]  tokens  =  new  String[arg.size()  +  1];	  String[]    tokens    =    new    String[arg.size()    ];    	non-compiled	[CE]  	94	None	replace
270	[BUG]  [BUGGY]  String[]  tokens  =  new  String[arg.size()  -  1];  [CE]  [FE]              ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  String[]  tokens  =  new  String[arg.size()  -  1];  [BUGGY]      if  (     "--     ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	String[]  tokens  =  new  String[arg.size()  -  1];	  String[]    tokens    =    new    String[arg.size()    ];    	non-compiled	[CE]  	94	None	replace
271	[BUG]  [BUGGY]  String[]  tokens  =  new  String[arg.length()  ];  [CE]  [FE]                ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  String[]  tokens  =  new  String[arg.length()  ];  [BUGGY]      if  (     "--     ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	String[]  tokens  =  new  String[arg.length()  ];	  String[]    tokens    =    new    String[arg.size()    ];    	non-compiled	[CE]  	94	None	replace
272	[BUG]  [BUGGY]  if(arg.startsWith( "- "))  {  if( "--   ".equals(arg)||  eatTheRest)  {  [CE]  reached  end  of  file  while  parsing  [FE]        ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  if(arg.startsWith( "- "))  {  if( "--   ".equals(arg)||  eatTheRest)  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	if(arg.startsWith( "- "))  {  if( "--   ".equals(arg)||  eatTheRest)  {	  if(       "--       ".equals(arg)||    eatTheRest)    {    if(       "--       ".equals(arg)||    eatTheRest)    {    	non-compiled	[CE]  reached  end  of  file  while  parsing	14	None	replace
273	[BUG]  [BUGGY]  if(!stopAtNonOption)  {  if(!stopAtNonOption)  {  [CE]  reached  end  of  file  while  parsing  [FE]    AssertionFailedError    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  if(!stopAtNonOption)  {  if(!stopAtNonOption)  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	if(!stopAtNonOption)    {    if(!stopAtNonOption)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	69	None	add
274	[BUG]  [BUGGY]  if(!stopAtNonOption)  {  ||!stopAtNonOption)  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  if(!stopAtNonOption)  {  ||!stopAtNonOption)  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	if(!stopAtNonOption)    {    ||!stopAtNonOption)  {	  	non-compiled	[CE]  illegal  start  of  expression	69	None	add
275	[BUG]  [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(arg.length(),  stopAtNonOption);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(arg.length(),  stopAtNonOption);  [BUGGY]      if  (     "--     ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	TokenBuffer  tokens  =  new  TokenBuffer(arg.length(),  stopAtNonOption);	  TokenBuffer    tokens    =    new    TokenBuffer(arg.length(),    opt);    	non-compiled	[CE]  	139	None	replace
276	[BUG]  [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(opt.length(),  arg);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(opt.length(),  arg);  [BUGGY]      if  (     "--     ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	TokenBuffer  tokens  =  new  TokenBuffer(opt.length(),  arg);	  TokenBuffer    tokens    =    new    TokenBuffer(arg.length(),    opt);    	non-compiled	[CE]  	139	None	replace
277	[BUG]  [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(arg.length(),  0);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(arg.length(),  0);  [BUGGY]      if  (     "--     ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	TokenBuffer  tokens  =  new  TokenBuffer(arg.length(),  0);	  TokenBuffer    tokens    =    new    TokenBuffer(arg.length(),    opt);    	non-compiled	[CE]  	139	None	replace
278	[BUG]  [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(arg.length()  +  1,  opt);  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(arg.length()  +  1,  opt);  [BUGGY]      if  (     "--     ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	TokenBuffer  tokens  =  new  TokenBuffer(arg.length()  +  1,  opt);	  TokenBuffer    tokens    =    new    TokenBuffer(arg.length(),    opt);    	non-compiled	[CE]  	139	None	replace
279	[BUG]  [BUGGY]  [FE]  UnrecognizedOptionException  [FE]    UnrecognizedOptionException    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]          tokens.add(     "-     ");    tokens.add(   ".-     ");  tokens.add( "-   ");  tokens.add(   ".-   ");  [BUGGY]      if  (     "--     ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	add	                tokens.add(       "-       ");        tokens.add(   ".-       ");    tokens.add( "-   ");  tokens.add(   ".-   ");	  	compilable	  [FE]  UnrecognizedOptionException  	37	13	add
280	[BUG]  [BUGGY]          tokens.add(     "-     ");    tokens.add(   ".-     ");  tokens.add( "-   ");  tokens.add(   ".-   ");  [FE]  UnrecognizedOptionException  [FE]    UnrecognizedOptionException    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]          tokens.add(     "-     ");    tokens.add(   ".-     ");  tokens.add( "-   ");  tokens.add(   ".-   ");  [BUGGY]      if  (     "--     ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	                tokens.add(       "-       ");        tokens.add(   ".-       ");    tokens.add( "-   ");  tokens.add(   ".-   ");	  	compilable	  [FE]  UnrecognizedOptionException  	37	13	add
281	[BUG]  [BUGGY]  if(   "--     ".equals(arg)&&  eatTheRest)  {  if(   "--   ".equals(arg)&&  eatTheRest)  {  [CE]  reached  end  of  file  while  parsing  [FE]    ComparisonFailure    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  if(   "--     ".equals(arg)&&  eatTheRest)  {  if(   "--   ".equals(arg)&&  eatTheRest)  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	if(   "--       ".equals(arg)&&    eatTheRest)    {    if(   "--   ".equals(arg)&&  eatTheRest)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	33	None	add
282	[BUG]  [BUGGY]  if(   "--     ".equals(arg)&&  eatTheRest)  {  if('--   ".equals(arg)&&  eatTheRest)  {  [CE]  unclosed  character  literal  [FE]      ComparisonFailure    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  if(   "--     ".equals(arg)&&  eatTheRest)  {  if('--   ".equals(arg)&&  eatTheRest)  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	if(   "--       ".equals(arg)&&    eatTheRest)    {    if('--   ".equals(arg)&&  eatTheRest)  {	  	non-compiled	[CE]  unclosed  character  literal	33	None	add
283	[BUG]  [BUGGY]  if(   "--     ".equals(arg)&&  eatTheRest)  {  if( ".--   ".equals(arg)&&  eatTheRest)  {  [CE]  reached  end  of  file  while  parsing  [FE]        ComparisonFailure    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  if(   "--     ".equals(arg)&&  eatTheRest)  {  if( ".--   ".equals(arg)&&  eatTheRest)  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	if(   "--       ".equals(arg)&&    eatTheRest)    {    if( ".--   ".equals(arg)&&  eatTheRest)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	33	None	add
284	[BUG]  [BUGGY]  if(!stopAtNonOption  &&!arg.equals( "--))  {  [CE]  unclosed  string  literal  [FE]    AssertionFailedError    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  if(!stopAtNonOption  &&!arg.equals( "--))  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	if(!stopAtNonOption  &&!arg.equals( "--))  {	  if(!stopAtNonOption    &&!arg.equals(   "--   "))    {    	non-compiled	[CE]  unclosed  string  literal	105	None	replace
285	[BUG]  [BUGGY]  [FE]  ArrayStoreException  [FE]    ArrayStoreException    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]          tokens.add(     "-     ");    tokens.add('-');  tokens.add( "-   ");  tokens.add('-');  [BUGGY]      if  (     "--     ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	add	                tokens.add(       "-       ");        tokens.add('-');    tokens.add( "-   ");  tokens.add('-');	  	compilable	  [FE]  ArrayStoreException  	134	14	add
286	[BUG]  [BUGGY]          tokens.add(     "-     ");    tokens.add('-');  tokens.add( "-   ");  tokens.add('-');  [FE]  ArrayStoreException  [FE]    ArrayStoreException    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]          tokens.add(     "-     ");    tokens.add('-');  tokens.add( "-   ");  tokens.add('-');  [BUGGY]      if  (     "--     ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	                tokens.add(       "-       ");        tokens.add('-');    tokens.add( "-   ");  tokens.add('-');	  	compilable	  [FE]  ArrayStoreException  	134	14	add
287	[BUG]  [BUGGY]  [FE]  ArrayStoreException  [FE]      ArrayStoreException    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]          tokens.add(     "-     ");    tokens.add('-');  tokens.add('-');  tokens.add('-');  [BUGGY]      if  (     "--     ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	add	                tokens.add(       "-       ");        tokens.add('-');    tokens.add('-');  tokens.add('-');	  	compilable	  [FE]  ArrayStoreException  	134	14	add
288	[BUG]  [BUGGY]          tokens.add(     "-     ");    tokens.add('-');  tokens.add('-');  tokens.add('-');  [FE]  ArrayStoreException  [FE]      ArrayStoreException    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]          tokens.add(     "-     ");    tokens.add('-');  tokens.add('-');  tokens.add('-');  [BUGGY]      if  (     "--     ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	                tokens.add(       "-       ");        tokens.add('-');    tokens.add('-');  tokens.add('-');	  	compilable	  [FE]  ArrayStoreException  	134	14	add
289	[BUG]  [BUGGY]  [FE]  ArrayStoreException  [FE]        ArrayStoreException    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]          tokens.add(     "-     ");    tokens.add('-');  tokens.add( ",-   ");  tokens.add('-');  [BUGGY]      if  (     "--     ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	add	                tokens.add(       "-       ");        tokens.add('-');    tokens.add( ",-   ");  tokens.add('-');	  	compilable	  [FE]  ArrayStoreException  	134	14	add
290	[BUG]  [BUGGY]          tokens.add(     "-     ");    tokens.add('-');  tokens.add( ",-   ");  tokens.add('-');  [FE]  ArrayStoreException  [FE]        ArrayStoreException    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]          tokens.add(     "-     ");    tokens.add('-');  tokens.add( ",-   ");  tokens.add('-');  [BUGGY]      if  (     "--     ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	                tokens.add(       "-       ");        tokens.add('-');    tokens.add( ",-   ");  tokens.add('-');	  	compilable	  [FE]  ArrayStoreException  	134	14	add
291	[BUG]  [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(tokens,  opt);  [CE]  [FE]            ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(tokens,  opt);  [BUGGY]      if  (     "--     ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	TokenBuffer  tokens  =  new  TokenBuffer(tokens,  opt);	  TokenBuffer    tokens    =    new    TokenBuffer(arg,    opt);    	non-compiled	[CE]  	80	None	replace
292	[BUG]  [BUGGY]  String[]  arguments  =  options.toArray(arguments[i],  opt);  [CE]  [FE]                ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  String[]  arguments  =  options.toArray(arguments[i],  opt);  [BUGGY]      if  (     "--     ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	String[]  arguments  =  options.toArray(arguments[i],  opt);	  String[]    arguments    =    options.toArray(arguments[i]);    	non-compiled	[CE]  	46	None	replace
293	[BUG]  [BUGGY]  String[]  arguments  =  options.toArray(arguments[i],  arg);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  String[]  arguments  =  options.toArray(arguments[i],  arg);  [BUGGY]      if  (     "--     ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	String[]  arguments  =  options.toArray(arguments[i],  arg);	  String[]    arguments    =    options.toArray(arguments[i]);    	non-compiled	[CE]  	46	None	replace
294	[BUG]  [BUGGY]  String[]  arguments  =  options.toArray(arguments[i]  +  1);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  String[]  arguments  =  options.toArray(arguments[i]  +  1);  [BUGGY]      if  (     "--     ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	String[]  arguments  =  options.toArray(arguments[i]  +  1);	  String[]    arguments    =    options.toArray(arguments[i]);    	non-compiled	[CE]  	46	None	replace
295	[BUG]  [BUGGY]  tokens.add( "- "  +  arg  + ";n ");  [CE]  [FE]        AssertionFailedError      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  tokens.add( "- "  +  arg  + ";n ");  [BUGGY]      if  (     "--     ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	tokens.add( "- "  +  arg  + ";n ");	  tokens.add(   "-   "    +    arg);    	non-compiled	[CE]  	54	None	replace
296	[BUG]  [BUGGY]  tokens.add( "- "  +  arg  + ": ");  [CE]  [FE]          AssertionFailedError      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  tokens.add( "- "  +  arg  + ": ");  [BUGGY]      if  (     "--     ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	tokens.add( "- "  +  arg  + ": ");	  tokens.add(   "-   "    +    arg);    	non-compiled	[CE]  	54	None	replace
297	[BUG]  [BUGGY]  if(arg.startsWith( "-- "))  {  if( "--   ".equals(arg)||  arg.startsWith( ".-- "))  {  [CE]  reached  end  of  file  while  parsing  [FE]          AssertionFailedError      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  if(arg.startsWith( "-- "))  {  if( "--   ".equals(arg)||  arg.startsWith( ".-- "))  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	if(arg.startsWith( "-- "))  {  if( "--   ".equals(arg)||  arg.startsWith( ".-- "))  {	  if(       "--       ".equals(arg)||    arg.startsWith(       "--       "))    {    if(       "--       ".equals(arg)||    arg.startsWith(   ".--       "))    {    	non-compiled	[CE]  reached  end  of  file  while  parsing	53	None	replace
298	[BUG]  [BUGGY]  tokens.add(arg[i]);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  tokens.add(arg[i]);  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	tokens.add(arg[i]);	  for(int    i    =    0;    i    <    arguments.length;    i++)    {    tokens.add(arg[i]);    }    	non-compiled	[CE]  	153	None	replace
299	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  arguments.length  -  1;  i++)  {  tokens.add(arg[i]);  }  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  for(int  i  =  0;  i  <  arguments.length  -  1;  i++)  {  tokens.add(arg[i]);  }  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	for(int  i  =  0;  i  <  arguments.length  -  1;  i++)  {  tokens.add(arg[i]);  }	  for(int    i    =    0;    i    <    arguments.length;    i++)    {    tokens.add(arg[i]);    }    	non-compiled	[CE]  	153	None	replace
300	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  argument.length;  i++)  {  tokens.add(arg[i]);  }  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  for(int  i  =  0;  i  <  argument.length;  i++)  {  tokens.add(arg[i]);  }  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	for(int  i  =  0;  i  <  argument.length;  i++)  {  tokens.add(arg[i]);  }	  for(int    i    =    0;    i    <    arguments.length;    i++)    {    tokens.add(arg[i]);    }    	non-compiled	[CE]  	153	None	replace
301	[BUG]  [BUGGY]  tokens.add( "- ");  Tokens.add(arg);  [CE]  [FE]          MissingArgumentException      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  tokens.add( "- ");  Tokens.add(arg);  [BUGGY]      if  (     "--     ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	tokens.add( "- ");  Tokens.add(arg);	          tokens.add(arg);    Tokens.add(arg);    	non-compiled	[CE]  	156	None	replace
302	[BUG]  [BUGGY]  tokens.add(i);  Tokens.add(arg);  [CE]  [FE]            MissingArgumentException      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  tokens.add(i);  Tokens.add(arg);  [BUGGY]      if  (     "--     ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	tokens.add(i);  Tokens.add(arg);	          tokens.add(arg);    Tokens.add(arg);    	non-compiled	[CE]  	156	None	replace
303	[BUG]  [BUGGY]  String[]  tokens  =  new  String[tokens.size()  [0];  [CE]  [FE]            ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  String[]  tokens  =  new  String[tokens.size()  [0];  [BUGGY]      if  (     "--     ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	String[]  tokens  =  new  String[tokens.size()  [0];	  String[]    tokens    =    new    String[tokens.size()    -    1];    	non-compiled	[CE]  	118	None	replace
304	[BUG]  [BUGGY]  String[]  arg  =  options.toArray(arguments[i],  stopAtNonOption,  opt);  [CE]  [FE]                ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  String[]  arg  =  options.toArray(arguments[i],  stopAtNonOption,  opt);  [BUGGY]      if  (     "--     ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	String[]  arg  =  options.toArray(arguments[i],  stopAtNonOption,  opt);	  String[]    arg    =    options.toArray(arguments[i],    stopAtNonOption);    	non-compiled	[CE]  	131	None	replace
305	[BUG]  [BUGGY]  String[]  arg  =  options.toArray(arguments[i],  stopAtNonOption,  tokens);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  String[]  arg  =  options.toArray(arguments[i],  stopAtNonOption,  tokens);  [BUGGY]      if  (     "--     ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	String[]  arg  =  options.toArray(arguments[i],  stopAtNonOption,  tokens);	  String[]    arg    =    options.toArray(arguments[i],    stopAtNonOption);    	non-compiled	[CE]  	131	None	replace
306	[BUG]  [BUGGY]  String[]  arguments  =  options.toArray(arguments[i],  stopAtNonOption);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  String[]  arguments  =  options.toArray(arguments[i],  stopAtNonOption);  [BUGGY]      if  (     "--     ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	String[]  arguments  =  options.toArray(arguments[i],  stopAtNonOption);	  String[]    arg    =    options.toArray(arguments[i],    stopAtNonOption);    	non-compiled	[CE]  	131	None	replace
307	[BUG]  [BUGGY]  String[]  tokens  =  new  String[tokens.size()  +  2];  [CE]  [FE]            ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  String[]  tokens  =  new  String[tokens.size()  +  2];  [BUGGY]      if  (     "--     ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	String[]  tokens  =  new  String[tokens.size()  +  2];	  String[]    tokens    =    new    String[tokens.size()    *    2];    	non-compiled	[CE]  	157	None	replace
308	[BUG]  [BUGGY]  String[]  tokens  =  new  String[tokens.size()  /  2];  [CE]  [FE]              ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  String[]  tokens  =  new  String[tokens.size()  /  2];  [BUGGY]      if  (     "--     ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	String[]  tokens  =  new  String[tokens.size()  /  2];	  String[]    tokens    =    new    String[tokens.size()    *    2];    	non-compiled	[CE]  	157	None	replace
309	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  if(arg.startsWith( "-- ")||!eatTheRest)  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	add	if(arg.startsWith( "-- ")||!eatTheRest)  {	  if(arg.startsWith(   "--   "))    {    	compilable	  [FE]  AssertionFailedError  	5	14	replace
310	[BUG]  [BUGGY]  if(arg.startsWith( "-- ")||!eatTheRest)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  if(arg.startsWith( "-- ")||!eatTheRest)  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	if(arg.startsWith( "-- ")||!eatTheRest)  {	  if(arg.startsWith(   "--   "))    {    	compilable	  [FE]  AssertionFailedError  	5	14	replace
311	[BUG]  [BUGGY]  tokens.add(arg);  TokenBuffer  tokens  =  new  TokenBuffer(arguments.length);  [CE]  [FE]              MissingArgumentException      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  tokens.add(arg);  TokenBuffer  tokens  =  new  TokenBuffer(arguments.length);  [BUGGY]      if  (     "--     ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	tokens.add(arg);  TokenBuffer  tokens  =  new  TokenBuffer(arguments.length);	          tokens.add(arg);    TokenBuffer    tokens    =    new    TokenBuffer(tokens.length);    	non-compiled	[CE]  	130	None	replace
312	[BUG]  [BUGGY]  tokens.add(arg);  TokenBuffer  tokens  =  new  TokenBuffer(tokens.length  +  1);  [CE]  [FE]                MissingArgumentException      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  tokens.add(arg);  TokenBuffer  tokens  =  new  TokenBuffer(tokens.length  +  1);  [BUGGY]      if  (     "--     ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	tokens.add(arg);  TokenBuffer  tokens  =  new  TokenBuffer(tokens.length  +  1);	          tokens.add(arg);    TokenBuffer    tokens    =    new    TokenBuffer(tokens.length);    	non-compiled	[CE]  	130	None	replace
313	[BUG]  [BUGGY]  tokens.add(arguments[i]);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  tokens.add(arguments[i]);  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	tokens.add(arguments[i]);	  for(int    i    =    0;    i    <    arguments.length;    i++)    {    String    arg    =    arguments[i];    if(!eatTheRest)    {    tokens.add(arg);    }    	non-compiled	[CE]  	152	None	replace
314	[BUG]  [BUGGY]  tokens.add(arguments[i].toString());  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  tokens.add(arguments[i].toString());  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	tokens.add(arguments[i].toString());	  for(int    i    =    0;    i    <    arguments.length;    i++)    {    String    arg    =    arguments[i];    if(!eatTheRest)    {    tokens.add(arg);    }    	non-compiled	[CE]  	152	None	replace
315	[BUG]  [BUGGY]  String[]  arg  =  options.get(i,  stopAtNonOption);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  String[]  arg  =  options.get(i,  stopAtNonOption);  [BUGGY]      if  (     "--     ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	String[]  arg  =  options.get(i,  stopAtNonOption);	  String[]    arg    =    options.get(opt,    stopAtNonOption);    	non-compiled	[CE]  	87	None	replace
316	[BUG]  [BUGGY]  String[]  arg  =  options.get(opt,  i);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  String[]  arg  =  options.get(opt,  i);  [BUGGY]      if  (     "--     ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	String[]  arg  =  options.get(opt,  i);	  String[]    arg    =    options.get(opt,    stopAtNonOption);    	non-compiled	[CE]  	87	None	replace
317	[BUG]  [BUGGY]  String[]  arg  =  options.get(options,  stopAtNonOption);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  String[]  arg  =  options.get(options,  stopAtNonOption);  [BUGGY]      if  (     "--     ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	String[]  arg  =  options.get(options,  stopAtNonOption);	  String[]    arg    =    options.get(opt,    stopAtNonOption);    	non-compiled	[CE]  	87	None	replace
318	[BUG]  [BUGGY]  String[]  arg  =  options.get(opt,  stopAtNonOption,  tokens);  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  String[]  arg  =  options.get(opt,  stopAtNonOption,  tokens);  [BUGGY]      if  (     "--     ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	String[]  arg  =  options.get(opt,  stopAtNonOption,  tokens);	  String[]    arg    =    options.get(opt,    stopAtNonOption);    	non-compiled	[CE]  	87	None	replace
319	[BUG]  [BUGGY]  if(!stopAtNonOption  &&!arg.equals(   "--   "))  {  if(!stopAtNonOption  &&!arg.equals(   "--   "))  {  [CE]  reached  end  of  file  while  parsing  [FE]    AssertionFailedError    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  if(!stopAtNonOption  &&!arg.equals(   "--   "))  {  if(!stopAtNonOption  &&!arg.equals(   "--   "))  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	if(!stopAtNonOption    &&!arg.equals(   "--   "))    {    if(!stopAtNonOption  &&!arg.equals(   "--   "))  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	104	None	add
320	[BUG]  [BUGGY]  if(!stopAtNonOption  &&!arg.equals(   "--   "))  {  if(!stopAtNonOption  &&!arg.equals( ".--   "))  {  [CE]  reached  end  of  file  while  parsing  [FE]      AssertionFailedError    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  if(!stopAtNonOption  &&!arg.equals(   "--   "))  {  if(!stopAtNonOption  &&!arg.equals( ".--   "))  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	if(!stopAtNonOption    &&!arg.equals(   "--   "))    {    if(!stopAtNonOption  &&!arg.equals( ".--   "))  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	104	None	add
321	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  if(stopAtNonOption  &&!arg.equals(stopAtNonOption))  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	add	if(stopAtNonOption  &&!arg.equals(stopAtNonOption))  {	  if(stopAtNonOption    ||!arg.equals(stopAtNonOption))    {    	compilable	  [FE]  AssertionFailedError  	124	6	replace
322	[BUG]  [BUGGY]  if(stopAtNonOption  &&!arg.equals(stopAtNonOption))  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  if(stopAtNonOption  &&!arg.equals(stopAtNonOption))  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	if(stopAtNonOption  &&!arg.equals(stopAtNonOption))  {	  if(stopAtNonOption    ||!arg.equals(stopAtNonOption))    {    	compilable	  [FE]  AssertionFailedError  	124	6	replace
323	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  if(arg!=  null  ||!arg.equals(stopAtNonOption))  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	add	if(arg!=  null  ||!arg.equals(stopAtNonOption))  {	  if(stopAtNonOption    ||!arg.equals(stopAtNonOption))    {    	compilable	  [FE]  AssertionFailedError  	124	14	replace
324	[BUG]  [BUGGY]  if(arg!=  null  ||!arg.equals(stopAtNonOption))  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  if(arg!=  null  ||!arg.equals(stopAtNonOption))  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	if(arg!=  null  ||!arg.equals(stopAtNonOption))  {	  if(stopAtNonOption    ||!arg.equals(stopAtNonOption))    {    	compilable	  [FE]  AssertionFailedError  	124	14	replace
325	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  if(!arg.equals(stopAtNonOption))  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	add	if(!arg.equals(stopAtNonOption))  {	  if(stopAtNonOption    ||!arg.equals(stopAtNonOption))    {    	compilable	  [FE]  AssertionFailedError  	124	14	replace
326	[BUG]  [BUGGY]  if(!arg.equals(stopAtNonOption))  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  if(!arg.equals(stopAtNonOption))  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	if(!arg.equals(stopAtNonOption))  {	  if(stopAtNonOption    ||!arg.equals(stopAtNonOption))    {    	compilable	  [FE]  AssertionFailedError  	124	14	replace
327	[BUG]  [BUGGY]  if(stopAtNonOption  ||!arg.equals(option))  {  [CE]  cannot  find  symbol  option  [FE]          AssertionFailedError    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  if(stopAtNonOption  ||!arg.equals(option))  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	if(stopAtNonOption  ||!arg.equals(option))  {	  if(stopAtNonOption    ||!arg.equals(stopAtNonOption))    {    	non-compiled	[CE]  cannot  find  symbol  option	124	None	replace
328	[BUG]  [BUGGY]  tokens.add(arg);  TokenBuffer  tokens  =  new  TokenBuffer(tokens.size()  -  1);  [CE]  [FE]        MissingArgumentException      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  tokens.add(arg);  TokenBuffer  tokens  =  new  TokenBuffer(tokens.size()  -  1);  [BUGGY]      if  (     "--     ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	tokens.add(arg);  TokenBuffer  tokens  =  new  TokenBuffer(tokens.size()  -  1);	          tokens.add(arg);    TokenBuffer    tokens    =    new    TokenBuffer(tokens.size());    	non-compiled	[CE]  	127	None	replace
329	[BUG]  [BUGGY]  tokens.add(arg);  TokenBuffer  tokens  =  new  TokenBuffer(tokens.size()  +  1);  [CE]  [FE]          MissingArgumentException      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  tokens.add(arg);  TokenBuffer  tokens  =  new  TokenBuffer(tokens.size()  +  1);  [BUGGY]      if  (     "--     ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	tokens.add(arg);  TokenBuffer  tokens  =  new  TokenBuffer(tokens.size()  +  1);	          tokens.add(arg);    TokenBuffer    tokens    =    new    TokenBuffer(tokens.size());    	non-compiled	[CE]  	127	None	replace
330	[BUG]  [BUGGY]  if(arg.equals(arg)||!eatTheRest.startsWith( "-- "))  {  [CE]  boolean  cannot  be  dereferenced  [FE]                ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  if(arg.equals(arg)||!eatTheRest.startsWith( "-- "))  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	if(arg.equals(arg)||!eatTheRest.startsWith( "-- "))  {	  if(   "--       ".equals(arg)||!eatTheRest.startsWith(   "--       "))    {    	non-compiled	[CE]  boolean  cannot  be  dereferenced	102	None	replace
331	[BUG]  [BUGGY]  if( "--   ".equals(arg)||!appendAtNonOption.startsWith( "--   "))  {  [CE]  cannot  find  symbol  appendAtNonOption  [FE]                  ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  if( "--   ".equals(arg)||!appendAtNonOption.startsWith( "--   "))  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	if( "--   ".equals(arg)||!appendAtNonOption.startsWith( "--   "))  {	  if(   "--       ".equals(arg)||!eatTheRest.startsWith(   "--       "))    {    	non-compiled	[CE]  cannot  find  symbol  appendAtNonOption	102	None	replace
332	[BUG]  [BUGGY]  if(arg.startsWith( "- "))  {  if('--   ".equals(arg)||  eatTheRest)  {  [CE]  unclosed  character  literal  [FE]          ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  if(arg.startsWith( "- "))  {  if('--   ".equals(arg)||  eatTheRest)  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	if(arg.startsWith( "- "))  {  if('--   ".equals(arg)||  eatTheRest)  {	  if(       "--       ".equals(arg)||    eatTheRest)    {    if('--       ".equals(arg)||    eatTheRest)    {    	non-compiled	[CE]  unclosed  character  literal	15	None	replace
333	[BUG]  [BUGGY]  if('-'.equals(arg)||  stopAtNonOption)  {  [CE]  char  cannot  be  dereferenced  [FE]            ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  if('-'.equals(arg)||  stopAtNonOption)  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	if('-'.equals(arg)||  stopAtNonOption)  {	  if(       "--       ".equals(arg)||    eatTheRest)    {    if('--       ".equals(arg)||    eatTheRest)    {    	non-compiled	[CE]  char  cannot  be  dereferenced	15	None	replace
334	[BUG]  [BUGGY]  String[]  arguments  =  options.getArguments();  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  String[]  arguments  =  options.getArguments();  [BUGGY]      if  (     "--     ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	String[]  arguments  =  options.getArguments();	  String[]    arguments    =    options.getOptions();    	non-compiled	[CE]  	86	None	replace
335	[BUG]  [BUGGY]  String[]  arguments  =  options.get(arg);  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  String[]  arguments  =  options.get(arg);  [BUGGY]      if  (     "--     ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	String[]  arguments  =  options.get(arg);	  String[]    arguments    =    options.getOptions();    	non-compiled	[CE]  	86	None	replace
336	[BUG]  [BUGGY]  String[]  arguments  =  options.getOptions(opt);  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  String[]  arguments  =  options.getOptions(opt);  [BUGGY]      if  (     "--     ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	String[]  arguments  =  options.getOptions(opt);	  String[]    arguments    =    options.getOptions();    	non-compiled	[CE]  	86	None	replace
337	[BUG]  [BUGGY]  if(   "--     ".equals(arg)&&!stopAtNonOption)  {  if(   "--   ".equals(arg)&&!stopAtNonOption)  {  [CE]  reached  end  of  file  while  parsing  [FE]    ComparisonFailure    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  if(   "--     ".equals(arg)&&!stopAtNonOption)  {  if(   "--   ".equals(arg)&&!stopAtNonOption)  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	if(   "--       ".equals(arg)&&!stopAtNonOption)    {    if(   "--   ".equals(arg)&&!stopAtNonOption)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	41	None	add
338	[BUG]  [BUGGY]  if(   "--     ".equals(arg)&&!stopAtNonOption)  {  if('--   ".equals(arg)&&!stopAtNonOption)  {  [CE]  unclosed  character  literal  [FE]      ComparisonFailure    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  if(   "--     ".equals(arg)&&!stopAtNonOption)  {  if('--   ".equals(arg)&&!stopAtNonOption)  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	if(   "--       ".equals(arg)&&!stopAtNonOption)    {    if('--   ".equals(arg)&&!stopAtNonOption)  {	  	non-compiled	[CE]  unclosed  character  literal	41	None	add
339	[BUG]  [BUGGY]  if(   "--     ".equals(arg)&&!stopAtNonOption)  {  if( ".--   ".equals(arg)&&!stopAtNonOption)  {  [CE]  reached  end  of  file  while  parsing  [FE]        ComparisonFailure    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  if(   "--     ".equals(arg)&&!stopAtNonOption)  {  if( ".--   ".equals(arg)&&!stopAtNonOption)  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	if(   "--       ".equals(arg)&&!stopAtNonOption)    {    if( ".--   ".equals(arg)&&!stopAtNonOption)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	41	None	add
340	[BUG]  [BUGGY]  if(   "--     ".equals(arg)&&!stopAtNonOption)  {  if(! "--   ".equals(arg)&&!stopAtNonOption)  {  [CE]  reached  end  of  file  while  parsing  [FE]          ComparisonFailure    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  if(   "--     ".equals(arg)&&!stopAtNonOption)  {  if(! "--   ".equals(arg)&&!stopAtNonOption)  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	if(   "--       ".equals(arg)&&!stopAtNonOption)    {    if(! "--   ".equals(arg)&&!stopAtNonOption)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	41	None	add
341	[BUG]  [BUGGY]  if(!stopAtNonOption)  {  if(! "--   ".equals(arg)||  eattheRest)  {  [CE]  reached  end  of  file  while  parsing  [FE]          AssertionFailedError      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  if(!stopAtNonOption)  {  if(! "--   ".equals(arg)||  eattheRest)  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	if(!stopAtNonOption)  {  if(! "--   ".equals(arg)||  eattheRest)  {	  if(!       "--       ".equals(arg)||    eatTheRest)    {    if(!       "--       ".equals(arg)||    eattheRest)    {    	non-compiled	[CE]  reached  end  of  file  while  parsing	51	None	replace
342	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  if(arg.startsWith( "- ")&&  arg.startsWith( "-- "))  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	add	if(arg.startsWith( "- ")&&  arg.startsWith( "-- "))  {	  if(arg.startsWith(   "-   ")||    arg.startsWith(   "--   "))    {    	compilable	  [FE]  AssertionFailedError  	9	7	replace
343	[BUG]  [BUGGY]  if(arg.startsWith( "- ")&&  arg.startsWith( "-- "))  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  if(arg.startsWith( "- ")&&  arg.startsWith( "-- "))  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	if(arg.startsWith( "- ")&&  arg.startsWith( "-- "))  {	  if(arg.startsWith(   "-   ")||    arg.startsWith(   "--   "))    {    	compilable	  [FE]  AssertionFailedError  	9	7	replace
344	[BUG]  [BUGGY]  if(arg.startsWith( "- ")||  arg.startsWith( "--))  {  [CE]  unclosed  string  literal  [FE]      AssertionFailedError    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  if(arg.startsWith( "- ")||  arg.startsWith( "--))  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	if(arg.startsWith( "- ")||  arg.startsWith( "--))  {	  if(arg.startsWith(   "-   ")||    arg.startsWith(   "--   "))    {    	non-compiled	[CE]  unclosed  string  literal	9	None	replace
345	[BUG]  [BUGGY]  if(options.contains(arg))  {  if(!stopAtNonOption)  {  [CE]  reached  end  of  file  while  parsing  [FE]        AssertionFailedError      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  if(options.contains(arg))  {  if(!stopAtNonOption)  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	if(options.contains(arg))  {  if(!stopAtNonOption)  {	  if(!eatTheRest)    {    if(!eatTheRest)    {    	non-compiled	[CE]  reached  end  of  file  while  parsing	97	None	replace
346	[BUG]  [BUGGY]  if(!   "--   ".equals(arg)||!stopAtNonOption)  {  if(!   "--   ".equals(arg)||!stopAtNonOption)  {  [CE]  reached  end  of  file  while  parsing  [FE]    AssertionFailedError    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  if(!   "--   ".equals(arg)||!stopAtNonOption)  {  if(!   "--   ".equals(arg)||!stopAtNonOption)  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	if(!   "--   ".equals(arg)||!stopAtNonOption)    {    if(!   "--   ".equals(arg)||!stopAtNonOption)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	10	None	add
347	[BUG]  [BUGGY]  if(!   "--   ".equals(arg)||!stopAtNonOption)  {  If(!   "--   ".equals(arg)||!stopAtNonOption)  {  [CE]  [FE]      AssertionFailedError    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  if(!   "--   ".equals(arg)||!stopAtNonOption)  {  If(!   "--   ".equals(arg)||!stopAtNonOption)  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	if(!   "--   ".equals(arg)||!stopAtNonOption)    {    If(!   "--   ".equals(arg)||!stopAtNonOption)  {	  	non-compiled	[CE]  	10	None	add
348	[BUG]  [BUGGY]  if(arg.startsWith( "- "))  {  if('--   ".equals(arg)||!stopAtNonOption)  {  [CE]  unclosed  character  literal  [FE]            AssertionFailedError      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  if(arg.startsWith( "- "))  {  if('--   ".equals(arg)||!stopAtNonOption)  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	if(arg.startsWith( "- "))  {  if('--   ".equals(arg)||!stopAtNonOption)  {	  if(       "--       ".equals(arg)||!stopAtNonOption)    {    if('--       ".equals(arg)||!stopAtNonOption)    {    	non-compiled	[CE]  unclosed  character  literal	77	None	replace
349	[BUG]  [BUGGY]  if(!stopAtNonOption)  {  if('--   ".equals(arg)||!stopAtNonOption)  {  [CE]  unclosed  character  literal  [FE]              AssertionFailedError      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  if(!stopAtNonOption)  {  if('--   ".equals(arg)||!stopAtNonOption)  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	if(!stopAtNonOption)  {  if('--   ".equals(arg)||!stopAtNonOption)  {	  if(       "--       ".equals(arg)||!stopAtNonOption)    {    if('--       ".equals(arg)||!stopAtNonOption)    {    	non-compiled	[CE]  unclosed  character  literal	77	None	replace
350	[BUG]  [BUGGY]  if('-'.equals(arg)||!stopAtNonOption)  {  [CE]  char  cannot  be  dereferenced  [FE]                AssertionFailedError      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  if('-'.equals(arg)||!stopAtNonOption)  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	if('-'.equals(arg)||!stopAtNonOption)  {	  if(       "--       ".equals(arg)||!stopAtNonOption)    {    if('--       ".equals(arg)||!stopAtNonOption)    {    	non-compiled	[CE]  char  cannot  be  dereferenced	77	None	replace
351	[BUG]  [BUGGY]  if(   "--     ".equals(arg)||!arg.startsWith(   "--   "))  {  if(   "--   ".equals(arg)||!arg.startsWith( "--   "))  {  [CE]  reached  end  of  file  while  parsing  [FE]    AssertionFailedError    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  if(   "--     ".equals(arg)||!arg.startsWith(   "--   "))  {  if(   "--   ".equals(arg)||!arg.startsWith( "--   "))  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	if(   "--       ".equals(arg)||!arg.startsWith(   "--   "))    {    if(   "--   ".equals(arg)||!arg.startsWith( "--   "))  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	24	None	add
352	[BUG]  [BUGGY]  if(   "--     ".equals(arg)||!arg.startsWith(   "--   "))  {  if(   "--   ".equals(arg)||!arg.startsWith( ".--   "))  {  [CE]  reached  end  of  file  while  parsing  [FE]      AssertionFailedError    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  if(   "--     ".equals(arg)||!arg.startsWith(   "--   "))  {  if(   "--   ".equals(arg)||!arg.startsWith( ".--   "))  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	if(   "--       ".equals(arg)||!arg.startsWith(   "--   "))    {    if(   "--   ".equals(arg)||!arg.startsWith( ".--   "))  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	24	None	add
353	[BUG]  [BUGGY]  int  i  =  0;  i  <  arguments.length;  i++)  {  tokens.add(arg);  }  [CE]  >  expected  [FE]                  ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  int  i  =  0;  i  <  arguments.length;  i++)  {  tokens.add(arg);  }  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	int  i  =  0;  i  <  arguments.length;  i++)  {  tokens.add(arg);  }	  for(int    i    =    0;    i    <    arguments.length;    i++)    {    tokens.add(arg);    }    	non-compiled	[CE]  >  expected	151	None	replace
354	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  argument.length;  i++)  {  tokens.add(arg);  }  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  for(int  i  =  0;  i  <  argument.length;  i++)  {  tokens.add(arg);  }  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	for(int  i  =  0;  i  <  argument.length;  i++)  {  tokens.add(arg);  }	  for(int    i    =    0;    i    <    arguments.length;    i++)    {    tokens.add(arg);    }    	non-compiled	[CE]  	151	None	replace
355	[BUG]  [BUGGY]  if(stopAtNonOption)  {  if(!   "--   ".equals(arg)||!eatTheRest)  {  [CE]  reached  end  of  file  while  parsing  [FE]        AssertionFailedError      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  if(stopAtNonOption)  {  if(!   "--   ".equals(arg)||!eatTheRest)  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	if(stopAtNonOption)  {  if(!   "--   ".equals(arg)||!eatTheRest)  {	  if(!       "--       ".equals(arg)||!eatTheRest)    {    if(!       "--       ".equals(arg)||!eatTheRest)    {    	non-compiled	[CE]  reached  end  of  file  while  parsing	12	None	replace
356	[BUG]  [BUGGY]  tokens.add(arg);  TokenBuffer  tokens  =  new  TokenBuffer(arg,  opt);  [CE]  [FE]          MissingArgumentException      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  tokens.add(arg);  TokenBuffer  tokens  =  new  TokenBuffer(arg,  opt);  [BUGGY]      if  (     "--     ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	tokens.add(arg);  TokenBuffer  tokens  =  new  TokenBuffer(arg,  opt);	          tokens.add(arg);    TokenBuffer    tokens    =    new    TokenBuffer(arg);    	non-compiled	[CE]  	128	None	replace
357	[BUG]  [BUGGY]  tokens.add(i);  TokenBuffer  tokens  =  new  TokenBuffer(arg);  [CE]  [FE]            MissingArgumentException      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  tokens.add(i);  TokenBuffer  tokens  =  new  TokenBuffer(arg);  [BUGGY]      if  (     "--     ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	tokens.add(i);  TokenBuffer  tokens  =  new  TokenBuffer(arg);	          tokens.add(arg);    TokenBuffer    tokens    =    new    TokenBuffer(arg);    	non-compiled	[CE]  	128	None	replace
358	[BUG]  [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(arg.length()  +  1,  i  +  1);  [CE]  [FE]                ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(arg.length()  +  1,  i  +  1);  [BUGGY]      if  (     "--     ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	TokenBuffer  tokens  =  new  TokenBuffer(arg.length()  +  1,  i  +  1);	  TokenBuffer    tokens    =    new    TokenBuffer(arg.length(),    i    +    1);    	non-compiled	[CE]  	79	None	replace
359	[BUG]  [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(arg.length(),  i  +  2);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(arg.length(),  i  +  2);  [BUGGY]      if  (     "--     ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	TokenBuffer  tokens  =  new  TokenBuffer(arg.length(),  i  +  2);	  TokenBuffer    tokens    =    new    TokenBuffer(arg.length(),    i    +    1);    	non-compiled	[CE]  	79	None	replace
360	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  if(!   "--   ".equals(arg)&&  stopAtNonOption)  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	add	if(!   "--   ".equals(arg)&&  stopAtNonOption)  {	  if(!       "--   ".equals(arg)||    stopAtNonOption)    {    	compilable	  [FE]  AssertionFailedError  	2	6	replace
361	[BUG]  [BUGGY]  if(!   "--   ".equals(arg)&&  stopAtNonOption)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  if(!   "--   ".equals(arg)&&  stopAtNonOption)  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	if(!   "--   ".equals(arg)&&  stopAtNonOption)  {	  if(!       "--   ".equals(arg)||    stopAtNonOption)    {    	compilable	  [FE]  AssertionFailedError  	2	6	replace
362	[BUG]  [BUGGY]  tokens.add(arg.toLowerCase()  +  1);  [CE]  [FE]        MissingArgumentException      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  tokens.add(arg.toLowerCase()  +  1);  [BUGGY]      if  (     "--     ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	tokens.add(arg.toLowerCase()  +  1);	  tokens.add(arg.toLowerCase());    	non-compiled	[CE]  	65	None	replace
363	[BUG]  [BUGGY]  tokens.add(arg.toUpperCase());  [CE]  [FE]          MissingArgumentException      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  tokens.add(arg.toUpperCase());  [BUGGY]      if  (     "--     ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	tokens.add(arg.toUpperCase());	  tokens.add(arg.toLowerCase());    	non-compiled	[CE]  	65	None	replace
364	[BUG]  [BUGGY]  tokens.add(arg.toLowerCase(),  opt);  [CE]  [FE]            MissingArgumentException      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  tokens.add(arg.toLowerCase(),  opt);  [BUGGY]      if  (     "--     ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	tokens.add(arg.toLowerCase(),  opt);	  tokens.add(arg.toLowerCase());    	non-compiled	[CE]  	65	None	replace
365	[BUG]  [BUGGY]  if(   "--     ".equals(arg)||  stopAtNonOption)  {  if(   "--   ".equals(arg)||  stopAtNonOption)  {  [CE]  reached  end  of  file  while  parsing  [FE]    AssertionFailedError    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  if(   "--     ".equals(arg)||  stopAtNonOption)  {  if(   "--   ".equals(arg)||  stopAtNonOption)  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	if(   "--       ".equals(arg)||    stopAtNonOption)    {    if(   "--   ".equals(arg)||  stopAtNonOption)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	31	None	add
366	[BUG]  [BUGGY]  if(   "--     ".equals(arg)||  stopAtNonOption)  {  if('--   ".equals(arg)||  stopAtNonOption)  {  [CE]  unclosed  character  literal  [FE]      AssertionFailedError    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  if(   "--     ".equals(arg)||  stopAtNonOption)  {  if('--   ".equals(arg)||  stopAtNonOption)  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	if(   "--       ".equals(arg)||    stopAtNonOption)    {    if('--   ".equals(arg)||  stopAtNonOption)  {	  	non-compiled	[CE]  unclosed  character  literal	31	None	add
367	[BUG]  [BUGGY]  if(   "--     ".equals(arg)||  stopAtNonOption)  {  if( ".--   ".equals(arg)||  stopAtNonOption)  {  [CE]  reached  end  of  file  while  parsing  [FE]        AssertionFailedError    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  if(   "--     ".equals(arg)||  stopAtNonOption)  {  if( ".--   ".equals(arg)||  stopAtNonOption)  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	if(   "--       ".equals(arg)||    stopAtNonOption)    {    if( ".--   ".equals(arg)||  stopAtNonOption)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	31	None	add
368	[BUG]  [BUGGY]  if(   "--     ".equals(arg)||  stopAtNonOption)  {  if(! "--   ".equals(arg)||  stopAtNonOption)  {  [CE]  reached  end  of  file  while  parsing  [FE]          AssertionFailedError    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  if(   "--     ".equals(arg)||  stopAtNonOption)  {  if(! "--   ".equals(arg)||  stopAtNonOption)  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	if(   "--       ".equals(arg)||    stopAtNonOption)    {    if(! "--   ".equals(arg)||  stopAtNonOption)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	31	None	add
369	[BUG]  [BUGGY]  if(arg.startsWith( "- "))  {  tokens.add( "- ");  }  else  if(arg.startsWith( "- "))  {  tokens.add( "- ");  }  [CE]  [FE]    UnrecognizedOptionException    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  if(arg.startsWith( "- "))  {  tokens.add( "- ");  }  else  if(arg.startsWith( "- "))  {  tokens.add( "- ");  }  [BUGGY]      if  (     "--     ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	if(arg.startsWith( "- "))  {  tokens.add( "- ");  }  else  if(arg.startsWith( "- "))  {  tokens.add( "- ");  }	          tokens.add(       "-       ");    tokens.add(   "-       ");    	non-compiled	[CE]  	36	None	replace
370	[BUG]  [BUGGY]  if(arg.startsWith( "- "))  {  tokens.add( "- ");  }  else  {  tokens.add( "- ");  }  [CE]  [FE]      UnrecognizedOptionException    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  if(arg.startsWith( "- "))  {  tokens.add( "- ");  }  else  {  tokens.add( "- ");  }  [BUGGY]      if  (     "--     ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	if(arg.startsWith( "- "))  {  tokens.add( "- ");  }  else  {  tokens.add( "- ");  }	          tokens.add(       "-       ");    tokens.add(   "-       ");    	non-compiled	[CE]  	36	None	replace
371	[BUG]  [BUGGY]  if(arg.startsWith( "- "))  {  tokens.add( "- ");  }  [CE]  [FE]        UnrecognizedOptionException    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  if(arg.startsWith( "- "))  {  tokens.add( "- ");  }  [BUGGY]      if  (     "--     ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	if(arg.startsWith( "- "))  {  tokens.add( "- ");  }	          tokens.add(       "-       ");    tokens.add(   "-       ");    	non-compiled	[CE]  	36	None	replace
372	[BUG]  [BUGGY]  tokens.add(arg.toLowerCase(),  true);  [CE]  [FE]        MissingArgumentException      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  tokens.add(arg.toLowerCase(),  true);  [BUGGY]      if  (     "--     ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	tokens.add(arg.toLowerCase(),  true);	  tokens.add(arg.toLowerCase());    	non-compiled	[CE]  	65	None	replace
373	[BUG]  [BUGGY]  if(!eatTheRest.equals(arg)||!arg.startsWith( "-- "))  {  [CE]  boolean  cannot  be  dereferenced  [FE]                ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  if(!eatTheRest.equals(arg)||!arg.startsWith( "-- "))  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	if(!eatTheRest.equals(arg)||!arg.startsWith( "-- "))  {	  if(   "--       ".equals(arg)||!eatTheRest.startsWith(   "--       "))    {    	non-compiled	[CE]  boolean  cannot  be  dereferenced	102	None	replace
374	[BUG]  [BUGGY]  if(! "--   ".equals(arg)||!eatTheRest.startsWith( "-- "))  {  [CE]  boolean  cannot  be  dereferenced  [FE]                  ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  if(! "--   ".equals(arg)||!eatTheRest.startsWith( "-- "))  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	if(! "--   ".equals(arg)||!eatTheRest.startsWith( "-- "))  {	  if(   "--       ".equals(arg)||!eatTheRest.startsWith(   "--       "))    {    	non-compiled	[CE]  boolean  cannot  be  dereferenced	102	None	replace
375	[BUG]  [BUGGY]  if(opt.startsWith( "- "))  {  if(arg.startsWith('-'))  {  [CE]  reached  end  of  file  while  parsing  [FE]            AssertionFailedError      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  if(opt.startsWith( "- "))  {  if(arg.startsWith('-'))  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	if(opt.startsWith( "- "))  {  if(arg.startsWith('-'))  {	  if(arg.startsWith(       "-       "))    {    if(arg.startsWith('-       "))    {    	non-compiled	[CE]  reached  end  of  file  while  parsing	30	None	replace
376	[BUG]  [BUGGY]  if(stopAtNonOption)  {  if( "--   ".equals(arg)||  eatTheRest)  {  [CE]  reached  end  of  file  while  parsing  [FE]        ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  if(stopAtNonOption)  {  if( "--   ".equals(arg)||  eatTheRest)  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	if(stopAtNonOption)  {  if( "--   ".equals(arg)||  eatTheRest)  {	  if(       "--       ".equals(arg)||    eatTheRest)    {    if(       "--       ".equals(arg)||    eatTheRest)    {    	non-compiled	[CE]  reached  end  of  file  while  parsing	14	None	replace
377	[BUG]  [BUGGY]  if(opt.startsWith( "- "))  {  if( "--   ".equals(arg)||  eatTheRest)  {  [CE]  reached  end  of  file  while  parsing  [FE]          ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  if(opt.startsWith( "- "))  {  if( "--   ".equals(arg)||  eatTheRest)  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	if(opt.startsWith( "- "))  {  if( "--   ".equals(arg)||  eatTheRest)  {	  if(       "--       ".equals(arg)||    eatTheRest)    {    if(       "--       ".equals(arg)||    eatTheRest)    {    	non-compiled	[CE]  reached  end  of  file  while  parsing	14	None	replace
378	[BUG]  [BUGGY]          tokens.add(     "-     ");    tokens.add(  arg);  tokens.add('-   ");  tokens.add(  arg);  [CE]  unclosed  character  literal  [FE]    UnrecognizedOptionException    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]          tokens.add(     "-     ");    tokens.add(  arg);  tokens.add('-   ");  tokens.add(  arg);  [BUGGY]      if  (     "--     ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	                tokens.add(       "-       ");        tokens.add(    arg);    tokens.add('-   ");  tokens.add(  arg);	  	non-compiled	[CE]  unclosed  character  literal	136	None	add
379	[BUG]  [BUGGY]  [FE]  UnrecognizedOptionException  [FE]      UnrecognizedOptionException    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]          tokens.add(     "-     ");    tokens.add(  arg);  tokens.add(  arg);  tokens.add(  arg);  [BUGGY]      if  (     "--     ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	add	                tokens.add(       "-       ");        tokens.add(    arg);    tokens.add(  arg);  tokens.add(  arg);	  	compilable	  [FE]  UnrecognizedOptionException  	136	13	add
380	[BUG]  [BUGGY]          tokens.add(     "-     ");    tokens.add(  arg);  tokens.add(  arg);  tokens.add(  arg);  [FE]  UnrecognizedOptionException  [FE]      UnrecognizedOptionException    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]          tokens.add(     "-     ");    tokens.add(  arg);  tokens.add(  arg);  tokens.add(  arg);  [BUGGY]      if  (     "--     ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	                tokens.add(       "-       ");        tokens.add(    arg);    tokens.add(  arg);  tokens.add(  arg);	  	compilable	  [FE]  UnrecognizedOptionException  	136	13	add
381	[BUG]  [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(tokens.length());  [CE]  [FE]                ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(tokens.length());  [BUGGY]      if  (     "--     ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	TokenBuffer  tokens  =  new  TokenBuffer(tokens.length());	  TokenBuffer    tokens    =    new    TokenBuffer(tokens.size()    +    1);    	non-compiled	[CE]  	57	None	replace
382	[BUG]  [BUGGY]  if(stopAtNonOption)  {  if(!   "--   ".equals(arg)||  eattheRest)  {  [CE]  reached  end  of  file  while  parsing  [FE]          AssertionFailedError      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  if(stopAtNonOption)  {  if(!   "--   ".equals(arg)||  eattheRest)  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	if(stopAtNonOption)  {  if(!   "--   ".equals(arg)||  eattheRest)  {	  if(!       "--       ".equals(arg)||    eatTheRest)    {    if(!       "--       ".equals(arg)||    eattheRest)    {    	non-compiled	[CE]  reached  end  of  file  while  parsing	51	None	replace
383	[BUG]  [BUGGY]  if(opt  ||!arg.equals(stopAtNonOption))  {  [CE]  cannot  find  symbol  opt  [FE]    AssertionFailedError    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  if(opt  ||!arg.equals(stopAtNonOption))  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	if(opt  ||!arg.equals(stopAtNonOption))  {	  if(stopAtNonOption    ||!arg.equals(stopAtNonOption))    {    	non-compiled	[CE]  cannot  find  symbol  opt	124	None	replace
384	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  if(arg  ==  null  ||!arg.equals(stopAtNonOption))  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	add	if(arg  ==  null  ||!arg.equals(stopAtNonOption))  {	  if(stopAtNonOption    ||!arg.equals(stopAtNonOption))    {    	compilable	  [FE]  AssertionFailedError  	124	14	replace
385	[BUG]  [BUGGY]  if(arg  ==  null  ||!arg.equals(stopAtNonOption))  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  if(arg  ==  null  ||!arg.equals(stopAtNonOption))  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	if(arg  ==  null  ||!arg.equals(stopAtNonOption))  {	  if(stopAtNonOption    ||!arg.equals(stopAtNonOption))    {    	compilable	  [FE]  AssertionFailedError  	124	14	replace
386	[BUG]  [BUGGY]  if(stopAtNonOption.equals(arg)||!arg.startsWith( "-- "))  {  [CE]  boolean  cannot  be  dereferenced  [FE]                ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  if(stopAtNonOption.equals(arg)||!arg.startsWith( "-- "))  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	if(stopAtNonOption.equals(arg)||!arg.startsWith( "-- "))  {	  if(arg.equals(arg)||!stopAtNonOption.startsWith(   "--       "))    {    	non-compiled	[CE]  boolean  cannot  be  dereferenced	21	None	replace
387	[BUG]  [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(tokens,  opt.get(i));  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(tokens,  opt.get(i));  [BUGGY]      if  (     "--     ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	TokenBuffer  tokens  =  new  TokenBuffer(tokens,  opt.get(i));	  TokenBuffer    tokens    =    new    TokenBuffer(tokens,    opt.size());    	non-compiled	[CE]  	59	None	replace
388	[BUG]  [BUGGY]  if(!arg.equals( "-- ")||!eatTheRest.startsWith( "-- "))  {  [CE]  boolean  cannot  be  dereferenced  [FE]                ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  if(!arg.equals( "-- ")||!eatTheRest.startsWith( "-- "))  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	if(!arg.equals( "-- ")||!eatTheRest.startsWith( "-- "))  {	  if(arg.equals(   "--   ")||!eatTheRest.startsWith(   "--       "))    {    	non-compiled	[CE]  boolean  cannot  be  dereferenced	145	None	replace
389	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  if(stopAtNonOption  &&!eatTheRest  &&  arg.startsWith( "- "))  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	add	if(stopAtNonOption  &&!eatTheRest  &&  arg.startsWith( "- "))  {	  if(!eatTheRest    &&    arg.startsWith(   "-   "))    {    	compilable	  [FE]  AssertionFailedError  	115	6	replace
390	[BUG]  [BUGGY]  if(stopAtNonOption  &&!eatTheRest  &&  arg.startsWith( "- "))  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  if(stopAtNonOption  &&!eatTheRest  &&  arg.startsWith( "- "))  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	if(stopAtNonOption  &&!eatTheRest  &&  arg.startsWith( "- "))  {	  if(!eatTheRest    &&    arg.startsWith(   "-   "))    {    	compilable	  [FE]  AssertionFailedError  	115	6	replace
391	[BUG]  [BUGGY]  String[]  arg  =  options.toArray(arguments[i],  stoppingAtNonOption);  [CE]  [FE]                ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  String[]  arg  =  options.toArray(arguments[i],  stoppingAtNonOption);  [BUGGY]      if  (     "--     ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	String[]  arg  =  options.toArray(arguments[i],  stoppingAtNonOption);	  String[]    arg    =    options.toArray(arguments[i],    opt);    	non-compiled	[CE]  	148	None	replace
392	[BUG]  [BUGGY]  String[]  arg  =  options.toArray(arguments[i],  oprAtNonOption);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  String[]  arg  =  options.toArray(arguments[i],  oprAtNonOption);  [BUGGY]      if  (     "--     ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	String[]  arg  =  options.toArray(arguments[i],  oprAtNonOption);	  String[]    arg    =    options.toArray(arguments[i],    opt);    	non-compiled	[CE]  	148	None	replace
393	[BUG]  [BUGGY]  String[]  options  =  options.toArray(arguments[i],  stopAtNonOption);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  String[]  options  =  options.toArray(arguments[i],  stopAtNonOption);  [BUGGY]      if  (     "--     ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	String[]  options  =  options.toArray(arguments[i],  stopAtNonOption);	  String[]    arg    =    options.toArray(arguments[i],    opt);    	non-compiled	[CE]  	148	None	replace
394	[BUG]  [BUGGY]  if(!eatTheRest)  {  if('--   ".equals(arg)||!stopAtNonOption)  {  [CE]  unclosed  character  literal  [FE]            AssertionFailedError      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  if(!eatTheRest)  {  if('--   ".equals(arg)||!stopAtNonOption)  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	if(!eatTheRest)  {  if('--   ".equals(arg)||!stopAtNonOption)  {	  if(       "--       ".equals(arg)||!stopAtNonOption)    {    if('--       ".equals(arg)||!stopAtNonOption)    {    	non-compiled	[CE]  unclosed  character  literal	77	None	replace
395	[BUG]  [BUGGY]  if(opt.startsWith( "- "))  {  if('--   ".equals(arg)||!stopAtNonOption)  {  [CE]  unclosed  character  literal  [FE]              AssertionFailedError      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  if(opt.startsWith( "- "))  {  if('--   ".equals(arg)||!stopAtNonOption)  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	if(opt.startsWith( "- "))  {  if('--   ".equals(arg)||!stopAtNonOption)  {	  if(       "--       ".equals(arg)||!stopAtNonOption)    {    if('--       ".equals(arg)||!stopAtNonOption)    {    	non-compiled	[CE]  unclosed  character  literal	77	None	replace
396	[BUG]  [BUGGY]  if(stopAtNonOption)  {  if( "--   ".equals(arg)||  eattheRest)  {  [CE]  reached  end  of  file  while  parsing  [FE]        ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  if(stopAtNonOption)  {  if( "--   ".equals(arg)||  eattheRest)  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	if(stopAtNonOption)  {  if( "--   ".equals(arg)||  eattheRest)  {	  if(       "--       ".equals(arg)||    eatTheRest)    {    if(       "--       ".equals(arg)||    eattheRest)    {    	non-compiled	[CE]  reached  end  of  file  while  parsing	103	None	replace
397	[BUG]  [BUGGY]  if(opt.startsWith( "- "))  {  if( "--   ".equals(arg)||  arg.startsWith( "--   "))  {  [CE]  reached  end  of  file  while  parsing  [FE]          AssertionFailedError      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  if(opt.startsWith( "- "))  {  if( "--   ".equals(arg)||  arg.startsWith( "--   "))  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	if(opt.startsWith( "- "))  {  if( "--   ".equals(arg)||  arg.startsWith( "--   "))  {	  if(       "--       ".equals(arg)||    arg.startsWith(       "--       "))    {    if(       "--       ".equals(arg)||    arg.startsWith(   ".--       "))    {    	non-compiled	[CE]  reached  end  of  file  while  parsing	53	None	replace
398	[BUG]  [BUGGY]  if(!eatTheRest)  {  if( "--   ".equals(arg)||  arg.startsWith( "--   "))  {  [CE]  reached  end  of  file  while  parsing  [FE]            AssertionFailedError      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  if(!eatTheRest)  {  if( "--   ".equals(arg)||  arg.startsWith( "--   "))  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	if(!eatTheRest)  {  if( "--   ".equals(arg)||  arg.startsWith( "--   "))  {	  if(       "--       ".equals(arg)||    arg.startsWith(       "--       "))    {    if(       "--       ".equals(arg)||    arg.startsWith(   ".--       "))    {    	non-compiled	[CE]  reached  end  of  file  while  parsing	53	None	replace
399	[BUG]  [BUGGY]  if(stopAtNonOption)  {  If(!   "--   ".equals(arg)||  eatTheRest)  {  [CE]  [FE]        AssertionFailedError      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  if(stopAtNonOption)  {  If(!   "--   ".equals(arg)||  eatTheRest)  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	if(stopAtNonOption)  {  If(!   "--   ".equals(arg)||  eatTheRest)  {	  if(!       "--       ".equals(arg)||    eatTheRest)    {    If(!       "--       ".equals(arg)||    eatTheRest)    {    	non-compiled	[CE]  	119	None	replace
400	[BUG]  [BUGGY]  if(stopAtNonOption)  {  if(!   "--   ".equals(arg)||!eattheRest)  {  [CE]  reached  end  of  file  while  parsing  [FE]          AssertionFailedError      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  if(stopAtNonOption)  {  if(!   "--   ".equals(arg)||!eattheRest)  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	if(stopAtNonOption)  {  if(!   "--   ".equals(arg)||!eattheRest)  {	  if(!       "--       ".equals(arg)||!eatTheRest)    {    if(!       "--       ".equals(arg)||!eattheRest)    {    	non-compiled	[CE]  reached  end  of  file  while  parsing	13	None	replace
401	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  if( "--   ".equals(arg)&&!eatTheRest)  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	add	if( "--   ".equals(arg)&&!eatTheRest)  {	  if(   "--       ".equals(arg)&&!stopAtNonOption)    {    	compilable	  [FE]  ComparisonFailure  	42	3	replace
402	[BUG]  [BUGGY]  if( "--   ".equals(arg)&&!eatTheRest)  {  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  if( "--   ".equals(arg)&&!eatTheRest)  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	if( "--   ".equals(arg)&&!eatTheRest)  {	  if(   "--       ".equals(arg)&&!stopAtNonOption)    {    	compilable	  [FE]  ComparisonFailure  	42	3	replace
403	[BUG]  [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(arg,  options.length()  -  1);  [CE]  [FE]                ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(arg,  options.length()  -  1);  [BUGGY]      if  (     "--     ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	TokenBuffer  tokens  =  new  TokenBuffer(arg,  options.length()  -  1);	  TokenBuffer    tokens    =    new    TokenBuffer(arg,    options.length());    	non-compiled	[CE]  	144	None	replace
404	[BUG]  [BUGGY]  [FE]  MissingArgumentException  [FE]    MissingArgumentException    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]          tokens.add(arg);    tokens.remove(arg);  tokens.add(arg);  [BUGGY]      if  (     "--     ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	add	                tokens.add(arg);        tokens.remove(arg);    tokens.add(arg);	  	compilable	  [FE]  MissingArgumentException  	154	11	add
405	[BUG]  [BUGGY]          tokens.add(arg);    tokens.remove(arg);  tokens.add(arg);  [FE]  MissingArgumentException  [FE]    MissingArgumentException    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]          tokens.add(arg);    tokens.remove(arg);  tokens.add(arg);  [BUGGY]      if  (     "--     ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	                tokens.add(arg);        tokens.remove(arg);    tokens.add(arg);	  	compilable	  [FE]  MissingArgumentException  	154	11	add
406	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  arguments.length;  i++)  {  tokens.add(arg  +  1);  }  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  for(int  i  =  0;  i  <  arguments.length;  i++)  {  tokens.add(arg  +  1);  }  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	for(int  i  =  0;  i  <  arguments.length;  i++)  {  tokens.add(arg  +  1);  }	  for(int    i    =    0;    i    <    arguments.length;    i++)    {    tokens.add(arg);    }    	non-compiled	[CE]  	151	None	replace
407	[BUG]  [BUGGY]  String[]  arg  =  options.toArray(arguments[i])+  1,  stopAtNonOption);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  String[]  arg  =  options.toArray(arguments[i])+  1,  stopAtNonOption);  [BUGGY]      if  (     "--     ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	String[]  arg  =  options.toArray(arguments[i])+  1,  stopAtNonOption);	  String[]    arg    =    options.toArray(arguments[i]),    stopAtNonOption);    	non-compiled	[CE]  	132	None	replace
408	[BUG]  [BUGGY]  String[]  arg  =  options.toArray(arguments[i])+  1);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  String[]  arg  =  options.toArray(arguments[i])+  1);  [BUGGY]      if  (     "--     ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	String[]  arg  =  options.toArray(arguments[i])+  1);	  String[]    arg    =    options.toArray(arguments[i]),    stopAtNonOption);    	non-compiled	[CE]  	132	None	replace
409	[BUG]  [BUGGY]  if(opt.startsWith( "- "))  {  if(!   "--   ".equals(arg)||!eatTheRest)  {  [CE]  reached  end  of  file  while  parsing  [FE]        AssertionFailedError      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  if(opt.startsWith( "- "))  {  if(!   "--   ".equals(arg)||!eatTheRest)  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	if(opt.startsWith( "- "))  {  if(!   "--   ".equals(arg)||!eatTheRest)  {	  if(       "--       ".equals(arg)||!eatTheRest)    {    if(!   "--       ".equals(arg)||!eatTheRest)    {    	non-compiled	[CE]  reached  end  of  file  while  parsing	117	None	replace
410	[BUG]  [BUGGY]  tokens.add(i);  [CE]  [FE]    MissingArgumentException    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  tokens.add(i);  [BUGGY]      if  (     "--     ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	tokens.add(i);	          tokens.add(arg);    tokens.add(arg);    if(stopAtNonOption)    {    eatTheRest    =    true;    tokens.add(   "-   ");    }    	non-compiled	[CE]  	64	None	replace
411	[BUG]  [BUGGY]  if(!eatTheRest  &&  arg.startsWith(   "-   "))  {  If(!eatTheRest  &&  arg.startsWith( "-   "))  {  [CE]  [FE]    AssertionFailedError    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  if(!eatTheRest  &&  arg.startsWith(   "-   "))  {  If(!eatTheRest  &&  arg.startsWith( "-   "))  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	if(!eatTheRest    &&    arg.startsWith(   "-   "))    {    If(!eatTheRest  &&  arg.startsWith( "-   "))  {	  	non-compiled	[CE]  	114	None	add
412	[BUG]  [BUGGY]  tokens.add(i,  eatTheRest);  [CE]  [FE]          MissingArgumentException      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  tokens.add(i,  eatTheRest);  [BUGGY]      if  (     "--     ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	tokens.add(i,  eatTheRest);	  tokens.add(arg,    eatTheRest);    	non-compiled	[CE]  	121	None	replace
413	[BUG]  [BUGGY]  tokens.add(arg,  StopAtNonOption);  [CE]  [FE]            MissingArgumentException      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  tokens.add(arg,  StopAtNonOption);  [BUGGY]      if  (     "--     ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	tokens.add(arg,  StopAtNonOption);	  tokens.add(arg,    eatTheRest);    	non-compiled	[CE]  	121	None	replace
414	[BUG]  [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(arg.trim(),  opt);  [CE]  [FE]            ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(arg.trim(),  opt);  [BUGGY]      if  (     "--     ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	TokenBuffer  tokens  =  new  TokenBuffer(arg.trim(),  opt);	  TokenBuffer    tokens    =    new    TokenBuffer(arg.trim());    	non-compiled	[CE]  	142	None	replace
415	[BUG]  [BUGGY]  if(!stopAtNonOption.equals(arg)||!opt)  {  [CE]  boolean  cannot  be  dereferenced  [FE]        AssertionFailedError      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  if(!stopAtNonOption.equals(arg)||!opt)  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	if(!stopAtNonOption.equals(arg)||!opt)  {	  if(!opt.equals(arg)||!stopAtNonOption)    {    	non-compiled	[CE]  boolean  cannot  be  dereferenced	49	None	replace
416	[BUG]  [BUGGY]  if(!stopAtNonOption.equals(opt)||!stopAtNonOption)  {  [CE]  cannot  find  symbol  opt  [FE]          AssertionFailedError      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  if(!stopAtNonOption.equals(opt)||!stopAtNonOption)  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	if(!stopAtNonOption.equals(opt)||!stopAtNonOption)  {	  if(!opt.equals(arg)||!stopAtNonOption)    {    	non-compiled	[CE]  cannot  find  symbol  opt	49	None	replace
417	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  if(stopAtNonOption  &&   "-- ".equals(arg)||  eatTheRest)  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	add	if(stopAtNonOption  &&   "-- ".equals(arg)||  eatTheRest)  {	  if(!stopAtNonOption    &&       "--   ".equals(arg)||    eatTheRest)    {    	compilable	  [FE]  ComparisonFailure  	101	3	replace
418	[BUG]  [BUGGY]  if(stopAtNonOption  &&   "-- ".equals(arg)||  eatTheRest)  {  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  if(stopAtNonOption  &&   "-- ".equals(arg)||  eatTheRest)  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	if(stopAtNonOption  &&   "-- ".equals(arg)||  eatTheRest)  {	  if(!stopAtNonOption    &&       "--   ".equals(arg)||    eatTheRest)    {    	compilable	  [FE]  ComparisonFailure  	101	3	replace
419	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  if(!stopAtNonOption  &&  options.equals(arg)||  eatTheRest)  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	add	if(!stopAtNonOption  &&  options.equals(arg)||  eatTheRest)  {	  if(!stopAtNonOption    &&       "--   ".equals(arg)||    eatTheRest)    {    	compilable	  [FE]  ComparisonFailure  	101	3	replace
420	[BUG]  [BUGGY]  if(!stopAtNonOption  &&  options.equals(arg)||  eatTheRest)  {  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  if(!stopAtNonOption  &&  options.equals(arg)||  eatTheRest)  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	if(!stopAtNonOption  &&  options.equals(arg)||  eatTheRest)  {	  if(!stopAtNonOption    &&       "--   ".equals(arg)||    eatTheRest)    {    	compilable	  [FE]  ComparisonFailure  	101	3	replace
421	[BUG]  [BUGGY]  String[]  tokens  =  new  String[tokens.size()  *  2  +  1];  [CE]  [FE]            ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  String[]  tokens  =  new  String[tokens.size()  *  2  +  1];  [BUGGY]      if  (     "--     ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	String[]  tokens  =  new  String[tokens.size()  *  2  +  1];	  String[]    tokens    =    new    String[tokens.size()    *    2];    	non-compiled	[CE]  	157	None	replace
422	[BUG]  [BUGGY]  if(!eatTheRest)  {  if( "--   ".equals(arg)||!stopAtNonOption)  {  [CE]  reached  end  of  file  while  parsing  [FE]          AssertionFailedError      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  if(!eatTheRest)  {  if( "--   ".equals(arg)||!stopAtNonOption)  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	if(!eatTheRest)  {  if( "--   ".equals(arg)||!stopAtNonOption)  {	  if(       "--       ".equals(arg)||!stopAtNonOption)    {    if(   ".--       ".equals(arg)||!stopAtNonOption)    {    	non-compiled	[CE]  reached  end  of  file  while  parsing	76	None	replace
423	[BUG]  [BUGGY]  if(opt.startsWith( "- "))  {  if(! "--   ".equals(arg)||!stopAtNonOption)  {  [CE]  reached  end  of  file  while  parsing  [FE]            AssertionFailedError      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  if(opt.startsWith( "- "))  {  if(! "--   ".equals(arg)||!stopAtNonOption)  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	if(opt.startsWith( "- "))  {  if(! "--   ".equals(arg)||!stopAtNonOption)  {	  if(       "--       ".equals(arg)||!stopAtNonOption)    {    if(   ".--       ".equals(arg)||!stopAtNonOption)    {    	non-compiled	[CE]  reached  end  of  file  while  parsing	76	None	replace
424	[BUG]  [BUGGY]  if(opt.startsWith( "- "))  {  if('--   ".equals(arg)||!eatTheRest)  {  [CE]  unclosed  character  literal  [FE]          AssertionFailedError      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  if(opt.startsWith( "- "))  {  if('--   ".equals(arg)||!eatTheRest)  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	if(opt.startsWith( "- "))  {  if('--   ".equals(arg)||!eatTheRest)  {	  if(       "--       ".equals(arg)||!eatTheRest)    {    if('--       ".equals(arg)||!eatTheRest)    {    	non-compiled	[CE]  unclosed  character  literal	91	None	replace
425	[BUG]  [BUGGY]  [FE]  MissingArgumentException  [FE]    MissingArgumentException    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]          tokens.add(arg);    tokens.add(arg);  tokens.add(arg);  [BUGGY]      if  (     "--     ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	add	                tokens.add(arg);        tokens.add(arg);    tokens.add(arg);	  	compilable	  [FE]  MissingArgumentException  	60	11	add
426	[BUG]  [BUGGY]          tokens.add(arg);    tokens.add(arg);  tokens.add(arg);  [FE]  MissingArgumentException  [FE]    MissingArgumentException    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]          tokens.add(arg);    tokens.add(arg);  tokens.add(arg);  [BUGGY]      if  (     "--     ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	                tokens.add(arg);        tokens.add(arg);    tokens.add(arg);	  	compilable	  [FE]  MissingArgumentException  	60	11	add
427	[BUG]  [BUGGY]  if(stopAtNonOption)  {  if( ".--   ".equals(arg)||  eatTheRest)  {  [CE]  reached  end  of  file  while  parsing  [FE]            ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  if(stopAtNonOption)  {  if( ".--   ".equals(arg)||  eatTheRest)  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	if(stopAtNonOption)  {  if( ".--   ".equals(arg)||  eatTheRest)  {	  if(       "--       ".equals(arg)||    eatTheRest)    {    if(   ".--       ".equals(arg)||    eatTheRest)    {    	non-compiled	[CE]  reached  end  of  file  while  parsing	16	None	replace
428	[BUG]  [BUGGY]  if(stopAtNonOption  ||!arg.startsWith(   "-   "))  {  If(stopAtNonOption  ||!arg.startsWith( "-   "))  {  [CE]  [FE]    AssertionFailedError    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  if(stopAtNonOption  ||!arg.startsWith(   "-   "))  {  If(stopAtNonOption  ||!arg.startsWith( "-   "))  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	if(stopAtNonOption    ||!arg.startsWith(   "-   "))    {    If(stopAtNonOption  ||!arg.startsWith( "-   "))  {	  	non-compiled	[CE]  	71	None	add
429	[BUG]  [BUGGY]  String[]  arg  =  options.getOptionArgs(i);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  String[]  arg  =  options.getOptionArgs(i);  [BUGGY]      if  (     "--     ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	String[]  arg  =  options.getOptionArgs(i);	  String[]    arg    =    options.getOptionArgs();    	non-compiled	[CE]  	150	None	replace
430	[BUG]  [BUGGY]  String[]  arg  =  options.getArguments();  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  String[]  arg  =  options.getArguments();  [BUGGY]      if  (     "--     ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	String[]  arg  =  options.getArguments();	  String[]    arg    =    options.getOptionArgs();    	non-compiled	[CE]  	150	None	replace
431	[BUG]  [BUGGY]  if(opt.startsWith( "- "))  {  if( "--   ".equals(arg)||!stopAtNonOption)  {  [CE]  reached  end  of  file  while  parsing  [FE]        AssertionFailedError      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  if(opt.startsWith( "- "))  {  if( "--   ".equals(arg)||!stopAtNonOption)  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	if(opt.startsWith( "- "))  {  if( "--   ".equals(arg)||!stopAtNonOption)  {	  if(       "--       ".equals(arg)||!stopAtNonOption)    {    if(       "--       ".equals(arg)||!stopAtNonOption)    {    	non-compiled	[CE]  reached  end  of  file  while  parsing	75	None	replace
432	[BUG]  [BUGGY]  tokens.add( "--   ".equals(arg));  [CE]  [FE]        AssertionFailedError      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  tokens.add( "--   ".equals(arg));  [BUGGY]      if  (     "--     ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	tokens.add( "--   ".equals(arg));	  tokens.add(   "-   ".equals(arg));    	non-compiled	[CE]  	141	None	replace
433	[BUG]  [BUGGY]  tokens.add(arg.substring(i));  [CE]  [FE]          MissingArgumentException      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  tokens.add(arg.substring(i));  [BUGGY]      if  (     "--     ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	tokens.add(arg.substring(i));	  tokens.add(arg.toString());    	non-compiled	[CE]  	66	None	replace
434	[BUG]  [BUGGY]  tokens.add(arg.substring(1));  [CE]  [FE]            MissingArgumentException      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  tokens.add(arg.substring(1));  [BUGGY]      if  (     "--     ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	tokens.add(arg.substring(1));	  tokens.add(arg.toString());    	non-compiled	[CE]  	66	None	replace
435	[BUG]  [BUGGY]  String[]  arg  =  options.toArray(arguments[i]  +  3);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  String[]  arg  =  options.toArray(arguments[i]  +  3);  [BUGGY]      if  (     "--     ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	String[]  arg  =  options.toArray(arguments[i]  +  3);	  String[]    arg    =    options.toArray(arguments[i]    +    1);    	non-compiled	[CE]  	47	None	replace
436	[BUG]  [BUGGY]  if(stopAtNonOption)  {  if( ".--   ".equals(arg)||!eatTheRest)  {  [CE]  reached  end  of  file  while  parsing  [FE]            AssertionFailedError      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  if(stopAtNonOption)  {  if( ".--   ".equals(arg)||!eatTheRest)  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	if(stopAtNonOption)  {  if( ".--   ".equals(arg)||!eatTheRest)  {	  if(       "--       ".equals(arg)||!eatTheRest)    {    if(   ".--       ".equals(arg)||!eatTheRest)    {    	non-compiled	[CE]  reached  end  of  file  while  parsing	92	None	replace
437	[BUG]  [BUGGY]  if(stopAtNonOption)  {  if( "--   ".equals(arg)||!eatTheRest)  {  [CE]  reached  end  of  file  while  parsing  [FE]              AssertionFailedError      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  if(stopAtNonOption)  {  if( "--   ".equals(arg)||!eatTheRest)  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	if(stopAtNonOption)  {  if( "--   ".equals(arg)||!eatTheRest)  {	  if(       "--       ".equals(arg)||!eatTheRest)    {    if(   ".--       ".equals(arg)||!eatTheRest)    {    	non-compiled	[CE]  reached  end  of  file  while  parsing	92	None	replace
438	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  if(!eatTheRest  ||!arg.equals(stopAtNonOption))  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	add	if(!eatTheRest  ||!arg.equals(stopAtNonOption))  {	  if(!       "--   ".equals(arg)||    stopAtNonOption)    {    	compilable	  [FE]  AssertionFailedError  	2	14	replace
439	[BUG]  [BUGGY]  if(!eatTheRest  ||!arg.equals(stopAtNonOption))  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  if(!eatTheRest  ||!arg.equals(stopAtNonOption))  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	if(!eatTheRest  ||!arg.equals(stopAtNonOption))  {	  if(!       "--   ".equals(arg)||    stopAtNonOption)    {    	compilable	  [FE]  AssertionFailedError  	2	14	replace
440	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  if(!eatTheRest  &&!arg.equals(stopAtNonOption))  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	add	if(!eatTheRest  &&!arg.equals(stopAtNonOption))  {	  if(!       "--   ".equals(arg)||    stopAtNonOption)    {    	compilable	  [FE]  AssertionFailedError  	2	14	replace
441	[BUG]  [BUGGY]  if(!eatTheRest  &&!arg.equals(stopAtNonOption))  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  if(!eatTheRest  &&!arg.equals(stopAtNonOption))  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	if(!eatTheRest  &&!arg.equals(stopAtNonOption))  {	  if(!       "--   ".equals(arg)||    stopAtNonOption)    {    	compilable	  [FE]  AssertionFailedError  	2	14	replace
442	[BUG]  [BUGGY]  tokens.add(i,  arg);  [CE]  [FE]    UnrecognizedOptionException    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  tokens.add(i,  arg);  [BUGGY]      if  (     "--     ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	tokens.add(i,  arg);	          tokens.add(       "-       ");    tokens.add(    arg);    	non-compiled	[CE]  	137	None	replace
443	[BUG]  [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(arg.length,  i);  [CE]  [FE]              ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(arg.length,  i);  [BUGGY]      if  (     "--     ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	TokenBuffer  tokens  =  new  TokenBuffer(arg.length,  i);	  TokenBuffer    tokens    =    new    TokenBuffer(arg.length);    	non-compiled	[CE]  	81	None	replace
444	[BUG]  [BUGGY]  String[]  arg  =  options.get(options,  null);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  String[]  arg  =  options.get(options,  null);  [BUGGY]      if  (     "--     ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	String[]  arg  =  options.get(options,  null);	  String[]    arg    =    options.get(opt,    null);    	non-compiled	[CE]  	158	None	replace
445	[BUG]  [BUGGY]  if(stopAtNonOption)  {  if( "--   ".equals(arg)||!eattheRest)  {  [CE]  reached  end  of  file  while  parsing  [FE]              AssertionFailedError      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  if(stopAtNonOption)  {  if( "--   ".equals(arg)||!eattheRest)  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	if(stopAtNonOption)  {  if( "--   ".equals(arg)||!eattheRest)  {	  if(       "--       ".equals(arg)||!eatTheRest)    {    if(       "--       ".equals(arg)||!eattheRest)    {    	non-compiled	[CE]  reached  end  of  file  while  parsing	93	None	replace
446	[BUG]  [BUGGY]  if(opt.startsWith( "- "))  {  if( "--   ".equals(arg)||!eattheRest)  {  [CE]  reached  end  of  file  while  parsing  [FE]                AssertionFailedError      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  if(opt.startsWith( "- "))  {  if( "--   ".equals(arg)||!eattheRest)  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	if(opt.startsWith( "- "))  {  if( "--   ".equals(arg)||!eattheRest)  {	  if(       "--       ".equals(arg)||!eatTheRest)    {    if(       "--       ".equals(arg)||!eattheRest)    {    	non-compiled	[CE]  reached  end  of  file  while  parsing	93	None	replace
447	[BUG]  [BUGGY]  tokens.add(arg[0]);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  tokens.add(arg[0]);  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	tokens.add(arg[0]);	  for(int    i    =    0;    i    <    arguments.length;    i++)    {    tokens.add(arg[i]);    }    	non-compiled	[CE]  	153	None	replace
448	[BUG]  [BUGGY]  tokens.add(arg);  TokenBuffer  tokens  =  new  TokenBuffer(tokens,  i);  [CE]  [FE]              MissingArgumentException      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  tokens.add(arg);  TokenBuffer  tokens  =  new  TokenBuffer(tokens,  i);  [BUGGY]      if  (     "--     ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	tokens.add(arg);  TokenBuffer  tokens  =  new  TokenBuffer(tokens,  i);	          tokens.add(arg);    TokenBuffer    tokens    =    new    TokenBuffer(tokens.length);    	non-compiled	[CE]  	130	None	replace
449	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  if(! "--   ".equals(arg)||!arg.startsWith( "-- "))  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	add	if(! "--   ".equals(arg)||!arg.startsWith( "-- "))  {	  if(   "--       ".equals(arg)||!arg.startsWith(   "--   "))    {    	compilable	  [FE]  AssertionFailedError  	25	14	replace
450	[BUG]  [BUGGY]  if(! "--   ".equals(arg)||!arg.startsWith( "-- "))  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  if(! "--   ".equals(arg)||!arg.startsWith( "-- "))  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	if(! "--   ".equals(arg)||!arg.startsWith( "-- "))  {	  if(   "--       ".equals(arg)||!arg.startsWith(   "--   "))    {    	compilable	  [FE]  AssertionFailedError  	25	14	replace
451	[BUG]  [BUGGY]  tokens  =  new  ArrayList(arg.length());  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  tokens  =  new  ArrayList(arg.length());  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	tokens  =  new  ArrayList(arg.length());	  tokens    =    new    ArrayList();    	non-compiled	[CE]  	26	None	replace
452	[BUG]  [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(opt,  arg);  [CE]  [FE]            ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(opt,  arg);  [BUGGY]      if  (     "--     ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	TokenBuffer  tokens  =  new  TokenBuffer(opt,  arg);	  TokenBuffer    tokens    =    new    TokenBuffer(arg,    opt);    	non-compiled	[CE]  	80	None	replace
453	[BUG]  [BUGGY]  tokens.add(opt);  [CE]  [FE]          MissingArgumentException      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  tokens.add(opt);  [BUGGY]      if  (     "--     ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	tokens.add(opt);	          tokens.add(arg);    tokens.add(arg);    if(stopAtNonOption)    {    eatTheRest    =    true;    tokens.add(   "-       ");    }    else    if(opt.startsWith(   "-       "))    {    	non-compiled	[CE]  	62	None	replace
454	[BUG]  [BUGGY]  if(!eatTheRest.equals(arg)&&!stopAtNonOption)  {  [CE]  boolean  cannot  be  dereferenced  [FE]        AssertionFailedError      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  if(!eatTheRest.equals(arg)&&!stopAtNonOption)  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	if(!eatTheRest.equals(arg)&&!stopAtNonOption)  {	  if(!eatTheRest.equals(arg)||!stopAtNonOption)    {    	non-compiled	[CE]  boolean  cannot  be  dereferenced	125	None	replace
455	[BUG]  [BUGGY]  if(opt.startsWith( "- "))  {  if(arg.startsWith( "-- "))  {  [CE]  reached  end  of  file  while  parsing  [FE]          AssertionFailedError      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  if(opt.startsWith( "- "))  {  if(arg.startsWith( "-- "))  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	if(opt.startsWith( "- "))  {  if(arg.startsWith( "-- "))  {	  if(arg.startsWith(       "-       "))    {    if(arg.startsWith(   ".-       "))    {    	non-compiled	[CE]  reached  end  of  file  while  parsing	29	None	replace
456	[BUG]  [BUGGY]  if(opt.equals(arg))  {  if(arg.startsWith( "- "))  {  [CE]  reached  end  of  file  while  parsing  [FE]            AssertionFailedError      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  if(opt.equals(arg))  {  if(arg.startsWith( "- "))  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	if(opt.equals(arg))  {  if(arg.startsWith( "- "))  {	  if(arg.startsWith(       "-       "))    {    if(arg.startsWith(   ".-       "))    {    	non-compiled	[CE]  reached  end  of  file  while  parsing	29	None	replace
457	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  if(stopAtNonOption  &&!arg.equals( "-- "))  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	add	if(stopAtNonOption  &&!arg.equals( "-- "))  {	  if(!stopAtNonOption    &&!arg.equals(   "--   "))    {    	compilable	  [FE]  AssertionFailedError  	105	6	replace
458	[BUG]  [BUGGY]  if(stopAtNonOption  &&!arg.equals( "-- "))  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  if(stopAtNonOption  &&!arg.equals( "-- "))  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	if(stopAtNonOption  &&!arg.equals( "-- "))  {	  if(!stopAtNonOption    &&!arg.equals(   "--   "))    {    	compilable	  [FE]  AssertionFailedError  	105	6	replace
459	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  if(!eatTheRest  &&!arg.equals( "-- "))  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	add	if(!eatTheRest  &&!arg.equals( "-- "))  {	  if(!stopAtNonOption    &&!arg.equals(   "--   "))    {    	compilable	  [FE]  AssertionFailedError  	105	14	replace
460	[BUG]  [BUGGY]  if(!eatTheRest  &&!arg.equals( "-- "))  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  if(!eatTheRest  &&!arg.equals( "-- "))  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	if(!eatTheRest  &&!arg.equals( "-- "))  {	  if(!stopAtNonOption    &&!arg.equals(   "--   "))    {    	compilable	  [FE]  AssertionFailedError  	105	14	replace
461	[BUG]  [BUGGY]  if(!stopAtNonOption)  {  AssertionFailedError.checkArgument(!stopAtNonOption);  [CE]  reached  end  of  file  while  parsing  [FE]    AssertionFailedError    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  if(!stopAtNonOption)  {  AssertionFailedError.checkArgument(!stopAtNonOption);  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	if(!stopAtNonOption)    {    AssertionFailedError.checkArgument(!stopAtNonOption);	  	non-compiled	[CE]  reached  end  of  file  while  parsing	69	None	add
462	[BUG]  [BUGGY]  if(!stopAtNonOption)  {  AssertionFailedError.checkArgument(!stopAtNonOption)  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  if(!stopAtNonOption)  {  AssertionFailedError.checkArgument(!stopAtNonOption)  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	if(!stopAtNonOption)    {    AssertionFailedError.checkArgument(!stopAtNonOption)  {	  	non-compiled	[CE]  ';'  expected	69	None	add
463	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  options[i];  if(!eatTheRest)  {  tokens.add(arg);  }  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  for(int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  options[i];  if(!eatTheRest)  {  tokens.add(arg);  }  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	for(int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  options[i];  if(!eatTheRest)  {  tokens.add(arg);  }	  for(int    i    =    0;    i    <    arguments.length;    i++)    {    String    arg    =    arguments[i];    if(!eatTheRest)    {    tokens.add(arg);    }    	non-compiled	[CE]  	152	None	replace
464	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  options.length;  i++)  {  String  arg  =  arguments[i];  if(!eatTheRest)  {  tokens.add(arg);  }  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  for(int  i  =  0;  i  <  options.length;  i++)  {  String  arg  =  arguments[i];  if(!eatTheRest)  {  tokens.add(arg);  }  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	for(int  i  =  0;  i  <  options.length;  i++)  {  String  arg  =  arguments[i];  if(!eatTheRest)  {  tokens.add(arg);  }	  for(int    i    =    0;    i    <    arguments.length;    i++)    {    String    arg    =    arguments[i];    if(!eatTheRest)    {    tokens.add(arg);    }    	non-compiled	[CE]  	152	None	replace
465	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  argument.length;  i++)  {  String  arg  =  arguments[i];  if(!eatTheRest)  {  tokens.add(arg);  }  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  for(int  i  =  0;  i  <  argument.length;  i++)  {  String  arg  =  arguments[i];  if(!eatTheRest)  {  tokens.add(arg);  }  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	for(int  i  =  0;  i  <  argument.length;  i++)  {  String  arg  =  arguments[i];  if(!eatTheRest)  {  tokens.add(arg);  }	  for(int    i    =    0;    i    <    arguments.length;    i++)    {    String    arg    =    arguments[i];    if(!eatTheRest)    {    tokens.add(arg);    }    	non-compiled	[CE]  	152	None	replace
466	[BUG]  [BUGGY]  String[]  options  =  options.getOptions(i);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  String[]  options  =  options.getOptions(i);  [BUGGY]      if  (     "--     ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	String[]  options  =  options.getOptions(i);	  String[]    options    =    options.getOptions();    	non-compiled	[CE]  	126	None	replace
467	[BUG]  [BUGGY]  String[]  options  =  options.getOptions(i).toArray(new  String[options.size()  ]);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  String[]  options  =  options.getOptions(i).toArray(new  String[options.size()  ]);  [BUGGY]      if  (     "--     ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	String[]  options  =  options.getOptions(i).toArray(new  String[options.size()  ]);	  String[]    options    =    options.getOptions();    	non-compiled	[CE]  	126	None	replace
468	[BUG]  [BUGGY]  String[]  arguments  =  options.getOptions(i);  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  String[]  arguments  =  options.getOptions(i);  [BUGGY]      if  (     "--     ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	String[]  arguments  =  options.getOptions(i);	  String[]    arguments    =    options.getOptions();    	non-compiled	[CE]  	86	None	replace
469	[BUG]  [BUGGY]  String[]  arguments  =  options.get(i);  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  String[]  arguments  =  options.get(i);  [BUGGY]      if  (     "--     ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	String[]  arguments  =  options.get(i);	  String[]    arguments    =    options.getOptions();    	non-compiled	[CE]  	86	None	replace
470	[BUG]  [BUGGY]  if(!stopAtNonOption)  {  if('--   ".equals(arg)||  eatTheRest)  {  [CE]  unclosed  character  literal  [FE]          ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  if(!stopAtNonOption)  {  if('--   ".equals(arg)||  eatTheRest)  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	if(!stopAtNonOption)  {  if('--   ".equals(arg)||  eatTheRest)  {	  if(       "--       ".equals(arg)||    eatTheRest)    {    if('--       ".equals(arg)||    eatTheRest)    {    	non-compiled	[CE]  unclosed  character  literal	15	None	replace
471	[BUG]  [BUGGY]  if(stopAtNonOption)  {  if('--   ".equals(arg)||  eatTheRest)  {  [CE]  unclosed  character  literal  [FE]            ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  if(stopAtNonOption)  {  if('--   ".equals(arg)||  eatTheRest)  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	if(stopAtNonOption)  {  if('--   ".equals(arg)||  eatTheRest)  {	  if(       "--       ".equals(arg)||    eatTheRest)    {    if('--       ".equals(arg)||    eatTheRest)    {    	non-compiled	[CE]  unclosed  character  literal	15	None	replace
472	[BUG]  [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(i);  [CE]  [FE]                ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(i);  [BUGGY]      if  (     "--     ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	TokenBuffer  tokens  =  new  TokenBuffer(i);	  TokenBuffer    tokens    =    new    TokenBuffer(opt);    	non-compiled	[CE]  	82	None	replace
473	[BUG]  [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(opt,  arg.length());  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(opt,  arg.length());  [BUGGY]      if  (     "--     ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	TokenBuffer  tokens  =  new  TokenBuffer(opt,  arg.length());	  TokenBuffer    tokens    =    new    TokenBuffer(arg,    opt.length());    	non-compiled	[CE]  	140	None	replace
474	[BUG]  [BUGGY]  String[]  arg  =  options.getOptions(i,  tokens);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  String[]  arg  =  options.getOptions(i,  tokens);  [BUGGY]      if  (     "--     ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	String[]  arg  =  options.getOptions(i,  tokens);	  String[]    arg    =    options.getOptions(i);    	non-compiled	[CE]  	85	None	replace
475	[BUG]  [BUGGY]  String[]  arg  =  options.getOption(i,  stopAtNonOption);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  String[]  arg  =  options.getOption(i,  stopAtNonOption);  [BUGGY]      if  (     "--     ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	String[]  arg  =  options.getOption(i,  stopAtNonOption);	  String[]    arg    =    options.getOption(i);    	non-compiled	[CE]  	149	None	replace
476	[BUG]  [BUGGY]  String[]  arg  =  options.getOption(i  +  1);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  String[]  arg  =  options.getOption(i  +  1);  [BUGGY]      if  (     "--     ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	String[]  arg  =  options.getOption(i  +  1);	  String[]    arg    =    options.getOption(i);    	non-compiled	[CE]  	149	None	replace
477	[BUG]  [BUGGY]  tokens.add(arg  +  3);  [CE]  [FE]        MissingArgumentException      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  tokens.add(arg  +  3);  [BUGGY]      if  (     "--     ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	tokens.add(arg  +  3);	  tokens.add(arg    +    1);    	non-compiled	[CE]  	120	None	replace
478	[BUG]  [BUGGY]  if(opt.startsWith( "- "))  {  if(arg.startsWith( "- "))  {  [CE]  reached  end  of  file  while  parsing  [FE]        AssertionFailedError      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  if(opt.startsWith( "- "))  {  if(arg.startsWith( "- "))  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	if(opt.startsWith( "- "))  {  if(arg.startsWith( "- "))  {	  if(arg.startsWith(       "-       "))    {    if(arg.startsWith(       "-       "))    {    	non-compiled	[CE]  reached  end  of  file  while  parsing	28	None	replace
479	[BUG]  [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(arg.length(),  options);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(arg.length(),  options);  [BUGGY]      if  (     "--     ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	TokenBuffer  tokens  =  new  TokenBuffer(arg.length(),  options);	  TokenBuffer    tokens    =    new    TokenBuffer(arg.length(),    opt);    	non-compiled	[CE]  	139	None	replace
480	[BUG]  [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(arg.length()  -  1,  opt);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(arg.length()  -  1,  opt);  [BUGGY]      if  (     "--     ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	TokenBuffer  tokens  =  new  TokenBuffer(arg.length()  -  1,  opt);	  TokenBuffer    tokens    =    new    TokenBuffer(arg.length(),    opt);    	non-compiled	[CE]  	139	None	replace
481	[BUG]  [BUGGY]  if(!stopAtNonOption  &&!arg.equals(   "--   ")||  eatTheRest)  {  If(!stopAtNonOption  &&!arg.equals(   "--   ")||  eatTheRest)  {  [CE]  [FE]    AssertionFailedError    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  if(!stopAtNonOption  &&!arg.equals(   "--   ")||  eatTheRest)  {  If(!stopAtNonOption  &&!arg.equals(   "--   ")||  eatTheRest)  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	if(!stopAtNonOption    &&!arg.equals(   "--   ")||    eatTheRest)    {    If(!stopAtNonOption  &&!arg.equals(   "--   ")||  eatTheRest)  {	  	non-compiled	[CE]  	106	None	add
482	[BUG]  [BUGGY]  String[]  options  =  options.get(i  +  1);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  String[]  options  =  options.get(i  +  1);  [BUGGY]      if  (     "--     ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	String[]  options  =  options.get(i  +  1);	  String[]    options    =    options.get(i);    	non-compiled	[CE]  	88	None	replace
483	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  if(!eatTheRest  &&  arg.startsWith( "-- "))  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	add	if(!eatTheRest  &&  arg.startsWith( "-- "))  {	  if(arg.startsWith(   "--   "))    {    	compilable	  [FE]  AssertionFailedError  	5	7	replace
484	[BUG]  [BUGGY]  if(!eatTheRest  &&  arg.startsWith( "-- "))  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  if(!eatTheRest  &&  arg.startsWith( "-- "))  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	if(!eatTheRest  &&  arg.startsWith( "-- "))  {	  if(arg.startsWith(   "--   "))    {    	compilable	  [FE]  AssertionFailedError  	5	7	replace
485	[BUG]  [BUGGY]  if(stopAtNonOption)  {  AssertionFailedError  stopAtNonOption  =  stopAtNonOption;  [CE]  reached  end  of  file  while  parsing  [FE]    AssertionFailedError    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  if(stopAtNonOption)  {  AssertionFailedError  stopAtNonOption  =  stopAtNonOption;  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	if(stopAtNonOption)    {    AssertionFailedError  stopAtNonOption  =  stopAtNonOption;	  	non-compiled	[CE]  reached  end  of  file  while  parsing	67	None	add
486	[BUG]  [BUGGY]  if(stopAtNonOption)  {  int  stopAtNonOption  =  stopAtNonOption;  [CE]  reached  end  of  file  while  parsing  [FE]      AssertionFailedError    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  if(stopAtNonOption)  {  int  stopAtNonOption  =  stopAtNonOption;  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	if(stopAtNonOption)    {    int  stopAtNonOption  =  stopAtNonOption;	  	non-compiled	[CE]  reached  end  of  file  while  parsing	67	None	add
487	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    AssertionFailedError    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  if(eatTheRest)  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	add	if(eatTheRest)  {	  if(stopAtNonOption)    {    	compilable	  [FE]  ComparisonFailure  	68	3	replace
488	[BUG]  [BUGGY]  if(eatTheRest)  {  [FE]  ComparisonFailure  [FE]    AssertionFailedError    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  if(eatTheRest)  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	if(eatTheRest)  {	  if(stopAtNonOption)    {    	compilable	  [FE]  ComparisonFailure  	68	3	replace
489	[BUG]  [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(arg.length(),  options.length());  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(arg.length(),  options.length());  [BUGGY]      if  (     "--     ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	TokenBuffer  tokens  =  new  TokenBuffer(arg.length(),  options.length());	  TokenBuffer    tokens    =    new    TokenBuffer(arg.length(),    opt.length());    	non-compiled	[CE]  	44	None	replace
490	[BUG]  [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(arg.length()  +  1,  opt.length());  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(arg.length()  +  1,  opt.length());  [BUGGY]      if  (     "--     ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	TokenBuffer  tokens  =  new  TokenBuffer(arg.length()  +  1,  opt.length());	  TokenBuffer    tokens    =    new    TokenBuffer(arg.length(),    opt.length());    	non-compiled	[CE]  	44	None	replace
491	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  if(!eatTheRest  &&  arg.equals( "-- "))  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	add	if(!eatTheRest  &&  arg.equals( "-- "))  {	  if(arg.equals(   "--   "))    {    	compilable	  [FE]  ComparisonFailure  	147	3	replace
492	[BUG]  [BUGGY]  if(!eatTheRest  &&  arg.equals( "-- "))  {  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  if(!eatTheRest  &&  arg.equals( "-- "))  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	if(!eatTheRest  &&  arg.equals( "-- "))  {	  if(arg.equals(   "--   "))    {    	compilable	  [FE]  ComparisonFailure  	147	3	replace
493	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      ComparisonFailure    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  if(arg.equals( "-- ")||!eatTheRest)  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	add	if(arg.equals( "-- ")||!eatTheRest)  {	  if(arg.equals(   "--   "))    {    	compilable	  [FE]  AssertionFailedError  	147	14	replace
494	[BUG]  [BUGGY]  if(arg.equals( "-- ")||!eatTheRest)  {  [FE]  AssertionFailedError  [FE]      ComparisonFailure    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  if(arg.equals( "-- ")||!eatTheRest)  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	if(arg.equals( "-- ")||!eatTheRest)  {	  if(arg.equals(   "--   "))    {    	compilable	  [FE]  AssertionFailedError  	147	14	replace
495	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    AssertionFailedError    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  if(!stopAtNonOption  &&!arg.equals( "-- ")&&  eatTheRest)  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	add	if(!stopAtNonOption  &&!arg.equals( "-- ")&&  eatTheRest)  {	  if(!stopAtNonOption    &&!arg.equals(   "--   ")||    eatTheRest)    {    	compilable	  [FE]  ComparisonFailure  	107	3	replace
496	[BUG]  [BUGGY]  if(!stopAtNonOption  &&!arg.equals( "-- ")&&  eatTheRest)  {  [FE]  ComparisonFailure  [FE]    AssertionFailedError    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  if(!stopAtNonOption  &&!arg.equals( "-- ")&&  eatTheRest)  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	if(!stopAtNonOption  &&!arg.equals( "-- ")&&  eatTheRest)  {	  if(!stopAtNonOption    &&!arg.equals(   "--   ")||    eatTheRest)    {    	compilable	  [FE]  ComparisonFailure  	107	3	replace
497	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  if(!stopAtNonOption  &&!arg.equals( "-- ")||  stopAtNonOption)  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	add	if(!stopAtNonOption  &&!arg.equals( "-- ")||  stopAtNonOption)  {	  if(!stopAtNonOption    &&!arg.equals(   "--   ")||    eatTheRest)    {    	compilable	  [FE]  AssertionFailedError  	107	14	replace
498	[BUG]  [BUGGY]  if(!stopAtNonOption  &&!arg.equals( "-- ")||  stopAtNonOption)  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  if(!stopAtNonOption  &&!arg.equals( "-- ")||  stopAtNonOption)  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	if(!stopAtNonOption  &&!arg.equals( "-- ")||  stopAtNonOption)  {	  if(!stopAtNonOption    &&!arg.equals(   "--   ")||    eatTheRest)    {    	compilable	  [FE]  AssertionFailedError  	107	14	replace
499	[BUG]  [BUGGY]  if(opt.startsWith( "- "))  {  if( "--   ".equals(arg)||!eatTheRest)  {  [CE]  reached  end  of  file  while  parsing  [FE]        AssertionFailedError      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  if(opt.startsWith( "- "))  {  if( "--   ".equals(arg)||!eatTheRest)  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	if(opt.startsWith( "- "))  {  if( "--   ".equals(arg)||!eatTheRest)  {	  if(       "--       ".equals(arg)||!eatTheRest)    {    if(       "--       ".equals(arg)||!eatTheRest)    {    	non-compiled	[CE]  reached  end  of  file  while  parsing	90	None	replace
500	[BUG]  [BUGGY]  if(   "--     ".equals(arg)&&  eatTheRest)  {  If(   "--   ".equals(arg)&&  eatTheRest)  {  [CE]  [FE]    ComparisonFailure    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  if(   "--     ".equals(arg)&&  eatTheRest)  {  If(   "--   ".equals(arg)&&  eatTheRest)  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	if(   "--       ".equals(arg)&&    eatTheRest)    {    If(   "--   ".equals(arg)&&  eatTheRest)  {	  	non-compiled	[CE]  	33	None	add
501	[BUG]  [BUGGY]  if(stopAtNonOption)  {  Should(!stopAtNonOption)  {  [CE]  [FE]            AssertionFailedError      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  if(stopAtNonOption)  {  Should(!stopAtNonOption)  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	if(stopAtNonOption)  {  Should(!stopAtNonOption)  {	  if(!eatTheRest)    {    If(!eatTheRest)    {    	non-compiled	[CE]  	99	None	replace
502	[BUG]  [BUGGY]  String[]  arguments  =  options.toArray(arguments[i])+  1;  [CE]  [FE]                ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  String[]  arguments  =  options.toArray(arguments[i])+  1;  [BUGGY]      if  (     "--     ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	String[]  arguments  =  options.toArray(arguments[i])+  1;	  String[]    arguments    =    options.toArray(arguments[i]);    	non-compiled	[CE]  	46	None	replace
503	[BUG]  [BUGGY]  String[]  arguments  =  options.toArray(arguments[i]).toString();  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  String[]  arguments  =  options.toArray(arguments[i]).toString();  [BUGGY]      if  (     "--     ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	String[]  arguments  =  options.toArray(arguments[i]).toString();	  String[]    arguments    =    options.toArray(arguments[i]);    	non-compiled	[CE]  	46	None	replace
504	[BUG]  [BUGGY]  String[]  arg  =  options.get(i  +  1,  opt);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  String[]  arg  =  options.get(i  +  1,  opt);  [BUGGY]      if  (     "--     ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	String[]  arg  =  options.get(i  +  1,  opt);	  String[]    arg    =    options.get(i,    opt);    	non-compiled	[CE]  	89	None	replace
505	[BUG]  [BUGGY]  String[]  arg  =  options.get(i,  option);  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  String[]  arg  =  options.get(i,  option);  [BUGGY]      if  (     "--     ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	String[]  arg  =  options.get(i,  option);	  String[]    arg    =    options.get(i,    opt);    	non-compiled	[CE]  	89	None	replace
506	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    AssertionFailedError    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  if(!stopAtNonOption  &&  options.equals(arg))  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	add	if(!stopAtNonOption  &&  options.equals(arg))  {	  if(!stopAtNonOption)    {    	compilable	  [FE]  ComparisonFailure  	70	3	replace
507	[BUG]  [BUGGY]  if(!stopAtNonOption  &&  options.equals(arg))  {  [FE]  ComparisonFailure  [FE]    AssertionFailedError    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  if(!stopAtNonOption  &&  options.equals(arg))  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	if(!stopAtNonOption  &&  options.equals(arg))  {	  if(!stopAtNonOption)    {    	compilable	  [FE]  ComparisonFailure  	70	3	replace
508	[BUG]  [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(arg,  0,  i);  [CE]  [FE]            ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(arg,  0,  i);  [BUGGY]      if  (     "--     ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	TokenBuffer  tokens  =  new  TokenBuffer(arg,  0,  i);	  TokenBuffer    tokens    =    new    TokenBuffer(arg,    i);    	non-compiled	[CE]  	133	None	replace
509	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  if(! "-- ".equals(arg)||  arg.startsWith( "-- "))  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	add	if(! "-- ".equals(arg)||  arg.startsWith( "-- "))  {	  if(       "--       ".equals(arg)||    arg.startsWith(       "--       "))    {    if(       "--       ".equals(arg)||    arg.startsWith(       "--       "))    {    	compilable	  [FE]  AssertionFailedError  	52	14	replace
510	[BUG]  [BUGGY]  if(! "-- ".equals(arg)||  arg.startsWith( "-- "))  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  if(! "-- ".equals(arg)||  arg.startsWith( "-- "))  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	if(! "-- ".equals(arg)||  arg.startsWith( "-- "))  {	  if(       "--       ".equals(arg)||    arg.startsWith(       "--       "))    {    if(       "--       ".equals(arg)||    arg.startsWith(       "--       "))    {    	compilable	  [FE]  AssertionFailedError  	52	14	replace
511	[BUG]  [BUGGY]  if(!stopAtNonOption)  {  if( ".--   ".equals(arg)||!eatTheRest)  {  [CE]  reached  end  of  file  while  parsing  [FE]            AssertionFailedError      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  if(!stopAtNonOption)  {  if( ".--   ".equals(arg)||!eatTheRest)  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	if(!stopAtNonOption)  {  if( ".--   ".equals(arg)||!eatTheRest)  {	  if(       "--       ".equals(arg)||!eatTheRest)    {    if(   ".--       ".equals(arg)||!eatTheRest)    {    	non-compiled	[CE]  reached  end  of  file  while  parsing	92	None	replace
512	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  if( ".-- ".equals(arg)||!stopAtNonOption)  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	add	if( ".-- ".equals(arg)||!stopAtNonOption)  {	  if(       "--       ".equals(arg)||!eatTheRest)    {    if(   ".--       ".equals(arg)||!eatTheRest)    {    	compilable	  [FE]  AssertionFailedError  	92	13	replace
513	[BUG]  [BUGGY]  if( ".-- ".equals(arg)||!stopAtNonOption)  {  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  if( ".-- ".equals(arg)||!stopAtNonOption)  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	if( ".-- ".equals(arg)||!stopAtNonOption)  {	  if(       "--       ".equals(arg)||!eatTheRest)    {    if(   ".--       ".equals(arg)||!eatTheRest)    {    	compilable	  [FE]  AssertionFailedError  	92	13	replace
514	[BUG]  [BUGGY]  if(arg.startsWith( "- "))  {  if(!   "--   ".equals(arg)||!eatTheRest)  {  [CE]  reached  end  of  file  while  parsing  [FE]        AssertionFailedError      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  if(arg.startsWith( "- "))  {  if(!   "--   ".equals(arg)||!eatTheRest)  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	if(arg.startsWith( "- "))  {  if(!   "--   ".equals(arg)||!eatTheRest)  {	  if(       "--       ".equals(arg)||!eatTheRest)    {    if(!   "--       ".equals(arg)||!eatTheRest)    {    	non-compiled	[CE]  reached  end  of  file  while  parsing	117	None	replace
515	[BUG]  [BUGGY]  String[]  arg  =  options.toArray(arguments[i])-  1;  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  String[]  arg  =  options.toArray(arguments[i])-  1;  [BUGGY]      if  (     "--     ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	String[]  arg  =  options.toArray(arguments[i])-  1;	  String[]    arg    =    options.toArray(arguments[i])+    1;    	non-compiled	[CE]  	48	None	replace
516	[BUG]  [BUGGY]  [FE]  ArrayStoreException  [FE]    UnrecognizedOptionException    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]          tokens.add(     "-     ");    tokens.add(  arg);  tokens.add('-');  tokens.add(  arg);  [BUGGY]      if  (     "--     ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	add	                tokens.add(       "-       ");        tokens.add(    arg);    tokens.add('-');  tokens.add(  arg);	  	compilable	  [FE]  ArrayStoreException  	136	14	add
517	[BUG]  [BUGGY]          tokens.add(     "-     ");    tokens.add(  arg);  tokens.add('-');  tokens.add(  arg);  [FE]  ArrayStoreException  [FE]    UnrecognizedOptionException    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]          tokens.add(     "-     ");    tokens.add(  arg);  tokens.add('-');  tokens.add(  arg);  [BUGGY]      if  (     "--     ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	                tokens.add(       "-       ");        tokens.add(    arg);    tokens.add('-');  tokens.add(  arg);	  	compilable	  [FE]  ArrayStoreException  	136	14	add
518	[BUG]  [BUGGY]  [FE]  UnrecognizedOptionException  [FE]      UnrecognizedOptionException    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]          tokens.add(     "-     ");    tokens.add(  arg);  tokens.add(  arg);  [BUGGY]      if  (     "--     ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	add	                tokens.add(       "-       ");        tokens.add(    arg);    tokens.add(  arg);	  	compilable	  [FE]  UnrecognizedOptionException  	136	13	add
519	[BUG]  [BUGGY]          tokens.add(     "-     ");    tokens.add(  arg);  tokens.add(  arg);  [FE]  UnrecognizedOptionException  [FE]      UnrecognizedOptionException    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]          tokens.add(     "-     ");    tokens.add(  arg);  tokens.add(  arg);  [BUGGY]      if  (     "--     ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	                tokens.add(       "-       ");        tokens.add(    arg);    tokens.add(  arg);	  	compilable	  [FE]  UnrecognizedOptionException  	136	13	add
520	[BUG]  [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(arg,  arg.length()  +  2);  [CE]  [FE]              ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(arg,  arg.length()  +  2);  [BUGGY]      if  (     "--     ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	TokenBuffer  tokens  =  new  TokenBuffer(arg,  arg.length()  +  2);	  TokenBuffer    tokens    =    new    TokenBuffer(arg,    arg.length());    	non-compiled	[CE]  	143	None	replace
521	[BUG]  [BUGGY]  If(!   "--   ".equals(arg)||  stopAtNonOption)  {  [CE]  [FE]        AssertionFailedError      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  If(!   "--   ".equals(arg)||  stopAtNonOption)  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	If(!   "--   ".equals(arg)||  stopAtNonOption)  {	  if(!       "--       ".equals(arg)||    eatTheRest)    {    If(!       "--       ".equals(arg)||    eatTheRest)    {    	non-compiled	[CE]  	119	None	replace
522	[BUG]  [BUGGY]  if(!stopAtNonOption)  {  if( ".--   ".equals(arg)||  eatTheRest)  {  [CE]  reached  end  of  file  while  parsing  [FE]            ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  if(!stopAtNonOption)  {  if( ".--   ".equals(arg)||  eatTheRest)  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	if(!stopAtNonOption)  {  if( ".--   ".equals(arg)||  eatTheRest)  {	  if(       "--       ".equals(arg)||    eatTheRest)    {    if(   ".--       ".equals(arg)||    eatTheRest)    {    	non-compiled	[CE]  reached  end  of  file  while  parsing	16	None	replace
523	[BUG]  [BUGGY]  tokens.add(arg);  TokenBuffer  tokens  =  new  TokenBuffer(arg,  options.length());  [CE]  [FE]            MissingArgumentException      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  tokens.add(arg);  TokenBuffer  tokens  =  new  TokenBuffer(arg,  options.length());  [BUGGY]      if  (     "--     ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	tokens.add(arg);  TokenBuffer  tokens  =  new  TokenBuffer(arg,  options.length());	          tokens.add(arg);    TokenBuffer    tokens    =    new    TokenBuffer(arg.length());    	non-compiled	[CE]  	129	None	replace
524	[BUG]  [BUGGY]  tokens.add(arg);  TokenBuffer  tokens  =  new  TokenBuffer(arg,  opt.length());  [CE]  [FE]              MissingArgumentException      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  tokens.add(arg);  TokenBuffer  tokens  =  new  TokenBuffer(arg,  opt.length());  [BUGGY]      if  (     "--     ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	tokens.add(arg);  TokenBuffer  tokens  =  new  TokenBuffer(arg,  opt.length());	          tokens.add(arg);    TokenBuffer    tokens    =    new    TokenBuffer(arg.length());    	non-compiled	[CE]  	129	None	replace
525	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    AssertionFailedError    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  if(arg.startsWith( ".- ")||  arg.startsWith( ".- "))  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	add	if(arg.startsWith( ".- ")||  arg.startsWith( ".- "))  {	  if(arg.startsWith(   "-   ")||    arg.startsWith(   "--   "))    {    	compilable	  [FE]  ComparisonFailure  	9	3	replace
526	[BUG]  [BUGGY]  if(arg.startsWith( ".- ")||  arg.startsWith( ".- "))  {  [FE]  ComparisonFailure  [FE]    AssertionFailedError    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  if(arg.startsWith( ".- ")||  arg.startsWith( ".- "))  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	if(arg.startsWith( ".- ")||  arg.startsWith( ".- "))  {	  if(arg.startsWith(   "-   ")||    arg.startsWith(   "--   "))    {    	compilable	  [FE]  ComparisonFailure  	9	3	replace
527	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  if(arg.equals( "- ")||  arg.startsWith( "-- "))  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	add	if(arg.equals( "- ")||  arg.startsWith( "-- "))  {	  if(arg.startsWith(   "-   ")||    arg.startsWith(   "--   "))    {    	compilable	  [FE]  AssertionFailedError  	9	7	replace
528	[BUG]  [BUGGY]  if(arg.equals( "- ")||  arg.startsWith( "-- "))  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  if(arg.equals( "- ")||  arg.startsWith( "-- "))  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	if(arg.equals( "- ")||  arg.startsWith( "-- "))  {	  if(arg.startsWith(   "-   ")||    arg.startsWith(   "--   "))    {    	compilable	  [FE]  AssertionFailedError  	9	7	replace
529	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  if(!eatTheRest  &&!arg.equals( "- "))  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	add	if(!eatTheRest  &&!arg.equals( "- "))  {	  if(stopAtNonOption    ||!arg.equals(   "-   "))    {    	compilable	  [FE]  AssertionFailedError  	74	14	replace
530	[BUG]  [BUGGY]  if(!eatTheRest  &&!arg.equals( "- "))  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  if(!eatTheRest  &&!arg.equals( "- "))  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	if(!eatTheRest  &&!arg.equals( "- "))  {	  if(stopAtNonOption    ||!arg.equals(   "-   "))    {    	compilable	  [FE]  AssertionFailedError  	74	14	replace
531	[BUG]  [BUGGY]  if( "--   ".equals(arg)||!eatTheRest.startsWith(arg))  {  [CE]  boolean  cannot  be  dereferenced  [FE]                ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  if( "--   ".equals(arg)||!eatTheRest.startsWith(arg))  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	if( "--   ".equals(arg)||!eatTheRest.startsWith(arg))  {	  if(   "--       ".equals(arg)||!eatTheRest.startsWith(   "--       "))    {    	non-compiled	[CE]  boolean  cannot  be  dereferenced	102	None	replace
532	[BUG]  [BUGGY]  String[]  arg  =  options.get(i).toString();  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  String[]  arg  =  options.get(i).toString();  [BUGGY]      if  (     "--     ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	String[]  arg  =  options.get(i).toString();	  String[]    arg    =    options.get(i);    	non-compiled	[CE]  	84	None	replace
533	[BUG]  [BUGGY]  tokens.add('  ');  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  tokens.add('  ');  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	tokens.add('  ');	  tokens.remove(arg);    	non-compiled	[CE]  	27	None	replace
534	[BUG]  [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(tokens,  arg);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(tokens,  arg);  [BUGGY]      if  (     "--     ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	TokenBuffer  tokens  =  new  TokenBuffer(tokens,  arg);	  TokenBuffer    tokens    =    new    TokenBuffer(tokens);    	non-compiled	[CE]  	83	None	replace
535	[BUG]  [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(arg,  arg.length);  [CE]  [FE]              ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(arg,  arg.length);  [BUGGY]      if  (     "--     ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	TokenBuffer  tokens  =  new  TokenBuffer(arg,  arg.length);	  TokenBuffer    tokens    =    new    TokenBuffer(arg.length);    	non-compiled	[CE]  	81	None	replace
536	[BUG]  [BUGGY]  [FE]  MissingArgumentException  [FE]    MissingArgumentException    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]          tokens.add(arg);    tokens.add(arg);  if(stopAtNonOption)  {  eatTheRest  =  true;  tokens.add(   "-   ");  }  if(stopAtNonOption)  {  tokens.add(arg);  }  [BUGGY]      if  (     "--     ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	add	                tokens.add(arg);        tokens.add(arg);    if(stopAtNonOption)    {    eatTheRest    =    true;    tokens.add(   "-   ");    }    if(stopAtNonOption)  {  tokens.add(arg);  }	  	compilable	  [FE]  MissingArgumentException  	63	11	add
537	[BUG]  [BUGGY]          tokens.add(arg);    tokens.add(arg);  if(stopAtNonOption)  {  eatTheRest  =  true;  tokens.add(   "-   ");  }  if(stopAtNonOption)  {  tokens.add(arg);  }  [FE]  MissingArgumentException  [FE]    MissingArgumentException    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]          tokens.add(arg);    tokens.add(arg);  if(stopAtNonOption)  {  eatTheRest  =  true;  tokens.add(   "-   ");  }  if(stopAtNonOption)  {  tokens.add(arg);  }  [BUGGY]      if  (     "--     ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	                tokens.add(arg);        tokens.add(arg);    if(stopAtNonOption)    {    eatTheRest    =    true;    tokens.add(   "-   ");    }    if(stopAtNonOption)  {  tokens.add(arg);  }	  	compilable	  [FE]  MissingArgumentException  	63	11	add
538	[BUG]  [BUGGY]  [FE]  MissingArgumentException  [FE]      MissingArgumentException    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]          tokens.add(arg);    tokens.add(arg);  if(stopAtNonOption)  {  eatTheRest  =  true;  tokens.add(   "-   ");  }  tokens.add(arg);  if(stopAtNonOption)  {  eatTheRest  =  false;  tokens.add(arg);  }  [BUGGY]      if  (     "--     ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	add	                tokens.add(arg);        tokens.add(arg);    if(stopAtNonOption)    {    eatTheRest    =    true;    tokens.add(   "-   ");    }    tokens.add(arg);  if(stopAtNonOption)  {  eatTheRest  =  false;  tokens.add(arg);  }	  	compilable	  [FE]  MissingArgumentException  	63	11	add
539	[BUG]  [BUGGY]          tokens.add(arg);    tokens.add(arg);  if(stopAtNonOption)  {  eatTheRest  =  true;  tokens.add(   "-   ");  }  tokens.add(arg);  if(stopAtNonOption)  {  eatTheRest  =  false;  tokens.add(arg);  }  [FE]  MissingArgumentException  [FE]      MissingArgumentException    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]          tokens.add(arg);    tokens.add(arg);  if(stopAtNonOption)  {  eatTheRest  =  true;  tokens.add(   "-   ");  }  tokens.add(arg);  if(stopAtNonOption)  {  eatTheRest  =  false;  tokens.add(arg);  }  [BUGGY]      if  (     "--     ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	                tokens.add(arg);        tokens.add(arg);    if(stopAtNonOption)    {    eatTheRest    =    true;    tokens.add(   "-   ");    }    tokens.add(arg);  if(stopAtNonOption)  {  eatTheRest  =  false;  tokens.add(arg);  }	  	compilable	  [FE]  MissingArgumentException  	63	11	add
540	[BUG]  [BUGGY]  if(!eatTheRest.equals(arg)||  eatTheRest)  {  [CE]  boolean  cannot  be  dereferenced  [FE]          AssertionFailedError      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  if(!eatTheRest.equals(arg)||  eatTheRest)  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	if(!eatTheRest.equals(arg)||  eatTheRest)  {	  if(!opt.equals(arg)||    eatTheRest)    {    	non-compiled	[CE]  boolean  cannot  be  dereferenced	3	None	replace
541	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  if(! "- ".equals(arg))  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	add	if(! "- ".equals(arg))  {	  if(!eatTheRest)    {    if(!eatTheRest)    {    	compilable	  [FE]  AssertionFailedError  	97	14	replace
542	[BUG]  [BUGGY]  if(! "- ".equals(arg))  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  if(! "- ".equals(arg))  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	if(! "- ".equals(arg))  {	  if(!eatTheRest)    {    if(!eatTheRest)    {    	compilable	  [FE]  AssertionFailedError  	97	14	replace
543	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  if(tokens.contains(arg))  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	add	if(tokens.contains(arg))  {	  if(!eatTheRest)    {    if(!eatTheRest)    {    	compilable	  [FE]  AssertionFailedError  	97	4	replace
544	[BUG]  [BUGGY]  if(tokens.contains(arg))  {  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  if(tokens.contains(arg))  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	if(tokens.contains(arg))  {	  if(!eatTheRest)    {    if(!eatTheRest)    {    	compilable	  [FE]  AssertionFailedError  	97	4	replace
545	[BUG]  [BUGGY]  tokens.add(arg.trim());  [CE]  [FE]          MissingArgumentException      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  tokens.add(arg.trim());  [BUGGY]      if  (     "--     ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	tokens.add(arg.trim());	  tokens.add(arg.toString());    	non-compiled	[CE]  	66	None	replace
546	[BUG]  [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(tokens.list());  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(tokens.list());  [BUGGY]      if  (     "--     ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	TokenBuffer  tokens  =  new  TokenBuffer(tokens.list());	  TokenBuffer    tokens    =    new    TokenBuffer(tokens.size()    -    2);    	non-compiled	[CE]  	58	None	replace
547	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  if(arg.startsWith( "-   ")||!arg.equals( "- "))  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	add	if(arg.startsWith( "-   ")||!arg.equals( "- "))  {	  if(stopAtNonOption    ||!arg.equals(stopAtNonOption))    {    	compilable	  [FE]  AssertionFailedError  	124	14	replace
548	[BUG]  [BUGGY]  if(arg.startsWith( "-   ")||!arg.equals( "- "))  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  if(arg.startsWith( "-   ")||!arg.equals( "- "))  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	if(arg.startsWith( "-   ")||!arg.equals( "- "))  {	  if(stopAtNonOption    ||!arg.equals(stopAtNonOption))    {    	compilable	  [FE]  AssertionFailedError  	124	14	replace
549	[BUG]  [BUGGY]  String[]  arguments  =  options.getOptions(arg);  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  String[]  arguments  =  options.getOptions(arg);  [BUGGY]      if  (     "--     ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	String[]  arguments  =  options.getOptions(arg);	  String[]    arguments    =    options.getOptions();    	non-compiled	[CE]  	86	None	replace
550	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]            AssertionFailedError      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  if(arg.startsWith( ". "))  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	add	if(arg.startsWith( ". "))  {	  if(arg.startsWith(       "-       "))    {    if(arg.startsWith('-       "))    {    	compilable	  [FE]  ComparisonFailure  	30	3	replace
551	[BUG]  [BUGGY]  if(arg.startsWith( ". "))  {  [FE]  ComparisonFailure  [FE]            AssertionFailedError      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  if(arg.startsWith( ". "))  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	if(arg.startsWith( ". "))  {	  if(arg.startsWith(       "-       "))    {    if(arg.startsWith('-       "))    {    	compilable	  [FE]  ComparisonFailure  	30	3	replace
552	[BUG]  [BUGGY]  if(arg.startsWith( "- ")||  arg.startsWith('-'))  {  [CE]  no  suitable  method  found  for  startsWith(char)  [FE]              AssertionFailedError      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  if(arg.startsWith( "- ")||  arg.startsWith('-'))  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	if(arg.startsWith( "- ")||  arg.startsWith('-'))  {	  if(arg.startsWith(       "-       "))    {    if(arg.startsWith('-       "))    {    	non-compiled	[CE]  no  suitable  method  found  for  startsWith(char)	30	None	replace
553	[BUG]  [BUGGY]  if(!eatTheRest.equals(arg)||!eatTheRest.startsWith( "-- "))  {  [CE]  boolean  cannot  be  dereferenced  [FE]                ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  if(!eatTheRest.equals(arg)||!eatTheRest.startsWith( "-- "))  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	if(!eatTheRest.equals(arg)||!eatTheRest.startsWith( "-- "))  {	  if(arg.equals(   "--   ")||!eatTheRest.startsWith(   "--       "))    {    	non-compiled	[CE]  boolean  cannot  be  dereferenced	145	None	replace
554	[BUG]  [BUGGY]  if(arg.equals( "-- ")||!eatTheRest.startsWith( "--))  {  [CE]  unclosed  string  literal  [FE]                  ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  if(arg.equals( "-- ")||!eatTheRest.startsWith( "--))  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	if(arg.equals( "-- ")||!eatTheRest.startsWith( "--))  {	  if(arg.equals(   "--   ")||!eatTheRest.startsWith(   "--       "))    {    	non-compiled	[CE]  unclosed  string  literal	145	None	replace
555	[BUG]  [BUGGY]  if(arg.startsWith(   "--   "))  {  If(arg.startsWith(   "--   "))  {  [CE]  [FE]    AssertionFailedError    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  if(arg.startsWith(   "--   "))  {  If(arg.startsWith(   "--   "))  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	if(arg.startsWith(   "--   "))    {    If(arg.startsWith(   "--   "))  {	  	non-compiled	[CE]  	4	None	add
556	[BUG]  [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer();  [CE]  [FE]                ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer();  [BUGGY]      if  (     "--     ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	TokenBuffer  tokens  =  new  TokenBuffer();	  TokenBuffer    tokens    =    new    TokenBuffer(opt);    	non-compiled	[CE]  	82	None	replace
557	[BUG]  [BUGGY]  if(arg.startsWith(   "-   ")||!eatTheRest)  {  if(arg.startsWith( ".-   ")||!eatTheRest)  {  [CE]  reached  end  of  file  while  parsing  [FE]    AssertionFailedError    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  if(arg.startsWith(   "-   ")||!eatTheRest)  {  if(arg.startsWith( ".-   ")||!eatTheRest)  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	if(arg.startsWith(   "-   ")||!eatTheRest)    {    if(arg.startsWith( ".-   ")||!eatTheRest)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	112	None	add
558	[BUG]  [BUGGY]  tokens.add(arg);  TokenBuffer  tokens  =  new  TokenBuffer(tokens.size()  -  2);  [CE]  [FE]        MissingArgumentException      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  tokens.add(arg);  TokenBuffer  tokens  =  new  TokenBuffer(tokens.size()  -  2);  [BUGGY]      if  (     "--     ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	tokens.add(arg);  TokenBuffer  tokens  =  new  TokenBuffer(tokens.size()  -  2);	          tokens.add(arg);    TokenBuffer    tokens    =    new    TokenBuffer(tokens.size());    	non-compiled	[CE]  	127	None	replace
559	[BUG]  [BUGGY]  tokens.add(arg);  if(stopAtNonOption)  {  eatTheRest  =  true;  tokens.add(arg);  }  [CE]  [FE]    MissingArgumentException    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  tokens.add(arg);  if(stopAtNonOption)  {  eatTheRest  =  true;  tokens.add(arg);  }  [BUGGY]      if  (     "--     ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	tokens.add(arg);  if(stopAtNonOption)  {  eatTheRest  =  true;  tokens.add(arg);  }	          tokens.add(arg);    tokens.add(arg);    if(stopAtNonOption)    {    eatTheRest    =    true;    tokens.add(   "-   ");    }    	non-compiled	[CE]  	64	None	replace
560	[BUG]  [BUGGY]  if(!eatTheRest)  {  if( ".--   ".equals(arg)||!stopAtNonOption)  {  [CE]  reached  end  of  file  while  parsing  [FE]          AssertionFailedError      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  if(!eatTheRest)  {  if( ".--   ".equals(arg)||!stopAtNonOption)  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	if(!eatTheRest)  {  if( ".--   ".equals(arg)||!stopAtNonOption)  {	  if(       "--       ".equals(arg)||!stopAtNonOption)    {    if(   ".--       ".equals(arg)||!stopAtNonOption)    {    	non-compiled	[CE]  reached  end  of  file  while  parsing	76	None	replace
561	[BUG]  [BUGGY]  if(!stopAtNonOption  &&!arg.equals(   "-   "))  {  If(!stopAtNonOption  &&!arg.equals(   "-   "))  {  [CE]  [FE]    AssertionFailedError    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  if(!stopAtNonOption  &&!arg.equals(   "-   "))  {  If(!stopAtNonOption  &&!arg.equals(   "-   "))  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	if(!stopAtNonOption    &&!arg.equals(   "-   "))    {    If(!stopAtNonOption  &&!arg.equals(   "-   "))  {	  	non-compiled	[CE]  	110	None	add
562	[BUG]  [BUGGY]  if(!eattheRest.equals(arg)||!stopAtNonOption)  {  [CE]  cannot  find  symbol  eattheRest  [FE]        AssertionFailedError      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  if(!eattheRest.equals(arg)||!stopAtNonOption)  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	if(!eattheRest.equals(arg)||!stopAtNonOption)  {	  if(!opt.equals(arg)||!stopAtNonOption)    {    	non-compiled	[CE]  cannot  find  symbol  eattheRest	49	None	replace
563	[BUG]  [BUGGY]  while(!stopAtNonOption)  {  tokens.add(arg);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  while(!stopAtNonOption)  {  tokens.add(arg);  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	while(!stopAtNonOption)  {  tokens.add(arg);	  for(int    i    =    0;    i    <    arguments.length;    i++)    {    String    arg    =    arguments[i];    if(!eatTheRest)    {    tokens.add(arg);    }    	non-compiled	[CE]  	152	None	replace
564	[BUG]  [BUGGY]  while(!stopAtNonOption  &&  arguments[i].startsWith( "- "))  {  tokens.add(arg);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  while(!stopAtNonOption  &&  arguments[i].startsWith( "- "))  {  tokens.add(arg);  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	while(!stopAtNonOption  &&  arguments[i].startsWith( "- "))  {  tokens.add(arg);	  for(int    i    =    0;    i    <    arguments.length;    i++)    {    String    arg    =    arguments[i];    if(!eatTheRest)    {    tokens.add(arg);    }    	non-compiled	[CE]  	152	None	replace
565	[BUG]  [BUGGY]  while(!stopAtNonOption  &&  arguments[i].equals(arg))  {  tokens.add(arg);  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  while(!stopAtNonOption  &&  arguments[i].equals(arg))  {  tokens.add(arg);  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	while(!stopAtNonOption  &&  arguments[i].equals(arg))  {  tokens.add(arg);	  for(int    i    =    0;    i    <    arguments.length;    i++)    {    String    arg    =    arguments[i];    if(!eatTheRest)    {    tokens.add(arg);    }    	non-compiled	[CE]  	152	None	replace
566	[BUG]  [BUGGY]  if(stopAtNonOption)  {  tokens.add(arg);  }  [CE]  [FE]          MissingArgumentException      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  if(stopAtNonOption)  {  tokens.add(arg);  }  [BUGGY]      if  (     "--     ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	if(stopAtNonOption)  {  tokens.add(arg);  }	          tokens.add(arg);    tokens.add(arg);    if(stopAtNonOption)    {    eatTheRest    =    true;    tokens.add(   "-       ");    }    else    if(opt.startsWith(   "-       "))    {    	non-compiled	[CE]  	62	None	replace
567	[BUG]  [BUGGY]  if(!eatTheRest)  {  tokens.add(arg);  }  [CE]  [FE]            MissingArgumentException      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  if(!eatTheRest)  {  tokens.add(arg);  }  [BUGGY]      if  (     "--     ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	if(!eatTheRest)  {  tokens.add(arg);  }	          tokens.add(arg);    tokens.add(arg);    if(stopAtNonOption)    {    eatTheRest    =    true;    tokens.add(   "-       ");    }    else    if(opt.startsWith(   "-       "))    {    	non-compiled	[CE]  	62	None	replace
568	[BUG]  [BUGGY]  }  else  if(opt.startsWith( "- "))  {  [CE]  [FE]              MissingArgumentException      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  }  else  if(opt.startsWith( "- "))  {  [BUGGY]      if  (     "--     ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	}  else  if(opt.startsWith( "- "))  {	          tokens.add(arg);    tokens.add(arg);    if(stopAtNonOption)    {    eatTheRest    =    true;    tokens.add(   "-       ");    }    else    if(opt.startsWith(   "-       "))    {    	non-compiled	[CE]  	62	None	replace
569	[BUG]  [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(arg,  options.length  +  1);  [CE]  [FE]                ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(arg,  options.length  +  1);  [BUGGY]      if  (     "--     ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	TokenBuffer  tokens  =  new  TokenBuffer(arg,  options.length  +  1);	  TokenBuffer    tokens    =    new    TokenBuffer(arg,    options.length());    	non-compiled	[CE]  	144	None	replace
570	[BUG]  [BUGGY]  String[]  options  =  options.getOptOptions();  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  String[]  options  =  options.getOptOptions();  [BUGGY]      if  (     "--     ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	String[]  options  =  options.getOptOptions();	  String[]    options    =    options.getOptions();    	non-compiled	[CE]  	126	None	replace
571	[BUG]  [BUGGY]  tokens.add(arg,  i);  [CE]  [FE]          MissingArgumentException      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  tokens.add(arg,  i);  [BUGGY]      if  (     "--     ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	tokens.add(arg,  i);	  tokens.add(arg,    eatTheRest);    	non-compiled	[CE]  	121	None	replace
572	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  if(!eatTheRest  ||!   "--   ".equals(arg)||!stopAtNonOption)  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	add	if(!eatTheRest  ||!   "--   ".equals(arg)||!stopAtNonOption)  {	  if(!   "--   ".equals(arg)||!stopAtNonOption)    {    	compilable	  [FE]  AssertionFailedError  	11	14	replace
573	[BUG]  [BUGGY]  if(!eatTheRest  ||!   "--   ".equals(arg)||!stopAtNonOption)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  if(!eatTheRest  ||!   "--   ".equals(arg)||!stopAtNonOption)  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	if(!eatTheRest  ||!   "--   ".equals(arg)||!stopAtNonOption)  {	  if(!   "--   ".equals(arg)||!stopAtNonOption)    {    	compilable	  [FE]  AssertionFailedError  	11	14	replace
574	[BUG]  [BUGGY]  [FE]  UnrecognizedOptionException  [FE]    UnrecognizedOptionException    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]          tokens.add(     "-     ");    tokens.add(   "-     ");  tokens.add( "-   ");  [BUGGY]      if  (     "--     ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	add	                tokens.add(       "-       ");        tokens.add(   "-       ");    tokens.add( "-   ");	  	compilable	  [FE]  UnrecognizedOptionException  	35	13	add
575	[BUG]  [BUGGY]          tokens.add(     "-     ");    tokens.add(   "-     ");  tokens.add( "-   ");  [FE]  UnrecognizedOptionException  [FE]    UnrecognizedOptionException    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]          tokens.add(     "-     ");    tokens.add(   "-     ");  tokens.add( "-   ");  [BUGGY]      if  (     "--     ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	                tokens.add(       "-       ");        tokens.add(   "-       ");    tokens.add( "-   ");	  	compilable	  [FE]  UnrecognizedOptionException  	35	13	add
576	[BUG]  [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(arg,  0,  arg.length);  [CE]  [FE]            ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(arg,  0,  arg.length);  [BUGGY]      if  (     "--     ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	TokenBuffer  tokens  =  new  TokenBuffer(arg,  0,  arg.length);	  TokenBuffer    tokens    =    new    TokenBuffer(arg,    opt);    	non-compiled	[CE]  	80	None	replace
577	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  arg.length;  i++)  {  tokens.add(arg[i]);  }  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  for(int  i  =  0;  i  <  arg.length;  i++)  {  tokens.add(arg[i]);  }  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	for(int  i  =  0;  i  <  arg.length;  i++)  {  tokens.add(arg[i]);  }	  for(int    i    =    0;    i    <    arguments.length;    i++)    {    tokens.add(arg[i]);    }    	non-compiled	[CE]  	153	None	replace
578	[BUG]  [BUGGY]  while(!eatTheRest)  {  tokens.add(arg[i]);  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  while(!eatTheRest)  {  tokens.add(arg[i]);  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	while(!eatTheRest)  {  tokens.add(arg[i]);	  for(int    i    =    0;    i    <    arguments.length;    i++)    {    tokens.add(arg[i]);    }    	non-compiled	[CE]  	153	None	replace
579	[BUG]  [BUGGY]  if(!stopAtNonOption  &&!arg.equals(   "--   "))  {  If(!stopAtNonOption  &&!arg.equals(   "--   "))  {  [CE]  [FE]    AssertionFailedError    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  if(!stopAtNonOption  &&!arg.equals(   "--   "))  {  If(!stopAtNonOption  &&!arg.equals(   "--   "))  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	if(!stopAtNonOption    &&!arg.equals(   "--   "))    {    If(!stopAtNonOption  &&!arg.equals(   "--   "))  {	  	non-compiled	[CE]  	104	None	add
580	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]          AssertionFailedError      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  if(arg.startsWith( ".- "))  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	add	if(arg.startsWith( ".- "))  {	  if(arg.startsWith(       "-       "))    {    if(arg.startsWith(   ".-       "))    {    	compilable	  [FE]  ComparisonFailure  	29	3	replace
581	[BUG]  [BUGGY]  if(arg.startsWith( ".- "))  {  [FE]  ComparisonFailure  [FE]          AssertionFailedError      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  if(arg.startsWith( ".- "))  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	if(arg.startsWith( ".- "))  {	  if(arg.startsWith(       "-       "))    {    if(arg.startsWith(   ".-       "))    {    	compilable	  [FE]  ComparisonFailure  	29	3	replace
582	[BUG]  [BUGGY]  tokens.add(new  String(arg));  [CE]  [FE]    MissingArgumentException    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  tokens.add(new  String(arg));  [BUGGY]      if  (     "--     ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	tokens.add(new  String(arg));	          tokens.add(arg);    tokens.add(arg);    	non-compiled	[CE]  	61	None	replace
583	[BUG]  [BUGGY]  tokens.add(new  String(arg,  opt));  [CE]  [FE]      MissingArgumentException    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  tokens.add(new  String(arg,  opt));  [BUGGY]      if  (     "--     ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	tokens.add(new  String(arg,  opt));	          tokens.add(arg);    tokens.add(arg);    	non-compiled	[CE]  	61	None	replace
584	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  if(arg.equals( "- ")||  arg.startsWith( "- "))  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	add	if(arg.equals( "- ")||  arg.startsWith( "- "))  {	  if(arg.equals(   "--   ")||    arg.startsWith(   "--   "))    {    	compilable	  [FE]  AssertionFailedError  	20	14	replace
585	[BUG]  [BUGGY]  if(arg.equals( "- ")||  arg.startsWith( "- "))  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  if(arg.equals( "- ")||  arg.startsWith( "- "))  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	if(arg.equals( "- ")||  arg.startsWith( "- "))  {	  if(arg.equals(   "--   ")||    arg.startsWith(   "--   "))    {    	compilable	  [FE]  AssertionFailedError  	20	14	replace
586	[BUG]  [BUGGY]  [FE]  UnrecognizedOptionException  [FE]    UnrecognizedOptionException    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]          tokens.add(     "-     ");    tokens.add(   ".-     ");  tokens.add( "-   ");  [BUGGY]      if  (     "--     ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	add	                tokens.add(       "-       ");        tokens.add(   ".-       ");    tokens.add( "-   ");	  	compilable	  [FE]  UnrecognizedOptionException  	37	13	add
587	[BUG]  [BUGGY]          tokens.add(     "-     ");    tokens.add(   ".-     ");  tokens.add( "-   ");  [FE]  UnrecognizedOptionException  [FE]    UnrecognizedOptionException    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]          tokens.add(     "-     ");    tokens.add(   ".-     ");  tokens.add( "-   ");  [BUGGY]      if  (     "--     ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	                tokens.add(       "-       ");        tokens.add(   ".-       ");    tokens.add( "-   ");	  	compilable	  [FE]  UnrecognizedOptionException  	37	13	add
588	[BUG]  [BUGGY]  if(arg.equals( "- ")||!stopAtNonOption.startsWith( "-- "))  {  [CE]  boolean  cannot  be  dereferenced  [FE]                ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  if(arg.equals( "- ")||!stopAtNonOption.startsWith( "-- "))  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	if(arg.equals( "- ")||!stopAtNonOption.startsWith( "-- "))  {	  if(arg.equals(arg)||!stopAtNonOption.startsWith(   "--       "))    {    	non-compiled	[CE]  boolean  cannot  be  dereferenced	21	None	replace
589	[BUG]  [BUGGY]  if(!stopAtNonOption.equals(arg)||!arg.startsWith( "-- "))  {  [CE]  boolean  cannot  be  dereferenced  [FE]                  ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  if(!stopAtNonOption.equals(arg)||!arg.startsWith( "-- "))  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	if(!stopAtNonOption.equals(arg)||!arg.startsWith( "-- "))  {	  if(arg.equals(arg)||!stopAtNonOption.startsWith(   "--       "))    {    	non-compiled	[CE]  boolean  cannot  be  dereferenced	21	None	replace
590	[BUG]  [BUGGY]  if(arg.equals(arguments[i])||!stopAtNonOption.startsWith( "-- "))  {  [CE]  boolean  cannot  be  dereferenced  [FE]                    ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  if(arg.equals(arguments[i])||!stopAtNonOption.startsWith( "-- "))  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	if(arg.equals(arguments[i])||!stopAtNonOption.startsWith( "-- "))  {	  if(arg.equals(arg)||!stopAtNonOption.startsWith(   "--       "))    {    	non-compiled	[CE]  boolean  cannot  be  dereferenced	21	None	replace
591	[BUG]  [BUGGY]  if(stopAtNonOption)  {  int  stopAtNonOption  =  stopAtNonOption?  1  :  0;  [CE]  reached  end  of  file  while  parsing  [FE]    AssertionFailedError    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  if(stopAtNonOption)  {  int  stopAtNonOption  =  stopAtNonOption?  1  :  0;  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	if(stopAtNonOption)    {    int  stopAtNonOption  =  stopAtNonOption?  1  :  0;	  	non-compiled	[CE]  reached  end  of  file  while  parsing	67	None	add
592	[BUG]  [BUGGY]  tokens  =  new  ArrayList(arg);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  tokens  =  new  ArrayList(arg);  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	tokens  =  new  ArrayList(arg);	  tokens    =    new    ArrayList();    	non-compiled	[CE]  	26	None	replace
593	[BUG]  [BUGGY]  if(!stopAtNonOption.equals(arg)||!stopAtNonOption.startsWith( "-- "))  {  [CE]  boolean  cannot  be  dereferenced  [FE]                  ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  if(!stopAtNonOption.equals(arg)||!stopAtNonOption.startsWith( "-- "))  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	if(!stopAtNonOption.equals(arg)||!stopAtNonOption.startsWith( "-- "))  {	  if(   "--       ".equals(arg)||!stopAtNonOption.startsWith(   "--       "))    {    	non-compiled	[CE]  boolean  cannot  be  dereferenced	22	None	replace
594	[BUG]  [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(arg.trim(),  arg.length());  [CE]  [FE]            ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(arg.trim(),  arg.length());  [BUGGY]      if  (     "--     ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	TokenBuffer  tokens  =  new  TokenBuffer(arg.trim(),  arg.length());	  TokenBuffer    tokens    =    new    TokenBuffer(arg.trim());    	non-compiled	[CE]  	142	None	replace
595	[BUG]  [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(arg.toString());  [CE]  [FE]              ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(arg.toString());  [BUGGY]      if  (     "--     ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	TokenBuffer  tokens  =  new  TokenBuffer(arg.toString());	  TokenBuffer    tokens    =    new    TokenBuffer(arg.trim());    	non-compiled	[CE]  	142	None	replace
596	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  if(!eatTheRest  &&  arg.equals( "- "))  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	add	if(!eatTheRest  &&  arg.equals( "- "))  {	  if(arg.equals(   "-   "))    {    	compilable	  [FE]  AssertionFailedError  	7	4	replace
597	[BUG]  [BUGGY]  if(!eatTheRest  &&  arg.equals( "- "))  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  if(!eatTheRest  &&  arg.equals( "- "))  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	if(!eatTheRest  &&  arg.equals( "- "))  {	  if(arg.equals(   "-   "))    {    	compilable	  [FE]  AssertionFailedError  	7	4	replace
598	[BUG]  [BUGGY]  if(stopAtNonOption)  {  If(!eatTheRest)  {  [CE]  [FE]            AssertionFailedError      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  if(stopAtNonOption)  {  If(!eatTheRest)  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	if(stopAtNonOption)  {  If(!eatTheRest)  {	  if(!eatTheRest)    {    If(!eatTheRest)    {    	non-compiled	[CE]  	99	None	replace
599	[BUG]  [BUGGY]  try  {  If(!stopAtNonOption)  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  try  {  If(!stopAtNonOption)  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	try  {  If(!stopAtNonOption)  {	  if(!eatTheRest)    {    If(!eatTheRest)    {    	non-compiled	[CE]  	99	None	replace
600	[BUG]  [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(arg,  Arrays.asList(tokens));  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(arg,  Arrays.asList(tokens));  [BUGGY]      if  (     "--     ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	TokenBuffer  tokens  =  new  TokenBuffer(arg,  Arrays.asList(tokens));	  TokenBuffer    tokens    =    new    TokenBuffer(arg,    tokens.length());    	non-compiled	[CE]  	45	None	replace
601	[BUG]  [BUGGY]  String[]  arg  =  options.toArray(arguments[i],  this.stopAtNonOption);  [CE]  [FE]                ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  String[]  arg  =  options.toArray(arguments[i],  this.stopAtNonOption);  [BUGGY]      if  (     "--     ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	String[]  arg  =  options.toArray(arguments[i],  this.stopAtNonOption);	  String[]    arg    =    options.toArray(arguments[i],    opt);    	non-compiled	[CE]  	148	None	replace
602	[BUG]  [BUGGY]  String[]  arg  =  options.get(opt,  null).toString();  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  String[]  arg  =  options.get(opt,  null).toString();  [BUGGY]      if  (     "--     ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	String[]  arg  =  options.get(opt,  null).toString();	  String[]    arg    =    options.get(opt,    null);    	non-compiled	[CE]  	158	None	replace
603	[BUG]  [BUGGY]  String[]  arg  =  options.get(opt,  null)+  1;  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  String[]  arg  =  options.get(opt,  null)+  1;  [BUGGY]      if  (     "--     ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	String[]  arg  =  options.get(opt,  null)+  1;	  String[]    arg    =    options.get(opt,    null);    	non-compiled	[CE]  	158	None	replace
604	[BUG]  [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(tokens,  arg.size());  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(tokens,  arg.size());  [BUGGY]      if  (     "--     ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	TokenBuffer  tokens  =  new  TokenBuffer(tokens,  arg.size());	  TokenBuffer    tokens    =    new    TokenBuffer(tokens,    opt.size());    	non-compiled	[CE]  	59	None	replace
605	[BUG]  [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(arg,  1);  [CE]  [FE]            ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(arg,  1);  [BUGGY]      if  (     "--     ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	TokenBuffer  tokens  =  new  TokenBuffer(arg,  1);	  TokenBuffer    tokens    =    new    TokenBuffer(arg,    i);    	non-compiled	[CE]  	133	None	replace
606	[BUG]  [BUGGY]  String[]  arg  =  options.toArray(arguments[i])-  1,  stopAtNonOption);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  String[]  arg  =  options.toArray(arguments[i])-  1,  stopAtNonOption);  [BUGGY]      if  (     "--     ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	String[]  arg  =  options.toArray(arguments[i])-  1,  stopAtNonOption);	  String[]    arg    =    options.toArray(arguments[i]),    stopAtNonOption);    	non-compiled	[CE]  	132	None	replace
607	[BUG]  [BUGGY]  String[]  arg  =  options.toArray(arguments[i])/  stopAtNonOption;  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  String[]  arg  =  options.toArray(arguments[i])/  stopAtNonOption;  [BUGGY]      if  (     "--     ".equals(arg))    {  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	String[]  arg  =  options.toArray(arguments[i])/  stopAtNonOption;	  String[]    arg    =    options.toArray(arguments[i]),    stopAtNonOption);    	non-compiled	[CE]  	132	None	replace
608	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  if(!stopAtNonOption  &&  arg.equals( "-- ")||  eatTheRest)  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	add	if(!stopAtNonOption  &&  arg.equals( "-- ")||  eatTheRest)  {	  if(!stopAtNonOption    &&       "--   ".equals(arg)||    eatTheRest)    {    	compilable	  [FE]  ComparisonFailure  	101	3	replace
609	[BUG]  [BUGGY]  if(!stopAtNonOption  &&  arg.equals( "-- ")||  eatTheRest)  {  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;  for  (int  i  =  0;  i  <  arguments.length;  i++)  {  String  arg  =  arguments[i];      [BUGGY]  if(!stopAtNonOption  &&  arg.equals( "-- ")||  eatTheRest)  {  [BUGGY]      {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  tokens.add(     "-     ");  }  else  if  (arg.startsWith(     "-     "))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	62	63	3	replace	if(!stopAtNonOption  &&  arg.equals( "-- ")||  eatTheRest)  {	  if(!stopAtNonOption    &&       "--   ".equals(arg)||    eatTheRest)    {    	compilable	  [FE]  ComparisonFailure  	101	3	replace
